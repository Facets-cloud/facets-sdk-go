// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Criterion criterion
//
// swagger:model Criterion
type Criterion struct {

	// metadata key
	// Required: true
	MetadataKey *string `json:"metadataKey"`

	// operator
	// Required: true
	// Enum: ["EQUALS","STARTS_WITH","ENDS_WITH","CONTAINS"]
	Operator *string `json:"operator"`

	// priority
	Priority int32 `json:"priority,omitempty"`

	// route to
	// Required: true
	RouteTo *string `json:"routeTo"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this criterion
func (m *Criterion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadataKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Criterion) validateMetadataKey(formats strfmt.Registry) error {

	if err := validate.Required("metadataKey", "body", m.MetadataKey); err != nil {
		return err
	}

	return nil
}

var criterionTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EQUALS","STARTS_WITH","ENDS_WITH","CONTAINS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		criterionTypeOperatorPropEnum = append(criterionTypeOperatorPropEnum, v)
	}
}

const (

	// CriterionOperatorEQUALS captures enum value "EQUALS"
	CriterionOperatorEQUALS string = "EQUALS"

	// CriterionOperatorSTARTSWITH captures enum value "STARTS_WITH"
	CriterionOperatorSTARTSWITH string = "STARTS_WITH"

	// CriterionOperatorENDSWITH captures enum value "ENDS_WITH"
	CriterionOperatorENDSWITH string = "ENDS_WITH"

	// CriterionOperatorCONTAINS captures enum value "CONTAINS"
	CriterionOperatorCONTAINS string = "CONTAINS"
)

// prop value enum
func (m *Criterion) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, criterionTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Criterion) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", *m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *Criterion) validateRouteTo(formats strfmt.Registry) error {

	if err := validate.Required("routeTo", "body", m.RouteTo); err != nil {
		return err
	}

	return nil
}

func (m *Criterion) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this criterion based on context it is used
func (m *Criterion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Criterion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Criterion) UnmarshalBinary(b []byte) error {
	var res Criterion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
