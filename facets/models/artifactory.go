// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Artifactory artifactory
//
// swagger:model Artifactory
type Artifactory struct {

	// artifactory type
	// Enum: ["ECR","AZURE_CONTAINER_REGISTRY","GOOGLE_ARTIFACT_REGISTRY","GOOGLE_CONTAINER_REGISTRY","NEXUS","DOCKER_HUB","JFROG","HARBOR","OTHERS"]
	ArtifactoryType string `json:"artifactoryType,omitempty"`

	// change log
	ChangeLog string `json:"changeLog,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// stacks associated
	// Unique: true
	StacksAssociated []string `json:"stacksAssociated"`

	// system defined
	SystemDefined bool `json:"systemDefined,omitempty"`

	// uri
	URI string `json:"uri,omitempty"`

	// versioning key
	VersioningKey string `json:"versioningKey,omitempty"`
}

// Validate validates this artifactory
func (m *Artifactory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactoryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStacksAssociated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var artifactoryTypeArtifactoryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ECR","AZURE_CONTAINER_REGISTRY","GOOGLE_ARTIFACT_REGISTRY","GOOGLE_CONTAINER_REGISTRY","NEXUS","DOCKER_HUB","JFROG","HARBOR","OTHERS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactoryTypeArtifactoryTypePropEnum = append(artifactoryTypeArtifactoryTypePropEnum, v)
	}
}

const (

	// ArtifactoryArtifactoryTypeECR captures enum value "ECR"
	ArtifactoryArtifactoryTypeECR string = "ECR"

	// ArtifactoryArtifactoryTypeAZURECONTAINERREGISTRY captures enum value "AZURE_CONTAINER_REGISTRY"
	ArtifactoryArtifactoryTypeAZURECONTAINERREGISTRY string = "AZURE_CONTAINER_REGISTRY"

	// ArtifactoryArtifactoryTypeGOOGLEARTIFACTREGISTRY captures enum value "GOOGLE_ARTIFACT_REGISTRY"
	ArtifactoryArtifactoryTypeGOOGLEARTIFACTREGISTRY string = "GOOGLE_ARTIFACT_REGISTRY"

	// ArtifactoryArtifactoryTypeGOOGLECONTAINERREGISTRY captures enum value "GOOGLE_CONTAINER_REGISTRY"
	ArtifactoryArtifactoryTypeGOOGLECONTAINERREGISTRY string = "GOOGLE_CONTAINER_REGISTRY"

	// ArtifactoryArtifactoryTypeNEXUS captures enum value "NEXUS"
	ArtifactoryArtifactoryTypeNEXUS string = "NEXUS"

	// ArtifactoryArtifactoryTypeDOCKERHUB captures enum value "DOCKER_HUB"
	ArtifactoryArtifactoryTypeDOCKERHUB string = "DOCKER_HUB"

	// ArtifactoryArtifactoryTypeJFROG captures enum value "JFROG"
	ArtifactoryArtifactoryTypeJFROG string = "JFROG"

	// ArtifactoryArtifactoryTypeHARBOR captures enum value "HARBOR"
	ArtifactoryArtifactoryTypeHARBOR string = "HARBOR"

	// ArtifactoryArtifactoryTypeOTHERS captures enum value "OTHERS"
	ArtifactoryArtifactoryTypeOTHERS string = "OTHERS"
)

// prop value enum
func (m *Artifactory) validateArtifactoryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, artifactoryTypeArtifactoryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Artifactory) validateArtifactoryType(formats strfmt.Registry) error {
	if swag.IsZero(m.ArtifactoryType) { // not required
		return nil
	}

	// value enum
	if err := m.validateArtifactoryTypeEnum("artifactoryType", "body", m.ArtifactoryType); err != nil {
		return err
	}

	return nil
}

func (m *Artifactory) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Artifactory) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Artifactory) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Artifactory) validateStacksAssociated(formats strfmt.Registry) error {
	if swag.IsZero(m.StacksAssociated) { // not required
		return nil
	}

	if err := validate.UniqueItems("stacksAssociated", "body", m.StacksAssociated); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this artifactory based on context it is used
func (m *Artifactory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Artifactory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Artifactory) UnmarshalBinary(b []byte) error {
	var res Artifactory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
