// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OverrideRequest override request
//
// swagger:model OverrideRequest
type OverrideRequest struct {

	// affected resources
	AffectedResources []*ResourceEnableDisableRequest `json:"affectedResources"`

	// change log
	ChangeLog string `json:"changeLog,omitempty"`

	// overrides
	Overrides map[string]interface{} `json:"overrides,omitempty"`

	// resource name
	// Required: true
	ResourceName *string `json:"resourceName"`

	// resource type
	// Required: true
	ResourceType *string `json:"resourceType"`
}

// Validate validates this override request
func (m *OverrideRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffectedResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OverrideRequest) validateAffectedResources(formats strfmt.Registry) error {
	if swag.IsZero(m.AffectedResources) { // not required
		return nil
	}

	for i := 0; i < len(m.AffectedResources); i++ {
		if swag.IsZero(m.AffectedResources[i]) { // not required
			continue
		}

		if m.AffectedResources[i] != nil {
			if err := m.AffectedResources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("affectedResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("affectedResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OverrideRequest) validateResourceName(formats strfmt.Registry) error {

	if err := validate.Required("resourceName", "body", m.ResourceName); err != nil {
		return err
	}

	return nil
}

func (m *OverrideRequest) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resourceType", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this override request based on the context it is used
func (m *OverrideRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAffectedResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OverrideRequest) contextValidateAffectedResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AffectedResources); i++ {

		if m.AffectedResources[i] != nil {

			if swag.IsZero(m.AffectedResources[i]) { // not required
				return nil
			}

			if err := m.AffectedResources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("affectedResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("affectedResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OverrideRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OverrideRequest) UnmarshalBinary(b []byte) error {
	var res OverrideRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
