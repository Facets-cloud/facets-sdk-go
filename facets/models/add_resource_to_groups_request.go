// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddResourceToGroupsRequest add resource to groups request
//
// swagger:model AddResourceToGroupsRequest
type AddResourceToGroupsRequest struct {

	// resource group ids
	// Required: true
	ResourceGroupIds []string `json:"resourceGroupIds"`

	// resource name
	// Required: true
	ResourceName *string `json:"resourceName"`

	// resource type
	// Required: true
	ResourceType *string `json:"resourceType"`

	// stack name
	// Required: true
	StackName *string `json:"stackName"`
}

// Validate validates this add resource to groups request
func (m *AddResourceToGroupsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceGroupIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddResourceToGroupsRequest) validateResourceGroupIds(formats strfmt.Registry) error {

	if err := validate.Required("resourceGroupIds", "body", m.ResourceGroupIds); err != nil {
		return err
	}

	return nil
}

func (m *AddResourceToGroupsRequest) validateResourceName(formats strfmt.Registry) error {

	if err := validate.Required("resourceName", "body", m.ResourceName); err != nil {
		return err
	}

	return nil
}

func (m *AddResourceToGroupsRequest) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resourceType", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *AddResourceToGroupsRequest) validateStackName(formats strfmt.Registry) error {

	if err := validate.Required("stackName", "body", m.StackName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add resource to groups request based on context it is used
func (m *AddResourceToGroupsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddResourceToGroupsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddResourceToGroupsRequest) UnmarshalBinary(b []byte) error {
	var res AddResourceToGroupsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
