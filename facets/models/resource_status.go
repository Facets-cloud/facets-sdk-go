// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceStatus ResourceStatus
//
// swagger:model ResourceStatus
type ResourceStatus struct {

	// cluster Id
	ClusterID string `json:"clusterId,omitempty"`

	// current artifact Url
	CurrentArtifactURL string `json:"currentArtifactUrl,omitempty"`

	// current b p version
	CurrentBPVersion string `json:"currentBPVersion,omitempty"`

	// current override version
	CurrentOverrideVersion string `json:"currentOverrideVersion,omitempty"`

	// current state
	// Enum: ["ENABLED","DISABLED"]
	CurrentState string `json:"currentState,omitempty"`

	// disabled
	Disabled bool `json:"disabled,omitempty"`

	// has state change
	HasStateChange bool `json:"hasStateChange,omitempty"`

	// health status
	HealthStatus string `json:"healthStatus,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is alpha
	IsAlpha bool `json:"isAlpha,omitempty"`

	// live artifact Url
	LiveArtifactURL string `json:"liveArtifactUrl,omitempty"`

	// live b p version
	LiveBPVersion string `json:"liveBPVersion,omitempty"`

	// live override version
	LiveOverrideVersion string `json:"liveOverrideVersion,omitempty"`

	// previous state
	// Enum: ["ENABLED","DISABLED"]
	PreviousState string `json:"previousState,omitempty"`

	// release status
	// Enum: ["QUEUED","FAILED","IN_PROGRESS","COMPLETED"]
	ReleaseStatus string `json:"releaseStatus,omitempty"`

	// release trace Id
	ReleaseTraceID string `json:"releaseTraceId,omitempty"`

	// resource name
	ResourceName string `json:"resourceName,omitempty"`

	// resource type
	ResourceType string `json:"resourceType,omitempty"`

	// sync status
	// Enum: ["IN_SYNC","OUT_OF_SYNC"]
	SyncStatus string `json:"syncStatus,omitempty"`
}

// Validate validates this resource status
func (m *ResourceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var resourceStatusTypeCurrentStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceStatusTypeCurrentStatePropEnum = append(resourceStatusTypeCurrentStatePropEnum, v)
	}
}

const (

	// ResourceStatusCurrentStateENABLED captures enum value "ENABLED"
	ResourceStatusCurrentStateENABLED string = "ENABLED"

	// ResourceStatusCurrentStateDISABLED captures enum value "DISABLED"
	ResourceStatusCurrentStateDISABLED string = "DISABLED"
)

// prop value enum
func (m *ResourceStatus) validateCurrentStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resourceStatusTypeCurrentStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResourceStatus) validateCurrentState(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentState) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentStateEnum("currentState", "body", m.CurrentState); err != nil {
		return err
	}

	return nil
}

var resourceStatusTypePreviousStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceStatusTypePreviousStatePropEnum = append(resourceStatusTypePreviousStatePropEnum, v)
	}
}

const (

	// ResourceStatusPreviousStateENABLED captures enum value "ENABLED"
	ResourceStatusPreviousStateENABLED string = "ENABLED"

	// ResourceStatusPreviousStateDISABLED captures enum value "DISABLED"
	ResourceStatusPreviousStateDISABLED string = "DISABLED"
)

// prop value enum
func (m *ResourceStatus) validatePreviousStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resourceStatusTypePreviousStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResourceStatus) validatePreviousState(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousState) { // not required
		return nil
	}

	// value enum
	if err := m.validatePreviousStateEnum("previousState", "body", m.PreviousState); err != nil {
		return err
	}

	return nil
}

var resourceStatusTypeReleaseStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["QUEUED","FAILED","IN_PROGRESS","COMPLETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceStatusTypeReleaseStatusPropEnum = append(resourceStatusTypeReleaseStatusPropEnum, v)
	}
}

const (

	// ResourceStatusReleaseStatusQUEUED captures enum value "QUEUED"
	ResourceStatusReleaseStatusQUEUED string = "QUEUED"

	// ResourceStatusReleaseStatusFAILED captures enum value "FAILED"
	ResourceStatusReleaseStatusFAILED string = "FAILED"

	// ResourceStatusReleaseStatusINPROGRESS captures enum value "IN_PROGRESS"
	ResourceStatusReleaseStatusINPROGRESS string = "IN_PROGRESS"

	// ResourceStatusReleaseStatusCOMPLETED captures enum value "COMPLETED"
	ResourceStatusReleaseStatusCOMPLETED string = "COMPLETED"
)

// prop value enum
func (m *ResourceStatus) validateReleaseStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resourceStatusTypeReleaseStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResourceStatus) validateReleaseStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleaseStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateReleaseStatusEnum("releaseStatus", "body", m.ReleaseStatus); err != nil {
		return err
	}

	return nil
}

var resourceStatusTypeSyncStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IN_SYNC","OUT_OF_SYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceStatusTypeSyncStatusPropEnum = append(resourceStatusTypeSyncStatusPropEnum, v)
	}
}

const (

	// ResourceStatusSyncStatusINSYNC captures enum value "IN_SYNC"
	ResourceStatusSyncStatusINSYNC string = "IN_SYNC"

	// ResourceStatusSyncStatusOUTOFSYNC captures enum value "OUT_OF_SYNC"
	ResourceStatusSyncStatusOUTOFSYNC string = "OUT_OF_SYNC"
)

// prop value enum
func (m *ResourceStatus) validateSyncStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resourceStatusTypeSyncStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResourceStatus) validateSyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.SyncStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateSyncStatusEnum("syncStatus", "body", m.SyncStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resource status based on context it is used
func (m *ResourceStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResourceStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceStatus) UnmarshalBinary(b []byte) error {
	var res ResourceStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
