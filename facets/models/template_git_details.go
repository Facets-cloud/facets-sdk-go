// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TemplateGitDetails Git details for the template used in Project Type
//
// swagger:model TemplateGitDetails
type TemplateGitDetails struct {

	// Account ID associated with the Git repository
	// Example: acct123
	// Required: true
	AccountID *string `json:"accountId"`

	// Git reference (branch or tag)
	// Example: main
	// Required: true
	GitRef *string `json:"gitRef"`

	// Git repository URL
	// Example: https://github.com/example/repo.git
	// Required: true
	GitURL *string `json:"gitUrl"`

	// Path within the Git repository
	// Example: /templates/project
	// Required: true
	Path *string `json:"path"`
}

// Validate validates this template git details
func (m *TemplateGitDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGitRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGitURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TemplateGitDetails) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountId", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *TemplateGitDetails) validateGitRef(formats strfmt.Registry) error {

	if err := validate.Required("gitRef", "body", m.GitRef); err != nil {
		return err
	}

	return nil
}

func (m *TemplateGitDetails) validateGitURL(formats strfmt.Registry) error {

	if err := validate.Required("gitUrl", "body", m.GitURL); err != nil {
		return err
	}

	return nil
}

func (m *TemplateGitDetails) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this template git details based on context it is used
func (m *TemplateGitDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TemplateGitDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TemplateGitDetails) UnmarshalBinary(b []byte) error {
	var res TemplateGitDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
