// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceRenameRequest resource rename request
//
// swagger:model ResourceRenameRequest
type ResourceRenameRequest struct {

	// directory
	Directory string `json:"directory,omitempty"`

	// new resource name
	// Required: true
	NewResourceName *string `json:"newResourceName"`

	// old file name
	OldFileName string `json:"oldFileName,omitempty"`

	// old resource name
	// Required: true
	OldResourceName *string `json:"oldResourceName"`

	// resource type
	// Required: true
	ResourceType *string `json:"resourceType"`
}

// Validate validates this resource rename request
func (m *ResourceRenameRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewResourceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOldResourceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceRenameRequest) validateNewResourceName(formats strfmt.Registry) error {

	if err := validate.Required("newResourceName", "body", m.NewResourceName); err != nil {
		return err
	}

	return nil
}

func (m *ResourceRenameRequest) validateOldResourceName(formats strfmt.Registry) error {

	if err := validate.Required("oldResourceName", "body", m.OldResourceName); err != nil {
		return err
	}

	return nil
}

func (m *ResourceRenameRequest) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resourceType", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resource rename request based on context it is used
func (m *ResourceRenameRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResourceRenameRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceRenameRequest) UnmarshalBinary(b []byte) error {
	var res ResourceRenameRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
