// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Setting Setting
//
// swagger:model Setting
type Setting struct {

	// allowed values
	AllowedValues []string `json:"allowedValues"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// default value
	DefaultValue interface{} `json:"defaultValue,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// entity
	// Enum: ["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]
	Entity string `json:"entity,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// max
	Max int32 `json:"max,omitempty"`

	// min
	Min int32 `json:"min,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// setting type
	// Enum: ["NUMBER","STRING","ENUM","BOOLEAN","FLOAT"]
	SettingType string `json:"settingType,omitempty"`

	// supported for clouds
	SupportedForClouds []string `json:"supportedForClouds"`
}

// Validate validates this setting
func (m *Setting) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedForClouds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Setting) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var settingTypeEntityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingTypeEntityPropEnum = append(settingTypeEntityPropEnum, v)
	}
}

const (

	// SettingEntityCLUSTER captures enum value "CLUSTER"
	SettingEntityCLUSTER string = "CLUSTER"

	// SettingEntityBLUEPRINT captures enum value "BLUE_PRINT"
	SettingEntityBLUEPRINT string = "BLUE_PRINT"

	// SettingEntityTEMPLATEINPUT captures enum value "TEMPLATE_INPUT"
	SettingEntityTEMPLATEINPUT string = "TEMPLATE_INPUT"

	// SettingEntityCONTROLPLANE captures enum value "CONTROL_PLANE"
	SettingEntityCONTROLPLANE string = "CONTROL_PLANE"

	// SettingEntityIAC captures enum value "IAC"
	SettingEntityIAC string = "IAC"

	// SettingEntityARTIFACTCI captures enum value "ARTIFACT_CI"
	SettingEntityARTIFACTCI string = "ARTIFACT_CI"

	// SettingEntityUSERGROUP captures enum value "USER_GROUP"
	SettingEntityUSERGROUP string = "USER_GROUP"

	// SettingEntityACCOUNT captures enum value "ACCOUNT"
	SettingEntityACCOUNT string = "ACCOUNT"

	// SettingEntityARTIFACTORY captures enum value "ARTIFACTORY"
	SettingEntityARTIFACTORY string = "ARTIFACTORY"
)

// prop value enum
func (m *Setting) validateEntityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, settingTypeEntityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Setting) validateEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityEnum("entity", "body", m.Entity); err != nil {
		return err
	}

	return nil
}

func (m *Setting) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var settingTypeSettingTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NUMBER","STRING","ENUM","BOOLEAN","FLOAT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingTypeSettingTypePropEnum = append(settingTypeSettingTypePropEnum, v)
	}
}

const (

	// SettingSettingTypeNUMBER captures enum value "NUMBER"
	SettingSettingTypeNUMBER string = "NUMBER"

	// SettingSettingTypeSTRING captures enum value "STRING"
	SettingSettingTypeSTRING string = "STRING"

	// SettingSettingTypeENUM captures enum value "ENUM"
	SettingSettingTypeENUM string = "ENUM"

	// SettingSettingTypeBOOLEAN captures enum value "BOOLEAN"
	SettingSettingTypeBOOLEAN string = "BOOLEAN"

	// SettingSettingTypeFLOAT captures enum value "FLOAT"
	SettingSettingTypeFLOAT string = "FLOAT"
)

// prop value enum
func (m *Setting) validateSettingTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, settingTypeSettingTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Setting) validateSettingType(formats strfmt.Registry) error {
	if swag.IsZero(m.SettingType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSettingTypeEnum("settingType", "body", m.SettingType); err != nil {
		return err
	}

	return nil
}

var settingSupportedForCloudsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","AZURE","LOCAL","GCP","KUBERNETES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingSupportedForCloudsItemsEnum = append(settingSupportedForCloudsItemsEnum, v)
	}
}

func (m *Setting) validateSupportedForCloudsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, settingSupportedForCloudsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Setting) validateSupportedForClouds(formats strfmt.Registry) error {
	if swag.IsZero(m.SupportedForClouds) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportedForClouds); i++ {

		// value enum
		if err := m.validateSupportedForCloudsItemsEnum("supportedForClouds"+"."+strconv.Itoa(i), "body", m.SupportedForClouds[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this setting based on context it is used
func (m *Setting) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Setting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Setting) UnmarshalBinary(b []byte) error {
	var res Setting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
