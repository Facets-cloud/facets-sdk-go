// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommitLog CommitLog
//
// swagger:model CommitLog
type CommitLog struct {

	// author email
	AuthorEmail string `json:"authorEmail,omitempty"`

	// author name
	AuthorName string `json:"authorName,omitempty"`

	// commit date
	// Format: date-time
	CommitDate strfmt.DateTime `json:"commitDate,omitempty"`

	// commit Id
	CommitID string `json:"commitId,omitempty"`

	// commit message
	CommitMessage string `json:"commitMessage,omitempty"`
}

// Validate validates this commit log
func (m *CommitLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommitDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommitLog) validateCommitDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CommitDate) { // not required
		return nil
	}

	if err := validate.FormatOf("commitDate", "body", "date-time", m.CommitDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this commit log based on context it is used
func (m *CommitLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommitLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommitLog) UnmarshalBinary(b []byte) error {
	var res CommitLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
