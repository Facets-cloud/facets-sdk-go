// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotificationChannel NotificationChannel
//
// swagger:model NotificationChannel
type NotificationChannel struct {

	// authorization header
	AuthorizationHeader string `json:"authorizationHeader,omitempty"`

	// channel address
	ChannelAddress string `json:"channelAddress,omitempty"`

	// channel type
	// Enum: ["SLACK","CAPILLARY_VALIDATOR","WEBHOOK","PAGER_DUTY","ZEN_DUTY","EMAIL","MS_TEAMS","MS_TEAMS_WORKFLOW"]
	ChannelType string `json:"channelType,omitempty"`

	// email addresses
	EmailAddresses []string `json:"emailAddresses"`

	// id
	ID string `json:"id,omitempty"`

	// integration key
	IntegrationKey string `json:"integrationKey,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this notification channel
func (m *NotificationChannel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var notificationChannelTypeChannelTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SLACK","CAPILLARY_VALIDATOR","WEBHOOK","PAGER_DUTY","ZEN_DUTY","EMAIL","MS_TEAMS","MS_TEAMS_WORKFLOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationChannelTypeChannelTypePropEnum = append(notificationChannelTypeChannelTypePropEnum, v)
	}
}

const (

	// NotificationChannelChannelTypeSLACK captures enum value "SLACK"
	NotificationChannelChannelTypeSLACK string = "SLACK"

	// NotificationChannelChannelTypeCAPILLARYVALIDATOR captures enum value "CAPILLARY_VALIDATOR"
	NotificationChannelChannelTypeCAPILLARYVALIDATOR string = "CAPILLARY_VALIDATOR"

	// NotificationChannelChannelTypeWEBHOOK captures enum value "WEBHOOK"
	NotificationChannelChannelTypeWEBHOOK string = "WEBHOOK"

	// NotificationChannelChannelTypePAGERDUTY captures enum value "PAGER_DUTY"
	NotificationChannelChannelTypePAGERDUTY string = "PAGER_DUTY"

	// NotificationChannelChannelTypeZENDUTY captures enum value "ZEN_DUTY"
	NotificationChannelChannelTypeZENDUTY string = "ZEN_DUTY"

	// NotificationChannelChannelTypeEMAIL captures enum value "EMAIL"
	NotificationChannelChannelTypeEMAIL string = "EMAIL"

	// NotificationChannelChannelTypeMSTEAMS captures enum value "MS_TEAMS"
	NotificationChannelChannelTypeMSTEAMS string = "MS_TEAMS"

	// NotificationChannelChannelTypeMSTEAMSWORKFLOW captures enum value "MS_TEAMS_WORKFLOW"
	NotificationChannelChannelTypeMSTEAMSWORKFLOW string = "MS_TEAMS_WORKFLOW"
)

// prop value enum
func (m *NotificationChannel) validateChannelTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, notificationChannelTypeChannelTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NotificationChannel) validateChannelType(formats strfmt.Registry) error {
	if swag.IsZero(m.ChannelType) { // not required
		return nil
	}

	// value enum
	if err := m.validateChannelTypeEnum("channelType", "body", m.ChannelType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this notification channel based on context it is used
func (m *NotificationChannel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NotificationChannel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationChannel) UnmarshalBinary(b []byte) error {
	var res NotificationChannel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
