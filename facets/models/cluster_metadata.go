// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterMetadata ClusterMetadata
//
// swagger:model ClusterMetadata
type ClusterMetadata struct {

	// cloud
	// Enum: ["AWS","AZURE","LOCAL","GCP","KUBERNETES"]
	Cloud string `json:"cloud,omitempty"`

	// cluster Id
	ClusterID string `json:"clusterId,omitempty"`

	// cluster name
	ClusterName string `json:"clusterName,omitempty"`

	// cluster state
	// Enum: ["STOPPED","RUNNING","LAUNCHING","DESTROYING","LAUNCH_FAILED","DESTROY_FAILED","UNKNOWN","SCALE_DOWN","SCALING_DOWN","SCALE_DOWN_FAILED","SCALING_UP","SCALE_UP_FAILED"]
	ClusterState string `json:"clusterState,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// stack name
	StackName string `json:"stackName,omitempty"`
}

// Validate validates this cluster metadata
func (m *ClusterMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterMetadataTypeCloudPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","AZURE","LOCAL","GCP","KUBERNETES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterMetadataTypeCloudPropEnum = append(clusterMetadataTypeCloudPropEnum, v)
	}
}

const (

	// ClusterMetadataCloudAWS captures enum value "AWS"
	ClusterMetadataCloudAWS string = "AWS"

	// ClusterMetadataCloudAZURE captures enum value "AZURE"
	ClusterMetadataCloudAZURE string = "AZURE"

	// ClusterMetadataCloudLOCAL captures enum value "LOCAL"
	ClusterMetadataCloudLOCAL string = "LOCAL"

	// ClusterMetadataCloudGCP captures enum value "GCP"
	ClusterMetadataCloudGCP string = "GCP"

	// ClusterMetadataCloudKUBERNETES captures enum value "KUBERNETES"
	ClusterMetadataCloudKUBERNETES string = "KUBERNETES"
)

// prop value enum
func (m *ClusterMetadata) validateCloudEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterMetadataTypeCloudPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterMetadata) validateCloud(formats strfmt.Registry) error {
	if swag.IsZero(m.Cloud) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloudEnum("cloud", "body", m.Cloud); err != nil {
		return err
	}

	return nil
}

var clusterMetadataTypeClusterStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STOPPED","RUNNING","LAUNCHING","DESTROYING","LAUNCH_FAILED","DESTROY_FAILED","UNKNOWN","SCALE_DOWN","SCALING_DOWN","SCALE_DOWN_FAILED","SCALING_UP","SCALE_UP_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterMetadataTypeClusterStatePropEnum = append(clusterMetadataTypeClusterStatePropEnum, v)
	}
}

const (

	// ClusterMetadataClusterStateSTOPPED captures enum value "STOPPED"
	ClusterMetadataClusterStateSTOPPED string = "STOPPED"

	// ClusterMetadataClusterStateRUNNING captures enum value "RUNNING"
	ClusterMetadataClusterStateRUNNING string = "RUNNING"

	// ClusterMetadataClusterStateLAUNCHING captures enum value "LAUNCHING"
	ClusterMetadataClusterStateLAUNCHING string = "LAUNCHING"

	// ClusterMetadataClusterStateDESTROYING captures enum value "DESTROYING"
	ClusterMetadataClusterStateDESTROYING string = "DESTROYING"

	// ClusterMetadataClusterStateLAUNCHFAILED captures enum value "LAUNCH_FAILED"
	ClusterMetadataClusterStateLAUNCHFAILED string = "LAUNCH_FAILED"

	// ClusterMetadataClusterStateDESTROYFAILED captures enum value "DESTROY_FAILED"
	ClusterMetadataClusterStateDESTROYFAILED string = "DESTROY_FAILED"

	// ClusterMetadataClusterStateUNKNOWN captures enum value "UNKNOWN"
	ClusterMetadataClusterStateUNKNOWN string = "UNKNOWN"

	// ClusterMetadataClusterStateSCALEDOWN captures enum value "SCALE_DOWN"
	ClusterMetadataClusterStateSCALEDOWN string = "SCALE_DOWN"

	// ClusterMetadataClusterStateSCALINGDOWN captures enum value "SCALING_DOWN"
	ClusterMetadataClusterStateSCALINGDOWN string = "SCALING_DOWN"

	// ClusterMetadataClusterStateSCALEDOWNFAILED captures enum value "SCALE_DOWN_FAILED"
	ClusterMetadataClusterStateSCALEDOWNFAILED string = "SCALE_DOWN_FAILED"

	// ClusterMetadataClusterStateSCALINGUP captures enum value "SCALING_UP"
	ClusterMetadataClusterStateSCALINGUP string = "SCALING_UP"

	// ClusterMetadataClusterStateSCALEUPFAILED captures enum value "SCALE_UP_FAILED"
	ClusterMetadataClusterStateSCALEUPFAILED string = "SCALE_UP_FAILED"
)

// prop value enum
func (m *ClusterMetadata) validateClusterStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterMetadataTypeClusterStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterMetadata) validateClusterState(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterState) { // not required
		return nil
	}

	// value enum
	if err := m.validateClusterStateEnum("clusterState", "body", m.ClusterState); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster metadata based on context it is used
func (m *ClusterMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterMetadata) UnmarshalBinary(b []byte) error {
	var res ClusterMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
