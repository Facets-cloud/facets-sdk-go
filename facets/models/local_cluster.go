// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LocalCluster LocalCluster
//
// swagger:model LocalCluster
type LocalCluster struct {

	// auto sign off schedule
	AutoSignOffSchedule string `json:"autoSignOffSchedule,omitempty"`

	// base cluster Id
	BaseClusterID string `json:"baseClusterId,omitempty"`

	// base cluster name
	BaseClusterName string `json:"baseClusterName,omitempty"`

	// branch
	Branch string `json:"branch,omitempty"`

	// cd pipeline parent
	CdPipelineParent string `json:"cdPipelineParent,omitempty"`

	// cloud
	// Enum: ["AWS","AZURE","LOCAL","GCP","KUBERNETES"]
	Cloud string `json:"cloud,omitempty"`

	// cloud account Id
	CloudAccountID string `json:"cloudAccountId,omitempty"`

	// cloud account secret Id
	CloudAccountSecretID string `json:"cloudAccountSecretId,omitempty"`

	// cluster code
	ClusterCode string `json:"clusterCode,omitempty"`

	// cluster state
	// Enum: ["STOPPED","RUNNING","LAUNCHING","DESTROYING","LAUNCH_FAILED","DESTROY_FAILED","UNKNOWN","SCALE_DOWN","SCALING_DOWN","SCALE_DOWN_FAILED","SCALING_UP","SCALE_UP_FAILED"]
	ClusterState string `json:"clusterState,omitempty"`

	// common environment variables
	CommonEnvironmentVariables map[string]string `json:"commonEnvironmentVariables,omitempty"`

	// component versions
	ComponentVersions map[string]string `json:"componentVersions,omitempty"`

	// configured
	Configured bool `json:"configured,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// deleted
	Deleted bool `json:"deleted,omitempty"`

	// dynamic launch
	DynamicLaunch bool `json:"dynamicLaunch,omitempty"`

	// enable auto sign off
	EnableAutoSignOff bool `json:"enableAutoSignOff,omitempty"`

	// entity type
	// Enum: ["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]
	EntityType string `json:"entityType,omitempty"`

	// global variables
	GlobalVariables map[string]string `json:"globalVariables,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is ephemeral
	IsEphemeral bool `json:"isEphemeral,omitempty"`

	// k8s requests to limits ratio
	K8sRequestsToLimitsRatio float64 `json:"k8sRequestsToLimitsRatio,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// number of versions
	NumberOfVersions int32 `json:"numberOfVersions,omitempty"`

	// pause releases
	PauseReleases bool `json:"pauseReleases,omitempty"`

	// release stream
	ReleaseStream string `json:"releaseStream,omitempty"`

	// require sign off
	RequireSignOff bool `json:"requireSignOff,omitempty"`

	// schedules
	Schedules map[string]string `json:"schedules,omitempty"`

	// secrets
	Secrets map[string]string `json:"secrets,omitempty"`

	// secrets Uid
	SecretsUID string `json:"secretsUid,omitempty"`

	// stack name
	StackName string `json:"stackName,omitempty"`

	// tz
	Tz string `json:"tz,omitempty"`

	// variables
	Variables map[string]Variables `json:"variables,omitempty"`

	// versioning key
	VersioningKey string `json:"versioningKey,omitempty"`
}

// Validate validates this local cluster
func (m *LocalCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var localClusterTypeCloudPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","AZURE","LOCAL","GCP","KUBERNETES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		localClusterTypeCloudPropEnum = append(localClusterTypeCloudPropEnum, v)
	}
}

const (

	// LocalClusterCloudAWS captures enum value "AWS"
	LocalClusterCloudAWS string = "AWS"

	// LocalClusterCloudAZURE captures enum value "AZURE"
	LocalClusterCloudAZURE string = "AZURE"

	// LocalClusterCloudLOCAL captures enum value "LOCAL"
	LocalClusterCloudLOCAL string = "LOCAL"

	// LocalClusterCloudGCP captures enum value "GCP"
	LocalClusterCloudGCP string = "GCP"

	// LocalClusterCloudKUBERNETES captures enum value "KUBERNETES"
	LocalClusterCloudKUBERNETES string = "KUBERNETES"
)

// prop value enum
func (m *LocalCluster) validateCloudEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, localClusterTypeCloudPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LocalCluster) validateCloud(formats strfmt.Registry) error {
	if swag.IsZero(m.Cloud) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloudEnum("cloud", "body", m.Cloud); err != nil {
		return err
	}

	return nil
}

var localClusterTypeClusterStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STOPPED","RUNNING","LAUNCHING","DESTROYING","LAUNCH_FAILED","DESTROY_FAILED","UNKNOWN","SCALE_DOWN","SCALING_DOWN","SCALE_DOWN_FAILED","SCALING_UP","SCALE_UP_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		localClusterTypeClusterStatePropEnum = append(localClusterTypeClusterStatePropEnum, v)
	}
}

const (

	// LocalClusterClusterStateSTOPPED captures enum value "STOPPED"
	LocalClusterClusterStateSTOPPED string = "STOPPED"

	// LocalClusterClusterStateRUNNING captures enum value "RUNNING"
	LocalClusterClusterStateRUNNING string = "RUNNING"

	// LocalClusterClusterStateLAUNCHING captures enum value "LAUNCHING"
	LocalClusterClusterStateLAUNCHING string = "LAUNCHING"

	// LocalClusterClusterStateDESTROYING captures enum value "DESTROYING"
	LocalClusterClusterStateDESTROYING string = "DESTROYING"

	// LocalClusterClusterStateLAUNCHFAILED captures enum value "LAUNCH_FAILED"
	LocalClusterClusterStateLAUNCHFAILED string = "LAUNCH_FAILED"

	// LocalClusterClusterStateDESTROYFAILED captures enum value "DESTROY_FAILED"
	LocalClusterClusterStateDESTROYFAILED string = "DESTROY_FAILED"

	// LocalClusterClusterStateUNKNOWN captures enum value "UNKNOWN"
	LocalClusterClusterStateUNKNOWN string = "UNKNOWN"

	// LocalClusterClusterStateSCALEDOWN captures enum value "SCALE_DOWN"
	LocalClusterClusterStateSCALEDOWN string = "SCALE_DOWN"

	// LocalClusterClusterStateSCALINGDOWN captures enum value "SCALING_DOWN"
	LocalClusterClusterStateSCALINGDOWN string = "SCALING_DOWN"

	// LocalClusterClusterStateSCALEDOWNFAILED captures enum value "SCALE_DOWN_FAILED"
	LocalClusterClusterStateSCALEDOWNFAILED string = "SCALE_DOWN_FAILED"

	// LocalClusterClusterStateSCALINGUP captures enum value "SCALING_UP"
	LocalClusterClusterStateSCALINGUP string = "SCALING_UP"

	// LocalClusterClusterStateSCALEUPFAILED captures enum value "SCALE_UP_FAILED"
	LocalClusterClusterStateSCALEUPFAILED string = "SCALE_UP_FAILED"
)

// prop value enum
func (m *LocalCluster) validateClusterStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, localClusterTypeClusterStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LocalCluster) validateClusterState(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterState) { // not required
		return nil
	}

	// value enum
	if err := m.validateClusterStateEnum("clusterState", "body", m.ClusterState); err != nil {
		return err
	}

	return nil
}

func (m *LocalCluster) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var localClusterTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		localClusterTypeEntityTypePropEnum = append(localClusterTypeEntityTypePropEnum, v)
	}
}

const (

	// LocalClusterEntityTypeCLUSTER captures enum value "CLUSTER"
	LocalClusterEntityTypeCLUSTER string = "CLUSTER"

	// LocalClusterEntityTypeBLUEPRINT captures enum value "BLUE_PRINT"
	LocalClusterEntityTypeBLUEPRINT string = "BLUE_PRINT"

	// LocalClusterEntityTypeTEMPLATEINPUT captures enum value "TEMPLATE_INPUT"
	LocalClusterEntityTypeTEMPLATEINPUT string = "TEMPLATE_INPUT"

	// LocalClusterEntityTypeCONTROLPLANE captures enum value "CONTROL_PLANE"
	LocalClusterEntityTypeCONTROLPLANE string = "CONTROL_PLANE"

	// LocalClusterEntityTypeIAC captures enum value "IAC"
	LocalClusterEntityTypeIAC string = "IAC"

	// LocalClusterEntityTypeARTIFACTCI captures enum value "ARTIFACT_CI"
	LocalClusterEntityTypeARTIFACTCI string = "ARTIFACT_CI"

	// LocalClusterEntityTypeUSERGROUP captures enum value "USER_GROUP"
	LocalClusterEntityTypeUSERGROUP string = "USER_GROUP"

	// LocalClusterEntityTypeACCOUNT captures enum value "ACCOUNT"
	LocalClusterEntityTypeACCOUNT string = "ACCOUNT"

	// LocalClusterEntityTypeARTIFACTORY captures enum value "ARTIFACTORY"
	LocalClusterEntityTypeARTIFACTORY string = "ARTIFACTORY"
)

// prop value enum
func (m *LocalCluster) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, localClusterTypeEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LocalCluster) validateEntityType(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("entityType", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *LocalCluster) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LocalCluster) validateVariables(formats strfmt.Registry) error {
	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	for k := range m.Variables {

		if err := validate.Required("variables"+"."+k, "body", m.Variables[k]); err != nil {
			return err
		}
		if val, ok := m.Variables[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variables" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("variables" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this local cluster based on the context it is used
func (m *LocalCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVariables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocalCluster) contextValidateVariables(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Variables {

		if val, ok := m.Variables[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LocalCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocalCluster) UnmarshalBinary(b []byte) error {
	var res LocalCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
