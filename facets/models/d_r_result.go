// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DRResult DRResult
//
// swagger:model DRResult
type DRResult struct {

	// action
	// Enum: ["CREATE_SNAPSHOT","DELETE_SNAPSHOT"]
	Action string `json:"action,omitempty"`

	// exception
	Exception string `json:"exception,omitempty"`

	// instance name
	InstanceName string `json:"instanceName,omitempty"`

	// resource type
	ResourceType string `json:"resourceType,omitempty"`

	// status
	// Enum: ["SUCCESS","FAILURE"]
	Status string `json:"status,omitempty"`
}

// Validate validates this d r result
func (m *DRResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dRResultTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATE_SNAPSHOT","DELETE_SNAPSHOT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dRResultTypeActionPropEnum = append(dRResultTypeActionPropEnum, v)
	}
}

const (

	// DRResultActionCREATESNAPSHOT captures enum value "CREATE_SNAPSHOT"
	DRResultActionCREATESNAPSHOT string = "CREATE_SNAPSHOT"

	// DRResultActionDELETESNAPSHOT captures enum value "DELETE_SNAPSHOT"
	DRResultActionDELETESNAPSHOT string = "DELETE_SNAPSHOT"
)

// prop value enum
func (m *DRResult) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dRResultTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DRResult) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

var dRResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCESS","FAILURE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dRResultTypeStatusPropEnum = append(dRResultTypeStatusPropEnum, v)
	}
}

const (

	// DRResultStatusSUCCESS captures enum value "SUCCESS"
	DRResultStatusSUCCESS string = "SUCCESS"

	// DRResultStatusFAILURE captures enum value "FAILURE"
	DRResultStatusFAILURE string = "FAILURE"
)

// prop value enum
func (m *DRResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dRResultTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DRResult) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this d r result based on context it is used
func (m *DRResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DRResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DRResult) UnmarshalBinary(b []byte) error {
	var res DRResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
