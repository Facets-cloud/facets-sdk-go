// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectTypeRequest Request model for Project Type operations.
//
// swagger:model ProjectTypeRequest
type ProjectTypeRequest struct {

	// Set of allowed clouds
	// Required: true
	// Unique: true
	AllowedClouds []string `json:"allowedClouds"`

	// Base project name
	// Example: base-project
	BaseProjectName string `json:"baseProjectName,omitempty"`

	// Description of the project type
	// Example: This is a sample project type
	Description string `json:"description,omitempty"`

	// dynamic launch
	DynamicLaunch bool `json:"dynamicLaunch,omitempty"`

	// enable no cloud environment
	EnableNoCloudEnvironment bool `json:"enableNoCloudEnvironment,omitempty"`

	// IAC tool used for the project
	// Required: true
	// Enum: ["TERRAFORM","OPENTOFU"]
	IacTool *string `json:"iacTool"`

	// iac tool version
	IacToolVersion string `json:"iacToolVersion,omitempty"`

	// Whether to include CPK8s provider
	// Example: false
	IncludeCpK8sProvider bool `json:"includeCpK8sProvider,omitempty"`

	// Whether to include tooling provider
	// Example: false
	IncludeToolingProvider bool `json:"includeToolingProvider,omitempty"`

	// Whether this is a legacy project type
	// Example: false
	Legacy bool `json:"legacy,omitempty"`

	// Allowed modules for the project
	// Unique: true
	MappedResources []*ProjectTypeMappedResource `json:"mappedResources"`

	// Name of the project type
	// Example: Cloud Project
	// Required: true
	Name *string `json:"name"`

	// template git details
	// Required: true
	TemplateGitDetails *TemplateGitDetails `json:"templateGitDetails"`

	// Use branch flag
	// Example: true
	UseBranch bool `json:"useBranch,omitempty"`
}

// Validate validates this project type request
func (m *ProjectTypeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedClouds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIacTool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMappedResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateGitDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var projectTypeRequestAllowedCloudsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","AZURE","LOCAL","GCP","KUBERNETES","NO_CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectTypeRequestAllowedCloudsItemsEnum = append(projectTypeRequestAllowedCloudsItemsEnum, v)
	}
}

func (m *ProjectTypeRequest) validateAllowedCloudsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectTypeRequestAllowedCloudsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectTypeRequest) validateAllowedClouds(formats strfmt.Registry) error {

	if err := validate.Required("allowedClouds", "body", m.AllowedClouds); err != nil {
		return err
	}

	if err := validate.UniqueItems("allowedClouds", "body", m.AllowedClouds); err != nil {
		return err
	}

	for i := 0; i < len(m.AllowedClouds); i++ {

		// value enum
		if err := m.validateAllowedCloudsItemsEnum("allowedClouds"+"."+strconv.Itoa(i), "body", m.AllowedClouds[i]); err != nil {
			return err
		}

	}

	return nil
}

var projectTypeRequestTypeIacToolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TERRAFORM","OPENTOFU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectTypeRequestTypeIacToolPropEnum = append(projectTypeRequestTypeIacToolPropEnum, v)
	}
}

const (

	// ProjectTypeRequestIacToolTERRAFORM captures enum value "TERRAFORM"
	ProjectTypeRequestIacToolTERRAFORM string = "TERRAFORM"

	// ProjectTypeRequestIacToolOPENTOFU captures enum value "OPENTOFU"
	ProjectTypeRequestIacToolOPENTOFU string = "OPENTOFU"
)

// prop value enum
func (m *ProjectTypeRequest) validateIacToolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectTypeRequestTypeIacToolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectTypeRequest) validateIacTool(formats strfmt.Registry) error {

	if err := validate.Required("iacTool", "body", m.IacTool); err != nil {
		return err
	}

	// value enum
	if err := m.validateIacToolEnum("iacTool", "body", *m.IacTool); err != nil {
		return err
	}

	return nil
}

func (m *ProjectTypeRequest) validateMappedResources(formats strfmt.Registry) error {
	if swag.IsZero(m.MappedResources) { // not required
		return nil
	}

	if err := validate.UniqueItems("mappedResources", "body", m.MappedResources); err != nil {
		return err
	}

	for i := 0; i < len(m.MappedResources); i++ {
		if swag.IsZero(m.MappedResources[i]) { // not required
			continue
		}

		if m.MappedResources[i] != nil {
			if err := m.MappedResources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappedResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mappedResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectTypeRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ProjectTypeRequest) validateTemplateGitDetails(formats strfmt.Registry) error {

	if err := validate.Required("templateGitDetails", "body", m.TemplateGitDetails); err != nil {
		return err
	}

	if m.TemplateGitDetails != nil {
		if err := m.TemplateGitDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("templateGitDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("templateGitDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this project type request based on the context it is used
func (m *ProjectTypeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMappedResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplateGitDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectTypeRequest) contextValidateMappedResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MappedResources); i++ {

		if m.MappedResources[i] != nil {

			if swag.IsZero(m.MappedResources[i]) { // not required
				return nil
			}

			if err := m.MappedResources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappedResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mappedResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectTypeRequest) contextValidateTemplateGitDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.TemplateGitDetails != nil {

		if err := m.TemplateGitDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("templateGitDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("templateGitDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectTypeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectTypeRequest) UnmarshalBinary(b []byte) error {
	var res ProjectTypeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
