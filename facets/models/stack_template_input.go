// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StackTemplateInput stack template input
//
// swagger:model StackTemplateInput
type StackTemplateInput struct {

	// cluster Id
	// Required: true
	ClusterID *string `json:"clusterId"`

	// data
	// Required: true
	Data map[string]string `json:"data"`

	// input type
	// Required: true
	InputType *string `json:"inputType"`

	// uid
	// Required: true
	UID *string `json:"uid"`
}

// Validate validates this stack template input
func (m *StackTemplateInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StackTemplateInput) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *StackTemplateInput) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	return nil
}

func (m *StackTemplateInput) validateInputType(formats strfmt.Registry) error {

	if err := validate.Required("inputType", "body", m.InputType); err != nil {
		return err
	}

	return nil
}

func (m *StackTemplateInput) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("uid", "body", m.UID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stack template input based on context it is used
func (m *StackTemplateInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StackTemplateInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StackTemplateInput) UnmarshalBinary(b []byte) error {
	var res StackTemplateInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
