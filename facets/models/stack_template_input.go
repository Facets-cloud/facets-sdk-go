// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StackTemplateInput stack template input
//
// swagger:model StackTemplateInput
type StackTemplateInput struct {

	// cluster Id
	// Required: true
	ClusterID *string `json:"clusterId"`

	// data
	// Required: true
	Data map[string]string `json:"data"`

	// entity type
	// Enum: ["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]
	EntityType string `json:"entityType,omitempty"`

	// input type
	// Required: true
	InputType *string `json:"inputType"`

	// uid
	// Required: true
	UID *string `json:"uid"`
}

// Validate validates this stack template input
func (m *StackTemplateInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StackTemplateInput) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *StackTemplateInput) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	return nil
}

var stackTemplateInputTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stackTemplateInputTypeEntityTypePropEnum = append(stackTemplateInputTypeEntityTypePropEnum, v)
	}
}

const (

	// StackTemplateInputEntityTypeCLUSTER captures enum value "CLUSTER"
	StackTemplateInputEntityTypeCLUSTER string = "CLUSTER"

	// StackTemplateInputEntityTypeBLUEPRINT captures enum value "BLUE_PRINT"
	StackTemplateInputEntityTypeBLUEPRINT string = "BLUE_PRINT"

	// StackTemplateInputEntityTypeTEMPLATEINPUT captures enum value "TEMPLATE_INPUT"
	StackTemplateInputEntityTypeTEMPLATEINPUT string = "TEMPLATE_INPUT"

	// StackTemplateInputEntityTypeCONTROLPLANE captures enum value "CONTROL_PLANE"
	StackTemplateInputEntityTypeCONTROLPLANE string = "CONTROL_PLANE"

	// StackTemplateInputEntityTypeIAC captures enum value "IAC"
	StackTemplateInputEntityTypeIAC string = "IAC"

	// StackTemplateInputEntityTypeARTIFACTCI captures enum value "ARTIFACT_CI"
	StackTemplateInputEntityTypeARTIFACTCI string = "ARTIFACT_CI"

	// StackTemplateInputEntityTypeUSERGROUP captures enum value "USER_GROUP"
	StackTemplateInputEntityTypeUSERGROUP string = "USER_GROUP"

	// StackTemplateInputEntityTypeACCOUNT captures enum value "ACCOUNT"
	StackTemplateInputEntityTypeACCOUNT string = "ACCOUNT"

	// StackTemplateInputEntityTypeARTIFACTORY captures enum value "ARTIFACTORY"
	StackTemplateInputEntityTypeARTIFACTORY string = "ARTIFACTORY"
)

// prop value enum
func (m *StackTemplateInput) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stackTemplateInputTypeEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StackTemplateInput) validateEntityType(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("entityType", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *StackTemplateInput) validateInputType(formats strfmt.Registry) error {

	if err := validate.Required("inputType", "body", m.InputType); err != nil {
		return err
	}

	return nil
}

func (m *StackTemplateInput) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("uid", "body", m.UID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stack template input based on context it is used
func (m *StackTemplateInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StackTemplateInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StackTemplateInput) UnmarshalBinary(b []byte) error {
	var res StackTemplateInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
