// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubPREvent GithubPREvent
//
// swagger:model GithubPREvent
type GithubPREvent struct {

	// action
	Action string `json:"action,omitempty"`

	// number
	Number int32 `json:"number,omitempty"`

	// pull request
	PullRequest *GithubPRField `json:"pull_request,omitempty"`
}

// Validate validates this github p r event
func (m *GithubPREvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePullRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubPREvent) validatePullRequest(formats strfmt.Registry) error {
	if swag.IsZero(m.PullRequest) { // not required
		return nil
	}

	if m.PullRequest != nil {
		if err := m.PullRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pull_request")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pull_request")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this github p r event based on the context it is used
func (m *GithubPREvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePullRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubPREvent) contextValidatePullRequest(ctx context.Context, formats strfmt.Registry) error {

	if m.PullRequest != nil {

		if swag.IsZero(m.PullRequest) { // not required
			return nil
		}

		if err := m.PullRequest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pull_request")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pull_request")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GithubPREvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubPREvent) UnmarshalBinary(b []byte) error {
	var res GithubPREvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
