// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArtifactoryOneTimeWebhook artifactory one time webhook
//
// swagger:model ArtifactoryOneTimeWebhook
type ArtifactoryOneTimeWebhook struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// delete at
	// Read Only: true
	// Format: date-time
	DeleteAt strfmt.DateTime `json:"deleteAt,omitempty"`

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// expires at
	// Read Only: true
	// Format: date-time
	ExpiresAt strfmt.DateTime `json:"expiresAt,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// stack associated
	// Unique: true
	StackAssociated []string `json:"stackAssociated"`

	// status
	// Read Only: true
	// Enum: ["WAITING","SUCCESS","FAILED","EXPIRED"]
	Status string `json:"status,omitempty"`

	// type
	// Enum: ["AZURE","GCP","AWS","KUBERNETES","ECR","OTHER_DOCKER_REGISTRY","GITHUB","GITLAB","BITBUCKET"]
	Type string `json:"type,omitempty"`
}

// Validate validates this artifactory one time webhook
func (m *ArtifactoryOneTimeWebhook) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackAssociated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactoryOneTimeWebhook) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactoryOneTimeWebhook) validateDeleteAt(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteAt) { // not required
		return nil
	}

	if err := validate.FormatOf("deleteAt", "body", "date-time", m.DeleteAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactoryOneTimeWebhook) validateExpiresAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiresAt) { // not required
		return nil
	}

	if err := validate.FormatOf("expiresAt", "body", "date-time", m.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactoryOneTimeWebhook) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactoryOneTimeWebhook) validateStackAssociated(formats strfmt.Registry) error {
	if swag.IsZero(m.StackAssociated) { // not required
		return nil
	}

	if err := validate.UniqueItems("stackAssociated", "body", m.StackAssociated); err != nil {
		return err
	}

	return nil
}

var artifactoryOneTimeWebhookTypeStatusPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WAITING","SUCCESS","FAILED","EXPIRED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactoryOneTimeWebhookTypeStatusPropEnum = append(artifactoryOneTimeWebhookTypeStatusPropEnum, v)
	}
}

const (

	// ArtifactoryOneTimeWebhookStatusWAITING captures enum value "WAITING"
	ArtifactoryOneTimeWebhookStatusWAITING string = "WAITING"

	// ArtifactoryOneTimeWebhookStatusSUCCESS captures enum value "SUCCESS"
	ArtifactoryOneTimeWebhookStatusSUCCESS string = "SUCCESS"

	// ArtifactoryOneTimeWebhookStatusFAILED captures enum value "FAILED"
	ArtifactoryOneTimeWebhookStatusFAILED string = "FAILED"

	// ArtifactoryOneTimeWebhookStatusEXPIRED captures enum value "EXPIRED"
	ArtifactoryOneTimeWebhookStatusEXPIRED string = "EXPIRED"
)

// prop value enum
func (m *ArtifactoryOneTimeWebhook) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, artifactoryOneTimeWebhookTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ArtifactoryOneTimeWebhook) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var artifactoryOneTimeWebhookTypeTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AZURE","GCP","AWS","KUBERNETES","ECR","OTHER_DOCKER_REGISTRY","GITHUB","GITLAB","BITBUCKET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactoryOneTimeWebhookTypeTypePropEnum = append(artifactoryOneTimeWebhookTypeTypePropEnum, v)
	}
}

const (

	// ArtifactoryOneTimeWebhookTypeAZURE captures enum value "AZURE"
	ArtifactoryOneTimeWebhookTypeAZURE string = "AZURE"

	// ArtifactoryOneTimeWebhookTypeGCP captures enum value "GCP"
	ArtifactoryOneTimeWebhookTypeGCP string = "GCP"

	// ArtifactoryOneTimeWebhookTypeAWS captures enum value "AWS"
	ArtifactoryOneTimeWebhookTypeAWS string = "AWS"

	// ArtifactoryOneTimeWebhookTypeKUBERNETES captures enum value "KUBERNETES"
	ArtifactoryOneTimeWebhookTypeKUBERNETES string = "KUBERNETES"

	// ArtifactoryOneTimeWebhookTypeECR captures enum value "ECR"
	ArtifactoryOneTimeWebhookTypeECR string = "ECR"

	// ArtifactoryOneTimeWebhookTypeOTHERDOCKERREGISTRY captures enum value "OTHER_DOCKER_REGISTRY"
	ArtifactoryOneTimeWebhookTypeOTHERDOCKERREGISTRY string = "OTHER_DOCKER_REGISTRY"

	// ArtifactoryOneTimeWebhookTypeGITHUB captures enum value "GITHUB"
	ArtifactoryOneTimeWebhookTypeGITHUB string = "GITHUB"

	// ArtifactoryOneTimeWebhookTypeGITLAB captures enum value "GITLAB"
	ArtifactoryOneTimeWebhookTypeGITLAB string = "GITLAB"

	// ArtifactoryOneTimeWebhookTypeBITBUCKET captures enum value "BITBUCKET"
	ArtifactoryOneTimeWebhookTypeBITBUCKET string = "BITBUCKET"
)

// prop value enum
func (m *ArtifactoryOneTimeWebhook) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, artifactoryOneTimeWebhookTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ArtifactoryOneTimeWebhook) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this artifactory one time webhook based on the context it is used
func (m *ArtifactoryOneTimeWebhook) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeleteAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpiresAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactoryOneTimeWebhook) contextValidateDeleteAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteAt", "body", m.DeleteAt); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactoryOneTimeWebhook) contextValidateExpiresAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "expiresAt", "body", m.ExpiresAt); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactoryOneTimeWebhook) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArtifactoryOneTimeWebhook) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtifactoryOneTimeWebhook) UnmarshalBinary(b []byte) error {
	var res ArtifactoryOneTimeWebhook
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
