// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeploymentStatsDto DeploymentStatsDto
//
// swagger:model DeploymentStatsDto
type DeploymentStatsDto struct {

	// date wise counts
	DateWiseCounts []*DeploymentStatusCountDto `json:"dateWiseCounts"`

	// stats
	Stats *DeploymentsStats `json:"stats,omitempty"`
}

// Validate validates this deployment stats dto
func (m *DeploymentStatsDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateWiseCounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentStatsDto) validateDateWiseCounts(formats strfmt.Registry) error {
	if swag.IsZero(m.DateWiseCounts) { // not required
		return nil
	}

	for i := 0; i < len(m.DateWiseCounts); i++ {
		if swag.IsZero(m.DateWiseCounts[i]) { // not required
			continue
		}

		if m.DateWiseCounts[i] != nil {
			if err := m.DateWiseCounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dateWiseCounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dateWiseCounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentStatsDto) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deployment stats dto based on the context it is used
func (m *DeploymentStatsDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateWiseCounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentStatsDto) contextValidateDateWiseCounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DateWiseCounts); i++ {

		if m.DateWiseCounts[i] != nil {

			if swag.IsZero(m.DateWiseCounts[i]) { // not required
				return nil
			}

			if err := m.DateWiseCounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dateWiseCounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dateWiseCounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentStatsDto) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if swag.IsZero(m.Stats) { // not required
			return nil
		}

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentStatsDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentStatsDto) UnmarshalBinary(b []byte) error {
	var res DeploymentStatsDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
