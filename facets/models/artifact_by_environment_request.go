// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArtifactByEnvironmentRequest artifact by environment request
//
// swagger:model ArtifactByEnvironmentRequest
type ArtifactByEnvironmentRequest struct {

	// application name
	// Required: true
	ApplicationName *string `json:"applicationName"`

	// artifact Uri
	// Required: true
	ArtifactURI *string `json:"artifactUri"`

	// artifactory
	Artifactory string `json:"artifactory,omitempty"`

	// cluster name
	// Required: true
	ClusterName *string `json:"clusterName"`

	// description
	Description string `json:"description,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// stack name
	// Required: true
	StackName *string `json:"stackName"`
}

// Validate validates this artifact by environment request
func (m *ArtifactByEnvironmentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactByEnvironmentRequest) validateApplicationName(formats strfmt.Registry) error {

	if err := validate.Required("applicationName", "body", m.ApplicationName); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactByEnvironmentRequest) validateArtifactURI(formats strfmt.Registry) error {

	if err := validate.Required("artifactUri", "body", m.ArtifactURI); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactByEnvironmentRequest) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("clusterName", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactByEnvironmentRequest) validateStackName(formats strfmt.Registry) error {

	if err := validate.Required("stackName", "body", m.StackName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this artifact by environment request based on context it is used
func (m *ArtifactByEnvironmentRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ArtifactByEnvironmentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtifactByEnvironmentRequest) UnmarshalBinary(b []byte) error {
	var res ArtifactByEnvironmentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
