// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpaPolicy opa policy
//
// swagger:model OpaPolicy
type OpaPolicy struct {

	// cluster ids
	ClusterIds []string `json:"clusterIds"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// disabled
	Disabled bool `json:"disabled,omitempty"`

	// flavours
	Flavours []string `json:"flavours"`

	// input data
	InputData map[string]interface{} `json:"inputData,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// package name
	PackageName string `json:"packageName,omitempty"`

	// policy code
	PolicyCode string `json:"policyCode,omitempty"`

	// policy name
	PolicyName string `json:"policyName,omitempty"`

	// policy type
	// Enum: ["RAW","TEMPLATED"]
	PolicyType string `json:"policyType,omitempty"`

	// resource type and resource names map
	ResourceTypeAndResourceNamesMap map[string][]string `json:"resourceTypeAndResourceNamesMap,omitempty"`

	// resource types
	ResourceTypes []string `json:"resourceTypes"`

	// severity
	// Enum: ["ERROR","WARNING"]
	Severity string `json:"severity,omitempty"`

	// stack name
	StackName string `json:"stackName,omitempty"`

	// template Id
	TemplateID string `json:"templateId,omitempty"`
}

// Validate validates this opa policy
func (m *OpaPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpaPolicy) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpaPolicy) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var opaPolicyTypePolicyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RAW","TEMPLATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		opaPolicyTypePolicyTypePropEnum = append(opaPolicyTypePolicyTypePropEnum, v)
	}
}

const (

	// OpaPolicyPolicyTypeRAW captures enum value "RAW"
	OpaPolicyPolicyTypeRAW string = "RAW"

	// OpaPolicyPolicyTypeTEMPLATED captures enum value "TEMPLATED"
	OpaPolicyPolicyTypeTEMPLATED string = "TEMPLATED"
)

// prop value enum
func (m *OpaPolicy) validatePolicyTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, opaPolicyTypePolicyTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OpaPolicy) validatePolicyType(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePolicyTypeEnum("policyType", "body", m.PolicyType); err != nil {
		return err
	}

	return nil
}

var opaPolicyTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ERROR","WARNING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		opaPolicyTypeSeverityPropEnum = append(opaPolicyTypeSeverityPropEnum, v)
	}
}

const (

	// OpaPolicySeverityERROR captures enum value "ERROR"
	OpaPolicySeverityERROR string = "ERROR"

	// OpaPolicySeverityWARNING captures enum value "WARNING"
	OpaPolicySeverityWARNING string = "WARNING"
)

// prop value enum
func (m *OpaPolicy) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, opaPolicyTypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OpaPolicy) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this opa policy based on context it is used
func (m *OpaPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpaPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpaPolicy) UnmarshalBinary(b []byte) error {
	var res OpaPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
