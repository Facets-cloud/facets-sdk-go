// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CallbackBody CallbackBody
//
// swagger:model CallbackBody
type CallbackBody struct {

	// app Id
	AppID string `json:"appId,omitempty"`

	// application family
	ApplicationFamily string `json:"applicationFamily,omitempty"`

	// branch
	Branch *Branch `json:"branch,omitempty"`

	// deployer build Id
	DeployerBuildID string `json:"deployerBuildId,omitempty"`

	// pr number
	PrNumber string `json:"prNumber,omitempty"`

	// properties
	Properties map[string]string `json:"properties,omitempty"`

	// quality gate
	QualityGate *QualityGate `json:"qualityGate,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this callback body
func (m *CallbackBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQualityGate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CallbackBody) validateBranch(formats strfmt.Registry) error {
	if swag.IsZero(m.Branch) { // not required
		return nil
	}

	if m.Branch != nil {
		if err := m.Branch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("branch")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackBody) validateQualityGate(formats strfmt.Registry) error {
	if swag.IsZero(m.QualityGate) { // not required
		return nil
	}

	if m.QualityGate != nil {
		if err := m.QualityGate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qualityGate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qualityGate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this callback body based on the context it is used
func (m *CallbackBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBranch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQualityGate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CallbackBody) contextValidateBranch(ctx context.Context, formats strfmt.Registry) error {

	if m.Branch != nil {

		if swag.IsZero(m.Branch) { // not required
			return nil
		}

		if err := m.Branch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("branch")
			}
			return err
		}
	}

	return nil
}

func (m *CallbackBody) contextValidateQualityGate(ctx context.Context, formats strfmt.Registry) error {

	if m.QualityGate != nil {

		if swag.IsZero(m.QualityGate) { // not required
			return nil
		}

		if err := m.QualityGate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qualityGate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qualityGate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CallbackBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CallbackBody) UnmarshalBinary(b []byte) error {
	var res CallbackBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
