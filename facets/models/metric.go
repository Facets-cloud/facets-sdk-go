// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Metric metric
//
// swagger:model Metric
type Metric struct {

	// cpu utilization
	CPUUtilization *Utilization `json:"cpuUtilization,omitempty"`

	// memory utilization
	MemoryUtilization *Utilization `json:"memoryUtilization,omitempty"`
}

// Validate validates this metric
func (m *Metric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUUtilization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryUtilization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Metric) validateCPUUtilization(formats strfmt.Registry) error {
	if swag.IsZero(m.CPUUtilization) { // not required
		return nil
	}

	if m.CPUUtilization != nil {
		if err := m.CPUUtilization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpuUtilization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cpuUtilization")
			}
			return err
		}
	}

	return nil
}

func (m *Metric) validateMemoryUtilization(formats strfmt.Registry) error {
	if swag.IsZero(m.MemoryUtilization) { // not required
		return nil
	}

	if m.MemoryUtilization != nil {
		if err := m.MemoryUtilization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memoryUtilization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memoryUtilization")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this metric based on the context it is used
func (m *Metric) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCPUUtilization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemoryUtilization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Metric) contextValidateCPUUtilization(ctx context.Context, formats strfmt.Registry) error {

	if m.CPUUtilization != nil {

		if swag.IsZero(m.CPUUtilization) { // not required
			return nil
		}

		if err := m.CPUUtilization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpuUtilization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cpuUtilization")
			}
			return err
		}
	}

	return nil
}

func (m *Metric) contextValidateMemoryUtilization(ctx context.Context, formats strfmt.Registry) error {

	if m.MemoryUtilization != nil {

		if swag.IsZero(m.MemoryUtilization) { // not required
			return nil
		}

		if err := m.MemoryUtilization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memoryUtilization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memoryUtilization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Metric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Metric) UnmarshalBinary(b []byte) error {
	var res Metric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
