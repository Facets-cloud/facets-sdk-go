// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Deployment Deployment
//
// swagger:model Deployment
type Deployment struct {

	// application family
	// Enum: ["CRM","ECOMMERCE","INTEGRATIONS","OPS"]
	ApplicationFamily string `json:"applicationFamily,omitempty"`

	// application Id
	ApplicationID string `json:"applicationId,omitempty"`

	// build Id
	BuildID string `json:"buildId,omitempty"`

	// configurations
	Configurations []*EnvironmentVariable `json:"configurations"`

	// configurations map
	ConfigurationsMap map[string]string `json:"configurationsMap,omitempty"`

	// deployed by
	DeployedBy string `json:"deployedBy,omitempty"`

	// environment
	Environment string `json:"environment,omitempty"`

	// horizontal pod autoscaler
	HorizontalPodAutoscaler *HPA `json:"horizontalPodAutoscaler,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// pod size
	// Enum: ["SMALL","LARGE","XLARGE","XXLARGE","TINY","MICRO"]
	PodSize string `json:"podSize,omitempty"`

	// replicas
	Replicas int32 `json:"replicas,omitempty"`

	// rollback enabled
	RollbackEnabled bool `json:"rollbackEnabled,omitempty"`

	// schedule
	Schedule string `json:"schedule,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this deployment
func (m *Deployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationFamily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigurations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHorizontalPodAutoscaler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deploymentTypeApplicationFamilyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CRM","ECOMMERCE","INTEGRATIONS","OPS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentTypeApplicationFamilyPropEnum = append(deploymentTypeApplicationFamilyPropEnum, v)
	}
}

const (

	// DeploymentApplicationFamilyCRM captures enum value "CRM"
	DeploymentApplicationFamilyCRM string = "CRM"

	// DeploymentApplicationFamilyECOMMERCE captures enum value "ECOMMERCE"
	DeploymentApplicationFamilyECOMMERCE string = "ECOMMERCE"

	// DeploymentApplicationFamilyINTEGRATIONS captures enum value "INTEGRATIONS"
	DeploymentApplicationFamilyINTEGRATIONS string = "INTEGRATIONS"

	// DeploymentApplicationFamilyOPS captures enum value "OPS"
	DeploymentApplicationFamilyOPS string = "OPS"
)

// prop value enum
func (m *Deployment) validateApplicationFamilyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentTypeApplicationFamilyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Deployment) validateApplicationFamily(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationFamily) { // not required
		return nil
	}

	// value enum
	if err := m.validateApplicationFamilyEnum("applicationFamily", "body", m.ApplicationFamily); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateConfigurations(formats strfmt.Registry) error {
	if swag.IsZero(m.Configurations) { // not required
		return nil
	}

	for i := 0; i < len(m.Configurations); i++ {
		if swag.IsZero(m.Configurations[i]) { // not required
			continue
		}

		if m.Configurations[i] != nil {
			if err := m.Configurations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configurations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Deployment) validateHorizontalPodAutoscaler(formats strfmt.Registry) error {
	if swag.IsZero(m.HorizontalPodAutoscaler) { // not required
		return nil
	}

	if m.HorizontalPodAutoscaler != nil {
		if err := m.HorizontalPodAutoscaler.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("horizontalPodAutoscaler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("horizontalPodAutoscaler")
			}
			return err
		}
	}

	return nil
}

var deploymentTypePodSizePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SMALL","LARGE","XLARGE","XXLARGE","TINY","MICRO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentTypePodSizePropEnum = append(deploymentTypePodSizePropEnum, v)
	}
}

const (

	// DeploymentPodSizeSMALL captures enum value "SMALL"
	DeploymentPodSizeSMALL string = "SMALL"

	// DeploymentPodSizeLARGE captures enum value "LARGE"
	DeploymentPodSizeLARGE string = "LARGE"

	// DeploymentPodSizeXLARGE captures enum value "XLARGE"
	DeploymentPodSizeXLARGE string = "XLARGE"

	// DeploymentPodSizeXXLARGE captures enum value "XXLARGE"
	DeploymentPodSizeXXLARGE string = "XXLARGE"

	// DeploymentPodSizeTINY captures enum value "TINY"
	DeploymentPodSizeTINY string = "TINY"

	// DeploymentPodSizeMICRO captures enum value "MICRO"
	DeploymentPodSizeMICRO string = "MICRO"
)

// prop value enum
func (m *Deployment) validatePodSizeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentTypePodSizePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Deployment) validatePodSize(formats strfmt.Registry) error {
	if swag.IsZero(m.PodSize) { // not required
		return nil
	}

	// value enum
	if err := m.validatePodSizeEnum("podSize", "body", m.PodSize); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this deployment based on the context it is used
func (m *Deployment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigurations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHorizontalPodAutoscaler(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Deployment) contextValidateConfigurations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Configurations); i++ {

		if m.Configurations[i] != nil {

			if swag.IsZero(m.Configurations[i]) { // not required
				return nil
			}

			if err := m.Configurations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configurations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Deployment) contextValidateHorizontalPodAutoscaler(ctx context.Context, formats strfmt.Registry) error {

	if m.HorizontalPodAutoscaler != nil {

		if swag.IsZero(m.HorizontalPodAutoscaler) { // not required
			return nil
		}

		if err := m.HorizontalPodAutoscaler.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("horizontalPodAutoscaler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("horizontalPodAutoscaler")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Deployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Deployment) UnmarshalBinary(b []byte) error {
	var res Deployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
