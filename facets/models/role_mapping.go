// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoleMapping role mapping
//
// swagger:model RoleMapping
type RoleMapping struct {

	// base role
	BaseRole bool `json:"baseRole,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// entities
	// Unique: true
	Entities []string `json:"entities"`

	// k8s cluster role
	K8sClusterRole string `json:"k8sClusterRole,omitempty"`

	// k8s role
	K8sRole string `json:"k8sRole,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// role name
	RoleName string `json:"roleName,omitempty"`

	// role type
	// Enum: ["SYSTEM_DEFINED","USER_DEFINED"]
	RoleType string `json:"roleType,omitempty"`
}

// Validate validates this role mapping
func (m *RoleMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var roleMappingEntitiesItemsEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACCOUNTS_WRITE","ACCOUNTS_DELETE","ALERTS_CONFIGURE","ARTIFACTORY_WRITE","ARTIFACTORY_DELETE","ARTIFACTS_DELETE","ARTIFACTS_WRITE","ARTIFACT_ROUTING_RULE_WRITE","ARTIFACT_ROUTING_RULE_DELETE","APPLICATION_ROLLING_RESTART","RUN_ACTION","APPLICATION_DEPLOYMENT_PROMOTE","APPLICATION_DEPLOYMENT_ABORT","BILLING_MANAGE","CHANNEL_WRITE","CHANNEL_DELETE","ENVIRONMENT_CONFIGURE","ENVIRONMENT_DELETE","ENVIRONMENT_WRITE","ENVIRONMENT_DESTROY","ENVIRONMENT_LAUNCH","OAUTH_INTEGRATION_DELETE","OAUTH_INTEGRATION_WRITE","RESOURCE_OVERRIDE","RESOURCE_WRITE","RESOURCE_DELETE","CRITICAL_RESOURCE_WRITE","RESOURCE_GROUP_READ","RESOURCE_GROUP_WRITE","RESOURCE_GROUP_DELETE","RELEASE_APPROVAL_AUTHORITY","RELEASE_FULL","RELEASE_PLAN","RELEASE_APPLY_PLAN","RELEASE_SELECTIVE","RELEASE_CUSTOM","RELEASE_MAINTENANCE","RELEASE_TERRAFORM_EXPORT","RELEASE_SCALE_UP","RELEASE_SCALE_DOWN","RELEASE_FULL_ALLOW_DESTROY","RELEASE_SELECTIVE_ALLOW_DESTROY","RELEASE_CUSTOM_ALLOW_DESTROY","RELEASE_PAUSE","STACK_CONFIGURE","STACK_WRITE","STACK_DELETE","SUBSCRIPTION_WRITE","SUBSCRIPTION_DELETE","SETTINGS_WRITE","USER_READ","USER_WRITE","USER_DELETE","TEMPLATE_WRITE","TEMPLATE_DELETE","TRASH_RESTORE","TRASH_DELETE","USER_GROUP_READ","USER_GROUP_WRITE","USER_GROUP_DELETE","CUSTOM_ROLE_READ","CUSTOM_ROLE_WRITE","CUSTOM_ROLE_DELETE","K8S_READER","K8S_DEBUGGER","K8S_CUSTOM","K8S_CREDENTIALS","CLI_ARTIFACT_PUSH","K8S_PERMISSION","PIPELINE_WRITE","ARTIFACT_CI_WRITE","ARTIFACT_CI_DELETE","PROMOTIONAL_WORKFLOW_WRITE","PROMOTIONAL_WORKFLOW_DELETE","VIEW_RESOURCE_SECRETS","COST_EXPLORER_VIEW","RELEASE_STREAM_WRITE","RELEASE_STREAM_DELETE","BLUEPRINT_TEMPLATE_WRITE","BLUEPRINT_TEMPLATE_DELETE","VPN_CONNECT","OPA_WRITE","OPA_EXECUTE","OPA_DELETE","AUDIT_LOGS_VIEW","CI_CD_CONFIGURE","VIEW_SECRETS","MAINTENANCE_WINDOW_EDIT","MODULE_READ","MODULE_WRITE","MODULE_DELETE","PROJECT_TYPE_WRITE","PROJECT_TYPE_DELETE","WEB_COMPONENT_WRITE","WEB_COMPONENT_DELETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roleMappingEntitiesItemsEnum = append(roleMappingEntitiesItemsEnum, v)
	}
}

func (m *RoleMapping) validateEntitiesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, roleMappingEntitiesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RoleMapping) validateEntities(formats strfmt.Registry) error {
	if swag.IsZero(m.Entities) { // not required
		return nil
	}

	if err := validate.UniqueItems("entities", "body", m.Entities); err != nil {
		return err
	}

	for i := 0; i < len(m.Entities); i++ {

		// value enum
		if err := m.validateEntitiesItemsEnum("entities"+"."+strconv.Itoa(i), "body", m.Entities[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *RoleMapping) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var roleMappingTypeRoleTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SYSTEM_DEFINED","USER_DEFINED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roleMappingTypeRoleTypePropEnum = append(roleMappingTypeRoleTypePropEnum, v)
	}
}

const (

	// RoleMappingRoleTypeSYSTEMDEFINED captures enum value "SYSTEM_DEFINED"
	RoleMappingRoleTypeSYSTEMDEFINED string = "SYSTEM_DEFINED"

	// RoleMappingRoleTypeUSERDEFINED captures enum value "USER_DEFINED"
	RoleMappingRoleTypeUSERDEFINED string = "USER_DEFINED"
)

// prop value enum
func (m *RoleMapping) validateRoleTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, roleMappingTypeRoleTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RoleMapping) validateRoleType(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleTypeEnum("roleType", "body", m.RoleType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this role mapping based on context it is used
func (m *RoleMapping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RoleMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoleMapping) UnmarshalBinary(b []byte) error {
	var res RoleMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
