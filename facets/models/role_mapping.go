// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoleMapping RoleMapping
//
// swagger:model RoleMapping
type RoleMapping struct {

	// base role
	BaseRole bool `json:"baseRole,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// entities
	Entities []*RBACEntity `json:"entities"`

	// k8s cluster role
	K8sClusterRole string `json:"k8sClusterRole,omitempty"`

	// k8s role
	K8sRole string `json:"k8sRole,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// role name
	RoleName string `json:"roleName,omitempty"`

	// role type
	// Enum: ["SYSTEM_DEFINED","USER_DEFINED"]
	RoleType string `json:"roleType,omitempty"`
}

// Validate validates this role mapping
func (m *RoleMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleMapping) validateEntities(formats strfmt.Registry) error {
	if swag.IsZero(m.Entities) { // not required
		return nil
	}

	for i := 0; i < len(m.Entities); i++ {
		if swag.IsZero(m.Entities[i]) { // not required
			continue
		}

		if m.Entities[i] != nil {
			if err := m.Entities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("entities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RoleMapping) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var roleMappingTypeRoleTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SYSTEM_DEFINED","USER_DEFINED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roleMappingTypeRoleTypePropEnum = append(roleMappingTypeRoleTypePropEnum, v)
	}
}

const (

	// RoleMappingRoleTypeSYSTEMDEFINED captures enum value "SYSTEM_DEFINED"
	RoleMappingRoleTypeSYSTEMDEFINED string = "SYSTEM_DEFINED"

	// RoleMappingRoleTypeUSERDEFINED captures enum value "USER_DEFINED"
	RoleMappingRoleTypeUSERDEFINED string = "USER_DEFINED"
)

// prop value enum
func (m *RoleMapping) validateRoleTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, roleMappingTypeRoleTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RoleMapping) validateRoleType(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleTypeEnum("roleType", "body", m.RoleType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this role mapping based on the context it is used
func (m *RoleMapping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleMapping) contextValidateEntities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Entities); i++ {

		if m.Entities[i] != nil {

			if swag.IsZero(m.Entities[i]) { // not required
				return nil
			}

			if err := m.Entities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("entities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoleMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoleMapping) UnmarshalBinary(b []byte) error {
	var res RoleMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
