// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CiCdDto Details required for configuring CI/CD for a project.
//
// swagger:model CiCdDto
type CiCdDto struct {

	// CI system used.
	// Example: JENKINS
	// Enum: ["BRANCH_PER_ENVIRONMENT","SINGLE_BRANCH_PROMOTION","ADVANCED"]
	CiSystem string `json:"ciSystem,omitempty"`

	// Indicate whether to map to all CI systems.
	MapToAllCis bool `json:"mapToAllCis,omitempty"`

	// Promotion workflow hierarchies.
	// Required: true
	PromotionHierarchies []*WorkflowHierarchy `json:"promotionHierarchies"`

	// Registration type for the CI/CD setup.
	// Example: GIT_REF
	// Required: true
	// Enum: ["ENVIRONMENT","RELEASE_STREAM","HYBRID"]
	RegistrationType *string `json:"registrationType"`

	// Routing rules for artifact promotion.
	// Required: true
	RoutingRules []*Criterion `json:"routingRules"`

	// Name of the project.
	// Example: my-project
	// Required: true
	StackName *string `json:"stackName"`
}

// Validate validates this ci cd dto
func (m *CiCdDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCiSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromotionHierarchies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ciCdDtoTypeCiSystemPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BRANCH_PER_ENVIRONMENT","SINGLE_BRANCH_PROMOTION","ADVANCED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ciCdDtoTypeCiSystemPropEnum = append(ciCdDtoTypeCiSystemPropEnum, v)
	}
}

const (

	// CiCdDtoCiSystemBRANCHPERENVIRONMENT captures enum value "BRANCH_PER_ENVIRONMENT"
	CiCdDtoCiSystemBRANCHPERENVIRONMENT string = "BRANCH_PER_ENVIRONMENT"

	// CiCdDtoCiSystemSINGLEBRANCHPROMOTION captures enum value "SINGLE_BRANCH_PROMOTION"
	CiCdDtoCiSystemSINGLEBRANCHPROMOTION string = "SINGLE_BRANCH_PROMOTION"

	// CiCdDtoCiSystemADVANCED captures enum value "ADVANCED"
	CiCdDtoCiSystemADVANCED string = "ADVANCED"
)

// prop value enum
func (m *CiCdDto) validateCiSystemEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ciCdDtoTypeCiSystemPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CiCdDto) validateCiSystem(formats strfmt.Registry) error {
	if swag.IsZero(m.CiSystem) { // not required
		return nil
	}

	// value enum
	if err := m.validateCiSystemEnum("ciSystem", "body", m.CiSystem); err != nil {
		return err
	}

	return nil
}

func (m *CiCdDto) validatePromotionHierarchies(formats strfmt.Registry) error {

	if err := validate.Required("promotionHierarchies", "body", m.PromotionHierarchies); err != nil {
		return err
	}

	for i := 0; i < len(m.PromotionHierarchies); i++ {
		if swag.IsZero(m.PromotionHierarchies[i]) { // not required
			continue
		}

		if m.PromotionHierarchies[i] != nil {
			if err := m.PromotionHierarchies[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("promotionHierarchies" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("promotionHierarchies" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

var ciCdDtoTypeRegistrationTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENVIRONMENT","RELEASE_STREAM","HYBRID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ciCdDtoTypeRegistrationTypePropEnum = append(ciCdDtoTypeRegistrationTypePropEnum, v)
	}
}

const (

	// CiCdDtoRegistrationTypeENVIRONMENT captures enum value "ENVIRONMENT"
	CiCdDtoRegistrationTypeENVIRONMENT string = "ENVIRONMENT"

	// CiCdDtoRegistrationTypeRELEASESTREAM captures enum value "RELEASE_STREAM"
	CiCdDtoRegistrationTypeRELEASESTREAM string = "RELEASE_STREAM"

	// CiCdDtoRegistrationTypeHYBRID captures enum value "HYBRID"
	CiCdDtoRegistrationTypeHYBRID string = "HYBRID"
)

// prop value enum
func (m *CiCdDto) validateRegistrationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ciCdDtoTypeRegistrationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CiCdDto) validateRegistrationType(formats strfmt.Registry) error {

	if err := validate.Required("registrationType", "body", m.RegistrationType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRegistrationTypeEnum("registrationType", "body", *m.RegistrationType); err != nil {
		return err
	}

	return nil
}

func (m *CiCdDto) validateRoutingRules(formats strfmt.Registry) error {

	if err := validate.Required("routingRules", "body", m.RoutingRules); err != nil {
		return err
	}

	for i := 0; i < len(m.RoutingRules); i++ {
		if swag.IsZero(m.RoutingRules[i]) { // not required
			continue
		}

		if m.RoutingRules[i] != nil {
			if err := m.RoutingRules[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("routingRules" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("routingRules" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *CiCdDto) validateStackName(formats strfmt.Registry) error {

	if err := validate.Required("stackName", "body", m.StackName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ci cd dto based on the context it is used
func (m *CiCdDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePromotionHierarchies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoutingRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CiCdDto) contextValidatePromotionHierarchies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PromotionHierarchies); i++ {

		if m.PromotionHierarchies[i] != nil {

			if swag.IsZero(m.PromotionHierarchies[i]) { // not required
				return nil
			}

			if err := m.PromotionHierarchies[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("promotionHierarchies" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("promotionHierarchies" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *CiCdDto) contextValidateRoutingRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RoutingRules); i++ {

		if m.RoutingRules[i] != nil {

			if swag.IsZero(m.RoutingRules[i]) { // not required
				return nil
			}

			if err := m.RoutingRules[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("routingRules" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("routingRules" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CiCdDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CiCdDto) UnmarshalBinary(b []byte) error {
	var res CiCdDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
