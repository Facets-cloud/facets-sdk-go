// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChangeRepresentationObject change representation object
//
// swagger:model ChangeRepresentationObject
type ChangeRepresentationObject struct {

	// action
	// Enum: ["ADDED","CHANGED","REMOVED"]
	Action string `json:"action,omitempty"`

	// change type
	// Enum: ["BLUEPRINT_CHANGES","IAC_CHANGES","OVERRIDE_CHANGES","ARTIFACT_CHANGES"]
	ChangeType string `json:"changeType,omitempty"`

	// new value
	NewValue any `json:"newValue,omitempty"`

	// old value
	OldValue any `json:"oldValue,omitempty"`
}

// Validate validates this change representation object
func (m *ChangeRepresentationObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var changeRepresentationObjectTypeActionPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ADDED","CHANGED","REMOVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		changeRepresentationObjectTypeActionPropEnum = append(changeRepresentationObjectTypeActionPropEnum, v)
	}
}

const (

	// ChangeRepresentationObjectActionADDED captures enum value "ADDED"
	ChangeRepresentationObjectActionADDED string = "ADDED"

	// ChangeRepresentationObjectActionCHANGED captures enum value "CHANGED"
	ChangeRepresentationObjectActionCHANGED string = "CHANGED"

	// ChangeRepresentationObjectActionREMOVED captures enum value "REMOVED"
	ChangeRepresentationObjectActionREMOVED string = "REMOVED"
)

// prop value enum
func (m *ChangeRepresentationObject) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, changeRepresentationObjectTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ChangeRepresentationObject) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

var changeRepresentationObjectTypeChangeTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BLUEPRINT_CHANGES","IAC_CHANGES","OVERRIDE_CHANGES","ARTIFACT_CHANGES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		changeRepresentationObjectTypeChangeTypePropEnum = append(changeRepresentationObjectTypeChangeTypePropEnum, v)
	}
}

const (

	// ChangeRepresentationObjectChangeTypeBLUEPRINTCHANGES captures enum value "BLUEPRINT_CHANGES"
	ChangeRepresentationObjectChangeTypeBLUEPRINTCHANGES string = "BLUEPRINT_CHANGES"

	// ChangeRepresentationObjectChangeTypeIACCHANGES captures enum value "IAC_CHANGES"
	ChangeRepresentationObjectChangeTypeIACCHANGES string = "IAC_CHANGES"

	// ChangeRepresentationObjectChangeTypeOVERRIDECHANGES captures enum value "OVERRIDE_CHANGES"
	ChangeRepresentationObjectChangeTypeOVERRIDECHANGES string = "OVERRIDE_CHANGES"

	// ChangeRepresentationObjectChangeTypeARTIFACTCHANGES captures enum value "ARTIFACT_CHANGES"
	ChangeRepresentationObjectChangeTypeARTIFACTCHANGES string = "ARTIFACT_CHANGES"
)

// prop value enum
func (m *ChangeRepresentationObject) validateChangeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, changeRepresentationObjectTypeChangeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ChangeRepresentationObject) validateChangeType(formats strfmt.Registry) error {
	if swag.IsZero(m.ChangeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateChangeTypeEnum("changeType", "body", m.ChangeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this change representation object based on context it is used
func (m *ChangeRepresentationObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChangeRepresentationObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChangeRepresentationObject) UnmarshalBinary(b []byte) error {
	var res ChangeRepresentationObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
