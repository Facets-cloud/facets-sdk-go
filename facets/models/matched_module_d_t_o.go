// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MatchedModuleDTO MatchedModuleDTO
//
// swagger:model MatchedModuleDTO
type MatchedModuleDTO struct {

	// modules
	Modules map[string]ModuleDTO `json:"modules,omitempty"`

	// resources
	Resources map[string]MatchedResourceDTO `json:"resources,omitempty"`
}

// Validate validates this matched module d t o
func (m *MatchedModuleDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MatchedModuleDTO) validateModules(formats strfmt.Registry) error {
	if swag.IsZero(m.Modules) { // not required
		return nil
	}

	for k := range m.Modules {

		if err := validate.Required("modules"+"."+k, "body", m.Modules[k]); err != nil {
			return err
		}
		if val, ok := m.Modules[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modules" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("modules" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *MatchedModuleDTO) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for k := range m.Resources {

		if err := validate.Required("resources"+"."+k, "body", m.Resources[k]); err != nil {
			return err
		}
		if val, ok := m.Resources[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this matched module d t o based on the context it is used
func (m *MatchedModuleDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateModules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MatchedModuleDTO) contextValidateModules(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Modules {

		if val, ok := m.Modules[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *MatchedModuleDTO) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Resources {

		if val, ok := m.Resources[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MatchedModuleDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MatchedModuleDTO) UnmarshalBinary(b []byte) error {
	var res MatchedModuleDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
