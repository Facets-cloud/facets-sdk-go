// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResourceReleaseImpact resource release impact
//
// swagger:model ResourceReleaseImpact
type ResourceReleaseImpact struct {

	// changes
	Changes []*Change `json:"changes"`

	// cluster Id
	ClusterID string `json:"clusterId,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// release details
	ReleaseDetails *ReleaseDetails `json:"releaseDetails,omitempty"`

	// resource name
	ResourceName string `json:"resourceName,omitempty"`

	// resource type
	ResourceType string `json:"resourceType,omitempty"`
}

// Validate validates this resource release impact
func (m *ResourceReleaseImpact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceReleaseImpact) validateChanges(formats strfmt.Registry) error {
	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResourceReleaseImpact) validateReleaseDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleaseDetails) { // not required
		return nil
	}

	if m.ReleaseDetails != nil {
		if err := m.ReleaseDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("releaseDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this resource release impact based on the context it is used
func (m *ResourceReleaseImpact) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReleaseDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceReleaseImpact) contextValidateChanges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Changes); i++ {

		if m.Changes[i] != nil {

			if swag.IsZero(m.Changes[i]) { // not required
				return nil
			}

			if err := m.Changes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResourceReleaseImpact) contextValidateReleaseDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ReleaseDetails != nil {

		if swag.IsZero(m.ReleaseDetails) { // not required
			return nil
		}

		if err := m.ReleaseDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("releaseDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceReleaseImpact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceReleaseImpact) UnmarshalBinary(b []byte) error {
	var res ResourceReleaseImpact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
