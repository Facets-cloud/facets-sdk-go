// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TFOutputResponseDTO t f output response d t o
//
// swagger:model TFOutputResponseDTO
type TFOutputResponseDTO struct {

	// facets yaml
	FacetsYaml string `json:"facetsYaml,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// inferred from module
	InferredFromModule bool `json:"inferredFromModule,omitempty"`

	// lookup tree
	LookupTree string `json:"lookupTree,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// properties
	Properties JSONNode `json:"properties,omitempty"`

	// providers
	// Unique: true
	Providers []*TFProvider `json:"providers"`

	// source
	// Enum: ["BUILT_IN","CUSTOM"]
	Source string `json:"source,omitempty"`
}

// Validate validates this t f output response d t o
func (m *TFOutputResponseDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProviders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TFOutputResponseDTO) validateProviders(formats strfmt.Registry) error {
	if swag.IsZero(m.Providers) { // not required
		return nil
	}

	if err := validate.UniqueItems("providers", "body", m.Providers); err != nil {
		return err
	}

	for i := 0; i < len(m.Providers); i++ {
		if swag.IsZero(m.Providers[i]) { // not required
			continue
		}

		if m.Providers[i] != nil {
			if err := m.Providers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("providers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("providers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var tFOutputResponseDTOTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BUILT_IN","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tFOutputResponseDTOTypeSourcePropEnum = append(tFOutputResponseDTOTypeSourcePropEnum, v)
	}
}

const (

	// TFOutputResponseDTOSourceBUILTIN captures enum value "BUILT_IN"
	TFOutputResponseDTOSourceBUILTIN string = "BUILT_IN"

	// TFOutputResponseDTOSourceCUSTOM captures enum value "CUSTOM"
	TFOutputResponseDTOSourceCUSTOM string = "CUSTOM"
)

// prop value enum
func (m *TFOutputResponseDTO) validateSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tFOutputResponseDTOTypeSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TFOutputResponseDTO) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceEnum("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this t f output response d t o based on the context it is used
func (m *TFOutputResponseDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProviders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TFOutputResponseDTO) contextValidateProviders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Providers); i++ {

		if m.Providers[i] != nil {

			if swag.IsZero(m.Providers[i]) { // not required
				return nil
			}

			if err := m.Providers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("providers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("providers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TFOutputResponseDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TFOutputResponseDTO) UnmarshalBinary(b []byte) error {
	var res TFOutputResponseDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
