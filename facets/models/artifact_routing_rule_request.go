// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArtifactRoutingRuleRequest artifact routing rule request
//
// swagger:model ArtifactRoutingRuleRequest
type ArtifactRoutingRuleRequest struct {

	// ci system
	// Enum: ["BRANCH_PER_ENVIRONMENT","SINGLE_BRANCH_PROMOTION","ADVANCED"]
	CiSystem string `json:"ciSystem,omitempty"`

	// criteria
	// Required: true
	Criteria []*Criterion `json:"criteria"`

	// id
	ID string `json:"id,omitempty"`

	// is default
	IsDefault bool `json:"isDefault,omitempty"`

	// registration type
	// Required: true
	// Enum: ["ENVIRONMENT","RELEASE_STREAM","HYBRID"]
	RegistrationType *string `json:"registrationType"`

	// rule name
	// Required: true
	RuleName *string `json:"ruleName"`

	// stack name
	// Required: true
	StackName *string `json:"stackName"`
}

// Validate validates this artifact routing rule request
func (m *ArtifactRoutingRuleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCiSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var artifactRoutingRuleRequestTypeCiSystemPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BRANCH_PER_ENVIRONMENT","SINGLE_BRANCH_PROMOTION","ADVANCED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactRoutingRuleRequestTypeCiSystemPropEnum = append(artifactRoutingRuleRequestTypeCiSystemPropEnum, v)
	}
}

const (

	// ArtifactRoutingRuleRequestCiSystemBRANCHPERENVIRONMENT captures enum value "BRANCH_PER_ENVIRONMENT"
	ArtifactRoutingRuleRequestCiSystemBRANCHPERENVIRONMENT string = "BRANCH_PER_ENVIRONMENT"

	// ArtifactRoutingRuleRequestCiSystemSINGLEBRANCHPROMOTION captures enum value "SINGLE_BRANCH_PROMOTION"
	ArtifactRoutingRuleRequestCiSystemSINGLEBRANCHPROMOTION string = "SINGLE_BRANCH_PROMOTION"

	// ArtifactRoutingRuleRequestCiSystemADVANCED captures enum value "ADVANCED"
	ArtifactRoutingRuleRequestCiSystemADVANCED string = "ADVANCED"
)

// prop value enum
func (m *ArtifactRoutingRuleRequest) validateCiSystemEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, artifactRoutingRuleRequestTypeCiSystemPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ArtifactRoutingRuleRequest) validateCiSystem(formats strfmt.Registry) error {
	if swag.IsZero(m.CiSystem) { // not required
		return nil
	}

	// value enum
	if err := m.validateCiSystemEnum("ciSystem", "body", m.CiSystem); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactRoutingRuleRequest) validateCriteria(formats strfmt.Registry) error {

	if err := validate.Required("criteria", "body", m.Criteria); err != nil {
		return err
	}

	for i := 0; i < len(m.Criteria); i++ {
		if swag.IsZero(m.Criteria[i]) { // not required
			continue
		}

		if m.Criteria[i] != nil {
			if err := m.Criteria[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("criteria" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

var artifactRoutingRuleRequestTypeRegistrationTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENVIRONMENT","RELEASE_STREAM","HYBRID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactRoutingRuleRequestTypeRegistrationTypePropEnum = append(artifactRoutingRuleRequestTypeRegistrationTypePropEnum, v)
	}
}

const (

	// ArtifactRoutingRuleRequestRegistrationTypeENVIRONMENT captures enum value "ENVIRONMENT"
	ArtifactRoutingRuleRequestRegistrationTypeENVIRONMENT string = "ENVIRONMENT"

	// ArtifactRoutingRuleRequestRegistrationTypeRELEASESTREAM captures enum value "RELEASE_STREAM"
	ArtifactRoutingRuleRequestRegistrationTypeRELEASESTREAM string = "RELEASE_STREAM"

	// ArtifactRoutingRuleRequestRegistrationTypeHYBRID captures enum value "HYBRID"
	ArtifactRoutingRuleRequestRegistrationTypeHYBRID string = "HYBRID"
)

// prop value enum
func (m *ArtifactRoutingRuleRequest) validateRegistrationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, artifactRoutingRuleRequestTypeRegistrationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ArtifactRoutingRuleRequest) validateRegistrationType(formats strfmt.Registry) error {

	if err := validate.Required("registrationType", "body", m.RegistrationType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRegistrationTypeEnum("registrationType", "body", *m.RegistrationType); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactRoutingRuleRequest) validateRuleName(formats strfmt.Registry) error {

	if err := validate.Required("ruleName", "body", m.RuleName); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactRoutingRuleRequest) validateStackName(formats strfmt.Registry) error {

	if err := validate.Required("stackName", "body", m.StackName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this artifact routing rule request based on the context it is used
func (m *ArtifactRoutingRuleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCriteria(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactRoutingRuleRequest) contextValidateCriteria(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Criteria); i++ {

		if m.Criteria[i] != nil {

			if swag.IsZero(m.Criteria[i]) { // not required
				return nil
			}

			if err := m.Criteria[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("criteria" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArtifactRoutingRuleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtifactRoutingRuleRequest) UnmarshalBinary(b []byte) error {
	var res ArtifactRoutingRuleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
