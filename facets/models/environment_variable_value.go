// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvironmentVariableValue Variable/secret value in a specific environment
//
// swagger:model EnvironmentVariableValue
type EnvironmentVariableValue struct {

	// Environment ID
	// Example: prod-env-123
	ClusterID string `json:"clusterId,omitempty"`

	// Environment name
	// Example: production
	EnvironmentName string `json:"environmentName,omitempty"`

	// Status indicating if value is overridden, default, or not set
	// Enum: ["NOT_SET","OVERRIDDEN","NO_ACCESS"]
	Status string `json:"status,omitempty"`

	// Value of the variable/secret
	// Example: actual_password
	Value string `json:"value,omitempty"`
}

// Validate validates this environment variable value
func (m *EnvironmentVariableValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var environmentVariableValueTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOT_SET","OVERRIDDEN","NO_ACCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		environmentVariableValueTypeStatusPropEnum = append(environmentVariableValueTypeStatusPropEnum, v)
	}
}

const (

	// EnvironmentVariableValueStatusNOTSET captures enum value "NOT_SET"
	EnvironmentVariableValueStatusNOTSET string = "NOT_SET"

	// EnvironmentVariableValueStatusOVERRIDDEN captures enum value "OVERRIDDEN"
	EnvironmentVariableValueStatusOVERRIDDEN string = "OVERRIDDEN"

	// EnvironmentVariableValueStatusNOACCESS captures enum value "NO_ACCESS"
	EnvironmentVariableValueStatusNOACCESS string = "NO_ACCESS"
)

// prop value enum
func (m *EnvironmentVariableValue) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, environmentVariableValueTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EnvironmentVariableValue) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this environment variable value based on context it is used
func (m *EnvironmentVariableValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentVariableValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentVariableValue) UnmarshalBinary(b []byte) error {
	var res EnvironmentVariableValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
