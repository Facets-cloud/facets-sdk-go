// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectTypeResponse project type response
//
// swagger:model ProjectTypeResponse
type ProjectTypeResponse struct {

	// allowed clouds
	// Unique: true
	AllowedClouds []string `json:"allowedClouds"`

	// associated blueprints
	// Unique: true
	AssociatedBlueprints []string `json:"associatedBlueprints"`

	// base project name
	BaseProjectName string `json:"baseProjectName,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// dynamic launch
	DynamicLaunch bool `json:"dynamicLaunch,omitempty"`

	// enable no cloud environment
	EnableNoCloudEnvironment bool `json:"enableNoCloudEnvironment,omitempty"`

	// iac tool
	// Enum: ["TERRAFORM","OPENTOFU"]
	IacTool string `json:"iacTool,omitempty"`

	// iac tool version
	IacToolVersion string `json:"iacToolVersion,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// include cp k8s provider
	IncludeCpK8sProvider bool `json:"includeCpK8sProvider,omitempty"`

	// include tooling provider
	IncludeToolingProvider bool `json:"includeToolingProvider,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// legacy
	Legacy bool `json:"legacy,omitempty"`

	// mapped resources
	// Unique: true
	MappedResources []*ProjectTypeMappedResource `json:"mappedResources"`

	// name
	Name string `json:"name,omitempty"`

	// template git details
	TemplateGitDetails *TemplateGitDetails `json:"templateGitDetails,omitempty"`
}

// Validate validates this project type response
func (m *ProjectTypeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedClouds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociatedBlueprints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIacTool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMappedResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateGitDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var projectTypeResponseAllowedCloudsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","AZURE","LOCAL","GCP","KUBERNETES","NO_CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectTypeResponseAllowedCloudsItemsEnum = append(projectTypeResponseAllowedCloudsItemsEnum, v)
	}
}

func (m *ProjectTypeResponse) validateAllowedCloudsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectTypeResponseAllowedCloudsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectTypeResponse) validateAllowedClouds(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowedClouds) { // not required
		return nil
	}

	if err := validate.UniqueItems("allowedClouds", "body", m.AllowedClouds); err != nil {
		return err
	}

	for i := 0; i < len(m.AllowedClouds); i++ {

		// value enum
		if err := m.validateAllowedCloudsItemsEnum("allowedClouds"+"."+strconv.Itoa(i), "body", m.AllowedClouds[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ProjectTypeResponse) validateAssociatedBlueprints(formats strfmt.Registry) error {
	if swag.IsZero(m.AssociatedBlueprints) { // not required
		return nil
	}

	if err := validate.UniqueItems("associatedBlueprints", "body", m.AssociatedBlueprints); err != nil {
		return err
	}

	return nil
}

func (m *ProjectTypeResponse) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var projectTypeResponseTypeIacToolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TERRAFORM","OPENTOFU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectTypeResponseTypeIacToolPropEnum = append(projectTypeResponseTypeIacToolPropEnum, v)
	}
}

const (

	// ProjectTypeResponseIacToolTERRAFORM captures enum value "TERRAFORM"
	ProjectTypeResponseIacToolTERRAFORM string = "TERRAFORM"

	// ProjectTypeResponseIacToolOPENTOFU captures enum value "OPENTOFU"
	ProjectTypeResponseIacToolOPENTOFU string = "OPENTOFU"
)

// prop value enum
func (m *ProjectTypeResponse) validateIacToolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectTypeResponseTypeIacToolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectTypeResponse) validateIacTool(formats strfmt.Registry) error {
	if swag.IsZero(m.IacTool) { // not required
		return nil
	}

	// value enum
	if err := m.validateIacToolEnum("iacTool", "body", m.IacTool); err != nil {
		return err
	}

	return nil
}

func (m *ProjectTypeResponse) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectTypeResponse) validateMappedResources(formats strfmt.Registry) error {
	if swag.IsZero(m.MappedResources) { // not required
		return nil
	}

	if err := validate.UniqueItems("mappedResources", "body", m.MappedResources); err != nil {
		return err
	}

	for i := 0; i < len(m.MappedResources); i++ {
		if swag.IsZero(m.MappedResources[i]) { // not required
			continue
		}

		if m.MappedResources[i] != nil {
			if err := m.MappedResources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappedResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mappedResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectTypeResponse) validateTemplateGitDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.TemplateGitDetails) { // not required
		return nil
	}

	if m.TemplateGitDetails != nil {
		if err := m.TemplateGitDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("templateGitDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("templateGitDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this project type response based on the context it is used
func (m *ProjectTypeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMappedResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplateGitDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectTypeResponse) contextValidateMappedResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MappedResources); i++ {

		if m.MappedResources[i] != nil {

			if swag.IsZero(m.MappedResources[i]) { // not required
				return nil
			}

			if err := m.MappedResources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappedResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mappedResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectTypeResponse) contextValidateTemplateGitDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.TemplateGitDetails != nil {

		if swag.IsZero(m.TemplateGitDetails) { // not required
			return nil
		}

		if err := m.TemplateGitDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("templateGitDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("templateGitDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectTypeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectTypeResponse) UnmarshalBinary(b []byte) error {
	var res ProjectTypeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
