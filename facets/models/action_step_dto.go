// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActionStepDto Represents a single step within an action run
//
// swagger:model ActionStepDto
type ActionStepDto struct {

	// Name of the container running this step
	// Example: step-build
	ContainerName string `json:"containerName,omitempty"`

	// Exit code of the step
	// Example: 0
	ExitCode int32 `json:"exitCode,omitempty"`

	// Timestamp when the step finished
	// Format: date-time
	FinishedAt strfmt.DateTime `json:"finishedAt,omitempty"`

	// Name of the step
	// Example: build-step
	// Required: true
	Name *string `json:"name"`

	// Name of the pod running this step
	// Example: build-action-run-xyz123-pod-abc456
	PodName string `json:"podName,omitempty"`

	// Timestamp when the step started
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// Represents the status of a step within an action run
	// Example: COMPLETED
	// Required: true
	// Enum: ["WAITING","RUNNING","COMPLETED","ERROR","PENDING"]
	Status *string `json:"status"`

	// Reason for termination if the step did not complete successfully
	// Example: Error
	TerminationReason string `json:"terminationReason,omitempty"`
}

// Validate validates this action step dto
func (m *ActionStepDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActionStepDto) validateFinishedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.FinishedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("finishedAt", "body", "date-time", m.FinishedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ActionStepDto) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ActionStepDto) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var actionStepDtoTypeStatusPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WAITING","RUNNING","COMPLETED","ERROR","PENDING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionStepDtoTypeStatusPropEnum = append(actionStepDtoTypeStatusPropEnum, v)
	}
}

const (

	// ActionStepDtoStatusWAITING captures enum value "WAITING"
	ActionStepDtoStatusWAITING string = "WAITING"

	// ActionStepDtoStatusRUNNING captures enum value "RUNNING"
	ActionStepDtoStatusRUNNING string = "RUNNING"

	// ActionStepDtoStatusCOMPLETED captures enum value "COMPLETED"
	ActionStepDtoStatusCOMPLETED string = "COMPLETED"

	// ActionStepDtoStatusERROR captures enum value "ERROR"
	ActionStepDtoStatusERROR string = "ERROR"

	// ActionStepDtoStatusPENDING captures enum value "PENDING"
	ActionStepDtoStatusPENDING string = "PENDING"
)

// prop value enum
func (m *ActionStepDto) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, actionStepDtoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActionStepDto) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this action step dto based on context it is used
func (m *ActionStepDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ActionStepDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActionStepDto) UnmarshalBinary(b []byte) error {
	var res ActionStepDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
