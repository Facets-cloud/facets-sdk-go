// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentContext deployment context
//
// swagger:model DeploymentContext
type DeploymentContext struct {

	// artifactory details
	ArtifactoryDetails []*Artifactory `json:"artifactoryDetails"`

	// artifacts
	Artifacts map[string]map[string]Artifact `json:"artifacts,omitempty"`

	// can skip approval
	CanSkipApproval bool `json:"canSkipApproval,omitempty"`

	// extra env
	ExtraEnv map[string]string `json:"extraEnv,omitempty"`

	// maintenance window
	MaintenanceWindow *MaintenanceWindowDTO `json:"maintenanceWindow,omitempty"`

	// modules
	Modules map[string]ModuleDTO `json:"modules,omitempty"`

	// overrides
	Overrides []*OverrideObject `json:"overrides"`

	// parallel release
	ParallelRelease bool `json:"parallelRelease,omitempty"`

	// project type
	ProjectType *ProjectType `json:"projectType,omitempty"`

	// provided resources
	ProvidedResources *ProvidedResources `json:"providedResources,omitempty"`

	// provided secrets Id
	ProvidedSecretsID string `json:"providedSecretsId,omitempty"`

	// resource metadata
	ResourceMetadata map[string][]ResourceMetadata `json:"resourceMetadata,omitempty"`

	// resources
	Resources map[string]MatchedResourceDTO `json:"resources,omitempty"`

	// secrets context
	SecretsContext *SecretsContextDTO `json:"secretsContext,omitempty"`

	// settings
	Settings map[string]map[string]any `json:"settings,omitempty"`

	// snapshots
	Snapshots map[string]map[string]SnapshotInfo `json:"snapshots,omitempty"`

	// stack source version
	StackSourceVersion string `json:"stackSourceVersion,omitempty"`

	// template inputs
	TemplateInputs map[string][]StackTemplateInput `json:"templateInputs,omitempty"`

	// tf version
	TfVersion *TfVersion `json:"tfVersion,omitempty"`
}

// Validate validates this deployment context
func (m *DeploymentContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactoryDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenanceWindow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrides(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvidedResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretsContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTfVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentContext) validateArtifactoryDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ArtifactoryDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.ArtifactoryDetails); i++ {
		if swag.IsZero(m.ArtifactoryDetails[i]) { // not required
			continue
		}

		if m.ArtifactoryDetails[i] != nil {
			if err := m.ArtifactoryDetails[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("artifactoryDetails" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("artifactoryDetails" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *DeploymentContext) validateArtifacts(formats strfmt.Registry) error {
	if swag.IsZero(m.Artifacts) { // not required
		return nil
	}

	for k := range m.Artifacts {

		for kk := range m.Artifacts[k] {

			if err := validate.Required("artifacts"+"."+k+"."+kk, "body", m.Artifacts[k][kk]); err != nil {
				return err
			}
			if val, ok := m.Artifacts[k][kk]; ok {
				if err := val.Validate(formats); err != nil {
					ve := new(errors.Validation)
					if stderrors.As(err, &ve) {
						return ve.ValidateName("artifacts" + "." + k + "." + kk)
					}
					ce := new(errors.CompositeError)
					if stderrors.As(err, &ce) {
						return ce.ValidateName("artifacts" + "." + k + "." + kk)
					}

					return err
				}
			}

		}

	}

	return nil
}

func (m *DeploymentContext) validateMaintenanceWindow(formats strfmt.Registry) error {
	if swag.IsZero(m.MaintenanceWindow) { // not required
		return nil
	}

	if m.MaintenanceWindow != nil {
		if err := m.MaintenanceWindow.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("maintenanceWindow")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("maintenanceWindow")
			}

			return err
		}
	}

	return nil
}

func (m *DeploymentContext) validateModules(formats strfmt.Registry) error {
	if swag.IsZero(m.Modules) { // not required
		return nil
	}

	for k := range m.Modules {

		if err := validate.Required("modules"+"."+k, "body", m.Modules[k]); err != nil {
			return err
		}
		if val, ok := m.Modules[k]; ok {
			if err := val.Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("modules" + "." + k)
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("modules" + "." + k)
				}

				return err
			}
		}

	}

	return nil
}

func (m *DeploymentContext) validateOverrides(formats strfmt.Registry) error {
	if swag.IsZero(m.Overrides) { // not required
		return nil
	}

	for i := 0; i < len(m.Overrides); i++ {
		if swag.IsZero(m.Overrides[i]) { // not required
			continue
		}

		if m.Overrides[i] != nil {
			if err := m.Overrides[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("overrides" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("overrides" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *DeploymentContext) validateProjectType(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectType) { // not required
		return nil
	}

	if m.ProjectType != nil {
		if err := m.ProjectType.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("projectType")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("projectType")
			}

			return err
		}
	}

	return nil
}

func (m *DeploymentContext) validateProvidedResources(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvidedResources) { // not required
		return nil
	}

	if m.ProvidedResources != nil {
		if err := m.ProvidedResources.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("providedResources")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("providedResources")
			}

			return err
		}
	}

	return nil
}

func (m *DeploymentContext) validateResourceMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceMetadata) { // not required
		return nil
	}

	for k := range m.ResourceMetadata {

		if err := validate.Required("resourceMetadata"+"."+k, "body", m.ResourceMetadata[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.ResourceMetadata[k]); i++ {

			if err := m.ResourceMetadata[k][i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("resourceMetadata" + "." + k + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("resourceMetadata" + "." + k + "." + strconv.Itoa(i))
				}

				return err
			}

		}

	}

	return nil
}

func (m *DeploymentContext) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for k := range m.Resources {

		if err := validate.Required("resources"+"."+k, "body", m.Resources[k]); err != nil {
			return err
		}
		if val, ok := m.Resources[k]; ok {
			if err := val.Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("resources" + "." + k)
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("resources" + "." + k)
				}

				return err
			}
		}

	}

	return nil
}

func (m *DeploymentContext) validateSecretsContext(formats strfmt.Registry) error {
	if swag.IsZero(m.SecretsContext) { // not required
		return nil
	}

	if m.SecretsContext != nil {
		if err := m.SecretsContext.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("secretsContext")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("secretsContext")
			}

			return err
		}
	}

	return nil
}

func (m *DeploymentContext) validateSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.Snapshots) { // not required
		return nil
	}

	for k := range m.Snapshots {

		for kk := range m.Snapshots[k] {

			if err := validate.Required("snapshots"+"."+k+"."+kk, "body", m.Snapshots[k][kk]); err != nil {
				return err
			}
			if val, ok := m.Snapshots[k][kk]; ok {
				if err := val.Validate(formats); err != nil {
					ve := new(errors.Validation)
					if stderrors.As(err, &ve) {
						return ve.ValidateName("snapshots" + "." + k + "." + kk)
					}
					ce := new(errors.CompositeError)
					if stderrors.As(err, &ce) {
						return ce.ValidateName("snapshots" + "." + k + "." + kk)
					}

					return err
				}
			}

		}

	}

	return nil
}

func (m *DeploymentContext) validateTemplateInputs(formats strfmt.Registry) error {
	if swag.IsZero(m.TemplateInputs) { // not required
		return nil
	}

	for k := range m.TemplateInputs {

		if err := validate.Required("templateInputs"+"."+k, "body", m.TemplateInputs[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.TemplateInputs[k]); i++ {

			if err := m.TemplateInputs[k][i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("templateInputs" + "." + k + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("templateInputs" + "." + k + "." + strconv.Itoa(i))
				}

				return err
			}

		}

	}

	return nil
}

func (m *DeploymentContext) validateTfVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.TfVersion) { // not required
		return nil
	}

	if m.TfVersion != nil {
		if err := m.TfVersion.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("tfVersion")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("tfVersion")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this deployment context based on the context it is used
func (m *DeploymentContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArtifactoryDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArtifacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaintenanceWindow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverrides(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjectType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvidedResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecretsContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplateInputs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTfVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentContext) contextValidateArtifactoryDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ArtifactoryDetails); i++ {

		if m.ArtifactoryDetails[i] != nil {

			if swag.IsZero(m.ArtifactoryDetails[i]) { // not required
				return nil
			}

			if err := m.ArtifactoryDetails[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("artifactoryDetails" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("artifactoryDetails" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *DeploymentContext) contextValidateArtifacts(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Artifacts {

		for kk := range m.Artifacts[k] {

			if val, ok := m.Artifacts[k][kk]; ok {
				if err := val.ContextValidate(ctx, formats); err != nil {
					return err
				}
			}

		}

	}

	return nil
}

func (m *DeploymentContext) contextValidateMaintenanceWindow(ctx context.Context, formats strfmt.Registry) error {

	if m.MaintenanceWindow != nil {

		if swag.IsZero(m.MaintenanceWindow) { // not required
			return nil
		}

		if err := m.MaintenanceWindow.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("maintenanceWindow")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("maintenanceWindow")
			}

			return err
		}
	}

	return nil
}

func (m *DeploymentContext) contextValidateModules(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Modules {

		if val, ok := m.Modules[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentContext) contextValidateOverrides(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Overrides); i++ {

		if m.Overrides[i] != nil {

			if swag.IsZero(m.Overrides[i]) { // not required
				return nil
			}

			if err := m.Overrides[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("overrides" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("overrides" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *DeploymentContext) contextValidateProjectType(ctx context.Context, formats strfmt.Registry) error {

	if m.ProjectType != nil {

		if swag.IsZero(m.ProjectType) { // not required
			return nil
		}

		if err := m.ProjectType.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("projectType")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("projectType")
			}

			return err
		}
	}

	return nil
}

func (m *DeploymentContext) contextValidateProvidedResources(ctx context.Context, formats strfmt.Registry) error {

	if m.ProvidedResources != nil {

		if swag.IsZero(m.ProvidedResources) { // not required
			return nil
		}

		if err := m.ProvidedResources.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("providedResources")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("providedResources")
			}

			return err
		}
	}

	return nil
}

func (m *DeploymentContext) contextValidateResourceMetadata(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.ResourceMetadata {

		for i := 0; i < len(m.ResourceMetadata[k]); i++ {

			if swag.IsZero(m.ResourceMetadata[k][i]) { // not required
				return nil
			}

			if err := m.ResourceMetadata[k][i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("resourceMetadata" + "." + k + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("resourceMetadata" + "." + k + "." + strconv.Itoa(i))
				}

				return err
			}

		}

	}

	return nil
}

func (m *DeploymentContext) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Resources {

		if val, ok := m.Resources[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentContext) contextValidateSecretsContext(ctx context.Context, formats strfmt.Registry) error {

	if m.SecretsContext != nil {

		if swag.IsZero(m.SecretsContext) { // not required
			return nil
		}

		if err := m.SecretsContext.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("secretsContext")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("secretsContext")
			}

			return err
		}
	}

	return nil
}

func (m *DeploymentContext) contextValidateSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Snapshots {

		for kk := range m.Snapshots[k] {

			if val, ok := m.Snapshots[k][kk]; ok {
				if err := val.ContextValidate(ctx, formats); err != nil {
					return err
				}
			}

		}

	}

	return nil
}

func (m *DeploymentContext) contextValidateTemplateInputs(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.TemplateInputs {

		for i := 0; i < len(m.TemplateInputs[k]); i++ {

			if swag.IsZero(m.TemplateInputs[k][i]) { // not required
				return nil
			}

			if err := m.TemplateInputs[k][i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("templateInputs" + "." + k + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("templateInputs" + "." + k + "." + strconv.Itoa(i))
				}

				return err
			}

		}

	}

	return nil
}

func (m *DeploymentContext) contextValidateTfVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.TfVersion != nil {

		if swag.IsZero(m.TfVersion) { // not required
			return nil
		}

		if err := m.TfVersion.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("tfVersion")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("tfVersion")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentContext) UnmarshalBinary(b []byte) error {
	var res DeploymentContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
