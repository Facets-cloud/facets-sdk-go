// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MaintenanceWindowDTO maintenance window d t o
//
// swagger:model MaintenanceWindowDTO
type MaintenanceWindowDTO struct {

	// cluster Id
	// Required: true
	ClusterID *string `json:"clusterId"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// cron
	Cron string `json:"cron,omitempty"`

	// day of week
	// Required: true
	// Enum: ["MON","TUE","WED","THU","FRI","SAT","SUN"]
	DayOfWeek *string `json:"dayOfWeek"`

	// disabled
	Disabled bool `json:"disabled,omitempty"`

	// end time
	// Required: true
	EndTime *LocalTime `json:"endTime"`

	// id
	ID string `json:"id,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// start time
	// Required: true
	StartTime *LocalTime `json:"startTime"`

	// time zone
	// Required: true
	TimeZone *MaintenanceWindowDTOTimeZone `json:"timeZone"`

	// triggered
	Triggered bool `json:"triggered,omitempty"`
}

// Validate validates this maintenance window d t o
func (m *MaintenanceWindowDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MaintenanceWindowDTO) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *MaintenanceWindowDTO) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var maintenanceWindowDTOTypeDayOfWeekPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MON","TUE","WED","THU","FRI","SAT","SUN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		maintenanceWindowDTOTypeDayOfWeekPropEnum = append(maintenanceWindowDTOTypeDayOfWeekPropEnum, v)
	}
}

const (

	// MaintenanceWindowDTODayOfWeekMON captures enum value "MON"
	MaintenanceWindowDTODayOfWeekMON string = "MON"

	// MaintenanceWindowDTODayOfWeekTUE captures enum value "TUE"
	MaintenanceWindowDTODayOfWeekTUE string = "TUE"

	// MaintenanceWindowDTODayOfWeekWED captures enum value "WED"
	MaintenanceWindowDTODayOfWeekWED string = "WED"

	// MaintenanceWindowDTODayOfWeekTHU captures enum value "THU"
	MaintenanceWindowDTODayOfWeekTHU string = "THU"

	// MaintenanceWindowDTODayOfWeekFRI captures enum value "FRI"
	MaintenanceWindowDTODayOfWeekFRI string = "FRI"

	// MaintenanceWindowDTODayOfWeekSAT captures enum value "SAT"
	MaintenanceWindowDTODayOfWeekSAT string = "SAT"

	// MaintenanceWindowDTODayOfWeekSUN captures enum value "SUN"
	MaintenanceWindowDTODayOfWeekSUN string = "SUN"
)

// prop value enum
func (m *MaintenanceWindowDTO) validateDayOfWeekEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, maintenanceWindowDTOTypeDayOfWeekPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MaintenanceWindowDTO) validateDayOfWeek(formats strfmt.Registry) error {

	if err := validate.Required("dayOfWeek", "body", m.DayOfWeek); err != nil {
		return err
	}

	// value enum
	if err := m.validateDayOfWeekEnum("dayOfWeek", "body", *m.DayOfWeek); err != nil {
		return err
	}

	return nil
}

func (m *MaintenanceWindowDTO) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("endTime", "body", m.EndTime); err != nil {
		return err
	}

	if m.EndTime != nil {
		if err := m.EndTime.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("endTime")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("endTime")
			}

			return err
		}
	}

	return nil
}

func (m *MaintenanceWindowDTO) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MaintenanceWindowDTO) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	if m.StartTime != nil {
		if err := m.StartTime.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("startTime")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("startTime")
			}

			return err
		}
	}

	return nil
}

func (m *MaintenanceWindowDTO) validateTimeZone(formats strfmt.Registry) error {

	if err := validate.Required("timeZone", "body", m.TimeZone); err != nil {
		return err
	}

	if m.TimeZone != nil {
		if err := m.TimeZone.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("timeZone")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("timeZone")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this maintenance window d t o based on the context it is used
func (m *MaintenanceWindowDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeZone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MaintenanceWindowDTO) contextValidateEndTime(ctx context.Context, formats strfmt.Registry) error {

	if m.EndTime != nil {

		if err := m.EndTime.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("endTime")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("endTime")
			}

			return err
		}
	}

	return nil
}

func (m *MaintenanceWindowDTO) contextValidateStartTime(ctx context.Context, formats strfmt.Registry) error {

	if m.StartTime != nil {

		if err := m.StartTime.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("startTime")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("startTime")
			}

			return err
		}
	}

	return nil
}

func (m *MaintenanceWindowDTO) contextValidateTimeZone(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeZone != nil {

		if err := m.TimeZone.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("timeZone")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("timeZone")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MaintenanceWindowDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaintenanceWindowDTO) UnmarshalBinary(b []byte) error {
	var res MaintenanceWindowDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MaintenanceWindowDTOTimeZone maintenance window d t o time zone
//
// swagger:model MaintenanceWindowDTOTimeZone
type MaintenanceWindowDTOTimeZone struct {

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// dstsavings
	Dstsavings int32 `json:"dstsavings,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// raw offset
	RawOffset int32 `json:"rawOffset,omitempty"`
}

// Validate validates this maintenance window d t o time zone
func (m *MaintenanceWindowDTOTimeZone) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this maintenance window d t o time zone based on context it is used
func (m *MaintenanceWindowDTOTimeZone) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MaintenanceWindowDTOTimeZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaintenanceWindowDTOTimeZone) UnmarshalBinary(b []byte) error {
	var res MaintenanceWindowDTOTimeZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
