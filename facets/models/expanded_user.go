// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExpandedUser expanded user
//
// swagger:model ExpandedUser
type ExpandedUser struct {

	// accessible accounts
	AccessibleAccounts []*IDName `json:"accessibleAccounts"`

	// accessible environments
	AccessibleEnvironments []*EnvInfo `json:"accessibleEnvironments"`

	// accessible projects
	// Unique: true
	AccessibleProjects []string `json:"accessibleProjects"`

	// associated resource groups
	AssociatedResourceGroups []*IDName `json:"associatedResourceGroups"`

	// base role
	BaseRole *RoleInfo `json:"baseRole,omitempty"`

	// env specific roles
	EnvSpecificRoles []*EnvSpecificAccess `json:"envSpecificRoles"`

	// groups
	Groups []*IDName `json:"groups"`

	// picture
	Picture string `json:"picture,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`

	// user roles
	UserRoles []*RoleInfo `json:"userRoles"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this expanded user
func (m *ExpandedUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessibleAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessibleEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessibleProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociatedResourceGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvSpecificRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExpandedUser) validateAccessibleAccounts(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessibleAccounts) { // not required
		return nil
	}

	for i := 0; i < len(m.AccessibleAccounts); i++ {
		if swag.IsZero(m.AccessibleAccounts[i]) { // not required
			continue
		}

		if m.AccessibleAccounts[i] != nil {
			if err := m.AccessibleAccounts[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("accessibleAccounts" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("accessibleAccounts" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ExpandedUser) validateAccessibleEnvironments(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessibleEnvironments) { // not required
		return nil
	}

	for i := 0; i < len(m.AccessibleEnvironments); i++ {
		if swag.IsZero(m.AccessibleEnvironments[i]) { // not required
			continue
		}

		if m.AccessibleEnvironments[i] != nil {
			if err := m.AccessibleEnvironments[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("accessibleEnvironments" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("accessibleEnvironments" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ExpandedUser) validateAccessibleProjects(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessibleProjects) { // not required
		return nil
	}

	if err := validate.UniqueItems("accessibleProjects", "body", m.AccessibleProjects); err != nil {
		return err
	}

	return nil
}

func (m *ExpandedUser) validateAssociatedResourceGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.AssociatedResourceGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.AssociatedResourceGroups); i++ {
		if swag.IsZero(m.AssociatedResourceGroups[i]) { // not required
			continue
		}

		if m.AssociatedResourceGroups[i] != nil {
			if err := m.AssociatedResourceGroups[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("associatedResourceGroups" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("associatedResourceGroups" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ExpandedUser) validateBaseRole(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseRole) { // not required
		return nil
	}

	if m.BaseRole != nil {
		if err := m.BaseRole.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("baseRole")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("baseRole")
			}

			return err
		}
	}

	return nil
}

func (m *ExpandedUser) validateEnvSpecificRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvSpecificRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvSpecificRoles); i++ {
		if swag.IsZero(m.EnvSpecificRoles[i]) { // not required
			continue
		}

		if m.EnvSpecificRoles[i] != nil {
			if err := m.EnvSpecificRoles[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("envSpecificRoles" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("envSpecificRoles" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ExpandedUser) validateGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	for i := 0; i < len(m.Groups); i++ {
		if swag.IsZero(m.Groups[i]) { // not required
			continue
		}

		if m.Groups[i] != nil {
			if err := m.Groups[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("groups" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ExpandedUser) validateUserRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.UserRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.UserRoles); i++ {
		if swag.IsZero(m.UserRoles[i]) { // not required
			continue
		}

		if m.UserRoles[i] != nil {
			if err := m.UserRoles[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("userRoles" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("userRoles" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this expanded user based on the context it is used
func (m *ExpandedUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessibleAccounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAccessibleEnvironments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssociatedResourceGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBaseRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvSpecificRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExpandedUser) contextValidateAccessibleAccounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AccessibleAccounts); i++ {

		if m.AccessibleAccounts[i] != nil {

			if swag.IsZero(m.AccessibleAccounts[i]) { // not required
				return nil
			}

			if err := m.AccessibleAccounts[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("accessibleAccounts" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("accessibleAccounts" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ExpandedUser) contextValidateAccessibleEnvironments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AccessibleEnvironments); i++ {

		if m.AccessibleEnvironments[i] != nil {

			if swag.IsZero(m.AccessibleEnvironments[i]) { // not required
				return nil
			}

			if err := m.AccessibleEnvironments[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("accessibleEnvironments" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("accessibleEnvironments" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ExpandedUser) contextValidateAssociatedResourceGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssociatedResourceGroups); i++ {

		if m.AssociatedResourceGroups[i] != nil {

			if swag.IsZero(m.AssociatedResourceGroups[i]) { // not required
				return nil
			}

			if err := m.AssociatedResourceGroups[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("associatedResourceGroups" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("associatedResourceGroups" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ExpandedUser) contextValidateBaseRole(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseRole != nil {

		if swag.IsZero(m.BaseRole) { // not required
			return nil
		}

		if err := m.BaseRole.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("baseRole")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("baseRole")
			}

			return err
		}
	}

	return nil
}

func (m *ExpandedUser) contextValidateEnvSpecificRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EnvSpecificRoles); i++ {

		if m.EnvSpecificRoles[i] != nil {

			if swag.IsZero(m.EnvSpecificRoles[i]) { // not required
				return nil
			}

			if err := m.EnvSpecificRoles[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("envSpecificRoles" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("envSpecificRoles" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ExpandedUser) contextValidateGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Groups); i++ {

		if m.Groups[i] != nil {

			if swag.IsZero(m.Groups[i]) { // not required
				return nil
			}

			if err := m.Groups[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("groups" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ExpandedUser) contextValidateUserRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserRoles); i++ {

		if m.UserRoles[i] != nil {

			if swag.IsZero(m.UserRoles[i]) { // not required
				return nil
			}

			if err := m.UserRoles[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("userRoles" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("userRoles" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExpandedUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExpandedUser) UnmarshalBinary(b []byte) error {
	var res ExpandedUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
