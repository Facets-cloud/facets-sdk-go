// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntentResponseDTO intent response d t o
//
// swagger:model IntentResponseDTO
type IntentResponseDTO struct {

	// description
	Description string `json:"description,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// icon Url
	IconURL string `json:"iconUrl,omitempty"`

	// inferred from module
	InferredFromModule bool `json:"inferredFromModule,omitempty"`

	// intent outputs
	IntentOutputs []*IntentOutput `json:"intentOutputs"`

	// name
	Name string `json:"name,omitempty"`

	// source
	// Enum: ["BUILT_IN","CUSTOM"]
	Source string `json:"source,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this intent response d t o
func (m *IntentResponseDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIntentOutputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntentResponseDTO) validateIntentOutputs(formats strfmt.Registry) error {
	if swag.IsZero(m.IntentOutputs) { // not required
		return nil
	}

	for i := 0; i < len(m.IntentOutputs); i++ {
		if swag.IsZero(m.IntentOutputs[i]) { // not required
			continue
		}

		if m.IntentOutputs[i] != nil {
			if err := m.IntentOutputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intentOutputs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("intentOutputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var intentResponseDTOTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BUILT_IN","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		intentResponseDTOTypeSourcePropEnum = append(intentResponseDTOTypeSourcePropEnum, v)
	}
}

const (

	// IntentResponseDTOSourceBUILTIN captures enum value "BUILT_IN"
	IntentResponseDTOSourceBUILTIN string = "BUILT_IN"

	// IntentResponseDTOSourceCUSTOM captures enum value "CUSTOM"
	IntentResponseDTOSourceCUSTOM string = "CUSTOM"
)

// prop value enum
func (m *IntentResponseDTO) validateSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, intentResponseDTOTypeSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntentResponseDTO) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceEnum("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this intent response d t o based on the context it is used
func (m *IntentResponseDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIntentOutputs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntentResponseDTO) contextValidateIntentOutputs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IntentOutputs); i++ {

		if m.IntentOutputs[i] != nil {

			if swag.IsZero(m.IntentOutputs[i]) { // not required
				return nil
			}

			if err := m.IntentOutputs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intentOutputs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("intentOutputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntentResponseDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntentResponseDTO) UnmarshalBinary(b []byte) error {
	var res IntentResponseDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
