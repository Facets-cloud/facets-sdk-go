// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntentRequestDTO intent request d t o
//
// swagger:model IntentRequestDTO
type IntentRequestDTO struct {

	// description
	Description string `json:"description,omitempty"`

	// display name
	// Required: true
	DisplayName *string `json:"displayName"`

	// icon Url
	IconURL string `json:"iconUrl,omitempty"`

	// inferred from module
	InferredFromModule bool `json:"inferredFromModule,omitempty"`

	// intent outputs
	IntentOutputs []*IntentOutput `json:"intentOutputs"`

	// name
	// Required: true
	Name *string `json:"name"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this intent request d t o
func (m *IntentRequestDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntentOutputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntentRequestDTO) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *IntentRequestDTO) validateIntentOutputs(formats strfmt.Registry) error {
	if swag.IsZero(m.IntentOutputs) { // not required
		return nil
	}

	for i := 0; i < len(m.IntentOutputs); i++ {
		if swag.IsZero(m.IntentOutputs[i]) { // not required
			continue
		}

		if m.IntentOutputs[i] != nil {
			if err := m.IntentOutputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intentOutputs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("intentOutputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IntentRequestDTO) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IntentRequestDTO) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this intent request d t o based on the context it is used
func (m *IntentRequestDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIntentOutputs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntentRequestDTO) contextValidateIntentOutputs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IntentOutputs); i++ {

		if m.IntentOutputs[i] != nil {

			if swag.IsZero(m.IntentOutputs[i]) { // not required
				return nil
			}

			if err := m.IntentOutputs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intentOutputs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("intentOutputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntentRequestDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntentRequestDTO) UnmarshalBinary(b []byte) error {
	var res IntentRequestDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
