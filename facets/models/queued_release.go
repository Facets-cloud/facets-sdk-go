// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueuedRelease queued release
//
// swagger:model QueuedRelease
type QueuedRelease struct {

	// allow destroy
	AllowDestroy bool `json:"allowDestroy,omitempty"`

	// can queue
	CanQueue bool `json:"canQueue,omitempty"`

	// cluster Id
	ClusterID string `json:"clusterId,omitempty"`

	// comment
	Comment string `json:"comment,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// force release
	ForceRelease bool `json:"forceRelease,omitempty"`

	// hotfix resources
	HotfixResources []*FacetsResource `json:"hotfixResources"`

	// id
	ID string `json:"id,omitempty"`

	// override build steps
	OverrideBuildSteps []string `json:"overrideBuildSteps"`

	// parallel release
	ParallelRelease bool `json:"parallelRelease,omitempty"`

	// release trace Id
	ReleaseTraceID string `json:"releaseTraceId,omitempty"`

	// release type
	// Enum: ["HOTFIX","RELEASE","LAUNCH","DESTROY","CUSTOM","UNLOCK_STATE","PLAN","HOTFIX_PLAN","APPLY_PLAN","APPLY_HOTFIX_PLAN","SCALE_UP","SCALE_DOWN","MAINTENANCE","TERRAFORM_EXPORT","ROLLBACK_PLAN","APPLY_ROLLBACK_PLAN"]
	ReleaseType string `json:"releaseType,omitempty"`

	// skip state check
	SkipStateCheck bool `json:"skipStateCheck,omitempty"`

	// tf version
	TfVersion *TfVersion `json:"tfVersion,omitempty"`

	// triggered by
	TriggeredBy string `json:"triggeredBy,omitempty"`

	// with refresh
	WithRefresh bool `json:"withRefresh,omitempty"`
}

// Validate validates this queued release
func (m *QueuedRelease) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHotfixResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTfVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueuedRelease) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *QueuedRelease) validateHotfixResources(formats strfmt.Registry) error {
	if swag.IsZero(m.HotfixResources) { // not required
		return nil
	}

	for i := 0; i < len(m.HotfixResources); i++ {
		if swag.IsZero(m.HotfixResources[i]) { // not required
			continue
		}

		if m.HotfixResources[i] != nil {
			if err := m.HotfixResources[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("hotfixResources" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("hotfixResources" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

var queuedReleaseTypeReleaseTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HOTFIX","RELEASE","LAUNCH","DESTROY","CUSTOM","UNLOCK_STATE","PLAN","HOTFIX_PLAN","APPLY_PLAN","APPLY_HOTFIX_PLAN","SCALE_UP","SCALE_DOWN","MAINTENANCE","TERRAFORM_EXPORT","ROLLBACK_PLAN","APPLY_ROLLBACK_PLAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queuedReleaseTypeReleaseTypePropEnum = append(queuedReleaseTypeReleaseTypePropEnum, v)
	}
}

const (

	// QueuedReleaseReleaseTypeHOTFIX captures enum value "HOTFIX"
	QueuedReleaseReleaseTypeHOTFIX string = "HOTFIX"

	// QueuedReleaseReleaseTypeRELEASE captures enum value "RELEASE"
	QueuedReleaseReleaseTypeRELEASE string = "RELEASE"

	// QueuedReleaseReleaseTypeLAUNCH captures enum value "LAUNCH"
	QueuedReleaseReleaseTypeLAUNCH string = "LAUNCH"

	// QueuedReleaseReleaseTypeDESTROY captures enum value "DESTROY"
	QueuedReleaseReleaseTypeDESTROY string = "DESTROY"

	// QueuedReleaseReleaseTypeCUSTOM captures enum value "CUSTOM"
	QueuedReleaseReleaseTypeCUSTOM string = "CUSTOM"

	// QueuedReleaseReleaseTypeUNLOCKSTATE captures enum value "UNLOCK_STATE"
	QueuedReleaseReleaseTypeUNLOCKSTATE string = "UNLOCK_STATE"

	// QueuedReleaseReleaseTypePLAN captures enum value "PLAN"
	QueuedReleaseReleaseTypePLAN string = "PLAN"

	// QueuedReleaseReleaseTypeHOTFIXPLAN captures enum value "HOTFIX_PLAN"
	QueuedReleaseReleaseTypeHOTFIXPLAN string = "HOTFIX_PLAN"

	// QueuedReleaseReleaseTypeAPPLYPLAN captures enum value "APPLY_PLAN"
	QueuedReleaseReleaseTypeAPPLYPLAN string = "APPLY_PLAN"

	// QueuedReleaseReleaseTypeAPPLYHOTFIXPLAN captures enum value "APPLY_HOTFIX_PLAN"
	QueuedReleaseReleaseTypeAPPLYHOTFIXPLAN string = "APPLY_HOTFIX_PLAN"

	// QueuedReleaseReleaseTypeSCALEUP captures enum value "SCALE_UP"
	QueuedReleaseReleaseTypeSCALEUP string = "SCALE_UP"

	// QueuedReleaseReleaseTypeSCALEDOWN captures enum value "SCALE_DOWN"
	QueuedReleaseReleaseTypeSCALEDOWN string = "SCALE_DOWN"

	// QueuedReleaseReleaseTypeMAINTENANCE captures enum value "MAINTENANCE"
	QueuedReleaseReleaseTypeMAINTENANCE string = "MAINTENANCE"

	// QueuedReleaseReleaseTypeTERRAFORMEXPORT captures enum value "TERRAFORM_EXPORT"
	QueuedReleaseReleaseTypeTERRAFORMEXPORT string = "TERRAFORM_EXPORT"

	// QueuedReleaseReleaseTypeROLLBACKPLAN captures enum value "ROLLBACK_PLAN"
	QueuedReleaseReleaseTypeROLLBACKPLAN string = "ROLLBACK_PLAN"

	// QueuedReleaseReleaseTypeAPPLYROLLBACKPLAN captures enum value "APPLY_ROLLBACK_PLAN"
	QueuedReleaseReleaseTypeAPPLYROLLBACKPLAN string = "APPLY_ROLLBACK_PLAN"
)

// prop value enum
func (m *QueuedRelease) validateReleaseTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, queuedReleaseTypeReleaseTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QueuedRelease) validateReleaseType(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleaseType) { // not required
		return nil
	}

	// value enum
	if err := m.validateReleaseTypeEnum("releaseType", "body", m.ReleaseType); err != nil {
		return err
	}

	return nil
}

func (m *QueuedRelease) validateTfVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.TfVersion) { // not required
		return nil
	}

	if m.TfVersion != nil {
		if err := m.TfVersion.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("tfVersion")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("tfVersion")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this queued release based on the context it is used
func (m *QueuedRelease) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHotfixResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTfVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueuedRelease) contextValidateHotfixResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HotfixResources); i++ {

		if m.HotfixResources[i] != nil {

			if swag.IsZero(m.HotfixResources[i]) { // not required
				return nil
			}

			if err := m.HotfixResources[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("hotfixResources" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("hotfixResources" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *QueuedRelease) contextValidateTfVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.TfVersion != nil {

		if swag.IsZero(m.TfVersion) { // not required
			return nil
		}

		if err := m.TfVersion.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("tfVersion")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("tfVersion")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueuedRelease) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueuedRelease) UnmarshalBinary(b []byte) error {
	var res QueuedRelease
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
