// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttachDetachCiRequest Request details for attaching or detaching a rule and workflow to/from a CI.
//
// swagger:model AttachDetachCiRequest
type AttachDetachCiRequest struct {

	// Blueprint name related to the CI.
	// Example: blueprint-1
	// Required: true
	BlueprintName *string `json:"blueprintName"`

	// CI name to which the operation is applied.
	// Example: ci-my-app
	// Required: true
	CiName *string `json:"ciName"`

	// Registration type for the operation.
	// Example: GIT_REF
	// Required: true
	// Enum: ["ENVIRONMENT","RELEASE_STREAM","HYBRID"]
	RegistrationType *string `json:"registrationType"`
}

// Validate validates this attach detach ci request
func (m *AttachDetachCiRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlueprintName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCiName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttachDetachCiRequest) validateBlueprintName(formats strfmt.Registry) error {

	if err := validate.Required("blueprintName", "body", m.BlueprintName); err != nil {
		return err
	}

	return nil
}

func (m *AttachDetachCiRequest) validateCiName(formats strfmt.Registry) error {

	if err := validate.Required("ciName", "body", m.CiName); err != nil {
		return err
	}

	return nil
}

var attachDetachCiRequestTypeRegistrationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENVIRONMENT","RELEASE_STREAM","HYBRID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		attachDetachCiRequestTypeRegistrationTypePropEnum = append(attachDetachCiRequestTypeRegistrationTypePropEnum, v)
	}
}

const (

	// AttachDetachCiRequestRegistrationTypeENVIRONMENT captures enum value "ENVIRONMENT"
	AttachDetachCiRequestRegistrationTypeENVIRONMENT string = "ENVIRONMENT"

	// AttachDetachCiRequestRegistrationTypeRELEASESTREAM captures enum value "RELEASE_STREAM"
	AttachDetachCiRequestRegistrationTypeRELEASESTREAM string = "RELEASE_STREAM"

	// AttachDetachCiRequestRegistrationTypeHYBRID captures enum value "HYBRID"
	AttachDetachCiRequestRegistrationTypeHYBRID string = "HYBRID"
)

// prop value enum
func (m *AttachDetachCiRequest) validateRegistrationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, attachDetachCiRequestTypeRegistrationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AttachDetachCiRequest) validateRegistrationType(formats strfmt.Registry) error {

	if err := validate.Required("registrationType", "body", m.RegistrationType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRegistrationTypeEnum("registrationType", "body", *m.RegistrationType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this attach detach ci request based on context it is used
func (m *AttachDetachCiRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AttachDetachCiRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttachDetachCiRequest) UnmarshalBinary(b []byte) error {
	var res AttachDetachCiRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
