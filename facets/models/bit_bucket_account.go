// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BitBucketAccount bit bucket account
//
// swagger:model BitBucketAccount
type BitBucketAccount struct {

	// access token
	AccessToken string `json:"accessToken,omitempty"`

	// account type
	// Enum: ["VERSION_CONTROL","CLOUD","CODER"]
	AccountType string `json:"accountType,omitempty"`

	// app
	App bool `json:"app,omitempty"`

	// associated to
	AssociatedTo []*AccountAssociationInfo `json:"associatedTo"`

	// change log
	ChangeLog string `json:"changeLog,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// host
	Host string `json:"host,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// in use
	InUse bool `json:"inUse,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// org name
	OrgName string `json:"orgName,omitempty"`

	// project key
	ProjectKey string `json:"projectKey,omitempty"`

	// provider
	// Enum: ["GITHUB","BITBUCKET","GITLAB","AWS","AZURE","GCP","KUBERNETES","CODER"]
	Provider string `json:"provider,omitempty"`

	// system defined
	SystemDefined bool `json:"systemDefined,omitempty"`

	// user name
	UserName string `json:"userName,omitempty"`

	// versioning key
	VersioningKey string `json:"versioningKey,omitempty"`
}

// Validate validates this bit bucket account
func (m *BitBucketAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociatedTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var bitBucketAccountTypeAccountTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VERSION_CONTROL","CLOUD","CODER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bitBucketAccountTypeAccountTypePropEnum = append(bitBucketAccountTypeAccountTypePropEnum, v)
	}
}

const (

	// BitBucketAccountAccountTypeVERSIONCONTROL captures enum value "VERSION_CONTROL"
	BitBucketAccountAccountTypeVERSIONCONTROL string = "VERSION_CONTROL"

	// BitBucketAccountAccountTypeCLOUD captures enum value "CLOUD"
	BitBucketAccountAccountTypeCLOUD string = "CLOUD"

	// BitBucketAccountAccountTypeCODER captures enum value "CODER"
	BitBucketAccountAccountTypeCODER string = "CODER"
)

// prop value enum
func (m *BitBucketAccount) validateAccountTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bitBucketAccountTypeAccountTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BitBucketAccount) validateAccountType(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccountTypeEnum("accountType", "body", m.AccountType); err != nil {
		return err
	}

	return nil
}

func (m *BitBucketAccount) validateAssociatedTo(formats strfmt.Registry) error {
	if swag.IsZero(m.AssociatedTo) { // not required
		return nil
	}

	for i := 0; i < len(m.AssociatedTo); i++ {
		if swag.IsZero(m.AssociatedTo[i]) { // not required
			continue
		}

		if m.AssociatedTo[i] != nil {
			if err := m.AssociatedTo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associatedTo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("associatedTo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BitBucketAccount) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BitBucketAccount) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var bitBucketAccountTypeProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GITHUB","BITBUCKET","GITLAB","AWS","AZURE","GCP","KUBERNETES","CODER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bitBucketAccountTypeProviderPropEnum = append(bitBucketAccountTypeProviderPropEnum, v)
	}
}

const (

	// BitBucketAccountProviderGITHUB captures enum value "GITHUB"
	BitBucketAccountProviderGITHUB string = "GITHUB"

	// BitBucketAccountProviderBITBUCKET captures enum value "BITBUCKET"
	BitBucketAccountProviderBITBUCKET string = "BITBUCKET"

	// BitBucketAccountProviderGITLAB captures enum value "GITLAB"
	BitBucketAccountProviderGITLAB string = "GITLAB"

	// BitBucketAccountProviderAWS captures enum value "AWS"
	BitBucketAccountProviderAWS string = "AWS"

	// BitBucketAccountProviderAZURE captures enum value "AZURE"
	BitBucketAccountProviderAZURE string = "AZURE"

	// BitBucketAccountProviderGCP captures enum value "GCP"
	BitBucketAccountProviderGCP string = "GCP"

	// BitBucketAccountProviderKUBERNETES captures enum value "KUBERNETES"
	BitBucketAccountProviderKUBERNETES string = "KUBERNETES"

	// BitBucketAccountProviderCODER captures enum value "CODER"
	BitBucketAccountProviderCODER string = "CODER"
)

// prop value enum
func (m *BitBucketAccount) validateProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bitBucketAccountTypeProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BitBucketAccount) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderEnum("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this bit bucket account based on the context it is used
func (m *BitBucketAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssociatedTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BitBucketAccount) contextValidateAssociatedTo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssociatedTo); i++ {

		if m.AssociatedTo[i] != nil {

			if swag.IsZero(m.AssociatedTo[i]) { // not required
				return nil
			}

			if err := m.AssociatedTo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associatedTo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("associatedTo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BitBucketAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BitBucketAccount) UnmarshalBinary(b []byte) error {
	var res BitBucketAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
