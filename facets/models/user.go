// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
//
// swagger:model User
type User struct {

	// cluster ids
	// Unique: true
	ClusterIds []string `json:"clusterIds"`

	// group Id
	GroupID string `json:"groupId,omitempty"`

	// group ids
	GroupIds []string `json:"groupIds"`

	// id
	ID string `json:"id,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// picture
	Picture string `json:"picture,omitempty"`

	// roles
	// Unique: true
	Roles []string `json:"roles"`

	// teams
	// Unique: true
	Teams []string `json:"teams"`

	// user name
	UserName string `json:"userName,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateClusterIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("clusterIds", "body", m.ClusterIds); err != nil {
		return err
	}

	return nil
}

func (m *User) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	if err := validate.UniqueItems("roles", "body", m.Roles); err != nil {
		return err
	}

	return nil
}

func (m *User) validateTeams(formats strfmt.Registry) error {
	if swag.IsZero(m.Teams) { // not required
		return nil
	}

	if err := validate.UniqueItems("teams", "body", m.Teams); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user based on context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
