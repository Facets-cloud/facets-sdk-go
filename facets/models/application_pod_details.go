// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApplicationPodDetails ApplicationPodDetails
//
// swagger:model ApplicationPodDetails
type ApplicationPodDetails struct {

	// creation timestamp
	CreationTimestamp string `json:"creationTimestamp,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image ID
	ImageID string `json:"imageID,omitempty"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// pod status
	PodStatus string `json:"podStatus,omitempty"`

	// ready
	Ready bool `json:"ready,omitempty"`

	// resource usage
	ResourceUsage *PodResource `json:"resourceUsage,omitempty"`

	// restart reason
	RestartReason string `json:"restartReason,omitempty"`

	// restarts
	Restarts int32 `json:"restarts,omitempty"`
}

// Validate validates this application pod details
func (m *ApplicationPodDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationPodDetails) validateResourceUsage(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceUsage) { // not required
		return nil
	}

	if m.ResourceUsage != nil {
		if err := m.ResourceUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceUsage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceUsage")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this application pod details based on the context it is used
func (m *ApplicationPodDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResourceUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationPodDetails) contextValidateResourceUsage(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceUsage != nil {

		if swag.IsZero(m.ResourceUsage) { // not required
			return nil
		}

		if err := m.ResourceUsage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceUsage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceUsage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationPodDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationPodDetails) UnmarshalBinary(b []byte) error {
	var res ApplicationPodDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
