// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageOverrideRequest image override request
//
// swagger:model ImageOverrideRequest
type ImageOverrideRequest struct {

	// artifact type
	// Enum: ["docker_image","freestyle"]
	ArtifactType string `json:"artifactType,omitempty"`

	// artifact Uri
	ArtifactURI string `json:"artifactUri,omitempty"`

	// artifactory
	Artifactory string `json:"artifactory,omitempty"`

	// blueprint name
	BlueprintName string `json:"blueprintName,omitempty"`

	// ci name
	CiName string `json:"ciName,omitempty"`

	// registration type
	// Enum: ["GIT_REF","ENVIRONMENT","RELEASE_STREAM"]
	RegistrationType string `json:"registrationType,omitempty"`

	// registration value
	RegistrationValue string `json:"registrationValue,omitempty"`

	// repository name
	RepositoryName string `json:"repositoryName,omitempty"`

	// resource name
	// Required: true
	ResourceName *string `json:"resourceName"`

	// resource type
	// Required: true
	ResourceType *string `json:"resourceType"`

	// tag
	Tag string `json:"tag,omitempty"`
}

// Validate validates this image override request
func (m *ImageOverrideRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var imageOverrideRequestTypeArtifactTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["docker_image","freestyle"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageOverrideRequestTypeArtifactTypePropEnum = append(imageOverrideRequestTypeArtifactTypePropEnum, v)
	}
}

const (

	// ImageOverrideRequestArtifactTypeDockerImage captures enum value "docker_image"
	ImageOverrideRequestArtifactTypeDockerImage string = "docker_image"

	// ImageOverrideRequestArtifactTypeFreestyle captures enum value "freestyle"
	ImageOverrideRequestArtifactTypeFreestyle string = "freestyle"
)

// prop value enum
func (m *ImageOverrideRequest) validateArtifactTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, imageOverrideRequestTypeArtifactTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImageOverrideRequest) validateArtifactType(formats strfmt.Registry) error {
	if swag.IsZero(m.ArtifactType) { // not required
		return nil
	}

	// value enum
	if err := m.validateArtifactTypeEnum("artifactType", "body", m.ArtifactType); err != nil {
		return err
	}

	return nil
}

var imageOverrideRequestTypeRegistrationTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GIT_REF","ENVIRONMENT","RELEASE_STREAM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageOverrideRequestTypeRegistrationTypePropEnum = append(imageOverrideRequestTypeRegistrationTypePropEnum, v)
	}
}

const (

	// ImageOverrideRequestRegistrationTypeGITREF captures enum value "GIT_REF"
	ImageOverrideRequestRegistrationTypeGITREF string = "GIT_REF"

	// ImageOverrideRequestRegistrationTypeENVIRONMENT captures enum value "ENVIRONMENT"
	ImageOverrideRequestRegistrationTypeENVIRONMENT string = "ENVIRONMENT"

	// ImageOverrideRequestRegistrationTypeRELEASESTREAM captures enum value "RELEASE_STREAM"
	ImageOverrideRequestRegistrationTypeRELEASESTREAM string = "RELEASE_STREAM"
)

// prop value enum
func (m *ImageOverrideRequest) validateRegistrationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, imageOverrideRequestTypeRegistrationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImageOverrideRequest) validateRegistrationType(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistrationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRegistrationTypeEnum("registrationType", "body", m.RegistrationType); err != nil {
		return err
	}

	return nil
}

func (m *ImageOverrideRequest) validateResourceName(formats strfmt.Registry) error {

	if err := validate.Required("resourceName", "body", m.ResourceName); err != nil {
		return err
	}

	return nil
}

func (m *ImageOverrideRequest) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resourceType", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this image override request based on context it is used
func (m *ImageOverrideRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ImageOverrideRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageOverrideRequest) UnmarshalBinary(b []byte) error {
	var res ImageOverrideRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
