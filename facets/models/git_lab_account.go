// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GitLabAccount GitLabAccount
//
// swagger:model GitLabAccount
type GitLabAccount struct {

	// access token
	AccessToken string `json:"accessToken,omitempty"`

	// account type
	// Enum: ["VERSION_CONTROL","CLOUD","CODER"]
	AccountType string `json:"accountType,omitempty"`

	// api base Url
	APIBaseURL string `json:"apiBaseUrl,omitempty"`

	// app
	App bool `json:"app,omitempty"`

	// associated to
	AssociatedTo []*AccountAssociationInfo `json:"associatedTo"`

	// change log
	ChangeLog string `json:"changeLog,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// enterprise host name
	EnterpriseHostName string `json:"enterpriseHostName,omitempty"`

	// entity type
	// Enum: ["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]
	EntityType string `json:"entityType,omitempty"`

	// host
	Host string `json:"host,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// in use
	InUse bool `json:"inUse,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// number of versions
	NumberOfVersions int32 `json:"numberOfVersions,omitempty"`

	// org name
	OrgName string `json:"orgName,omitempty"`

	// provider
	// Enum: ["GITHUB","BITBUCKET","GITLAB","AWS","AZURE","GCP","KUBERNETES","CODER"]
	Provider string `json:"provider,omitempty"`

	// secrets Uid
	SecretsUID string `json:"secretsUid,omitempty"`

	// system defined
	SystemDefined bool `json:"systemDefined,omitempty"`

	// user name
	UserName string `json:"userName,omitempty"`

	// versioning key
	VersioningKey string `json:"versioningKey,omitempty"`
}

// Validate validates this git lab account
func (m *GitLabAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociatedTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gitLabAccountTypeAccountTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VERSION_CONTROL","CLOUD","CODER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gitLabAccountTypeAccountTypePropEnum = append(gitLabAccountTypeAccountTypePropEnum, v)
	}
}

const (

	// GitLabAccountAccountTypeVERSIONCONTROL captures enum value "VERSION_CONTROL"
	GitLabAccountAccountTypeVERSIONCONTROL string = "VERSION_CONTROL"

	// GitLabAccountAccountTypeCLOUD captures enum value "CLOUD"
	GitLabAccountAccountTypeCLOUD string = "CLOUD"

	// GitLabAccountAccountTypeCODER captures enum value "CODER"
	GitLabAccountAccountTypeCODER string = "CODER"
)

// prop value enum
func (m *GitLabAccount) validateAccountTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gitLabAccountTypeAccountTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GitLabAccount) validateAccountType(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccountTypeEnum("accountType", "body", m.AccountType); err != nil {
		return err
	}

	return nil
}

func (m *GitLabAccount) validateAssociatedTo(formats strfmt.Registry) error {
	if swag.IsZero(m.AssociatedTo) { // not required
		return nil
	}

	for i := 0; i < len(m.AssociatedTo); i++ {
		if swag.IsZero(m.AssociatedTo[i]) { // not required
			continue
		}

		if m.AssociatedTo[i] != nil {
			if err := m.AssociatedTo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associatedTo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("associatedTo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GitLabAccount) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var gitLabAccountTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gitLabAccountTypeEntityTypePropEnum = append(gitLabAccountTypeEntityTypePropEnum, v)
	}
}

const (

	// GitLabAccountEntityTypeCLUSTER captures enum value "CLUSTER"
	GitLabAccountEntityTypeCLUSTER string = "CLUSTER"

	// GitLabAccountEntityTypeBLUEPRINT captures enum value "BLUE_PRINT"
	GitLabAccountEntityTypeBLUEPRINT string = "BLUE_PRINT"

	// GitLabAccountEntityTypeTEMPLATEINPUT captures enum value "TEMPLATE_INPUT"
	GitLabAccountEntityTypeTEMPLATEINPUT string = "TEMPLATE_INPUT"

	// GitLabAccountEntityTypeCONTROLPLANE captures enum value "CONTROL_PLANE"
	GitLabAccountEntityTypeCONTROLPLANE string = "CONTROL_PLANE"

	// GitLabAccountEntityTypeIAC captures enum value "IAC"
	GitLabAccountEntityTypeIAC string = "IAC"

	// GitLabAccountEntityTypeARTIFACTCI captures enum value "ARTIFACT_CI"
	GitLabAccountEntityTypeARTIFACTCI string = "ARTIFACT_CI"

	// GitLabAccountEntityTypeUSERGROUP captures enum value "USER_GROUP"
	GitLabAccountEntityTypeUSERGROUP string = "USER_GROUP"

	// GitLabAccountEntityTypeACCOUNT captures enum value "ACCOUNT"
	GitLabAccountEntityTypeACCOUNT string = "ACCOUNT"

	// GitLabAccountEntityTypeARTIFACTORY captures enum value "ARTIFACTORY"
	GitLabAccountEntityTypeARTIFACTORY string = "ARTIFACTORY"
)

// prop value enum
func (m *GitLabAccount) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gitLabAccountTypeEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GitLabAccount) validateEntityType(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("entityType", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *GitLabAccount) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var gitLabAccountTypeProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GITHUB","BITBUCKET","GITLAB","AWS","AZURE","GCP","KUBERNETES","CODER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gitLabAccountTypeProviderPropEnum = append(gitLabAccountTypeProviderPropEnum, v)
	}
}

const (

	// GitLabAccountProviderGITHUB captures enum value "GITHUB"
	GitLabAccountProviderGITHUB string = "GITHUB"

	// GitLabAccountProviderBITBUCKET captures enum value "BITBUCKET"
	GitLabAccountProviderBITBUCKET string = "BITBUCKET"

	// GitLabAccountProviderGITLAB captures enum value "GITLAB"
	GitLabAccountProviderGITLAB string = "GITLAB"

	// GitLabAccountProviderAWS captures enum value "AWS"
	GitLabAccountProviderAWS string = "AWS"

	// GitLabAccountProviderAZURE captures enum value "AZURE"
	GitLabAccountProviderAZURE string = "AZURE"

	// GitLabAccountProviderGCP captures enum value "GCP"
	GitLabAccountProviderGCP string = "GCP"

	// GitLabAccountProviderKUBERNETES captures enum value "KUBERNETES"
	GitLabAccountProviderKUBERNETES string = "KUBERNETES"

	// GitLabAccountProviderCODER captures enum value "CODER"
	GitLabAccountProviderCODER string = "CODER"
)

// prop value enum
func (m *GitLabAccount) validateProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gitLabAccountTypeProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GitLabAccount) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderEnum("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this git lab account based on the context it is used
func (m *GitLabAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssociatedTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitLabAccount) contextValidateAssociatedTo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssociatedTo); i++ {

		if m.AssociatedTo[i] != nil {

			if swag.IsZero(m.AssociatedTo[i]) { // not required
				return nil
			}

			if err := m.AssociatedTo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associatedTo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("associatedTo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GitLabAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GitLabAccount) UnmarshalBinary(b []byte) error {
	var res GitLabAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
