// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CiArtifactResponse CiArtifactResponse
//
// swagger:model CiArtifactResponse
type CiArtifactResponse struct {

	// applied rule Id
	AppliedRuleID string `json:"appliedRuleId,omitempty"`

	// applied rule name
	AppliedRuleName string `json:"appliedRuleName,omitempty"`

	// applied rule version Id
	AppliedRuleVersionID string `json:"appliedRuleVersionId,omitempty"`

	// artifact Id
	ArtifactID string `json:"artifactId,omitempty"`

	// artifact name
	ArtifactName string `json:"artifactName,omitempty"`

	// artifact Uri
	ArtifactURI string `json:"artifactUri,omitempty"`

	// artifactory
	Artifactory string `json:"artifactory,omitempty"`

	// build description
	BuildDescription string `json:"buildDescription,omitempty"`

	// classified
	Classified bool `json:"classified,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// created on
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// metadata
	Metadata map[string]string `json:"metadata,omitempty"`

	// promoted
	Promoted bool `json:"promoted,omitempty"`

	// registration type
	// Enum: ["ENVIRONMENT","RELEASE_STREAM","HYBRID"]
	RegistrationType string `json:"registrationType,omitempty"`

	// registration value
	RegistrationValue string `json:"registrationValue,omitempty"`

	// repository name
	RepositoryName string `json:"repositoryName,omitempty"`

	// tag
	Tag string `json:"tag,omitempty"`

	// versioning key
	VersioningKey string `json:"versioningKey,omitempty"`
}

// Validate validates this ci artifact response
func (m *CiArtifactResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CiArtifactResponse) validateCreatedOn(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("createdOn", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

var ciArtifactResponseTypeRegistrationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENVIRONMENT","RELEASE_STREAM","HYBRID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ciArtifactResponseTypeRegistrationTypePropEnum = append(ciArtifactResponseTypeRegistrationTypePropEnum, v)
	}
}

const (

	// CiArtifactResponseRegistrationTypeENVIRONMENT captures enum value "ENVIRONMENT"
	CiArtifactResponseRegistrationTypeENVIRONMENT string = "ENVIRONMENT"

	// CiArtifactResponseRegistrationTypeRELEASESTREAM captures enum value "RELEASE_STREAM"
	CiArtifactResponseRegistrationTypeRELEASESTREAM string = "RELEASE_STREAM"

	// CiArtifactResponseRegistrationTypeHYBRID captures enum value "HYBRID"
	CiArtifactResponseRegistrationTypeHYBRID string = "HYBRID"
)

// prop value enum
func (m *CiArtifactResponse) validateRegistrationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ciArtifactResponseTypeRegistrationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CiArtifactResponse) validateRegistrationType(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistrationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRegistrationTypeEnum("registrationType", "body", m.RegistrationType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ci artifact response based on context it is used
func (m *CiArtifactResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CiArtifactResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CiArtifactResponse) UnmarshalBinary(b []byte) error {
	var res CiArtifactResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
