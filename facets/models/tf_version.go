// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TfVersion tf version
//
// swagger:model TfVersion
type TfVersion struct {

	// last modified
	// Format: date-time
	LastModified strfmt.DateTime `json:"lastModified,omitempty"`

	// major version
	// Required: true
	MajorVersion *int32 `json:"majorVersion"`

	// LATEST
	// Example: LATEST
	// Required: true
	MinorVersion *string `json:"minorVersion"`

	// tf stream
	// Required: true
	TfStream *string `json:"tfStream"`
}

// Validate validates this tf version
func (m *TfVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMajorVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinorVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTfStream(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TfVersion) validateLastModified(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TfVersion) validateMajorVersion(formats strfmt.Registry) error {

	if err := validate.Required("majorVersion", "body", m.MajorVersion); err != nil {
		return err
	}

	return nil
}

func (m *TfVersion) validateMinorVersion(formats strfmt.Registry) error {

	if err := validate.Required("minorVersion", "body", m.MinorVersion); err != nil {
		return err
	}

	return nil
}

func (m *TfVersion) validateTfStream(formats strfmt.Registry) error {

	if err := validate.Required("tfStream", "body", m.TfStream); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tf version based on context it is used
func (m *TfVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TfVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TfVersion) UnmarshalBinary(b []byte) error {
	var res TfVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
