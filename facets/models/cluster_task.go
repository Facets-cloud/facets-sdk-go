// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterTask ClusterTask
//
// swagger:model ClusterTask
type ClusterTask struct {

	// cluster Id
	ClusterID string `json:"clusterId,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// stack name
	StackName string `json:"stackName,omitempty"`

	// task status
	// Enum: ["QUEUED","EXECUTED","DISABLED"]
	TaskStatus string `json:"taskStatus,omitempty"`

	// tasks
	Tasks []string `json:"tasks"`
}

// Validate validates this cluster task
func (m *ClusterTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTaskStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterTaskTypeTaskStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["QUEUED","EXECUTED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterTaskTypeTaskStatusPropEnum = append(clusterTaskTypeTaskStatusPropEnum, v)
	}
}

const (

	// ClusterTaskTaskStatusQUEUED captures enum value "QUEUED"
	ClusterTaskTaskStatusQUEUED string = "QUEUED"

	// ClusterTaskTaskStatusEXECUTED captures enum value "EXECUTED"
	ClusterTaskTaskStatusEXECUTED string = "EXECUTED"

	// ClusterTaskTaskStatusDISABLED captures enum value "DISABLED"
	ClusterTaskTaskStatusDISABLED string = "DISABLED"
)

// prop value enum
func (m *ClusterTask) validateTaskStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterTaskTypeTaskStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterTask) validateTaskStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateTaskStatusEnum("taskStatus", "body", m.TaskStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster task based on context it is used
func (m *ClusterTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterTask) UnmarshalBinary(b []byte) error {
	var res ClusterTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
