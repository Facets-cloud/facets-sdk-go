// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Info Info
//
// swagger:model Info
type Info struct {

	// artifact type
	// Enum: ["docker_image","freestyle"]
	ArtifactType string `json:"artifactType,omitempty"`

	// artifactory
	Artifactory string `json:"artifactory,omitempty"`

	// ci name
	CiName string `json:"ciName,omitempty"`

	// disabled
	Disabled bool `json:"disabled,omitempty"`

	// flavour
	Flavour string `json:"flavour,omitempty"`

	// github repository Url
	GithubRepositoryURL string `json:"githubRepositoryUrl,omitempty"`

	// inherit from base
	InheritFromBase bool `json:"inheritFromBase,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// overridden name
	OverriddenName string `json:"overriddenName,omitempty"`

	// provided
	Provided bool `json:"provided,omitempty"`

	// repository
	Repository string `json:"repository,omitempty"`

	// repository path
	RepositoryPath string `json:"repositoryPath,omitempty"`

	// static image
	StaticImage string `json:"staticImage,omitempty"`

	// strategy
	// Enum: ["RollingUpdate","BlueGreen","Canary"]
	Strategy string `json:"strategy,omitempty"`

	// tag
	Tag string `json:"tag,omitempty"`

	// ui
	UI interface{} `json:"ui,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this info
func (m *Info) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrategy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var infoTypeArtifactTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["docker_image","freestyle"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		infoTypeArtifactTypePropEnum = append(infoTypeArtifactTypePropEnum, v)
	}
}

const (

	// InfoArtifactTypeDockerImage captures enum value "docker_image"
	InfoArtifactTypeDockerImage string = "docker_image"

	// InfoArtifactTypeFreestyle captures enum value "freestyle"
	InfoArtifactTypeFreestyle string = "freestyle"
)

// prop value enum
func (m *Info) validateArtifactTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, infoTypeArtifactTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Info) validateArtifactType(formats strfmt.Registry) error {
	if swag.IsZero(m.ArtifactType) { // not required
		return nil
	}

	// value enum
	if err := m.validateArtifactTypeEnum("artifactType", "body", m.ArtifactType); err != nil {
		return err
	}

	return nil
}

var infoTypeStrategyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RollingUpdate","BlueGreen","Canary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		infoTypeStrategyPropEnum = append(infoTypeStrategyPropEnum, v)
	}
}

const (

	// InfoStrategyRollingUpdate captures enum value "RollingUpdate"
	InfoStrategyRollingUpdate string = "RollingUpdate"

	// InfoStrategyBlueGreen captures enum value "BlueGreen"
	InfoStrategyBlueGreen string = "BlueGreen"

	// InfoStrategyCanary captures enum value "Canary"
	InfoStrategyCanary string = "Canary"
)

// prop value enum
func (m *Info) validateStrategyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, infoTypeStrategyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Info) validateStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.Strategy) { // not required
		return nil
	}

	// value enum
	if err := m.validateStrategyEnum("strategy", "body", m.Strategy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this info based on context it is used
func (m *Info) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Info) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Info) UnmarshalBinary(b []byte) error {
	var res Info
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
