// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Application Application
//
// swagger:model Application
type Application struct {

	// application family
	// Enum: ["CRM","ECOMMERCE","INTEGRATIONS","OPS"]
	ApplicationFamily string `json:"applicationFamily,omitempty"`

	// application root directory
	ApplicationRootDirectory string `json:"applicationRootDirectory,omitempty"`

	// application type
	// Enum: ["SERVICE","SCHEDULED_JOB","STATEFUL_SET","SERVERLESS"]
	ApplicationType string `json:"applicationType,omitempty"`

	// branch build repository ids
	BranchBuildRepositoryIds []string `json:"branchBuildRepositoryIds"`

	// build type
	// Enum: ["MVN","MVN_SONAR_BRANCH","MVN_SONAR_BRANCH_UT_STRICT","JDK11_MAVEN3","JDK11_MVN3_SONAR_BRANCH","JDK17_MVN3_SONAR_BRANCH","JDK17_MVN3_LIBRARY_SONAR_BRANCH","JAVA8_LIBRARY","JAVA8_LIBRARY_SONAR_BRANCH","FREESTYLE_DOCKER","DOTNET_CORE","MVN_IONIC","MVN_IONIC_SONAR_BRANCH","JDK6_MAVEN2","MJ_NUGET","DOTNET_CORE22","DOTNET_CORE3","SBT","NPM","NPM_SONAR_BRANCH","NPM_LTS_V18_SONAR_BRANCH","NPM_UI","NPM_UI_SONAR_BRANCH","NPM_UI_V14_SONAR_BRANCH","THRIFT8_LIBRARY","THRIFT9_LIBRARY","THRIFT8_WITH_FLAGS_LIBRARY","SCALA_LIBRARY","CHEETAH_LIBRARY","SHARINGAN_LIBRARY","NPM_LTS_V20_SONAR_BRANCH","JDK11_MVN3_LIBRARY_SONAR_BRANCH"]
	BuildType string `json:"buildType,omitempty"`

	// ci enabled
	CiEnabled bool `json:"ciEnabled,omitempty"`

	// common configs
	CommonConfigs map[string]string `json:"commonConfigs,omitempty"`

	// deployment strategy
	// Enum: ["Recreate","RollingUpdate"]
	DeploymentStrategy string `json:"deploymentStrategy,omitempty"`

	// dns prefix
	DNSPrefix string `json:"dnsPrefix,omitempty"`

	// dns type
	// Enum: ["PUBLIC","PRIVATE"]
	DNSType string `json:"dnsType,omitempty"`

	// elb idle timeout seconds
	ElbIdleTimeoutSeconds int32 `json:"elbIdleTimeoutSeconds,omitempty"`

	// health check
	HealthCheck *HealthCheck `json:"healthCheck,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// load balancer type
	// Enum: ["INTERNAL","EXTERNAL","NONE"]
	LoadBalancerType string `json:"loadBalancerType,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// new relic alert recipients
	NewRelicAlertRecipients string `json:"newRelicAlertRecipients,omitempty"`

	// ports
	Ports []*Port `json:"ports"`

	// pvc list
	PvcList []*PVC `json:"pvcList"`

	// repository default branch
	RepositoryDefaultBranch string `json:"repositoryDefaultBranch,omitempty"`

	// repository Url
	RepositoryURL string `json:"repositoryUrl,omitempty"`

	// resource allocation strategy
	// Enum: ["GENERAL_PURPOSE","CPU_INTENSIVE"]
	ResourceAllocationStrategy string `json:"resourceAllocationStrategy,omitempty"`

	// sonar branch wise analysis supported
	SonarBranchWiseAnalysisSupported bool `json:"sonarBranchWiseAnalysisSupported,omitempty"`

	// sonar project key
	SonarProjectKey string `json:"sonarProjectKey,omitempty"`

	// status callback Url
	StatusCallbackURL string `json:"statusCallbackUrl,omitempty"`

	// status callback urls
	StatusCallbackUrls []string `json:"statusCallbackUrls"`

	// strict git flow mode enabled
	StrictGitFlowModeEnabled bool `json:"strictGitFlowModeEnabled,omitempty"`

	// tag build repository ids
	TagBuildRepositoryIds []string `json:"tagBuildRepositoryIds"`

	// vcs provider
	// Enum: ["BITBUCKET","GITHUB"]
	VcsProvider string `json:"vcsProvider,omitempty"`

	// webhook Id
	WebhookID string `json:"webhookId,omitempty"`
}

// Validate validates this application
func (m *Application) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationFamily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthCheck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoadBalancerType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePvcList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceAllocationStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcsProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var applicationTypeApplicationFamilyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CRM","ECOMMERCE","INTEGRATIONS","OPS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationTypeApplicationFamilyPropEnum = append(applicationTypeApplicationFamilyPropEnum, v)
	}
}

const (

	// ApplicationApplicationFamilyCRM captures enum value "CRM"
	ApplicationApplicationFamilyCRM string = "CRM"

	// ApplicationApplicationFamilyECOMMERCE captures enum value "ECOMMERCE"
	ApplicationApplicationFamilyECOMMERCE string = "ECOMMERCE"

	// ApplicationApplicationFamilyINTEGRATIONS captures enum value "INTEGRATIONS"
	ApplicationApplicationFamilyINTEGRATIONS string = "INTEGRATIONS"

	// ApplicationApplicationFamilyOPS captures enum value "OPS"
	ApplicationApplicationFamilyOPS string = "OPS"
)

// prop value enum
func (m *Application) validateApplicationFamilyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationTypeApplicationFamilyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Application) validateApplicationFamily(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationFamily) { // not required
		return nil
	}

	// value enum
	if err := m.validateApplicationFamilyEnum("applicationFamily", "body", m.ApplicationFamily); err != nil {
		return err
	}

	return nil
}

var applicationTypeApplicationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SERVICE","SCHEDULED_JOB","STATEFUL_SET","SERVERLESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationTypeApplicationTypePropEnum = append(applicationTypeApplicationTypePropEnum, v)
	}
}

const (

	// ApplicationApplicationTypeSERVICE captures enum value "SERVICE"
	ApplicationApplicationTypeSERVICE string = "SERVICE"

	// ApplicationApplicationTypeSCHEDULEDJOB captures enum value "SCHEDULED_JOB"
	ApplicationApplicationTypeSCHEDULEDJOB string = "SCHEDULED_JOB"

	// ApplicationApplicationTypeSTATEFULSET captures enum value "STATEFUL_SET"
	ApplicationApplicationTypeSTATEFULSET string = "STATEFUL_SET"

	// ApplicationApplicationTypeSERVERLESS captures enum value "SERVERLESS"
	ApplicationApplicationTypeSERVERLESS string = "SERVERLESS"
)

// prop value enum
func (m *Application) validateApplicationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationTypeApplicationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Application) validateApplicationType(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateApplicationTypeEnum("applicationType", "body", m.ApplicationType); err != nil {
		return err
	}

	return nil
}

var applicationTypeBuildTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MVN","MVN_SONAR_BRANCH","MVN_SONAR_BRANCH_UT_STRICT","JDK11_MAVEN3","JDK11_MVN3_SONAR_BRANCH","JDK17_MVN3_SONAR_BRANCH","JDK17_MVN3_LIBRARY_SONAR_BRANCH","JAVA8_LIBRARY","JAVA8_LIBRARY_SONAR_BRANCH","FREESTYLE_DOCKER","DOTNET_CORE","MVN_IONIC","MVN_IONIC_SONAR_BRANCH","JDK6_MAVEN2","MJ_NUGET","DOTNET_CORE22","DOTNET_CORE3","SBT","NPM","NPM_SONAR_BRANCH","NPM_LTS_V18_SONAR_BRANCH","NPM_UI","NPM_UI_SONAR_BRANCH","NPM_UI_V14_SONAR_BRANCH","THRIFT8_LIBRARY","THRIFT9_LIBRARY","THRIFT8_WITH_FLAGS_LIBRARY","SCALA_LIBRARY","CHEETAH_LIBRARY","SHARINGAN_LIBRARY","NPM_LTS_V20_SONAR_BRANCH","JDK11_MVN3_LIBRARY_SONAR_BRANCH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationTypeBuildTypePropEnum = append(applicationTypeBuildTypePropEnum, v)
	}
}

const (

	// ApplicationBuildTypeMVN captures enum value "MVN"
	ApplicationBuildTypeMVN string = "MVN"

	// ApplicationBuildTypeMVNSONARBRANCH captures enum value "MVN_SONAR_BRANCH"
	ApplicationBuildTypeMVNSONARBRANCH string = "MVN_SONAR_BRANCH"

	// ApplicationBuildTypeMVNSONARBRANCHUTSTRICT captures enum value "MVN_SONAR_BRANCH_UT_STRICT"
	ApplicationBuildTypeMVNSONARBRANCHUTSTRICT string = "MVN_SONAR_BRANCH_UT_STRICT"

	// ApplicationBuildTypeJDK11MAVEN3 captures enum value "JDK11_MAVEN3"
	ApplicationBuildTypeJDK11MAVEN3 string = "JDK11_MAVEN3"

	// ApplicationBuildTypeJDK11MVN3SONARBRANCH captures enum value "JDK11_MVN3_SONAR_BRANCH"
	ApplicationBuildTypeJDK11MVN3SONARBRANCH string = "JDK11_MVN3_SONAR_BRANCH"

	// ApplicationBuildTypeJDK17MVN3SONARBRANCH captures enum value "JDK17_MVN3_SONAR_BRANCH"
	ApplicationBuildTypeJDK17MVN3SONARBRANCH string = "JDK17_MVN3_SONAR_BRANCH"

	// ApplicationBuildTypeJDK17MVN3LIBRARYSONARBRANCH captures enum value "JDK17_MVN3_LIBRARY_SONAR_BRANCH"
	ApplicationBuildTypeJDK17MVN3LIBRARYSONARBRANCH string = "JDK17_MVN3_LIBRARY_SONAR_BRANCH"

	// ApplicationBuildTypeJAVA8LIBRARY captures enum value "JAVA8_LIBRARY"
	ApplicationBuildTypeJAVA8LIBRARY string = "JAVA8_LIBRARY"

	// ApplicationBuildTypeJAVA8LIBRARYSONARBRANCH captures enum value "JAVA8_LIBRARY_SONAR_BRANCH"
	ApplicationBuildTypeJAVA8LIBRARYSONARBRANCH string = "JAVA8_LIBRARY_SONAR_BRANCH"

	// ApplicationBuildTypeFREESTYLEDOCKER captures enum value "FREESTYLE_DOCKER"
	ApplicationBuildTypeFREESTYLEDOCKER string = "FREESTYLE_DOCKER"

	// ApplicationBuildTypeDOTNETCORE captures enum value "DOTNET_CORE"
	ApplicationBuildTypeDOTNETCORE string = "DOTNET_CORE"

	// ApplicationBuildTypeMVNIONIC captures enum value "MVN_IONIC"
	ApplicationBuildTypeMVNIONIC string = "MVN_IONIC"

	// ApplicationBuildTypeMVNIONICSONARBRANCH captures enum value "MVN_IONIC_SONAR_BRANCH"
	ApplicationBuildTypeMVNIONICSONARBRANCH string = "MVN_IONIC_SONAR_BRANCH"

	// ApplicationBuildTypeJDK6MAVEN2 captures enum value "JDK6_MAVEN2"
	ApplicationBuildTypeJDK6MAVEN2 string = "JDK6_MAVEN2"

	// ApplicationBuildTypeMJNUGET captures enum value "MJ_NUGET"
	ApplicationBuildTypeMJNUGET string = "MJ_NUGET"

	// ApplicationBuildTypeDOTNETCORE22 captures enum value "DOTNET_CORE22"
	ApplicationBuildTypeDOTNETCORE22 string = "DOTNET_CORE22"

	// ApplicationBuildTypeDOTNETCORE3 captures enum value "DOTNET_CORE3"
	ApplicationBuildTypeDOTNETCORE3 string = "DOTNET_CORE3"

	// ApplicationBuildTypeSBT captures enum value "SBT"
	ApplicationBuildTypeSBT string = "SBT"

	// ApplicationBuildTypeNPM captures enum value "NPM"
	ApplicationBuildTypeNPM string = "NPM"

	// ApplicationBuildTypeNPMSONARBRANCH captures enum value "NPM_SONAR_BRANCH"
	ApplicationBuildTypeNPMSONARBRANCH string = "NPM_SONAR_BRANCH"

	// ApplicationBuildTypeNPMLTSV18SONARBRANCH captures enum value "NPM_LTS_V18_SONAR_BRANCH"
	ApplicationBuildTypeNPMLTSV18SONARBRANCH string = "NPM_LTS_V18_SONAR_BRANCH"

	// ApplicationBuildTypeNPMUI captures enum value "NPM_UI"
	ApplicationBuildTypeNPMUI string = "NPM_UI"

	// ApplicationBuildTypeNPMUISONARBRANCH captures enum value "NPM_UI_SONAR_BRANCH"
	ApplicationBuildTypeNPMUISONARBRANCH string = "NPM_UI_SONAR_BRANCH"

	// ApplicationBuildTypeNPMUIV14SONARBRANCH captures enum value "NPM_UI_V14_SONAR_BRANCH"
	ApplicationBuildTypeNPMUIV14SONARBRANCH string = "NPM_UI_V14_SONAR_BRANCH"

	// ApplicationBuildTypeTHRIFT8LIBRARY captures enum value "THRIFT8_LIBRARY"
	ApplicationBuildTypeTHRIFT8LIBRARY string = "THRIFT8_LIBRARY"

	// ApplicationBuildTypeTHRIFT9LIBRARY captures enum value "THRIFT9_LIBRARY"
	ApplicationBuildTypeTHRIFT9LIBRARY string = "THRIFT9_LIBRARY"

	// ApplicationBuildTypeTHRIFT8WITHFLAGSLIBRARY captures enum value "THRIFT8_WITH_FLAGS_LIBRARY"
	ApplicationBuildTypeTHRIFT8WITHFLAGSLIBRARY string = "THRIFT8_WITH_FLAGS_LIBRARY"

	// ApplicationBuildTypeSCALALIBRARY captures enum value "SCALA_LIBRARY"
	ApplicationBuildTypeSCALALIBRARY string = "SCALA_LIBRARY"

	// ApplicationBuildTypeCHEETAHLIBRARY captures enum value "CHEETAH_LIBRARY"
	ApplicationBuildTypeCHEETAHLIBRARY string = "CHEETAH_LIBRARY"

	// ApplicationBuildTypeSHARINGANLIBRARY captures enum value "SHARINGAN_LIBRARY"
	ApplicationBuildTypeSHARINGANLIBRARY string = "SHARINGAN_LIBRARY"

	// ApplicationBuildTypeNPMLTSV20SONARBRANCH captures enum value "NPM_LTS_V20_SONAR_BRANCH"
	ApplicationBuildTypeNPMLTSV20SONARBRANCH string = "NPM_LTS_V20_SONAR_BRANCH"

	// ApplicationBuildTypeJDK11MVN3LIBRARYSONARBRANCH captures enum value "JDK11_MVN3_LIBRARY_SONAR_BRANCH"
	ApplicationBuildTypeJDK11MVN3LIBRARYSONARBRANCH string = "JDK11_MVN3_LIBRARY_SONAR_BRANCH"
)

// prop value enum
func (m *Application) validateBuildTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationTypeBuildTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Application) validateBuildType(formats strfmt.Registry) error {
	if swag.IsZero(m.BuildType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBuildTypeEnum("buildType", "body", m.BuildType); err != nil {
		return err
	}

	return nil
}

var applicationTypeDeploymentStrategyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Recreate","RollingUpdate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationTypeDeploymentStrategyPropEnum = append(applicationTypeDeploymentStrategyPropEnum, v)
	}
}

const (

	// ApplicationDeploymentStrategyRecreate captures enum value "Recreate"
	ApplicationDeploymentStrategyRecreate string = "Recreate"

	// ApplicationDeploymentStrategyRollingUpdate captures enum value "RollingUpdate"
	ApplicationDeploymentStrategyRollingUpdate string = "RollingUpdate"
)

// prop value enum
func (m *Application) validateDeploymentStrategyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationTypeDeploymentStrategyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Application) validateDeploymentStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentStrategy) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeploymentStrategyEnum("deploymentStrategy", "body", m.DeploymentStrategy); err != nil {
		return err
	}

	return nil
}

var applicationTypeDNSTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PUBLIC","PRIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationTypeDNSTypePropEnum = append(applicationTypeDNSTypePropEnum, v)
	}
}

const (

	// ApplicationDNSTypePUBLIC captures enum value "PUBLIC"
	ApplicationDNSTypePUBLIC string = "PUBLIC"

	// ApplicationDNSTypePRIVATE captures enum value "PRIVATE"
	ApplicationDNSTypePRIVATE string = "PRIVATE"
)

// prop value enum
func (m *Application) validateDNSTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationTypeDNSTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Application) validateDNSType(formats strfmt.Registry) error {
	if swag.IsZero(m.DNSType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDNSTypeEnum("dnsType", "body", m.DNSType); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateHealthCheck(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthCheck) { // not required
		return nil
	}

	if m.HealthCheck != nil {
		if err := m.HealthCheck.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("healthCheck")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("healthCheck")
			}
			return err
		}
	}

	return nil
}

var applicationTypeLoadBalancerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INTERNAL","EXTERNAL","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationTypeLoadBalancerTypePropEnum = append(applicationTypeLoadBalancerTypePropEnum, v)
	}
}

const (

	// ApplicationLoadBalancerTypeINTERNAL captures enum value "INTERNAL"
	ApplicationLoadBalancerTypeINTERNAL string = "INTERNAL"

	// ApplicationLoadBalancerTypeEXTERNAL captures enum value "EXTERNAL"
	ApplicationLoadBalancerTypeEXTERNAL string = "EXTERNAL"

	// ApplicationLoadBalancerTypeNONE captures enum value "NONE"
	ApplicationLoadBalancerTypeNONE string = "NONE"
)

// prop value enum
func (m *Application) validateLoadBalancerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationTypeLoadBalancerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Application) validateLoadBalancerType(formats strfmt.Registry) error {
	if swag.IsZero(m.LoadBalancerType) { // not required
		return nil
	}

	// value enum
	if err := m.validateLoadBalancerTypeEnum("loadBalancerType", "body", m.LoadBalancerType); err != nil {
		return err
	}

	return nil
}

func (m *Application) validatePorts(formats strfmt.Registry) error {
	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Application) validatePvcList(formats strfmt.Registry) error {
	if swag.IsZero(m.PvcList) { // not required
		return nil
	}

	for i := 0; i < len(m.PvcList); i++ {
		if swag.IsZero(m.PvcList[i]) { // not required
			continue
		}

		if m.PvcList[i] != nil {
			if err := m.PvcList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pvcList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pvcList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var applicationTypeResourceAllocationStrategyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GENERAL_PURPOSE","CPU_INTENSIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationTypeResourceAllocationStrategyPropEnum = append(applicationTypeResourceAllocationStrategyPropEnum, v)
	}
}

const (

	// ApplicationResourceAllocationStrategyGENERALPURPOSE captures enum value "GENERAL_PURPOSE"
	ApplicationResourceAllocationStrategyGENERALPURPOSE string = "GENERAL_PURPOSE"

	// ApplicationResourceAllocationStrategyCPUINTENSIVE captures enum value "CPU_INTENSIVE"
	ApplicationResourceAllocationStrategyCPUINTENSIVE string = "CPU_INTENSIVE"
)

// prop value enum
func (m *Application) validateResourceAllocationStrategyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationTypeResourceAllocationStrategyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Application) validateResourceAllocationStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceAllocationStrategy) { // not required
		return nil
	}

	// value enum
	if err := m.validateResourceAllocationStrategyEnum("resourceAllocationStrategy", "body", m.ResourceAllocationStrategy); err != nil {
		return err
	}

	return nil
}

var applicationTypeVcsProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BITBUCKET","GITHUB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationTypeVcsProviderPropEnum = append(applicationTypeVcsProviderPropEnum, v)
	}
}

const (

	// ApplicationVcsProviderBITBUCKET captures enum value "BITBUCKET"
	ApplicationVcsProviderBITBUCKET string = "BITBUCKET"

	// ApplicationVcsProviderGITHUB captures enum value "GITHUB"
	ApplicationVcsProviderGITHUB string = "GITHUB"
)

// prop value enum
func (m *Application) validateVcsProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationTypeVcsProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Application) validateVcsProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.VcsProvider) { // not required
		return nil
	}

	// value enum
	if err := m.validateVcsProviderEnum("vcsProvider", "body", m.VcsProvider); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this application based on the context it is used
func (m *Application) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHealthCheck(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePvcList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Application) contextValidateHealthCheck(ctx context.Context, formats strfmt.Registry) error {

	if m.HealthCheck != nil {

		if swag.IsZero(m.HealthCheck) { // not required
			return nil
		}

		if err := m.HealthCheck.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("healthCheck")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("healthCheck")
			}
			return err
		}
	}

	return nil
}

func (m *Application) contextValidatePorts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ports); i++ {

		if m.Ports[i] != nil {

			if swag.IsZero(m.Ports[i]) { // not required
				return nil
			}

			if err := m.Ports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Application) contextValidatePvcList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PvcList); i++ {

		if m.PvcList[i] != nil {

			if swag.IsZero(m.PvcList[i]) { // not required
				return nil
			}

			if err := m.PvcList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pvcList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pvcList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Application) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Application) UnmarshalBinary(b []byte) error {
	var res Application
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
