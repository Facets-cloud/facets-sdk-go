// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PromotionWorkflow promotion workflow
//
// swagger:model PromotionWorkflow
type PromotionWorkflow struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// default workflow
	DefaultWorkflow bool `json:"defaultWorkflow,omitempty"`

	// hierarchies
	Hierarchies []*WorkflowHierarchy `json:"hierarchies"`

	// id
	ID string `json:"id,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// registration type
	// Required: true
	// Enum: ["ENVIRONMENT","RELEASE_STREAM","HYBRID"]
	RegistrationType *string `json:"registrationType"`

	// stack name
	StackName string `json:"stackName,omitempty"`

	// workflow name
	// Required: true
	WorkflowName *string `json:"workflowName"`
}

// Validate validates this promotion workflow
func (m *PromotionWorkflow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHierarchies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PromotionWorkflow) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PromotionWorkflow) validateHierarchies(formats strfmt.Registry) error {
	if swag.IsZero(m.Hierarchies) { // not required
		return nil
	}

	for i := 0; i < len(m.Hierarchies); i++ {
		if swag.IsZero(m.Hierarchies[i]) { // not required
			continue
		}

		if m.Hierarchies[i] != nil {
			if err := m.Hierarchies[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("hierarchies" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("hierarchies" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *PromotionWorkflow) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var promotionWorkflowTypeRegistrationTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENVIRONMENT","RELEASE_STREAM","HYBRID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		promotionWorkflowTypeRegistrationTypePropEnum = append(promotionWorkflowTypeRegistrationTypePropEnum, v)
	}
}

const (

	// PromotionWorkflowRegistrationTypeENVIRONMENT captures enum value "ENVIRONMENT"
	PromotionWorkflowRegistrationTypeENVIRONMENT string = "ENVIRONMENT"

	// PromotionWorkflowRegistrationTypeRELEASESTREAM captures enum value "RELEASE_STREAM"
	PromotionWorkflowRegistrationTypeRELEASESTREAM string = "RELEASE_STREAM"

	// PromotionWorkflowRegistrationTypeHYBRID captures enum value "HYBRID"
	PromotionWorkflowRegistrationTypeHYBRID string = "HYBRID"
)

// prop value enum
func (m *PromotionWorkflow) validateRegistrationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, promotionWorkflowTypeRegistrationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PromotionWorkflow) validateRegistrationType(formats strfmt.Registry) error {

	if err := validate.Required("registrationType", "body", m.RegistrationType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRegistrationTypeEnum("registrationType", "body", *m.RegistrationType); err != nil {
		return err
	}

	return nil
}

func (m *PromotionWorkflow) validateWorkflowName(formats strfmt.Registry) error {

	if err := validate.Required("workflowName", "body", m.WorkflowName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this promotion workflow based on the context it is used
func (m *PromotionWorkflow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHierarchies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PromotionWorkflow) contextValidateHierarchies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Hierarchies); i++ {

		if m.Hierarchies[i] != nil {

			if swag.IsZero(m.Hierarchies[i]) { // not required
				return nil
			}

			if err := m.Hierarchies[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("hierarchies" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("hierarchies" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PromotionWorkflow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PromotionWorkflow) UnmarshalBinary(b []byte) error {
	var res PromotionWorkflow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
