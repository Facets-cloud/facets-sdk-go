// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestBuildDetails TestBuildDetails
//
// swagger:model TestBuildDetails
type TestBuildDetails struct {

	// application family
	ApplicationFamily string `json:"applicationFamily,omitempty"`

	// application Id
	ApplicationID string `json:"applicationId,omitempty"`

	// branch
	Branch string `json:"branch,omitempty"`

	// branch type
	BranchType string `json:"branchType,omitempty"`

	// build Id
	BuildID string `json:"buildId,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// pr Id
	PrID string `json:"prId,omitempty"`

	// sonar Url
	SonarURL string `json:"sonarUrl,omitempty"`

	// test status
	// Enum: ["PASS","FAIL","TEST_FAILED","INPROGRESS"]
	TestStatus string `json:"testStatus,omitempty"`

	// test status rules
	TestStatusRules []*Condition `json:"testStatusRules"`

	// timestamp
	Timestamp int64 `json:"timestamp,omitempty"`
}

// Validate validates this test build details
func (m *TestBuildDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTestStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestStatusRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var testBuildDetailsTypeTestStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PASS","FAIL","TEST_FAILED","INPROGRESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		testBuildDetailsTypeTestStatusPropEnum = append(testBuildDetailsTypeTestStatusPropEnum, v)
	}
}

const (

	// TestBuildDetailsTestStatusPASS captures enum value "PASS"
	TestBuildDetailsTestStatusPASS string = "PASS"

	// TestBuildDetailsTestStatusFAIL captures enum value "FAIL"
	TestBuildDetailsTestStatusFAIL string = "FAIL"

	// TestBuildDetailsTestStatusTESTFAILED captures enum value "TEST_FAILED"
	TestBuildDetailsTestStatusTESTFAILED string = "TEST_FAILED"

	// TestBuildDetailsTestStatusINPROGRESS captures enum value "INPROGRESS"
	TestBuildDetailsTestStatusINPROGRESS string = "INPROGRESS"
)

// prop value enum
func (m *TestBuildDetails) validateTestStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, testBuildDetailsTypeTestStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TestBuildDetails) validateTestStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.TestStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateTestStatusEnum("testStatus", "body", m.TestStatus); err != nil {
		return err
	}

	return nil
}

func (m *TestBuildDetails) validateTestStatusRules(formats strfmt.Registry) error {
	if swag.IsZero(m.TestStatusRules) { // not required
		return nil
	}

	for i := 0; i < len(m.TestStatusRules); i++ {
		if swag.IsZero(m.TestStatusRules[i]) { // not required
			continue
		}

		if m.TestStatusRules[i] != nil {
			if err := m.TestStatusRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("testStatusRules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("testStatusRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this test build details based on the context it is used
func (m *TestBuildDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTestStatusRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestBuildDetails) contextValidateTestStatusRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TestStatusRules); i++ {

		if m.TestStatusRules[i] != nil {

			if swag.IsZero(m.TestStatusRules[i]) { // not required
				return nil
			}

			if err := m.TestStatusRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("testStatusRules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("testStatusRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestBuildDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestBuildDetails) UnmarshalBinary(b []byte) error {
	var res TestBuildDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
