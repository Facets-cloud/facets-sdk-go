// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TFModule Model representing a Terraform Module
//
// swagger:model TFModule
type TFModule struct {

	// Account identifier
	// Example: 67890
	AccountID string `json:"accountId,omitempty"`

	// Alias flavors for the module
	// Example: ["medium","extra-large"]
	// Unique: true
	AliasFlavors []string `json:"aliasFlavors"`

	// List of test projects where this module will be available. If absent, it is available globally.
	// Example: ["project-1","project-2"]
	AllowedTestProjects []string `json:"allowedTestProjects"`

	// change log
	ChangeLog string `json:"changeLog,omitempty"`

	// Supported cloud providers for this module
	// Example: ["gcp"]
	// Unique: true
	Clouds []string `json:"clouds"`

	// contains overridable fields
	ContainsOverridableFields bool `json:"containsOverridableFields,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// critical resource
	CriticalResource bool `json:"criticalResource,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// enable kubernetes explorer
	EnableKubernetesExplorer bool `json:"enableKubernetesExplorer,omitempty"`

	// Facets YAML content
	FacetsYaml string `json:"facetsYaml,omitempty"`

	// feature branch
	FeatureBranch bool `json:"featureBranch,omitempty"`

	// Flavor of the TF Module
	// Example: large
	Flavor string `json:"flavor,omitempty"`

	// Reference to a specific GIT branch or commit
	// Example: develop
	GitRef string `json:"gitRef,omitempty"`

	// URL of the GIT repository
	// Example: https://gitlab.com/repo.git
	GitURL string `json:"gitUrl,omitempty"`

	// iac tool
	// Unique: true
	IacTool []string `json:"iacTool"`

	// id
	ID string `json:"id,omitempty"`

	// Input parameters for this module
	Inputs map[string]Input `json:"inputs,omitempty"`

	// Intent of the TF Module
	// Example: compute
	Intent string `json:"intent,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// metadata
	Metadata string `json:"metadata,omitempty"`

	// module group Id
	ModuleGroupID string `json:"moduleGroupId,omitempty"`

	// Maximum allowed length for resource names using this module
	// Example: 40
	// Minimum: 1
	NameLengthLimit int32 `json:"nameLengthLimit,omitempty"`

	// outputs
	Outputs []*IntentOutput `json:"outputs"`

	// path
	Path *TFModulePath `json:"path,omitempty"`

	// readme md
	ReadmeMd string `json:"readmeMd,omitempty"`

	// Relative path within the repository
	// Example: modules/path
	RelativePath string `json:"relativePath,omitempty"`

	// Sample JSON configuration
	// Example: {}
	SampleJSON string `json:"sampleJson,omitempty"`

	// Source of the module
	// Enum: ["BUILT_IN","CUSTOM"]
	Source string `json:"source,omitempty"`

	// Specification details of the module
	Spec string `json:"spec,omitempty"`

	// spec modeled
	SpecModeled bool `json:"specModeled,omitempty"`

	// Stage of the TF Module in its lifecycle
	// Example: PUBLISHED
	// Enum: ["PREVIEW","PUBLISHED"]
	Stage string `json:"stage,omitempty"`

	// tags
	// Unique: true
	Tags []string `json:"tags"`

	// Type of the TF Module
	// Example: SIMPLE
	// Enum: ["SIMPLE","ADD_ON"]
	Type string `json:"type,omitempty"`

	// Version of the TF Module
	// Example: 2.0.0
	Version string `json:"version,omitempty"`

	// versioning key
	VersioningKey string `json:"versioningKey,omitempty"`
}

// Validate validates this t f module
func (m *TFModule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAliasFlavors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClouds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIacTool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameLengthLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TFModule) validateAliasFlavors(formats strfmt.Registry) error {
	if swag.IsZero(m.AliasFlavors) { // not required
		return nil
	}

	if err := validate.UniqueItems("aliasFlavors", "body", m.AliasFlavors); err != nil {
		return err
	}

	return nil
}

func (m *TFModule) validateClouds(formats strfmt.Registry) error {
	if swag.IsZero(m.Clouds) { // not required
		return nil
	}

	if err := validate.UniqueItems("clouds", "body", m.Clouds); err != nil {
		return err
	}

	return nil
}

func (m *TFModule) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var tFModuleIacToolItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TERRAFORM","OPENTOFU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tFModuleIacToolItemsEnum = append(tFModuleIacToolItemsEnum, v)
	}
}

func (m *TFModule) validateIacToolItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tFModuleIacToolItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TFModule) validateIacTool(formats strfmt.Registry) error {
	if swag.IsZero(m.IacTool) { // not required
		return nil
	}

	if err := validate.UniqueItems("iacTool", "body", m.IacTool); err != nil {
		return err
	}

	for i := 0; i < len(m.IacTool); i++ {

		// value enum
		if err := m.validateIacToolItemsEnum("iacTool"+"."+strconv.Itoa(i), "body", m.IacTool[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *TFModule) validateInputs(formats strfmt.Registry) error {
	if swag.IsZero(m.Inputs) { // not required
		return nil
	}

	for k := range m.Inputs {

		if err := validate.Required("inputs"+"."+k, "body", m.Inputs[k]); err != nil {
			return err
		}
		if val, ok := m.Inputs[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputs" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputs" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *TFModule) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TFModule) validateNameLengthLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.NameLengthLimit) { // not required
		return nil
	}

	if err := validate.MinimumInt("nameLengthLimit", "body", int64(m.NameLengthLimit), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *TFModule) validateOutputs(formats strfmt.Registry) error {
	if swag.IsZero(m.Outputs) { // not required
		return nil
	}

	for i := 0; i < len(m.Outputs); i++ {
		if swag.IsZero(m.Outputs[i]) { // not required
			continue
		}

		if m.Outputs[i] != nil {
			if err := m.Outputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TFModule) validatePath(formats strfmt.Registry) error {
	if swag.IsZero(m.Path) { // not required
		return nil
	}

	if m.Path != nil {
		if err := m.Path.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("path")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("path")
			}
			return err
		}
	}

	return nil
}

var tFModuleTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BUILT_IN","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tFModuleTypeSourcePropEnum = append(tFModuleTypeSourcePropEnum, v)
	}
}

const (

	// TFModuleSourceBUILTIN captures enum value "BUILT_IN"
	TFModuleSourceBUILTIN string = "BUILT_IN"

	// TFModuleSourceCUSTOM captures enum value "CUSTOM"
	TFModuleSourceCUSTOM string = "CUSTOM"
)

// prop value enum
func (m *TFModule) validateSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tFModuleTypeSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TFModule) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceEnum("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

var tFModuleTypeStagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PREVIEW","PUBLISHED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tFModuleTypeStagePropEnum = append(tFModuleTypeStagePropEnum, v)
	}
}

const (

	// TFModuleStagePREVIEW captures enum value "PREVIEW"
	TFModuleStagePREVIEW string = "PREVIEW"

	// TFModuleStagePUBLISHED captures enum value "PUBLISHED"
	TFModuleStagePUBLISHED string = "PUBLISHED"
)

// prop value enum
func (m *TFModule) validateStageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tFModuleTypeStagePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TFModule) validateStage(formats strfmt.Registry) error {
	if swag.IsZero(m.Stage) { // not required
		return nil
	}

	// value enum
	if err := m.validateStageEnum("stage", "body", m.Stage); err != nil {
		return err
	}

	return nil
}

func (m *TFModule) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := validate.UniqueItems("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

var tFModuleTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SIMPLE","ADD_ON"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tFModuleTypeTypePropEnum = append(tFModuleTypeTypePropEnum, v)
	}
}

const (

	// TFModuleTypeSIMPLE captures enum value "SIMPLE"
	TFModuleTypeSIMPLE string = "SIMPLE"

	// TFModuleTypeADDON captures enum value "ADD_ON"
	TFModuleTypeADDON string = "ADD_ON"
)

// prop value enum
func (m *TFModule) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tFModuleTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TFModule) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this t f module based on the context it is used
func (m *TFModule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInputs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePath(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TFModule) contextValidateInputs(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Inputs {

		if val, ok := m.Inputs[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *TFModule) contextValidateOutputs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Outputs); i++ {

		if m.Outputs[i] != nil {

			if swag.IsZero(m.Outputs[i]) { // not required
				return nil
			}

			if err := m.Outputs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TFModule) contextValidatePath(ctx context.Context, formats strfmt.Registry) error {

	if m.Path != nil {

		if swag.IsZero(m.Path) { // not required
			return nil
		}

		if err := m.Path.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("path")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("path")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TFModule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TFModule) UnmarshalBinary(b []byte) error {
	var res TFModule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
