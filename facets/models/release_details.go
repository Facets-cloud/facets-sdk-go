// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseDetails ReleaseDetails
//
// swagger:model ReleaseDetails
type ReleaseDetails struct {

	// deployment log Id
	DeploymentLogID string `json:"deploymentLogId,omitempty"`

	// release type
	// Enum: ["HOTFIX","RELEASE","LAUNCH","DESTROY","CUSTOM","UNLOCK_STATE","PLAN","HOTFIX_PLAN","APPLY_PLAN","APPLY_HOTFIX_PLAN","SCALE_UP","SCALE_DOWN","MAINTENANCE"]
	ReleaseType string `json:"releaseType,omitempty"`

	// stack version
	StackVersion string `json:"stackVersion,omitempty"`

	// triggered by
	TriggeredBy string `json:"triggeredBy,omitempty"`

	// triggered on
	// Format: date-time
	TriggeredOn strfmt.DateTime `json:"triggeredOn,omitempty"`
}

// Validate validates this release details
func (m *ReleaseDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReleaseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggeredOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var releaseDetailsTypeReleaseTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HOTFIX","RELEASE","LAUNCH","DESTROY","CUSTOM","UNLOCK_STATE","PLAN","HOTFIX_PLAN","APPLY_PLAN","APPLY_HOTFIX_PLAN","SCALE_UP","SCALE_DOWN","MAINTENANCE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		releaseDetailsTypeReleaseTypePropEnum = append(releaseDetailsTypeReleaseTypePropEnum, v)
	}
}

const (

	// ReleaseDetailsReleaseTypeHOTFIX captures enum value "HOTFIX"
	ReleaseDetailsReleaseTypeHOTFIX string = "HOTFIX"

	// ReleaseDetailsReleaseTypeRELEASE captures enum value "RELEASE"
	ReleaseDetailsReleaseTypeRELEASE string = "RELEASE"

	// ReleaseDetailsReleaseTypeLAUNCH captures enum value "LAUNCH"
	ReleaseDetailsReleaseTypeLAUNCH string = "LAUNCH"

	// ReleaseDetailsReleaseTypeDESTROY captures enum value "DESTROY"
	ReleaseDetailsReleaseTypeDESTROY string = "DESTROY"

	// ReleaseDetailsReleaseTypeCUSTOM captures enum value "CUSTOM"
	ReleaseDetailsReleaseTypeCUSTOM string = "CUSTOM"

	// ReleaseDetailsReleaseTypeUNLOCKSTATE captures enum value "UNLOCK_STATE"
	ReleaseDetailsReleaseTypeUNLOCKSTATE string = "UNLOCK_STATE"

	// ReleaseDetailsReleaseTypePLAN captures enum value "PLAN"
	ReleaseDetailsReleaseTypePLAN string = "PLAN"

	// ReleaseDetailsReleaseTypeHOTFIXPLAN captures enum value "HOTFIX_PLAN"
	ReleaseDetailsReleaseTypeHOTFIXPLAN string = "HOTFIX_PLAN"

	// ReleaseDetailsReleaseTypeAPPLYPLAN captures enum value "APPLY_PLAN"
	ReleaseDetailsReleaseTypeAPPLYPLAN string = "APPLY_PLAN"

	// ReleaseDetailsReleaseTypeAPPLYHOTFIXPLAN captures enum value "APPLY_HOTFIX_PLAN"
	ReleaseDetailsReleaseTypeAPPLYHOTFIXPLAN string = "APPLY_HOTFIX_PLAN"

	// ReleaseDetailsReleaseTypeSCALEUP captures enum value "SCALE_UP"
	ReleaseDetailsReleaseTypeSCALEUP string = "SCALE_UP"

	// ReleaseDetailsReleaseTypeSCALEDOWN captures enum value "SCALE_DOWN"
	ReleaseDetailsReleaseTypeSCALEDOWN string = "SCALE_DOWN"

	// ReleaseDetailsReleaseTypeMAINTENANCE captures enum value "MAINTENANCE"
	ReleaseDetailsReleaseTypeMAINTENANCE string = "MAINTENANCE"
)

// prop value enum
func (m *ReleaseDetails) validateReleaseTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, releaseDetailsTypeReleaseTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReleaseDetails) validateReleaseType(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleaseType) { // not required
		return nil
	}

	// value enum
	if err := m.validateReleaseTypeEnum("releaseType", "body", m.ReleaseType); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseDetails) validateTriggeredOn(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggeredOn) { // not required
		return nil
	}

	if err := validate.FormatOf("triggeredOn", "body", "date-time", m.TriggeredOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this release details based on context it is used
func (m *ReleaseDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseDetails) UnmarshalBinary(b []byte) error {
	var res ReleaseDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
