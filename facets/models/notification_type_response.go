// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotificationTypeResponse NotificationTypeResponse
//
// swagger:model NotificationTypeResponse
type NotificationTypeResponse struct {

	// key
	Key string `json:"key,omitempty"`

	// notification name
	NotificationName string `json:"notificationName,omitempty"`

	// notification type
	// Enum: ["DEPLOYMENT_STATUS_UPDATE","APP_DEPLOYMENT","QASUITE_SANITY","DR_RESULT","STACK_SIGNOFF","ALERT","TEST","APPLICATION_DEPLOYMENT_COMPLETE","ENVIRONMENT_CREATE","ENVIRONMENT_DELETE","ENVIRONMENT_LAUNCH","ENVIRONMENT_DESTROY","ENVIRONMENT_CONFIGURE"]
	NotificationType string `json:"notificationType,omitempty"`

	// supported tags
	SupportedTags []string `json:"supportedTags"`
}

// Validate validates this notification type response
func (m *NotificationTypeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotificationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var notificationTypeResponseTypeNotificationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEPLOYMENT_STATUS_UPDATE","APP_DEPLOYMENT","QASUITE_SANITY","DR_RESULT","STACK_SIGNOFF","ALERT","TEST","APPLICATION_DEPLOYMENT_COMPLETE","ENVIRONMENT_CREATE","ENVIRONMENT_DELETE","ENVIRONMENT_LAUNCH","ENVIRONMENT_DESTROY","ENVIRONMENT_CONFIGURE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationTypeResponseTypeNotificationTypePropEnum = append(notificationTypeResponseTypeNotificationTypePropEnum, v)
	}
}

const (

	// NotificationTypeResponseNotificationTypeDEPLOYMENTSTATUSUPDATE captures enum value "DEPLOYMENT_STATUS_UPDATE"
	NotificationTypeResponseNotificationTypeDEPLOYMENTSTATUSUPDATE string = "DEPLOYMENT_STATUS_UPDATE"

	// NotificationTypeResponseNotificationTypeAPPDEPLOYMENT captures enum value "APP_DEPLOYMENT"
	NotificationTypeResponseNotificationTypeAPPDEPLOYMENT string = "APP_DEPLOYMENT"

	// NotificationTypeResponseNotificationTypeQASUITESANITY captures enum value "QASUITE_SANITY"
	NotificationTypeResponseNotificationTypeQASUITESANITY string = "QASUITE_SANITY"

	// NotificationTypeResponseNotificationTypeDRRESULT captures enum value "DR_RESULT"
	NotificationTypeResponseNotificationTypeDRRESULT string = "DR_RESULT"

	// NotificationTypeResponseNotificationTypeSTACKSIGNOFF captures enum value "STACK_SIGNOFF"
	NotificationTypeResponseNotificationTypeSTACKSIGNOFF string = "STACK_SIGNOFF"

	// NotificationTypeResponseNotificationTypeALERT captures enum value "ALERT"
	NotificationTypeResponseNotificationTypeALERT string = "ALERT"

	// NotificationTypeResponseNotificationTypeTEST captures enum value "TEST"
	NotificationTypeResponseNotificationTypeTEST string = "TEST"

	// NotificationTypeResponseNotificationTypeAPPLICATIONDEPLOYMENTCOMPLETE captures enum value "APPLICATION_DEPLOYMENT_COMPLETE"
	NotificationTypeResponseNotificationTypeAPPLICATIONDEPLOYMENTCOMPLETE string = "APPLICATION_DEPLOYMENT_COMPLETE"

	// NotificationTypeResponseNotificationTypeENVIRONMENTCREATE captures enum value "ENVIRONMENT_CREATE"
	NotificationTypeResponseNotificationTypeENVIRONMENTCREATE string = "ENVIRONMENT_CREATE"

	// NotificationTypeResponseNotificationTypeENVIRONMENTDELETE captures enum value "ENVIRONMENT_DELETE"
	NotificationTypeResponseNotificationTypeENVIRONMENTDELETE string = "ENVIRONMENT_DELETE"

	// NotificationTypeResponseNotificationTypeENVIRONMENTLAUNCH captures enum value "ENVIRONMENT_LAUNCH"
	NotificationTypeResponseNotificationTypeENVIRONMENTLAUNCH string = "ENVIRONMENT_LAUNCH"

	// NotificationTypeResponseNotificationTypeENVIRONMENTDESTROY captures enum value "ENVIRONMENT_DESTROY"
	NotificationTypeResponseNotificationTypeENVIRONMENTDESTROY string = "ENVIRONMENT_DESTROY"

	// NotificationTypeResponseNotificationTypeENVIRONMENTCONFIGURE captures enum value "ENVIRONMENT_CONFIGURE"
	NotificationTypeResponseNotificationTypeENVIRONMENTCONFIGURE string = "ENVIRONMENT_CONFIGURE"
)

// prop value enum
func (m *NotificationTypeResponse) validateNotificationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, notificationTypeResponseTypeNotificationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NotificationTypeResponse) validateNotificationType(formats strfmt.Registry) error {
	if swag.IsZero(m.NotificationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateNotificationTypeEnum("notificationType", "body", m.NotificationType); err != nil {
		return err
	}

	return nil
}

var notificationTypeResponseSupportedTagsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLUSTER_NAME","CLUSTER_TYPE","QASUITE_RESULT","DR_ACTION","DR_STATUS","STACK_NAME","SEVERITY","ALERT_NAME","DEPLOYMENT_STATUS","APPLICATION_NAME","SEND_RESOLVED","RELEASE_TYPE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationTypeResponseSupportedTagsItemsEnum = append(notificationTypeResponseSupportedTagsItemsEnum, v)
	}
}

func (m *NotificationTypeResponse) validateSupportedTagsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, notificationTypeResponseSupportedTagsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NotificationTypeResponse) validateSupportedTags(formats strfmt.Registry) error {
	if swag.IsZero(m.SupportedTags) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportedTags); i++ {

		// value enum
		if err := m.validateSupportedTagsItemsEnum("supportedTags"+"."+strconv.Itoa(i), "body", m.SupportedTags[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this notification type response based on context it is used
func (m *NotificationTypeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NotificationTypeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationTypeResponse) UnmarshalBinary(b []byte) error {
	var res NotificationTypeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
