// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestNotificationRequest TestNotificationRequest
//
// swagger:model TestNotificationRequest
type TestNotificationRequest struct {

	// authorization header
	AuthorizationHeader string `json:"authorizationHeader,omitempty"`

	// channel address
	ChannelAddress string `json:"channelAddress,omitempty"`

	// channel type
	// Enum: ["SLACK","CAPILLARY_VALIDATOR","WEBHOOK","PAGER_DUTY","ZEN_DUTY","EMAIL","MS_TEAMS","MS_TEAMS_WORKFLOW"]
	ChannelType string `json:"channelType,omitempty"`

	// email addresses
	EmailAddresses []string `json:"emailAddresses"`

	// integration key
	IntegrationKey string `json:"integrationKey,omitempty"`

	// notification type
	// Enum: ["DEPLOYMENT_STATUS_UPDATE","APP_DEPLOYMENT","QASUITE_SANITY","DR_RESULT","STACK_SIGNOFF","ALERT","TEST","APPLICATION_DEPLOYMENT_COMPLETE","ENVIRONMENT_CREATE","ENVIRONMENT_DELETE","ENVIRONMENT_LAUNCH","ENVIRONMENT_DESTROY","ENVIRONMENT_CONFIGURE"]
	NotificationType string `json:"notificationType,omitempty"`

	// payload
	Payload string `json:"payload,omitempty"`
}

// Validate validates this test notification request
func (m *TestNotificationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var testNotificationRequestTypeChannelTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SLACK","CAPILLARY_VALIDATOR","WEBHOOK","PAGER_DUTY","ZEN_DUTY","EMAIL","MS_TEAMS","MS_TEAMS_WORKFLOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		testNotificationRequestTypeChannelTypePropEnum = append(testNotificationRequestTypeChannelTypePropEnum, v)
	}
}

const (

	// TestNotificationRequestChannelTypeSLACK captures enum value "SLACK"
	TestNotificationRequestChannelTypeSLACK string = "SLACK"

	// TestNotificationRequestChannelTypeCAPILLARYVALIDATOR captures enum value "CAPILLARY_VALIDATOR"
	TestNotificationRequestChannelTypeCAPILLARYVALIDATOR string = "CAPILLARY_VALIDATOR"

	// TestNotificationRequestChannelTypeWEBHOOK captures enum value "WEBHOOK"
	TestNotificationRequestChannelTypeWEBHOOK string = "WEBHOOK"

	// TestNotificationRequestChannelTypePAGERDUTY captures enum value "PAGER_DUTY"
	TestNotificationRequestChannelTypePAGERDUTY string = "PAGER_DUTY"

	// TestNotificationRequestChannelTypeZENDUTY captures enum value "ZEN_DUTY"
	TestNotificationRequestChannelTypeZENDUTY string = "ZEN_DUTY"

	// TestNotificationRequestChannelTypeEMAIL captures enum value "EMAIL"
	TestNotificationRequestChannelTypeEMAIL string = "EMAIL"

	// TestNotificationRequestChannelTypeMSTEAMS captures enum value "MS_TEAMS"
	TestNotificationRequestChannelTypeMSTEAMS string = "MS_TEAMS"

	// TestNotificationRequestChannelTypeMSTEAMSWORKFLOW captures enum value "MS_TEAMS_WORKFLOW"
	TestNotificationRequestChannelTypeMSTEAMSWORKFLOW string = "MS_TEAMS_WORKFLOW"
)

// prop value enum
func (m *TestNotificationRequest) validateChannelTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, testNotificationRequestTypeChannelTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TestNotificationRequest) validateChannelType(formats strfmt.Registry) error {
	if swag.IsZero(m.ChannelType) { // not required
		return nil
	}

	// value enum
	if err := m.validateChannelTypeEnum("channelType", "body", m.ChannelType); err != nil {
		return err
	}

	return nil
}

var testNotificationRequestTypeNotificationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEPLOYMENT_STATUS_UPDATE","APP_DEPLOYMENT","QASUITE_SANITY","DR_RESULT","STACK_SIGNOFF","ALERT","TEST","APPLICATION_DEPLOYMENT_COMPLETE","ENVIRONMENT_CREATE","ENVIRONMENT_DELETE","ENVIRONMENT_LAUNCH","ENVIRONMENT_DESTROY","ENVIRONMENT_CONFIGURE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		testNotificationRequestTypeNotificationTypePropEnum = append(testNotificationRequestTypeNotificationTypePropEnum, v)
	}
}

const (

	// TestNotificationRequestNotificationTypeDEPLOYMENTSTATUSUPDATE captures enum value "DEPLOYMENT_STATUS_UPDATE"
	TestNotificationRequestNotificationTypeDEPLOYMENTSTATUSUPDATE string = "DEPLOYMENT_STATUS_UPDATE"

	// TestNotificationRequestNotificationTypeAPPDEPLOYMENT captures enum value "APP_DEPLOYMENT"
	TestNotificationRequestNotificationTypeAPPDEPLOYMENT string = "APP_DEPLOYMENT"

	// TestNotificationRequestNotificationTypeQASUITESANITY captures enum value "QASUITE_SANITY"
	TestNotificationRequestNotificationTypeQASUITESANITY string = "QASUITE_SANITY"

	// TestNotificationRequestNotificationTypeDRRESULT captures enum value "DR_RESULT"
	TestNotificationRequestNotificationTypeDRRESULT string = "DR_RESULT"

	// TestNotificationRequestNotificationTypeSTACKSIGNOFF captures enum value "STACK_SIGNOFF"
	TestNotificationRequestNotificationTypeSTACKSIGNOFF string = "STACK_SIGNOFF"

	// TestNotificationRequestNotificationTypeALERT captures enum value "ALERT"
	TestNotificationRequestNotificationTypeALERT string = "ALERT"

	// TestNotificationRequestNotificationTypeTEST captures enum value "TEST"
	TestNotificationRequestNotificationTypeTEST string = "TEST"

	// TestNotificationRequestNotificationTypeAPPLICATIONDEPLOYMENTCOMPLETE captures enum value "APPLICATION_DEPLOYMENT_COMPLETE"
	TestNotificationRequestNotificationTypeAPPLICATIONDEPLOYMENTCOMPLETE string = "APPLICATION_DEPLOYMENT_COMPLETE"

	// TestNotificationRequestNotificationTypeENVIRONMENTCREATE captures enum value "ENVIRONMENT_CREATE"
	TestNotificationRequestNotificationTypeENVIRONMENTCREATE string = "ENVIRONMENT_CREATE"

	// TestNotificationRequestNotificationTypeENVIRONMENTDELETE captures enum value "ENVIRONMENT_DELETE"
	TestNotificationRequestNotificationTypeENVIRONMENTDELETE string = "ENVIRONMENT_DELETE"

	// TestNotificationRequestNotificationTypeENVIRONMENTLAUNCH captures enum value "ENVIRONMENT_LAUNCH"
	TestNotificationRequestNotificationTypeENVIRONMENTLAUNCH string = "ENVIRONMENT_LAUNCH"

	// TestNotificationRequestNotificationTypeENVIRONMENTDESTROY captures enum value "ENVIRONMENT_DESTROY"
	TestNotificationRequestNotificationTypeENVIRONMENTDESTROY string = "ENVIRONMENT_DESTROY"

	// TestNotificationRequestNotificationTypeENVIRONMENTCONFIGURE captures enum value "ENVIRONMENT_CONFIGURE"
	TestNotificationRequestNotificationTypeENVIRONMENTCONFIGURE string = "ENVIRONMENT_CONFIGURE"
)

// prop value enum
func (m *TestNotificationRequest) validateNotificationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, testNotificationRequestTypeNotificationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TestNotificationRequest) validateNotificationType(formats strfmt.Registry) error {
	if swag.IsZero(m.NotificationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateNotificationTypeEnum("notificationType", "body", m.NotificationType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this test notification request based on context it is used
func (m *TestNotificationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TestNotificationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestNotificationRequest) UnmarshalBinary(b []byte) error {
	var res TestNotificationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
