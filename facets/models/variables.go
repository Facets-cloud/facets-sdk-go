// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Variables variables
//
// swagger:model Variables
type Variables struct {

	// description
	Description string `json:"description,omitempty"`

	// global
	Global bool `json:"global,omitempty"`

	// secret
	Secret bool `json:"secret,omitempty"`

	// status
	// Enum: ["DEFAULT","OVERRIDDEN"]
	Status string `json:"status,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this variables
func (m *Variables) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var variablesTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEFAULT","OVERRIDDEN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		variablesTypeStatusPropEnum = append(variablesTypeStatusPropEnum, v)
	}
}

const (

	// VariablesStatusDEFAULT captures enum value "DEFAULT"
	VariablesStatusDEFAULT string = "DEFAULT"

	// VariablesStatusOVERRIDDEN captures enum value "OVERRIDDEN"
	VariablesStatusOVERRIDDEN string = "OVERRIDDEN"
)

// prop value enum
func (m *Variables) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, variablesTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Variables) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this variables based on context it is used
func (m *Variables) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Variables) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Variables) UnmarshalBinary(b []byte) error {
	var res Variables
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
