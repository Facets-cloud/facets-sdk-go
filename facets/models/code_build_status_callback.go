// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CodeBuildStatusCallback CodeBuildStatusCallback
//
// swagger:model CodeBuildStatusCallback
type CodeBuildStatusCallback struct {

	// codebuid Id
	CodebuidID string `json:"codebuidId,omitempty"`

	// status
	// Enum: ["SUCCEEDED","FAILED","FAULT","TIMED_OUT","IN_PROGRESS","STOPPED","null"]
	Status string `json:"status,omitempty"`
}

// Validate validates this code build status callback
func (m *CodeBuildStatusCallback) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var codeBuildStatusCallbackTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCEEDED","FAILED","FAULT","TIMED_OUT","IN_PROGRESS","STOPPED","null"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		codeBuildStatusCallbackTypeStatusPropEnum = append(codeBuildStatusCallbackTypeStatusPropEnum, v)
	}
}

const (

	// CodeBuildStatusCallbackStatusSUCCEEDED captures enum value "SUCCEEDED"
	CodeBuildStatusCallbackStatusSUCCEEDED string = "SUCCEEDED"

	// CodeBuildStatusCallbackStatusFAILED captures enum value "FAILED"
	CodeBuildStatusCallbackStatusFAILED string = "FAILED"

	// CodeBuildStatusCallbackStatusFAULT captures enum value "FAULT"
	CodeBuildStatusCallbackStatusFAULT string = "FAULT"

	// CodeBuildStatusCallbackStatusTIMEDOUT captures enum value "TIMED_OUT"
	CodeBuildStatusCallbackStatusTIMEDOUT string = "TIMED_OUT"

	// CodeBuildStatusCallbackStatusINPROGRESS captures enum value "IN_PROGRESS"
	CodeBuildStatusCallbackStatusINPROGRESS string = "IN_PROGRESS"

	// CodeBuildStatusCallbackStatusSTOPPED captures enum value "STOPPED"
	CodeBuildStatusCallbackStatusSTOPPED string = "STOPPED"

	// CodeBuildStatusCallbackStatusNull captures enum value "null"
	CodeBuildStatusCallbackStatusNull string = "null"
)

// prop value enum
func (m *CodeBuildStatusCallback) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, codeBuildStatusCallbackTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CodeBuildStatusCallback) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this code build status callback based on context it is used
func (m *CodeBuildStatusCallback) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CodeBuildStatusCallback) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CodeBuildStatusCallback) UnmarshalBinary(b []byte) error {
	var res CodeBuildStatusCallback
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
