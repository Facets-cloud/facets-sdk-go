// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShortLivedTaskSchedule short lived task schedule
//
// swagger:model ShortLivedTaskSchedule
type ShortLivedTaskSchedule struct {

	// frequency
	// Required: true
	// Enum: ["PER_MINUTE","HOURLY","DAILY","WEEKLY"]
	Frequency *string `json:"frequency"`

	// release type
	// Required: true
	// Enum: ["HOTFIX","RELEASE","LAUNCH","DESTROY","CUSTOM","UNLOCK_STATE","PLAN","HOTFIX_PLAN","APPLY_PLAN","APPLY_HOTFIX_PLAN","SCALE_UP","SCALE_DOWN","MAINTENANCE","TERRAFORM_EXPORT","ROLLBACK_PLAN","APPLY_ROLLBACK_PLAN"]
	ReleaseType *string `json:"releaseType"`

	// tear down after
	TearDownAfter int32 `json:"tearDownAfter,omitempty"`
}

// Validate validates this short lived task schedule
func (m *ShortLivedTaskSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var shortLivedTaskScheduleTypeFrequencyPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PER_MINUTE","HOURLY","DAILY","WEEKLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shortLivedTaskScheduleTypeFrequencyPropEnum = append(shortLivedTaskScheduleTypeFrequencyPropEnum, v)
	}
}

const (

	// ShortLivedTaskScheduleFrequencyPERMINUTE captures enum value "PER_MINUTE"
	ShortLivedTaskScheduleFrequencyPERMINUTE string = "PER_MINUTE"

	// ShortLivedTaskScheduleFrequencyHOURLY captures enum value "HOURLY"
	ShortLivedTaskScheduleFrequencyHOURLY string = "HOURLY"

	// ShortLivedTaskScheduleFrequencyDAILY captures enum value "DAILY"
	ShortLivedTaskScheduleFrequencyDAILY string = "DAILY"

	// ShortLivedTaskScheduleFrequencyWEEKLY captures enum value "WEEKLY"
	ShortLivedTaskScheduleFrequencyWEEKLY string = "WEEKLY"
)

// prop value enum
func (m *ShortLivedTaskSchedule) validateFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, shortLivedTaskScheduleTypeFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ShortLivedTaskSchedule) validateFrequency(formats strfmt.Registry) error {

	if err := validate.Required("frequency", "body", m.Frequency); err != nil {
		return err
	}

	// value enum
	if err := m.validateFrequencyEnum("frequency", "body", *m.Frequency); err != nil {
		return err
	}

	return nil
}

var shortLivedTaskScheduleTypeReleaseTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HOTFIX","RELEASE","LAUNCH","DESTROY","CUSTOM","UNLOCK_STATE","PLAN","HOTFIX_PLAN","APPLY_PLAN","APPLY_HOTFIX_PLAN","SCALE_UP","SCALE_DOWN","MAINTENANCE","TERRAFORM_EXPORT","ROLLBACK_PLAN","APPLY_ROLLBACK_PLAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shortLivedTaskScheduleTypeReleaseTypePropEnum = append(shortLivedTaskScheduleTypeReleaseTypePropEnum, v)
	}
}

const (

	// ShortLivedTaskScheduleReleaseTypeHOTFIX captures enum value "HOTFIX"
	ShortLivedTaskScheduleReleaseTypeHOTFIX string = "HOTFIX"

	// ShortLivedTaskScheduleReleaseTypeRELEASE captures enum value "RELEASE"
	ShortLivedTaskScheduleReleaseTypeRELEASE string = "RELEASE"

	// ShortLivedTaskScheduleReleaseTypeLAUNCH captures enum value "LAUNCH"
	ShortLivedTaskScheduleReleaseTypeLAUNCH string = "LAUNCH"

	// ShortLivedTaskScheduleReleaseTypeDESTROY captures enum value "DESTROY"
	ShortLivedTaskScheduleReleaseTypeDESTROY string = "DESTROY"

	// ShortLivedTaskScheduleReleaseTypeCUSTOM captures enum value "CUSTOM"
	ShortLivedTaskScheduleReleaseTypeCUSTOM string = "CUSTOM"

	// ShortLivedTaskScheduleReleaseTypeUNLOCKSTATE captures enum value "UNLOCK_STATE"
	ShortLivedTaskScheduleReleaseTypeUNLOCKSTATE string = "UNLOCK_STATE"

	// ShortLivedTaskScheduleReleaseTypePLAN captures enum value "PLAN"
	ShortLivedTaskScheduleReleaseTypePLAN string = "PLAN"

	// ShortLivedTaskScheduleReleaseTypeHOTFIXPLAN captures enum value "HOTFIX_PLAN"
	ShortLivedTaskScheduleReleaseTypeHOTFIXPLAN string = "HOTFIX_PLAN"

	// ShortLivedTaskScheduleReleaseTypeAPPLYPLAN captures enum value "APPLY_PLAN"
	ShortLivedTaskScheduleReleaseTypeAPPLYPLAN string = "APPLY_PLAN"

	// ShortLivedTaskScheduleReleaseTypeAPPLYHOTFIXPLAN captures enum value "APPLY_HOTFIX_PLAN"
	ShortLivedTaskScheduleReleaseTypeAPPLYHOTFIXPLAN string = "APPLY_HOTFIX_PLAN"

	// ShortLivedTaskScheduleReleaseTypeSCALEUP captures enum value "SCALE_UP"
	ShortLivedTaskScheduleReleaseTypeSCALEUP string = "SCALE_UP"

	// ShortLivedTaskScheduleReleaseTypeSCALEDOWN captures enum value "SCALE_DOWN"
	ShortLivedTaskScheduleReleaseTypeSCALEDOWN string = "SCALE_DOWN"

	// ShortLivedTaskScheduleReleaseTypeMAINTENANCE captures enum value "MAINTENANCE"
	ShortLivedTaskScheduleReleaseTypeMAINTENANCE string = "MAINTENANCE"

	// ShortLivedTaskScheduleReleaseTypeTERRAFORMEXPORT captures enum value "TERRAFORM_EXPORT"
	ShortLivedTaskScheduleReleaseTypeTERRAFORMEXPORT string = "TERRAFORM_EXPORT"

	// ShortLivedTaskScheduleReleaseTypeROLLBACKPLAN captures enum value "ROLLBACK_PLAN"
	ShortLivedTaskScheduleReleaseTypeROLLBACKPLAN string = "ROLLBACK_PLAN"

	// ShortLivedTaskScheduleReleaseTypeAPPLYROLLBACKPLAN captures enum value "APPLY_ROLLBACK_PLAN"
	ShortLivedTaskScheduleReleaseTypeAPPLYROLLBACKPLAN string = "APPLY_ROLLBACK_PLAN"
)

// prop value enum
func (m *ShortLivedTaskSchedule) validateReleaseTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, shortLivedTaskScheduleTypeReleaseTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ShortLivedTaskSchedule) validateReleaseType(formats strfmt.Registry) error {

	if err := validate.Required("releaseType", "body", m.ReleaseType); err != nil {
		return err
	}

	// value enum
	if err := m.validateReleaseTypeEnum("releaseType", "body", *m.ReleaseType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this short lived task schedule based on context it is used
func (m *ShortLivedTaskSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ShortLivedTaskSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShortLivedTaskSchedule) UnmarshalBinary(b []byte) error {
	var res ShortLivedTaskSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
