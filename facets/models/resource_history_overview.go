// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceHistoryOverview resource history overview
//
// swagger:model ResourceHistoryOverview
type ResourceHistoryOverview struct {

	// artifact version
	ArtifactVersion *ResourceStatusMetadata `json:"artifactVersion,omitempty"`

	// blueprint version
	BlueprintVersion *ResourceStatusMetadata `json:"blueprintVersion,omitempty"`

	// cluster Id
	ClusterID string `json:"clusterId,omitempty"`

	// cluster name
	ClusterName string `json:"clusterName,omitempty"`

	// disabled
	Disabled bool `json:"disabled,omitempty"`

	// overridden
	Overridden bool `json:"overridden,omitempty"`

	// override version
	OverrideVersion *ResourceStatusMetadata `json:"overrideVersion,omitempty"`

	// release button status
	ReleaseButtonStatus *ReleaseButtonStatus `json:"releaseButtonStatus,omitempty"`

	// resource name
	ResourceName string `json:"resourceName,omitempty"`

	// resource status
	// Enum: ["RUNNING","STOPPED"]
	ResourceStatus string `json:"resourceStatus,omitempty"`

	// resource type
	ResourceType string `json:"resourceType,omitempty"`
}

// Validate validates this resource history overview
func (m *ResourceHistoryOverview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlueprintVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrideVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseButtonStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceHistoryOverview) validateArtifactVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.ArtifactVersion) { // not required
		return nil
	}

	if m.ArtifactVersion != nil {
		if err := m.ArtifactVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifactVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artifactVersion")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceHistoryOverview) validateBlueprintVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.BlueprintVersion) { // not required
		return nil
	}

	if m.BlueprintVersion != nil {
		if err := m.BlueprintVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blueprintVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("blueprintVersion")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceHistoryOverview) validateOverrideVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.OverrideVersion) { // not required
		return nil
	}

	if m.OverrideVersion != nil {
		if err := m.OverrideVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overrideVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("overrideVersion")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceHistoryOverview) validateReleaseButtonStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleaseButtonStatus) { // not required
		return nil
	}

	if m.ReleaseButtonStatus != nil {
		if err := m.ReleaseButtonStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseButtonStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("releaseButtonStatus")
			}
			return err
		}
	}

	return nil
}

var resourceHistoryOverviewTypeResourceStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RUNNING","STOPPED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceHistoryOverviewTypeResourceStatusPropEnum = append(resourceHistoryOverviewTypeResourceStatusPropEnum, v)
	}
}

const (

	// ResourceHistoryOverviewResourceStatusRUNNING captures enum value "RUNNING"
	ResourceHistoryOverviewResourceStatusRUNNING string = "RUNNING"

	// ResourceHistoryOverviewResourceStatusSTOPPED captures enum value "STOPPED"
	ResourceHistoryOverviewResourceStatusSTOPPED string = "STOPPED"
)

// prop value enum
func (m *ResourceHistoryOverview) validateResourceStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resourceHistoryOverviewTypeResourceStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResourceHistoryOverview) validateResourceStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateResourceStatusEnum("resourceStatus", "body", m.ResourceStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this resource history overview based on the context it is used
func (m *ResourceHistoryOverview) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArtifactVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBlueprintVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverrideVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReleaseButtonStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceHistoryOverview) contextValidateArtifactVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.ArtifactVersion != nil {

		if swag.IsZero(m.ArtifactVersion) { // not required
			return nil
		}

		if err := m.ArtifactVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifactVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artifactVersion")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceHistoryOverview) contextValidateBlueprintVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.BlueprintVersion != nil {

		if swag.IsZero(m.BlueprintVersion) { // not required
			return nil
		}

		if err := m.BlueprintVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blueprintVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("blueprintVersion")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceHistoryOverview) contextValidateOverrideVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.OverrideVersion != nil {

		if swag.IsZero(m.OverrideVersion) { // not required
			return nil
		}

		if err := m.OverrideVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overrideVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("overrideVersion")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceHistoryOverview) contextValidateReleaseButtonStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ReleaseButtonStatus != nil {

		if swag.IsZero(m.ReleaseButtonStatus) { // not required
			return nil
		}

		if err := m.ReleaseButtonStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseButtonStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("releaseButtonStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceHistoryOverview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceHistoryOverview) UnmarshalBinary(b []byte) error {
	var res ResourceHistoryOverview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
