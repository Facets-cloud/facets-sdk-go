// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlueprintValidationError BlueprintValidationError
//
// swagger:model BlueprintValidationError
type BlueprintValidationError struct {

	// blueprint error lines
	BlueprintErrorLines []int32 `json:"blueprintErrorLines"`

	// category
	// Enum: ["Syntax Error","Non-Existent Resource Reference","Disabled Resource References","Invalid Reference Expression","Schema Compliance Error","GuardRails Compliance Issues","Overrides Syntax Error","Invalid Filename Error"]
	Category string `json:"category,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// override error lines
	OverrideErrorLines []int32 `json:"overrideErrorLines"`

	// severity
	// Enum: ["ERROR","WARNING"]
	Severity string `json:"severity,omitempty"`
}

// Validate validates this blueprint validation error
func (m *BlueprintValidationError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var blueprintValidationErrorTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Syntax Error","Non-Existent Resource Reference","Disabled Resource References","Invalid Reference Expression","Schema Compliance Error","GuardRails Compliance Issues","Overrides Syntax Error","Invalid Filename Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		blueprintValidationErrorTypeCategoryPropEnum = append(blueprintValidationErrorTypeCategoryPropEnum, v)
	}
}

const (

	// BlueprintValidationErrorCategorySyntaxError captures enum value "Syntax Error"
	BlueprintValidationErrorCategorySyntaxError string = "Syntax Error"

	// BlueprintValidationErrorCategoryNonDashExistentResourceReference captures enum value "Non-Existent Resource Reference"
	BlueprintValidationErrorCategoryNonDashExistentResourceReference string = "Non-Existent Resource Reference"

	// BlueprintValidationErrorCategoryDisabledResourceReferences captures enum value "Disabled Resource References"
	BlueprintValidationErrorCategoryDisabledResourceReferences string = "Disabled Resource References"

	// BlueprintValidationErrorCategoryInvalidReferenceExpression captures enum value "Invalid Reference Expression"
	BlueprintValidationErrorCategoryInvalidReferenceExpression string = "Invalid Reference Expression"

	// BlueprintValidationErrorCategorySchemaComplianceError captures enum value "Schema Compliance Error"
	BlueprintValidationErrorCategorySchemaComplianceError string = "Schema Compliance Error"

	// BlueprintValidationErrorCategoryGuardRailsComplianceIssues captures enum value "GuardRails Compliance Issues"
	BlueprintValidationErrorCategoryGuardRailsComplianceIssues string = "GuardRails Compliance Issues"

	// BlueprintValidationErrorCategoryOverridesSyntaxError captures enum value "Overrides Syntax Error"
	BlueprintValidationErrorCategoryOverridesSyntaxError string = "Overrides Syntax Error"

	// BlueprintValidationErrorCategoryInvalidFilenameError captures enum value "Invalid Filename Error"
	BlueprintValidationErrorCategoryInvalidFilenameError string = "Invalid Filename Error"
)

// prop value enum
func (m *BlueprintValidationError) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, blueprintValidationErrorTypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BlueprintValidationError) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

var blueprintValidationErrorTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ERROR","WARNING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		blueprintValidationErrorTypeSeverityPropEnum = append(blueprintValidationErrorTypeSeverityPropEnum, v)
	}
}

const (

	// BlueprintValidationErrorSeverityERROR captures enum value "ERROR"
	BlueprintValidationErrorSeverityERROR string = "ERROR"

	// BlueprintValidationErrorSeverityWARNING captures enum value "WARNING"
	BlueprintValidationErrorSeverityWARNING string = "WARNING"
)

// prop value enum
func (m *BlueprintValidationError) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, blueprintValidationErrorTypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BlueprintValidationError) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this blueprint validation error based on context it is used
func (m *BlueprintValidationError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BlueprintValidationError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlueprintValidationError) UnmarshalBinary(b []byte) error {
	var res BlueprintValidationError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
