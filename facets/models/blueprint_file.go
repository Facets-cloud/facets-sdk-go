// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlueprintFile blueprint file
//
// swagger:model BlueprintFile
type BlueprintFile struct {

	// alpha
	Alpha bool `json:"alpha,omitempty"`

	// children resource ids
	// Unique: true
	ChildrenResourceIds []string `json:"childrenResourceIds"`

	// cluster Id
	ClusterID string `json:"clusterId,omitempty"`

	// content
	Content string `json:"content,omitempty"`

	// directory
	Directory string `json:"directory,omitempty"`

	// edges
	// Unique: true
	Edges []*Edge `json:"edges"`

	// errors
	Errors []*BlueprintValidationError `json:"errors"`

	// expressions
	// Unique: true
	Expressions []*RefExpression `json:"expressions"`

	// filename
	Filename string `json:"filename,omitempty"`

	// icon Url
	IconURL string `json:"iconUrl,omitempty"`

	// info
	Info *Info `json:"info,omitempty"`

	// overridden
	Overridden bool `json:"overridden,omitempty"`

	// override
	Override map[string]any `json:"override,omitempty"`

	// parent resource Id
	ParentResourceID string `json:"parentResourceId,omitempty"`

	// resource name
	ResourceName string `json:"resourceName,omitempty"`

	// resource type
	ResourceType string `json:"resourceType,omitempty"`

	// stack name
	StackName string `json:"stackName,omitempty"`

	// substack
	Substack bool `json:"substack,omitempty"`

	// sync ctx md5
	SyncCtxMd5 string `json:"syncCtxMd5,omitempty"`

	// sync Id
	SyncID string `json:"syncId,omitempty"`

	// templated resource
	TemplatedResource bool `json:"templatedResource,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this blueprint file
func (m *BlueprintFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildrenResourceIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpressions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlueprintFile) validateChildrenResourceIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ChildrenResourceIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("childrenResourceIds", "body", m.ChildrenResourceIds); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintFile) validateEdges(formats strfmt.Registry) error {
	if swag.IsZero(m.Edges) { // not required
		return nil
	}

	if err := validate.UniqueItems("edges", "body", m.Edges); err != nil {
		return err
	}

	for i := 0; i < len(m.Edges); i++ {
		if swag.IsZero(m.Edges[i]) { // not required
			continue
		}

		if m.Edges[i] != nil {
			if err := m.Edges[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("edges" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("edges" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *BlueprintFile) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("errors" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *BlueprintFile) validateExpressions(formats strfmt.Registry) error {
	if swag.IsZero(m.Expressions) { // not required
		return nil
	}

	if err := validate.UniqueItems("expressions", "body", m.Expressions); err != nil {
		return err
	}

	for i := 0; i < len(m.Expressions); i++ {
		if swag.IsZero(m.Expressions[i]) { // not required
			continue
		}

		if m.Expressions[i] != nil {
			if err := m.Expressions[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("expressions" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("expressions" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *BlueprintFile) validateInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.Info) { // not required
		return nil
	}

	if m.Info != nil {
		if err := m.Info.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("info")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("info")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this blueprint file based on the context it is used
func (m *BlueprintFile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEdges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpressions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlueprintFile) contextValidateEdges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Edges); i++ {

		if m.Edges[i] != nil {

			if swag.IsZero(m.Edges[i]) { // not required
				return nil
			}

			if err := m.Edges[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("edges" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("edges" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *BlueprintFile) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {

			if swag.IsZero(m.Errors[i]) { // not required
				return nil
			}

			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("errors" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *BlueprintFile) contextValidateExpressions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Expressions); i++ {

		if m.Expressions[i] != nil {

			if swag.IsZero(m.Expressions[i]) { // not required
				return nil
			}

			if err := m.Expressions[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("expressions" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("expressions" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *BlueprintFile) contextValidateInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.Info != nil {

		if swag.IsZero(m.Info) { // not required
			return nil
		}

		if err := m.Info.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("info")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("info")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlueprintFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlueprintFile) UnmarshalBinary(b []byte) error {
	var res BlueprintFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
