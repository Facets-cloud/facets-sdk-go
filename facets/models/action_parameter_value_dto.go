// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActionParameterValueDto Represents the value of an action parameter
//
// swagger:model ActionParameterValueDto
type ActionParameterValueDto struct {

	// Array value for array type parameters. Only used when type is 'array'
	ArrayVal []string `json:"arrayVal"`

	// String value for string type parameters. Only used when type is 'string'
	// Example: my-app:latest
	StringVal string `json:"stringVal,omitempty"`

	// Type of the parameter value
	// Example: string
	// Required: true
	// Enum: ["string","array"]
	Type *string `json:"type"`
}

// Validate validates this action parameter value dto
func (m *ActionParameterValueDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var actionParameterValueDtoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","array"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionParameterValueDtoTypeTypePropEnum = append(actionParameterValueDtoTypeTypePropEnum, v)
	}
}

const (

	// ActionParameterValueDtoTypeString captures enum value "string"
	ActionParameterValueDtoTypeString string = "string"

	// ActionParameterValueDtoTypeArray captures enum value "array"
	ActionParameterValueDtoTypeArray string = "array"
)

// prop value enum
func (m *ActionParameterValueDto) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, actionParameterValueDtoTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActionParameterValueDto) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this action parameter value dto based on context it is used
func (m *ActionParameterValueDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ActionParameterValueDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActionParameterValueDto) UnmarshalBinary(b []byte) error {
	var res ActionParameterValueDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
