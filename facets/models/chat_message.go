// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChatMessage chat message
//
// swagger:model ChatMessage
type ChatMessage struct {

	// chat state
	// Enum: ["KEEP_ALIVE","COMPLETE"]
	ChatState string `json:"chatState,omitempty"`

	// content
	Content string `json:"content,omitempty"`

	// role
	// Enum: ["system","user","assistant"]
	Role string `json:"role,omitempty"`

	// token
	Token int64 `json:"token,omitempty"`
}

// Validate validates this chat message
func (m *ChatMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChatState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var chatMessageTypeChatStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["KEEP_ALIVE","COMPLETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chatMessageTypeChatStatePropEnum = append(chatMessageTypeChatStatePropEnum, v)
	}
}

const (

	// ChatMessageChatStateKEEPALIVE captures enum value "KEEP_ALIVE"
	ChatMessageChatStateKEEPALIVE string = "KEEP_ALIVE"

	// ChatMessageChatStateCOMPLETE captures enum value "COMPLETE"
	ChatMessageChatStateCOMPLETE string = "COMPLETE"
)

// prop value enum
func (m *ChatMessage) validateChatStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, chatMessageTypeChatStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ChatMessage) validateChatState(formats strfmt.Registry) error {
	if swag.IsZero(m.ChatState) { // not required
		return nil
	}

	// value enum
	if err := m.validateChatStateEnum("chatState", "body", m.ChatState); err != nil {
		return err
	}

	return nil
}

var chatMessageTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["system","user","assistant"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chatMessageTypeRolePropEnum = append(chatMessageTypeRolePropEnum, v)
	}
}

const (

	// ChatMessageRoleSystem captures enum value "system"
	ChatMessageRoleSystem string = "system"

	// ChatMessageRoleUser captures enum value "user"
	ChatMessageRoleUser string = "user"

	// ChatMessageRoleAssistant captures enum value "assistant"
	ChatMessageRoleAssistant string = "assistant"
)

// prop value enum
func (m *ChatMessage) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, chatMessageTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ChatMessage) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this chat message based on context it is used
func (m *ChatMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChatMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChatMessage) UnmarshalBinary(b []byte) error {
	var res ChatMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
