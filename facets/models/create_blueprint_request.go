// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateBlueprintRequest create blueprint request
//
// swagger:model CreateBlueprintRequest
type CreateBlueprintRequest struct {

	// allowed clouds
	// Unique: true
	AllowedClouds []string `json:"allowedClouds"`

	// branch
	Branch string `json:"branch,omitempty"`

	// coder account Id
	CoderAccountID string `json:"coderAccountId,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// git ops enabled
	GitOpsEnabled bool `json:"gitOpsEnabled,omitempty"`

	// github account Id
	GithubAccountID string `json:"githubAccountId,omitempty"`

	// github organisation name
	GithubOrganisationName string `json:"githubOrganisationName,omitempty"`

	// is imported project
	IsImportedProject bool `json:"isImportedProject,omitempty"`

	// mono repo
	MonoRepo bool `json:"monoRepo,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// primary cloud
	// Enum: ["AWS","AZURE","LOCAL","GCP","KUBERNETES"]
	PrimaryCloud string `json:"primaryCloud,omitempty"`

	// project type Id
	ProjectTypeID string `json:"projectTypeId,omitempty"`

	// relative path
	RelativePath string `json:"relativePath,omitempty"`

	// repo name
	RepoName string `json:"repoName,omitempty"`

	// template
	Template bool `json:"template,omitempty"`

	// template Id
	TemplateID string `json:"templateId,omitempty"`

	// template name
	TemplateName string `json:"templateName,omitempty"`

	// vcs Url
	VcsURL string `json:"vcsUrl,omitempty"`
}

// Validate validates this create blueprint request
func (m *CreateBlueprintRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedClouds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryCloud(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createBlueprintRequestAllowedCloudsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","AZURE","LOCAL","GCP","KUBERNETES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createBlueprintRequestAllowedCloudsItemsEnum = append(createBlueprintRequestAllowedCloudsItemsEnum, v)
	}
}

func (m *CreateBlueprintRequest) validateAllowedCloudsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createBlueprintRequestAllowedCloudsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateBlueprintRequest) validateAllowedClouds(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowedClouds) { // not required
		return nil
	}

	if err := validate.UniqueItems("allowedClouds", "body", m.AllowedClouds); err != nil {
		return err
	}

	for i := 0; i < len(m.AllowedClouds); i++ {

		// value enum
		if err := m.validateAllowedCloudsItemsEnum("allowedClouds"+"."+strconv.Itoa(i), "body", m.AllowedClouds[i]); err != nil {
			return err
		}

	}

	return nil
}

var createBlueprintRequestTypePrimaryCloudPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","AZURE","LOCAL","GCP","KUBERNETES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createBlueprintRequestTypePrimaryCloudPropEnum = append(createBlueprintRequestTypePrimaryCloudPropEnum, v)
	}
}

const (

	// CreateBlueprintRequestPrimaryCloudAWS captures enum value "AWS"
	CreateBlueprintRequestPrimaryCloudAWS string = "AWS"

	// CreateBlueprintRequestPrimaryCloudAZURE captures enum value "AZURE"
	CreateBlueprintRequestPrimaryCloudAZURE string = "AZURE"

	// CreateBlueprintRequestPrimaryCloudLOCAL captures enum value "LOCAL"
	CreateBlueprintRequestPrimaryCloudLOCAL string = "LOCAL"

	// CreateBlueprintRequestPrimaryCloudGCP captures enum value "GCP"
	CreateBlueprintRequestPrimaryCloudGCP string = "GCP"

	// CreateBlueprintRequestPrimaryCloudKUBERNETES captures enum value "KUBERNETES"
	CreateBlueprintRequestPrimaryCloudKUBERNETES string = "KUBERNETES"
)

// prop value enum
func (m *CreateBlueprintRequest) validatePrimaryCloudEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createBlueprintRequestTypePrimaryCloudPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateBlueprintRequest) validatePrimaryCloud(formats strfmt.Registry) error {
	if swag.IsZero(m.PrimaryCloud) { // not required
		return nil
	}

	// value enum
	if err := m.validatePrimaryCloudEnum("primaryCloud", "body", m.PrimaryCloud); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create blueprint request based on context it is used
func (m *CreateBlueprintRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateBlueprintRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateBlueprintRequest) UnmarshalBinary(b []byte) error {
	var res CreateBlueprintRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
