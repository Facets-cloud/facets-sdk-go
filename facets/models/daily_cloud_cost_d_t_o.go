// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DailyCloudCostDTO DailyCloudCostDTO
//
// swagger:model DailyCloudCostDTO
type DailyCloudCostDTO struct {

	// daily cost
	DailyCost []*ClusterCostDTO `json:"dailyCost"`

	// last sync
	// Format: date-time
	LastSync strfmt.DateTime `json:"lastSync,omitempty"`

	// previous period total
	PreviousPeriodTotal float64 `json:"previousPeriodTotal,omitempty"`

	// service cost
	ServiceCost []*ServiceCostDTO `json:"serviceCost"`

	// stack name
	StackName string `json:"stackName,omitempty"`

	// total
	Total float64 `json:"total,omitempty"`

	// unit
	Unit string `json:"unit,omitempty"`
}

// Validate validates this daily cloud cost d t o
func (m *DailyCloudCostDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDailyCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSync(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceCost(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DailyCloudCostDTO) validateDailyCost(formats strfmt.Registry) error {
	if swag.IsZero(m.DailyCost) { // not required
		return nil
	}

	for i := 0; i < len(m.DailyCost); i++ {
		if swag.IsZero(m.DailyCost[i]) { // not required
			continue
		}

		if m.DailyCost[i] != nil {
			if err := m.DailyCost[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dailyCost" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dailyCost" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DailyCloudCostDTO) validateLastSync(formats strfmt.Registry) error {
	if swag.IsZero(m.LastSync) { // not required
		return nil
	}

	if err := validate.FormatOf("lastSync", "body", "date-time", m.LastSync.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DailyCloudCostDTO) validateServiceCost(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceCost) { // not required
		return nil
	}

	for i := 0; i < len(m.ServiceCost); i++ {
		if swag.IsZero(m.ServiceCost[i]) { // not required
			continue
		}

		if m.ServiceCost[i] != nil {
			if err := m.ServiceCost[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceCost" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceCost" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this daily cloud cost d t o based on the context it is used
func (m *DailyCloudCostDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDailyCost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceCost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DailyCloudCostDTO) contextValidateDailyCost(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DailyCost); i++ {

		if m.DailyCost[i] != nil {

			if swag.IsZero(m.DailyCost[i]) { // not required
				return nil
			}

			if err := m.DailyCost[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dailyCost" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dailyCost" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DailyCloudCostDTO) contextValidateServiceCost(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServiceCost); i++ {

		if m.ServiceCost[i] != nil {

			if swag.IsZero(m.ServiceCost[i]) { // not required
				return nil
			}

			if err := m.ServiceCost[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceCost" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceCost" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DailyCloudCostDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DailyCloudCostDTO) UnmarshalBinary(b []byte) error {
	var res DailyCloudCostDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
