// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ObjectMeta ObjectMeta
//
// swagger:model ObjectMeta
type ObjectMeta struct {

	// annotations
	Annotations map[string]string `json:"annotations,omitempty"`

	// creation timestamp
	CreationTimestamp string `json:"creationTimestamp,omitempty"`

	// deletion grace period seconds
	DeletionGracePeriodSeconds int64 `json:"deletionGracePeriodSeconds,omitempty"`

	// deletion timestamp
	DeletionTimestamp string `json:"deletionTimestamp,omitempty"`

	// finalizers
	Finalizers []string `json:"finalizers"`

	// generate name
	GenerateName string `json:"generateName,omitempty"`

	// generation
	Generation int64 `json:"generation,omitempty"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// managed fields
	ManagedFields []*ManagedFieldsEntry `json:"managedFields"`

	// name
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// owner references
	OwnerReferences []*OwnerReference `json:"ownerReferences"`

	// resource version
	ResourceVersion string `json:"resourceVersion,omitempty"`

	// self link
	SelfLink string `json:"selfLink,omitempty"`

	// uid
	UID string `json:"uid,omitempty"`
}

// Validate validates this object meta
func (m *ObjectMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManagedFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerReferences(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectMeta) validateManagedFields(formats strfmt.Registry) error {
	if swag.IsZero(m.ManagedFields) { // not required
		return nil
	}

	for i := 0; i < len(m.ManagedFields); i++ {
		if swag.IsZero(m.ManagedFields[i]) { // not required
			continue
		}

		if m.ManagedFields[i] != nil {
			if err := m.ManagedFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("managedFields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("managedFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ObjectMeta) validateOwnerReferences(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerReferences) { // not required
		return nil
	}

	for i := 0; i < len(m.OwnerReferences); i++ {
		if swag.IsZero(m.OwnerReferences[i]) { // not required
			continue
		}

		if m.OwnerReferences[i] != nil {
			if err := m.OwnerReferences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ownerReferences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ownerReferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this object meta based on the context it is used
func (m *ObjectMeta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateManagedFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnerReferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectMeta) contextValidateManagedFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ManagedFields); i++ {

		if m.ManagedFields[i] != nil {

			if swag.IsZero(m.ManagedFields[i]) { // not required
				return nil
			}

			if err := m.ManagedFields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("managedFields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("managedFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ObjectMeta) contextValidateOwnerReferences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OwnerReferences); i++ {

		if m.OwnerReferences[i] != nil {

			if swag.IsZero(m.OwnerReferences[i]) { // not required
				return nil
			}

			if err := m.OwnerReferences[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ownerReferences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ownerReferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectMeta) UnmarshalBinary(b []byte) error {
	var res ObjectMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
