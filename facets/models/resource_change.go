// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceChange resource change
//
// swagger:model ResourceChange
type ResourceChange struct {

	// change type
	// Enum: ["ADDED","MODIFIED","REMOVED"]
	ChangeType string `json:"changeType,omitempty"`

	// changed attributes
	ChangedAttributes []*ChangedAttribute `json:"changedAttributes"`

	// flavor
	Flavor string `json:"flavor,omitempty"`

	// resource name
	ResourceName string `json:"resourceName,omitempty"`

	// resource type
	ResourceType string `json:"resourceType,omitempty"`
}

// Validate validates this resource change
func (m *ResourceChange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChangeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangedAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var resourceChangeTypeChangeTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ADDED","MODIFIED","REMOVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceChangeTypeChangeTypePropEnum = append(resourceChangeTypeChangeTypePropEnum, v)
	}
}

const (

	// ResourceChangeChangeTypeADDED captures enum value "ADDED"
	ResourceChangeChangeTypeADDED string = "ADDED"

	// ResourceChangeChangeTypeMODIFIED captures enum value "MODIFIED"
	ResourceChangeChangeTypeMODIFIED string = "MODIFIED"

	// ResourceChangeChangeTypeREMOVED captures enum value "REMOVED"
	ResourceChangeChangeTypeREMOVED string = "REMOVED"
)

// prop value enum
func (m *ResourceChange) validateChangeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resourceChangeTypeChangeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResourceChange) validateChangeType(formats strfmt.Registry) error {
	if swag.IsZero(m.ChangeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateChangeTypeEnum("changeType", "body", m.ChangeType); err != nil {
		return err
	}

	return nil
}

func (m *ResourceChange) validateChangedAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.ChangedAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.ChangedAttributes); i++ {
		if swag.IsZero(m.ChangedAttributes[i]) { // not required
			continue
		}

		if m.ChangedAttributes[i] != nil {
			if err := m.ChangedAttributes[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("changedAttributes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("changedAttributes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this resource change based on the context it is used
func (m *ResourceChange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChangedAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceChange) contextValidateChangedAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChangedAttributes); i++ {

		if m.ChangedAttributes[i] != nil {

			if swag.IsZero(m.ChangedAttributes[i]) { // not required
				return nil
			}

			if err := m.ChangedAttributes[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("changedAttributes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("changedAttributes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceChange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceChange) UnmarshalBinary(b []byte) error {
	var res ResourceChange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
