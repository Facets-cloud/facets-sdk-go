// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TFModuleLiteDTO Lightweight DTO for TF Modules providing minimal details
//
// swagger:model TFModuleLiteDTO
type TFModuleLiteDTO struct {

	// List of test projects where this module will be available
	AllowedTestProjects []string `json:"allowedTestProjects"`

	// Supported cloud providers
	// Example: ["aws","azure"]
	// Unique: true
	Clouds []string `json:"clouds"`

	// Flavor of the TF Module
	// Example: small
	Flavor string `json:"flavor,omitempty"`

	// iac tool
	// Unique: true
	IacTool []string `json:"iacTool"`

	// id
	ID string `json:"id,omitempty"`

	// Input parameters for the module
	Inputs map[string]Input `json:"inputs,omitempty"`

	// Intent of the TF Module
	// Example: deploy
	Intent string `json:"intent,omitempty"`

	// intent type
	IntentType string `json:"intentType,omitempty"`

	// Maximum allowed length for resource names using this module
	// Example: 40
	NameLengthLimit int32 `json:"nameLengthLimit,omitempty"`

	// Source of the TF Module
	// Enum: ["BUILT_IN","CUSTOM"]
	Source string `json:"source,omitempty"`

	// stage
	// Enum: ["PREVIEW","PUBLISHED"]
	Stage string `json:"stage,omitempty"`

	// Tags associated with the module
	// Example: ["tag1","tag2"]
	// Unique: true
	Tags []string `json:"tags"`

	// Version of the TF Module
	// Example: 1.0.0
	Version string `json:"version,omitempty"`
}

// Validate validates this t f module lite d t o
func (m *TFModuleLiteDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClouds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIacTool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TFModuleLiteDTO) validateClouds(formats strfmt.Registry) error {
	if swag.IsZero(m.Clouds) { // not required
		return nil
	}

	if err := validate.UniqueItems("clouds", "body", m.Clouds); err != nil {
		return err
	}

	return nil
}

var tFModuleLiteDTOIacToolItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TERRAFORM","OPENTOFU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tFModuleLiteDTOIacToolItemsEnum = append(tFModuleLiteDTOIacToolItemsEnum, v)
	}
}

func (m *TFModuleLiteDTO) validateIacToolItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tFModuleLiteDTOIacToolItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TFModuleLiteDTO) validateIacTool(formats strfmt.Registry) error {
	if swag.IsZero(m.IacTool) { // not required
		return nil
	}

	if err := validate.UniqueItems("iacTool", "body", m.IacTool); err != nil {
		return err
	}

	for i := 0; i < len(m.IacTool); i++ {

		// value enum
		if err := m.validateIacToolItemsEnum("iacTool"+"."+strconv.Itoa(i), "body", m.IacTool[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *TFModuleLiteDTO) validateInputs(formats strfmt.Registry) error {
	if swag.IsZero(m.Inputs) { // not required
		return nil
	}

	for k := range m.Inputs {

		if err := validate.Required("inputs"+"."+k, "body", m.Inputs[k]); err != nil {
			return err
		}
		if val, ok := m.Inputs[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputs" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputs" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

var tFModuleLiteDTOTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BUILT_IN","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tFModuleLiteDTOTypeSourcePropEnum = append(tFModuleLiteDTOTypeSourcePropEnum, v)
	}
}

const (

	// TFModuleLiteDTOSourceBUILTIN captures enum value "BUILT_IN"
	TFModuleLiteDTOSourceBUILTIN string = "BUILT_IN"

	// TFModuleLiteDTOSourceCUSTOM captures enum value "CUSTOM"
	TFModuleLiteDTOSourceCUSTOM string = "CUSTOM"
)

// prop value enum
func (m *TFModuleLiteDTO) validateSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tFModuleLiteDTOTypeSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TFModuleLiteDTO) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceEnum("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

var tFModuleLiteDTOTypeStagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PREVIEW","PUBLISHED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tFModuleLiteDTOTypeStagePropEnum = append(tFModuleLiteDTOTypeStagePropEnum, v)
	}
}

const (

	// TFModuleLiteDTOStagePREVIEW captures enum value "PREVIEW"
	TFModuleLiteDTOStagePREVIEW string = "PREVIEW"

	// TFModuleLiteDTOStagePUBLISHED captures enum value "PUBLISHED"
	TFModuleLiteDTOStagePUBLISHED string = "PUBLISHED"
)

// prop value enum
func (m *TFModuleLiteDTO) validateStageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tFModuleLiteDTOTypeStagePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TFModuleLiteDTO) validateStage(formats strfmt.Registry) error {
	if swag.IsZero(m.Stage) { // not required
		return nil
	}

	// value enum
	if err := m.validateStageEnum("stage", "body", m.Stage); err != nil {
		return err
	}

	return nil
}

func (m *TFModuleLiteDTO) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := validate.UniqueItems("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this t f module lite d t o based on the context it is used
func (m *TFModuleLiteDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInputs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TFModuleLiteDTO) contextValidateInputs(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Inputs {

		if val, ok := m.Inputs[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TFModuleLiteDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TFModuleLiteDTO) UnmarshalBinary(b []byte) error {
	var res TFModuleLiteDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
