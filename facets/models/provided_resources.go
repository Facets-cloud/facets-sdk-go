// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProvidedResources provided resources
//
// swagger:model ProvidedResources
type ProvidedResources struct {

	// cluster Id
	ClusterID string `json:"clusterId,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// provided authenticated resources
	// Unique: true
	ProvidedAuthenticatedResources []*ProvidedAuthenticatedResource `json:"providedAuthenticatedResources"`

	// provided cloud resources
	// Unique: true
	ProvidedCloudResources []*ProvidedCloudResource `json:"providedCloudResources"`

	// provided sharded resources
	// Unique: true
	ProvidedShardedResources []*ProvidedShardedService `json:"providedShardedResources"`

	// provided unauthenticated resources
	// Unique: true
	ProvidedUnauthenticatedResources []*ProvidedUnauthenticatedResource `json:"providedUnauthenticatedResources"`
}

// Validate validates this provided resources
func (m *ProvidedResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProvidedAuthenticatedResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvidedCloudResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvidedShardedResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvidedUnauthenticatedResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProvidedResources) validateProvidedAuthenticatedResources(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvidedAuthenticatedResources) { // not required
		return nil
	}

	if err := validate.UniqueItems("providedAuthenticatedResources", "body", m.ProvidedAuthenticatedResources); err != nil {
		return err
	}

	for i := 0; i < len(m.ProvidedAuthenticatedResources); i++ {
		if swag.IsZero(m.ProvidedAuthenticatedResources[i]) { // not required
			continue
		}

		if m.ProvidedAuthenticatedResources[i] != nil {
			if err := m.ProvidedAuthenticatedResources[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("providedAuthenticatedResources" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("providedAuthenticatedResources" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ProvidedResources) validateProvidedCloudResources(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvidedCloudResources) { // not required
		return nil
	}

	if err := validate.UniqueItems("providedCloudResources", "body", m.ProvidedCloudResources); err != nil {
		return err
	}

	for i := 0; i < len(m.ProvidedCloudResources); i++ {
		if swag.IsZero(m.ProvidedCloudResources[i]) { // not required
			continue
		}

		if m.ProvidedCloudResources[i] != nil {
			if err := m.ProvidedCloudResources[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("providedCloudResources" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("providedCloudResources" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ProvidedResources) validateProvidedShardedResources(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvidedShardedResources) { // not required
		return nil
	}

	if err := validate.UniqueItems("providedShardedResources", "body", m.ProvidedShardedResources); err != nil {
		return err
	}

	for i := 0; i < len(m.ProvidedShardedResources); i++ {
		if swag.IsZero(m.ProvidedShardedResources[i]) { // not required
			continue
		}

		if m.ProvidedShardedResources[i] != nil {
			if err := m.ProvidedShardedResources[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("providedShardedResources" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("providedShardedResources" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ProvidedResources) validateProvidedUnauthenticatedResources(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvidedUnauthenticatedResources) { // not required
		return nil
	}

	if err := validate.UniqueItems("providedUnauthenticatedResources", "body", m.ProvidedUnauthenticatedResources); err != nil {
		return err
	}

	for i := 0; i < len(m.ProvidedUnauthenticatedResources); i++ {
		if swag.IsZero(m.ProvidedUnauthenticatedResources[i]) { // not required
			continue
		}

		if m.ProvidedUnauthenticatedResources[i] != nil {
			if err := m.ProvidedUnauthenticatedResources[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("providedUnauthenticatedResources" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("providedUnauthenticatedResources" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this provided resources based on the context it is used
func (m *ProvidedResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProvidedAuthenticatedResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvidedCloudResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvidedShardedResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvidedUnauthenticatedResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProvidedResources) contextValidateProvidedAuthenticatedResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProvidedAuthenticatedResources); i++ {

		if m.ProvidedAuthenticatedResources[i] != nil {

			if swag.IsZero(m.ProvidedAuthenticatedResources[i]) { // not required
				return nil
			}

			if err := m.ProvidedAuthenticatedResources[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("providedAuthenticatedResources" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("providedAuthenticatedResources" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ProvidedResources) contextValidateProvidedCloudResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProvidedCloudResources); i++ {

		if m.ProvidedCloudResources[i] != nil {

			if swag.IsZero(m.ProvidedCloudResources[i]) { // not required
				return nil
			}

			if err := m.ProvidedCloudResources[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("providedCloudResources" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("providedCloudResources" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ProvidedResources) contextValidateProvidedShardedResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProvidedShardedResources); i++ {

		if m.ProvidedShardedResources[i] != nil {

			if swag.IsZero(m.ProvidedShardedResources[i]) { // not required
				return nil
			}

			if err := m.ProvidedShardedResources[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("providedShardedResources" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("providedShardedResources" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ProvidedResources) contextValidateProvidedUnauthenticatedResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProvidedUnauthenticatedResources); i++ {

		if m.ProvidedUnauthenticatedResources[i] != nil {

			if swag.IsZero(m.ProvidedUnauthenticatedResources[i]) { // not required
				return nil
			}

			if err := m.ProvidedUnauthenticatedResources[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("providedUnauthenticatedResources" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("providedUnauthenticatedResources" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProvidedResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProvidedResources) UnmarshalBinary(b []byte) error {
	var res ProvidedResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
