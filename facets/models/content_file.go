// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentFile ContentFile
//
// swagger:model ContentFile
type ContentFile struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// md content
	MdContent string `json:"mdContent,omitempty"`

	// required payload
	RequiredPayload []string `json:"requiredPayload"`

	// selectors
	Selectors *Selectors `json:"selectors,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	// Enum: ["CI","DOCUMENTATION"]
	Type string `json:"type,omitempty"`
}

// Validate validates this content file
func (m *ContentFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentFile) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ContentFile) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ContentFile) validateSelectors(formats strfmt.Registry) error {
	if swag.IsZero(m.Selectors) { // not required
		return nil
	}

	if m.Selectors != nil {
		if err := m.Selectors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectors")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selectors")
			}
			return err
		}
	}

	return nil
}

var contentFileTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CI","DOCUMENTATION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentFileTypeTypePropEnum = append(contentFileTypeTypePropEnum, v)
	}
}

const (

	// ContentFileTypeCI captures enum value "CI"
	ContentFileTypeCI string = "CI"

	// ContentFileTypeDOCUMENTATION captures enum value "DOCUMENTATION"
	ContentFileTypeDOCUMENTATION string = "DOCUMENTATION"
)

// prop value enum
func (m *ContentFile) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contentFileTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContentFile) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this content file based on the context it is used
func (m *ContentFile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelectors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentFile) contextValidateSelectors(ctx context.Context, formats strfmt.Registry) error {

	if m.Selectors != nil {

		if swag.IsZero(m.Selectors) { // not required
			return nil
		}

		if err := m.Selectors.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectors")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selectors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentFile) UnmarshalBinary(b []byte) error {
	var res ContentFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
