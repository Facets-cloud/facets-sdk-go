// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QASuiteResult QASuiteResult
//
// swagger:model QASuiteResult
type QASuiteResult struct {

	// deployment Id
	DeploymentID string `json:"deploymentId,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// module status map
	ModuleStatusMap map[string]string `json:"moduleStatusMap,omitempty"`

	// redeployment
	Redeployment bool `json:"redeployment,omitempty"`

	// status
	// Enum: ["NA","SUCCESS","ERROR","FAILURE","TIMEOUT","CANCELLED","RUNNING"]
	Status string `json:"status,omitempty"`
}

// Validate validates this q a suite result
func (m *QASuiteResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var qASuiteResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NA","SUCCESS","ERROR","FAILURE","TIMEOUT","CANCELLED","RUNNING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		qASuiteResultTypeStatusPropEnum = append(qASuiteResultTypeStatusPropEnum, v)
	}
}

const (

	// QASuiteResultStatusNA captures enum value "NA"
	QASuiteResultStatusNA string = "NA"

	// QASuiteResultStatusSUCCESS captures enum value "SUCCESS"
	QASuiteResultStatusSUCCESS string = "SUCCESS"

	// QASuiteResultStatusERROR captures enum value "ERROR"
	QASuiteResultStatusERROR string = "ERROR"

	// QASuiteResultStatusFAILURE captures enum value "FAILURE"
	QASuiteResultStatusFAILURE string = "FAILURE"

	// QASuiteResultStatusTIMEOUT captures enum value "TIMEOUT"
	QASuiteResultStatusTIMEOUT string = "TIMEOUT"

	// QASuiteResultStatusCANCELLED captures enum value "CANCELLED"
	QASuiteResultStatusCANCELLED string = "CANCELLED"

	// QASuiteResultStatusRUNNING captures enum value "RUNNING"
	QASuiteResultStatusRUNNING string = "RUNNING"
)

// prop value enum
func (m *QASuiteResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, qASuiteResultTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QASuiteResult) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this q a suite result based on context it is used
func (m *QASuiteResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QASuiteResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QASuiteResult) UnmarshalBinary(b []byte) error {
	var res QASuiteResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
