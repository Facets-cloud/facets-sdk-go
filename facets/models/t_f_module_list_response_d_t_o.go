// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TFModuleListResponseDTO TFModuleListResponseDTO
//
// swagger:model TFModuleListResponseDTO
type TFModuleListResponseDTO struct {

	// Supported cloud providers
	// Example: ["aws","azure"]
	Clouds []string `json:"clouds"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// feature branch
	FeatureBranch bool `json:"featureBranch,omitempty"`

	// Flavor of the TF Module
	// Example: small
	Flavor string `json:"flavor,omitempty"`

	// git ref
	GitRef string `json:"gitRef,omitempty"`

	// git Url
	GitURL string `json:"gitUrl,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// intent details
	IntentDetails *IntentResponseDTO `json:"intentDetails,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// preview git ref
	PreviewGitRef string `json:"previewGitRef,omitempty"`

	// preview git Url
	PreviewGitURL string `json:"previewGitUrl,omitempty"`

	// preview module Id
	PreviewModuleID string `json:"previewModuleId,omitempty"`

	// Source of the TF Module
	// Enum: ["BUILT_IN","CUSTOM"]
	Source string `json:"source,omitempty"`

	// Stage of the TF Module in its lifecycle
	// Example: PUBLISHED
	// Enum: ["PREVIEW","PUBLISHED"]
	Stage string `json:"stage,omitempty"`

	// Tags associated with the module
	// Example: ["tag1","tag2"]
	Tags []string `json:"tags"`

	// Type of the TF Module
	// Example: SIMPLE
	// Enum: ["SIMPLE","ADD_ON"]
	Type string `json:"type,omitempty"`

	// Version of the TF Module
	// Example: 1.0.0
	Version string `json:"version,omitempty"`
}

// Validate validates this t f module list response d t o
func (m *TFModuleListResponseDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntentDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TFModuleListResponseDTO) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TFModuleListResponseDTO) validateIntentDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.IntentDetails) { // not required
		return nil
	}

	if m.IntentDetails != nil {
		if err := m.IntentDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intentDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("intentDetails")
			}
			return err
		}
	}

	return nil
}

func (m *TFModuleListResponseDTO) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var tFModuleListResponseDTOTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BUILT_IN","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tFModuleListResponseDTOTypeSourcePropEnum = append(tFModuleListResponseDTOTypeSourcePropEnum, v)
	}
}

const (

	// TFModuleListResponseDTOSourceBUILTIN captures enum value "BUILT_IN"
	TFModuleListResponseDTOSourceBUILTIN string = "BUILT_IN"

	// TFModuleListResponseDTOSourceCUSTOM captures enum value "CUSTOM"
	TFModuleListResponseDTOSourceCUSTOM string = "CUSTOM"
)

// prop value enum
func (m *TFModuleListResponseDTO) validateSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tFModuleListResponseDTOTypeSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TFModuleListResponseDTO) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceEnum("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

var tFModuleListResponseDTOTypeStagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PREVIEW","PUBLISHED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tFModuleListResponseDTOTypeStagePropEnum = append(tFModuleListResponseDTOTypeStagePropEnum, v)
	}
}

const (

	// TFModuleListResponseDTOStagePREVIEW captures enum value "PREVIEW"
	TFModuleListResponseDTOStagePREVIEW string = "PREVIEW"

	// TFModuleListResponseDTOStagePUBLISHED captures enum value "PUBLISHED"
	TFModuleListResponseDTOStagePUBLISHED string = "PUBLISHED"
)

// prop value enum
func (m *TFModuleListResponseDTO) validateStageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tFModuleListResponseDTOTypeStagePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TFModuleListResponseDTO) validateStage(formats strfmt.Registry) error {
	if swag.IsZero(m.Stage) { // not required
		return nil
	}

	// value enum
	if err := m.validateStageEnum("stage", "body", m.Stage); err != nil {
		return err
	}

	return nil
}

var tFModuleListResponseDTOTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SIMPLE","ADD_ON"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tFModuleListResponseDTOTypeTypePropEnum = append(tFModuleListResponseDTOTypeTypePropEnum, v)
	}
}

const (

	// TFModuleListResponseDTOTypeSIMPLE captures enum value "SIMPLE"
	TFModuleListResponseDTOTypeSIMPLE string = "SIMPLE"

	// TFModuleListResponseDTOTypeADDON captures enum value "ADD_ON"
	TFModuleListResponseDTOTypeADDON string = "ADD_ON"
)

// prop value enum
func (m *TFModuleListResponseDTO) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tFModuleListResponseDTOTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TFModuleListResponseDTO) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this t f module list response d t o based on the context it is used
func (m *TFModuleListResponseDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIntentDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TFModuleListResponseDTO) contextValidateIntentDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.IntentDetails != nil {

		if swag.IsZero(m.IntentDetails) { // not required
			return nil
		}

		if err := m.IntentDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intentDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("intentDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TFModuleListResponseDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TFModuleListResponseDTO) UnmarshalBinary(b []byte) error {
	var res TFModuleListResponseDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
