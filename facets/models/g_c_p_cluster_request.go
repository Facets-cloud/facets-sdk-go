// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GCPClusterRequest g c p cluster request
//
// swagger:model GCPClusterRequest
type GCPClusterRequest struct {

	// auto sign off schedule
	AutoSignOffSchedule string `json:"autoSignOffSchedule,omitempty"`

	// azs
	Azs []string `json:"azs"`

	// base cluster Id
	BaseClusterID string `json:"baseClusterId,omitempty"`

	// cd pipeline parent
	CdPipelineParent string `json:"cdPipelineParent,omitempty"`

	// cloud
	// Enum: ["AWS","AZURE","LOCAL","GCP","KUBERNETES"]
	Cloud string `json:"cloud,omitempty"`

	// cloud account Id
	CloudAccountID string `json:"cloudAccountId,omitempty"`

	// cluster name
	ClusterName string `json:"clusterName,omitempty"`

	// component versions
	ComponentVersions map[string]string `json:"componentVersions,omitempty"`

	// enable auto sign off
	EnableAutoSignOff bool `json:"enableAutoSignOff,omitempty"`

	// is ephemeral
	IsEphemeral bool `json:"isEphemeral,omitempty"`

	// k8s requests to limits ratio
	K8sRequestsToLimitsRatio float64 `json:"k8sRequestsToLimitsRatio,omitempty"`

	// machine type
	MachineType string `json:"machineType,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// project
	Project string `json:"project,omitempty"`

	// provided v p c Id
	ProvidedVPCID string `json:"providedVPCId,omitempty"`

	// region
	Region string `json:"region,omitempty"`

	// release stream
	ReleaseStream string `json:"releaseStream,omitempty"`

	// require sign off
	RequireSignOff bool `json:"requireSignOff,omitempty"`

	// schedules
	Schedules map[string]string `json:"schedules,omitempty"`

	// service account key
	ServiceAccountKey string `json:"serviceAccountKey,omitempty"`

	// shared v p c settings
	SharedVPCSettings map[string]string `json:"sharedVPCSettings,omitempty"`

	// stack name
	StackName string `json:"stackName,omitempty"`

	// tz
	Tz *GCPClusterRequestTz `json:"tz,omitempty"`

	// vpc c ID r
	VpcCIDR string `json:"vpcCIDR,omitempty"`
}

// Validate validates this g c p cluster request
func (m *GCPClusterRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTz(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gCPClusterRequestTypeCloudPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","AZURE","LOCAL","GCP","KUBERNETES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gCPClusterRequestTypeCloudPropEnum = append(gCPClusterRequestTypeCloudPropEnum, v)
	}
}

const (

	// GCPClusterRequestCloudAWS captures enum value "AWS"
	GCPClusterRequestCloudAWS string = "AWS"

	// GCPClusterRequestCloudAZURE captures enum value "AZURE"
	GCPClusterRequestCloudAZURE string = "AZURE"

	// GCPClusterRequestCloudLOCAL captures enum value "LOCAL"
	GCPClusterRequestCloudLOCAL string = "LOCAL"

	// GCPClusterRequestCloudGCP captures enum value "GCP"
	GCPClusterRequestCloudGCP string = "GCP"

	// GCPClusterRequestCloudKUBERNETES captures enum value "KUBERNETES"
	GCPClusterRequestCloudKUBERNETES string = "KUBERNETES"
)

// prop value enum
func (m *GCPClusterRequest) validateCloudEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gCPClusterRequestTypeCloudPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GCPClusterRequest) validateCloud(formats strfmt.Registry) error {
	if swag.IsZero(m.Cloud) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloudEnum("cloud", "body", m.Cloud); err != nil {
		return err
	}

	return nil
}

func (m *GCPClusterRequest) validateTz(formats strfmt.Registry) error {
	if swag.IsZero(m.Tz) { // not required
		return nil
	}

	if m.Tz != nil {
		if err := m.Tz.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tz")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tz")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this g c p cluster request based on the context it is used
func (m *GCPClusterRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTz(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GCPClusterRequest) contextValidateTz(ctx context.Context, formats strfmt.Registry) error {

	if m.Tz != nil {

		if swag.IsZero(m.Tz) { // not required
			return nil
		}

		if err := m.Tz.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tz")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tz")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GCPClusterRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GCPClusterRequest) UnmarshalBinary(b []byte) error {
	var res GCPClusterRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GCPClusterRequestTz g c p cluster request tz
//
// swagger:model GCPClusterRequestTz
type GCPClusterRequestTz struct {

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// dstsavings
	Dstsavings int32 `json:"dstsavings,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// raw offset
	RawOffset int32 `json:"rawOffset,omitempty"`
}

// Validate validates this g c p cluster request tz
func (m *GCPClusterRequestTz) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this g c p cluster request tz based on context it is used
func (m *GCPClusterRequestTz) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GCPClusterRequestTz) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GCPClusterRequestTz) UnmarshalBinary(b []byte) error {
	var res GCPClusterRequestTz
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
