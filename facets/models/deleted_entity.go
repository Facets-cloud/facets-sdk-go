// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeletedEntity DeletedEntity
//
// swagger:model DeletedEntity
type DeletedEntity struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// entity
	Entity *SoftDelete `json:"entity,omitempty"`

	// entity type
	// Enum: ["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]
	EntityType string `json:"entityType,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`
}

// Validate validates this deleted entity
func (m *DeletedEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeletedEntity) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeletedEntity) validateEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	if m.Entity != nil {
		if err := m.Entity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

var deletedEntityTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deletedEntityTypeEntityTypePropEnum = append(deletedEntityTypeEntityTypePropEnum, v)
	}
}

const (

	// DeletedEntityEntityTypeCLUSTER captures enum value "CLUSTER"
	DeletedEntityEntityTypeCLUSTER string = "CLUSTER"

	// DeletedEntityEntityTypeBLUEPRINT captures enum value "BLUE_PRINT"
	DeletedEntityEntityTypeBLUEPRINT string = "BLUE_PRINT"

	// DeletedEntityEntityTypeTEMPLATEINPUT captures enum value "TEMPLATE_INPUT"
	DeletedEntityEntityTypeTEMPLATEINPUT string = "TEMPLATE_INPUT"

	// DeletedEntityEntityTypeCONTROLPLANE captures enum value "CONTROL_PLANE"
	DeletedEntityEntityTypeCONTROLPLANE string = "CONTROL_PLANE"

	// DeletedEntityEntityTypeIAC captures enum value "IAC"
	DeletedEntityEntityTypeIAC string = "IAC"

	// DeletedEntityEntityTypeARTIFACTCI captures enum value "ARTIFACT_CI"
	DeletedEntityEntityTypeARTIFACTCI string = "ARTIFACT_CI"

	// DeletedEntityEntityTypeUSERGROUP captures enum value "USER_GROUP"
	DeletedEntityEntityTypeUSERGROUP string = "USER_GROUP"

	// DeletedEntityEntityTypeACCOUNT captures enum value "ACCOUNT"
	DeletedEntityEntityTypeACCOUNT string = "ACCOUNT"

	// DeletedEntityEntityTypeARTIFACTORY captures enum value "ARTIFACTORY"
	DeletedEntityEntityTypeARTIFACTORY string = "ARTIFACTORY"
)

// prop value enum
func (m *DeletedEntity) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deletedEntityTypeEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeletedEntity) validateEntityType(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("entityType", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *DeletedEntity) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this deleted entity based on the context it is used
func (m *DeletedEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeletedEntity) contextValidateEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.Entity != nil {

		if swag.IsZero(m.Entity) { // not required
			return nil
		}

		if err := m.Entity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeletedEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeletedEntity) UnmarshalBinary(b []byte) error {
	var res DeletedEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
