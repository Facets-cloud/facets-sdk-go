// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApplicationDeploymentDetails ApplicationDeploymentDetails
//
// swagger:model ApplicationDeploymentDetails
type ApplicationDeploymentDetails struct {

	// creation timestamp
	CreationTimestamp string `json:"creationTimestamp,omitempty"`

	// credentials list
	CredentialsList []string `json:"credentialsList"`

	// environment configs
	EnvironmentConfigs map[string]string `json:"environmentConfigs,omitempty"`

	// hpa status
	HpaStatus *HPADetails `json:"hpaStatus,omitempty"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// replicas
	Replicas *PodReplicationDetails `json:"replicas,omitempty"`
}

// Validate validates this application deployment details
func (m *ApplicationDeploymentDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHpaStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicas(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationDeploymentDetails) validateHpaStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.HpaStatus) { // not required
		return nil
	}

	if m.HpaStatus != nil {
		if err := m.HpaStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hpaStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hpaStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationDeploymentDetails) validateReplicas(formats strfmt.Registry) error {
	if swag.IsZero(m.Replicas) { // not required
		return nil
	}

	if m.Replicas != nil {
		if err := m.Replicas.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicas")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicas")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this application deployment details based on the context it is used
func (m *ApplicationDeploymentDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHpaStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationDeploymentDetails) contextValidateHpaStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.HpaStatus != nil {

		if swag.IsZero(m.HpaStatus) { // not required
			return nil
		}

		if err := m.HpaStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hpaStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hpaStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationDeploymentDetails) contextValidateReplicas(ctx context.Context, formats strfmt.Registry) error {

	if m.Replicas != nil {

		if swag.IsZero(m.Replicas) { // not required
			return nil
		}

		if err := m.Replicas.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicas")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replicas")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationDeploymentDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationDeploymentDetails) UnmarshalBinary(b []byte) error {
	var res ApplicationDeploymentDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
