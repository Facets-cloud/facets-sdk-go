// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArtifactRoutingRuleResponse ArtifactRoutingRuleResponse
//
// swagger:model ArtifactRoutingRuleResponse
type ArtifactRoutingRuleResponse struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// criteria
	Criteria []*Criterion `json:"criteria"`

	// default
	Default bool `json:"default,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// registration type
	// Enum: ["ENVIRONMENT","RELEASE_STREAM","HYBRID"]
	RegistrationType string `json:"registrationType,omitempty"`

	// rule name
	RuleName string `json:"ruleName,omitempty"`

	// stack name
	StackName string `json:"stackName,omitempty"`
}

// Validate validates this artifact routing rule response
func (m *ArtifactRoutingRuleResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactRoutingRuleResponse) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactRoutingRuleResponse) validateCriteria(formats strfmt.Registry) error {
	if swag.IsZero(m.Criteria) { // not required
		return nil
	}

	for i := 0; i < len(m.Criteria); i++ {
		if swag.IsZero(m.Criteria[i]) { // not required
			continue
		}

		if m.Criteria[i] != nil {
			if err := m.Criteria[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var artifactRoutingRuleResponseTypeRegistrationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENVIRONMENT","RELEASE_STREAM","HYBRID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactRoutingRuleResponseTypeRegistrationTypePropEnum = append(artifactRoutingRuleResponseTypeRegistrationTypePropEnum, v)
	}
}

const (

	// ArtifactRoutingRuleResponseRegistrationTypeENVIRONMENT captures enum value "ENVIRONMENT"
	ArtifactRoutingRuleResponseRegistrationTypeENVIRONMENT string = "ENVIRONMENT"

	// ArtifactRoutingRuleResponseRegistrationTypeRELEASESTREAM captures enum value "RELEASE_STREAM"
	ArtifactRoutingRuleResponseRegistrationTypeRELEASESTREAM string = "RELEASE_STREAM"

	// ArtifactRoutingRuleResponseRegistrationTypeHYBRID captures enum value "HYBRID"
	ArtifactRoutingRuleResponseRegistrationTypeHYBRID string = "HYBRID"
)

// prop value enum
func (m *ArtifactRoutingRuleResponse) validateRegistrationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, artifactRoutingRuleResponseTypeRegistrationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ArtifactRoutingRuleResponse) validateRegistrationType(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistrationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRegistrationTypeEnum("registrationType", "body", m.RegistrationType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this artifact routing rule response based on the context it is used
func (m *ArtifactRoutingRuleResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCriteria(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactRoutingRuleResponse) contextValidateCriteria(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Criteria); i++ {

		if m.Criteria[i] != nil {

			if swag.IsZero(m.Criteria[i]) { // not required
				return nil
			}

			if err := m.Criteria[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArtifactRoutingRuleResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtifactRoutingRuleResponse) UnmarshalBinary(b []byte) error {
	var res ArtifactRoutingRuleResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
