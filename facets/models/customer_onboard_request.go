// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerOnboardRequest customer onboard request
//
// swagger:model CustomerOnboardRequest
type CustomerOnboardRequest struct {

	// azs
	Azs []string `json:"azs"`

	// customer name
	// Required: true
	// Max Length: 50
	// Min Length: 3
	CustomerName *string `json:"customerName"`

	// external Id
	// Required: true
	ExternalID *string `json:"externalId"`

	// region
	// Required: true
	Region *string `json:"region"`

	// release stream
	// Required: true
	ReleaseStream *string `json:"releaseStream"`

	// role a r n
	// Required: true
	RoleARN *string `json:"roleARN"`

	// timezone
	Timezone string `json:"timezone,omitempty"`
}

// Validate validates this customer onboard request
func (m *CustomerOnboardRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseStream(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleARN(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerOnboardRequest) validateCustomerName(formats strfmt.Registry) error {

	if err := validate.Required("customerName", "body", m.CustomerName); err != nil {
		return err
	}

	if err := validate.MinLength("customerName", "body", *m.CustomerName, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("customerName", "body", *m.CustomerName, 50); err != nil {
		return err
	}

	return nil
}

func (m *CustomerOnboardRequest) validateExternalID(formats strfmt.Registry) error {

	if err := validate.Required("externalId", "body", m.ExternalID); err != nil {
		return err
	}

	return nil
}

func (m *CustomerOnboardRequest) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *CustomerOnboardRequest) validateReleaseStream(formats strfmt.Registry) error {

	if err := validate.Required("releaseStream", "body", m.ReleaseStream); err != nil {
		return err
	}

	return nil
}

func (m *CustomerOnboardRequest) validateRoleARN(formats strfmt.Registry) error {

	if err := validate.Required("roleARN", "body", m.RoleARN); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this customer onboard request based on context it is used
func (m *CustomerOnboardRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerOnboardRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerOnboardRequest) UnmarshalBinary(b []byte) error {
	var res CustomerOnboardRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
