// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduleRequest schedule request
//
// swagger:model ScheduleRequest
type ScheduleRequest struct {

	// by day
	ByDay []string `json:"byDay"`

	// by time
	ByTime *LocalTime `json:"byTime,omitempty"`

	// frequency
	// Enum: ["PER_MINUTE","HOURLY","DAILY","WEEKLY"]
	Frequency string `json:"frequency,omitempty"`

	// interval
	Interval int32 `json:"interval,omitempty"`

	// pause release schedule
	PauseReleaseSchedule bool `json:"pauseReleaseSchedule,omitempty"`

	// release type
	// Enum: ["HOTFIX","RELEASE","LAUNCH","DESTROY","CUSTOM","UNLOCK_STATE","PLAN","HOTFIX_PLAN","APPLY_PLAN","APPLY_HOTFIX_PLAN","SCALE_UP","SCALE_DOWN","MAINTENANCE","TERRAFORM_EXPORT","ROLLBACK_PLAN","APPLY_ROLLBACK_PLAN"]
	ReleaseType string `json:"releaseType,omitempty"`

	// short lived
	ShortLived bool `json:"shortLived,omitempty"`

	// tear down after
	TearDownAfter int32 `json:"tearDownAfter,omitempty"`

	// time zone
	TimeZone *ScheduleRequestTimeZone `json:"timeZone,omitempty"`
}

// Validate validates this schedule request
func (m *ScheduleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateByDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateByTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var scheduleRequestByDayItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MON","TUE","WED","THU","FRI","SAT","SUN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduleRequestByDayItemsEnum = append(scheduleRequestByDayItemsEnum, v)
	}
}

func (m *ScheduleRequest) validateByDayItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scheduleRequestByDayItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScheduleRequest) validateByDay(formats strfmt.Registry) error {
	if swag.IsZero(m.ByDay) { // not required
		return nil
	}

	for i := 0; i < len(m.ByDay); i++ {

		// value enum
		if err := m.validateByDayItemsEnum("byDay"+"."+strconv.Itoa(i), "body", m.ByDay[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ScheduleRequest) validateByTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ByTime) { // not required
		return nil
	}

	if m.ByTime != nil {
		if err := m.ByTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("byTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("byTime")
			}
			return err
		}
	}

	return nil
}

var scheduleRequestTypeFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PER_MINUTE","HOURLY","DAILY","WEEKLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduleRequestTypeFrequencyPropEnum = append(scheduleRequestTypeFrequencyPropEnum, v)
	}
}

const (

	// ScheduleRequestFrequencyPERMINUTE captures enum value "PER_MINUTE"
	ScheduleRequestFrequencyPERMINUTE string = "PER_MINUTE"

	// ScheduleRequestFrequencyHOURLY captures enum value "HOURLY"
	ScheduleRequestFrequencyHOURLY string = "HOURLY"

	// ScheduleRequestFrequencyDAILY captures enum value "DAILY"
	ScheduleRequestFrequencyDAILY string = "DAILY"

	// ScheduleRequestFrequencyWEEKLY captures enum value "WEEKLY"
	ScheduleRequestFrequencyWEEKLY string = "WEEKLY"
)

// prop value enum
func (m *ScheduleRequest) validateFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scheduleRequestTypeFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScheduleRequest) validateFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.Frequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateFrequencyEnum("frequency", "body", m.Frequency); err != nil {
		return err
	}

	return nil
}

var scheduleRequestTypeReleaseTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HOTFIX","RELEASE","LAUNCH","DESTROY","CUSTOM","UNLOCK_STATE","PLAN","HOTFIX_PLAN","APPLY_PLAN","APPLY_HOTFIX_PLAN","SCALE_UP","SCALE_DOWN","MAINTENANCE","TERRAFORM_EXPORT","ROLLBACK_PLAN","APPLY_ROLLBACK_PLAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduleRequestTypeReleaseTypePropEnum = append(scheduleRequestTypeReleaseTypePropEnum, v)
	}
}

const (

	// ScheduleRequestReleaseTypeHOTFIX captures enum value "HOTFIX"
	ScheduleRequestReleaseTypeHOTFIX string = "HOTFIX"

	// ScheduleRequestReleaseTypeRELEASE captures enum value "RELEASE"
	ScheduleRequestReleaseTypeRELEASE string = "RELEASE"

	// ScheduleRequestReleaseTypeLAUNCH captures enum value "LAUNCH"
	ScheduleRequestReleaseTypeLAUNCH string = "LAUNCH"

	// ScheduleRequestReleaseTypeDESTROY captures enum value "DESTROY"
	ScheduleRequestReleaseTypeDESTROY string = "DESTROY"

	// ScheduleRequestReleaseTypeCUSTOM captures enum value "CUSTOM"
	ScheduleRequestReleaseTypeCUSTOM string = "CUSTOM"

	// ScheduleRequestReleaseTypeUNLOCKSTATE captures enum value "UNLOCK_STATE"
	ScheduleRequestReleaseTypeUNLOCKSTATE string = "UNLOCK_STATE"

	// ScheduleRequestReleaseTypePLAN captures enum value "PLAN"
	ScheduleRequestReleaseTypePLAN string = "PLAN"

	// ScheduleRequestReleaseTypeHOTFIXPLAN captures enum value "HOTFIX_PLAN"
	ScheduleRequestReleaseTypeHOTFIXPLAN string = "HOTFIX_PLAN"

	// ScheduleRequestReleaseTypeAPPLYPLAN captures enum value "APPLY_PLAN"
	ScheduleRequestReleaseTypeAPPLYPLAN string = "APPLY_PLAN"

	// ScheduleRequestReleaseTypeAPPLYHOTFIXPLAN captures enum value "APPLY_HOTFIX_PLAN"
	ScheduleRequestReleaseTypeAPPLYHOTFIXPLAN string = "APPLY_HOTFIX_PLAN"

	// ScheduleRequestReleaseTypeSCALEUP captures enum value "SCALE_UP"
	ScheduleRequestReleaseTypeSCALEUP string = "SCALE_UP"

	// ScheduleRequestReleaseTypeSCALEDOWN captures enum value "SCALE_DOWN"
	ScheduleRequestReleaseTypeSCALEDOWN string = "SCALE_DOWN"

	// ScheduleRequestReleaseTypeMAINTENANCE captures enum value "MAINTENANCE"
	ScheduleRequestReleaseTypeMAINTENANCE string = "MAINTENANCE"

	// ScheduleRequestReleaseTypeTERRAFORMEXPORT captures enum value "TERRAFORM_EXPORT"
	ScheduleRequestReleaseTypeTERRAFORMEXPORT string = "TERRAFORM_EXPORT"

	// ScheduleRequestReleaseTypeROLLBACKPLAN captures enum value "ROLLBACK_PLAN"
	ScheduleRequestReleaseTypeROLLBACKPLAN string = "ROLLBACK_PLAN"

	// ScheduleRequestReleaseTypeAPPLYROLLBACKPLAN captures enum value "APPLY_ROLLBACK_PLAN"
	ScheduleRequestReleaseTypeAPPLYROLLBACKPLAN string = "APPLY_ROLLBACK_PLAN"
)

// prop value enum
func (m *ScheduleRequest) validateReleaseTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scheduleRequestTypeReleaseTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScheduleRequest) validateReleaseType(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleaseType) { // not required
		return nil
	}

	// value enum
	if err := m.validateReleaseTypeEnum("releaseType", "body", m.ReleaseType); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleRequest) validateTimeZone(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeZone) { // not required
		return nil
	}

	if m.TimeZone != nil {
		if err := m.TimeZone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeZone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeZone")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this schedule request based on the context it is used
func (m *ScheduleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateByTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeZone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleRequest) contextValidateByTime(ctx context.Context, formats strfmt.Registry) error {

	if m.ByTime != nil {

		if swag.IsZero(m.ByTime) { // not required
			return nil
		}

		if err := m.ByTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("byTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("byTime")
			}
			return err
		}
	}

	return nil
}

func (m *ScheduleRequest) contextValidateTimeZone(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeZone != nil {

		if swag.IsZero(m.TimeZone) { // not required
			return nil
		}

		if err := m.TimeZone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeZone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeZone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleRequest) UnmarshalBinary(b []byte) error {
	var res ScheduleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ScheduleRequestTimeZone schedule request time zone
//
// swagger:model ScheduleRequestTimeZone
type ScheduleRequestTimeZone struct {

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// dstsavings
	Dstsavings int32 `json:"dstsavings,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// raw offset
	RawOffset int32 `json:"rawOffset,omitempty"`
}

// Validate validates this schedule request time zone
func (m *ScheduleRequestTimeZone) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this schedule request time zone based on context it is used
func (m *ScheduleRequestTimeZone) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleRequestTimeZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleRequestTimeZone) UnmarshalBinary(b []byte) error {
	var res ScheduleRequestTimeZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
