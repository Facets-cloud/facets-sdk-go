// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterResponse ClusterResponse
//
// swagger:model ClusterResponse
type ClusterResponse struct {

	// auto sign off schedule
	AutoSignOffSchedule string `json:"autoSignOffSchedule,omitempty"`

	// base cluster
	BaseCluster *ClusterLite `json:"baseCluster,omitempty"`

	// branch
	Branch string `json:"branch,omitempty"`

	// cd pipeline parent
	CdPipelineParent string `json:"cdPipelineParent,omitempty"`

	// cloud
	// Enum: ["AWS","AZURE","LOCAL","GCP","KUBERNETES"]
	Cloud string `json:"cloud,omitempty"`

	// cloud account Id
	CloudAccountID string `json:"cloudAccountId,omitempty"`

	// cloud account name
	CloudAccountName string `json:"cloudAccountName,omitempty"`

	// cluster code
	ClusterCode string `json:"clusterCode,omitempty"`

	// cluster state
	// Enum: ["STOPPED","RUNNING","LAUNCHING","DESTROYING","LAUNCH_FAILED","DESTROY_FAILED","UNKNOWN","SCALE_DOWN","SCALING_DOWN","SCALE_DOWN_FAILED","SCALING_UP","SCALE_UP_FAILED"]
	ClusterState string `json:"clusterState,omitempty"`

	// configured
	Configured bool `json:"configured,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// dependent clusters
	DependentClusters []*ClusterLite `json:"dependentClusters"`

	// dynamic launch
	DynamicLaunch bool `json:"dynamicLaunch,omitempty"`

	// enable auto sign off
	EnableAutoSignOff bool `json:"enableAutoSignOff,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is ephemeral
	IsEphemeral bool `json:"isEphemeral,omitempty"`

	// k8s requests to limits ratio
	K8sRequestsToLimitsRatio float64 `json:"k8sRequestsToLimitsRatio,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// pause releases
	PauseReleases bool `json:"pauseReleases,omitempty"`

	// release stream
	ReleaseStream string `json:"releaseStream,omitempty"`

	// require sign off
	RequireSignOff bool `json:"requireSignOff,omitempty"`

	// stack name
	StackName string `json:"stackName,omitempty"`

	// tz
	Tz string `json:"tz,omitempty"`
}

// Validate validates this cluster response
func (m *ClusterResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependentClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterResponse) validateBaseCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseCluster) { // not required
		return nil
	}

	if m.BaseCluster != nil {
		if err := m.BaseCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseCluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseCluster")
			}
			return err
		}
	}

	return nil
}

var clusterResponseTypeCloudPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","AZURE","LOCAL","GCP","KUBERNETES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterResponseTypeCloudPropEnum = append(clusterResponseTypeCloudPropEnum, v)
	}
}

const (

	// ClusterResponseCloudAWS captures enum value "AWS"
	ClusterResponseCloudAWS string = "AWS"

	// ClusterResponseCloudAZURE captures enum value "AZURE"
	ClusterResponseCloudAZURE string = "AZURE"

	// ClusterResponseCloudLOCAL captures enum value "LOCAL"
	ClusterResponseCloudLOCAL string = "LOCAL"

	// ClusterResponseCloudGCP captures enum value "GCP"
	ClusterResponseCloudGCP string = "GCP"

	// ClusterResponseCloudKUBERNETES captures enum value "KUBERNETES"
	ClusterResponseCloudKUBERNETES string = "KUBERNETES"
)

// prop value enum
func (m *ClusterResponse) validateCloudEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterResponseTypeCloudPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterResponse) validateCloud(formats strfmt.Registry) error {
	if swag.IsZero(m.Cloud) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloudEnum("cloud", "body", m.Cloud); err != nil {
		return err
	}

	return nil
}

var clusterResponseTypeClusterStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STOPPED","RUNNING","LAUNCHING","DESTROYING","LAUNCH_FAILED","DESTROY_FAILED","UNKNOWN","SCALE_DOWN","SCALING_DOWN","SCALE_DOWN_FAILED","SCALING_UP","SCALE_UP_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterResponseTypeClusterStatePropEnum = append(clusterResponseTypeClusterStatePropEnum, v)
	}
}

const (

	// ClusterResponseClusterStateSTOPPED captures enum value "STOPPED"
	ClusterResponseClusterStateSTOPPED string = "STOPPED"

	// ClusterResponseClusterStateRUNNING captures enum value "RUNNING"
	ClusterResponseClusterStateRUNNING string = "RUNNING"

	// ClusterResponseClusterStateLAUNCHING captures enum value "LAUNCHING"
	ClusterResponseClusterStateLAUNCHING string = "LAUNCHING"

	// ClusterResponseClusterStateDESTROYING captures enum value "DESTROYING"
	ClusterResponseClusterStateDESTROYING string = "DESTROYING"

	// ClusterResponseClusterStateLAUNCHFAILED captures enum value "LAUNCH_FAILED"
	ClusterResponseClusterStateLAUNCHFAILED string = "LAUNCH_FAILED"

	// ClusterResponseClusterStateDESTROYFAILED captures enum value "DESTROY_FAILED"
	ClusterResponseClusterStateDESTROYFAILED string = "DESTROY_FAILED"

	// ClusterResponseClusterStateUNKNOWN captures enum value "UNKNOWN"
	ClusterResponseClusterStateUNKNOWN string = "UNKNOWN"

	// ClusterResponseClusterStateSCALEDOWN captures enum value "SCALE_DOWN"
	ClusterResponseClusterStateSCALEDOWN string = "SCALE_DOWN"

	// ClusterResponseClusterStateSCALINGDOWN captures enum value "SCALING_DOWN"
	ClusterResponseClusterStateSCALINGDOWN string = "SCALING_DOWN"

	// ClusterResponseClusterStateSCALEDOWNFAILED captures enum value "SCALE_DOWN_FAILED"
	ClusterResponseClusterStateSCALEDOWNFAILED string = "SCALE_DOWN_FAILED"

	// ClusterResponseClusterStateSCALINGUP captures enum value "SCALING_UP"
	ClusterResponseClusterStateSCALINGUP string = "SCALING_UP"

	// ClusterResponseClusterStateSCALEUPFAILED captures enum value "SCALE_UP_FAILED"
	ClusterResponseClusterStateSCALEUPFAILED string = "SCALE_UP_FAILED"
)

// prop value enum
func (m *ClusterResponse) validateClusterStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterResponseTypeClusterStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterResponse) validateClusterState(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterState) { // not required
		return nil
	}

	// value enum
	if err := m.validateClusterStateEnum("clusterState", "body", m.ClusterState); err != nil {
		return err
	}

	return nil
}

func (m *ClusterResponse) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClusterResponse) validateDependentClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.DependentClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.DependentClusters); i++ {
		if swag.IsZero(m.DependentClusters[i]) { // not required
			continue
		}

		if m.DependentClusters[i] != nil {
			if err := m.DependentClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependentClusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dependentClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterResponse) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cluster response based on the context it is used
func (m *ClusterResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDependentClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterResponse) contextValidateBaseCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseCluster != nil {

		if swag.IsZero(m.BaseCluster) { // not required
			return nil
		}

		if err := m.BaseCluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseCluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseCluster")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterResponse) contextValidateDependentClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DependentClusters); i++ {

		if m.DependentClusters[i] != nil {

			if swag.IsZero(m.DependentClusters[i]) { // not required
				return nil
			}

			if err := m.DependentClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependentClusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dependentClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterResponse) UnmarshalBinary(b []byte) error {
	var res ClusterResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
