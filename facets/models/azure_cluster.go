// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureCluster AzureCluster
//
// swagger:model AzureCluster
type AzureCluster struct {

	// auto sign off schedule
	AutoSignOffSchedule string `json:"autoSignOffSchedule,omitempty"`

	// azs
	Azs []string `json:"azs"`

	// base cluster Id
	BaseClusterID string `json:"baseClusterId,omitempty"`

	// base cluster name
	BaseClusterName string `json:"baseClusterName,omitempty"`

	// branch
	Branch string `json:"branch,omitempty"`

	// cd pipeline parent
	CdPipelineParent string `json:"cdPipelineParent,omitempty"`

	// client Id
	ClientID string `json:"clientId,omitempty"`

	// client secret
	ClientSecret string `json:"clientSecret,omitempty"`

	// cloud
	// Enum: ["AWS","AZURE","LOCAL","GCP","KUBERNETES"]
	Cloud string `json:"cloud,omitempty"`

	// cloud account Id
	CloudAccountID string `json:"cloudAccountId,omitempty"`

	// cloud account secret Id
	CloudAccountSecretID string `json:"cloudAccountSecretId,omitempty"`

	// cluster code
	ClusterCode string `json:"clusterCode,omitempty"`

	// cluster state
	// Enum: ["STOPPED","RUNNING","LAUNCHING","DESTROYING","LAUNCH_FAILED","DESTROY_FAILED","UNKNOWN","SCALE_DOWN","SCALING_DOWN","SCALE_DOWN_FAILED","SCALING_UP","SCALE_UP_FAILED"]
	ClusterState string `json:"clusterState,omitempty"`

	// common environment variables
	CommonEnvironmentVariables map[string]string `json:"commonEnvironmentVariables,omitempty"`

	// component versions
	ComponentVersions map[string]string `json:"componentVersions,omitempty"`

	// configured
	Configured bool `json:"configured,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// deleted
	Deleted bool `json:"deleted,omitempty"`

	// dynamic launch
	DynamicLaunch bool `json:"dynamicLaunch,omitempty"`

	// enable auto sign off
	EnableAutoSignOff bool `json:"enableAutoSignOff,omitempty"`

	// entity type
	// Enum: ["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]
	EntityType string `json:"entityType,omitempty"`

	// global variables
	GlobalVariables map[string]string `json:"globalVariables,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// instance types
	InstanceTypes []string `json:"instanceTypes"`

	// is ephemeral
	IsEphemeral bool `json:"isEphemeral,omitempty"`

	// k8s requests to limits ratio
	K8sRequestsToLimitsRatio float64 `json:"k8sRequestsToLimitsRatio,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// number of versions
	NumberOfVersions int32 `json:"numberOfVersions,omitempty"`

	// pause releases
	PauseReleases bool `json:"pauseReleases,omitempty"`

	// region
	Region string `json:"region,omitempty"`

	// release stream
	ReleaseStream string `json:"releaseStream,omitempty"`

	// require sign off
	RequireSignOff bool `json:"requireSignOff,omitempty"`

	// resource group name
	ResourceGroupName string `json:"resourceGroupName,omitempty"`

	// schedules
	Schedules map[string]string `json:"schedules,omitempty"`

	// secrets
	Secrets map[string]string `json:"secrets,omitempty"`

	// secrets Uid
	SecretsUID string `json:"secretsUid,omitempty"`

	// stack name
	StackName string `json:"stackName,omitempty"`

	// subscription Id
	SubscriptionID string `json:"subscriptionId,omitempty"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`

	// tz
	Tz string `json:"tz,omitempty"`

	// variables
	Variables map[string]Variables `json:"variables,omitempty"`

	// versioning key
	VersioningKey string `json:"versioningKey,omitempty"`

	// vnet name
	VnetName string `json:"vnetName,omitempty"`

	// vpc c ID r
	VpcCIDR string `json:"vpcCIDR,omitempty"`
}

// Validate validates this azure cluster
func (m *AzureCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var azureClusterTypeCloudPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","AZURE","LOCAL","GCP","KUBERNETES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureClusterTypeCloudPropEnum = append(azureClusterTypeCloudPropEnum, v)
	}
}

const (

	// AzureClusterCloudAWS captures enum value "AWS"
	AzureClusterCloudAWS string = "AWS"

	// AzureClusterCloudAZURE captures enum value "AZURE"
	AzureClusterCloudAZURE string = "AZURE"

	// AzureClusterCloudLOCAL captures enum value "LOCAL"
	AzureClusterCloudLOCAL string = "LOCAL"

	// AzureClusterCloudGCP captures enum value "GCP"
	AzureClusterCloudGCP string = "GCP"

	// AzureClusterCloudKUBERNETES captures enum value "KUBERNETES"
	AzureClusterCloudKUBERNETES string = "KUBERNETES"
)

// prop value enum
func (m *AzureCluster) validateCloudEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureClusterTypeCloudPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureCluster) validateCloud(formats strfmt.Registry) error {
	if swag.IsZero(m.Cloud) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloudEnum("cloud", "body", m.Cloud); err != nil {
		return err
	}

	return nil
}

var azureClusterTypeClusterStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STOPPED","RUNNING","LAUNCHING","DESTROYING","LAUNCH_FAILED","DESTROY_FAILED","UNKNOWN","SCALE_DOWN","SCALING_DOWN","SCALE_DOWN_FAILED","SCALING_UP","SCALE_UP_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureClusterTypeClusterStatePropEnum = append(azureClusterTypeClusterStatePropEnum, v)
	}
}

const (

	// AzureClusterClusterStateSTOPPED captures enum value "STOPPED"
	AzureClusterClusterStateSTOPPED string = "STOPPED"

	// AzureClusterClusterStateRUNNING captures enum value "RUNNING"
	AzureClusterClusterStateRUNNING string = "RUNNING"

	// AzureClusterClusterStateLAUNCHING captures enum value "LAUNCHING"
	AzureClusterClusterStateLAUNCHING string = "LAUNCHING"

	// AzureClusterClusterStateDESTROYING captures enum value "DESTROYING"
	AzureClusterClusterStateDESTROYING string = "DESTROYING"

	// AzureClusterClusterStateLAUNCHFAILED captures enum value "LAUNCH_FAILED"
	AzureClusterClusterStateLAUNCHFAILED string = "LAUNCH_FAILED"

	// AzureClusterClusterStateDESTROYFAILED captures enum value "DESTROY_FAILED"
	AzureClusterClusterStateDESTROYFAILED string = "DESTROY_FAILED"

	// AzureClusterClusterStateUNKNOWN captures enum value "UNKNOWN"
	AzureClusterClusterStateUNKNOWN string = "UNKNOWN"

	// AzureClusterClusterStateSCALEDOWN captures enum value "SCALE_DOWN"
	AzureClusterClusterStateSCALEDOWN string = "SCALE_DOWN"

	// AzureClusterClusterStateSCALINGDOWN captures enum value "SCALING_DOWN"
	AzureClusterClusterStateSCALINGDOWN string = "SCALING_DOWN"

	// AzureClusterClusterStateSCALEDOWNFAILED captures enum value "SCALE_DOWN_FAILED"
	AzureClusterClusterStateSCALEDOWNFAILED string = "SCALE_DOWN_FAILED"

	// AzureClusterClusterStateSCALINGUP captures enum value "SCALING_UP"
	AzureClusterClusterStateSCALINGUP string = "SCALING_UP"

	// AzureClusterClusterStateSCALEUPFAILED captures enum value "SCALE_UP_FAILED"
	AzureClusterClusterStateSCALEUPFAILED string = "SCALE_UP_FAILED"
)

// prop value enum
func (m *AzureCluster) validateClusterStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureClusterTypeClusterStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureCluster) validateClusterState(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterState) { // not required
		return nil
	}

	// value enum
	if err := m.validateClusterStateEnum("clusterState", "body", m.ClusterState); err != nil {
		return err
	}

	return nil
}

func (m *AzureCluster) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var azureClusterTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureClusterTypeEntityTypePropEnum = append(azureClusterTypeEntityTypePropEnum, v)
	}
}

const (

	// AzureClusterEntityTypeCLUSTER captures enum value "CLUSTER"
	AzureClusterEntityTypeCLUSTER string = "CLUSTER"

	// AzureClusterEntityTypeBLUEPRINT captures enum value "BLUE_PRINT"
	AzureClusterEntityTypeBLUEPRINT string = "BLUE_PRINT"

	// AzureClusterEntityTypeTEMPLATEINPUT captures enum value "TEMPLATE_INPUT"
	AzureClusterEntityTypeTEMPLATEINPUT string = "TEMPLATE_INPUT"

	// AzureClusterEntityTypeCONTROLPLANE captures enum value "CONTROL_PLANE"
	AzureClusterEntityTypeCONTROLPLANE string = "CONTROL_PLANE"

	// AzureClusterEntityTypeIAC captures enum value "IAC"
	AzureClusterEntityTypeIAC string = "IAC"

	// AzureClusterEntityTypeARTIFACTCI captures enum value "ARTIFACT_CI"
	AzureClusterEntityTypeARTIFACTCI string = "ARTIFACT_CI"

	// AzureClusterEntityTypeUSERGROUP captures enum value "USER_GROUP"
	AzureClusterEntityTypeUSERGROUP string = "USER_GROUP"

	// AzureClusterEntityTypeACCOUNT captures enum value "ACCOUNT"
	AzureClusterEntityTypeACCOUNT string = "ACCOUNT"

	// AzureClusterEntityTypeARTIFACTORY captures enum value "ARTIFACTORY"
	AzureClusterEntityTypeARTIFACTORY string = "ARTIFACTORY"
)

// prop value enum
func (m *AzureCluster) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureClusterTypeEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureCluster) validateEntityType(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("entityType", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *AzureCluster) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AzureCluster) validateVariables(formats strfmt.Registry) error {
	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	for k := range m.Variables {

		if err := validate.Required("variables"+"."+k, "body", m.Variables[k]); err != nil {
			return err
		}
		if val, ok := m.Variables[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variables" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("variables" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this azure cluster based on the context it is used
func (m *AzureCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVariables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureCluster) contextValidateVariables(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Variables {

		if val, ok := m.Variables[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureCluster) UnmarshalBinary(b []byte) error {
	var res AzureCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
