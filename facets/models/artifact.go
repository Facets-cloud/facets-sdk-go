// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Artifact artifact
//
// swagger:model Artifact
type Artifact struct {

	// application name
	ApplicationName string `json:"applicationName,omitempty"`

	// applied rule Id
	AppliedRuleID string `json:"appliedRuleId,omitempty"`

	// applied rule name
	AppliedRuleName string `json:"appliedRuleName,omitempty"`

	// applied rule version Id
	AppliedRuleVersionID string `json:"appliedRuleVersionId,omitempty"`

	// artifact Uri
	ArtifactURI string `json:"artifactUri,omitempty"`

	// artifactory
	Artifactory string `json:"artifactory,omitempty"`

	// build description
	BuildDescription string `json:"buildDescription,omitempty"`

	// build Id
	BuildID string `json:"buildId,omitempty"`

	// change log
	ChangeLog string `json:"changeLog,omitempty"`

	// classified
	Classified bool `json:"classified,omitempty"`

	// cluster Id
	ClusterID string `json:"clusterId,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// created on
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// metadata
	Metadata map[string]string `json:"metadata,omitempty"`

	// promoted
	Promoted bool `json:"promoted,omitempty"`

	// registration type
	// Enum: ["ENVIRONMENT","RELEASE_STREAM","HYBRID"]
	RegistrationType string `json:"registrationType,omitempty"`

	// registration value
	RegistrationValue string `json:"registrationValue,omitempty"`

	// release stream
	ReleaseStream string `json:"releaseStream,omitempty"`

	// release type
	// Enum: ["HOTFIX","RELEASE","LAUNCH","DESTROY","CUSTOM","UNLOCK_STATE","PLAN","HOTFIX_PLAN","APPLY_PLAN","APPLY_HOTFIX_PLAN","SCALE_UP","SCALE_DOWN","MAINTENANCE","TERRAFORM_EXPORT","ROLLBACK_PLAN","APPLY_ROLLBACK_PLAN"]
	ReleaseType string `json:"releaseType,omitempty"`

	// repository name
	RepositoryName string `json:"repositoryName,omitempty"`

	// tag
	Tag string `json:"tag,omitempty"`

	// versioning key
	VersioningKey string `json:"versioningKey,omitempty"`
}

// Validate validates this artifact
func (m *Artifact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Artifact) validateCreatedOn(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("createdOn", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Artifact) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Artifact) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var artifactTypeRegistrationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENVIRONMENT","RELEASE_STREAM","HYBRID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactTypeRegistrationTypePropEnum = append(artifactTypeRegistrationTypePropEnum, v)
	}
}

const (

	// ArtifactRegistrationTypeENVIRONMENT captures enum value "ENVIRONMENT"
	ArtifactRegistrationTypeENVIRONMENT string = "ENVIRONMENT"

	// ArtifactRegistrationTypeRELEASESTREAM captures enum value "RELEASE_STREAM"
	ArtifactRegistrationTypeRELEASESTREAM string = "RELEASE_STREAM"

	// ArtifactRegistrationTypeHYBRID captures enum value "HYBRID"
	ArtifactRegistrationTypeHYBRID string = "HYBRID"
)

// prop value enum
func (m *Artifact) validateRegistrationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, artifactTypeRegistrationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Artifact) validateRegistrationType(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistrationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRegistrationTypeEnum("registrationType", "body", m.RegistrationType); err != nil {
		return err
	}

	return nil
}

var artifactTypeReleaseTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HOTFIX","RELEASE","LAUNCH","DESTROY","CUSTOM","UNLOCK_STATE","PLAN","HOTFIX_PLAN","APPLY_PLAN","APPLY_HOTFIX_PLAN","SCALE_UP","SCALE_DOWN","MAINTENANCE","TERRAFORM_EXPORT","ROLLBACK_PLAN","APPLY_ROLLBACK_PLAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactTypeReleaseTypePropEnum = append(artifactTypeReleaseTypePropEnum, v)
	}
}

const (

	// ArtifactReleaseTypeHOTFIX captures enum value "HOTFIX"
	ArtifactReleaseTypeHOTFIX string = "HOTFIX"

	// ArtifactReleaseTypeRELEASE captures enum value "RELEASE"
	ArtifactReleaseTypeRELEASE string = "RELEASE"

	// ArtifactReleaseTypeLAUNCH captures enum value "LAUNCH"
	ArtifactReleaseTypeLAUNCH string = "LAUNCH"

	// ArtifactReleaseTypeDESTROY captures enum value "DESTROY"
	ArtifactReleaseTypeDESTROY string = "DESTROY"

	// ArtifactReleaseTypeCUSTOM captures enum value "CUSTOM"
	ArtifactReleaseTypeCUSTOM string = "CUSTOM"

	// ArtifactReleaseTypeUNLOCKSTATE captures enum value "UNLOCK_STATE"
	ArtifactReleaseTypeUNLOCKSTATE string = "UNLOCK_STATE"

	// ArtifactReleaseTypePLAN captures enum value "PLAN"
	ArtifactReleaseTypePLAN string = "PLAN"

	// ArtifactReleaseTypeHOTFIXPLAN captures enum value "HOTFIX_PLAN"
	ArtifactReleaseTypeHOTFIXPLAN string = "HOTFIX_PLAN"

	// ArtifactReleaseTypeAPPLYPLAN captures enum value "APPLY_PLAN"
	ArtifactReleaseTypeAPPLYPLAN string = "APPLY_PLAN"

	// ArtifactReleaseTypeAPPLYHOTFIXPLAN captures enum value "APPLY_HOTFIX_PLAN"
	ArtifactReleaseTypeAPPLYHOTFIXPLAN string = "APPLY_HOTFIX_PLAN"

	// ArtifactReleaseTypeSCALEUP captures enum value "SCALE_UP"
	ArtifactReleaseTypeSCALEUP string = "SCALE_UP"

	// ArtifactReleaseTypeSCALEDOWN captures enum value "SCALE_DOWN"
	ArtifactReleaseTypeSCALEDOWN string = "SCALE_DOWN"

	// ArtifactReleaseTypeMAINTENANCE captures enum value "MAINTENANCE"
	ArtifactReleaseTypeMAINTENANCE string = "MAINTENANCE"

	// ArtifactReleaseTypeTERRAFORMEXPORT captures enum value "TERRAFORM_EXPORT"
	ArtifactReleaseTypeTERRAFORMEXPORT string = "TERRAFORM_EXPORT"

	// ArtifactReleaseTypeROLLBACKPLAN captures enum value "ROLLBACK_PLAN"
	ArtifactReleaseTypeROLLBACKPLAN string = "ROLLBACK_PLAN"

	// ArtifactReleaseTypeAPPLYROLLBACKPLAN captures enum value "APPLY_ROLLBACK_PLAN"
	ArtifactReleaseTypeAPPLYROLLBACKPLAN string = "APPLY_ROLLBACK_PLAN"
)

// prop value enum
func (m *Artifact) validateReleaseTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, artifactTypeReleaseTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Artifact) validateReleaseType(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleaseType) { // not required
		return nil
	}

	// value enum
	if err := m.validateReleaseTypeEnum("releaseType", "body", m.ReleaseType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this artifact based on context it is used
func (m *Artifact) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Artifact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Artifact) UnmarshalBinary(b []byte) error {
	var res Artifact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
