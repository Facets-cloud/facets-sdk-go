// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateWorkspaceNewBranchRequest create workspace new branch request
//
// swagger:model CreateWorkspaceNewBranchRequest
type CreateWorkspaceNewBranchRequest struct {

	// new branch
	// Required: true
	NewBranch *string `json:"newBranch"`

	// source branch
	// Required: true
	SourceBranch *string `json:"sourceBranch"`

	// workspace name
	// Required: true
	WorkspaceName *string `json:"workspaceName"`
}

// Validate validates this create workspace new branch request
func (m *CreateWorkspaceNewBranchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaceName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateWorkspaceNewBranchRequest) validateNewBranch(formats strfmt.Registry) error {

	if err := validate.Required("newBranch", "body", m.NewBranch); err != nil {
		return err
	}

	return nil
}

func (m *CreateWorkspaceNewBranchRequest) validateSourceBranch(formats strfmt.Registry) error {

	if err := validate.Required("sourceBranch", "body", m.SourceBranch); err != nil {
		return err
	}

	return nil
}

func (m *CreateWorkspaceNewBranchRequest) validateWorkspaceName(formats strfmt.Registry) error {

	if err := validate.Required("workspaceName", "body", m.WorkspaceName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create workspace new branch request based on context it is used
func (m *CreateWorkspaceNewBranchRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateWorkspaceNewBranchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateWorkspaceNewBranchRequest) UnmarshalBinary(b []byte) error {
	var res CreateWorkspaceNewBranchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
