// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TokenValidity TokenValidity
//
// swagger:model TokenValidity
type TokenValidity struct {

	// message
	// Enum: ["TOKEN_NOT_FOUND","TOKEN_EXPIRED","TOKEN_ALREADY_USED"]
	Message string `json:"message,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// valid
	Valid bool `json:"valid,omitempty"`
}

// Validate validates this token validity
func (m *TokenValidity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tokenValidityTypeMessagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TOKEN_NOT_FOUND","TOKEN_EXPIRED","TOKEN_ALREADY_USED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tokenValidityTypeMessagePropEnum = append(tokenValidityTypeMessagePropEnum, v)
	}
}

const (

	// TokenValidityMessageTOKENNOTFOUND captures enum value "TOKEN_NOT_FOUND"
	TokenValidityMessageTOKENNOTFOUND string = "TOKEN_NOT_FOUND"

	// TokenValidityMessageTOKENEXPIRED captures enum value "TOKEN_EXPIRED"
	TokenValidityMessageTOKENEXPIRED string = "TOKEN_EXPIRED"

	// TokenValidityMessageTOKENALREADYUSED captures enum value "TOKEN_ALREADY_USED"
	TokenValidityMessageTOKENALREADYUSED string = "TOKEN_ALREADY_USED"
)

// prop value enum
func (m *TokenValidity) validateMessageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tokenValidityTypeMessagePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TokenValidity) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.Message) { // not required
		return nil
	}

	// value enum
	if err := m.validateMessageEnum("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this token validity based on context it is used
func (m *TokenValidity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TokenValidity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokenValidity) UnmarshalBinary(b []byte) error {
	var res TokenValidity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
