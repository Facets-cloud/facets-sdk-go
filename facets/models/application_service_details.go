// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationServiceDetails ApplicationServiceDetails
//
// swagger:model ApplicationServiceDetails
type ApplicationServiceDetails struct {

	// creation timestamp
	CreationTimestamp string `json:"creationTimestamp,omitempty"`

	// external Dns
	ExternalDNS string `json:"externalDns,omitempty"`

	// external endpoints
	ExternalEndpoints []*Endpoint `json:"externalEndpoints"`

	// internal endpoints
	InternalEndpoints []*Endpoint `json:"internalEndpoints"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// selectors
	Selectors map[string]string `json:"selectors,omitempty"`

	// service type
	// Enum: ["ClusterIP","NodePort","LoadBalancer","ExternalName"]
	ServiceType string `json:"serviceType,omitempty"`
}

// Validate validates this application service details
func (m *ApplicationServiceDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternalEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternalEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationServiceDetails) validateExternalEndpoints(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalEndpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalEndpoints); i++ {
		if swag.IsZero(m.ExternalEndpoints[i]) { // not required
			continue
		}

		if m.ExternalEndpoints[i] != nil {
			if err := m.ExternalEndpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalEndpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("externalEndpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationServiceDetails) validateInternalEndpoints(formats strfmt.Registry) error {
	if swag.IsZero(m.InternalEndpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.InternalEndpoints); i++ {
		if swag.IsZero(m.InternalEndpoints[i]) { // not required
			continue
		}

		if m.InternalEndpoints[i] != nil {
			if err := m.InternalEndpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("internalEndpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("internalEndpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var applicationServiceDetailsTypeServiceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ClusterIP","NodePort","LoadBalancer","ExternalName"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationServiceDetailsTypeServiceTypePropEnum = append(applicationServiceDetailsTypeServiceTypePropEnum, v)
	}
}

const (

	// ApplicationServiceDetailsServiceTypeClusterIP captures enum value "ClusterIP"
	ApplicationServiceDetailsServiceTypeClusterIP string = "ClusterIP"

	// ApplicationServiceDetailsServiceTypeNodePort captures enum value "NodePort"
	ApplicationServiceDetailsServiceTypeNodePort string = "NodePort"

	// ApplicationServiceDetailsServiceTypeLoadBalancer captures enum value "LoadBalancer"
	ApplicationServiceDetailsServiceTypeLoadBalancer string = "LoadBalancer"

	// ApplicationServiceDetailsServiceTypeExternalName captures enum value "ExternalName"
	ApplicationServiceDetailsServiceTypeExternalName string = "ExternalName"
)

// prop value enum
func (m *ApplicationServiceDetails) validateServiceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationServiceDetailsTypeServiceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApplicationServiceDetails) validateServiceType(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceTypeEnum("serviceType", "body", m.ServiceType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this application service details based on the context it is used
func (m *ApplicationServiceDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExternalEndpoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInternalEndpoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationServiceDetails) contextValidateExternalEndpoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalEndpoints); i++ {

		if m.ExternalEndpoints[i] != nil {

			if swag.IsZero(m.ExternalEndpoints[i]) { // not required
				return nil
			}

			if err := m.ExternalEndpoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalEndpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("externalEndpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationServiceDetails) contextValidateInternalEndpoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InternalEndpoints); i++ {

		if m.InternalEndpoints[i] != nil {

			if swag.IsZero(m.InternalEndpoints[i]) { // not required
				return nil
			}

			if err := m.InternalEndpoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("internalEndpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("internalEndpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationServiceDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationServiceDetails) UnmarshalBinary(b []byte) error {
	var res ApplicationServiceDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
