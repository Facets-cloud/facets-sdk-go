// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Build Build
//
// swagger:model Build
type Build struct {

	// additional repository images
	AdditionalRepositoryImages []string `json:"additionalRepositoryImages"`

	// application family
	// Enum: ["CRM","ECOMMERCE","INTEGRATIONS","OPS"]
	ApplicationFamily string `json:"applicationFamily,omitempty"`

	// application Id
	ApplicationID string `json:"applicationId,omitempty"`

	// artifact Url
	ArtifactURL string `json:"artifactUrl,omitempty"`

	// code build Id
	CodeBuildID string `json:"codeBuildId,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// environment variables
	EnvironmentVariables map[string]string `json:"environmentVariables,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// promotable
	Promotable bool `json:"promotable,omitempty"`

	// promoted
	Promoted bool `json:"promoted,omitempty"`

	// promotion intent
	// Enum: ["NA","NOT_CC_ENABLED","HOTFIX","RELEASE"]
	PromotionIntent string `json:"promotionIntent,omitempty"`

	// status
	// Enum: ["SUCCEEDED","FAILED","FAULT","TIMED_OUT","IN_PROGRESS","STOPPED","null"]
	Status string `json:"status,omitempty"`

	// tag
	Tag string `json:"tag,omitempty"`

	// test build
	TestBuild bool `json:"testBuild,omitempty"`

	// timestamp
	Timestamp int64 `json:"timestamp,omitempty"`

	// triggered by
	TriggeredBy string `json:"triggeredBy,omitempty"`

	// unpromoted
	Unpromoted bool `json:"unpromoted,omitempty"`
}

// Validate validates this build
func (m *Build) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationFamily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromotionIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var buildTypeApplicationFamilyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CRM","ECOMMERCE","INTEGRATIONS","OPS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		buildTypeApplicationFamilyPropEnum = append(buildTypeApplicationFamilyPropEnum, v)
	}
}

const (

	// BuildApplicationFamilyCRM captures enum value "CRM"
	BuildApplicationFamilyCRM string = "CRM"

	// BuildApplicationFamilyECOMMERCE captures enum value "ECOMMERCE"
	BuildApplicationFamilyECOMMERCE string = "ECOMMERCE"

	// BuildApplicationFamilyINTEGRATIONS captures enum value "INTEGRATIONS"
	BuildApplicationFamilyINTEGRATIONS string = "INTEGRATIONS"

	// BuildApplicationFamilyOPS captures enum value "OPS"
	BuildApplicationFamilyOPS string = "OPS"
)

// prop value enum
func (m *Build) validateApplicationFamilyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, buildTypeApplicationFamilyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Build) validateApplicationFamily(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationFamily) { // not required
		return nil
	}

	// value enum
	if err := m.validateApplicationFamilyEnum("applicationFamily", "body", m.ApplicationFamily); err != nil {
		return err
	}

	return nil
}

var buildTypePromotionIntentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NA","NOT_CC_ENABLED","HOTFIX","RELEASE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		buildTypePromotionIntentPropEnum = append(buildTypePromotionIntentPropEnum, v)
	}
}

const (

	// BuildPromotionIntentNA captures enum value "NA"
	BuildPromotionIntentNA string = "NA"

	// BuildPromotionIntentNOTCCENABLED captures enum value "NOT_CC_ENABLED"
	BuildPromotionIntentNOTCCENABLED string = "NOT_CC_ENABLED"

	// BuildPromotionIntentHOTFIX captures enum value "HOTFIX"
	BuildPromotionIntentHOTFIX string = "HOTFIX"

	// BuildPromotionIntentRELEASE captures enum value "RELEASE"
	BuildPromotionIntentRELEASE string = "RELEASE"
)

// prop value enum
func (m *Build) validatePromotionIntentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, buildTypePromotionIntentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Build) validatePromotionIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.PromotionIntent) { // not required
		return nil
	}

	// value enum
	if err := m.validatePromotionIntentEnum("promotionIntent", "body", m.PromotionIntent); err != nil {
		return err
	}

	return nil
}

var buildTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCEEDED","FAILED","FAULT","TIMED_OUT","IN_PROGRESS","STOPPED","null"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		buildTypeStatusPropEnum = append(buildTypeStatusPropEnum, v)
	}
}

const (

	// BuildStatusSUCCEEDED captures enum value "SUCCEEDED"
	BuildStatusSUCCEEDED string = "SUCCEEDED"

	// BuildStatusFAILED captures enum value "FAILED"
	BuildStatusFAILED string = "FAILED"

	// BuildStatusFAULT captures enum value "FAULT"
	BuildStatusFAULT string = "FAULT"

	// BuildStatusTIMEDOUT captures enum value "TIMED_OUT"
	BuildStatusTIMEDOUT string = "TIMED_OUT"

	// BuildStatusINPROGRESS captures enum value "IN_PROGRESS"
	BuildStatusINPROGRESS string = "IN_PROGRESS"

	// BuildStatusSTOPPED captures enum value "STOPPED"
	BuildStatusSTOPPED string = "STOPPED"

	// BuildStatusNull captures enum value "null"
	BuildStatusNull string = "null"
)

// prop value enum
func (m *Build) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, buildTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Build) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this build based on context it is used
func (m *Build) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Build) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Build) UnmarshalBinary(b []byte) error {
	var res Build
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
