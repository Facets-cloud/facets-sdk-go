// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PVC PVC
//
// swagger:model PVC
type PVC struct {

	// access mode
	// Enum: ["ReadWriteOnce","ReadOnlyMany","ReadWriteMany"]
	AccessMode string `json:"accessMode,omitempty"`

	// mount path
	MountPath string `json:"mountPath,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// storage size
	StorageSize int32 `json:"storageSize,omitempty"`

	// volume directory
	VolumeDirectory string `json:"volumeDirectory,omitempty"`
}

// Validate validates this p v c
func (m *PVC) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pVCTypeAccessModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ReadWriteOnce","ReadOnlyMany","ReadWriteMany"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pVCTypeAccessModePropEnum = append(pVCTypeAccessModePropEnum, v)
	}
}

const (

	// PVCAccessModeReadWriteOnce captures enum value "ReadWriteOnce"
	PVCAccessModeReadWriteOnce string = "ReadWriteOnce"

	// PVCAccessModeReadOnlyMany captures enum value "ReadOnlyMany"
	PVCAccessModeReadOnlyMany string = "ReadOnlyMany"

	// PVCAccessModeReadWriteMany captures enum value "ReadWriteMany"
	PVCAccessModeReadWriteMany string = "ReadWriteMany"
)

// prop value enum
func (m *PVC) validateAccessModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pVCTypeAccessModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PVC) validateAccessMode(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccessModeEnum("accessMode", "body", m.AccessMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this p v c based on context it is used
func (m *PVC) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PVC) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PVC) UnmarshalBinary(b []byte) error {
	var res PVC
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
