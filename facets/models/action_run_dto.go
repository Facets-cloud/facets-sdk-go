// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActionRunDto Represents an action run instance with its execution details
//
// swagger:model ActionRunDto
type ActionRunDto struct {

	// Display name of the action being executed
	// Example: Build Application
	ActionDisplayName string `json:"actionDisplayName,omitempty"`

	// Name of the action being executed
	// Example: build-action
	// Required: true
	ActionName *string `json:"actionName"`

	// Cluster ID associated with this action
	// Example: prod-cluster-1
	ClusterID string `json:"clusterId,omitempty"`

	// Timestamp when the action run completed
	// Format: date-time
	CompletionTime strfmt.DateTime `json:"completionTime,omitempty"`

	// Indicates if this action run has an associated upload
	// Example: false
	HasUpload bool `json:"hasUpload,omitempty"`

	// Detailed message about the current status
	// Example: Task run exceeded timeout of 60 minutes
	Message string `json:"message,omitempty"`

	// Name of the action run
	// Example: build-action-run-xyz123
	// Required: true
	Name *string `json:"name"`

	// Parameters passed to this action run, keyed by parameter name
	Params map[string]ActionParameterValueDto `json:"params,omitempty"`

	// Reason for the current status
	// Example: TaskRunTimeout
	Reason string `json:"reason,omitempty"`

	// Resource name associated with this action
	// Example: web-app
	ResourceName string `json:"resourceName,omitempty"`

	// Resource type associated with this action
	// Example: deployment
	ResourceType string `json:"resourceType,omitempty"`

	// Timestamp when the action run started
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// Represents the possible statuses of an action run
	// Required: true
	// Enum: ["STARTED","PENDING","RUNNING","SUCCEEDED","FAILED","CANCELLED","CANCELLING","NON_PERMANENT_ERROR"]
	Status *string `json:"status"`

	// List of steps executed in this action run
	Steps []*ActionStepDto `json:"steps"`

	// User who triggered this action run
	// Example: user@example.com
	TriggeredBy string `json:"triggeredBy,omitempty"`
}

// Validate validates this action run dto
func (m *ActionRunDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSteps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActionRunDto) validateActionName(formats strfmt.Registry) error {

	if err := validate.Required("actionName", "body", m.ActionName); err != nil {
		return err
	}

	return nil
}

func (m *ActionRunDto) validateCompletionTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CompletionTime) { // not required
		return nil
	}

	if err := validate.FormatOf("completionTime", "body", "date-time", m.CompletionTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ActionRunDto) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ActionRunDto) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(m.Params) { // not required
		return nil
	}

	for k := range m.Params {

		if err := validate.Required("params"+"."+k, "body", m.Params[k]); err != nil {
			return err
		}
		if val, ok := m.Params[k]; ok {
			if err := val.Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("params" + "." + k)
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("params" + "." + k)
				}

				return err
			}
		}

	}

	return nil
}

func (m *ActionRunDto) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var actionRunDtoTypeStatusPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STARTED","PENDING","RUNNING","SUCCEEDED","FAILED","CANCELLED","CANCELLING","NON_PERMANENT_ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionRunDtoTypeStatusPropEnum = append(actionRunDtoTypeStatusPropEnum, v)
	}
}

const (

	// ActionRunDtoStatusSTARTED captures enum value "STARTED"
	ActionRunDtoStatusSTARTED string = "STARTED"

	// ActionRunDtoStatusPENDING captures enum value "PENDING"
	ActionRunDtoStatusPENDING string = "PENDING"

	// ActionRunDtoStatusRUNNING captures enum value "RUNNING"
	ActionRunDtoStatusRUNNING string = "RUNNING"

	// ActionRunDtoStatusSUCCEEDED captures enum value "SUCCEEDED"
	ActionRunDtoStatusSUCCEEDED string = "SUCCEEDED"

	// ActionRunDtoStatusFAILED captures enum value "FAILED"
	ActionRunDtoStatusFAILED string = "FAILED"

	// ActionRunDtoStatusCANCELLED captures enum value "CANCELLED"
	ActionRunDtoStatusCANCELLED string = "CANCELLED"

	// ActionRunDtoStatusCANCELLING captures enum value "CANCELLING"
	ActionRunDtoStatusCANCELLING string = "CANCELLING"

	// ActionRunDtoStatusNONPERMANENTERROR captures enum value "NON_PERMANENT_ERROR"
	ActionRunDtoStatusNONPERMANENTERROR string = "NON_PERMANENT_ERROR"
)

// prop value enum
func (m *ActionRunDto) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, actionRunDtoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActionRunDto) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ActionRunDto) validateSteps(formats strfmt.Registry) error {
	if swag.IsZero(m.Steps) { // not required
		return nil
	}

	for i := 0; i < len(m.Steps); i++ {
		if swag.IsZero(m.Steps[i]) { // not required
			continue
		}

		if m.Steps[i] != nil {
			if err := m.Steps[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("steps" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("steps" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this action run dto based on the context it is used
func (m *ActionRunDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSteps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActionRunDto) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Params {

		if val, ok := m.Params[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ActionRunDto) contextValidateSteps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Steps); i++ {

		if m.Steps[i] != nil {

			if swag.IsZero(m.Steps[i]) { // not required
				return nil
			}

			if err := m.Steps[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("steps" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("steps" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActionRunDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActionRunDto) UnmarshalBinary(b []byte) error {
	var res ActionRunDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
