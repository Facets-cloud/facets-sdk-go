// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotificationTagPayload notification tag payload
//
// swagger:model NotificationTagPayload
type NotificationTagPayload struct {

	// name
	Name string `json:"name,omitempty"`

	// notification tag
	// Enum: ["CLUSTER_NAME","CLUSTER_TYPE","QASUITE_RESULT","DR_ACTION","DR_STATUS","STACK_NAME","SEVERITY","ALERT_NAME","DEPLOYMENT_STATUS","APPLICATION_NAME","SEND_RESOLVED","RELEASE_TYPE"]
	NotificationTag string `json:"notificationTag,omitempty"`
}

// Validate validates this notification tag payload
func (m *NotificationTagPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotificationTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var notificationTagPayloadTypeNotificationTagPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLUSTER_NAME","CLUSTER_TYPE","QASUITE_RESULT","DR_ACTION","DR_STATUS","STACK_NAME","SEVERITY","ALERT_NAME","DEPLOYMENT_STATUS","APPLICATION_NAME","SEND_RESOLVED","RELEASE_TYPE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationTagPayloadTypeNotificationTagPropEnum = append(notificationTagPayloadTypeNotificationTagPropEnum, v)
	}
}

const (

	// NotificationTagPayloadNotificationTagCLUSTERNAME captures enum value "CLUSTER_NAME"
	NotificationTagPayloadNotificationTagCLUSTERNAME string = "CLUSTER_NAME"

	// NotificationTagPayloadNotificationTagCLUSTERTYPE captures enum value "CLUSTER_TYPE"
	NotificationTagPayloadNotificationTagCLUSTERTYPE string = "CLUSTER_TYPE"

	// NotificationTagPayloadNotificationTagQASUITERESULT captures enum value "QASUITE_RESULT"
	NotificationTagPayloadNotificationTagQASUITERESULT string = "QASUITE_RESULT"

	// NotificationTagPayloadNotificationTagDRACTION captures enum value "DR_ACTION"
	NotificationTagPayloadNotificationTagDRACTION string = "DR_ACTION"

	// NotificationTagPayloadNotificationTagDRSTATUS captures enum value "DR_STATUS"
	NotificationTagPayloadNotificationTagDRSTATUS string = "DR_STATUS"

	// NotificationTagPayloadNotificationTagSTACKNAME captures enum value "STACK_NAME"
	NotificationTagPayloadNotificationTagSTACKNAME string = "STACK_NAME"

	// NotificationTagPayloadNotificationTagSEVERITY captures enum value "SEVERITY"
	NotificationTagPayloadNotificationTagSEVERITY string = "SEVERITY"

	// NotificationTagPayloadNotificationTagALERTNAME captures enum value "ALERT_NAME"
	NotificationTagPayloadNotificationTagALERTNAME string = "ALERT_NAME"

	// NotificationTagPayloadNotificationTagDEPLOYMENTSTATUS captures enum value "DEPLOYMENT_STATUS"
	NotificationTagPayloadNotificationTagDEPLOYMENTSTATUS string = "DEPLOYMENT_STATUS"

	// NotificationTagPayloadNotificationTagAPPLICATIONNAME captures enum value "APPLICATION_NAME"
	NotificationTagPayloadNotificationTagAPPLICATIONNAME string = "APPLICATION_NAME"

	// NotificationTagPayloadNotificationTagSENDRESOLVED captures enum value "SEND_RESOLVED"
	NotificationTagPayloadNotificationTagSENDRESOLVED string = "SEND_RESOLVED"

	// NotificationTagPayloadNotificationTagRELEASETYPE captures enum value "RELEASE_TYPE"
	NotificationTagPayloadNotificationTagRELEASETYPE string = "RELEASE_TYPE"
)

// prop value enum
func (m *NotificationTagPayload) validateNotificationTagEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, notificationTagPayloadTypeNotificationTagPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NotificationTagPayload) validateNotificationTag(formats strfmt.Registry) error {
	if swag.IsZero(m.NotificationTag) { // not required
		return nil
	}

	// value enum
	if err := m.validateNotificationTagEnum("notificationTag", "body", m.NotificationTag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this notification tag payload based on context it is used
func (m *NotificationTagPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NotificationTagPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationTagPayload) UnmarshalBinary(b []byte) error {
	var res NotificationTagPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
