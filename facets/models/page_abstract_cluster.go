// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PageAbstractCluster page abstract cluster
//
// swagger:model PageAbstractCluster
type PageAbstractCluster struct {

	// content
	Content []*AbstractCluster `json:"content"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// first
	First bool `json:"first,omitempty"`

	// last
	Last bool `json:"last,omitempty"`

	// number
	Number int32 `json:"number,omitempty"`

	// number of elements
	NumberOfElements int32 `json:"numberOfElements,omitempty"`

	// pageable
	Pageable *PageableObject `json:"pageable,omitempty"`

	// size
	Size int32 `json:"size,omitempty"`

	// sort
	Sort *SortObject `json:"sort,omitempty"`

	// total elements
	TotalElements int64 `json:"totalElements,omitempty"`

	// total pages
	TotalPages int32 `json:"totalPages,omitempty"`
}

// Validate validates this page abstract cluster
func (m *PageAbstractCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PageAbstractCluster) validateContent(formats strfmt.Registry) error {
	if swag.IsZero(m.Content) { // not required
		return nil
	}

	for i := 0; i < len(m.Content); i++ {
		if swag.IsZero(m.Content[i]) { // not required
			continue
		}

		if m.Content[i] != nil {
			if err := m.Content[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("content" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("content" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *PageAbstractCluster) validatePageable(formats strfmt.Registry) error {
	if swag.IsZero(m.Pageable) { // not required
		return nil
	}

	if m.Pageable != nil {
		if err := m.Pageable.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("pageable")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("pageable")
			}

			return err
		}
	}

	return nil
}

func (m *PageAbstractCluster) validateSort(formats strfmt.Registry) error {
	if swag.IsZero(m.Sort) { // not required
		return nil
	}

	if m.Sort != nil {
		if err := m.Sort.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("sort")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("sort")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this page abstract cluster based on the context it is used
func (m *PageAbstractCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePageable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PageAbstractCluster) contextValidateContent(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Content); i++ {

		if m.Content[i] != nil {

			if swag.IsZero(m.Content[i]) { // not required
				return nil
			}

			if err := m.Content[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("content" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("content" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *PageAbstractCluster) contextValidatePageable(ctx context.Context, formats strfmt.Registry) error {

	if m.Pageable != nil {

		if swag.IsZero(m.Pageable) { // not required
			return nil
		}

		if err := m.Pageable.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("pageable")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("pageable")
			}

			return err
		}
	}

	return nil
}

func (m *PageAbstractCluster) contextValidateSort(ctx context.Context, formats strfmt.Registry) error {

	if m.Sort != nil {

		if swag.IsZero(m.Sort) { // not required
			return nil
		}

		if err := m.Sort.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("sort")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("sort")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PageAbstractCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PageAbstractCluster) UnmarshalBinary(b []byte) error {
	var res PageAbstractCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
