// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentOverview DeploymentOverview
//
// swagger:model DeploymentOverview
type DeploymentOverview struct {

	// cluster
	Cluster *AbstractCluster `json:"cluster,omitempty"`

	// cluster Id
	ClusterID string `json:"clusterId,omitempty"`

	// current signed off deployment
	CurrentSignedOffDeployment *DeploymentLog `json:"currentSignedOffDeployment,omitempty"`

	// deployments stats
	DeploymentsStats *DeploymentsStats `json:"deploymentsStats,omitempty"`

	// down stream cluster names
	DownStreamClusterNames []string `json:"downStreamClusterNames"`

	// execution time
	ExecutionTime map[string]ExecutionTime `json:"executionTime,omitempty"`

	// in progress deployments
	InProgressDeployments []*DeploymentLog `json:"inProgressDeployments"`

	// is scheduled releases paused
	IsScheduledReleasesPaused bool `json:"isScheduledReleasesPaused,omitempty"`

	// latest deployment
	LatestDeployment *DeploymentLog `json:"latestDeployment,omitempty"`

	// next execution time
	NextExecutionTime string `json:"nextExecutionTime,omitempty"`

	// queued releases
	QueuedReleases []*QueuedRelease `json:"queuedReleases"`

	// stack
	Stack *Stack `json:"stack,omitempty"`

	// time to next execution
	TimeToNextExecution string `json:"timeToNextExecution,omitempty"`
}

// Validate validates this deployment overview
func (m *DeploymentOverview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentSignedOffDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentsStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInProgressDeployments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueuedReleases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStack(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentOverview) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentOverview) validateCurrentSignedOffDeployment(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentSignedOffDeployment) { // not required
		return nil
	}

	if m.CurrentSignedOffDeployment != nil {
		if err := m.CurrentSignedOffDeployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentSignedOffDeployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentSignedOffDeployment")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentOverview) validateDeploymentsStats(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentsStats) { // not required
		return nil
	}

	if m.DeploymentsStats != nil {
		if err := m.DeploymentsStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploymentsStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deploymentsStats")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentOverview) validateExecutionTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutionTime) { // not required
		return nil
	}

	for k := range m.ExecutionTime {

		if err := validate.Required("executionTime"+"."+k, "body", m.ExecutionTime[k]); err != nil {
			return err
		}
		if val, ok := m.ExecutionTime[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("executionTime" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("executionTime" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentOverview) validateInProgressDeployments(formats strfmt.Registry) error {
	if swag.IsZero(m.InProgressDeployments) { // not required
		return nil
	}

	for i := 0; i < len(m.InProgressDeployments); i++ {
		if swag.IsZero(m.InProgressDeployments[i]) { // not required
			continue
		}

		if m.InProgressDeployments[i] != nil {
			if err := m.InProgressDeployments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inProgressDeployments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inProgressDeployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentOverview) validateLatestDeployment(formats strfmt.Registry) error {
	if swag.IsZero(m.LatestDeployment) { // not required
		return nil
	}

	if m.LatestDeployment != nil {
		if err := m.LatestDeployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latestDeployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latestDeployment")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentOverview) validateQueuedReleases(formats strfmt.Registry) error {
	if swag.IsZero(m.QueuedReleases) { // not required
		return nil
	}

	for i := 0; i < len(m.QueuedReleases); i++ {
		if swag.IsZero(m.QueuedReleases[i]) { // not required
			continue
		}

		if m.QueuedReleases[i] != nil {
			if err := m.QueuedReleases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queuedReleases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("queuedReleases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentOverview) validateStack(formats strfmt.Registry) error {
	if swag.IsZero(m.Stack) { // not required
		return nil
	}

	if m.Stack != nil {
		if err := m.Stack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stack")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deployment overview based on the context it is used
func (m *DeploymentOverview) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrentSignedOffDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeploymentsStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutionTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInProgressDeployments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatestDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueuedReleases(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStack(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentOverview) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {

		if swag.IsZero(m.Cluster) { // not required
			return nil
		}

		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentOverview) contextValidateCurrentSignedOffDeployment(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentSignedOffDeployment != nil {

		if swag.IsZero(m.CurrentSignedOffDeployment) { // not required
			return nil
		}

		if err := m.CurrentSignedOffDeployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentSignedOffDeployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentSignedOffDeployment")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentOverview) contextValidateDeploymentsStats(ctx context.Context, formats strfmt.Registry) error {

	if m.DeploymentsStats != nil {

		if swag.IsZero(m.DeploymentsStats) { // not required
			return nil
		}

		if err := m.DeploymentsStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploymentsStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deploymentsStats")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentOverview) contextValidateExecutionTime(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.ExecutionTime {

		if val, ok := m.ExecutionTime[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentOverview) contextValidateInProgressDeployments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InProgressDeployments); i++ {

		if m.InProgressDeployments[i] != nil {

			if swag.IsZero(m.InProgressDeployments[i]) { // not required
				return nil
			}

			if err := m.InProgressDeployments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inProgressDeployments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inProgressDeployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentOverview) contextValidateLatestDeployment(ctx context.Context, formats strfmt.Registry) error {

	if m.LatestDeployment != nil {

		if swag.IsZero(m.LatestDeployment) { // not required
			return nil
		}

		if err := m.LatestDeployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latestDeployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latestDeployment")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentOverview) contextValidateQueuedReleases(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.QueuedReleases); i++ {

		if m.QueuedReleases[i] != nil {

			if swag.IsZero(m.QueuedReleases[i]) { // not required
				return nil
			}

			if err := m.QueuedReleases[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queuedReleases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("queuedReleases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentOverview) contextValidateStack(ctx context.Context, formats strfmt.Registry) error {

	if m.Stack != nil {

		if swag.IsZero(m.Stack) { // not required
			return nil
		}

		if err := m.Stack.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stack")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentOverview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentOverview) UnmarshalBinary(b []byte) error {
	var res DeploymentOverview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
