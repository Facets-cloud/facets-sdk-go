// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChatContext chat context
//
// swagger:model ChatContext
type ChatContext struct {

	// content
	Content string `json:"content,omitempty"`

	// role
	// Enum: ["system","user","assistant"]
	Role string `json:"role,omitempty"`
}

// Validate validates this chat context
func (m *ChatContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var chatContextTypeRolePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["system","user","assistant"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chatContextTypeRolePropEnum = append(chatContextTypeRolePropEnum, v)
	}
}

const (

	// ChatContextRoleSystem captures enum value "system"
	ChatContextRoleSystem string = "system"

	// ChatContextRoleUser captures enum value "user"
	ChatContextRoleUser string = "user"

	// ChatContextRoleAssistant captures enum value "assistant"
	ChatContextRoleAssistant string = "assistant"
)

// prop value enum
func (m *ChatContext) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, chatContextTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ChatContext) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this chat context based on context it is used
func (m *ChatContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChatContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChatContext) UnmarshalBinary(b []byte) error {
	var res ChatContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
