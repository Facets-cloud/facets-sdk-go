// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateProjectRequest create project request
//
// swagger:model CreateProjectRequest
type CreateProjectRequest struct {

	// allowed clouds
	// Unique: true
	AllowedClouds []string `json:"allowedClouds"`

	// bitbucket project key
	BitbucketProjectKey string `json:"bitbucketProjectKey,omitempty"`

	// blueprint name
	BlueprintName string `json:"blueprintName,omitempty"`

	// cloud
	// Enum: ["AWS","AZURE","LOCAL","GCP","KUBERNETES","NO_CLOUD"]
	Cloud string `json:"cloud,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// draft clusters
	DraftClusters []*DraftClusterRequest `json:"draftClusters"`

	// git ops request
	GitOpsRequest *EnableGitOpsRequest `json:"gitOpsRequest,omitempty"`

	// org name
	OrgName string `json:"orgName,omitempty"`

	// project type Id
	ProjectTypeID string `json:"projectTypeId,omitempty"`

	// template Id
	TemplateID string `json:"templateId,omitempty"`

	// vcs account Id
	VcsAccountID string `json:"vcsAccountId,omitempty"`
}

// Validate validates this create project request
func (m *CreateProjectRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedClouds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDraftClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGitOpsRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createProjectRequestAllowedCloudsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","AZURE","LOCAL","GCP","KUBERNETES","NO_CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createProjectRequestAllowedCloudsItemsEnum = append(createProjectRequestAllowedCloudsItemsEnum, v)
	}
}

func (m *CreateProjectRequest) validateAllowedCloudsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createProjectRequestAllowedCloudsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateProjectRequest) validateAllowedClouds(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowedClouds) { // not required
		return nil
	}

	if err := validate.UniqueItems("allowedClouds", "body", m.AllowedClouds); err != nil {
		return err
	}

	for i := 0; i < len(m.AllowedClouds); i++ {

		// value enum
		if err := m.validateAllowedCloudsItemsEnum("allowedClouds"+"."+strconv.Itoa(i), "body", m.AllowedClouds[i]); err != nil {
			return err
		}

	}

	return nil
}

var createProjectRequestTypeCloudPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","AZURE","LOCAL","GCP","KUBERNETES","NO_CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createProjectRequestTypeCloudPropEnum = append(createProjectRequestTypeCloudPropEnum, v)
	}
}

const (

	// CreateProjectRequestCloudAWS captures enum value "AWS"
	CreateProjectRequestCloudAWS string = "AWS"

	// CreateProjectRequestCloudAZURE captures enum value "AZURE"
	CreateProjectRequestCloudAZURE string = "AZURE"

	// CreateProjectRequestCloudLOCAL captures enum value "LOCAL"
	CreateProjectRequestCloudLOCAL string = "LOCAL"

	// CreateProjectRequestCloudGCP captures enum value "GCP"
	CreateProjectRequestCloudGCP string = "GCP"

	// CreateProjectRequestCloudKUBERNETES captures enum value "KUBERNETES"
	CreateProjectRequestCloudKUBERNETES string = "KUBERNETES"

	// CreateProjectRequestCloudNOCLOUD captures enum value "NO_CLOUD"
	CreateProjectRequestCloudNOCLOUD string = "NO_CLOUD"
)

// prop value enum
func (m *CreateProjectRequest) validateCloudEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createProjectRequestTypeCloudPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateProjectRequest) validateCloud(formats strfmt.Registry) error {
	if swag.IsZero(m.Cloud) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloudEnum("cloud", "body", m.Cloud); err != nil {
		return err
	}

	return nil
}

func (m *CreateProjectRequest) validateDraftClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.DraftClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.DraftClusters); i++ {
		if swag.IsZero(m.DraftClusters[i]) { // not required
			continue
		}

		if m.DraftClusters[i] != nil {
			if err := m.DraftClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("draftClusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("draftClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateProjectRequest) validateGitOpsRequest(formats strfmt.Registry) error {
	if swag.IsZero(m.GitOpsRequest) { // not required
		return nil
	}

	if m.GitOpsRequest != nil {
		if err := m.GitOpsRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gitOpsRequest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gitOpsRequest")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create project request based on the context it is used
func (m *CreateProjectRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDraftClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGitOpsRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateProjectRequest) contextValidateDraftClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DraftClusters); i++ {

		if m.DraftClusters[i] != nil {

			if swag.IsZero(m.DraftClusters[i]) { // not required
				return nil
			}

			if err := m.DraftClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("draftClusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("draftClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateProjectRequest) contextValidateGitOpsRequest(ctx context.Context, formats strfmt.Registry) error {

	if m.GitOpsRequest != nil {

		if swag.IsZero(m.GitOpsRequest) { // not required
			return nil
		}

		if err := m.GitOpsRequest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gitOpsRequest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gitOpsRequest")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateProjectRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateProjectRequest) UnmarshalBinary(b []byte) error {
	var res CreateProjectRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
