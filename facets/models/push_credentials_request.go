// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PushCredentialsRequest Request details for generating push credentials for an artifact.
//
// swagger:model PushCredentialsRequest
type PushCredentialsRequest struct {

	// Application name associated with the request.
	// Example: my-app
	// Required: true
	ApplicationName *string `json:"applicationName"`

	// Name of the artifactory.
	// Example: DOCKER
	// Required: true
	Artifactory *string `json:"artifactory"`

	// Blueprint name for which credentials are requested.
	// Example: blueprint-1
	// Required: true
	BlueprintName *string `json:"blueprintName"`
}

// Validate validates this push credentials request
func (m *PushCredentialsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlueprintName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PushCredentialsRequest) validateApplicationName(formats strfmt.Registry) error {

	if err := validate.Required("applicationName", "body", m.ApplicationName); err != nil {
		return err
	}

	return nil
}

func (m *PushCredentialsRequest) validateArtifactory(formats strfmt.Registry) error {

	if err := validate.Required("artifactory", "body", m.Artifactory); err != nil {
		return err
	}

	return nil
}

func (m *PushCredentialsRequest) validateBlueprintName(formats strfmt.Registry) error {

	if err := validate.Required("blueprintName", "body", m.BlueprintName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this push credentials request based on context it is used
func (m *PushCredentialsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PushCredentialsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PushCredentialsRequest) UnmarshalBinary(b []byte) error {
	var res PushCredentialsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
