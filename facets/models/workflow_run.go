// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowRun workflow run
//
// swagger:model WorkflowRun
type WorkflowRun struct {

	// actor
	Actor *GithubUser `json:"actor,omitempty"`

	// conclusion
	Conclusion string `json:"conclusion,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// display title
	DisplayTitle string `json:"displayTitle,omitempty"`

	// head branch
	HeadBranch string `json:"headBranch,omitempty"`

	// head commit
	HeadCommit *Commit `json:"headCommit,omitempty"`

	// html Url
	HTMLURL string `json:"htmlUrl,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// run number
	RunNumber int64 `json:"runNumber,omitempty"`

	// run started at
	// Format: date-time
	RunStartedAt strfmt.DateTime `json:"runStartedAt,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// triggering actor
	TriggeringActor *GithubUser `json:"triggeringActor,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// workflow Id
	WorkflowID int64 `json:"workflowId,omitempty"`
}

// Validate validates this workflow run
func (m *WorkflowRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeadCommit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggeringActor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowRun) validateActor(formats strfmt.Registry) error {
	if swag.IsZero(m.Actor) { // not required
		return nil
	}

	if m.Actor != nil {
		if err := m.Actor.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("actor")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("actor")
			}

			return err
		}
	}

	return nil
}

func (m *WorkflowRun) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowRun) validateHeadCommit(formats strfmt.Registry) error {
	if swag.IsZero(m.HeadCommit) { // not required
		return nil
	}

	if m.HeadCommit != nil {
		if err := m.HeadCommit.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("headCommit")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("headCommit")
			}

			return err
		}
	}

	return nil
}

func (m *WorkflowRun) validateRunStartedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.RunStartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("runStartedAt", "body", "date-time", m.RunStartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowRun) validateTriggeringActor(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggeringActor) { // not required
		return nil
	}

	if m.TriggeringActor != nil {
		if err := m.TriggeringActor.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("triggeringActor")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("triggeringActor")
			}

			return err
		}
	}

	return nil
}

func (m *WorkflowRun) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this workflow run based on the context it is used
func (m *WorkflowRun) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeadCommit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggeringActor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowRun) contextValidateActor(ctx context.Context, formats strfmt.Registry) error {

	if m.Actor != nil {

		if swag.IsZero(m.Actor) { // not required
			return nil
		}

		if err := m.Actor.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("actor")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("actor")
			}

			return err
		}
	}

	return nil
}

func (m *WorkflowRun) contextValidateHeadCommit(ctx context.Context, formats strfmt.Registry) error {

	if m.HeadCommit != nil {

		if swag.IsZero(m.HeadCommit) { // not required
			return nil
		}

		if err := m.HeadCommit.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("headCommit")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("headCommit")
			}

			return err
		}
	}

	return nil
}

func (m *WorkflowRun) contextValidateTriggeringActor(ctx context.Context, formats strfmt.Registry) error {

	if m.TriggeringActor != nil {

		if swag.IsZero(m.TriggeringActor) { // not required
			return nil
		}

		if err := m.TriggeringActor.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("triggeringActor")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("triggeringActor")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowRun) UnmarshalBinary(b []byte) error {
	var res WorkflowRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
