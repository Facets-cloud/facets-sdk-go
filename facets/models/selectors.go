// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Selectors Selectors
//
// swagger:model Selectors
type Selectors struct {

	// display type
	// Enum: ["INLINE","TAB","PAGE"]
	DisplayType string `json:"displayType,omitempty"`

	// resource name
	ResourceName string `json:"resourceName,omitempty"`

	// resource type
	ResourceType string `json:"resourceType,omitempty"`

	// sub type
	SubType string `json:"subType,omitempty"`
}

// Validate validates this selectors
func (m *Selectors) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var selectorsTypeDisplayTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INLINE","TAB","PAGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		selectorsTypeDisplayTypePropEnum = append(selectorsTypeDisplayTypePropEnum, v)
	}
}

const (

	// SelectorsDisplayTypeINLINE captures enum value "INLINE"
	SelectorsDisplayTypeINLINE string = "INLINE"

	// SelectorsDisplayTypeTAB captures enum value "TAB"
	SelectorsDisplayTypeTAB string = "TAB"

	// SelectorsDisplayTypePAGE captures enum value "PAGE"
	SelectorsDisplayTypePAGE string = "PAGE"
)

// prop value enum
func (m *Selectors) validateDisplayTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, selectorsTypeDisplayTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Selectors) validateDisplayType(formats strfmt.Registry) error {
	if swag.IsZero(m.DisplayType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDisplayTypeEnum("displayType", "body", m.DisplayType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this selectors based on context it is used
func (m *Selectors) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Selectors) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Selectors) UnmarshalBinary(b []byte) error {
	var res Selectors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
