// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Stack stack
//
// swagger:model Stack
type Stack struct {

	// account Id
	AccountID string `json:"accountId,omitempty"`

	// allowed clouds
	// Unique: true
	AllowedClouds []string `json:"allowedClouds"`

	// alpha blueprint
	AlphaBlueprint bool `json:"alphaBlueprint,omitempty"`

	// app password
	AppPassword string `json:"appPassword,omitempty"`

	// artifactories
	Artifactories []string `json:"artifactories"`

	// auto enabled sub stacks
	AutoEnabledSubStacks []string `json:"autoEnabledSubStacks"`

	// branch
	Branch string `json:"branch,omitempty"`

	// change log
	ChangeLog string `json:"changeLog,omitempty"`

	// child stacks
	ChildStacks []string `json:"childStacks"`

	// cluster variables meta
	ClusterVariablesMeta map[string]VariableDetails `json:"clusterVariablesMeta,omitempty"`

	// coder account Id
	CoderAccountID string `json:"coderAccountId,omitempty"`

	// component versions
	ComponentVersions map[string]string `json:"componentVersions,omitempty"`

	// config modules disabled
	ConfigModulesDisabled bool `json:"configModulesDisabled,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// entity type
	// Enum: ["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]
	EntityType string `json:"entityType,omitempty"`

	// git ops enabled
	GitOpsEnabled bool `json:"gitOpsEnabled,omitempty"`

	// git overrides enabled
	GitOverridesEnabled bool `json:"gitOverridesEnabled,omitempty"`

	// github organization name
	GithubOrganizationName string `json:"githubOrganizationName,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// imported project
	ImportedProject bool `json:"importedProject,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// mono repo
	MonoRepo bool `json:"monoRepo,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// number of versions
	NumberOfVersions int32 `json:"numberOfVersions,omitempty"`

	// override config
	OverrideConfig *OverrideConfig `json:"overrideConfig,omitempty"`

	// pause releases
	PauseReleases bool `json:"pauseReleases,omitempty"`

	// Alternatively called isTestProject
	PreviewModulesAllowed bool `json:"previewModulesAllowed,omitempty"`

	// primary cloud
	// Enum: ["AWS","AZURE","LOCAL","GCP","KUBERNETES"]
	PrimaryCloud string `json:"primaryCloud,omitempty"`

	// project type Id
	ProjectTypeID string `json:"projectTypeId,omitempty"`

	// project type name
	ProjectTypeName string `json:"projectTypeName,omitempty"`

	// provided resources
	// Unique: true
	ProvidedResources []*FacetsResource `json:"providedResources"`

	// relative path
	RelativePath string `json:"relativePath,omitempty"`

	// stack vars
	StackVars map[string]string `json:"stackVars,omitempty"`

	// starter project
	StarterProject bool `json:"starterProject,omitempty"`

	// template
	Template bool `json:"template,omitempty"`

	// template Id
	TemplateID string `json:"templateId,omitempty"`

	// template name
	TemplateName string `json:"templateName,omitempty"`

	// user
	User string `json:"user,omitempty"`

	// vcs
	// Enum: ["GITHUB","BITBUCKET","GITLAB"]
	Vcs string `json:"vcs,omitempty"`

	// vcs Url
	VcsURL string `json:"vcsUrl,omitempty"`

	// version control account Id
	VersionControlAccountID string `json:"versionControlAccountId,omitempty"`

	// versioning key
	VersioningKey string `json:"versioningKey,omitempty"`
}

// Validate validates this stack
func (m *Stack) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedClouds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterVariablesMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrideConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryCloud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvidedResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var stackAllowedCloudsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","AZURE","LOCAL","GCP","KUBERNETES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stackAllowedCloudsItemsEnum = append(stackAllowedCloudsItemsEnum, v)
	}
}

func (m *Stack) validateAllowedCloudsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stackAllowedCloudsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Stack) validateAllowedClouds(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowedClouds) { // not required
		return nil
	}

	if err := validate.UniqueItems("allowedClouds", "body", m.AllowedClouds); err != nil {
		return err
	}

	for i := 0; i < len(m.AllowedClouds); i++ {

		// value enum
		if err := m.validateAllowedCloudsItemsEnum("allowedClouds"+"."+strconv.Itoa(i), "body", m.AllowedClouds[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *Stack) validateClusterVariablesMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterVariablesMeta) { // not required
		return nil
	}

	for k := range m.ClusterVariablesMeta {

		if err := validate.Required("clusterVariablesMeta"+"."+k, "body", m.ClusterVariablesMeta[k]); err != nil {
			return err
		}
		if val, ok := m.ClusterVariablesMeta[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterVariablesMeta" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterVariablesMeta" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

var stackTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stackTypeEntityTypePropEnum = append(stackTypeEntityTypePropEnum, v)
	}
}

const (

	// StackEntityTypeCLUSTER captures enum value "CLUSTER"
	StackEntityTypeCLUSTER string = "CLUSTER"

	// StackEntityTypeBLUEPRINT captures enum value "BLUE_PRINT"
	StackEntityTypeBLUEPRINT string = "BLUE_PRINT"

	// StackEntityTypeTEMPLATEINPUT captures enum value "TEMPLATE_INPUT"
	StackEntityTypeTEMPLATEINPUT string = "TEMPLATE_INPUT"

	// StackEntityTypeCONTROLPLANE captures enum value "CONTROL_PLANE"
	StackEntityTypeCONTROLPLANE string = "CONTROL_PLANE"

	// StackEntityTypeIAC captures enum value "IAC"
	StackEntityTypeIAC string = "IAC"

	// StackEntityTypeARTIFACTCI captures enum value "ARTIFACT_CI"
	StackEntityTypeARTIFACTCI string = "ARTIFACT_CI"

	// StackEntityTypeUSERGROUP captures enum value "USER_GROUP"
	StackEntityTypeUSERGROUP string = "USER_GROUP"

	// StackEntityTypeACCOUNT captures enum value "ACCOUNT"
	StackEntityTypeACCOUNT string = "ACCOUNT"

	// StackEntityTypeARTIFACTORY captures enum value "ARTIFACTORY"
	StackEntityTypeARTIFACTORY string = "ARTIFACTORY"
)

// prop value enum
func (m *Stack) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stackTypeEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Stack) validateEntityType(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("entityType", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *Stack) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Stack) validateOverrideConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.OverrideConfig) { // not required
		return nil
	}

	if m.OverrideConfig != nil {
		if err := m.OverrideConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overrideConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("overrideConfig")
			}
			return err
		}
	}

	return nil
}

var stackTypePrimaryCloudPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","AZURE","LOCAL","GCP","KUBERNETES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stackTypePrimaryCloudPropEnum = append(stackTypePrimaryCloudPropEnum, v)
	}
}

const (

	// StackPrimaryCloudAWS captures enum value "AWS"
	StackPrimaryCloudAWS string = "AWS"

	// StackPrimaryCloudAZURE captures enum value "AZURE"
	StackPrimaryCloudAZURE string = "AZURE"

	// StackPrimaryCloudLOCAL captures enum value "LOCAL"
	StackPrimaryCloudLOCAL string = "LOCAL"

	// StackPrimaryCloudGCP captures enum value "GCP"
	StackPrimaryCloudGCP string = "GCP"

	// StackPrimaryCloudKUBERNETES captures enum value "KUBERNETES"
	StackPrimaryCloudKUBERNETES string = "KUBERNETES"
)

// prop value enum
func (m *Stack) validatePrimaryCloudEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stackTypePrimaryCloudPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Stack) validatePrimaryCloud(formats strfmt.Registry) error {
	if swag.IsZero(m.PrimaryCloud) { // not required
		return nil
	}

	// value enum
	if err := m.validatePrimaryCloudEnum("primaryCloud", "body", m.PrimaryCloud); err != nil {
		return err
	}

	return nil
}

func (m *Stack) validateProvidedResources(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvidedResources) { // not required
		return nil
	}

	if err := validate.UniqueItems("providedResources", "body", m.ProvidedResources); err != nil {
		return err
	}

	for i := 0; i < len(m.ProvidedResources); i++ {
		if swag.IsZero(m.ProvidedResources[i]) { // not required
			continue
		}

		if m.ProvidedResources[i] != nil {
			if err := m.ProvidedResources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("providedResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("providedResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var stackTypeVcsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GITHUB","BITBUCKET","GITLAB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stackTypeVcsPropEnum = append(stackTypeVcsPropEnum, v)
	}
}

const (

	// StackVcsGITHUB captures enum value "GITHUB"
	StackVcsGITHUB string = "GITHUB"

	// StackVcsBITBUCKET captures enum value "BITBUCKET"
	StackVcsBITBUCKET string = "BITBUCKET"

	// StackVcsGITLAB captures enum value "GITLAB"
	StackVcsGITLAB string = "GITLAB"
)

// prop value enum
func (m *Stack) validateVcsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stackTypeVcsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Stack) validateVcs(formats strfmt.Registry) error {
	if swag.IsZero(m.Vcs) { // not required
		return nil
	}

	// value enum
	if err := m.validateVcsEnum("vcs", "body", m.Vcs); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this stack based on the context it is used
func (m *Stack) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterVariablesMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverrideConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvidedResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stack) contextValidateClusterVariablesMeta(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.ClusterVariablesMeta {

		if val, ok := m.ClusterVariablesMeta[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Stack) contextValidateOverrideConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.OverrideConfig != nil {

		if swag.IsZero(m.OverrideConfig) { // not required
			return nil
		}

		if err := m.OverrideConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overrideConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("overrideConfig")
			}
			return err
		}
	}

	return nil
}

func (m *Stack) contextValidateProvidedResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProvidedResources); i++ {

		if m.ProvidedResources[i] != nil {

			if swag.IsZero(m.ProvidedResources[i]) { // not required
				return nil
			}

			if err := m.ProvidedResources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("providedResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("providedResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Stack) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stack) UnmarshalBinary(b []byte) error {
	var res Stack
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
