// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HorizontalPodAutoscalerSpec horizontal pod autoscaler spec
//
// swagger:model HorizontalPodAutoscalerSpec
type HorizontalPodAutoscalerSpec struct {

	// behavior
	Behavior *HorizontalPodAutoscalerBehavior `json:"behavior,omitempty"`

	// max replicas
	MaxReplicas int32 `json:"maxReplicas,omitempty"`

	// metrics
	Metrics []*MetricSpec `json:"metrics"`

	// min replicas
	MinReplicas int32 `json:"minReplicas,omitempty"`

	// scale target ref
	ScaleTargetRef *CrossVersionObjectReference `json:"scaleTargetRef,omitempty"`
}

// Validate validates this horizontal pod autoscaler spec
func (m *HorizontalPodAutoscalerSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBehavior(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScaleTargetRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HorizontalPodAutoscalerSpec) validateBehavior(formats strfmt.Registry) error {
	if swag.IsZero(m.Behavior) { // not required
		return nil
	}

	if m.Behavior != nil {
		if err := m.Behavior.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("behavior")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("behavior")
			}
			return err
		}
	}

	return nil
}

func (m *HorizontalPodAutoscalerSpec) validateMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	for i := 0; i < len(m.Metrics); i++ {
		if swag.IsZero(m.Metrics[i]) { // not required
			continue
		}

		if m.Metrics[i] != nil {
			if err := m.Metrics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metrics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HorizontalPodAutoscalerSpec) validateScaleTargetRef(formats strfmt.Registry) error {
	if swag.IsZero(m.ScaleTargetRef) { // not required
		return nil
	}

	if m.ScaleTargetRef != nil {
		if err := m.ScaleTargetRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaleTargetRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scaleTargetRef")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this horizontal pod autoscaler spec based on the context it is used
func (m *HorizontalPodAutoscalerSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBehavior(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScaleTargetRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HorizontalPodAutoscalerSpec) contextValidateBehavior(ctx context.Context, formats strfmt.Registry) error {

	if m.Behavior != nil {

		if swag.IsZero(m.Behavior) { // not required
			return nil
		}

		if err := m.Behavior.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("behavior")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("behavior")
			}
			return err
		}
	}

	return nil
}

func (m *HorizontalPodAutoscalerSpec) contextValidateMetrics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Metrics); i++ {

		if m.Metrics[i] != nil {

			if swag.IsZero(m.Metrics[i]) { // not required
				return nil
			}

			if err := m.Metrics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metrics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HorizontalPodAutoscalerSpec) contextValidateScaleTargetRef(ctx context.Context, formats strfmt.Registry) error {

	if m.ScaleTargetRef != nil {

		if swag.IsZero(m.ScaleTargetRef) { // not required
			return nil
		}

		if err := m.ScaleTargetRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaleTargetRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scaleTargetRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HorizontalPodAutoscalerSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HorizontalPodAutoscalerSpec) UnmarshalBinary(b []byte) error {
	var res HorizontalPodAutoscalerSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
