// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Change change
//
// swagger:model Change
type Change struct {

	// change type
	// Enum: ["ADDED","MODIFIED","REMOVED"]
	ChangeType string `json:"changeType,omitempty"`

	// changed attribute
	ChangedAttribute *ChangedAttribute `json:"changedAttribute,omitempty"`
}

// Validate validates this change
func (m *Change) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChangeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangedAttribute(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var changeTypeChangeTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ADDED","MODIFIED","REMOVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		changeTypeChangeTypePropEnum = append(changeTypeChangeTypePropEnum, v)
	}
}

const (

	// ChangeChangeTypeADDED captures enum value "ADDED"
	ChangeChangeTypeADDED string = "ADDED"

	// ChangeChangeTypeMODIFIED captures enum value "MODIFIED"
	ChangeChangeTypeMODIFIED string = "MODIFIED"

	// ChangeChangeTypeREMOVED captures enum value "REMOVED"
	ChangeChangeTypeREMOVED string = "REMOVED"
)

// prop value enum
func (m *Change) validateChangeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, changeTypeChangeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Change) validateChangeType(formats strfmt.Registry) error {
	if swag.IsZero(m.ChangeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateChangeTypeEnum("changeType", "body", m.ChangeType); err != nil {
		return err
	}

	return nil
}

func (m *Change) validateChangedAttribute(formats strfmt.Registry) error {
	if swag.IsZero(m.ChangedAttribute) { // not required
		return nil
	}

	if m.ChangedAttribute != nil {
		if err := m.ChangedAttribute.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("changedAttribute")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("changedAttribute")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this change based on the context it is used
func (m *Change) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChangedAttribute(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Change) contextValidateChangedAttribute(ctx context.Context, formats strfmt.Registry) error {

	if m.ChangedAttribute != nil {

		if swag.IsZero(m.ChangedAttribute) { // not required
			return nil
		}

		if err := m.ChangedAttribute.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("changedAttribute")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("changedAttribute")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Change) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Change) UnmarshalBinary(b []byte) error {
	var res Change
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
