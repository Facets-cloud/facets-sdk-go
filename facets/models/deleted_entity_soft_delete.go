// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeletedEntitySoftDelete deleted entity soft delete
//
// swagger:model DeletedEntitySoftDelete
type DeletedEntitySoftDelete struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// entity
	Entity *SoftDelete `json:"entity,omitempty"`

	// entity type
	// Enum: ["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]
	EntityType string `json:"entityType,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`
}

// Validate validates this deleted entity soft delete
func (m *DeletedEntitySoftDelete) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeletedEntitySoftDelete) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeletedEntitySoftDelete) validateEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	if m.Entity != nil {
		if err := m.Entity.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("entity")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("entity")
			}

			return err
		}
	}

	return nil
}

var deletedEntitySoftDeleteTypeEntityTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deletedEntitySoftDeleteTypeEntityTypePropEnum = append(deletedEntitySoftDeleteTypeEntityTypePropEnum, v)
	}
}

const (

	// DeletedEntitySoftDeleteEntityTypeCLUSTER captures enum value "CLUSTER"
	DeletedEntitySoftDeleteEntityTypeCLUSTER string = "CLUSTER"

	// DeletedEntitySoftDeleteEntityTypeBLUEPRINT captures enum value "BLUE_PRINT"
	DeletedEntitySoftDeleteEntityTypeBLUEPRINT string = "BLUE_PRINT"

	// DeletedEntitySoftDeleteEntityTypeTEMPLATEINPUT captures enum value "TEMPLATE_INPUT"
	DeletedEntitySoftDeleteEntityTypeTEMPLATEINPUT string = "TEMPLATE_INPUT"

	// DeletedEntitySoftDeleteEntityTypeCONTROLPLANE captures enum value "CONTROL_PLANE"
	DeletedEntitySoftDeleteEntityTypeCONTROLPLANE string = "CONTROL_PLANE"

	// DeletedEntitySoftDeleteEntityTypeIAC captures enum value "IAC"
	DeletedEntitySoftDeleteEntityTypeIAC string = "IAC"

	// DeletedEntitySoftDeleteEntityTypeARTIFACTCI captures enum value "ARTIFACT_CI"
	DeletedEntitySoftDeleteEntityTypeARTIFACTCI string = "ARTIFACT_CI"

	// DeletedEntitySoftDeleteEntityTypeUSERGROUP captures enum value "USER_GROUP"
	DeletedEntitySoftDeleteEntityTypeUSERGROUP string = "USER_GROUP"

	// DeletedEntitySoftDeleteEntityTypeACCOUNT captures enum value "ACCOUNT"
	DeletedEntitySoftDeleteEntityTypeACCOUNT string = "ACCOUNT"

	// DeletedEntitySoftDeleteEntityTypeARTIFACTORY captures enum value "ARTIFACTORY"
	DeletedEntitySoftDeleteEntityTypeARTIFACTORY string = "ARTIFACTORY"
)

// prop value enum
func (m *DeletedEntitySoftDelete) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deletedEntitySoftDeleteTypeEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeletedEntitySoftDelete) validateEntityType(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("entityType", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *DeletedEntitySoftDelete) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this deleted entity soft delete based on the context it is used
func (m *DeletedEntitySoftDelete) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeletedEntitySoftDelete) contextValidateEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.Entity != nil {

		if swag.IsZero(m.Entity) { // not required
			return nil
		}

		if err := m.Entity.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("entity")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("entity")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeletedEntitySoftDelete) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeletedEntitySoftDelete) UnmarshalBinary(b []byte) error {
	var res DeletedEntitySoftDelete
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
