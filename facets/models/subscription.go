// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subscription subscription
//
// swagger:model Subscription
type Subscription struct {

	// channel address
	ChannelAddress string `json:"channelAddress,omitempty"`

	// channel Id
	// Required: true
	ChannelID *string `json:"channelId"`

	// channel type
	// Enum: ["SLACK","CAPILLARY_VALIDATOR","WEBHOOK","PAGER_DUTY","ZEN_DUTY","EMAIL","MS_TEAMS","MS_TEAMS_WORKFLOW"]
	ChannelType string `json:"channelType,omitempty"`

	// filters
	Filters map[string][]string `json:"filters,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// notification subject
	NotificationSubject string `json:"notificationSubject,omitempty"`

	// notification type
	// Enum: ["DEPLOYMENT_STATUS_UPDATE","APP_DEPLOYMENT","QASUITE_SANITY","DR_RESULT","STACK_SIGNOFF","ALERT","TEST","APPLICATION_DEPLOYMENT_COMPLETE","ENVIRONMENT_CREATE","ENVIRONMENT_DELETE","ENVIRONMENT_LAUNCH","ENVIRONMENT_DESTROY","ENVIRONMENT_CONFIGURE"]
	NotificationType string `json:"notificationType,omitempty"`

	// payload Json
	PayloadJSON string `json:"payloadJson,omitempty"`

	// stack name
	StackName string `json:"stackName,omitempty"`

	// test
	Test bool `json:"test,omitempty"`
}

// Validate validates this subscription
func (m *Subscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscription) validateChannelID(formats strfmt.Registry) error {

	if err := validate.Required("channelId", "body", m.ChannelID); err != nil {
		return err
	}

	return nil
}

var subscriptionTypeChannelTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SLACK","CAPILLARY_VALIDATOR","WEBHOOK","PAGER_DUTY","ZEN_DUTY","EMAIL","MS_TEAMS","MS_TEAMS_WORKFLOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionTypeChannelTypePropEnum = append(subscriptionTypeChannelTypePropEnum, v)
	}
}

const (

	// SubscriptionChannelTypeSLACK captures enum value "SLACK"
	SubscriptionChannelTypeSLACK string = "SLACK"

	// SubscriptionChannelTypeCAPILLARYVALIDATOR captures enum value "CAPILLARY_VALIDATOR"
	SubscriptionChannelTypeCAPILLARYVALIDATOR string = "CAPILLARY_VALIDATOR"

	// SubscriptionChannelTypeWEBHOOK captures enum value "WEBHOOK"
	SubscriptionChannelTypeWEBHOOK string = "WEBHOOK"

	// SubscriptionChannelTypePAGERDUTY captures enum value "PAGER_DUTY"
	SubscriptionChannelTypePAGERDUTY string = "PAGER_DUTY"

	// SubscriptionChannelTypeZENDUTY captures enum value "ZEN_DUTY"
	SubscriptionChannelTypeZENDUTY string = "ZEN_DUTY"

	// SubscriptionChannelTypeEMAIL captures enum value "EMAIL"
	SubscriptionChannelTypeEMAIL string = "EMAIL"

	// SubscriptionChannelTypeMSTEAMS captures enum value "MS_TEAMS"
	SubscriptionChannelTypeMSTEAMS string = "MS_TEAMS"

	// SubscriptionChannelTypeMSTEAMSWORKFLOW captures enum value "MS_TEAMS_WORKFLOW"
	SubscriptionChannelTypeMSTEAMSWORKFLOW string = "MS_TEAMS_WORKFLOW"
)

// prop value enum
func (m *Subscription) validateChannelTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, subscriptionTypeChannelTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Subscription) validateChannelType(formats strfmt.Registry) error {
	if swag.IsZero(m.ChannelType) { // not required
		return nil
	}

	// value enum
	if err := m.validateChannelTypeEnum("channelType", "body", m.ChannelType); err != nil {
		return err
	}

	return nil
}

var subscriptionTypeNotificationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEPLOYMENT_STATUS_UPDATE","APP_DEPLOYMENT","QASUITE_SANITY","DR_RESULT","STACK_SIGNOFF","ALERT","TEST","APPLICATION_DEPLOYMENT_COMPLETE","ENVIRONMENT_CREATE","ENVIRONMENT_DELETE","ENVIRONMENT_LAUNCH","ENVIRONMENT_DESTROY","ENVIRONMENT_CONFIGURE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionTypeNotificationTypePropEnum = append(subscriptionTypeNotificationTypePropEnum, v)
	}
}

const (

	// SubscriptionNotificationTypeDEPLOYMENTSTATUSUPDATE captures enum value "DEPLOYMENT_STATUS_UPDATE"
	SubscriptionNotificationTypeDEPLOYMENTSTATUSUPDATE string = "DEPLOYMENT_STATUS_UPDATE"

	// SubscriptionNotificationTypeAPPDEPLOYMENT captures enum value "APP_DEPLOYMENT"
	SubscriptionNotificationTypeAPPDEPLOYMENT string = "APP_DEPLOYMENT"

	// SubscriptionNotificationTypeQASUITESANITY captures enum value "QASUITE_SANITY"
	SubscriptionNotificationTypeQASUITESANITY string = "QASUITE_SANITY"

	// SubscriptionNotificationTypeDRRESULT captures enum value "DR_RESULT"
	SubscriptionNotificationTypeDRRESULT string = "DR_RESULT"

	// SubscriptionNotificationTypeSTACKSIGNOFF captures enum value "STACK_SIGNOFF"
	SubscriptionNotificationTypeSTACKSIGNOFF string = "STACK_SIGNOFF"

	// SubscriptionNotificationTypeALERT captures enum value "ALERT"
	SubscriptionNotificationTypeALERT string = "ALERT"

	// SubscriptionNotificationTypeTEST captures enum value "TEST"
	SubscriptionNotificationTypeTEST string = "TEST"

	// SubscriptionNotificationTypeAPPLICATIONDEPLOYMENTCOMPLETE captures enum value "APPLICATION_DEPLOYMENT_COMPLETE"
	SubscriptionNotificationTypeAPPLICATIONDEPLOYMENTCOMPLETE string = "APPLICATION_DEPLOYMENT_COMPLETE"

	// SubscriptionNotificationTypeENVIRONMENTCREATE captures enum value "ENVIRONMENT_CREATE"
	SubscriptionNotificationTypeENVIRONMENTCREATE string = "ENVIRONMENT_CREATE"

	// SubscriptionNotificationTypeENVIRONMENTDELETE captures enum value "ENVIRONMENT_DELETE"
	SubscriptionNotificationTypeENVIRONMENTDELETE string = "ENVIRONMENT_DELETE"

	// SubscriptionNotificationTypeENVIRONMENTLAUNCH captures enum value "ENVIRONMENT_LAUNCH"
	SubscriptionNotificationTypeENVIRONMENTLAUNCH string = "ENVIRONMENT_LAUNCH"

	// SubscriptionNotificationTypeENVIRONMENTDESTROY captures enum value "ENVIRONMENT_DESTROY"
	SubscriptionNotificationTypeENVIRONMENTDESTROY string = "ENVIRONMENT_DESTROY"

	// SubscriptionNotificationTypeENVIRONMENTCONFIGURE captures enum value "ENVIRONMENT_CONFIGURE"
	SubscriptionNotificationTypeENVIRONMENTCONFIGURE string = "ENVIRONMENT_CONFIGURE"
)

// prop value enum
func (m *Subscription) validateNotificationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, subscriptionTypeNotificationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Subscription) validateNotificationType(formats strfmt.Registry) error {
	if swag.IsZero(m.NotificationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateNotificationTypeEnum("notificationType", "body", m.NotificationType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this subscription based on context it is used
func (m *Subscription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Subscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subscription) UnmarshalBinary(b []byte) error {
	var res Subscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
