// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TokenPaginatedResponseLogEvent TokenPaginatedResponse«LogEvent»
//
// swagger:model TokenPaginatedResponse«LogEvent»
type TokenPaginatedResponseLogEvent struct {

	// log event list
	LogEventList []*LogEvent `json:"logEventList"`

	// next token
	NextToken string `json:"nextToken,omitempty"`
}

// Validate validates this token paginated response log event
func (m *TokenPaginatedResponseLogEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogEventList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenPaginatedResponseLogEvent) validateLogEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.LogEventList) { // not required
		return nil
	}

	for i := 0; i < len(m.LogEventList); i++ {
		if swag.IsZero(m.LogEventList[i]) { // not required
			continue
		}

		if m.LogEventList[i] != nil {
			if err := m.LogEventList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logEventList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("logEventList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this token paginated response log event based on the context it is used
func (m *TokenPaginatedResponseLogEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLogEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenPaginatedResponseLogEvent) contextValidateLogEventList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LogEventList); i++ {

		if m.LogEventList[i] != nil {

			if swag.IsZero(m.LogEventList[i]) { // not required
				return nil
			}

			if err := m.LogEventList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logEventList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("logEventList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TokenPaginatedResponseLogEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokenPaginatedResponseLogEvent) UnmarshalBinary(b []byte) error {
	var res TokenPaginatedResponseLogEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
