// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Affinity affinity
//
// swagger:model Affinity
type Affinity struct {

	// node affinity
	NodeAffinity *NodeAffinity `json:"nodeAffinity,omitempty"`

	// pod affinity
	PodAffinity *PodAffinity `json:"podAffinity,omitempty"`

	// pod anti affinity
	PodAntiAffinity *PodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

// Validate validates this affinity
func (m *Affinity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeAffinity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodAffinity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodAntiAffinity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Affinity) validateNodeAffinity(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeAffinity) { // not required
		return nil
	}

	if m.NodeAffinity != nil {
		if err := m.NodeAffinity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeAffinity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeAffinity")
			}
			return err
		}
	}

	return nil
}

func (m *Affinity) validatePodAffinity(formats strfmt.Registry) error {
	if swag.IsZero(m.PodAffinity) { // not required
		return nil
	}

	if m.PodAffinity != nil {
		if err := m.PodAffinity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("podAffinity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("podAffinity")
			}
			return err
		}
	}

	return nil
}

func (m *Affinity) validatePodAntiAffinity(formats strfmt.Registry) error {
	if swag.IsZero(m.PodAntiAffinity) { // not required
		return nil
	}

	if m.PodAntiAffinity != nil {
		if err := m.PodAntiAffinity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("podAntiAffinity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("podAntiAffinity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this affinity based on the context it is used
func (m *Affinity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodeAffinity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePodAffinity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePodAntiAffinity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Affinity) contextValidateNodeAffinity(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeAffinity != nil {

		if swag.IsZero(m.NodeAffinity) { // not required
			return nil
		}

		if err := m.NodeAffinity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeAffinity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeAffinity")
			}
			return err
		}
	}

	return nil
}

func (m *Affinity) contextValidatePodAffinity(ctx context.Context, formats strfmt.Registry) error {

	if m.PodAffinity != nil {

		if swag.IsZero(m.PodAffinity) { // not required
			return nil
		}

		if err := m.PodAffinity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("podAffinity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("podAffinity")
			}
			return err
		}
	}

	return nil
}

func (m *Affinity) contextValidatePodAntiAffinity(ctx context.Context, formats strfmt.Registry) error {

	if m.PodAntiAffinity != nil {

		if swag.IsZero(m.PodAntiAffinity) { // not required
			return nil
		}

		if err := m.PodAntiAffinity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("podAntiAffinity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("podAntiAffinity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Affinity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Affinity) UnmarshalBinary(b []byte) error {
	var res Affinity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
