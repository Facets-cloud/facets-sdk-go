// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterSchedule cluster schedule
//
// swagger:model ClusterSchedule
type ClusterSchedule struct {

	// by day
	ByDay []string `json:"byDay"`

	// by time
	ByTime *LocalTime `json:"byTime,omitempty"`

	// cluster Id
	// Required: true
	ClusterID *string `json:"clusterId"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// frequency
	// Enum: ["PER_MINUTE","HOURLY","DAILY","WEEKLY"]
	Frequency string `json:"frequency,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// interval
	Interval int32 `json:"interval,omitempty"`

	// is paused
	IsPaused bool `json:"isPaused,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// release type
	// Required: true
	// Enum: ["HOTFIX","RELEASE","LAUNCH","DESTROY","CUSTOM","UNLOCK_STATE","PLAN","HOTFIX_PLAN","APPLY_PLAN","APPLY_HOTFIX_PLAN","SCALE_UP","SCALE_DOWN","MAINTENANCE","TERRAFORM_EXPORT","ROLLBACK_PLAN","APPLY_ROLLBACK_PLAN"]
	ReleaseType *string `json:"releaseType"`

	// server time zone
	ServerTimeZone string `json:"serverTimeZone,omitempty"`

	// time zone
	TimeZone *ClusterScheduleTimeZone `json:"timeZone,omitempty"`
}

// Validate validates this cluster schedule
func (m *ClusterSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateByDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateByTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterScheduleByDayItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MON","TUE","WED","THU","FRI","SAT","SUN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterScheduleByDayItemsEnum = append(clusterScheduleByDayItemsEnum, v)
	}
}

func (m *ClusterSchedule) validateByDayItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterScheduleByDayItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterSchedule) validateByDay(formats strfmt.Registry) error {
	if swag.IsZero(m.ByDay) { // not required
		return nil
	}

	for i := 0; i < len(m.ByDay); i++ {

		// value enum
		if err := m.validateByDayItemsEnum("byDay"+"."+strconv.Itoa(i), "body", m.ByDay[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ClusterSchedule) validateByTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ByTime) { // not required
		return nil
	}

	if m.ByTime != nil {
		if err := m.ByTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("byTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("byTime")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSchedule) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *ClusterSchedule) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var clusterScheduleTypeFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PER_MINUTE","HOURLY","DAILY","WEEKLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterScheduleTypeFrequencyPropEnum = append(clusterScheduleTypeFrequencyPropEnum, v)
	}
}

const (

	// ClusterScheduleFrequencyPERMINUTE captures enum value "PER_MINUTE"
	ClusterScheduleFrequencyPERMINUTE string = "PER_MINUTE"

	// ClusterScheduleFrequencyHOURLY captures enum value "HOURLY"
	ClusterScheduleFrequencyHOURLY string = "HOURLY"

	// ClusterScheduleFrequencyDAILY captures enum value "DAILY"
	ClusterScheduleFrequencyDAILY string = "DAILY"

	// ClusterScheduleFrequencyWEEKLY captures enum value "WEEKLY"
	ClusterScheduleFrequencyWEEKLY string = "WEEKLY"
)

// prop value enum
func (m *ClusterSchedule) validateFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterScheduleTypeFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterSchedule) validateFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.Frequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateFrequencyEnum("frequency", "body", m.Frequency); err != nil {
		return err
	}

	return nil
}

func (m *ClusterSchedule) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var clusterScheduleTypeReleaseTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HOTFIX","RELEASE","LAUNCH","DESTROY","CUSTOM","UNLOCK_STATE","PLAN","HOTFIX_PLAN","APPLY_PLAN","APPLY_HOTFIX_PLAN","SCALE_UP","SCALE_DOWN","MAINTENANCE","TERRAFORM_EXPORT","ROLLBACK_PLAN","APPLY_ROLLBACK_PLAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterScheduleTypeReleaseTypePropEnum = append(clusterScheduleTypeReleaseTypePropEnum, v)
	}
}

const (

	// ClusterScheduleReleaseTypeHOTFIX captures enum value "HOTFIX"
	ClusterScheduleReleaseTypeHOTFIX string = "HOTFIX"

	// ClusterScheduleReleaseTypeRELEASE captures enum value "RELEASE"
	ClusterScheduleReleaseTypeRELEASE string = "RELEASE"

	// ClusterScheduleReleaseTypeLAUNCH captures enum value "LAUNCH"
	ClusterScheduleReleaseTypeLAUNCH string = "LAUNCH"

	// ClusterScheduleReleaseTypeDESTROY captures enum value "DESTROY"
	ClusterScheduleReleaseTypeDESTROY string = "DESTROY"

	// ClusterScheduleReleaseTypeCUSTOM captures enum value "CUSTOM"
	ClusterScheduleReleaseTypeCUSTOM string = "CUSTOM"

	// ClusterScheduleReleaseTypeUNLOCKSTATE captures enum value "UNLOCK_STATE"
	ClusterScheduleReleaseTypeUNLOCKSTATE string = "UNLOCK_STATE"

	// ClusterScheduleReleaseTypePLAN captures enum value "PLAN"
	ClusterScheduleReleaseTypePLAN string = "PLAN"

	// ClusterScheduleReleaseTypeHOTFIXPLAN captures enum value "HOTFIX_PLAN"
	ClusterScheduleReleaseTypeHOTFIXPLAN string = "HOTFIX_PLAN"

	// ClusterScheduleReleaseTypeAPPLYPLAN captures enum value "APPLY_PLAN"
	ClusterScheduleReleaseTypeAPPLYPLAN string = "APPLY_PLAN"

	// ClusterScheduleReleaseTypeAPPLYHOTFIXPLAN captures enum value "APPLY_HOTFIX_PLAN"
	ClusterScheduleReleaseTypeAPPLYHOTFIXPLAN string = "APPLY_HOTFIX_PLAN"

	// ClusterScheduleReleaseTypeSCALEUP captures enum value "SCALE_UP"
	ClusterScheduleReleaseTypeSCALEUP string = "SCALE_UP"

	// ClusterScheduleReleaseTypeSCALEDOWN captures enum value "SCALE_DOWN"
	ClusterScheduleReleaseTypeSCALEDOWN string = "SCALE_DOWN"

	// ClusterScheduleReleaseTypeMAINTENANCE captures enum value "MAINTENANCE"
	ClusterScheduleReleaseTypeMAINTENANCE string = "MAINTENANCE"

	// ClusterScheduleReleaseTypeTERRAFORMEXPORT captures enum value "TERRAFORM_EXPORT"
	ClusterScheduleReleaseTypeTERRAFORMEXPORT string = "TERRAFORM_EXPORT"

	// ClusterScheduleReleaseTypeROLLBACKPLAN captures enum value "ROLLBACK_PLAN"
	ClusterScheduleReleaseTypeROLLBACKPLAN string = "ROLLBACK_PLAN"

	// ClusterScheduleReleaseTypeAPPLYROLLBACKPLAN captures enum value "APPLY_ROLLBACK_PLAN"
	ClusterScheduleReleaseTypeAPPLYROLLBACKPLAN string = "APPLY_ROLLBACK_PLAN"
)

// prop value enum
func (m *ClusterSchedule) validateReleaseTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterScheduleTypeReleaseTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterSchedule) validateReleaseType(formats strfmt.Registry) error {

	if err := validate.Required("releaseType", "body", m.ReleaseType); err != nil {
		return err
	}

	// value enum
	if err := m.validateReleaseTypeEnum("releaseType", "body", *m.ReleaseType); err != nil {
		return err
	}

	return nil
}

func (m *ClusterSchedule) validateTimeZone(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeZone) { // not required
		return nil
	}

	if m.TimeZone != nil {
		if err := m.TimeZone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeZone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeZone")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster schedule based on the context it is used
func (m *ClusterSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateByTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeZone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterSchedule) contextValidateByTime(ctx context.Context, formats strfmt.Registry) error {

	if m.ByTime != nil {

		if swag.IsZero(m.ByTime) { // not required
			return nil
		}

		if err := m.ByTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("byTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("byTime")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSchedule) contextValidateTimeZone(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeZone != nil {

		if swag.IsZero(m.TimeZone) { // not required
			return nil
		}

		if err := m.TimeZone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeZone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeZone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterSchedule) UnmarshalBinary(b []byte) error {
	var res ClusterSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterScheduleTimeZone cluster schedule time zone
//
// swagger:model ClusterScheduleTimeZone
type ClusterScheduleTimeZone struct {

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// dstsavings
	Dstsavings int32 `json:"dstsavings,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// raw offset
	RawOffset int32 `json:"rawOffset,omitempty"`
}

// Validate validates this cluster schedule time zone
func (m *ClusterScheduleTimeZone) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cluster schedule time zone based on context it is used
func (m *ClusterScheduleTimeZone) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterScheduleTimeZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterScheduleTimeZone) UnmarshalBinary(b []byte) error {
	var res ClusterScheduleTimeZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
