// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentLog deployment log
//
// swagger:model DeploymentLog
type DeploymentLog struct {

	// allow destroy
	AllowDestroy bool `json:"allowDestroy,omitempty"`

	// app deployments
	AppDeployments []*AppDeployment `json:"appDeployments"`

	// approved release Id
	ApprovedReleaseID string `json:"approvedReleaseId,omitempty"`

	// changes applied
	ChangesApplied []*TerraformChange `json:"changesApplied"`

	// codebuild Id
	CodebuildID string `json:"codebuildId,omitempty"`

	// created on
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

	// deployment context file path
	DeploymentContextFilePath string `json:"deploymentContextFilePath,omitempty"`

	// deployment context version
	DeploymentContextVersion string `json:"deploymentContextVersion,omitempty"`

	// deployment job type
	// Enum: ["CODEBUILD","KUBERNETES_POD"]
	DeploymentJobType string `json:"deploymentJobType,omitempty"`

	// deployment type
	// Enum: ["REGULAR","CUSTOM","ROLLBACK"]
	DeploymentType string `json:"deploymentType,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// error logs
	ErrorLogs []*RawError `json:"errorLogs"`

	// finished on
	// Format: date-time
	FinishedOn strfmt.DateTime `json:"finishedOn,omitempty"`

	// force release
	ForceRelease bool `json:"forceRelease,omitempty"`

	// hotfix resources
	HotfixResources []*FacetsResource `json:"hotfixResources"`

	// id
	ID string `json:"id,omitempty"`

	// integration test
	IntegrationTest bool `json:"integrationTest,omitempty"`

	// is destroy
	IsDestroy bool `json:"isDestroy,omitempty"`

	// migration scripts run
	MigrationScriptsRun []*MigrationScriptMetadata `json:"migrationScriptsRun"`

	// override build steps
	OverrideBuildSteps []string `json:"overrideBuildSteps"`

	// parallel release
	ParallelRelease bool `json:"parallelRelease,omitempty"`

	// release comment
	ReleaseComment string `json:"releaseComment,omitempty"`

	// release reviewed by
	ReleaseReviewedBy string `json:"releaseReviewedBy,omitempty"`

	// release trace Id
	ReleaseTraceID string `json:"releaseTraceId,omitempty"`

	// release type
	// Enum: ["HOTFIX","RELEASE","LAUNCH","DESTROY","CUSTOM","UNLOCK_STATE","PLAN","HOTFIX_PLAN","APPLY_PLAN","APPLY_HOTFIX_PLAN","SCALE_UP","SCALE_DOWN","MAINTENANCE","TERRAFORM_EXPORT","ROLLBACK_PLAN","APPLY_ROLLBACK_PLAN"]
	ReleaseType string `json:"releaseType,omitempty"`

	// rollback deployment Id
	RollbackDeploymentID string `json:"rollbackDeploymentId,omitempty"`

	// signed off
	SignedOff bool `json:"signedOff,omitempty"`

	// stack version
	StackVersion string `json:"stackVersion,omitempty"`

	// status
	// Enum: ["SUCCEEDED","FAILED","FAULT","TIMED_OUT","IN_PROGRESS","STOPPED","INVALID","STARTED","UNKNOWN","QUEUED","PENDING_APPROVAL","APPROVED","REJECTED"]
	Status string `json:"status,omitempty"`

	// tf version
	TfVersion string `json:"tfVersion,omitempty"`

	// time taken in seconds
	TimeTakenInSeconds int64 `json:"timeTakenInSeconds,omitempty"`

	// triggered by
	TriggeredBy string `json:"triggeredBy,omitempty"`

	// validation responses
	ValidationResponses []*ValidationResponse `json:"validationResponses"`

	// validation result
	ValidationResult *ValidationResult `json:"validationResult,omitempty"`

	// with refresh
	WithRefresh bool `json:"withRefresh,omitempty"`
}

// Validate validates this deployment log
func (m *DeploymentLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppDeployments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangesApplied(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentJobType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHotfixResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMigrationScriptsRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationResponses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentLog) validateAppDeployments(formats strfmt.Registry) error {
	if swag.IsZero(m.AppDeployments) { // not required
		return nil
	}

	for i := 0; i < len(m.AppDeployments); i++ {
		if swag.IsZero(m.AppDeployments[i]) { // not required
			continue
		}

		if m.AppDeployments[i] != nil {
			if err := m.AppDeployments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appDeployments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appDeployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentLog) validateChangesApplied(formats strfmt.Registry) error {
	if swag.IsZero(m.ChangesApplied) { // not required
		return nil
	}

	for i := 0; i < len(m.ChangesApplied); i++ {
		if swag.IsZero(m.ChangesApplied[i]) { // not required
			continue
		}

		if m.ChangesApplied[i] != nil {
			if err := m.ChangesApplied[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changesApplied" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("changesApplied" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentLog) validateCreatedOn(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("createdOn", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

var deploymentLogTypeDeploymentJobTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CODEBUILD","KUBERNETES_POD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentLogTypeDeploymentJobTypePropEnum = append(deploymentLogTypeDeploymentJobTypePropEnum, v)
	}
}

const (

	// DeploymentLogDeploymentJobTypeCODEBUILD captures enum value "CODEBUILD"
	DeploymentLogDeploymentJobTypeCODEBUILD string = "CODEBUILD"

	// DeploymentLogDeploymentJobTypeKUBERNETESPOD captures enum value "KUBERNETES_POD"
	DeploymentLogDeploymentJobTypeKUBERNETESPOD string = "KUBERNETES_POD"
)

// prop value enum
func (m *DeploymentLog) validateDeploymentJobTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentLogTypeDeploymentJobTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentLog) validateDeploymentJobType(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentJobType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeploymentJobTypeEnum("deploymentJobType", "body", m.DeploymentJobType); err != nil {
		return err
	}

	return nil
}

var deploymentLogTypeDeploymentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REGULAR","CUSTOM","ROLLBACK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentLogTypeDeploymentTypePropEnum = append(deploymentLogTypeDeploymentTypePropEnum, v)
	}
}

const (

	// DeploymentLogDeploymentTypeREGULAR captures enum value "REGULAR"
	DeploymentLogDeploymentTypeREGULAR string = "REGULAR"

	// DeploymentLogDeploymentTypeCUSTOM captures enum value "CUSTOM"
	DeploymentLogDeploymentTypeCUSTOM string = "CUSTOM"

	// DeploymentLogDeploymentTypeROLLBACK captures enum value "ROLLBACK"
	DeploymentLogDeploymentTypeROLLBACK string = "ROLLBACK"
)

// prop value enum
func (m *DeploymentLog) validateDeploymentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentLogTypeDeploymentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentLog) validateDeploymentType(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeploymentTypeEnum("deploymentType", "body", m.DeploymentType); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentLog) validateErrorLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.ErrorLogs); i++ {
		if swag.IsZero(m.ErrorLogs[i]) { // not required
			continue
		}

		if m.ErrorLogs[i] != nil {
			if err := m.ErrorLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentLog) validateFinishedOn(formats strfmt.Registry) error {
	if swag.IsZero(m.FinishedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("finishedOn", "body", "date-time", m.FinishedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentLog) validateHotfixResources(formats strfmt.Registry) error {
	if swag.IsZero(m.HotfixResources) { // not required
		return nil
	}

	for i := 0; i < len(m.HotfixResources); i++ {
		if swag.IsZero(m.HotfixResources[i]) { // not required
			continue
		}

		if m.HotfixResources[i] != nil {
			if err := m.HotfixResources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hotfixResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hotfixResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentLog) validateMigrationScriptsRun(formats strfmt.Registry) error {
	if swag.IsZero(m.MigrationScriptsRun) { // not required
		return nil
	}

	for i := 0; i < len(m.MigrationScriptsRun); i++ {
		if swag.IsZero(m.MigrationScriptsRun[i]) { // not required
			continue
		}

		if m.MigrationScriptsRun[i] != nil {
			if err := m.MigrationScriptsRun[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("migrationScriptsRun" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("migrationScriptsRun" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var deploymentLogTypeReleaseTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HOTFIX","RELEASE","LAUNCH","DESTROY","CUSTOM","UNLOCK_STATE","PLAN","HOTFIX_PLAN","APPLY_PLAN","APPLY_HOTFIX_PLAN","SCALE_UP","SCALE_DOWN","MAINTENANCE","TERRAFORM_EXPORT","ROLLBACK_PLAN","APPLY_ROLLBACK_PLAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentLogTypeReleaseTypePropEnum = append(deploymentLogTypeReleaseTypePropEnum, v)
	}
}

const (

	// DeploymentLogReleaseTypeHOTFIX captures enum value "HOTFIX"
	DeploymentLogReleaseTypeHOTFIX string = "HOTFIX"

	// DeploymentLogReleaseTypeRELEASE captures enum value "RELEASE"
	DeploymentLogReleaseTypeRELEASE string = "RELEASE"

	// DeploymentLogReleaseTypeLAUNCH captures enum value "LAUNCH"
	DeploymentLogReleaseTypeLAUNCH string = "LAUNCH"

	// DeploymentLogReleaseTypeDESTROY captures enum value "DESTROY"
	DeploymentLogReleaseTypeDESTROY string = "DESTROY"

	// DeploymentLogReleaseTypeCUSTOM captures enum value "CUSTOM"
	DeploymentLogReleaseTypeCUSTOM string = "CUSTOM"

	// DeploymentLogReleaseTypeUNLOCKSTATE captures enum value "UNLOCK_STATE"
	DeploymentLogReleaseTypeUNLOCKSTATE string = "UNLOCK_STATE"

	// DeploymentLogReleaseTypePLAN captures enum value "PLAN"
	DeploymentLogReleaseTypePLAN string = "PLAN"

	// DeploymentLogReleaseTypeHOTFIXPLAN captures enum value "HOTFIX_PLAN"
	DeploymentLogReleaseTypeHOTFIXPLAN string = "HOTFIX_PLAN"

	// DeploymentLogReleaseTypeAPPLYPLAN captures enum value "APPLY_PLAN"
	DeploymentLogReleaseTypeAPPLYPLAN string = "APPLY_PLAN"

	// DeploymentLogReleaseTypeAPPLYHOTFIXPLAN captures enum value "APPLY_HOTFIX_PLAN"
	DeploymentLogReleaseTypeAPPLYHOTFIXPLAN string = "APPLY_HOTFIX_PLAN"

	// DeploymentLogReleaseTypeSCALEUP captures enum value "SCALE_UP"
	DeploymentLogReleaseTypeSCALEUP string = "SCALE_UP"

	// DeploymentLogReleaseTypeSCALEDOWN captures enum value "SCALE_DOWN"
	DeploymentLogReleaseTypeSCALEDOWN string = "SCALE_DOWN"

	// DeploymentLogReleaseTypeMAINTENANCE captures enum value "MAINTENANCE"
	DeploymentLogReleaseTypeMAINTENANCE string = "MAINTENANCE"

	// DeploymentLogReleaseTypeTERRAFORMEXPORT captures enum value "TERRAFORM_EXPORT"
	DeploymentLogReleaseTypeTERRAFORMEXPORT string = "TERRAFORM_EXPORT"

	// DeploymentLogReleaseTypeROLLBACKPLAN captures enum value "ROLLBACK_PLAN"
	DeploymentLogReleaseTypeROLLBACKPLAN string = "ROLLBACK_PLAN"

	// DeploymentLogReleaseTypeAPPLYROLLBACKPLAN captures enum value "APPLY_ROLLBACK_PLAN"
	DeploymentLogReleaseTypeAPPLYROLLBACKPLAN string = "APPLY_ROLLBACK_PLAN"
)

// prop value enum
func (m *DeploymentLog) validateReleaseTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentLogTypeReleaseTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentLog) validateReleaseType(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleaseType) { // not required
		return nil
	}

	// value enum
	if err := m.validateReleaseTypeEnum("releaseType", "body", m.ReleaseType); err != nil {
		return err
	}

	return nil
}

var deploymentLogTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCEEDED","FAILED","FAULT","TIMED_OUT","IN_PROGRESS","STOPPED","INVALID","STARTED","UNKNOWN","QUEUED","PENDING_APPROVAL","APPROVED","REJECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentLogTypeStatusPropEnum = append(deploymentLogTypeStatusPropEnum, v)
	}
}

const (

	// DeploymentLogStatusSUCCEEDED captures enum value "SUCCEEDED"
	DeploymentLogStatusSUCCEEDED string = "SUCCEEDED"

	// DeploymentLogStatusFAILED captures enum value "FAILED"
	DeploymentLogStatusFAILED string = "FAILED"

	// DeploymentLogStatusFAULT captures enum value "FAULT"
	DeploymentLogStatusFAULT string = "FAULT"

	// DeploymentLogStatusTIMEDOUT captures enum value "TIMED_OUT"
	DeploymentLogStatusTIMEDOUT string = "TIMED_OUT"

	// DeploymentLogStatusINPROGRESS captures enum value "IN_PROGRESS"
	DeploymentLogStatusINPROGRESS string = "IN_PROGRESS"

	// DeploymentLogStatusSTOPPED captures enum value "STOPPED"
	DeploymentLogStatusSTOPPED string = "STOPPED"

	// DeploymentLogStatusINVALID captures enum value "INVALID"
	DeploymentLogStatusINVALID string = "INVALID"

	// DeploymentLogStatusSTARTED captures enum value "STARTED"
	DeploymentLogStatusSTARTED string = "STARTED"

	// DeploymentLogStatusUNKNOWN captures enum value "UNKNOWN"
	DeploymentLogStatusUNKNOWN string = "UNKNOWN"

	// DeploymentLogStatusQUEUED captures enum value "QUEUED"
	DeploymentLogStatusQUEUED string = "QUEUED"

	// DeploymentLogStatusPENDINGAPPROVAL captures enum value "PENDING_APPROVAL"
	DeploymentLogStatusPENDINGAPPROVAL string = "PENDING_APPROVAL"

	// DeploymentLogStatusAPPROVED captures enum value "APPROVED"
	DeploymentLogStatusAPPROVED string = "APPROVED"

	// DeploymentLogStatusREJECTED captures enum value "REJECTED"
	DeploymentLogStatusREJECTED string = "REJECTED"
)

// prop value enum
func (m *DeploymentLog) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentLogTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentLog) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentLog) validateValidationResponses(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidationResponses) { // not required
		return nil
	}

	for i := 0; i < len(m.ValidationResponses); i++ {
		if swag.IsZero(m.ValidationResponses[i]) { // not required
			continue
		}

		if m.ValidationResponses[i] != nil {
			if err := m.ValidationResponses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validationResponses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("validationResponses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentLog) validateValidationResult(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidationResult) { // not required
		return nil
	}

	if m.ValidationResult != nil {
		if err := m.ValidationResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validationResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validationResult")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deployment log based on the context it is used
func (m *DeploymentLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppDeployments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChangesApplied(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHotfixResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMigrationScriptsRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValidationResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValidationResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentLog) contextValidateAppDeployments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppDeployments); i++ {

		if m.AppDeployments[i] != nil {

			if swag.IsZero(m.AppDeployments[i]) { // not required
				return nil
			}

			if err := m.AppDeployments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appDeployments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appDeployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentLog) contextValidateChangesApplied(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChangesApplied); i++ {

		if m.ChangesApplied[i] != nil {

			if swag.IsZero(m.ChangesApplied[i]) { // not required
				return nil
			}

			if err := m.ChangesApplied[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changesApplied" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("changesApplied" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentLog) contextValidateErrorLogs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ErrorLogs); i++ {

		if m.ErrorLogs[i] != nil {

			if swag.IsZero(m.ErrorLogs[i]) { // not required
				return nil
			}

			if err := m.ErrorLogs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentLog) contextValidateHotfixResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HotfixResources); i++ {

		if m.HotfixResources[i] != nil {

			if swag.IsZero(m.HotfixResources[i]) { // not required
				return nil
			}

			if err := m.HotfixResources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hotfixResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hotfixResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentLog) contextValidateMigrationScriptsRun(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MigrationScriptsRun); i++ {

		if m.MigrationScriptsRun[i] != nil {

			if swag.IsZero(m.MigrationScriptsRun[i]) { // not required
				return nil
			}

			if err := m.MigrationScriptsRun[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("migrationScriptsRun" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("migrationScriptsRun" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentLog) contextValidateValidationResponses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ValidationResponses); i++ {

		if m.ValidationResponses[i] != nil {

			if swag.IsZero(m.ValidationResponses[i]) { // not required
				return nil
			}

			if err := m.ValidationResponses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validationResponses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("validationResponses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentLog) contextValidateValidationResult(ctx context.Context, formats strfmt.Registry) error {

	if m.ValidationResult != nil {

		if swag.IsZero(m.ValidationResult) { // not required
			return nil
		}

		if err := m.ValidationResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validationResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validationResult")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentLog) UnmarshalBinary(b []byte) error {
	var res DeploymentLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
