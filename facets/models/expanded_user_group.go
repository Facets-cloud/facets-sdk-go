// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExpandedUserGroup expanded user group
//
// swagger:model ExpandedUserGroup
type ExpandedUserGroup struct {

	// accessible accounts
	AccessibleAccounts []*IDName `json:"accessibleAccounts"`

	// accessible environments
	AccessibleEnvironments []*EnvInfo `json:"accessibleEnvironments"`

	// accessible projects
	// Unique: true
	AccessibleProjects []string `json:"accessibleProjects"`

	// associated resource groups
	AssociatedResourceGroups []*IDName `json:"associatedResourceGroups"`

	// base role
	BaseRole *RoleInfo `json:"baseRole,omitempty"`

	// env specific roles
	EnvSpecificRoles []*EnvSpecificAccess `json:"envSpecificRoles"`

	// group Id
	GroupID string `json:"groupId,omitempty"`

	// group name
	GroupName string `json:"groupName,omitempty"`
}

// Validate validates this expanded user group
func (m *ExpandedUserGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessibleAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessibleEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessibleProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociatedResourceGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvSpecificRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExpandedUserGroup) validateAccessibleAccounts(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessibleAccounts) { // not required
		return nil
	}

	for i := 0; i < len(m.AccessibleAccounts); i++ {
		if swag.IsZero(m.AccessibleAccounts[i]) { // not required
			continue
		}

		if m.AccessibleAccounts[i] != nil {
			if err := m.AccessibleAccounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessibleAccounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessibleAccounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExpandedUserGroup) validateAccessibleEnvironments(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessibleEnvironments) { // not required
		return nil
	}

	for i := 0; i < len(m.AccessibleEnvironments); i++ {
		if swag.IsZero(m.AccessibleEnvironments[i]) { // not required
			continue
		}

		if m.AccessibleEnvironments[i] != nil {
			if err := m.AccessibleEnvironments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessibleEnvironments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessibleEnvironments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExpandedUserGroup) validateAccessibleProjects(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessibleProjects) { // not required
		return nil
	}

	if err := validate.UniqueItems("accessibleProjects", "body", m.AccessibleProjects); err != nil {
		return err
	}

	return nil
}

func (m *ExpandedUserGroup) validateAssociatedResourceGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.AssociatedResourceGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.AssociatedResourceGroups); i++ {
		if swag.IsZero(m.AssociatedResourceGroups[i]) { // not required
			continue
		}

		if m.AssociatedResourceGroups[i] != nil {
			if err := m.AssociatedResourceGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associatedResourceGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("associatedResourceGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExpandedUserGroup) validateBaseRole(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseRole) { // not required
		return nil
	}

	if m.BaseRole != nil {
		if err := m.BaseRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseRole")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseRole")
			}
			return err
		}
	}

	return nil
}

func (m *ExpandedUserGroup) validateEnvSpecificRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvSpecificRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvSpecificRoles); i++ {
		if swag.IsZero(m.EnvSpecificRoles[i]) { // not required
			continue
		}

		if m.EnvSpecificRoles[i] != nil {
			if err := m.EnvSpecificRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("envSpecificRoles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("envSpecificRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this expanded user group based on the context it is used
func (m *ExpandedUserGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessibleAccounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAccessibleEnvironments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssociatedResourceGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBaseRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvSpecificRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExpandedUserGroup) contextValidateAccessibleAccounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AccessibleAccounts); i++ {

		if m.AccessibleAccounts[i] != nil {

			if swag.IsZero(m.AccessibleAccounts[i]) { // not required
				return nil
			}

			if err := m.AccessibleAccounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessibleAccounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessibleAccounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExpandedUserGroup) contextValidateAccessibleEnvironments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AccessibleEnvironments); i++ {

		if m.AccessibleEnvironments[i] != nil {

			if swag.IsZero(m.AccessibleEnvironments[i]) { // not required
				return nil
			}

			if err := m.AccessibleEnvironments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessibleEnvironments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessibleEnvironments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExpandedUserGroup) contextValidateAssociatedResourceGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssociatedResourceGroups); i++ {

		if m.AssociatedResourceGroups[i] != nil {

			if swag.IsZero(m.AssociatedResourceGroups[i]) { // not required
				return nil
			}

			if err := m.AssociatedResourceGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associatedResourceGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("associatedResourceGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExpandedUserGroup) contextValidateBaseRole(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseRole != nil {

		if swag.IsZero(m.BaseRole) { // not required
			return nil
		}

		if err := m.BaseRole.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseRole")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseRole")
			}
			return err
		}
	}

	return nil
}

func (m *ExpandedUserGroup) contextValidateEnvSpecificRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EnvSpecificRoles); i++ {

		if m.EnvSpecificRoles[i] != nil {

			if swag.IsZero(m.EnvSpecificRoles[i]) { // not required
				return nil
			}

			if err := m.EnvSpecificRoles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("envSpecificRoles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("envSpecificRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExpandedUserGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExpandedUserGroup) UnmarshalBinary(b []byte) error {
	var res ExpandedUserGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
