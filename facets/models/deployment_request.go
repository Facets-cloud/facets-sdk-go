// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentRequest DeploymentRequest
//
// swagger:model DeploymentRequest
type DeploymentRequest struct {

	// false
	// Example: false
	AllowDestroy bool `json:"allowDestroy,omitempty"`

	// alpha
	Alpha bool `json:"alpha,omitempty"`

	// approved release
	ApprovedRelease bool `json:"approvedRelease,omitempty"`

	// can queue
	CanQueue bool `json:"canQueue,omitempty"`

	// extra env
	// Example: {}
	ExtraEnv map[string]string `json:"extraEnv,omitempty"`

	// true
	// Example: true
	ForceRelease bool `json:"forceRelease,omitempty"`

	// hotfix resources
	HotfixResources []*FacetsResource `json:"hotfixResources"`

	// lock Id
	LockID string `json:"lockId,omitempty"`

	// override build steps
	// Example: ["Command 1","Command 2"]
	// Required: true
	OverrideBuildSteps []string `json:"overrideBuildSteps"`

	// parallel release
	ParallelRelease bool `json:"parallelRelease,omitempty"`

	// plan code build Id
	PlanCodeBuildID string `json:"planCodeBuildId,omitempty"`

	// queued release Id
	QueuedReleaseID string `json:"queuedReleaseId,omitempty"`

	// release comment
	ReleaseComment string `json:"releaseComment,omitempty"`

	// release trace Id
	ReleaseTraceID string `json:"releaseTraceId,omitempty"`

	// CUSTOM
	// Example: CUSTOM
	// Enum: ["HOTFIX","RELEASE","LAUNCH","DESTROY","CUSTOM","UNLOCK_STATE","PLAN","HOTFIX_PLAN","APPLY_PLAN","APPLY_HOTFIX_PLAN","SCALE_UP","SCALE_DOWN","MAINTENANCE"]
	ReleaseType string `json:"releaseType,omitempty"`

	// true
	TfVersion *TfVersion `json:"tfVersion,omitempty"`

	// false
	// Example: false
	WithRefresh bool `json:"withRefresh,omitempty"`
}

// Validate validates this deployment request
func (m *DeploymentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHotfixResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrideBuildSteps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTfVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentRequest) validateHotfixResources(formats strfmt.Registry) error {
	if swag.IsZero(m.HotfixResources) { // not required
		return nil
	}

	for i := 0; i < len(m.HotfixResources); i++ {
		if swag.IsZero(m.HotfixResources[i]) { // not required
			continue
		}

		if m.HotfixResources[i] != nil {
			if err := m.HotfixResources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hotfixResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hotfixResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentRequest) validateOverrideBuildSteps(formats strfmt.Registry) error {

	if err := validate.Required("overrideBuildSteps", "body", m.OverrideBuildSteps); err != nil {
		return err
	}

	return nil
}

var deploymentRequestTypeReleaseTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HOTFIX","RELEASE","LAUNCH","DESTROY","CUSTOM","UNLOCK_STATE","PLAN","HOTFIX_PLAN","APPLY_PLAN","APPLY_HOTFIX_PLAN","SCALE_UP","SCALE_DOWN","MAINTENANCE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentRequestTypeReleaseTypePropEnum = append(deploymentRequestTypeReleaseTypePropEnum, v)
	}
}

const (

	// DeploymentRequestReleaseTypeHOTFIX captures enum value "HOTFIX"
	DeploymentRequestReleaseTypeHOTFIX string = "HOTFIX"

	// DeploymentRequestReleaseTypeRELEASE captures enum value "RELEASE"
	DeploymentRequestReleaseTypeRELEASE string = "RELEASE"

	// DeploymentRequestReleaseTypeLAUNCH captures enum value "LAUNCH"
	DeploymentRequestReleaseTypeLAUNCH string = "LAUNCH"

	// DeploymentRequestReleaseTypeDESTROY captures enum value "DESTROY"
	DeploymentRequestReleaseTypeDESTROY string = "DESTROY"

	// DeploymentRequestReleaseTypeCUSTOM captures enum value "CUSTOM"
	DeploymentRequestReleaseTypeCUSTOM string = "CUSTOM"

	// DeploymentRequestReleaseTypeUNLOCKSTATE captures enum value "UNLOCK_STATE"
	DeploymentRequestReleaseTypeUNLOCKSTATE string = "UNLOCK_STATE"

	// DeploymentRequestReleaseTypePLAN captures enum value "PLAN"
	DeploymentRequestReleaseTypePLAN string = "PLAN"

	// DeploymentRequestReleaseTypeHOTFIXPLAN captures enum value "HOTFIX_PLAN"
	DeploymentRequestReleaseTypeHOTFIXPLAN string = "HOTFIX_PLAN"

	// DeploymentRequestReleaseTypeAPPLYPLAN captures enum value "APPLY_PLAN"
	DeploymentRequestReleaseTypeAPPLYPLAN string = "APPLY_PLAN"

	// DeploymentRequestReleaseTypeAPPLYHOTFIXPLAN captures enum value "APPLY_HOTFIX_PLAN"
	DeploymentRequestReleaseTypeAPPLYHOTFIXPLAN string = "APPLY_HOTFIX_PLAN"

	// DeploymentRequestReleaseTypeSCALEUP captures enum value "SCALE_UP"
	DeploymentRequestReleaseTypeSCALEUP string = "SCALE_UP"

	// DeploymentRequestReleaseTypeSCALEDOWN captures enum value "SCALE_DOWN"
	DeploymentRequestReleaseTypeSCALEDOWN string = "SCALE_DOWN"

	// DeploymentRequestReleaseTypeMAINTENANCE captures enum value "MAINTENANCE"
	DeploymentRequestReleaseTypeMAINTENANCE string = "MAINTENANCE"
)

// prop value enum
func (m *DeploymentRequest) validateReleaseTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentRequestTypeReleaseTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentRequest) validateReleaseType(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleaseType) { // not required
		return nil
	}

	// value enum
	if err := m.validateReleaseTypeEnum("releaseType", "body", m.ReleaseType); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentRequest) validateTfVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.TfVersion) { // not required
		return nil
	}

	if m.TfVersion != nil {
		if err := m.TfVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tfVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tfVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deployment request based on the context it is used
func (m *DeploymentRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHotfixResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTfVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentRequest) contextValidateHotfixResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HotfixResources); i++ {

		if m.HotfixResources[i] != nil {

			if swag.IsZero(m.HotfixResources[i]) { // not required
				return nil
			}

			if err := m.HotfixResources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hotfixResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hotfixResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentRequest) contextValidateTfVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.TfVersion != nil {

		if swag.IsZero(m.TfVersion) { // not required
			return nil
		}

		if err := m.TfVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tfVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tfVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentRequest) UnmarshalBinary(b []byte) error {
	var res DeploymentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
