// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TFModulePath Path information related to TF Module
//
// swagger:model TFModulePath
type TFModulePath struct {

	// etag
	Etag string `json:"etag,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// path type
	// Enum: ["S3","FACETS_S3"]
	PathType string `json:"pathType,omitempty"`
}

// Validate validates this t f module path
func (m *TFModulePath) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePathType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tFModulePathTypePathTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["S3","FACETS_S3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tFModulePathTypePathTypePropEnum = append(tFModulePathTypePathTypePropEnum, v)
	}
}

const (

	// TFModulePathPathTypeS3 captures enum value "S3"
	TFModulePathPathTypeS3 string = "S3"

	// TFModulePathPathTypeFACETSS3 captures enum value "FACETS_S3"
	TFModulePathPathTypeFACETSS3 string = "FACETS_S3"
)

// prop value enum
func (m *TFModulePath) validatePathTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tFModulePathTypePathTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TFModulePath) validatePathType(formats strfmt.Registry) error {
	if swag.IsZero(m.PathType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePathTypeEnum("pathType", "body", m.PathType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this t f module path based on context it is used
func (m *TFModulePath) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TFModulePath) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TFModulePath) UnmarshalBinary(b []byte) error {
	var res TFModulePath
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
