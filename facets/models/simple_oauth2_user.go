// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SimpleOauth2User SimpleOauth2User
//
// swagger:model SimpleOauth2User
type SimpleOauth2User struct {

	// allowed accounts
	AllowedAccounts []string `json:"allowedAccounts"`

	// allowed cluster ids
	AllowedClusterIds []string `json:"allowedClusterIds"`

	// allowed stack names
	AllowedStackNames []string `json:"allowedStackNames"`

	// associated to resource group
	AssociatedToResourceGroup bool `json:"associatedToResourceGroup,omitempty"`

	// attributes
	Attributes interface{} `json:"attributes,omitempty"`

	// authorities
	Authorities []*GrantedAuthority `json:"authorities"`

	// cluster role binding
	ClusterRoleBinding map[string]string `json:"clusterRoleBinding,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// stack resources
	StackResources []*StackResource `json:"stackResources"`

	// user Id
	UserID string `json:"userId,omitempty"`
}

// Validate validates this simple oauth2 user
func (m *SimpleOauth2User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimpleOauth2User) validateAuthorities(formats strfmt.Registry) error {
	if swag.IsZero(m.Authorities) { // not required
		return nil
	}

	for i := 0; i < len(m.Authorities); i++ {
		if swag.IsZero(m.Authorities[i]) { // not required
			continue
		}

		if m.Authorities[i] != nil {
			if err := m.Authorities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authorities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("authorities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SimpleOauth2User) validateStackResources(formats strfmt.Registry) error {
	if swag.IsZero(m.StackResources) { // not required
		return nil
	}

	for i := 0; i < len(m.StackResources); i++ {
		if swag.IsZero(m.StackResources[i]) { // not required
			continue
		}

		if m.StackResources[i] != nil {
			if err := m.StackResources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stackResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stackResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this simple oauth2 user based on the context it is used
func (m *SimpleOauth2User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthorities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStackResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimpleOauth2User) contextValidateAuthorities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Authorities); i++ {

		if m.Authorities[i] != nil {

			if swag.IsZero(m.Authorities[i]) { // not required
				return nil
			}

			if err := m.Authorities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authorities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("authorities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SimpleOauth2User) contextValidateStackResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StackResources); i++ {

		if m.StackResources[i] != nil {

			if swag.IsZero(m.StackResources[i]) { // not required
				return nil
			}

			if err := m.StackResources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stackResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stackResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SimpleOauth2User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SimpleOauth2User) UnmarshalBinary(b []byte) error {
	var res SimpleOauth2User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
