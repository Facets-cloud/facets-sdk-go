// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BasicDockerDTO basic docker d t o
//
// swagger:model BasicDockerDTO
type BasicDockerDTO struct {

	// artifactory name
	// Required: true
	ArtifactoryName *string `json:"artifactoryName"`

	// artifactory project
	ArtifactoryProject string `json:"artifactoryProject,omitempty"`

	// artifactory type
	// Required: true
	// Enum: ["ECR","AZURE_CONTAINER_REGISTRY","GOOGLE_ARTIFACT_REGISTRY","GOOGLE_CONTAINER_REGISTRY","NEXUS","DOCKER_HUB","JFROG","HARBOR","OTHERS"]
	ArtifactoryType *string `json:"artifactoryType"`

	// password
	// Required: true
	Password *string `json:"password"`

	// stacks associated
	// Unique: true
	StacksAssociated []string `json:"stacksAssociated"`

	// uri
	// Required: true
	URI *string `json:"uri"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this basic docker d t o
func (m *BasicDockerDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactoryName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactoryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStacksAssociated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BasicDockerDTO) validateArtifactoryName(formats strfmt.Registry) error {

	if err := validate.Required("artifactoryName", "body", m.ArtifactoryName); err != nil {
		return err
	}

	return nil
}

var basicDockerDTOTypeArtifactoryTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ECR","AZURE_CONTAINER_REGISTRY","GOOGLE_ARTIFACT_REGISTRY","GOOGLE_CONTAINER_REGISTRY","NEXUS","DOCKER_HUB","JFROG","HARBOR","OTHERS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		basicDockerDTOTypeArtifactoryTypePropEnum = append(basicDockerDTOTypeArtifactoryTypePropEnum, v)
	}
}

const (

	// BasicDockerDTOArtifactoryTypeECR captures enum value "ECR"
	BasicDockerDTOArtifactoryTypeECR string = "ECR"

	// BasicDockerDTOArtifactoryTypeAZURECONTAINERREGISTRY captures enum value "AZURE_CONTAINER_REGISTRY"
	BasicDockerDTOArtifactoryTypeAZURECONTAINERREGISTRY string = "AZURE_CONTAINER_REGISTRY"

	// BasicDockerDTOArtifactoryTypeGOOGLEARTIFACTREGISTRY captures enum value "GOOGLE_ARTIFACT_REGISTRY"
	BasicDockerDTOArtifactoryTypeGOOGLEARTIFACTREGISTRY string = "GOOGLE_ARTIFACT_REGISTRY"

	// BasicDockerDTOArtifactoryTypeGOOGLECONTAINERREGISTRY captures enum value "GOOGLE_CONTAINER_REGISTRY"
	BasicDockerDTOArtifactoryTypeGOOGLECONTAINERREGISTRY string = "GOOGLE_CONTAINER_REGISTRY"

	// BasicDockerDTOArtifactoryTypeNEXUS captures enum value "NEXUS"
	BasicDockerDTOArtifactoryTypeNEXUS string = "NEXUS"

	// BasicDockerDTOArtifactoryTypeDOCKERHUB captures enum value "DOCKER_HUB"
	BasicDockerDTOArtifactoryTypeDOCKERHUB string = "DOCKER_HUB"

	// BasicDockerDTOArtifactoryTypeJFROG captures enum value "JFROG"
	BasicDockerDTOArtifactoryTypeJFROG string = "JFROG"

	// BasicDockerDTOArtifactoryTypeHARBOR captures enum value "HARBOR"
	BasicDockerDTOArtifactoryTypeHARBOR string = "HARBOR"

	// BasicDockerDTOArtifactoryTypeOTHERS captures enum value "OTHERS"
	BasicDockerDTOArtifactoryTypeOTHERS string = "OTHERS"
)

// prop value enum
func (m *BasicDockerDTO) validateArtifactoryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, basicDockerDTOTypeArtifactoryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BasicDockerDTO) validateArtifactoryType(formats strfmt.Registry) error {

	if err := validate.Required("artifactoryType", "body", m.ArtifactoryType); err != nil {
		return err
	}

	// value enum
	if err := m.validateArtifactoryTypeEnum("artifactoryType", "body", *m.ArtifactoryType); err != nil {
		return err
	}

	return nil
}

func (m *BasicDockerDTO) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *BasicDockerDTO) validateStacksAssociated(formats strfmt.Registry) error {
	if swag.IsZero(m.StacksAssociated) { // not required
		return nil
	}

	if err := validate.UniqueItems("stacksAssociated", "body", m.StacksAssociated); err != nil {
		return err
	}

	return nil
}

func (m *BasicDockerDTO) validateURI(formats strfmt.Registry) error {

	if err := validate.Required("uri", "body", m.URI); err != nil {
		return err
	}

	return nil
}

func (m *BasicDockerDTO) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this basic docker d t o based on context it is used
func (m *BasicDockerDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BasicDockerDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BasicDockerDTO) UnmarshalBinary(b []byte) error {
	var res BasicDockerDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
