// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddOnDTO add on d t o
//
// swagger:model AddOnDTO
type AddOnDTO struct {

	// added
	Added bool `json:"added,omitempty"`

	// flavor
	Flavor string `json:"flavor,omitempty"`

	// inputs
	Inputs map[string]Input `json:"inputs,omitempty"`

	// intent
	Intent string `json:"intent,omitempty"`

	// resource name
	ResourceName string `json:"resourceName,omitempty"`
}

// Validate validates this add on d t o
func (m *AddOnDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddOnDTO) validateInputs(formats strfmt.Registry) error {
	if swag.IsZero(m.Inputs) { // not required
		return nil
	}

	for k := range m.Inputs {

		if err := validate.Required("inputs"+"."+k, "body", m.Inputs[k]); err != nil {
			return err
		}
		if val, ok := m.Inputs[k]; ok {
			if err := val.Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("inputs" + "." + k)
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("inputs" + "." + k)
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this add on d t o based on the context it is used
func (m *AddOnDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInputs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddOnDTO) contextValidateInputs(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Inputs {

		if val, ok := m.Inputs[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddOnDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddOnDTO) UnmarshalBinary(b []byte) error {
	var res AddOnDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
