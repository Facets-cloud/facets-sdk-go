// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArtifactCI artifact c i
//
// swagger:model ArtifactCI
type ArtifactCI struct {

	// ci name
	// Required: true
	CiName *string `json:"ciName"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// entity type
	// Enum: ["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]
	EntityType string `json:"entityType,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// integration type
	// Required: true
	// Enum: ["EXTERNAL"]
	IntegrationType *string `json:"integrationType"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// last modified date
	// Format: date-time
	LastModifiedDate strfmt.DateTime `json:"lastModifiedDate,omitempty"`

	// promotion workflow Id
	PromotionWorkflowID string `json:"promotionWorkflowId,omitempty"`

	// registration type
	// Required: true
	// Enum: ["ENVIRONMENT","RELEASE_STREAM","HYBRID"]
	RegistrationType *string `json:"registrationType"`

	// rule Id
	RuleID string `json:"ruleId,omitempty"`

	// stack name
	StackName string `json:"stackName,omitempty"`
}

// Validate validates this artifact c i
func (m *ArtifactCI) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCiName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactCI) validateCiName(formats strfmt.Registry) error {

	if err := validate.Required("ciName", "body", m.CiName); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactCI) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var artifactCITypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactCITypeEntityTypePropEnum = append(artifactCITypeEntityTypePropEnum, v)
	}
}

const (

	// ArtifactCIEntityTypeCLUSTER captures enum value "CLUSTER"
	ArtifactCIEntityTypeCLUSTER string = "CLUSTER"

	// ArtifactCIEntityTypeBLUEPRINT captures enum value "BLUE_PRINT"
	ArtifactCIEntityTypeBLUEPRINT string = "BLUE_PRINT"

	// ArtifactCIEntityTypeTEMPLATEINPUT captures enum value "TEMPLATE_INPUT"
	ArtifactCIEntityTypeTEMPLATEINPUT string = "TEMPLATE_INPUT"

	// ArtifactCIEntityTypeCONTROLPLANE captures enum value "CONTROL_PLANE"
	ArtifactCIEntityTypeCONTROLPLANE string = "CONTROL_PLANE"

	// ArtifactCIEntityTypeIAC captures enum value "IAC"
	ArtifactCIEntityTypeIAC string = "IAC"

	// ArtifactCIEntityTypeARTIFACTCI captures enum value "ARTIFACT_CI"
	ArtifactCIEntityTypeARTIFACTCI string = "ARTIFACT_CI"

	// ArtifactCIEntityTypeUSERGROUP captures enum value "USER_GROUP"
	ArtifactCIEntityTypeUSERGROUP string = "USER_GROUP"

	// ArtifactCIEntityTypeACCOUNT captures enum value "ACCOUNT"
	ArtifactCIEntityTypeACCOUNT string = "ACCOUNT"

	// ArtifactCIEntityTypeARTIFACTORY captures enum value "ARTIFACTORY"
	ArtifactCIEntityTypeARTIFACTORY string = "ARTIFACTORY"
)

// prop value enum
func (m *ArtifactCI) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, artifactCITypeEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ArtifactCI) validateEntityType(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("entityType", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

var artifactCITypeIntegrationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EXTERNAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactCITypeIntegrationTypePropEnum = append(artifactCITypeIntegrationTypePropEnum, v)
	}
}

const (

	// ArtifactCIIntegrationTypeEXTERNAL captures enum value "EXTERNAL"
	ArtifactCIIntegrationTypeEXTERNAL string = "EXTERNAL"
)

// prop value enum
func (m *ArtifactCI) validateIntegrationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, artifactCITypeIntegrationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ArtifactCI) validateIntegrationType(formats strfmt.Registry) error {

	if err := validate.Required("integrationType", "body", m.IntegrationType); err != nil {
		return err
	}

	// value enum
	if err := m.validateIntegrationTypeEnum("integrationType", "body", *m.IntegrationType); err != nil {
		return err
	}

	return nil
}

func (m *ArtifactCI) validateLastModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedDate", "body", "date-time", m.LastModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var artifactCITypeRegistrationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENVIRONMENT","RELEASE_STREAM","HYBRID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactCITypeRegistrationTypePropEnum = append(artifactCITypeRegistrationTypePropEnum, v)
	}
}

const (

	// ArtifactCIRegistrationTypeENVIRONMENT captures enum value "ENVIRONMENT"
	ArtifactCIRegistrationTypeENVIRONMENT string = "ENVIRONMENT"

	// ArtifactCIRegistrationTypeRELEASESTREAM captures enum value "RELEASE_STREAM"
	ArtifactCIRegistrationTypeRELEASESTREAM string = "RELEASE_STREAM"

	// ArtifactCIRegistrationTypeHYBRID captures enum value "HYBRID"
	ArtifactCIRegistrationTypeHYBRID string = "HYBRID"
)

// prop value enum
func (m *ArtifactCI) validateRegistrationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, artifactCITypeRegistrationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ArtifactCI) validateRegistrationType(formats strfmt.Registry) error {

	if err := validate.Required("registrationType", "body", m.RegistrationType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRegistrationTypeEnum("registrationType", "body", *m.RegistrationType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this artifact c i based on context it is used
func (m *ArtifactCI) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ArtifactCI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtifactCI) UnmarshalBinary(b []byte) error {
	var res ArtifactCI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
