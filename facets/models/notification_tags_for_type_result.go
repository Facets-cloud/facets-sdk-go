// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotificationTagsForTypeResult NotificationTagsForTypeResult
//
// swagger:model NotificationTagsForTypeResult
type NotificationTagsForTypeResult struct {

	// id
	// Enum: ["CLUSTER_NAME","CLUSTER_TYPE","QASUITE_RESULT","DR_ACTION","DR_STATUS","STACK_NAME","SEVERITY","ALERT_NAME","DEPLOYMENT_STATUS","APPLICATION_NAME","SEND_RESOLVED","RELEASE_TYPE"]
	ID string `json:"id,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// tooltip
	Tooltip string `json:"tooltip,omitempty"`
}

// Validate validates this notification tags for type result
func (m *NotificationTagsForTypeResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var notificationTagsForTypeResultTypeIDPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLUSTER_NAME","CLUSTER_TYPE","QASUITE_RESULT","DR_ACTION","DR_STATUS","STACK_NAME","SEVERITY","ALERT_NAME","DEPLOYMENT_STATUS","APPLICATION_NAME","SEND_RESOLVED","RELEASE_TYPE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationTagsForTypeResultTypeIDPropEnum = append(notificationTagsForTypeResultTypeIDPropEnum, v)
	}
}

const (

	// NotificationTagsForTypeResultIDCLUSTERNAME captures enum value "CLUSTER_NAME"
	NotificationTagsForTypeResultIDCLUSTERNAME string = "CLUSTER_NAME"

	// NotificationTagsForTypeResultIDCLUSTERTYPE captures enum value "CLUSTER_TYPE"
	NotificationTagsForTypeResultIDCLUSTERTYPE string = "CLUSTER_TYPE"

	// NotificationTagsForTypeResultIDQASUITERESULT captures enum value "QASUITE_RESULT"
	NotificationTagsForTypeResultIDQASUITERESULT string = "QASUITE_RESULT"

	// NotificationTagsForTypeResultIDDRACTION captures enum value "DR_ACTION"
	NotificationTagsForTypeResultIDDRACTION string = "DR_ACTION"

	// NotificationTagsForTypeResultIDDRSTATUS captures enum value "DR_STATUS"
	NotificationTagsForTypeResultIDDRSTATUS string = "DR_STATUS"

	// NotificationTagsForTypeResultIDSTACKNAME captures enum value "STACK_NAME"
	NotificationTagsForTypeResultIDSTACKNAME string = "STACK_NAME"

	// NotificationTagsForTypeResultIDSEVERITY captures enum value "SEVERITY"
	NotificationTagsForTypeResultIDSEVERITY string = "SEVERITY"

	// NotificationTagsForTypeResultIDALERTNAME captures enum value "ALERT_NAME"
	NotificationTagsForTypeResultIDALERTNAME string = "ALERT_NAME"

	// NotificationTagsForTypeResultIDDEPLOYMENTSTATUS captures enum value "DEPLOYMENT_STATUS"
	NotificationTagsForTypeResultIDDEPLOYMENTSTATUS string = "DEPLOYMENT_STATUS"

	// NotificationTagsForTypeResultIDAPPLICATIONNAME captures enum value "APPLICATION_NAME"
	NotificationTagsForTypeResultIDAPPLICATIONNAME string = "APPLICATION_NAME"

	// NotificationTagsForTypeResultIDSENDRESOLVED captures enum value "SEND_RESOLVED"
	NotificationTagsForTypeResultIDSENDRESOLVED string = "SEND_RESOLVED"

	// NotificationTagsForTypeResultIDRELEASETYPE captures enum value "RELEASE_TYPE"
	NotificationTagsForTypeResultIDRELEASETYPE string = "RELEASE_TYPE"
)

// prop value enum
func (m *NotificationTagsForTypeResult) validateIDEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, notificationTagsForTypeResultTypeIDPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NotificationTagsForTypeResult) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	// value enum
	if err := m.validateIDEnum("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this notification tags for type result based on context it is used
func (m *NotificationTagsForTypeResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NotificationTagsForTypeResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationTagsForTypeResult) UnmarshalBinary(b []byte) error {
	var res NotificationTagsForTypeResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
