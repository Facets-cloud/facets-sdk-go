// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RBDVolumeSource r b d volume source
//
// swagger:model RBDVolumeSource
type RBDVolumeSource struct {

	// fs type
	FsType string `json:"fsType,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// keyring
	Keyring string `json:"keyring,omitempty"`

	// monitors
	Monitors []string `json:"monitors"`

	// pool
	Pool string `json:"pool,omitempty"`

	// read only
	ReadOnly bool `json:"readOnly,omitempty"`

	// secret ref
	SecretRef *LocalObjectReference `json:"secretRef,omitempty"`

	// user
	User string `json:"user,omitempty"`
}

// Validate validates this r b d volume source
func (m *RBDVolumeSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RBDVolumeSource) validateSecretRef(formats strfmt.Registry) error {
	if swag.IsZero(m.SecretRef) { // not required
		return nil
	}

	if m.SecretRef != nil {
		if err := m.SecretRef.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("secretRef")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("secretRef")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this r b d volume source based on the context it is used
func (m *RBDVolumeSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSecretRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RBDVolumeSource) contextValidateSecretRef(ctx context.Context, formats strfmt.Registry) error {

	if m.SecretRef != nil {

		if swag.IsZero(m.SecretRef) { // not required
			return nil
		}

		if err := m.SecretRef.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("secretRef")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("secretRef")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RBDVolumeSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RBDVolumeSource) UnmarshalBinary(b []byte) error {
	var res RBDVolumeSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
