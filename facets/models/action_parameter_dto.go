// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActionParameterDto Defines a parameter that can be passed to an action
//
// swagger:model ActionParameterDto
type ActionParameterDto struct {

	// default value
	DefaultValue *ActionParameterValueDto `json:"defaultValue,omitempty"`

	// Description of the parameter
	// Example: Docker image name to build
	Description string `json:"description,omitempty"`

	// Name of the parameter
	// Example: image-name
	// Required: true
	Name *string `json:"name"`

	// Properties for object type parameters. Only applicable when type is 'object'
	// Unique: true
	Properties []string `json:"properties"`

	// Type of the parameter
	// Example: string
	// Required: true
	// Enum: ["string","array","object"]
	Type *string `json:"type"`
}

// Validate validates this action parameter dto
func (m *ActionParameterDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActionParameterDto) validateDefaultValue(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultValue) { // not required
		return nil
	}

	if m.DefaultValue != nil {
		if err := m.DefaultValue.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("defaultValue")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("defaultValue")
			}

			return err
		}
	}

	return nil
}

func (m *ActionParameterDto) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ActionParameterDto) validateProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if err := validate.UniqueItems("properties", "body", m.Properties); err != nil {
		return err
	}

	return nil
}

var actionParameterDtoTypeTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","array","object"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionParameterDtoTypeTypePropEnum = append(actionParameterDtoTypeTypePropEnum, v)
	}
}

const (

	// ActionParameterDtoTypeString captures enum value "string"
	ActionParameterDtoTypeString string = "string"

	// ActionParameterDtoTypeArray captures enum value "array"
	ActionParameterDtoTypeArray string = "array"

	// ActionParameterDtoTypeObject captures enum value "object"
	ActionParameterDtoTypeObject string = "object"
)

// prop value enum
func (m *ActionParameterDto) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, actionParameterDtoTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActionParameterDto) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this action parameter dto based on the context it is used
func (m *ActionParameterDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefaultValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActionParameterDto) contextValidateDefaultValue(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultValue != nil {

		if swag.IsZero(m.DefaultValue) { // not required
			return nil
		}

		if err := m.DefaultValue.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("defaultValue")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("defaultValue")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActionParameterDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActionParameterDto) UnmarshalBinary(b []byte) error {
	var res ActionParameterDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
