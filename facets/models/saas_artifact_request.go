// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SaasArtifactRequest Request details for registering a SaaS artifact.
//
// swagger:model SaasArtifactRequest
type SaasArtifactRequest struct {

	// Application name of the artifact.
	// Example: my-app
	ApplicationName string `json:"applicationName,omitempty"`

	// Type of artifact registration.
	// Example: ENVIRONMENT
	// Required: true
	// Enum: ["GIT_REF","ENVIRONMENT","RELEASE_STREAM"]
	ArtifactRegisterType *string `json:"artifactRegisterType"`

	// Artifact register value dependent on register type.
	// Example: release-1.0
	// Required: true
	ArtifactRegisterValue *string `json:"artifactRegisterValue"`

	// URI of the artifact.
	// Example: docker.io/project/image:tag
	// Required: true
	ArtifactURI *string `json:"artifactUri"`

	// Name of the artifactory.
	// Example: DOCKER
	// Required: true
	Artifactory *string `json:"artifactory"`

	// Blueprint name associated with the artifact.
	// Example: blueprint-1
	// Required: true
	BlueprintName *string `json:"blueprintName"`

	// Custom CI name if applicationName is not used.
	// Example: ci-my-app
	CiName string `json:"ciName,omitempty"`

	// External identifier for the artifact.
	// Example: 12345
	ExternalID string `json:"externalId,omitempty"`

	// Repository name in the artifactory.
	// Example: repo-name
	RepositoryName string `json:"repositoryName,omitempty"`

	// The tag of the artifact.
	// Example: v1.0
	Tag string `json:"tag,omitempty"`
}

// Validate validates this saas artifact request
func (m *SaasArtifactRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactRegisterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactRegisterValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlueprintName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var saasArtifactRequestTypeArtifactRegisterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GIT_REF","ENVIRONMENT","RELEASE_STREAM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		saasArtifactRequestTypeArtifactRegisterTypePropEnum = append(saasArtifactRequestTypeArtifactRegisterTypePropEnum, v)
	}
}

const (

	// SaasArtifactRequestArtifactRegisterTypeGITREF captures enum value "GIT_REF"
	SaasArtifactRequestArtifactRegisterTypeGITREF string = "GIT_REF"

	// SaasArtifactRequestArtifactRegisterTypeENVIRONMENT captures enum value "ENVIRONMENT"
	SaasArtifactRequestArtifactRegisterTypeENVIRONMENT string = "ENVIRONMENT"

	// SaasArtifactRequestArtifactRegisterTypeRELEASESTREAM captures enum value "RELEASE_STREAM"
	SaasArtifactRequestArtifactRegisterTypeRELEASESTREAM string = "RELEASE_STREAM"
)

// prop value enum
func (m *SaasArtifactRequest) validateArtifactRegisterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, saasArtifactRequestTypeArtifactRegisterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SaasArtifactRequest) validateArtifactRegisterType(formats strfmt.Registry) error {

	if err := validate.Required("artifactRegisterType", "body", m.ArtifactRegisterType); err != nil {
		return err
	}

	// value enum
	if err := m.validateArtifactRegisterTypeEnum("artifactRegisterType", "body", *m.ArtifactRegisterType); err != nil {
		return err
	}

	return nil
}

func (m *SaasArtifactRequest) validateArtifactRegisterValue(formats strfmt.Registry) error {

	if err := validate.Required("artifactRegisterValue", "body", m.ArtifactRegisterValue); err != nil {
		return err
	}

	return nil
}

func (m *SaasArtifactRequest) validateArtifactURI(formats strfmt.Registry) error {

	if err := validate.Required("artifactUri", "body", m.ArtifactURI); err != nil {
		return err
	}

	return nil
}

func (m *SaasArtifactRequest) validateArtifactory(formats strfmt.Registry) error {

	if err := validate.Required("artifactory", "body", m.Artifactory); err != nil {
		return err
	}

	return nil
}

func (m *SaasArtifactRequest) validateBlueprintName(formats strfmt.Registry) error {

	if err := validate.Required("blueprintName", "body", m.BlueprintName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this saas artifact request based on context it is used
func (m *SaasArtifactRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SaasArtifactRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SaasArtifactRequest) UnmarshalBinary(b []byte) error {
	var res SaasArtifactRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
