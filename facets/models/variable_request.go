// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VariableRequest Variable request with project default and environment values
//
// swagger:model VariableRequest
type VariableRequest struct {

	// Environment-specific values
	// Example: {"clusterid1":"prod_password","clusterid2":"staging_password"}
	ClusterIDToValueMap map[string]string `json:"clusterIdToValueMap,omitempty"`

	// Description of the variable/secret
	// Example: Database connection password
	Description string `json:"description,omitempty"`

	// Whether this is a global variable
	// Example: false
	Global bool `json:"global,omitempty"`

	// secret
	Secret bool `json:"secret,omitempty"`

	// Default value at stack level
	// Example: default_password
	StackDefault string `json:"stackDefault,omitempty"`

	// Name of the variable/secret
	// Example: database_password
	// Required: true
	VariableName *string `json:"variableName"`
}

// Validate validates this variable request
func (m *VariableRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVariableName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VariableRequest) validateVariableName(formats strfmt.Registry) error {

	if err := validate.Required("variableName", "body", m.VariableName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this variable request based on context it is used
func (m *VariableRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VariableRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VariableRequest) UnmarshalBinary(b []byte) error {
	var res VariableRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
