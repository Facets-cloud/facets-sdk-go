// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserGroup user group
//
// swagger:model UserGroup
type UserGroup struct {

	// accounts
	// Unique: true
	Accounts []string `json:"accounts"`

	// additional roles
	// Unique: true
	AdditionalRoles []string `json:"additionalRoles"`

	// associated resource groups
	AssociatedResourceGroups []string `json:"associatedResourceGroups"`

	// base role
	BaseRole string `json:"baseRole,omitempty"`

	// change log
	ChangeLog string `json:"changeLog,omitempty"`

	// cluster ids
	// Unique: true
	ClusterIds []string `json:"clusterIds"`

	// cluster role bindings
	ClusterRoleBindings map[string]string `json:"clusterRoleBindings,omitempty"`

	// entity type
	// Enum: ["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]
	EntityType string `json:"entityType,omitempty"`

	// group name
	GroupName string `json:"groupName,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// number of versions
	NumberOfVersions int32 `json:"numberOfVersions,omitempty"`

	// stack names
	// Unique: true
	StackNames []string `json:"stackNames"`

	// versioning key
	VersioningKey string `json:"versioningKey,omitempty"`
}

// Validate validates this user group
func (m *UserGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdditionalRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackNames(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserGroup) validateAccounts(formats strfmt.Registry) error {
	if swag.IsZero(m.Accounts) { // not required
		return nil
	}

	if err := validate.UniqueItems("accounts", "body", m.Accounts); err != nil {
		return err
	}

	return nil
}

func (m *UserGroup) validateAdditionalRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalRoles) { // not required
		return nil
	}

	if err := validate.UniqueItems("additionalRoles", "body", m.AdditionalRoles); err != nil {
		return err
	}

	return nil
}

func (m *UserGroup) validateClusterIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("clusterIds", "body", m.ClusterIds); err != nil {
		return err
	}

	return nil
}

var userGroupTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLUSTER","BLUE_PRINT","TEMPLATE_INPUT","CONTROL_PLANE","IAC","ARTIFACT_CI","USER_GROUP","ACCOUNT","ARTIFACTORY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userGroupTypeEntityTypePropEnum = append(userGroupTypeEntityTypePropEnum, v)
	}
}

const (

	// UserGroupEntityTypeCLUSTER captures enum value "CLUSTER"
	UserGroupEntityTypeCLUSTER string = "CLUSTER"

	// UserGroupEntityTypeBLUEPRINT captures enum value "BLUE_PRINT"
	UserGroupEntityTypeBLUEPRINT string = "BLUE_PRINT"

	// UserGroupEntityTypeTEMPLATEINPUT captures enum value "TEMPLATE_INPUT"
	UserGroupEntityTypeTEMPLATEINPUT string = "TEMPLATE_INPUT"

	// UserGroupEntityTypeCONTROLPLANE captures enum value "CONTROL_PLANE"
	UserGroupEntityTypeCONTROLPLANE string = "CONTROL_PLANE"

	// UserGroupEntityTypeIAC captures enum value "IAC"
	UserGroupEntityTypeIAC string = "IAC"

	// UserGroupEntityTypeARTIFACTCI captures enum value "ARTIFACT_CI"
	UserGroupEntityTypeARTIFACTCI string = "ARTIFACT_CI"

	// UserGroupEntityTypeUSERGROUP captures enum value "USER_GROUP"
	UserGroupEntityTypeUSERGROUP string = "USER_GROUP"

	// UserGroupEntityTypeACCOUNT captures enum value "ACCOUNT"
	UserGroupEntityTypeACCOUNT string = "ACCOUNT"

	// UserGroupEntityTypeARTIFACTORY captures enum value "ARTIFACTORY"
	UserGroupEntityTypeARTIFACTORY string = "ARTIFACTORY"
)

// prop value enum
func (m *UserGroup) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userGroupTypeEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserGroup) validateEntityType(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("entityType", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *UserGroup) validateStackNames(formats strfmt.Registry) error {
	if swag.IsZero(m.StackNames) { // not required
		return nil
	}

	if err := validate.UniqueItems("stackNames", "body", m.StackNames); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user group based on context it is used
func (m *UserGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserGroup) UnmarshalBinary(b []byte) error {
	var res UserGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
