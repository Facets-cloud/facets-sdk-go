// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserGroup user group
//
// swagger:model UserGroup
type UserGroup struct {

	// accounts
	// Unique: true
	Accounts []string `json:"accounts"`

	// additional roles
	// Unique: true
	AdditionalRoles []string `json:"additionalRoles"`

	// associated resource groups
	AssociatedResourceGroups []string `json:"associatedResourceGroups"`

	// base role
	BaseRole string `json:"baseRole,omitempty"`

	// change log
	ChangeLog string `json:"changeLog,omitempty"`

	// cluster ids
	// Unique: true
	ClusterIds []string `json:"clusterIds"`

	// cluster role bindings
	ClusterRoleBindings map[string]string `json:"clusterRoleBindings,omitempty"`

	// group name
	GroupName string `json:"groupName,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// stack names
	// Unique: true
	StackNames []string `json:"stackNames"`

	// versioning key
	VersioningKey string `json:"versioningKey,omitempty"`
}

// Validate validates this user group
func (m *UserGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdditionalRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackNames(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserGroup) validateAccounts(formats strfmt.Registry) error {
	if swag.IsZero(m.Accounts) { // not required
		return nil
	}

	if err := validate.UniqueItems("accounts", "body", m.Accounts); err != nil {
		return err
	}

	return nil
}

func (m *UserGroup) validateAdditionalRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalRoles) { // not required
		return nil
	}

	if err := validate.UniqueItems("additionalRoles", "body", m.AdditionalRoles); err != nil {
		return err
	}

	return nil
}

func (m *UserGroup) validateClusterIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("clusterIds", "body", m.ClusterIds); err != nil {
		return err
	}

	return nil
}

func (m *UserGroup) validateStackNames(formats strfmt.Registry) error {
	if swag.IsZero(m.StackNames) { // not required
		return nil
	}

	if err := validate.UniqueItems("stackNames", "body", m.StackNames); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user group based on context it is used
func (m *UserGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserGroup) UnmarshalBinary(b []byte) error {
	var res UserGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
