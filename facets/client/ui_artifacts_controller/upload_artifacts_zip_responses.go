// Code generated by go-swagger; DO NOT EDIT.

package ui_artifacts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UploadArtifactsZipReader is a Reader for the UploadArtifactsZip structure.
type UploadArtifactsZipReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadArtifactsZipReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadArtifactsZipOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadArtifactsZipBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUploadArtifactsZipNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUploadArtifactsZipMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadArtifactsZipInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/artifacts/upload] uploadArtifactsZip", response, response.Code())
	}
}

// NewUploadArtifactsZipOK creates a UploadArtifactsZipOK with default headers values
func NewUploadArtifactsZipOK() *UploadArtifactsZipOK {
	return &UploadArtifactsZipOK{}
}

/*
UploadArtifactsZipOK describes a response with status code 200, with default header values.

OK
*/
type UploadArtifactsZipOK struct {
}

// IsSuccess returns true when this upload artifacts zip o k response has a 2xx status code
func (o *UploadArtifactsZipOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upload artifacts zip o k response has a 3xx status code
func (o *UploadArtifactsZipOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload artifacts zip o k response has a 4xx status code
func (o *UploadArtifactsZipOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload artifacts zip o k response has a 5xx status code
func (o *UploadArtifactsZipOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upload artifacts zip o k response a status code equal to that given
func (o *UploadArtifactsZipOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upload artifacts zip o k response
func (o *UploadArtifactsZipOK) Code() int {
	return 200
}

func (o *UploadArtifactsZipOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/upload][%d] uploadArtifactsZipOK", 200)
}

func (o *UploadArtifactsZipOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/upload][%d] uploadArtifactsZipOK", 200)
}

func (o *UploadArtifactsZipOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadArtifactsZipBadRequest creates a UploadArtifactsZipBadRequest with default headers values
func NewUploadArtifactsZipBadRequest() *UploadArtifactsZipBadRequest {
	return &UploadArtifactsZipBadRequest{}
}

/*
UploadArtifactsZipBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UploadArtifactsZipBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upload artifacts zip bad request response has a 2xx status code
func (o *UploadArtifactsZipBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload artifacts zip bad request response has a 3xx status code
func (o *UploadArtifactsZipBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload artifacts zip bad request response has a 4xx status code
func (o *UploadArtifactsZipBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload artifacts zip bad request response has a 5xx status code
func (o *UploadArtifactsZipBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this upload artifacts zip bad request response a status code equal to that given
func (o *UploadArtifactsZipBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the upload artifacts zip bad request response
func (o *UploadArtifactsZipBadRequest) Code() int {
	return 400
}

func (o *UploadArtifactsZipBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/upload][%d] uploadArtifactsZipBadRequest %s", 400, payload)
}

func (o *UploadArtifactsZipBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/upload][%d] uploadArtifactsZipBadRequest %s", 400, payload)
}

func (o *UploadArtifactsZipBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UploadArtifactsZipBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadArtifactsZipNotFound creates a UploadArtifactsZipNotFound with default headers values
func NewUploadArtifactsZipNotFound() *UploadArtifactsZipNotFound {
	return &UploadArtifactsZipNotFound{}
}

/*
UploadArtifactsZipNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UploadArtifactsZipNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upload artifacts zip not found response has a 2xx status code
func (o *UploadArtifactsZipNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload artifacts zip not found response has a 3xx status code
func (o *UploadArtifactsZipNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload artifacts zip not found response has a 4xx status code
func (o *UploadArtifactsZipNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload artifacts zip not found response has a 5xx status code
func (o *UploadArtifactsZipNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this upload artifacts zip not found response a status code equal to that given
func (o *UploadArtifactsZipNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the upload artifacts zip not found response
func (o *UploadArtifactsZipNotFound) Code() int {
	return 404
}

func (o *UploadArtifactsZipNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/upload][%d] uploadArtifactsZipNotFound %s", 404, payload)
}

func (o *UploadArtifactsZipNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/upload][%d] uploadArtifactsZipNotFound %s", 404, payload)
}

func (o *UploadArtifactsZipNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UploadArtifactsZipNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadArtifactsZipMethodNotAllowed creates a UploadArtifactsZipMethodNotAllowed with default headers values
func NewUploadArtifactsZipMethodNotAllowed() *UploadArtifactsZipMethodNotAllowed {
	return &UploadArtifactsZipMethodNotAllowed{}
}

/*
UploadArtifactsZipMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UploadArtifactsZipMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upload artifacts zip method not allowed response has a 2xx status code
func (o *UploadArtifactsZipMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload artifacts zip method not allowed response has a 3xx status code
func (o *UploadArtifactsZipMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload artifacts zip method not allowed response has a 4xx status code
func (o *UploadArtifactsZipMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload artifacts zip method not allowed response has a 5xx status code
func (o *UploadArtifactsZipMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this upload artifacts zip method not allowed response a status code equal to that given
func (o *UploadArtifactsZipMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the upload artifacts zip method not allowed response
func (o *UploadArtifactsZipMethodNotAllowed) Code() int {
	return 405
}

func (o *UploadArtifactsZipMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/upload][%d] uploadArtifactsZipMethodNotAllowed %s", 405, payload)
}

func (o *UploadArtifactsZipMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/upload][%d] uploadArtifactsZipMethodNotAllowed %s", 405, payload)
}

func (o *UploadArtifactsZipMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UploadArtifactsZipMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadArtifactsZipInternalServerError creates a UploadArtifactsZipInternalServerError with default headers values
func NewUploadArtifactsZipInternalServerError() *UploadArtifactsZipInternalServerError {
	return &UploadArtifactsZipInternalServerError{}
}

/*
UploadArtifactsZipInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UploadArtifactsZipInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upload artifacts zip internal server error response has a 2xx status code
func (o *UploadArtifactsZipInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload artifacts zip internal server error response has a 3xx status code
func (o *UploadArtifactsZipInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload artifacts zip internal server error response has a 4xx status code
func (o *UploadArtifactsZipInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload artifacts zip internal server error response has a 5xx status code
func (o *UploadArtifactsZipInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this upload artifacts zip internal server error response a status code equal to that given
func (o *UploadArtifactsZipInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the upload artifacts zip internal server error response
func (o *UploadArtifactsZipInternalServerError) Code() int {
	return 500
}

func (o *UploadArtifactsZipInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/upload][%d] uploadArtifactsZipInternalServerError %s", 500, payload)
}

func (o *UploadArtifactsZipInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/upload][%d] uploadArtifactsZipInternalServerError %s", 500, payload)
}

func (o *UploadArtifactsZipInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UploadArtifactsZipInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UploadArtifactsZipBody upload artifacts zip body
swagger:model UploadArtifactsZipBody
*/
type UploadArtifactsZipBody struct {

	// artifact request
	// Required: true
	ArtifactRequest *string `json:"artifactRequest"`

	// file
	// Required: true
	// Format: binary
	File io.ReadCloser `json:"file"`
}

// Validate validates this upload artifacts zip body
func (o *UploadArtifactsZipBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateArtifactRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadArtifactsZipBody) validateArtifactRequest(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"artifactRequest", "body", o.ArtifactRequest); err != nil {
		return err
	}

	return nil
}

func (o *UploadArtifactsZipBody) validateFile(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"file", "body", io.ReadCloser(o.File)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this upload artifacts zip body based on context it is used
func (o *UploadArtifactsZipBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UploadArtifactsZipBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadArtifactsZipBody) UnmarshalBinary(b []byte) error {
	var res UploadArtifactsZipBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
