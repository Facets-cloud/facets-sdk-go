// Code generated by go-swagger; DO NOT EDIT.

package ui_artifacts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateReleaseStreamReader is a Reader for the UpdateReleaseStream structure.
type UpdateReleaseStreamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateReleaseStreamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateReleaseStreamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateReleaseStreamBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateReleaseStreamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateReleaseStreamMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateReleaseStreamInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/artifacts/clusterId/{clusterId}/currentReleaseStream/{currentReleaseStream}/updatedReleaseStream/{updatedReleaseStream}/updateStream] updateReleaseStream", response, response.Code())
	}
}

// NewUpdateReleaseStreamOK creates a UpdateReleaseStreamOK with default headers values
func NewUpdateReleaseStreamOK() *UpdateReleaseStreamOK {
	return &UpdateReleaseStreamOK{}
}

/*
UpdateReleaseStreamOK describes a response with status code 200, with default header values.

OK
*/
type UpdateReleaseStreamOK struct {
	Payload interface{}
}

// IsSuccess returns true when this update release stream o k response has a 2xx status code
func (o *UpdateReleaseStreamOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update release stream o k response has a 3xx status code
func (o *UpdateReleaseStreamOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update release stream o k response has a 4xx status code
func (o *UpdateReleaseStreamOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update release stream o k response has a 5xx status code
func (o *UpdateReleaseStreamOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update release stream o k response a status code equal to that given
func (o *UpdateReleaseStreamOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update release stream o k response
func (o *UpdateReleaseStreamOK) Code() int {
	return 200
}

func (o *UpdateReleaseStreamOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/clusterId/{clusterId}/currentReleaseStream/{currentReleaseStream}/updatedReleaseStream/{updatedReleaseStream}/updateStream][%d] updateReleaseStreamOK %s", 200, payload)
}

func (o *UpdateReleaseStreamOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/clusterId/{clusterId}/currentReleaseStream/{currentReleaseStream}/updatedReleaseStream/{updatedReleaseStream}/updateStream][%d] updateReleaseStreamOK %s", 200, payload)
}

func (o *UpdateReleaseStreamOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateReleaseStreamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReleaseStreamBadRequest creates a UpdateReleaseStreamBadRequest with default headers values
func NewUpdateReleaseStreamBadRequest() *UpdateReleaseStreamBadRequest {
	return &UpdateReleaseStreamBadRequest{}
}

/*
UpdateReleaseStreamBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateReleaseStreamBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update release stream bad request response has a 2xx status code
func (o *UpdateReleaseStreamBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update release stream bad request response has a 3xx status code
func (o *UpdateReleaseStreamBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update release stream bad request response has a 4xx status code
func (o *UpdateReleaseStreamBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update release stream bad request response has a 5xx status code
func (o *UpdateReleaseStreamBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update release stream bad request response a status code equal to that given
func (o *UpdateReleaseStreamBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update release stream bad request response
func (o *UpdateReleaseStreamBadRequest) Code() int {
	return 400
}

func (o *UpdateReleaseStreamBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/clusterId/{clusterId}/currentReleaseStream/{currentReleaseStream}/updatedReleaseStream/{updatedReleaseStream}/updateStream][%d] updateReleaseStreamBadRequest %s", 400, payload)
}

func (o *UpdateReleaseStreamBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/clusterId/{clusterId}/currentReleaseStream/{currentReleaseStream}/updatedReleaseStream/{updatedReleaseStream}/updateStream][%d] updateReleaseStreamBadRequest %s", 400, payload)
}

func (o *UpdateReleaseStreamBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateReleaseStreamBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReleaseStreamNotFound creates a UpdateReleaseStreamNotFound with default headers values
func NewUpdateReleaseStreamNotFound() *UpdateReleaseStreamNotFound {
	return &UpdateReleaseStreamNotFound{}
}

/*
UpdateReleaseStreamNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateReleaseStreamNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update release stream not found response has a 2xx status code
func (o *UpdateReleaseStreamNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update release stream not found response has a 3xx status code
func (o *UpdateReleaseStreamNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update release stream not found response has a 4xx status code
func (o *UpdateReleaseStreamNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update release stream not found response has a 5xx status code
func (o *UpdateReleaseStreamNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update release stream not found response a status code equal to that given
func (o *UpdateReleaseStreamNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update release stream not found response
func (o *UpdateReleaseStreamNotFound) Code() int {
	return 404
}

func (o *UpdateReleaseStreamNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/clusterId/{clusterId}/currentReleaseStream/{currentReleaseStream}/updatedReleaseStream/{updatedReleaseStream}/updateStream][%d] updateReleaseStreamNotFound %s", 404, payload)
}

func (o *UpdateReleaseStreamNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/clusterId/{clusterId}/currentReleaseStream/{currentReleaseStream}/updatedReleaseStream/{updatedReleaseStream}/updateStream][%d] updateReleaseStreamNotFound %s", 404, payload)
}

func (o *UpdateReleaseStreamNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateReleaseStreamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReleaseStreamMethodNotAllowed creates a UpdateReleaseStreamMethodNotAllowed with default headers values
func NewUpdateReleaseStreamMethodNotAllowed() *UpdateReleaseStreamMethodNotAllowed {
	return &UpdateReleaseStreamMethodNotAllowed{}
}

/*
UpdateReleaseStreamMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateReleaseStreamMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update release stream method not allowed response has a 2xx status code
func (o *UpdateReleaseStreamMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update release stream method not allowed response has a 3xx status code
func (o *UpdateReleaseStreamMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update release stream method not allowed response has a 4xx status code
func (o *UpdateReleaseStreamMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update release stream method not allowed response has a 5xx status code
func (o *UpdateReleaseStreamMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update release stream method not allowed response a status code equal to that given
func (o *UpdateReleaseStreamMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update release stream method not allowed response
func (o *UpdateReleaseStreamMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateReleaseStreamMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/clusterId/{clusterId}/currentReleaseStream/{currentReleaseStream}/updatedReleaseStream/{updatedReleaseStream}/updateStream][%d] updateReleaseStreamMethodNotAllowed %s", 405, payload)
}

func (o *UpdateReleaseStreamMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/clusterId/{clusterId}/currentReleaseStream/{currentReleaseStream}/updatedReleaseStream/{updatedReleaseStream}/updateStream][%d] updateReleaseStreamMethodNotAllowed %s", 405, payload)
}

func (o *UpdateReleaseStreamMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateReleaseStreamMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReleaseStreamInternalServerError creates a UpdateReleaseStreamInternalServerError with default headers values
func NewUpdateReleaseStreamInternalServerError() *UpdateReleaseStreamInternalServerError {
	return &UpdateReleaseStreamInternalServerError{}
}

/*
UpdateReleaseStreamInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateReleaseStreamInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update release stream internal server error response has a 2xx status code
func (o *UpdateReleaseStreamInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update release stream internal server error response has a 3xx status code
func (o *UpdateReleaseStreamInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update release stream internal server error response has a 4xx status code
func (o *UpdateReleaseStreamInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update release stream internal server error response has a 5xx status code
func (o *UpdateReleaseStreamInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update release stream internal server error response a status code equal to that given
func (o *UpdateReleaseStreamInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update release stream internal server error response
func (o *UpdateReleaseStreamInternalServerError) Code() int {
	return 500
}

func (o *UpdateReleaseStreamInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/clusterId/{clusterId}/currentReleaseStream/{currentReleaseStream}/updatedReleaseStream/{updatedReleaseStream}/updateStream][%d] updateReleaseStreamInternalServerError %s", 500, payload)
}

func (o *UpdateReleaseStreamInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/clusterId/{clusterId}/currentReleaseStream/{currentReleaseStream}/updatedReleaseStream/{updatedReleaseStream}/updateStream][%d] updateReleaseStreamInternalServerError %s", 500, payload)
}

func (o *UpdateReleaseStreamInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateReleaseStreamInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
