// Code generated by go-swagger; DO NOT EDIT.

package ui_artifacts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGenerateArtifactPushCredentialsV3UsingPOSTParams creates a new GenerateArtifactPushCredentialsV3UsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGenerateArtifactPushCredentialsV3UsingPOSTParams() *GenerateArtifactPushCredentialsV3UsingPOSTParams {
	return &GenerateArtifactPushCredentialsV3UsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGenerateArtifactPushCredentialsV3UsingPOSTParamsWithTimeout creates a new GenerateArtifactPushCredentialsV3UsingPOSTParams object
// with the ability to set a timeout on a request.
func NewGenerateArtifactPushCredentialsV3UsingPOSTParamsWithTimeout(timeout time.Duration) *GenerateArtifactPushCredentialsV3UsingPOSTParams {
	return &GenerateArtifactPushCredentialsV3UsingPOSTParams{
		timeout: timeout,
	}
}

// NewGenerateArtifactPushCredentialsV3UsingPOSTParamsWithContext creates a new GenerateArtifactPushCredentialsV3UsingPOSTParams object
// with the ability to set a context for a request.
func NewGenerateArtifactPushCredentialsV3UsingPOSTParamsWithContext(ctx context.Context) *GenerateArtifactPushCredentialsV3UsingPOSTParams {
	return &GenerateArtifactPushCredentialsV3UsingPOSTParams{
		Context: ctx,
	}
}

// NewGenerateArtifactPushCredentialsV3UsingPOSTParamsWithHTTPClient creates a new GenerateArtifactPushCredentialsV3UsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewGenerateArtifactPushCredentialsV3UsingPOSTParamsWithHTTPClient(client *http.Client) *GenerateArtifactPushCredentialsV3UsingPOSTParams {
	return &GenerateArtifactPushCredentialsV3UsingPOSTParams{
		HTTPClient: client,
	}
}

/*
GenerateArtifactPushCredentialsV3UsingPOSTParams contains all the parameters to send to the API endpoint

	for the generate artifact push credentials v3 using p o s t operation.

	Typically these are written to a http.Request.
*/
type GenerateArtifactPushCredentialsV3UsingPOSTParams struct {

	/* ArtifactName.

	   artifactName
	*/
	ArtifactName string

	/* Metadata.

	   metadata
	*/
	Metadata []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the generate artifact push credentials v3 using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GenerateArtifactPushCredentialsV3UsingPOSTParams) WithDefaults() *GenerateArtifactPushCredentialsV3UsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the generate artifact push credentials v3 using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GenerateArtifactPushCredentialsV3UsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the generate artifact push credentials v3 using p o s t params
func (o *GenerateArtifactPushCredentialsV3UsingPOSTParams) WithTimeout(timeout time.Duration) *GenerateArtifactPushCredentialsV3UsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the generate artifact push credentials v3 using p o s t params
func (o *GenerateArtifactPushCredentialsV3UsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the generate artifact push credentials v3 using p o s t params
func (o *GenerateArtifactPushCredentialsV3UsingPOSTParams) WithContext(ctx context.Context) *GenerateArtifactPushCredentialsV3UsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the generate artifact push credentials v3 using p o s t params
func (o *GenerateArtifactPushCredentialsV3UsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the generate artifact push credentials v3 using p o s t params
func (o *GenerateArtifactPushCredentialsV3UsingPOSTParams) WithHTTPClient(client *http.Client) *GenerateArtifactPushCredentialsV3UsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the generate artifact push credentials v3 using p o s t params
func (o *GenerateArtifactPushCredentialsV3UsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArtifactName adds the artifactName to the generate artifact push credentials v3 using p o s t params
func (o *GenerateArtifactPushCredentialsV3UsingPOSTParams) WithArtifactName(artifactName string) *GenerateArtifactPushCredentialsV3UsingPOSTParams {
	o.SetArtifactName(artifactName)
	return o
}

// SetArtifactName adds the artifactName to the generate artifact push credentials v3 using p o s t params
func (o *GenerateArtifactPushCredentialsV3UsingPOSTParams) SetArtifactName(artifactName string) {
	o.ArtifactName = artifactName
}

// WithMetadata adds the metadata to the generate artifact push credentials v3 using p o s t params
func (o *GenerateArtifactPushCredentialsV3UsingPOSTParams) WithMetadata(metadata []string) *GenerateArtifactPushCredentialsV3UsingPOSTParams {
	o.SetMetadata(metadata)
	return o
}

// SetMetadata adds the metadata to the generate artifact push credentials v3 using p o s t params
func (o *GenerateArtifactPushCredentialsV3UsingPOSTParams) SetMetadata(metadata []string) {
	o.Metadata = metadata
}

// WriteToRequest writes these params to a swagger request
func (o *GenerateArtifactPushCredentialsV3UsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param artifactName
	if err := r.SetPathParam("artifactName", o.ArtifactName); err != nil {
		return err
	}

	if o.Metadata != nil {

		// binding items for metadata
		joinedMetadata := o.bindParamMetadata(reg)

		// query array param metadata
		if err := r.SetQueryParam("metadata", joinedMetadata...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGenerateArtifactPushCredentialsV3UsingPOST binds the parameter metadata
func (o *GenerateArtifactPushCredentialsV3UsingPOSTParams) bindParamMetadata(formats strfmt.Registry) []string {
	metadataIR := o.Metadata

	var metadataIC []string
	for _, metadataIIR := range metadataIR { // explode []string

		metadataIIV := metadataIIR // string as string
		metadataIC = append(metadataIC, metadataIIV)
	}

	// items.CollectionFormat: ""
	metadataIS := swag.JoinByFormat(metadataIC, "")

	return metadataIS
}
