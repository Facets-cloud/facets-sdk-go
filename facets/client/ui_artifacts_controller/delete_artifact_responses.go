// Code generated by go-swagger; DO NOT EDIT.

package ui_artifacts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteArtifactReader is a Reader for the DeleteArtifact structure.
type DeleteArtifactReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteArtifactReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteArtifactOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteArtifactBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteArtifactNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteArtifactMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteArtifactInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/artifacts/{artifactId}] deleteArtifact", response, response.Code())
	}
}

// NewDeleteArtifactOK creates a DeleteArtifactOK with default headers values
func NewDeleteArtifactOK() *DeleteArtifactOK {
	return &DeleteArtifactOK{}
}

/*
DeleteArtifactOK describes a response with status code 200, with default header values.

OK
*/
type DeleteArtifactOK struct {
}

// IsSuccess returns true when this delete artifact o k response has a 2xx status code
func (o *DeleteArtifactOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete artifact o k response has a 3xx status code
func (o *DeleteArtifactOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete artifact o k response has a 4xx status code
func (o *DeleteArtifactOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete artifact o k response has a 5xx status code
func (o *DeleteArtifactOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete artifact o k response a status code equal to that given
func (o *DeleteArtifactOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete artifact o k response
func (o *DeleteArtifactOK) Code() int {
	return 200
}

func (o *DeleteArtifactOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts/{artifactId}][%d] deleteArtifactOK", 200)
}

func (o *DeleteArtifactOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts/{artifactId}][%d] deleteArtifactOK", 200)
}

func (o *DeleteArtifactOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteArtifactBadRequest creates a DeleteArtifactBadRequest with default headers values
func NewDeleteArtifactBadRequest() *DeleteArtifactBadRequest {
	return &DeleteArtifactBadRequest{}
}

/*
DeleteArtifactBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteArtifactBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete artifact bad request response has a 2xx status code
func (o *DeleteArtifactBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete artifact bad request response has a 3xx status code
func (o *DeleteArtifactBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete artifact bad request response has a 4xx status code
func (o *DeleteArtifactBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete artifact bad request response has a 5xx status code
func (o *DeleteArtifactBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete artifact bad request response a status code equal to that given
func (o *DeleteArtifactBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete artifact bad request response
func (o *DeleteArtifactBadRequest) Code() int {
	return 400
}

func (o *DeleteArtifactBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts/{artifactId}][%d] deleteArtifactBadRequest %s", 400, payload)
}

func (o *DeleteArtifactBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts/{artifactId}][%d] deleteArtifactBadRequest %s", 400, payload)
}

func (o *DeleteArtifactBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteArtifactBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteArtifactNotFound creates a DeleteArtifactNotFound with default headers values
func NewDeleteArtifactNotFound() *DeleteArtifactNotFound {
	return &DeleteArtifactNotFound{}
}

/*
DeleteArtifactNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteArtifactNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete artifact not found response has a 2xx status code
func (o *DeleteArtifactNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete artifact not found response has a 3xx status code
func (o *DeleteArtifactNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete artifact not found response has a 4xx status code
func (o *DeleteArtifactNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete artifact not found response has a 5xx status code
func (o *DeleteArtifactNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete artifact not found response a status code equal to that given
func (o *DeleteArtifactNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete artifact not found response
func (o *DeleteArtifactNotFound) Code() int {
	return 404
}

func (o *DeleteArtifactNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts/{artifactId}][%d] deleteArtifactNotFound %s", 404, payload)
}

func (o *DeleteArtifactNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts/{artifactId}][%d] deleteArtifactNotFound %s", 404, payload)
}

func (o *DeleteArtifactNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteArtifactNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteArtifactMethodNotAllowed creates a DeleteArtifactMethodNotAllowed with default headers values
func NewDeleteArtifactMethodNotAllowed() *DeleteArtifactMethodNotAllowed {
	return &DeleteArtifactMethodNotAllowed{}
}

/*
DeleteArtifactMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DeleteArtifactMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete artifact method not allowed response has a 2xx status code
func (o *DeleteArtifactMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete artifact method not allowed response has a 3xx status code
func (o *DeleteArtifactMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete artifact method not allowed response has a 4xx status code
func (o *DeleteArtifactMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete artifact method not allowed response has a 5xx status code
func (o *DeleteArtifactMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete artifact method not allowed response a status code equal to that given
func (o *DeleteArtifactMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the delete artifact method not allowed response
func (o *DeleteArtifactMethodNotAllowed) Code() int {
	return 405
}

func (o *DeleteArtifactMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts/{artifactId}][%d] deleteArtifactMethodNotAllowed %s", 405, payload)
}

func (o *DeleteArtifactMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts/{artifactId}][%d] deleteArtifactMethodNotAllowed %s", 405, payload)
}

func (o *DeleteArtifactMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteArtifactMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteArtifactInternalServerError creates a DeleteArtifactInternalServerError with default headers values
func NewDeleteArtifactInternalServerError() *DeleteArtifactInternalServerError {
	return &DeleteArtifactInternalServerError{}
}

/*
DeleteArtifactInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteArtifactInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete artifact internal server error response has a 2xx status code
func (o *DeleteArtifactInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete artifact internal server error response has a 3xx status code
func (o *DeleteArtifactInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete artifact internal server error response has a 4xx status code
func (o *DeleteArtifactInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete artifact internal server error response has a 5xx status code
func (o *DeleteArtifactInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete artifact internal server error response a status code equal to that given
func (o *DeleteArtifactInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete artifact internal server error response
func (o *DeleteArtifactInternalServerError) Code() int {
	return 500
}

func (o *DeleteArtifactInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts/{artifactId}][%d] deleteArtifactInternalServerError %s", 500, payload)
}

func (o *DeleteArtifactInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts/{artifactId}][%d] deleteArtifactInternalServerError %s", 500, payload)
}

func (o *DeleteArtifactInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteArtifactInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
