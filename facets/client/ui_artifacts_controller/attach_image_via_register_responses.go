// Code generated by go-swagger; DO NOT EDIT.

package ui_artifacts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// AttachImageViaRegisterReader is a Reader for the AttachImageViaRegister structure.
type AttachImageViaRegisterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AttachImageViaRegisterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAttachImageViaRegisterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAttachImageViaRegisterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAttachImageViaRegisterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewAttachImageViaRegisterMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAttachImageViaRegisterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/artifacts/attach-image-via-register] attachImageViaRegister", response, response.Code())
	}
}

// NewAttachImageViaRegisterOK creates a AttachImageViaRegisterOK with default headers values
func NewAttachImageViaRegisterOK() *AttachImageViaRegisterOK {
	return &AttachImageViaRegisterOK{}
}

/*
AttachImageViaRegisterOK describes a response with status code 200, with default header values.

OK
*/
type AttachImageViaRegisterOK struct {
}

// IsSuccess returns true when this attach image via register o k response has a 2xx status code
func (o *AttachImageViaRegisterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this attach image via register o k response has a 3xx status code
func (o *AttachImageViaRegisterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach image via register o k response has a 4xx status code
func (o *AttachImageViaRegisterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this attach image via register o k response has a 5xx status code
func (o *AttachImageViaRegisterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this attach image via register o k response a status code equal to that given
func (o *AttachImageViaRegisterOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the attach image via register o k response
func (o *AttachImageViaRegisterOK) Code() int {
	return 200
}

func (o *AttachImageViaRegisterOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/attach-image-via-register][%d] attachImageViaRegisterOK", 200)
}

func (o *AttachImageViaRegisterOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/attach-image-via-register][%d] attachImageViaRegisterOK", 200)
}

func (o *AttachImageViaRegisterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAttachImageViaRegisterBadRequest creates a AttachImageViaRegisterBadRequest with default headers values
func NewAttachImageViaRegisterBadRequest() *AttachImageViaRegisterBadRequest {
	return &AttachImageViaRegisterBadRequest{}
}

/*
AttachImageViaRegisterBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AttachImageViaRegisterBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this attach image via register bad request response has a 2xx status code
func (o *AttachImageViaRegisterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach image via register bad request response has a 3xx status code
func (o *AttachImageViaRegisterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach image via register bad request response has a 4xx status code
func (o *AttachImageViaRegisterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach image via register bad request response has a 5xx status code
func (o *AttachImageViaRegisterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this attach image via register bad request response a status code equal to that given
func (o *AttachImageViaRegisterBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the attach image via register bad request response
func (o *AttachImageViaRegisterBadRequest) Code() int {
	return 400
}

func (o *AttachImageViaRegisterBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/attach-image-via-register][%d] attachImageViaRegisterBadRequest %s", 400, payload)
}

func (o *AttachImageViaRegisterBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/attach-image-via-register][%d] attachImageViaRegisterBadRequest %s", 400, payload)
}

func (o *AttachImageViaRegisterBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AttachImageViaRegisterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachImageViaRegisterNotFound creates a AttachImageViaRegisterNotFound with default headers values
func NewAttachImageViaRegisterNotFound() *AttachImageViaRegisterNotFound {
	return &AttachImageViaRegisterNotFound{}
}

/*
AttachImageViaRegisterNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AttachImageViaRegisterNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this attach image via register not found response has a 2xx status code
func (o *AttachImageViaRegisterNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach image via register not found response has a 3xx status code
func (o *AttachImageViaRegisterNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach image via register not found response has a 4xx status code
func (o *AttachImageViaRegisterNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach image via register not found response has a 5xx status code
func (o *AttachImageViaRegisterNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this attach image via register not found response a status code equal to that given
func (o *AttachImageViaRegisterNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the attach image via register not found response
func (o *AttachImageViaRegisterNotFound) Code() int {
	return 404
}

func (o *AttachImageViaRegisterNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/attach-image-via-register][%d] attachImageViaRegisterNotFound %s", 404, payload)
}

func (o *AttachImageViaRegisterNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/attach-image-via-register][%d] attachImageViaRegisterNotFound %s", 404, payload)
}

func (o *AttachImageViaRegisterNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AttachImageViaRegisterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachImageViaRegisterMethodNotAllowed creates a AttachImageViaRegisterMethodNotAllowed with default headers values
func NewAttachImageViaRegisterMethodNotAllowed() *AttachImageViaRegisterMethodNotAllowed {
	return &AttachImageViaRegisterMethodNotAllowed{}
}

/*
AttachImageViaRegisterMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type AttachImageViaRegisterMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this attach image via register method not allowed response has a 2xx status code
func (o *AttachImageViaRegisterMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach image via register method not allowed response has a 3xx status code
func (o *AttachImageViaRegisterMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach image via register method not allowed response has a 4xx status code
func (o *AttachImageViaRegisterMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach image via register method not allowed response has a 5xx status code
func (o *AttachImageViaRegisterMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this attach image via register method not allowed response a status code equal to that given
func (o *AttachImageViaRegisterMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the attach image via register method not allowed response
func (o *AttachImageViaRegisterMethodNotAllowed) Code() int {
	return 405
}

func (o *AttachImageViaRegisterMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/attach-image-via-register][%d] attachImageViaRegisterMethodNotAllowed %s", 405, payload)
}

func (o *AttachImageViaRegisterMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/attach-image-via-register][%d] attachImageViaRegisterMethodNotAllowed %s", 405, payload)
}

func (o *AttachImageViaRegisterMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AttachImageViaRegisterMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachImageViaRegisterInternalServerError creates a AttachImageViaRegisterInternalServerError with default headers values
func NewAttachImageViaRegisterInternalServerError() *AttachImageViaRegisterInternalServerError {
	return &AttachImageViaRegisterInternalServerError{}
}

/*
AttachImageViaRegisterInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AttachImageViaRegisterInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this attach image via register internal server error response has a 2xx status code
func (o *AttachImageViaRegisterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach image via register internal server error response has a 3xx status code
func (o *AttachImageViaRegisterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach image via register internal server error response has a 4xx status code
func (o *AttachImageViaRegisterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this attach image via register internal server error response has a 5xx status code
func (o *AttachImageViaRegisterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this attach image via register internal server error response a status code equal to that given
func (o *AttachImageViaRegisterInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the attach image via register internal server error response
func (o *AttachImageViaRegisterInternalServerError) Code() int {
	return 500
}

func (o *AttachImageViaRegisterInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/attach-image-via-register][%d] attachImageViaRegisterInternalServerError %s", 500, payload)
}

func (o *AttachImageViaRegisterInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/attach-image-via-register][%d] attachImageViaRegisterInternalServerError %s", 500, payload)
}

func (o *AttachImageViaRegisterInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AttachImageViaRegisterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
