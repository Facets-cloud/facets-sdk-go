// Code generated by go-swagger; DO NOT EDIT.

package ui_artifacts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RegisterArtifactReader is a Reader for the RegisterArtifact structure.
type RegisterArtifactReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterArtifactReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRegisterArtifactOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRegisterArtifactBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRegisterArtifactNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRegisterArtifactMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRegisterArtifactInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/artifacts/register] registerArtifact", response, response.Code())
	}
}

// NewRegisterArtifactOK creates a RegisterArtifactOK with default headers values
func NewRegisterArtifactOK() *RegisterArtifactOK {
	return &RegisterArtifactOK{}
}

/*
RegisterArtifactOK describes a response with status code 200, with default header values.

OK
*/
type RegisterArtifactOK struct {
	Payload []*models.Artifact
}

// IsSuccess returns true when this register artifact o k response has a 2xx status code
func (o *RegisterArtifactOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this register artifact o k response has a 3xx status code
func (o *RegisterArtifactOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register artifact o k response has a 4xx status code
func (o *RegisterArtifactOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this register artifact o k response has a 5xx status code
func (o *RegisterArtifactOK) IsServerError() bool {
	return false
}

// IsCode returns true when this register artifact o k response a status code equal to that given
func (o *RegisterArtifactOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the register artifact o k response
func (o *RegisterArtifactOK) Code() int {
	return 200
}

func (o *RegisterArtifactOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register][%d] registerArtifactOK %s", 200, payload)
}

func (o *RegisterArtifactOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register][%d] registerArtifactOK %s", 200, payload)
}

func (o *RegisterArtifactOK) GetPayload() []*models.Artifact {
	return o.Payload
}

func (o *RegisterArtifactOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterArtifactBadRequest creates a RegisterArtifactBadRequest with default headers values
func NewRegisterArtifactBadRequest() *RegisterArtifactBadRequest {
	return &RegisterArtifactBadRequest{}
}

/*
RegisterArtifactBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RegisterArtifactBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this register artifact bad request response has a 2xx status code
func (o *RegisterArtifactBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register artifact bad request response has a 3xx status code
func (o *RegisterArtifactBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register artifact bad request response has a 4xx status code
func (o *RegisterArtifactBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this register artifact bad request response has a 5xx status code
func (o *RegisterArtifactBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this register artifact bad request response a status code equal to that given
func (o *RegisterArtifactBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the register artifact bad request response
func (o *RegisterArtifactBadRequest) Code() int {
	return 400
}

func (o *RegisterArtifactBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register][%d] registerArtifactBadRequest %s", 400, payload)
}

func (o *RegisterArtifactBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register][%d] registerArtifactBadRequest %s", 400, payload)
}

func (o *RegisterArtifactBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RegisterArtifactBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterArtifactNotFound creates a RegisterArtifactNotFound with default headers values
func NewRegisterArtifactNotFound() *RegisterArtifactNotFound {
	return &RegisterArtifactNotFound{}
}

/*
RegisterArtifactNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RegisterArtifactNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this register artifact not found response has a 2xx status code
func (o *RegisterArtifactNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register artifact not found response has a 3xx status code
func (o *RegisterArtifactNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register artifact not found response has a 4xx status code
func (o *RegisterArtifactNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this register artifact not found response has a 5xx status code
func (o *RegisterArtifactNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this register artifact not found response a status code equal to that given
func (o *RegisterArtifactNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the register artifact not found response
func (o *RegisterArtifactNotFound) Code() int {
	return 404
}

func (o *RegisterArtifactNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register][%d] registerArtifactNotFound %s", 404, payload)
}

func (o *RegisterArtifactNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register][%d] registerArtifactNotFound %s", 404, payload)
}

func (o *RegisterArtifactNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RegisterArtifactNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterArtifactMethodNotAllowed creates a RegisterArtifactMethodNotAllowed with default headers values
func NewRegisterArtifactMethodNotAllowed() *RegisterArtifactMethodNotAllowed {
	return &RegisterArtifactMethodNotAllowed{}
}

/*
RegisterArtifactMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RegisterArtifactMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this register artifact method not allowed response has a 2xx status code
func (o *RegisterArtifactMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register artifact method not allowed response has a 3xx status code
func (o *RegisterArtifactMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register artifact method not allowed response has a 4xx status code
func (o *RegisterArtifactMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this register artifact method not allowed response has a 5xx status code
func (o *RegisterArtifactMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this register artifact method not allowed response a status code equal to that given
func (o *RegisterArtifactMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the register artifact method not allowed response
func (o *RegisterArtifactMethodNotAllowed) Code() int {
	return 405
}

func (o *RegisterArtifactMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register][%d] registerArtifactMethodNotAllowed %s", 405, payload)
}

func (o *RegisterArtifactMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register][%d] registerArtifactMethodNotAllowed %s", 405, payload)
}

func (o *RegisterArtifactMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RegisterArtifactMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterArtifactInternalServerError creates a RegisterArtifactInternalServerError with default headers values
func NewRegisterArtifactInternalServerError() *RegisterArtifactInternalServerError {
	return &RegisterArtifactInternalServerError{}
}

/*
RegisterArtifactInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RegisterArtifactInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this register artifact internal server error response has a 2xx status code
func (o *RegisterArtifactInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register artifact internal server error response has a 3xx status code
func (o *RegisterArtifactInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register artifact internal server error response has a 4xx status code
func (o *RegisterArtifactInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this register artifact internal server error response has a 5xx status code
func (o *RegisterArtifactInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this register artifact internal server error response a status code equal to that given
func (o *RegisterArtifactInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the register artifact internal server error response
func (o *RegisterArtifactInternalServerError) Code() int {
	return 500
}

func (o *RegisterArtifactInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register][%d] registerArtifactInternalServerError %s", 500, payload)
}

func (o *RegisterArtifactInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register][%d] registerArtifactInternalServerError %s", 500, payload)
}

func (o *RegisterArtifactInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RegisterArtifactInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
