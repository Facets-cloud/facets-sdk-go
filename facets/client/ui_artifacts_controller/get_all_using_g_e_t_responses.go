// Code generated by go-swagger; DO NOT EDIT.

package ui_artifacts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllUsingGETReader is a Reader for the GetAllUsingGET structure.
type GetAllUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/artifacts] getAllUsingGET", response, response.Code())
	}
}

// NewGetAllUsingGETOK creates a GetAllUsingGETOK with default headers values
func NewGetAllUsingGETOK() *GetAllUsingGETOK {
	return &GetAllUsingGETOK{}
}

/*
GetAllUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllUsingGETOK struct {
	Payload []*models.Artifact
}

// IsSuccess returns true when this get all using g e t o k response has a 2xx status code
func (o *GetAllUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all using g e t o k response has a 3xx status code
func (o *GetAllUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all using g e t o k response has a 4xx status code
func (o *GetAllUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all using g e t o k response has a 5xx status code
func (o *GetAllUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all using g e t o k response a status code equal to that given
func (o *GetAllUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all using g e t o k response
func (o *GetAllUsingGETOK) Code() int {
	return 200
}

func (o *GetAllUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/artifacts][%d] getAllUsingGETOK %s", 200, payload)
}

func (o *GetAllUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/artifacts][%d] getAllUsingGETOK %s", 200, payload)
}

func (o *GetAllUsingGETOK) GetPayload() []*models.Artifact {
	return o.Payload
}

func (o *GetAllUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllUsingGETUnauthorized creates a GetAllUsingGETUnauthorized with default headers values
func NewGetAllUsingGETUnauthorized() *GetAllUsingGETUnauthorized {
	return &GetAllUsingGETUnauthorized{}
}

/*
GetAllUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all using g e t unauthorized response has a 2xx status code
func (o *GetAllUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all using g e t unauthorized response has a 3xx status code
func (o *GetAllUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all using g e t unauthorized response has a 4xx status code
func (o *GetAllUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all using g e t unauthorized response has a 5xx status code
func (o *GetAllUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all using g e t unauthorized response a status code equal to that given
func (o *GetAllUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all using g e t unauthorized response
func (o *GetAllUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifacts][%d] getAllUsingGETUnauthorized", 401)
}

func (o *GetAllUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifacts][%d] getAllUsingGETUnauthorized", 401)
}

func (o *GetAllUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllUsingGETForbidden creates a GetAllUsingGETForbidden with default headers values
func NewGetAllUsingGETForbidden() *GetAllUsingGETForbidden {
	return &GetAllUsingGETForbidden{}
}

/*
GetAllUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllUsingGETForbidden struct {
}

// IsSuccess returns true when this get all using g e t forbidden response has a 2xx status code
func (o *GetAllUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all using g e t forbidden response has a 3xx status code
func (o *GetAllUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all using g e t forbidden response has a 4xx status code
func (o *GetAllUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all using g e t forbidden response has a 5xx status code
func (o *GetAllUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all using g e t forbidden response a status code equal to that given
func (o *GetAllUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all using g e t forbidden response
func (o *GetAllUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifacts][%d] getAllUsingGETForbidden", 403)
}

func (o *GetAllUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifacts][%d] getAllUsingGETForbidden", 403)
}

func (o *GetAllUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllUsingGETNotFound creates a GetAllUsingGETNotFound with default headers values
func NewGetAllUsingGETNotFound() *GetAllUsingGETNotFound {
	return &GetAllUsingGETNotFound{}
}

/*
GetAllUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllUsingGETNotFound struct {
}

// IsSuccess returns true when this get all using g e t not found response has a 2xx status code
func (o *GetAllUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all using g e t not found response has a 3xx status code
func (o *GetAllUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all using g e t not found response has a 4xx status code
func (o *GetAllUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all using g e t not found response has a 5xx status code
func (o *GetAllUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all using g e t not found response a status code equal to that given
func (o *GetAllUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all using g e t not found response
func (o *GetAllUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifacts][%d] getAllUsingGETNotFound", 404)
}

func (o *GetAllUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifacts][%d] getAllUsingGETNotFound", 404)
}

func (o *GetAllUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
