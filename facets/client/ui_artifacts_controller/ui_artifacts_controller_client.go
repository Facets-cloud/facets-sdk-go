// Code generated by go-swagger; DO NOT EDIT.

package ui_artifacts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui artifacts controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui artifacts controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui artifacts controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui artifacts controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AttachImageViaRegister(params *AttachImageViaRegisterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AttachImageViaRegisterOK, error)

	DeleteArtifact(params *DeleteArtifactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteArtifactOK, error)

	GenerateArtifactPushCredentialsV2(params *GenerateArtifactPushCredentialsV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateArtifactPushCredentialsV2OK, error)

	GenerateArtifactPushCredentialsV3(params *GenerateArtifactPushCredentialsV3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateArtifactPushCredentialsV3OK, error)

	GenerateArtifactPushCredentials1(params *GenerateArtifactPushCredentials1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateArtifactPushCredentials1OK, error)

	GetArtifactByApplicationName(params *GetArtifactByApplicationNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactByApplicationNameOK, error)

	GetArtifactByClusterID(params *GetArtifactByClusterIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactByClusterIDOK, error)

	GetArtifactsByResourceNameAndResourceType(params *GetArtifactsByResourceNameAndResourceTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactsByResourceNameAndResourceTypeOK, error)

	GetMetadataKeys(params *GetMetadataKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMetadataKeysOK, error)

	PromoteArtifact(params *PromoteArtifactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PromoteArtifactOK, error)

	PromoteArtifactByArtifactCiName(params *PromoteArtifactByArtifactCiNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PromoteArtifactByArtifactCiNameOK, error)

	PushArtifact(params *PushArtifactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PushArtifactOK, error)

	ReclassifyArtifacts(params *ReclassifyArtifactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReclassifyArtifactsOK, error)

	RegisterArtifact(params *RegisterArtifactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactOK, error)

	RegisterArtifactByEnv(params *RegisterArtifactByEnvParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactByEnvOK, error)

	RegisterArtifactByReleaseStream(params *RegisterArtifactByReleaseStreamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactByReleaseStreamOK, error)

	RegisterArtifactSaas1(params *RegisterArtifactSaas1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactSaas1OK, error)

	RegisterArtifactV2(params *RegisterArtifactV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactV2OK, error)

	UpdateReleaseStream(params *UpdateReleaseStreamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReleaseStreamOK, error)

	UploadArtifactsZip(params *UploadArtifactsZipParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadArtifactsZipOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AttachImageViaRegister attach image via register API
*/
func (a *Client) AttachImageViaRegister(params *AttachImageViaRegisterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AttachImageViaRegisterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachImageViaRegisterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "attachImageViaRegister",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/attach-image-via-register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AttachImageViaRegisterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttachImageViaRegisterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for attachImageViaRegister: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteArtifact delete artifact API
*/
func (a *Client) DeleteArtifact(params *DeleteArtifactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteArtifactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteArtifactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteArtifact",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/artifacts/{artifactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteArtifactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteArtifactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteArtifact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GenerateArtifactPushCredentialsV2 generate artifact push credentials v2 API
*/
func (a *Client) GenerateArtifactPushCredentialsV2(params *GenerateArtifactPushCredentialsV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateArtifactPushCredentialsV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateArtifactPushCredentialsV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateArtifactPushCredentialsV2",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/pushCredentialsV2/artifactName/{artifactName}/registrationType/{registrationType}/value/{registrationValue}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateArtifactPushCredentialsV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateArtifactPushCredentialsV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generateArtifactPushCredentialsV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GenerateArtifactPushCredentialsV3 generate artifact push credentials v3 API
*/
func (a *Client) GenerateArtifactPushCredentialsV3(params *GenerateArtifactPushCredentialsV3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateArtifactPushCredentialsV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateArtifactPushCredentialsV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateArtifactPushCredentialsV3",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/pushCredentialsV3/artifactName/{artifactName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateArtifactPushCredentialsV3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateArtifactPushCredentialsV3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generateArtifactPushCredentialsV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GenerateArtifactPushCredentials1 generate artifact push credentials 1 API
*/
func (a *Client) GenerateArtifactPushCredentials1(params *GenerateArtifactPushCredentials1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateArtifactPushCredentials1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateArtifactPushCredentials1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateArtifactPushCredentials_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/pushCredentials/{stackName}/{appName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateArtifactPushCredentials1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateArtifactPushCredentials1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generateArtifactPushCredentials_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactByApplicationName get artifact by application name API
*/
func (a *Client) GetArtifactByApplicationName(params *GetArtifactByApplicationNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactByApplicationNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactByApplicationNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactByApplicationName",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts/cluster/{clusterId}/application/{applicationName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactByApplicationNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactByApplicationNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactByApplicationName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactByClusterID get artifact by cluster Id API
*/
func (a *Client) GetArtifactByClusterID(params *GetArtifactByClusterIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactByClusterIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactByClusterIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactByClusterId",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactByClusterIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactByClusterIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactByClusterId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactsByResourceNameAndResourceType get artifacts by resource name and resource type API
*/
func (a *Client) GetArtifactsByResourceNameAndResourceType(params *GetArtifactsByResourceNameAndResourceTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactsByResourceNameAndResourceTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactsByResourceNameAndResourceTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactsByResourceNameAndResourceType",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts/cluster/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactsByResourceNameAndResourceTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactsByResourceNameAndResourceTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactsByResourceNameAndResourceType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMetadataKeys get metadata keys API
*/
func (a *Client) GetMetadataKeys(params *GetMetadataKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMetadataKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetadataKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMetadataKeys",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts/metadata/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMetadataKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetadataKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMetadataKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PromoteArtifact promote artifact API
*/
func (a *Client) PromoteArtifact(params *PromoteArtifactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PromoteArtifactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPromoteArtifactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "promoteArtifact",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/{ciId}/promote/{artifactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PromoteArtifactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PromoteArtifactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for promoteArtifact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PromoteArtifactByArtifactCiName promote artifact by artifact ci name API
*/
func (a *Client) PromoteArtifactByArtifactCiName(params *PromoteArtifactByArtifactCiNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PromoteArtifactByArtifactCiNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPromoteArtifactByArtifactCiNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "promoteArtifactByArtifactCiName",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/promote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PromoteArtifactByArtifactCiNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PromoteArtifactByArtifactCiNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for promoteArtifactByArtifactCiName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PushArtifact push artifact API
*/
func (a *Client) PushArtifact(params *PushArtifactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PushArtifactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPushArtifactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pushArtifact",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/push",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PushArtifactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PushArtifactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pushArtifact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReclassifyArtifacts reclassify artifacts API
*/
func (a *Client) ReclassifyArtifacts(params *ReclassifyArtifactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReclassifyArtifactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReclassifyArtifactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reclassifyArtifacts",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/artifacts/reclassify",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReclassifyArtifactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReclassifyArtifactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reclassifyArtifacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RegisterArtifact register artifact API
*/
func (a *Client) RegisterArtifact(params *RegisterArtifactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterArtifactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerArtifact",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterArtifactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterArtifactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registerArtifact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RegisterArtifactByEnv register artifact by env API
*/
func (a *Client) RegisterArtifactByEnv(params *RegisterArtifactByEnvParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactByEnvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterArtifactByEnvParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerArtifactByEnv",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/register-by-env",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterArtifactByEnvReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterArtifactByEnvOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registerArtifactByEnv: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RegisterArtifactByReleaseStream register artifact by release stream API
*/
func (a *Client) RegisterArtifactByReleaseStream(params *RegisterArtifactByReleaseStreamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactByReleaseStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterArtifactByReleaseStreamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerArtifactByReleaseStream",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/register-by-release-stream",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterArtifactByReleaseStreamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterArtifactByReleaseStreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registerArtifactByReleaseStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RegisterArtifactSaas1 register artifact saas 1 API
*/
func (a *Client) RegisterArtifactSaas1(params *RegisterArtifactSaas1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactSaas1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterArtifactSaas1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerArtifactSaas_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/register-saas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterArtifactSaas1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterArtifactSaas1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registerArtifactSaas_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RegisterArtifactV2 register artifact v2 API
*/
func (a *Client) RegisterArtifactV2(params *RegisterArtifactV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterArtifactV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerArtifactV2",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/registerV2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterArtifactV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterArtifactV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registerArtifactV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateReleaseStream update release stream API
*/
func (a *Client) UpdateReleaseStream(params *UpdateReleaseStreamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReleaseStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReleaseStreamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateReleaseStream",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/clusterId/{clusterId}/currentReleaseStream/{currentReleaseStream}/updatedReleaseStream/{updatedReleaseStream}/updateStream",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateReleaseStreamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateReleaseStreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateReleaseStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadArtifactsZip upload artifacts zip API
*/
func (a *Client) UploadArtifactsZip(params *UploadArtifactsZipParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadArtifactsZipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadArtifactsZipParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadArtifactsZip",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadArtifactsZipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadArtifactsZipOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadArtifactsZip: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
