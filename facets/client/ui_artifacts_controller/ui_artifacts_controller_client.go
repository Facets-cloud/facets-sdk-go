// Code generated by go-swagger; DO NOT EDIT.

package ui_artifacts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui artifacts controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui artifacts controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui artifacts controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui artifacts controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeMultipartFormData sets the Content-Type header to "multipart/form-data".
func WithContentTypeMultipartFormData(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"multipart/form-data"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AttachImageViaRegisterUsingPOST(params *AttachImageViaRegisterUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AttachImageViaRegisterUsingPOSTOK, *AttachImageViaRegisterUsingPOSTCreated, error)

	DeleteArtifactUsingDELETE(params *DeleteArtifactUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteArtifactUsingDELETEOK, *DeleteArtifactUsingDELETENoContent, error)

	GenerateArtifactPushCredentialsUsingPOST(params *GenerateArtifactPushCredentialsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateArtifactPushCredentialsUsingPOSTOK, *GenerateArtifactPushCredentialsUsingPOSTCreated, error)

	GenerateArtifactPushCredentialsV2UsingPOST(params *GenerateArtifactPushCredentialsV2UsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateArtifactPushCredentialsV2UsingPOSTOK, *GenerateArtifactPushCredentialsV2UsingPOSTCreated, error)

	GenerateArtifactPushCredentialsV3UsingPOST(params *GenerateArtifactPushCredentialsV3UsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateArtifactPushCredentialsV3UsingPOSTOK, *GenerateArtifactPushCredentialsV3UsingPOSTCreated, error)

	GetAllUsingGET(params *GetAllUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUsingGETOK, error)

	GetArtifactByApplicationNameUsingGET(params *GetArtifactByApplicationNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactByApplicationNameUsingGETOK, error)

	GetArtifactByClusterIDUsingGET(params *GetArtifactByClusterIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactByClusterIDUsingGETOK, error)

	GetArtifactsByResourceNameAndResourceTypeUsingGET(params *GetArtifactsByResourceNameAndResourceTypeUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactsByResourceNameAndResourceTypeUsingGETOK, error)

	GetMetadataKeysUsingGET(params *GetMetadataKeysUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMetadataKeysUsingGETOK, error)

	PromoteArtifactByArtifactCiNameUsingPOST(params *PromoteArtifactByArtifactCiNameUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PromoteArtifactByArtifactCiNameUsingPOSTOK, *PromoteArtifactByArtifactCiNameUsingPOSTCreated, error)

	PromoteArtifactUsingPOST(params *PromoteArtifactUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PromoteArtifactUsingPOSTOK, *PromoteArtifactUsingPOSTCreated, error)

	PushArtifactUsingPOST(params *PushArtifactUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PushArtifactUsingPOSTOK, *PushArtifactUsingPOSTCreated, error)

	ReclassifyArtifactsUsingPUT(params *ReclassifyArtifactsUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReclassifyArtifactsUsingPUTOK, *ReclassifyArtifactsUsingPUTCreated, error)

	RegisterArtifactByEnvUsingPOST(params *RegisterArtifactByEnvUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactByEnvUsingPOSTOK, *RegisterArtifactByEnvUsingPOSTCreated, error)

	RegisterArtifactByReleaseStreamUsingPOST(params *RegisterArtifactByReleaseStreamUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactByReleaseStreamUsingPOSTOK, *RegisterArtifactByReleaseStreamUsingPOSTCreated, error)

	RegisterArtifactSaasUsingPOST(params *RegisterArtifactSaasUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactSaasUsingPOSTOK, *RegisterArtifactSaasUsingPOSTCreated, error)

	RegisterArtifactUsingPOST1(params *RegisterArtifactUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactUsingPOST1OK, *RegisterArtifactUsingPOST1Created, error)

	RegisterArtifactV2UsingPOST(params *RegisterArtifactV2UsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactV2UsingPOSTOK, *RegisterArtifactV2UsingPOSTCreated, error)

	UpdateReleaseStreamUsingPOST(params *UpdateReleaseStreamUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReleaseStreamUsingPOSTOK, *UpdateReleaseStreamUsingPOSTCreated, error)

	UploadArtifactsZipUsingPOST(params *UploadArtifactsZipUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadArtifactsZipUsingPOSTOK, *UploadArtifactsZipUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AttachImageViaRegisterUsingPOST attaches image via register
*/
func (a *Client) AttachImageViaRegisterUsingPOST(params *AttachImageViaRegisterUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AttachImageViaRegisterUsingPOSTOK, *AttachImageViaRegisterUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachImageViaRegisterUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "attachImageViaRegisterUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/attach-image-via-register",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AttachImageViaRegisterUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AttachImageViaRegisterUsingPOSTOK:
		return value, nil, nil
	case *AttachImageViaRegisterUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifacts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteArtifactUsingDELETE deletes artifact
*/
func (a *Client) DeleteArtifactUsingDELETE(params *DeleteArtifactUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteArtifactUsingDELETEOK, *DeleteArtifactUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteArtifactUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteArtifactUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/artifacts/{artifactId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteArtifactUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteArtifactUsingDELETEOK:
		return value, nil, nil
	case *DeleteArtifactUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifacts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GenerateArtifactPushCredentialsUsingPOST generates artifact push credentials
*/
func (a *Client) GenerateArtifactPushCredentialsUsingPOST(params *GenerateArtifactPushCredentialsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateArtifactPushCredentialsUsingPOSTOK, *GenerateArtifactPushCredentialsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateArtifactPushCredentialsUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateArtifactPushCredentialsUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/pushCredentials/{stackName}/{appName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateArtifactPushCredentialsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GenerateArtifactPushCredentialsUsingPOSTOK:
		return value, nil, nil
	case *GenerateArtifactPushCredentialsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifacts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GenerateArtifactPushCredentialsV2UsingPOST generates artifact push credentials v2
*/
func (a *Client) GenerateArtifactPushCredentialsV2UsingPOST(params *GenerateArtifactPushCredentialsV2UsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateArtifactPushCredentialsV2UsingPOSTOK, *GenerateArtifactPushCredentialsV2UsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateArtifactPushCredentialsV2UsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateArtifactPushCredentialsV2UsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/pushCredentialsV2/artifactName/{artifactName}/registrationType/{registrationType}/value/{registrationValue}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateArtifactPushCredentialsV2UsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GenerateArtifactPushCredentialsV2UsingPOSTOK:
		return value, nil, nil
	case *GenerateArtifactPushCredentialsV2UsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifacts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GenerateArtifactPushCredentialsV3UsingPOST generates artifact push credentials v3
*/
func (a *Client) GenerateArtifactPushCredentialsV3UsingPOST(params *GenerateArtifactPushCredentialsV3UsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateArtifactPushCredentialsV3UsingPOSTOK, *GenerateArtifactPushCredentialsV3UsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateArtifactPushCredentialsV3UsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateArtifactPushCredentialsV3UsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/pushCredentialsV3/artifactName/{artifactName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateArtifactPushCredentialsV3UsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GenerateArtifactPushCredentialsV3UsingPOSTOK:
		return value, nil, nil
	case *GenerateArtifactPushCredentialsV3UsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifacts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllUsingGET gets all
*/
func (a *Client) GetAllUsingGET(params *GetAllUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactByApplicationNameUsingGET gets artifact by application name
*/
func (a *Client) GetArtifactByApplicationNameUsingGET(params *GetArtifactByApplicationNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactByApplicationNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactByApplicationNameUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactByApplicationNameUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts/cluster/{clusterId}/application/{applicationName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactByApplicationNameUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactByApplicationNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactByApplicationNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactByClusterIDUsingGET gets artifact by cluster Id
*/
func (a *Client) GetArtifactByClusterIDUsingGET(params *GetArtifactByClusterIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactByClusterIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactByClusterIDUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactByClusterIdUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts/{clusterId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactByClusterIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactByClusterIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactByClusterIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactsByResourceNameAndResourceTypeUsingGET gets artifacts by resource name and resource type
*/
func (a *Client) GetArtifactsByResourceNameAndResourceTypeUsingGET(params *GetArtifactsByResourceNameAndResourceTypeUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactsByResourceNameAndResourceTypeUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactsByResourceNameAndResourceTypeUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactsByResourceNameAndResourceTypeUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts/cluster/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactsByResourceNameAndResourceTypeUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactsByResourceNameAndResourceTypeUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactsByResourceNameAndResourceTypeUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMetadataKeysUsingGET gets metadata keys
*/
func (a *Client) GetMetadataKeysUsingGET(params *GetMetadataKeysUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMetadataKeysUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetadataKeysUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMetadataKeysUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts/metadata/keys",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMetadataKeysUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetadataKeysUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMetadataKeysUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PromoteArtifactByArtifactCiNameUsingPOST promotes artifact by artifact ci name
*/
func (a *Client) PromoteArtifactByArtifactCiNameUsingPOST(params *PromoteArtifactByArtifactCiNameUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PromoteArtifactByArtifactCiNameUsingPOSTOK, *PromoteArtifactByArtifactCiNameUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPromoteArtifactByArtifactCiNameUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "promoteArtifactByArtifactCiNameUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/promote",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PromoteArtifactByArtifactCiNameUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PromoteArtifactByArtifactCiNameUsingPOSTOK:
		return value, nil, nil
	case *PromoteArtifactByArtifactCiNameUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifacts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PromoteArtifactUsingPOST promotes artifact
*/
func (a *Client) PromoteArtifactUsingPOST(params *PromoteArtifactUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PromoteArtifactUsingPOSTOK, *PromoteArtifactUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPromoteArtifactUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "promoteArtifactUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/{ciId}/promote/{artifactId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PromoteArtifactUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PromoteArtifactUsingPOSTOK:
		return value, nil, nil
	case *PromoteArtifactUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifacts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PushArtifactUsingPOST pushes artifact
*/
func (a *Client) PushArtifactUsingPOST(params *PushArtifactUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PushArtifactUsingPOSTOK, *PushArtifactUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPushArtifactUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pushArtifactUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/push",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PushArtifactUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PushArtifactUsingPOSTOK:
		return value, nil, nil
	case *PushArtifactUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifacts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReclassifyArtifactsUsingPUT reclassifies artifacts
*/
func (a *Client) ReclassifyArtifactsUsingPUT(params *ReclassifyArtifactsUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReclassifyArtifactsUsingPUTOK, *ReclassifyArtifactsUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReclassifyArtifactsUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reclassifyArtifactsUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/artifacts/reclassify",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReclassifyArtifactsUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReclassifyArtifactsUsingPUTOK:
		return value, nil, nil
	case *ReclassifyArtifactsUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifacts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RegisterArtifactByEnvUsingPOST registers artifact by env
*/
func (a *Client) RegisterArtifactByEnvUsingPOST(params *RegisterArtifactByEnvUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactByEnvUsingPOSTOK, *RegisterArtifactByEnvUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterArtifactByEnvUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerArtifactByEnvUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/register-by-env",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterArtifactByEnvUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RegisterArtifactByEnvUsingPOSTOK:
		return value, nil, nil
	case *RegisterArtifactByEnvUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifacts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RegisterArtifactByReleaseStreamUsingPOST registers artifact by release stream
*/
func (a *Client) RegisterArtifactByReleaseStreamUsingPOST(params *RegisterArtifactByReleaseStreamUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactByReleaseStreamUsingPOSTOK, *RegisterArtifactByReleaseStreamUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterArtifactByReleaseStreamUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerArtifactByReleaseStreamUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/register-by-release-stream",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterArtifactByReleaseStreamUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RegisterArtifactByReleaseStreamUsingPOSTOK:
		return value, nil, nil
	case *RegisterArtifactByReleaseStreamUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifacts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RegisterArtifactSaasUsingPOST registers artifact saas
*/
func (a *Client) RegisterArtifactSaasUsingPOST(params *RegisterArtifactSaasUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactSaasUsingPOSTOK, *RegisterArtifactSaasUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterArtifactSaasUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerArtifactSaasUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/register-saas",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterArtifactSaasUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RegisterArtifactSaasUsingPOSTOK:
		return value, nil, nil
	case *RegisterArtifactSaasUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifacts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RegisterArtifactUsingPOST1 registers artifact
*/
func (a *Client) RegisterArtifactUsingPOST1(params *RegisterArtifactUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactUsingPOST1OK, *RegisterArtifactUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterArtifactUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerArtifactUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/register",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterArtifactUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RegisterArtifactUsingPOST1OK:
		return value, nil, nil
	case *RegisterArtifactUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifacts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RegisterArtifactV2UsingPOST registers artifact v2
*/
func (a *Client) RegisterArtifactV2UsingPOST(params *RegisterArtifactV2UsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactV2UsingPOSTOK, *RegisterArtifactV2UsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterArtifactV2UsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerArtifactV2UsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/registerV2",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterArtifactV2UsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RegisterArtifactV2UsingPOSTOK:
		return value, nil, nil
	case *RegisterArtifactV2UsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifacts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateReleaseStreamUsingPOST updates release stream
*/
func (a *Client) UpdateReleaseStreamUsingPOST(params *UpdateReleaseStreamUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReleaseStreamUsingPOSTOK, *UpdateReleaseStreamUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReleaseStreamUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateReleaseStreamUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/clusterId/{clusterId}/currentReleaseStream/{currentReleaseStream}/updatedReleaseStream/{updatedReleaseStream}/updateStream",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateReleaseStreamUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateReleaseStreamUsingPOSTOK:
		return value, nil, nil
	case *UpdateReleaseStreamUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifacts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadArtifactsZipUsingPOST uploads artifacts zip
*/
func (a *Client) UploadArtifactsZipUsingPOST(params *UploadArtifactsZipUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadArtifactsZipUsingPOSTOK, *UploadArtifactsZipUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadArtifactsZipUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadArtifactsZipUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts/upload",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadArtifactsZipUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UploadArtifactsZipUsingPOSTOK:
		return value, nil, nil
	case *UploadArtifactsZipUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifacts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
