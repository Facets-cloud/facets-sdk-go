// Code generated by go-swagger; DO NOT EDIT.

package ui_artifacts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RegisterArtifactByEnvReader is a Reader for the RegisterArtifactByEnv structure.
type RegisterArtifactByEnvReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterArtifactByEnvReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRegisterArtifactByEnvOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRegisterArtifactByEnvBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRegisterArtifactByEnvNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRegisterArtifactByEnvMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRegisterArtifactByEnvInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/artifacts/register-by-env] registerArtifactByEnv", response, response.Code())
	}
}

// NewRegisterArtifactByEnvOK creates a RegisterArtifactByEnvOK with default headers values
func NewRegisterArtifactByEnvOK() *RegisterArtifactByEnvOK {
	return &RegisterArtifactByEnvOK{}
}

/*
RegisterArtifactByEnvOK describes a response with status code 200, with default header values.

OK
*/
type RegisterArtifactByEnvOK struct {
}

// IsSuccess returns true when this register artifact by env o k response has a 2xx status code
func (o *RegisterArtifactByEnvOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this register artifact by env o k response has a 3xx status code
func (o *RegisterArtifactByEnvOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register artifact by env o k response has a 4xx status code
func (o *RegisterArtifactByEnvOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this register artifact by env o k response has a 5xx status code
func (o *RegisterArtifactByEnvOK) IsServerError() bool {
	return false
}

// IsCode returns true when this register artifact by env o k response a status code equal to that given
func (o *RegisterArtifactByEnvOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the register artifact by env o k response
func (o *RegisterArtifactByEnvOK) Code() int {
	return 200
}

func (o *RegisterArtifactByEnvOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register-by-env][%d] registerArtifactByEnvOK", 200)
}

func (o *RegisterArtifactByEnvOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register-by-env][%d] registerArtifactByEnvOK", 200)
}

func (o *RegisterArtifactByEnvOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterArtifactByEnvBadRequest creates a RegisterArtifactByEnvBadRequest with default headers values
func NewRegisterArtifactByEnvBadRequest() *RegisterArtifactByEnvBadRequest {
	return &RegisterArtifactByEnvBadRequest{}
}

/*
RegisterArtifactByEnvBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RegisterArtifactByEnvBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this register artifact by env bad request response has a 2xx status code
func (o *RegisterArtifactByEnvBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register artifact by env bad request response has a 3xx status code
func (o *RegisterArtifactByEnvBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register artifact by env bad request response has a 4xx status code
func (o *RegisterArtifactByEnvBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this register artifact by env bad request response has a 5xx status code
func (o *RegisterArtifactByEnvBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this register artifact by env bad request response a status code equal to that given
func (o *RegisterArtifactByEnvBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the register artifact by env bad request response
func (o *RegisterArtifactByEnvBadRequest) Code() int {
	return 400
}

func (o *RegisterArtifactByEnvBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register-by-env][%d] registerArtifactByEnvBadRequest %s", 400, payload)
}

func (o *RegisterArtifactByEnvBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register-by-env][%d] registerArtifactByEnvBadRequest %s", 400, payload)
}

func (o *RegisterArtifactByEnvBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RegisterArtifactByEnvBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterArtifactByEnvNotFound creates a RegisterArtifactByEnvNotFound with default headers values
func NewRegisterArtifactByEnvNotFound() *RegisterArtifactByEnvNotFound {
	return &RegisterArtifactByEnvNotFound{}
}

/*
RegisterArtifactByEnvNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RegisterArtifactByEnvNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this register artifact by env not found response has a 2xx status code
func (o *RegisterArtifactByEnvNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register artifact by env not found response has a 3xx status code
func (o *RegisterArtifactByEnvNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register artifact by env not found response has a 4xx status code
func (o *RegisterArtifactByEnvNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this register artifact by env not found response has a 5xx status code
func (o *RegisterArtifactByEnvNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this register artifact by env not found response a status code equal to that given
func (o *RegisterArtifactByEnvNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the register artifact by env not found response
func (o *RegisterArtifactByEnvNotFound) Code() int {
	return 404
}

func (o *RegisterArtifactByEnvNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register-by-env][%d] registerArtifactByEnvNotFound %s", 404, payload)
}

func (o *RegisterArtifactByEnvNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register-by-env][%d] registerArtifactByEnvNotFound %s", 404, payload)
}

func (o *RegisterArtifactByEnvNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RegisterArtifactByEnvNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterArtifactByEnvMethodNotAllowed creates a RegisterArtifactByEnvMethodNotAllowed with default headers values
func NewRegisterArtifactByEnvMethodNotAllowed() *RegisterArtifactByEnvMethodNotAllowed {
	return &RegisterArtifactByEnvMethodNotAllowed{}
}

/*
RegisterArtifactByEnvMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RegisterArtifactByEnvMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this register artifact by env method not allowed response has a 2xx status code
func (o *RegisterArtifactByEnvMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register artifact by env method not allowed response has a 3xx status code
func (o *RegisterArtifactByEnvMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register artifact by env method not allowed response has a 4xx status code
func (o *RegisterArtifactByEnvMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this register artifact by env method not allowed response has a 5xx status code
func (o *RegisterArtifactByEnvMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this register artifact by env method not allowed response a status code equal to that given
func (o *RegisterArtifactByEnvMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the register artifact by env method not allowed response
func (o *RegisterArtifactByEnvMethodNotAllowed) Code() int {
	return 405
}

func (o *RegisterArtifactByEnvMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register-by-env][%d] registerArtifactByEnvMethodNotAllowed %s", 405, payload)
}

func (o *RegisterArtifactByEnvMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register-by-env][%d] registerArtifactByEnvMethodNotAllowed %s", 405, payload)
}

func (o *RegisterArtifactByEnvMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RegisterArtifactByEnvMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterArtifactByEnvInternalServerError creates a RegisterArtifactByEnvInternalServerError with default headers values
func NewRegisterArtifactByEnvInternalServerError() *RegisterArtifactByEnvInternalServerError {
	return &RegisterArtifactByEnvInternalServerError{}
}

/*
RegisterArtifactByEnvInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RegisterArtifactByEnvInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this register artifact by env internal server error response has a 2xx status code
func (o *RegisterArtifactByEnvInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register artifact by env internal server error response has a 3xx status code
func (o *RegisterArtifactByEnvInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register artifact by env internal server error response has a 4xx status code
func (o *RegisterArtifactByEnvInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this register artifact by env internal server error response has a 5xx status code
func (o *RegisterArtifactByEnvInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this register artifact by env internal server error response a status code equal to that given
func (o *RegisterArtifactByEnvInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the register artifact by env internal server error response
func (o *RegisterArtifactByEnvInternalServerError) Code() int {
	return 500
}

func (o *RegisterArtifactByEnvInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register-by-env][%d] registerArtifactByEnvInternalServerError %s", 500, payload)
}

func (o *RegisterArtifactByEnvInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifacts/register-by-env][%d] registerArtifactByEnvInternalServerError %s", 500, payload)
}

func (o *RegisterArtifactByEnvInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RegisterArtifactByEnvInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
