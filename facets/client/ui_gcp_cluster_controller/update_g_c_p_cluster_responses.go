// Code generated by go-swagger; DO NOT EDIT.

package ui_gcp_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateGCPClusterReader is a Reader for the UpdateGCPCluster structure.
type UpdateGCPClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGCPClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGCPClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateGCPClusterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGCPClusterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateGCPClusterMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateGCPClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/gcp/clusters/{clusterId}] updateGCPCluster", response, response.Code())
	}
}

// NewUpdateGCPClusterOK creates a UpdateGCPClusterOK with default headers values
func NewUpdateGCPClusterOK() *UpdateGCPClusterOK {
	return &UpdateGCPClusterOK{}
}

/*
UpdateGCPClusterOK describes a response with status code 200, with default header values.

OK
*/
type UpdateGCPClusterOK struct {
	Payload *models.GCPCluster
}

// IsSuccess returns true when this update g c p cluster o k response has a 2xx status code
func (o *UpdateGCPClusterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update g c p cluster o k response has a 3xx status code
func (o *UpdateGCPClusterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update g c p cluster o k response has a 4xx status code
func (o *UpdateGCPClusterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update g c p cluster o k response has a 5xx status code
func (o *UpdateGCPClusterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update g c p cluster o k response a status code equal to that given
func (o *UpdateGCPClusterOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update g c p cluster o k response
func (o *UpdateGCPClusterOK) Code() int {
	return 200
}

func (o *UpdateGCPClusterOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterOK %s", 200, payload)
}

func (o *UpdateGCPClusterOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterOK %s", 200, payload)
}

func (o *UpdateGCPClusterOK) GetPayload() *models.GCPCluster {
	return o.Payload
}

func (o *UpdateGCPClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GCPCluster)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGCPClusterBadRequest creates a UpdateGCPClusterBadRequest with default headers values
func NewUpdateGCPClusterBadRequest() *UpdateGCPClusterBadRequest {
	return &UpdateGCPClusterBadRequest{}
}

/*
UpdateGCPClusterBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateGCPClusterBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update g c p cluster bad request response has a 2xx status code
func (o *UpdateGCPClusterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update g c p cluster bad request response has a 3xx status code
func (o *UpdateGCPClusterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update g c p cluster bad request response has a 4xx status code
func (o *UpdateGCPClusterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update g c p cluster bad request response has a 5xx status code
func (o *UpdateGCPClusterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update g c p cluster bad request response a status code equal to that given
func (o *UpdateGCPClusterBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update g c p cluster bad request response
func (o *UpdateGCPClusterBadRequest) Code() int {
	return 400
}

func (o *UpdateGCPClusterBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterBadRequest %s", 400, payload)
}

func (o *UpdateGCPClusterBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterBadRequest %s", 400, payload)
}

func (o *UpdateGCPClusterBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateGCPClusterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGCPClusterNotFound creates a UpdateGCPClusterNotFound with default headers values
func NewUpdateGCPClusterNotFound() *UpdateGCPClusterNotFound {
	return &UpdateGCPClusterNotFound{}
}

/*
UpdateGCPClusterNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateGCPClusterNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update g c p cluster not found response has a 2xx status code
func (o *UpdateGCPClusterNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update g c p cluster not found response has a 3xx status code
func (o *UpdateGCPClusterNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update g c p cluster not found response has a 4xx status code
func (o *UpdateGCPClusterNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update g c p cluster not found response has a 5xx status code
func (o *UpdateGCPClusterNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update g c p cluster not found response a status code equal to that given
func (o *UpdateGCPClusterNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update g c p cluster not found response
func (o *UpdateGCPClusterNotFound) Code() int {
	return 404
}

func (o *UpdateGCPClusterNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterNotFound %s", 404, payload)
}

func (o *UpdateGCPClusterNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterNotFound %s", 404, payload)
}

func (o *UpdateGCPClusterNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateGCPClusterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGCPClusterMethodNotAllowed creates a UpdateGCPClusterMethodNotAllowed with default headers values
func NewUpdateGCPClusterMethodNotAllowed() *UpdateGCPClusterMethodNotAllowed {
	return &UpdateGCPClusterMethodNotAllowed{}
}

/*
UpdateGCPClusterMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateGCPClusterMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update g c p cluster method not allowed response has a 2xx status code
func (o *UpdateGCPClusterMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update g c p cluster method not allowed response has a 3xx status code
func (o *UpdateGCPClusterMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update g c p cluster method not allowed response has a 4xx status code
func (o *UpdateGCPClusterMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update g c p cluster method not allowed response has a 5xx status code
func (o *UpdateGCPClusterMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update g c p cluster method not allowed response a status code equal to that given
func (o *UpdateGCPClusterMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update g c p cluster method not allowed response
func (o *UpdateGCPClusterMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateGCPClusterMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterMethodNotAllowed %s", 405, payload)
}

func (o *UpdateGCPClusterMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterMethodNotAllowed %s", 405, payload)
}

func (o *UpdateGCPClusterMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateGCPClusterMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGCPClusterInternalServerError creates a UpdateGCPClusterInternalServerError with default headers values
func NewUpdateGCPClusterInternalServerError() *UpdateGCPClusterInternalServerError {
	return &UpdateGCPClusterInternalServerError{}
}

/*
UpdateGCPClusterInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateGCPClusterInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update g c p cluster internal server error response has a 2xx status code
func (o *UpdateGCPClusterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update g c p cluster internal server error response has a 3xx status code
func (o *UpdateGCPClusterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update g c p cluster internal server error response has a 4xx status code
func (o *UpdateGCPClusterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update g c p cluster internal server error response has a 5xx status code
func (o *UpdateGCPClusterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update g c p cluster internal server error response a status code equal to that given
func (o *UpdateGCPClusterInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update g c p cluster internal server error response
func (o *UpdateGCPClusterInternalServerError) Code() int {
	return 500
}

func (o *UpdateGCPClusterInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterInternalServerError %s", 500, payload)
}

func (o *UpdateGCPClusterInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterInternalServerError %s", 500, payload)
}

func (o *UpdateGCPClusterInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateGCPClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
