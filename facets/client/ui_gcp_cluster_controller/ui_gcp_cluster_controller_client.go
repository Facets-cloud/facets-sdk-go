// Code generated by go-swagger; DO NOT EDIT.

package ui_gcp_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui gcp cluster controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui gcp cluster controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui gcp cluster controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui gcp cluster controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConfigureDraftCluster(params *ConfigureDraftClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConfigureDraftClusterOK, error)

	CreateGCPCluster(params *CreateGCPClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGCPClusterOK, error)

	GetGCPCluster(params *GetGCPClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGCPClusterOK, error)

	UpdateGCPCluster(params *UpdateGCPClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGCPClusterOK, error)

	ValidateVpcID(params *ValidateVpcIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateVpcIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ConfigureDraftCluster configure draft cluster API
*/
func (a *Client) ConfigureDraftCluster(params *ConfigureDraftClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConfigureDraftClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigureDraftClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "configureDraftCluster",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/gcp/clusters/configure/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConfigureDraftClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfigureDraftClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for configureDraftCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGCPCluster create g c p cluster API
*/
func (a *Client) CreateGCPCluster(params *CreateGCPClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGCPClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGCPClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGCPCluster",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/gcp/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGCPClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGCPClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGCPCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGCPCluster get g c p cluster API
*/
func (a *Client) GetGCPCluster(params *GetGCPClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGCPClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGCPClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGCPCluster",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/gcp/clusters/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGCPClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGCPClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGCPCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGCPCluster update g c p cluster API
*/
func (a *Client) UpdateGCPCluster(params *UpdateGCPClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGCPClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGCPClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGCPCluster",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/gcp/clusters/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGCPClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGCPClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGCPCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateVpcID validate vpc Id API
*/
func (a *Client) ValidateVpcID(params *ValidateVpcIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateVpcIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateVpcIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateVpcId",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/gcp/clusters/validate-vpcId",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateVpcIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateVpcIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateVpcId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
