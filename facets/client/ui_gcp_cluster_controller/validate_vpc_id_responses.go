// Code generated by go-swagger; DO NOT EDIT.

package ui_gcp_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ValidateVpcIDReader is a Reader for the ValidateVpcID structure.
type ValidateVpcIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateVpcIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateVpcIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateVpcIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewValidateVpcIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewValidateVpcIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewValidateVpcIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/gcp/clusters/validate-vpcId] validateVpcId", response, response.Code())
	}
}

// NewValidateVpcIDOK creates a ValidateVpcIDOK with default headers values
func NewValidateVpcIDOK() *ValidateVpcIDOK {
	return &ValidateVpcIDOK{}
}

/*
ValidateVpcIDOK describes a response with status code 200, with default header values.

OK
*/
type ValidateVpcIDOK struct {
	Payload bool
}

// IsSuccess returns true when this validate vpc Id o k response has a 2xx status code
func (o *ValidateVpcIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate vpc Id o k response has a 3xx status code
func (o *ValidateVpcIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vpc Id o k response has a 4xx status code
func (o *ValidateVpcIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate vpc Id o k response has a 5xx status code
func (o *ValidateVpcIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vpc Id o k response a status code equal to that given
func (o *ValidateVpcIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate vpc Id o k response
func (o *ValidateVpcIDOK) Code() int {
	return 200
}

func (o *ValidateVpcIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/gcp/clusters/validate-vpcId][%d] validateVpcIdOK %s", 200, payload)
}

func (o *ValidateVpcIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/gcp/clusters/validate-vpcId][%d] validateVpcIdOK %s", 200, payload)
}

func (o *ValidateVpcIDOK) GetPayload() bool {
	return o.Payload
}

func (o *ValidateVpcIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateVpcIDBadRequest creates a ValidateVpcIDBadRequest with default headers values
func NewValidateVpcIDBadRequest() *ValidateVpcIDBadRequest {
	return &ValidateVpcIDBadRequest{}
}

/*
ValidateVpcIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ValidateVpcIDBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate vpc Id bad request response has a 2xx status code
func (o *ValidateVpcIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate vpc Id bad request response has a 3xx status code
func (o *ValidateVpcIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vpc Id bad request response has a 4xx status code
func (o *ValidateVpcIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate vpc Id bad request response has a 5xx status code
func (o *ValidateVpcIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vpc Id bad request response a status code equal to that given
func (o *ValidateVpcIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the validate vpc Id bad request response
func (o *ValidateVpcIDBadRequest) Code() int {
	return 400
}

func (o *ValidateVpcIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/gcp/clusters/validate-vpcId][%d] validateVpcIdBadRequest %s", 400, payload)
}

func (o *ValidateVpcIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/gcp/clusters/validate-vpcId][%d] validateVpcIdBadRequest %s", 400, payload)
}

func (o *ValidateVpcIDBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateVpcIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateVpcIDNotFound creates a ValidateVpcIDNotFound with default headers values
func NewValidateVpcIDNotFound() *ValidateVpcIDNotFound {
	return &ValidateVpcIDNotFound{}
}

/*
ValidateVpcIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ValidateVpcIDNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate vpc Id not found response has a 2xx status code
func (o *ValidateVpcIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate vpc Id not found response has a 3xx status code
func (o *ValidateVpcIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vpc Id not found response has a 4xx status code
func (o *ValidateVpcIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate vpc Id not found response has a 5xx status code
func (o *ValidateVpcIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vpc Id not found response a status code equal to that given
func (o *ValidateVpcIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the validate vpc Id not found response
func (o *ValidateVpcIDNotFound) Code() int {
	return 404
}

func (o *ValidateVpcIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/gcp/clusters/validate-vpcId][%d] validateVpcIdNotFound %s", 404, payload)
}

func (o *ValidateVpcIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/gcp/clusters/validate-vpcId][%d] validateVpcIdNotFound %s", 404, payload)
}

func (o *ValidateVpcIDNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateVpcIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateVpcIDMethodNotAllowed creates a ValidateVpcIDMethodNotAllowed with default headers values
func NewValidateVpcIDMethodNotAllowed() *ValidateVpcIDMethodNotAllowed {
	return &ValidateVpcIDMethodNotAllowed{}
}

/*
ValidateVpcIDMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ValidateVpcIDMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate vpc Id method not allowed response has a 2xx status code
func (o *ValidateVpcIDMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate vpc Id method not allowed response has a 3xx status code
func (o *ValidateVpcIDMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vpc Id method not allowed response has a 4xx status code
func (o *ValidateVpcIDMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate vpc Id method not allowed response has a 5xx status code
func (o *ValidateVpcIDMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vpc Id method not allowed response a status code equal to that given
func (o *ValidateVpcIDMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the validate vpc Id method not allowed response
func (o *ValidateVpcIDMethodNotAllowed) Code() int {
	return 405
}

func (o *ValidateVpcIDMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/gcp/clusters/validate-vpcId][%d] validateVpcIdMethodNotAllowed %s", 405, payload)
}

func (o *ValidateVpcIDMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/gcp/clusters/validate-vpcId][%d] validateVpcIdMethodNotAllowed %s", 405, payload)
}

func (o *ValidateVpcIDMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateVpcIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateVpcIDInternalServerError creates a ValidateVpcIDInternalServerError with default headers values
func NewValidateVpcIDInternalServerError() *ValidateVpcIDInternalServerError {
	return &ValidateVpcIDInternalServerError{}
}

/*
ValidateVpcIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ValidateVpcIDInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate vpc Id internal server error response has a 2xx status code
func (o *ValidateVpcIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate vpc Id internal server error response has a 3xx status code
func (o *ValidateVpcIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vpc Id internal server error response has a 4xx status code
func (o *ValidateVpcIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate vpc Id internal server error response has a 5xx status code
func (o *ValidateVpcIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this validate vpc Id internal server error response a status code equal to that given
func (o *ValidateVpcIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the validate vpc Id internal server error response
func (o *ValidateVpcIDInternalServerError) Code() int {
	return 500
}

func (o *ValidateVpcIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/gcp/clusters/validate-vpcId][%d] validateVpcIdInternalServerError %s", 500, payload)
}

func (o *ValidateVpcIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/gcp/clusters/validate-vpcId][%d] validateVpcIdInternalServerError %s", 500, payload)
}

func (o *ValidateVpcIDInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateVpcIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
