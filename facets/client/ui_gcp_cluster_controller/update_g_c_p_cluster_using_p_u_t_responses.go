// Code generated by go-swagger; DO NOT EDIT.

package ui_gcp_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateGCPClusterUsingPUTReader is a Reader for the UpdateGCPClusterUsingPUT structure.
type UpdateGCPClusterUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGCPClusterUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGCPClusterUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateGCPClusterUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateGCPClusterUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateGCPClusterUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGCPClusterUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/gcp/clusters/{clusterId}] updateGCPClusterUsingPUT", response, response.Code())
	}
}

// NewUpdateGCPClusterUsingPUTOK creates a UpdateGCPClusterUsingPUTOK with default headers values
func NewUpdateGCPClusterUsingPUTOK() *UpdateGCPClusterUsingPUTOK {
	return &UpdateGCPClusterUsingPUTOK{}
}

/*
UpdateGCPClusterUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateGCPClusterUsingPUTOK struct {
	Payload *models.GCPCluster
}

// IsSuccess returns true when this update g c p cluster using p u t o k response has a 2xx status code
func (o *UpdateGCPClusterUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update g c p cluster using p u t o k response has a 3xx status code
func (o *UpdateGCPClusterUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update g c p cluster using p u t o k response has a 4xx status code
func (o *UpdateGCPClusterUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update g c p cluster using p u t o k response has a 5xx status code
func (o *UpdateGCPClusterUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update g c p cluster using p u t o k response a status code equal to that given
func (o *UpdateGCPClusterUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update g c p cluster using p u t o k response
func (o *UpdateGCPClusterUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateGCPClusterUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterUsingPUTOK %s", 200, payload)
}

func (o *UpdateGCPClusterUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterUsingPUTOK %s", 200, payload)
}

func (o *UpdateGCPClusterUsingPUTOK) GetPayload() *models.GCPCluster {
	return o.Payload
}

func (o *UpdateGCPClusterUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GCPCluster)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGCPClusterUsingPUTCreated creates a UpdateGCPClusterUsingPUTCreated with default headers values
func NewUpdateGCPClusterUsingPUTCreated() *UpdateGCPClusterUsingPUTCreated {
	return &UpdateGCPClusterUsingPUTCreated{}
}

/*
UpdateGCPClusterUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateGCPClusterUsingPUTCreated struct {
}

// IsSuccess returns true when this update g c p cluster using p u t created response has a 2xx status code
func (o *UpdateGCPClusterUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update g c p cluster using p u t created response has a 3xx status code
func (o *UpdateGCPClusterUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update g c p cluster using p u t created response has a 4xx status code
func (o *UpdateGCPClusterUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update g c p cluster using p u t created response has a 5xx status code
func (o *UpdateGCPClusterUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update g c p cluster using p u t created response a status code equal to that given
func (o *UpdateGCPClusterUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update g c p cluster using p u t created response
func (o *UpdateGCPClusterUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateGCPClusterUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterUsingPUTCreated", 201)
}

func (o *UpdateGCPClusterUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterUsingPUTCreated", 201)
}

func (o *UpdateGCPClusterUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGCPClusterUsingPUTUnauthorized creates a UpdateGCPClusterUsingPUTUnauthorized with default headers values
func NewUpdateGCPClusterUsingPUTUnauthorized() *UpdateGCPClusterUsingPUTUnauthorized {
	return &UpdateGCPClusterUsingPUTUnauthorized{}
}

/*
UpdateGCPClusterUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateGCPClusterUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update g c p cluster using p u t unauthorized response has a 2xx status code
func (o *UpdateGCPClusterUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update g c p cluster using p u t unauthorized response has a 3xx status code
func (o *UpdateGCPClusterUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update g c p cluster using p u t unauthorized response has a 4xx status code
func (o *UpdateGCPClusterUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update g c p cluster using p u t unauthorized response has a 5xx status code
func (o *UpdateGCPClusterUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update g c p cluster using p u t unauthorized response a status code equal to that given
func (o *UpdateGCPClusterUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update g c p cluster using p u t unauthorized response
func (o *UpdateGCPClusterUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateGCPClusterUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterUsingPUTUnauthorized", 401)
}

func (o *UpdateGCPClusterUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterUsingPUTUnauthorized", 401)
}

func (o *UpdateGCPClusterUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGCPClusterUsingPUTForbidden creates a UpdateGCPClusterUsingPUTForbidden with default headers values
func NewUpdateGCPClusterUsingPUTForbidden() *UpdateGCPClusterUsingPUTForbidden {
	return &UpdateGCPClusterUsingPUTForbidden{}
}

/*
UpdateGCPClusterUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateGCPClusterUsingPUTForbidden struct {
}

// IsSuccess returns true when this update g c p cluster using p u t forbidden response has a 2xx status code
func (o *UpdateGCPClusterUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update g c p cluster using p u t forbidden response has a 3xx status code
func (o *UpdateGCPClusterUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update g c p cluster using p u t forbidden response has a 4xx status code
func (o *UpdateGCPClusterUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update g c p cluster using p u t forbidden response has a 5xx status code
func (o *UpdateGCPClusterUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update g c p cluster using p u t forbidden response a status code equal to that given
func (o *UpdateGCPClusterUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update g c p cluster using p u t forbidden response
func (o *UpdateGCPClusterUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateGCPClusterUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterUsingPUTForbidden", 403)
}

func (o *UpdateGCPClusterUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterUsingPUTForbidden", 403)
}

func (o *UpdateGCPClusterUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGCPClusterUsingPUTNotFound creates a UpdateGCPClusterUsingPUTNotFound with default headers values
func NewUpdateGCPClusterUsingPUTNotFound() *UpdateGCPClusterUsingPUTNotFound {
	return &UpdateGCPClusterUsingPUTNotFound{}
}

/*
UpdateGCPClusterUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateGCPClusterUsingPUTNotFound struct {
}

// IsSuccess returns true when this update g c p cluster using p u t not found response has a 2xx status code
func (o *UpdateGCPClusterUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update g c p cluster using p u t not found response has a 3xx status code
func (o *UpdateGCPClusterUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update g c p cluster using p u t not found response has a 4xx status code
func (o *UpdateGCPClusterUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update g c p cluster using p u t not found response has a 5xx status code
func (o *UpdateGCPClusterUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update g c p cluster using p u t not found response a status code equal to that given
func (o *UpdateGCPClusterUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update g c p cluster using p u t not found response
func (o *UpdateGCPClusterUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateGCPClusterUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterUsingPUTNotFound", 404)
}

func (o *UpdateGCPClusterUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/gcp/clusters/{clusterId}][%d] updateGCPClusterUsingPUTNotFound", 404)
}

func (o *UpdateGCPClusterUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
