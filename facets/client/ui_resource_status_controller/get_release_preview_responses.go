// Code generated by go-swagger; DO NOT EDIT.

package ui_resource_status_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetReleasePreviewReader is a Reader for the GetReleasePreview structure.
type GetReleasePreviewReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReleasePreviewReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReleasePreviewOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetReleasePreviewBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReleasePreviewNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetReleasePreviewMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetReleasePreviewInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/resources/{clusterId}/release-preview] getReleasePreview", response, response.Code())
	}
}

// NewGetReleasePreviewOK creates a GetReleasePreviewOK with default headers values
func NewGetReleasePreviewOK() *GetReleasePreviewOK {
	return &GetReleasePreviewOK{}
}

/*
GetReleasePreviewOK describes a response with status code 200, with default header values.

OK
*/
type GetReleasePreviewOK struct {
	Payload *models.ReleasePreviewResponse
}

// IsSuccess returns true when this get release preview o k response has a 2xx status code
func (o *GetReleasePreviewOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get release preview o k response has a 3xx status code
func (o *GetReleasePreviewOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release preview o k response has a 4xx status code
func (o *GetReleasePreviewOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get release preview o k response has a 5xx status code
func (o *GetReleasePreviewOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get release preview o k response a status code equal to that given
func (o *GetReleasePreviewOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get release preview o k response
func (o *GetReleasePreviewOK) Code() int {
	return 200
}

func (o *GetReleasePreviewOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewOK %s", 200, payload)
}

func (o *GetReleasePreviewOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewOK %s", 200, payload)
}

func (o *GetReleasePreviewOK) GetPayload() *models.ReleasePreviewResponse {
	return o.Payload
}

func (o *GetReleasePreviewOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReleasePreviewResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleasePreviewBadRequest creates a GetReleasePreviewBadRequest with default headers values
func NewGetReleasePreviewBadRequest() *GetReleasePreviewBadRequest {
	return &GetReleasePreviewBadRequest{}
}

/*
GetReleasePreviewBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetReleasePreviewBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get release preview bad request response has a 2xx status code
func (o *GetReleasePreviewBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release preview bad request response has a 3xx status code
func (o *GetReleasePreviewBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release preview bad request response has a 4xx status code
func (o *GetReleasePreviewBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release preview bad request response has a 5xx status code
func (o *GetReleasePreviewBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get release preview bad request response a status code equal to that given
func (o *GetReleasePreviewBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get release preview bad request response
func (o *GetReleasePreviewBadRequest) Code() int {
	return 400
}

func (o *GetReleasePreviewBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewBadRequest %s", 400, payload)
}

func (o *GetReleasePreviewBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewBadRequest %s", 400, payload)
}

func (o *GetReleasePreviewBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetReleasePreviewBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleasePreviewNotFound creates a GetReleasePreviewNotFound with default headers values
func NewGetReleasePreviewNotFound() *GetReleasePreviewNotFound {
	return &GetReleasePreviewNotFound{}
}

/*
GetReleasePreviewNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetReleasePreviewNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get release preview not found response has a 2xx status code
func (o *GetReleasePreviewNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release preview not found response has a 3xx status code
func (o *GetReleasePreviewNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release preview not found response has a 4xx status code
func (o *GetReleasePreviewNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release preview not found response has a 5xx status code
func (o *GetReleasePreviewNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get release preview not found response a status code equal to that given
func (o *GetReleasePreviewNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get release preview not found response
func (o *GetReleasePreviewNotFound) Code() int {
	return 404
}

func (o *GetReleasePreviewNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewNotFound %s", 404, payload)
}

func (o *GetReleasePreviewNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewNotFound %s", 404, payload)
}

func (o *GetReleasePreviewNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetReleasePreviewNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleasePreviewMethodNotAllowed creates a GetReleasePreviewMethodNotAllowed with default headers values
func NewGetReleasePreviewMethodNotAllowed() *GetReleasePreviewMethodNotAllowed {
	return &GetReleasePreviewMethodNotAllowed{}
}

/*
GetReleasePreviewMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetReleasePreviewMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get release preview method not allowed response has a 2xx status code
func (o *GetReleasePreviewMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release preview method not allowed response has a 3xx status code
func (o *GetReleasePreviewMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release preview method not allowed response has a 4xx status code
func (o *GetReleasePreviewMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release preview method not allowed response has a 5xx status code
func (o *GetReleasePreviewMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get release preview method not allowed response a status code equal to that given
func (o *GetReleasePreviewMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get release preview method not allowed response
func (o *GetReleasePreviewMethodNotAllowed) Code() int {
	return 405
}

func (o *GetReleasePreviewMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewMethodNotAllowed %s", 405, payload)
}

func (o *GetReleasePreviewMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewMethodNotAllowed %s", 405, payload)
}

func (o *GetReleasePreviewMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetReleasePreviewMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleasePreviewInternalServerError creates a GetReleasePreviewInternalServerError with default headers values
func NewGetReleasePreviewInternalServerError() *GetReleasePreviewInternalServerError {
	return &GetReleasePreviewInternalServerError{}
}

/*
GetReleasePreviewInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetReleasePreviewInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get release preview internal server error response has a 2xx status code
func (o *GetReleasePreviewInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release preview internal server error response has a 3xx status code
func (o *GetReleasePreviewInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release preview internal server error response has a 4xx status code
func (o *GetReleasePreviewInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get release preview internal server error response has a 5xx status code
func (o *GetReleasePreviewInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get release preview internal server error response a status code equal to that given
func (o *GetReleasePreviewInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get release preview internal server error response
func (o *GetReleasePreviewInternalServerError) Code() int {
	return 500
}

func (o *GetReleasePreviewInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewInternalServerError %s", 500, payload)
}

func (o *GetReleasePreviewInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewInternalServerError %s", 500, payload)
}

func (o *GetReleasePreviewInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetReleasePreviewInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
