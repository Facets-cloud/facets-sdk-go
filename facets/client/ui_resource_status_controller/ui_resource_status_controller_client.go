// Code generated by go-swagger; DO NOT EDIT.

package ui_resource_status_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui resource status controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui resource status controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui resource status controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui resource status controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetNamespacesInUseByDependentClusters(params *GetNamespacesInUseByDependentClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespacesInUseByDependentClustersOK, error)

	GetReleasePreview(params *GetReleasePreviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReleasePreviewOK, error)

	GetResourceStatus(params *GetResourceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceStatusOK, error)

	SyncResource(params *SyncResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncResourceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetNamespacesInUseByDependentClusters get namespaces in use by dependent clusters API
*/
func (a *Client) GetNamespacesInUseByDependentClusters(params *GetNamespacesInUseByDependentClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespacesInUseByDependentClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNamespacesInUseByDependentClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNamespacesInUseByDependentClusters",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/resources/{baseClusterId}/base-env-in-use-namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNamespacesInUseByDependentClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNamespacesInUseByDependentClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNamespacesInUseByDependentClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReleasePreview get release preview API
*/
func (a *Client) GetReleasePreview(params *GetReleasePreviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReleasePreviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleasePreviewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReleasePreview",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/resources/{clusterId}/release-preview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleasePreviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleasePreviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleasePreview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceStatus get resource status API
*/
func (a *Client) GetResourceStatus(params *GetResourceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceStatus",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/resources/{projectName}/{environmentName}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SyncResource sync resource API
*/
func (a *Client) SyncResource(params *SyncResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncResource",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/resources/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for syncResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
