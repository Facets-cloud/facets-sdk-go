// Code generated by go-swagger; DO NOT EDIT.

package ui_resource_status_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetReleasePreviewUsingGETReader is a Reader for the GetReleasePreviewUsingGET structure.
type GetReleasePreviewUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReleasePreviewUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReleasePreviewUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetReleasePreviewUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetReleasePreviewUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReleasePreviewUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/resources/{clusterId}/release-preview] getReleasePreviewUsingGET", response, response.Code())
	}
}

// NewGetReleasePreviewUsingGETOK creates a GetReleasePreviewUsingGETOK with default headers values
func NewGetReleasePreviewUsingGETOK() *GetReleasePreviewUsingGETOK {
	return &GetReleasePreviewUsingGETOK{}
}

/*
GetReleasePreviewUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetReleasePreviewUsingGETOK struct {
	Payload *models.ReleasePreviewResponse
}

// IsSuccess returns true when this get release preview using g e t o k response has a 2xx status code
func (o *GetReleasePreviewUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get release preview using g e t o k response has a 3xx status code
func (o *GetReleasePreviewUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release preview using g e t o k response has a 4xx status code
func (o *GetReleasePreviewUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get release preview using g e t o k response has a 5xx status code
func (o *GetReleasePreviewUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get release preview using g e t o k response a status code equal to that given
func (o *GetReleasePreviewUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get release preview using g e t o k response
func (o *GetReleasePreviewUsingGETOK) Code() int {
	return 200
}

func (o *GetReleasePreviewUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewUsingGETOK %s", 200, payload)
}

func (o *GetReleasePreviewUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewUsingGETOK %s", 200, payload)
}

func (o *GetReleasePreviewUsingGETOK) GetPayload() *models.ReleasePreviewResponse {
	return o.Payload
}

func (o *GetReleasePreviewUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReleasePreviewResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleasePreviewUsingGETUnauthorized creates a GetReleasePreviewUsingGETUnauthorized with default headers values
func NewGetReleasePreviewUsingGETUnauthorized() *GetReleasePreviewUsingGETUnauthorized {
	return &GetReleasePreviewUsingGETUnauthorized{}
}

/*
GetReleasePreviewUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetReleasePreviewUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get release preview using g e t unauthorized response has a 2xx status code
func (o *GetReleasePreviewUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release preview using g e t unauthorized response has a 3xx status code
func (o *GetReleasePreviewUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release preview using g e t unauthorized response has a 4xx status code
func (o *GetReleasePreviewUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release preview using g e t unauthorized response has a 5xx status code
func (o *GetReleasePreviewUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get release preview using g e t unauthorized response a status code equal to that given
func (o *GetReleasePreviewUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get release preview using g e t unauthorized response
func (o *GetReleasePreviewUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetReleasePreviewUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewUsingGETUnauthorized", 401)
}

func (o *GetReleasePreviewUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewUsingGETUnauthorized", 401)
}

func (o *GetReleasePreviewUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReleasePreviewUsingGETForbidden creates a GetReleasePreviewUsingGETForbidden with default headers values
func NewGetReleasePreviewUsingGETForbidden() *GetReleasePreviewUsingGETForbidden {
	return &GetReleasePreviewUsingGETForbidden{}
}

/*
GetReleasePreviewUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetReleasePreviewUsingGETForbidden struct {
}

// IsSuccess returns true when this get release preview using g e t forbidden response has a 2xx status code
func (o *GetReleasePreviewUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release preview using g e t forbidden response has a 3xx status code
func (o *GetReleasePreviewUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release preview using g e t forbidden response has a 4xx status code
func (o *GetReleasePreviewUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release preview using g e t forbidden response has a 5xx status code
func (o *GetReleasePreviewUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get release preview using g e t forbidden response a status code equal to that given
func (o *GetReleasePreviewUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get release preview using g e t forbidden response
func (o *GetReleasePreviewUsingGETForbidden) Code() int {
	return 403
}

func (o *GetReleasePreviewUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewUsingGETForbidden", 403)
}

func (o *GetReleasePreviewUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewUsingGETForbidden", 403)
}

func (o *GetReleasePreviewUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReleasePreviewUsingGETNotFound creates a GetReleasePreviewUsingGETNotFound with default headers values
func NewGetReleasePreviewUsingGETNotFound() *GetReleasePreviewUsingGETNotFound {
	return &GetReleasePreviewUsingGETNotFound{}
}

/*
GetReleasePreviewUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetReleasePreviewUsingGETNotFound struct {
}

// IsSuccess returns true when this get release preview using g e t not found response has a 2xx status code
func (o *GetReleasePreviewUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release preview using g e t not found response has a 3xx status code
func (o *GetReleasePreviewUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release preview using g e t not found response has a 4xx status code
func (o *GetReleasePreviewUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release preview using g e t not found response has a 5xx status code
func (o *GetReleasePreviewUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get release preview using g e t not found response a status code equal to that given
func (o *GetReleasePreviewUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get release preview using g e t not found response
func (o *GetReleasePreviewUsingGETNotFound) Code() int {
	return 404
}

func (o *GetReleasePreviewUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewUsingGETNotFound", 404)
}

func (o *GetReleasePreviewUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{clusterId}/release-preview][%d] getReleasePreviewUsingGETNotFound", 404)
}

func (o *GetReleasePreviewUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
