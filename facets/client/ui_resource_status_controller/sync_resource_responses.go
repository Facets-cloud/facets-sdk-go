// Code generated by go-swagger; DO NOT EDIT.

package ui_resource_status_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// SyncResourceReader is a Reader for the SyncResource structure.
type SyncResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SyncResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSyncResourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSyncResourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSyncResourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewSyncResourceMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSyncResourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/resources/sync] syncResource", response, response.Code())
	}
}

// NewSyncResourceOK creates a SyncResourceOK with default headers values
func NewSyncResourceOK() *SyncResourceOK {
	return &SyncResourceOK{}
}

/*
SyncResourceOK describes a response with status code 200, with default header values.

OK
*/
type SyncResourceOK struct {
	Payload *models.ResourceStatusResponse
}

// IsSuccess returns true when this sync resource o k response has a 2xx status code
func (o *SyncResourceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this sync resource o k response has a 3xx status code
func (o *SyncResourceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync resource o k response has a 4xx status code
func (o *SyncResourceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this sync resource o k response has a 5xx status code
func (o *SyncResourceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this sync resource o k response a status code equal to that given
func (o *SyncResourceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the sync resource o k response
func (o *SyncResourceOK) Code() int {
	return 200
}

func (o *SyncResourceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/resources/sync][%d] syncResourceOK %s", 200, payload)
}

func (o *SyncResourceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/resources/sync][%d] syncResourceOK %s", 200, payload)
}

func (o *SyncResourceOK) GetPayload() *models.ResourceStatusResponse {
	return o.Payload
}

func (o *SyncResourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResourceStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncResourceBadRequest creates a SyncResourceBadRequest with default headers values
func NewSyncResourceBadRequest() *SyncResourceBadRequest {
	return &SyncResourceBadRequest{}
}

/*
SyncResourceBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SyncResourceBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this sync resource bad request response has a 2xx status code
func (o *SyncResourceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync resource bad request response has a 3xx status code
func (o *SyncResourceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync resource bad request response has a 4xx status code
func (o *SyncResourceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync resource bad request response has a 5xx status code
func (o *SyncResourceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this sync resource bad request response a status code equal to that given
func (o *SyncResourceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the sync resource bad request response
func (o *SyncResourceBadRequest) Code() int {
	return 400
}

func (o *SyncResourceBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/resources/sync][%d] syncResourceBadRequest %s", 400, payload)
}

func (o *SyncResourceBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/resources/sync][%d] syncResourceBadRequest %s", 400, payload)
}

func (o *SyncResourceBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SyncResourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncResourceNotFound creates a SyncResourceNotFound with default headers values
func NewSyncResourceNotFound() *SyncResourceNotFound {
	return &SyncResourceNotFound{}
}

/*
SyncResourceNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SyncResourceNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this sync resource not found response has a 2xx status code
func (o *SyncResourceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync resource not found response has a 3xx status code
func (o *SyncResourceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync resource not found response has a 4xx status code
func (o *SyncResourceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync resource not found response has a 5xx status code
func (o *SyncResourceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this sync resource not found response a status code equal to that given
func (o *SyncResourceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the sync resource not found response
func (o *SyncResourceNotFound) Code() int {
	return 404
}

func (o *SyncResourceNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/resources/sync][%d] syncResourceNotFound %s", 404, payload)
}

func (o *SyncResourceNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/resources/sync][%d] syncResourceNotFound %s", 404, payload)
}

func (o *SyncResourceNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SyncResourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncResourceMethodNotAllowed creates a SyncResourceMethodNotAllowed with default headers values
func NewSyncResourceMethodNotAllowed() *SyncResourceMethodNotAllowed {
	return &SyncResourceMethodNotAllowed{}
}

/*
SyncResourceMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type SyncResourceMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this sync resource method not allowed response has a 2xx status code
func (o *SyncResourceMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync resource method not allowed response has a 3xx status code
func (o *SyncResourceMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync resource method not allowed response has a 4xx status code
func (o *SyncResourceMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync resource method not allowed response has a 5xx status code
func (o *SyncResourceMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this sync resource method not allowed response a status code equal to that given
func (o *SyncResourceMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the sync resource method not allowed response
func (o *SyncResourceMethodNotAllowed) Code() int {
	return 405
}

func (o *SyncResourceMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/resources/sync][%d] syncResourceMethodNotAllowed %s", 405, payload)
}

func (o *SyncResourceMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/resources/sync][%d] syncResourceMethodNotAllowed %s", 405, payload)
}

func (o *SyncResourceMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SyncResourceMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncResourceInternalServerError creates a SyncResourceInternalServerError with default headers values
func NewSyncResourceInternalServerError() *SyncResourceInternalServerError {
	return &SyncResourceInternalServerError{}
}

/*
SyncResourceInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type SyncResourceInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this sync resource internal server error response has a 2xx status code
func (o *SyncResourceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync resource internal server error response has a 3xx status code
func (o *SyncResourceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync resource internal server error response has a 4xx status code
func (o *SyncResourceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this sync resource internal server error response has a 5xx status code
func (o *SyncResourceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this sync resource internal server error response a status code equal to that given
func (o *SyncResourceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the sync resource internal server error response
func (o *SyncResourceInternalServerError) Code() int {
	return 500
}

func (o *SyncResourceInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/resources/sync][%d] syncResourceInternalServerError %s", 500, payload)
}

func (o *SyncResourceInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/resources/sync][%d] syncResourceInternalServerError %s", 500, payload)
}

func (o *SyncResourceInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SyncResourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
