// Code generated by go-swagger; DO NOT EDIT.

package ui_resource_status_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetResourceStatusUsingGETReader is a Reader for the GetResourceStatusUsingGET structure.
type GetResourceStatusUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetResourceStatusUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetResourceStatusUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetResourceStatusUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetResourceStatusUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetResourceStatusUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/resources/{projectName}/{environmentName}/status] getResourceStatusUsingGET", response, response.Code())
	}
}

// NewGetResourceStatusUsingGETOK creates a GetResourceStatusUsingGETOK with default headers values
func NewGetResourceStatusUsingGETOK() *GetResourceStatusUsingGETOK {
	return &GetResourceStatusUsingGETOK{}
}

/*
GetResourceStatusUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetResourceStatusUsingGETOK struct {
	Payload *models.ResourceStatusResponse
}

// IsSuccess returns true when this get resource status using g e t o k response has a 2xx status code
func (o *GetResourceStatusUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get resource status using g e t o k response has a 3xx status code
func (o *GetResourceStatusUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get resource status using g e t o k response has a 4xx status code
func (o *GetResourceStatusUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get resource status using g e t o k response has a 5xx status code
func (o *GetResourceStatusUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get resource status using g e t o k response a status code equal to that given
func (o *GetResourceStatusUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get resource status using g e t o k response
func (o *GetResourceStatusUsingGETOK) Code() int {
	return 200
}

func (o *GetResourceStatusUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{projectName}/{environmentName}/status][%d] getResourceStatusUsingGETOK %s", 200, payload)
}

func (o *GetResourceStatusUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{projectName}/{environmentName}/status][%d] getResourceStatusUsingGETOK %s", 200, payload)
}

func (o *GetResourceStatusUsingGETOK) GetPayload() *models.ResourceStatusResponse {
	return o.Payload
}

func (o *GetResourceStatusUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResourceStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetResourceStatusUsingGETUnauthorized creates a GetResourceStatusUsingGETUnauthorized with default headers values
func NewGetResourceStatusUsingGETUnauthorized() *GetResourceStatusUsingGETUnauthorized {
	return &GetResourceStatusUsingGETUnauthorized{}
}

/*
GetResourceStatusUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetResourceStatusUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get resource status using g e t unauthorized response has a 2xx status code
func (o *GetResourceStatusUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get resource status using g e t unauthorized response has a 3xx status code
func (o *GetResourceStatusUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get resource status using g e t unauthorized response has a 4xx status code
func (o *GetResourceStatusUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get resource status using g e t unauthorized response has a 5xx status code
func (o *GetResourceStatusUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get resource status using g e t unauthorized response a status code equal to that given
func (o *GetResourceStatusUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get resource status using g e t unauthorized response
func (o *GetResourceStatusUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetResourceStatusUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{projectName}/{environmentName}/status][%d] getResourceStatusUsingGETUnauthorized", 401)
}

func (o *GetResourceStatusUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{projectName}/{environmentName}/status][%d] getResourceStatusUsingGETUnauthorized", 401)
}

func (o *GetResourceStatusUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetResourceStatusUsingGETForbidden creates a GetResourceStatusUsingGETForbidden with default headers values
func NewGetResourceStatusUsingGETForbidden() *GetResourceStatusUsingGETForbidden {
	return &GetResourceStatusUsingGETForbidden{}
}

/*
GetResourceStatusUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetResourceStatusUsingGETForbidden struct {
}

// IsSuccess returns true when this get resource status using g e t forbidden response has a 2xx status code
func (o *GetResourceStatusUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get resource status using g e t forbidden response has a 3xx status code
func (o *GetResourceStatusUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get resource status using g e t forbidden response has a 4xx status code
func (o *GetResourceStatusUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get resource status using g e t forbidden response has a 5xx status code
func (o *GetResourceStatusUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get resource status using g e t forbidden response a status code equal to that given
func (o *GetResourceStatusUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get resource status using g e t forbidden response
func (o *GetResourceStatusUsingGETForbidden) Code() int {
	return 403
}

func (o *GetResourceStatusUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{projectName}/{environmentName}/status][%d] getResourceStatusUsingGETForbidden", 403)
}

func (o *GetResourceStatusUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{projectName}/{environmentName}/status][%d] getResourceStatusUsingGETForbidden", 403)
}

func (o *GetResourceStatusUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetResourceStatusUsingGETNotFound creates a GetResourceStatusUsingGETNotFound with default headers values
func NewGetResourceStatusUsingGETNotFound() *GetResourceStatusUsingGETNotFound {
	return &GetResourceStatusUsingGETNotFound{}
}

/*
GetResourceStatusUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetResourceStatusUsingGETNotFound struct {
}

// IsSuccess returns true when this get resource status using g e t not found response has a 2xx status code
func (o *GetResourceStatusUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get resource status using g e t not found response has a 3xx status code
func (o *GetResourceStatusUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get resource status using g e t not found response has a 4xx status code
func (o *GetResourceStatusUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get resource status using g e t not found response has a 5xx status code
func (o *GetResourceStatusUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get resource status using g e t not found response a status code equal to that given
func (o *GetResourceStatusUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get resource status using g e t not found response
func (o *GetResourceStatusUsingGETNotFound) Code() int {
	return 404
}

func (o *GetResourceStatusUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{projectName}/{environmentName}/status][%d] getResourceStatusUsingGETNotFound", 404)
}

func (o *GetResourceStatusUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resources/{projectName}/{environmentName}/status][%d] getResourceStatusUsingGETNotFound", 404)
}

func (o *GetResourceStatusUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
