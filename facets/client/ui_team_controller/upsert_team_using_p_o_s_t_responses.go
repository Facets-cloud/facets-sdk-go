// Code generated by go-swagger; DO NOT EDIT.

package ui_team_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpsertTeamUsingPOSTReader is a Reader for the UpsertTeamUsingPOST structure.
type UpsertTeamUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpsertTeamUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpsertTeamUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpsertTeamUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpsertTeamUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpsertTeamUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpsertTeamUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/teams/] upsertTeamUsingPOST", response, response.Code())
	}
}

// NewUpsertTeamUsingPOSTOK creates a UpsertTeamUsingPOSTOK with default headers values
func NewUpsertTeamUsingPOSTOK() *UpsertTeamUsingPOSTOK {
	return &UpsertTeamUsingPOSTOK{}
}

/*
UpsertTeamUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type UpsertTeamUsingPOSTOK struct {
	Payload *models.Team
}

// IsSuccess returns true when this upsert team using p o s t o k response has a 2xx status code
func (o *UpsertTeamUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upsert team using p o s t o k response has a 3xx status code
func (o *UpsertTeamUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert team using p o s t o k response has a 4xx status code
func (o *UpsertTeamUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert team using p o s t o k response has a 5xx status code
func (o *UpsertTeamUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert team using p o s t o k response a status code equal to that given
func (o *UpsertTeamUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upsert team using p o s t o k response
func (o *UpsertTeamUsingPOSTOK) Code() int {
	return 200
}

func (o *UpsertTeamUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/teams/][%d] upsertTeamUsingPOSTOK %s", 200, payload)
}

func (o *UpsertTeamUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/teams/][%d] upsertTeamUsingPOSTOK %s", 200, payload)
}

func (o *UpsertTeamUsingPOSTOK) GetPayload() *models.Team {
	return o.Payload
}

func (o *UpsertTeamUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Team)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTeamUsingPOSTCreated creates a UpsertTeamUsingPOSTCreated with default headers values
func NewUpsertTeamUsingPOSTCreated() *UpsertTeamUsingPOSTCreated {
	return &UpsertTeamUsingPOSTCreated{}
}

/*
UpsertTeamUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type UpsertTeamUsingPOSTCreated struct {
}

// IsSuccess returns true when this upsert team using p o s t created response has a 2xx status code
func (o *UpsertTeamUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upsert team using p o s t created response has a 3xx status code
func (o *UpsertTeamUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert team using p o s t created response has a 4xx status code
func (o *UpsertTeamUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert team using p o s t created response has a 5xx status code
func (o *UpsertTeamUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert team using p o s t created response a status code equal to that given
func (o *UpsertTeamUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the upsert team using p o s t created response
func (o *UpsertTeamUsingPOSTCreated) Code() int {
	return 201
}

func (o *UpsertTeamUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/teams/][%d] upsertTeamUsingPOSTCreated", 201)
}

func (o *UpsertTeamUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/teams/][%d] upsertTeamUsingPOSTCreated", 201)
}

func (o *UpsertTeamUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpsertTeamUsingPOSTUnauthorized creates a UpsertTeamUsingPOSTUnauthorized with default headers values
func NewUpsertTeamUsingPOSTUnauthorized() *UpsertTeamUsingPOSTUnauthorized {
	return &UpsertTeamUsingPOSTUnauthorized{}
}

/*
UpsertTeamUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpsertTeamUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this upsert team using p o s t unauthorized response has a 2xx status code
func (o *UpsertTeamUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert team using p o s t unauthorized response has a 3xx status code
func (o *UpsertTeamUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert team using p o s t unauthorized response has a 4xx status code
func (o *UpsertTeamUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert team using p o s t unauthorized response has a 5xx status code
func (o *UpsertTeamUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert team using p o s t unauthorized response a status code equal to that given
func (o *UpsertTeamUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the upsert team using p o s t unauthorized response
func (o *UpsertTeamUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *UpsertTeamUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/teams/][%d] upsertTeamUsingPOSTUnauthorized", 401)
}

func (o *UpsertTeamUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/teams/][%d] upsertTeamUsingPOSTUnauthorized", 401)
}

func (o *UpsertTeamUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpsertTeamUsingPOSTForbidden creates a UpsertTeamUsingPOSTForbidden with default headers values
func NewUpsertTeamUsingPOSTForbidden() *UpsertTeamUsingPOSTForbidden {
	return &UpsertTeamUsingPOSTForbidden{}
}

/*
UpsertTeamUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpsertTeamUsingPOSTForbidden struct {
}

// IsSuccess returns true when this upsert team using p o s t forbidden response has a 2xx status code
func (o *UpsertTeamUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert team using p o s t forbidden response has a 3xx status code
func (o *UpsertTeamUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert team using p o s t forbidden response has a 4xx status code
func (o *UpsertTeamUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert team using p o s t forbidden response has a 5xx status code
func (o *UpsertTeamUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert team using p o s t forbidden response a status code equal to that given
func (o *UpsertTeamUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the upsert team using p o s t forbidden response
func (o *UpsertTeamUsingPOSTForbidden) Code() int {
	return 403
}

func (o *UpsertTeamUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/teams/][%d] upsertTeamUsingPOSTForbidden", 403)
}

func (o *UpsertTeamUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/teams/][%d] upsertTeamUsingPOSTForbidden", 403)
}

func (o *UpsertTeamUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpsertTeamUsingPOSTNotFound creates a UpsertTeamUsingPOSTNotFound with default headers values
func NewUpsertTeamUsingPOSTNotFound() *UpsertTeamUsingPOSTNotFound {
	return &UpsertTeamUsingPOSTNotFound{}
}

/*
UpsertTeamUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpsertTeamUsingPOSTNotFound struct {
}

// IsSuccess returns true when this upsert team using p o s t not found response has a 2xx status code
func (o *UpsertTeamUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert team using p o s t not found response has a 3xx status code
func (o *UpsertTeamUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert team using p o s t not found response has a 4xx status code
func (o *UpsertTeamUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert team using p o s t not found response has a 5xx status code
func (o *UpsertTeamUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert team using p o s t not found response a status code equal to that given
func (o *UpsertTeamUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the upsert team using p o s t not found response
func (o *UpsertTeamUsingPOSTNotFound) Code() int {
	return 404
}

func (o *UpsertTeamUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/teams/][%d] upsertTeamUsingPOSTNotFound", 404)
}

func (o *UpsertTeamUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/teams/][%d] upsertTeamUsingPOSTNotFound", 404)
}

func (o *UpsertTeamUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
