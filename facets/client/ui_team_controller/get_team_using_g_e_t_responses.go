// Code generated by go-swagger; DO NOT EDIT.

package ui_team_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetTeamUsingGETReader is a Reader for the GetTeamUsingGET structure.
type GetTeamUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTeamUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTeamUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetTeamUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTeamUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTeamUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/teams/{teamId}] getTeamUsingGET", response, response.Code())
	}
}

// NewGetTeamUsingGETOK creates a GetTeamUsingGETOK with default headers values
func NewGetTeamUsingGETOK() *GetTeamUsingGETOK {
	return &GetTeamUsingGETOK{}
}

/*
GetTeamUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetTeamUsingGETOK struct {
	Payload *models.Team
}

// IsSuccess returns true when this get team using g e t o k response has a 2xx status code
func (o *GetTeamUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get team using g e t o k response has a 3xx status code
func (o *GetTeamUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get team using g e t o k response has a 4xx status code
func (o *GetTeamUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get team using g e t o k response has a 5xx status code
func (o *GetTeamUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get team using g e t o k response a status code equal to that given
func (o *GetTeamUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get team using g e t o k response
func (o *GetTeamUsingGETOK) Code() int {
	return 200
}

func (o *GetTeamUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/teams/{teamId}][%d] getTeamUsingGETOK %s", 200, payload)
}

func (o *GetTeamUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/teams/{teamId}][%d] getTeamUsingGETOK %s", 200, payload)
}

func (o *GetTeamUsingGETOK) GetPayload() *models.Team {
	return o.Payload
}

func (o *GetTeamUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Team)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamUsingGETUnauthorized creates a GetTeamUsingGETUnauthorized with default headers values
func NewGetTeamUsingGETUnauthorized() *GetTeamUsingGETUnauthorized {
	return &GetTeamUsingGETUnauthorized{}
}

/*
GetTeamUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetTeamUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get team using g e t unauthorized response has a 2xx status code
func (o *GetTeamUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get team using g e t unauthorized response has a 3xx status code
func (o *GetTeamUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get team using g e t unauthorized response has a 4xx status code
func (o *GetTeamUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get team using g e t unauthorized response has a 5xx status code
func (o *GetTeamUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get team using g e t unauthorized response a status code equal to that given
func (o *GetTeamUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get team using g e t unauthorized response
func (o *GetTeamUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetTeamUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/teams/{teamId}][%d] getTeamUsingGETUnauthorized", 401)
}

func (o *GetTeamUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/teams/{teamId}][%d] getTeamUsingGETUnauthorized", 401)
}

func (o *GetTeamUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTeamUsingGETForbidden creates a GetTeamUsingGETForbidden with default headers values
func NewGetTeamUsingGETForbidden() *GetTeamUsingGETForbidden {
	return &GetTeamUsingGETForbidden{}
}

/*
GetTeamUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetTeamUsingGETForbidden struct {
}

// IsSuccess returns true when this get team using g e t forbidden response has a 2xx status code
func (o *GetTeamUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get team using g e t forbidden response has a 3xx status code
func (o *GetTeamUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get team using g e t forbidden response has a 4xx status code
func (o *GetTeamUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get team using g e t forbidden response has a 5xx status code
func (o *GetTeamUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get team using g e t forbidden response a status code equal to that given
func (o *GetTeamUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get team using g e t forbidden response
func (o *GetTeamUsingGETForbidden) Code() int {
	return 403
}

func (o *GetTeamUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/teams/{teamId}][%d] getTeamUsingGETForbidden", 403)
}

func (o *GetTeamUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/teams/{teamId}][%d] getTeamUsingGETForbidden", 403)
}

func (o *GetTeamUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTeamUsingGETNotFound creates a GetTeamUsingGETNotFound with default headers values
func NewGetTeamUsingGETNotFound() *GetTeamUsingGETNotFound {
	return &GetTeamUsingGETNotFound{}
}

/*
GetTeamUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetTeamUsingGETNotFound struct {
}

// IsSuccess returns true when this get team using g e t not found response has a 2xx status code
func (o *GetTeamUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get team using g e t not found response has a 3xx status code
func (o *GetTeamUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get team using g e t not found response has a 4xx status code
func (o *GetTeamUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get team using g e t not found response has a 5xx status code
func (o *GetTeamUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get team using g e t not found response a status code equal to that given
func (o *GetTeamUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get team using g e t not found response
func (o *GetTeamUsingGETNotFound) Code() int {
	return 404
}

func (o *GetTeamUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/teams/{teamId}][%d] getTeamUsingGETNotFound", 404)
}

func (o *GetTeamUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/teams/{teamId}][%d] getTeamUsingGETNotFound", 404)
}

func (o *GetTeamUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
