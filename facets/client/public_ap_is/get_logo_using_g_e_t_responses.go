// Code generated by go-swagger; DO NOT EDIT.

package public_ap_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetLogoUsingGETReader is a Reader for the GetLogoUsingGET structure.
type GetLogoUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLogoUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLogoUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetLogoUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLogoUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLogoUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /public/v1/logo] getLogoUsingGET", response, response.Code())
	}
}

// NewGetLogoUsingGETOK creates a GetLogoUsingGETOK with default headers values
func NewGetLogoUsingGETOK() *GetLogoUsingGETOK {
	return &GetLogoUsingGETOK{}
}

/*
GetLogoUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetLogoUsingGETOK struct {
	Payload string
}

// IsSuccess returns true when this get logo using g e t o k response has a 2xx status code
func (o *GetLogoUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get logo using g e t o k response has a 3xx status code
func (o *GetLogoUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get logo using g e t o k response has a 4xx status code
func (o *GetLogoUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get logo using g e t o k response has a 5xx status code
func (o *GetLogoUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get logo using g e t o k response a status code equal to that given
func (o *GetLogoUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get logo using g e t o k response
func (o *GetLogoUsingGETOK) Code() int {
	return 200
}

func (o *GetLogoUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/logo][%d] getLogoUsingGETOK %s", 200, payload)
}

func (o *GetLogoUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/logo][%d] getLogoUsingGETOK %s", 200, payload)
}

func (o *GetLogoUsingGETOK) GetPayload() string {
	return o.Payload
}

func (o *GetLogoUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogoUsingGETUnauthorized creates a GetLogoUsingGETUnauthorized with default headers values
func NewGetLogoUsingGETUnauthorized() *GetLogoUsingGETUnauthorized {
	return &GetLogoUsingGETUnauthorized{}
}

/*
GetLogoUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetLogoUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get logo using g e t unauthorized response has a 2xx status code
func (o *GetLogoUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get logo using g e t unauthorized response has a 3xx status code
func (o *GetLogoUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get logo using g e t unauthorized response has a 4xx status code
func (o *GetLogoUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get logo using g e t unauthorized response has a 5xx status code
func (o *GetLogoUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get logo using g e t unauthorized response a status code equal to that given
func (o *GetLogoUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get logo using g e t unauthorized response
func (o *GetLogoUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetLogoUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /public/v1/logo][%d] getLogoUsingGETUnauthorized", 401)
}

func (o *GetLogoUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /public/v1/logo][%d] getLogoUsingGETUnauthorized", 401)
}

func (o *GetLogoUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLogoUsingGETForbidden creates a GetLogoUsingGETForbidden with default headers values
func NewGetLogoUsingGETForbidden() *GetLogoUsingGETForbidden {
	return &GetLogoUsingGETForbidden{}
}

/*
GetLogoUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetLogoUsingGETForbidden struct {
}

// IsSuccess returns true when this get logo using g e t forbidden response has a 2xx status code
func (o *GetLogoUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get logo using g e t forbidden response has a 3xx status code
func (o *GetLogoUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get logo using g e t forbidden response has a 4xx status code
func (o *GetLogoUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get logo using g e t forbidden response has a 5xx status code
func (o *GetLogoUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get logo using g e t forbidden response a status code equal to that given
func (o *GetLogoUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get logo using g e t forbidden response
func (o *GetLogoUsingGETForbidden) Code() int {
	return 403
}

func (o *GetLogoUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /public/v1/logo][%d] getLogoUsingGETForbidden", 403)
}

func (o *GetLogoUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /public/v1/logo][%d] getLogoUsingGETForbidden", 403)
}

func (o *GetLogoUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLogoUsingGETNotFound creates a GetLogoUsingGETNotFound with default headers values
func NewGetLogoUsingGETNotFound() *GetLogoUsingGETNotFound {
	return &GetLogoUsingGETNotFound{}
}

/*
GetLogoUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetLogoUsingGETNotFound struct {
}

// IsSuccess returns true when this get logo using g e t not found response has a 2xx status code
func (o *GetLogoUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get logo using g e t not found response has a 3xx status code
func (o *GetLogoUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get logo using g e t not found response has a 4xx status code
func (o *GetLogoUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get logo using g e t not found response has a 5xx status code
func (o *GetLogoUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get logo using g e t not found response a status code equal to that given
func (o *GetLogoUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get logo using g e t not found response
func (o *GetLogoUsingGETNotFound) Code() int {
	return 404
}

func (o *GetLogoUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /public/v1/logo][%d] getLogoUsingGETNotFound", 404)
}

func (o *GetLogoUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /public/v1/logo][%d] getLogoUsingGETNotFound", 404)
}

func (o *GetLogoUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
