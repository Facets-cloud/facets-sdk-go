// Code generated by go-swagger; DO NOT EDIT.

package public_ap_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// LinkK8sAccountReader is a Reader for the LinkK8sAccount structure.
type LinkK8sAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LinkK8sAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLinkK8sAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLinkK8sAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLinkK8sAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewLinkK8sAccountMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLinkK8sAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /public/v1/link-kubernetes] linkK8sAccount", response, response.Code())
	}
}

// NewLinkK8sAccountOK creates a LinkK8sAccountOK with default headers values
func NewLinkK8sAccountOK() *LinkK8sAccountOK {
	return &LinkK8sAccountOK{}
}

/*
LinkK8sAccountOK describes a response with status code 200, with default header values.

OK
*/
type LinkK8sAccountOK struct {
}

// IsSuccess returns true when this link k8s account o k response has a 2xx status code
func (o *LinkK8sAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this link k8s account o k response has a 3xx status code
func (o *LinkK8sAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link k8s account o k response has a 4xx status code
func (o *LinkK8sAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this link k8s account o k response has a 5xx status code
func (o *LinkK8sAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this link k8s account o k response a status code equal to that given
func (o *LinkK8sAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the link k8s account o k response
func (o *LinkK8sAccountOK) Code() int {
	return 200
}

func (o *LinkK8sAccountOK) Error() string {
	return fmt.Sprintf("[POST /public/v1/link-kubernetes][%d] linkK8sAccountOK", 200)
}

func (o *LinkK8sAccountOK) String() string {
	return fmt.Sprintf("[POST /public/v1/link-kubernetes][%d] linkK8sAccountOK", 200)
}

func (o *LinkK8sAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinkK8sAccountBadRequest creates a LinkK8sAccountBadRequest with default headers values
func NewLinkK8sAccountBadRequest() *LinkK8sAccountBadRequest {
	return &LinkK8sAccountBadRequest{}
}

/*
LinkK8sAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type LinkK8sAccountBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link k8s account bad request response has a 2xx status code
func (o *LinkK8sAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link k8s account bad request response has a 3xx status code
func (o *LinkK8sAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link k8s account bad request response has a 4xx status code
func (o *LinkK8sAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this link k8s account bad request response has a 5xx status code
func (o *LinkK8sAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this link k8s account bad request response a status code equal to that given
func (o *LinkK8sAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the link k8s account bad request response
func (o *LinkK8sAccountBadRequest) Code() int {
	return 400
}

func (o *LinkK8sAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-kubernetes][%d] linkK8sAccountBadRequest %s", 400, payload)
}

func (o *LinkK8sAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-kubernetes][%d] linkK8sAccountBadRequest %s", 400, payload)
}

func (o *LinkK8sAccountBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkK8sAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkK8sAccountNotFound creates a LinkK8sAccountNotFound with default headers values
func NewLinkK8sAccountNotFound() *LinkK8sAccountNotFound {
	return &LinkK8sAccountNotFound{}
}

/*
LinkK8sAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type LinkK8sAccountNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link k8s account not found response has a 2xx status code
func (o *LinkK8sAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link k8s account not found response has a 3xx status code
func (o *LinkK8sAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link k8s account not found response has a 4xx status code
func (o *LinkK8sAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this link k8s account not found response has a 5xx status code
func (o *LinkK8sAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this link k8s account not found response a status code equal to that given
func (o *LinkK8sAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the link k8s account not found response
func (o *LinkK8sAccountNotFound) Code() int {
	return 404
}

func (o *LinkK8sAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-kubernetes][%d] linkK8sAccountNotFound %s", 404, payload)
}

func (o *LinkK8sAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-kubernetes][%d] linkK8sAccountNotFound %s", 404, payload)
}

func (o *LinkK8sAccountNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkK8sAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkK8sAccountMethodNotAllowed creates a LinkK8sAccountMethodNotAllowed with default headers values
func NewLinkK8sAccountMethodNotAllowed() *LinkK8sAccountMethodNotAllowed {
	return &LinkK8sAccountMethodNotAllowed{}
}

/*
LinkK8sAccountMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type LinkK8sAccountMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link k8s account method not allowed response has a 2xx status code
func (o *LinkK8sAccountMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link k8s account method not allowed response has a 3xx status code
func (o *LinkK8sAccountMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link k8s account method not allowed response has a 4xx status code
func (o *LinkK8sAccountMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this link k8s account method not allowed response has a 5xx status code
func (o *LinkK8sAccountMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this link k8s account method not allowed response a status code equal to that given
func (o *LinkK8sAccountMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the link k8s account method not allowed response
func (o *LinkK8sAccountMethodNotAllowed) Code() int {
	return 405
}

func (o *LinkK8sAccountMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-kubernetes][%d] linkK8sAccountMethodNotAllowed %s", 405, payload)
}

func (o *LinkK8sAccountMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-kubernetes][%d] linkK8sAccountMethodNotAllowed %s", 405, payload)
}

func (o *LinkK8sAccountMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkK8sAccountMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkK8sAccountInternalServerError creates a LinkK8sAccountInternalServerError with default headers values
func NewLinkK8sAccountInternalServerError() *LinkK8sAccountInternalServerError {
	return &LinkK8sAccountInternalServerError{}
}

/*
LinkK8sAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type LinkK8sAccountInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link k8s account internal server error response has a 2xx status code
func (o *LinkK8sAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link k8s account internal server error response has a 3xx status code
func (o *LinkK8sAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link k8s account internal server error response has a 4xx status code
func (o *LinkK8sAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this link k8s account internal server error response has a 5xx status code
func (o *LinkK8sAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this link k8s account internal server error response a status code equal to that given
func (o *LinkK8sAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the link k8s account internal server error response
func (o *LinkK8sAccountInternalServerError) Code() int {
	return 500
}

func (o *LinkK8sAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-kubernetes][%d] linkK8sAccountInternalServerError %s", 500, payload)
}

func (o *LinkK8sAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-kubernetes][%d] linkK8sAccountInternalServerError %s", 500, payload)
}

func (o *LinkK8sAccountInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkK8sAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
