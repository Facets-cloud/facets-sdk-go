// Code generated by go-swagger; DO NOT EDIT.

package public_ap_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// LinkGcpAccountReader is a Reader for the LinkGcpAccount structure.
type LinkGcpAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LinkGcpAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLinkGcpAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLinkGcpAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLinkGcpAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewLinkGcpAccountMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLinkGcpAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /public/v1/link-gcp] linkGcpAccount", response, response.Code())
	}
}

// NewLinkGcpAccountOK creates a LinkGcpAccountOK with default headers values
func NewLinkGcpAccountOK() *LinkGcpAccountOK {
	return &LinkGcpAccountOK{}
}

/*
LinkGcpAccountOK describes a response with status code 200, with default header values.

OK
*/
type LinkGcpAccountOK struct {
}

// IsSuccess returns true when this link gcp account o k response has a 2xx status code
func (o *LinkGcpAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this link gcp account o k response has a 3xx status code
func (o *LinkGcpAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link gcp account o k response has a 4xx status code
func (o *LinkGcpAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this link gcp account o k response has a 5xx status code
func (o *LinkGcpAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this link gcp account o k response a status code equal to that given
func (o *LinkGcpAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the link gcp account o k response
func (o *LinkGcpAccountOK) Code() int {
	return 200
}

func (o *LinkGcpAccountOK) Error() string {
	return fmt.Sprintf("[POST /public/v1/link-gcp][%d] linkGcpAccountOK", 200)
}

func (o *LinkGcpAccountOK) String() string {
	return fmt.Sprintf("[POST /public/v1/link-gcp][%d] linkGcpAccountOK", 200)
}

func (o *LinkGcpAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinkGcpAccountBadRequest creates a LinkGcpAccountBadRequest with default headers values
func NewLinkGcpAccountBadRequest() *LinkGcpAccountBadRequest {
	return &LinkGcpAccountBadRequest{}
}

/*
LinkGcpAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type LinkGcpAccountBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link gcp account bad request response has a 2xx status code
func (o *LinkGcpAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link gcp account bad request response has a 3xx status code
func (o *LinkGcpAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link gcp account bad request response has a 4xx status code
func (o *LinkGcpAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this link gcp account bad request response has a 5xx status code
func (o *LinkGcpAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this link gcp account bad request response a status code equal to that given
func (o *LinkGcpAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the link gcp account bad request response
func (o *LinkGcpAccountBadRequest) Code() int {
	return 400
}

func (o *LinkGcpAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-gcp][%d] linkGcpAccountBadRequest %s", 400, payload)
}

func (o *LinkGcpAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-gcp][%d] linkGcpAccountBadRequest %s", 400, payload)
}

func (o *LinkGcpAccountBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkGcpAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkGcpAccountNotFound creates a LinkGcpAccountNotFound with default headers values
func NewLinkGcpAccountNotFound() *LinkGcpAccountNotFound {
	return &LinkGcpAccountNotFound{}
}

/*
LinkGcpAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type LinkGcpAccountNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link gcp account not found response has a 2xx status code
func (o *LinkGcpAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link gcp account not found response has a 3xx status code
func (o *LinkGcpAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link gcp account not found response has a 4xx status code
func (o *LinkGcpAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this link gcp account not found response has a 5xx status code
func (o *LinkGcpAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this link gcp account not found response a status code equal to that given
func (o *LinkGcpAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the link gcp account not found response
func (o *LinkGcpAccountNotFound) Code() int {
	return 404
}

func (o *LinkGcpAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-gcp][%d] linkGcpAccountNotFound %s", 404, payload)
}

func (o *LinkGcpAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-gcp][%d] linkGcpAccountNotFound %s", 404, payload)
}

func (o *LinkGcpAccountNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkGcpAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkGcpAccountMethodNotAllowed creates a LinkGcpAccountMethodNotAllowed with default headers values
func NewLinkGcpAccountMethodNotAllowed() *LinkGcpAccountMethodNotAllowed {
	return &LinkGcpAccountMethodNotAllowed{}
}

/*
LinkGcpAccountMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type LinkGcpAccountMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link gcp account method not allowed response has a 2xx status code
func (o *LinkGcpAccountMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link gcp account method not allowed response has a 3xx status code
func (o *LinkGcpAccountMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link gcp account method not allowed response has a 4xx status code
func (o *LinkGcpAccountMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this link gcp account method not allowed response has a 5xx status code
func (o *LinkGcpAccountMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this link gcp account method not allowed response a status code equal to that given
func (o *LinkGcpAccountMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the link gcp account method not allowed response
func (o *LinkGcpAccountMethodNotAllowed) Code() int {
	return 405
}

func (o *LinkGcpAccountMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-gcp][%d] linkGcpAccountMethodNotAllowed %s", 405, payload)
}

func (o *LinkGcpAccountMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-gcp][%d] linkGcpAccountMethodNotAllowed %s", 405, payload)
}

func (o *LinkGcpAccountMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkGcpAccountMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkGcpAccountInternalServerError creates a LinkGcpAccountInternalServerError with default headers values
func NewLinkGcpAccountInternalServerError() *LinkGcpAccountInternalServerError {
	return &LinkGcpAccountInternalServerError{}
}

/*
LinkGcpAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type LinkGcpAccountInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link gcp account internal server error response has a 2xx status code
func (o *LinkGcpAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link gcp account internal server error response has a 3xx status code
func (o *LinkGcpAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link gcp account internal server error response has a 4xx status code
func (o *LinkGcpAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this link gcp account internal server error response has a 5xx status code
func (o *LinkGcpAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this link gcp account internal server error response a status code equal to that given
func (o *LinkGcpAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the link gcp account internal server error response
func (o *LinkGcpAccountInternalServerError) Code() int {
	return 500
}

func (o *LinkGcpAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-gcp][%d] linkGcpAccountInternalServerError %s", 500, payload)
}

func (o *LinkGcpAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-gcp][%d] linkGcpAccountInternalServerError %s", 500, payload)
}

func (o *LinkGcpAccountInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkGcpAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
