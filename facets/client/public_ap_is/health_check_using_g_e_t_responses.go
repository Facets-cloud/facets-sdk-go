// Code generated by go-swagger; DO NOT EDIT.

package public_ap_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// HealthCheckUsingGETReader is a Reader for the HealthCheckUsingGET structure.
type HealthCheckUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HealthCheckUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHealthCheckUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewHealthCheckUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHealthCheckUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHealthCheckUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /public/v1/health] healthCheckUsingGET", response, response.Code())
	}
}

// NewHealthCheckUsingGETOK creates a HealthCheckUsingGETOK with default headers values
func NewHealthCheckUsingGETOK() *HealthCheckUsingGETOK {
	return &HealthCheckUsingGETOK{}
}

/*
HealthCheckUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type HealthCheckUsingGETOK struct {
	Payload map[string]interface{}
}

// IsSuccess returns true when this health check using g e t o k response has a 2xx status code
func (o *HealthCheckUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this health check using g e t o k response has a 3xx status code
func (o *HealthCheckUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this health check using g e t o k response has a 4xx status code
func (o *HealthCheckUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this health check using g e t o k response has a 5xx status code
func (o *HealthCheckUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this health check using g e t o k response a status code equal to that given
func (o *HealthCheckUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the health check using g e t o k response
func (o *HealthCheckUsingGETOK) Code() int {
	return 200
}

func (o *HealthCheckUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/health][%d] healthCheckUsingGETOK %s", 200, payload)
}

func (o *HealthCheckUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/health][%d] healthCheckUsingGETOK %s", 200, payload)
}

func (o *HealthCheckUsingGETOK) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *HealthCheckUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHealthCheckUsingGETUnauthorized creates a HealthCheckUsingGETUnauthorized with default headers values
func NewHealthCheckUsingGETUnauthorized() *HealthCheckUsingGETUnauthorized {
	return &HealthCheckUsingGETUnauthorized{}
}

/*
HealthCheckUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type HealthCheckUsingGETUnauthorized struct {
}

// IsSuccess returns true when this health check using g e t unauthorized response has a 2xx status code
func (o *HealthCheckUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this health check using g e t unauthorized response has a 3xx status code
func (o *HealthCheckUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this health check using g e t unauthorized response has a 4xx status code
func (o *HealthCheckUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this health check using g e t unauthorized response has a 5xx status code
func (o *HealthCheckUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this health check using g e t unauthorized response a status code equal to that given
func (o *HealthCheckUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the health check using g e t unauthorized response
func (o *HealthCheckUsingGETUnauthorized) Code() int {
	return 401
}

func (o *HealthCheckUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /public/v1/health][%d] healthCheckUsingGETUnauthorized", 401)
}

func (o *HealthCheckUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /public/v1/health][%d] healthCheckUsingGETUnauthorized", 401)
}

func (o *HealthCheckUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHealthCheckUsingGETForbidden creates a HealthCheckUsingGETForbidden with default headers values
func NewHealthCheckUsingGETForbidden() *HealthCheckUsingGETForbidden {
	return &HealthCheckUsingGETForbidden{}
}

/*
HealthCheckUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type HealthCheckUsingGETForbidden struct {
}

// IsSuccess returns true when this health check using g e t forbidden response has a 2xx status code
func (o *HealthCheckUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this health check using g e t forbidden response has a 3xx status code
func (o *HealthCheckUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this health check using g e t forbidden response has a 4xx status code
func (o *HealthCheckUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this health check using g e t forbidden response has a 5xx status code
func (o *HealthCheckUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this health check using g e t forbidden response a status code equal to that given
func (o *HealthCheckUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the health check using g e t forbidden response
func (o *HealthCheckUsingGETForbidden) Code() int {
	return 403
}

func (o *HealthCheckUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /public/v1/health][%d] healthCheckUsingGETForbidden", 403)
}

func (o *HealthCheckUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /public/v1/health][%d] healthCheckUsingGETForbidden", 403)
}

func (o *HealthCheckUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHealthCheckUsingGETNotFound creates a HealthCheckUsingGETNotFound with default headers values
func NewHealthCheckUsingGETNotFound() *HealthCheckUsingGETNotFound {
	return &HealthCheckUsingGETNotFound{}
}

/*
HealthCheckUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type HealthCheckUsingGETNotFound struct {
}

// IsSuccess returns true when this health check using g e t not found response has a 2xx status code
func (o *HealthCheckUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this health check using g e t not found response has a 3xx status code
func (o *HealthCheckUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this health check using g e t not found response has a 4xx status code
func (o *HealthCheckUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this health check using g e t not found response has a 5xx status code
func (o *HealthCheckUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this health check using g e t not found response a status code equal to that given
func (o *HealthCheckUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the health check using g e t not found response
func (o *HealthCheckUsingGETNotFound) Code() int {
	return 404
}

func (o *HealthCheckUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /public/v1/health][%d] healthCheckUsingGETNotFound", 404)
}

func (o *HealthCheckUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /public/v1/health][%d] healthCheckUsingGETNotFound", 404)
}

func (o *HealthCheckUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
