// Code generated by go-swagger; DO NOT EDIT.

package public_ap_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// LinkGitlabAccountReader is a Reader for the LinkGitlabAccount structure.
type LinkGitlabAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LinkGitlabAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLinkGitlabAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLinkGitlabAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLinkGitlabAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewLinkGitlabAccountMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLinkGitlabAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /public/v1/link-gitlab] linkGitlabAccount", response, response.Code())
	}
}

// NewLinkGitlabAccountOK creates a LinkGitlabAccountOK with default headers values
func NewLinkGitlabAccountOK() *LinkGitlabAccountOK {
	return &LinkGitlabAccountOK{}
}

/*
LinkGitlabAccountOK describes a response with status code 200, with default header values.

OK
*/
type LinkGitlabAccountOK struct {
}

// IsSuccess returns true when this link gitlab account o k response has a 2xx status code
func (o *LinkGitlabAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this link gitlab account o k response has a 3xx status code
func (o *LinkGitlabAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link gitlab account o k response has a 4xx status code
func (o *LinkGitlabAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this link gitlab account o k response has a 5xx status code
func (o *LinkGitlabAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this link gitlab account o k response a status code equal to that given
func (o *LinkGitlabAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the link gitlab account o k response
func (o *LinkGitlabAccountOK) Code() int {
	return 200
}

func (o *LinkGitlabAccountOK) Error() string {
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountOK", 200)
}

func (o *LinkGitlabAccountOK) String() string {
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountOK", 200)
}

func (o *LinkGitlabAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinkGitlabAccountBadRequest creates a LinkGitlabAccountBadRequest with default headers values
func NewLinkGitlabAccountBadRequest() *LinkGitlabAccountBadRequest {
	return &LinkGitlabAccountBadRequest{}
}

/*
LinkGitlabAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type LinkGitlabAccountBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link gitlab account bad request response has a 2xx status code
func (o *LinkGitlabAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link gitlab account bad request response has a 3xx status code
func (o *LinkGitlabAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link gitlab account bad request response has a 4xx status code
func (o *LinkGitlabAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this link gitlab account bad request response has a 5xx status code
func (o *LinkGitlabAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this link gitlab account bad request response a status code equal to that given
func (o *LinkGitlabAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the link gitlab account bad request response
func (o *LinkGitlabAccountBadRequest) Code() int {
	return 400
}

func (o *LinkGitlabAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountBadRequest %s", 400, payload)
}

func (o *LinkGitlabAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountBadRequest %s", 400, payload)
}

func (o *LinkGitlabAccountBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkGitlabAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkGitlabAccountNotFound creates a LinkGitlabAccountNotFound with default headers values
func NewLinkGitlabAccountNotFound() *LinkGitlabAccountNotFound {
	return &LinkGitlabAccountNotFound{}
}

/*
LinkGitlabAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type LinkGitlabAccountNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link gitlab account not found response has a 2xx status code
func (o *LinkGitlabAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link gitlab account not found response has a 3xx status code
func (o *LinkGitlabAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link gitlab account not found response has a 4xx status code
func (o *LinkGitlabAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this link gitlab account not found response has a 5xx status code
func (o *LinkGitlabAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this link gitlab account not found response a status code equal to that given
func (o *LinkGitlabAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the link gitlab account not found response
func (o *LinkGitlabAccountNotFound) Code() int {
	return 404
}

func (o *LinkGitlabAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountNotFound %s", 404, payload)
}

func (o *LinkGitlabAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountNotFound %s", 404, payload)
}

func (o *LinkGitlabAccountNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkGitlabAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkGitlabAccountMethodNotAllowed creates a LinkGitlabAccountMethodNotAllowed with default headers values
func NewLinkGitlabAccountMethodNotAllowed() *LinkGitlabAccountMethodNotAllowed {
	return &LinkGitlabAccountMethodNotAllowed{}
}

/*
LinkGitlabAccountMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type LinkGitlabAccountMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link gitlab account method not allowed response has a 2xx status code
func (o *LinkGitlabAccountMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link gitlab account method not allowed response has a 3xx status code
func (o *LinkGitlabAccountMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link gitlab account method not allowed response has a 4xx status code
func (o *LinkGitlabAccountMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this link gitlab account method not allowed response has a 5xx status code
func (o *LinkGitlabAccountMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this link gitlab account method not allowed response a status code equal to that given
func (o *LinkGitlabAccountMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the link gitlab account method not allowed response
func (o *LinkGitlabAccountMethodNotAllowed) Code() int {
	return 405
}

func (o *LinkGitlabAccountMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountMethodNotAllowed %s", 405, payload)
}

func (o *LinkGitlabAccountMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountMethodNotAllowed %s", 405, payload)
}

func (o *LinkGitlabAccountMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkGitlabAccountMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkGitlabAccountInternalServerError creates a LinkGitlabAccountInternalServerError with default headers values
func NewLinkGitlabAccountInternalServerError() *LinkGitlabAccountInternalServerError {
	return &LinkGitlabAccountInternalServerError{}
}

/*
LinkGitlabAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type LinkGitlabAccountInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link gitlab account internal server error response has a 2xx status code
func (o *LinkGitlabAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link gitlab account internal server error response has a 3xx status code
func (o *LinkGitlabAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link gitlab account internal server error response has a 4xx status code
func (o *LinkGitlabAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this link gitlab account internal server error response has a 5xx status code
func (o *LinkGitlabAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this link gitlab account internal server error response a status code equal to that given
func (o *LinkGitlabAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the link gitlab account internal server error response
func (o *LinkGitlabAccountInternalServerError) Code() int {
	return 500
}

func (o *LinkGitlabAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountInternalServerError %s", 500, payload)
}

func (o *LinkGitlabAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountInternalServerError %s", 500, payload)
}

func (o *LinkGitlabAccountInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkGitlabAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
