// Code generated by go-swagger; DO NOT EDIT.

package public_ap_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetLoginOptionsUsingGETReader is a Reader for the GetLoginOptionsUsingGET structure.
type GetLoginOptionsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLoginOptionsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLoginOptionsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetLoginOptionsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLoginOptionsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLoginOptionsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /public/v1/loginOptions] getLoginOptionsUsingGET", response, response.Code())
	}
}

// NewGetLoginOptionsUsingGETOK creates a GetLoginOptionsUsingGETOK with default headers values
func NewGetLoginOptionsUsingGETOK() *GetLoginOptionsUsingGETOK {
	return &GetLoginOptionsUsingGETOK{}
}

/*
GetLoginOptionsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetLoginOptionsUsingGETOK struct {
	Payload []*models.CustomOAuth2ClientRegistration
}

// IsSuccess returns true when this get login options using g e t o k response has a 2xx status code
func (o *GetLoginOptionsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get login options using g e t o k response has a 3xx status code
func (o *GetLoginOptionsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get login options using g e t o k response has a 4xx status code
func (o *GetLoginOptionsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get login options using g e t o k response has a 5xx status code
func (o *GetLoginOptionsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get login options using g e t o k response a status code equal to that given
func (o *GetLoginOptionsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get login options using g e t o k response
func (o *GetLoginOptionsUsingGETOK) Code() int {
	return 200
}

func (o *GetLoginOptionsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsUsingGETOK %s", 200, payload)
}

func (o *GetLoginOptionsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsUsingGETOK %s", 200, payload)
}

func (o *GetLoginOptionsUsingGETOK) GetPayload() []*models.CustomOAuth2ClientRegistration {
	return o.Payload
}

func (o *GetLoginOptionsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLoginOptionsUsingGETUnauthorized creates a GetLoginOptionsUsingGETUnauthorized with default headers values
func NewGetLoginOptionsUsingGETUnauthorized() *GetLoginOptionsUsingGETUnauthorized {
	return &GetLoginOptionsUsingGETUnauthorized{}
}

/*
GetLoginOptionsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetLoginOptionsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get login options using g e t unauthorized response has a 2xx status code
func (o *GetLoginOptionsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get login options using g e t unauthorized response has a 3xx status code
func (o *GetLoginOptionsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get login options using g e t unauthorized response has a 4xx status code
func (o *GetLoginOptionsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get login options using g e t unauthorized response has a 5xx status code
func (o *GetLoginOptionsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get login options using g e t unauthorized response a status code equal to that given
func (o *GetLoginOptionsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get login options using g e t unauthorized response
func (o *GetLoginOptionsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetLoginOptionsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsUsingGETUnauthorized", 401)
}

func (o *GetLoginOptionsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsUsingGETUnauthorized", 401)
}

func (o *GetLoginOptionsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLoginOptionsUsingGETForbidden creates a GetLoginOptionsUsingGETForbidden with default headers values
func NewGetLoginOptionsUsingGETForbidden() *GetLoginOptionsUsingGETForbidden {
	return &GetLoginOptionsUsingGETForbidden{}
}

/*
GetLoginOptionsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetLoginOptionsUsingGETForbidden struct {
}

// IsSuccess returns true when this get login options using g e t forbidden response has a 2xx status code
func (o *GetLoginOptionsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get login options using g e t forbidden response has a 3xx status code
func (o *GetLoginOptionsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get login options using g e t forbidden response has a 4xx status code
func (o *GetLoginOptionsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get login options using g e t forbidden response has a 5xx status code
func (o *GetLoginOptionsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get login options using g e t forbidden response a status code equal to that given
func (o *GetLoginOptionsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get login options using g e t forbidden response
func (o *GetLoginOptionsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetLoginOptionsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsUsingGETForbidden", 403)
}

func (o *GetLoginOptionsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsUsingGETForbidden", 403)
}

func (o *GetLoginOptionsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLoginOptionsUsingGETNotFound creates a GetLoginOptionsUsingGETNotFound with default headers values
func NewGetLoginOptionsUsingGETNotFound() *GetLoginOptionsUsingGETNotFound {
	return &GetLoginOptionsUsingGETNotFound{}
}

/*
GetLoginOptionsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetLoginOptionsUsingGETNotFound struct {
}

// IsSuccess returns true when this get login options using g e t not found response has a 2xx status code
func (o *GetLoginOptionsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get login options using g e t not found response has a 3xx status code
func (o *GetLoginOptionsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get login options using g e t not found response has a 4xx status code
func (o *GetLoginOptionsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get login options using g e t not found response has a 5xx status code
func (o *GetLoginOptionsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get login options using g e t not found response a status code equal to that given
func (o *GetLoginOptionsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get login options using g e t not found response
func (o *GetLoginOptionsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetLoginOptionsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsUsingGETNotFound", 404)
}

func (o *GetLoginOptionsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsUsingGETNotFound", 404)
}

func (o *GetLoginOptionsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
