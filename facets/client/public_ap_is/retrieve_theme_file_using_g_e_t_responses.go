// Code generated by go-swagger; DO NOT EDIT.

package public_ap_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RetrieveThemeFileUsingGETReader is a Reader for the RetrieveThemeFileUsingGET structure.
type RetrieveThemeFileUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RetrieveThemeFileUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRetrieveThemeFileUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRetrieveThemeFileUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRetrieveThemeFileUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRetrieveThemeFileUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /public/v1/themeFile] retrieveThemeFileUsingGET", response, response.Code())
	}
}

// NewRetrieveThemeFileUsingGETOK creates a RetrieveThemeFileUsingGETOK with default headers values
func NewRetrieveThemeFileUsingGETOK() *RetrieveThemeFileUsingGETOK {
	return &RetrieveThemeFileUsingGETOK{}
}

/*
RetrieveThemeFileUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type RetrieveThemeFileUsingGETOK struct {
	Payload *models.ThemeFileResponse
}

// IsSuccess returns true when this retrieve theme file using g e t o k response has a 2xx status code
func (o *RetrieveThemeFileUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this retrieve theme file using g e t o k response has a 3xx status code
func (o *RetrieveThemeFileUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retrieve theme file using g e t o k response has a 4xx status code
func (o *RetrieveThemeFileUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this retrieve theme file using g e t o k response has a 5xx status code
func (o *RetrieveThemeFileUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this retrieve theme file using g e t o k response a status code equal to that given
func (o *RetrieveThemeFileUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the retrieve theme file using g e t o k response
func (o *RetrieveThemeFileUsingGETOK) Code() int {
	return 200
}

func (o *RetrieveThemeFileUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/themeFile][%d] retrieveThemeFileUsingGETOK %s", 200, payload)
}

func (o *RetrieveThemeFileUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/themeFile][%d] retrieveThemeFileUsingGETOK %s", 200, payload)
}

func (o *RetrieveThemeFileUsingGETOK) GetPayload() *models.ThemeFileResponse {
	return o.Payload
}

func (o *RetrieveThemeFileUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ThemeFileResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveThemeFileUsingGETUnauthorized creates a RetrieveThemeFileUsingGETUnauthorized with default headers values
func NewRetrieveThemeFileUsingGETUnauthorized() *RetrieveThemeFileUsingGETUnauthorized {
	return &RetrieveThemeFileUsingGETUnauthorized{}
}

/*
RetrieveThemeFileUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RetrieveThemeFileUsingGETUnauthorized struct {
}

// IsSuccess returns true when this retrieve theme file using g e t unauthorized response has a 2xx status code
func (o *RetrieveThemeFileUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retrieve theme file using g e t unauthorized response has a 3xx status code
func (o *RetrieveThemeFileUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retrieve theme file using g e t unauthorized response has a 4xx status code
func (o *RetrieveThemeFileUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this retrieve theme file using g e t unauthorized response has a 5xx status code
func (o *RetrieveThemeFileUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this retrieve theme file using g e t unauthorized response a status code equal to that given
func (o *RetrieveThemeFileUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the retrieve theme file using g e t unauthorized response
func (o *RetrieveThemeFileUsingGETUnauthorized) Code() int {
	return 401
}

func (o *RetrieveThemeFileUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /public/v1/themeFile][%d] retrieveThemeFileUsingGETUnauthorized", 401)
}

func (o *RetrieveThemeFileUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /public/v1/themeFile][%d] retrieveThemeFileUsingGETUnauthorized", 401)
}

func (o *RetrieveThemeFileUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRetrieveThemeFileUsingGETForbidden creates a RetrieveThemeFileUsingGETForbidden with default headers values
func NewRetrieveThemeFileUsingGETForbidden() *RetrieveThemeFileUsingGETForbidden {
	return &RetrieveThemeFileUsingGETForbidden{}
}

/*
RetrieveThemeFileUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RetrieveThemeFileUsingGETForbidden struct {
}

// IsSuccess returns true when this retrieve theme file using g e t forbidden response has a 2xx status code
func (o *RetrieveThemeFileUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retrieve theme file using g e t forbidden response has a 3xx status code
func (o *RetrieveThemeFileUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retrieve theme file using g e t forbidden response has a 4xx status code
func (o *RetrieveThemeFileUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this retrieve theme file using g e t forbidden response has a 5xx status code
func (o *RetrieveThemeFileUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this retrieve theme file using g e t forbidden response a status code equal to that given
func (o *RetrieveThemeFileUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the retrieve theme file using g e t forbidden response
func (o *RetrieveThemeFileUsingGETForbidden) Code() int {
	return 403
}

func (o *RetrieveThemeFileUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /public/v1/themeFile][%d] retrieveThemeFileUsingGETForbidden", 403)
}

func (o *RetrieveThemeFileUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /public/v1/themeFile][%d] retrieveThemeFileUsingGETForbidden", 403)
}

func (o *RetrieveThemeFileUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRetrieveThemeFileUsingGETNotFound creates a RetrieveThemeFileUsingGETNotFound with default headers values
func NewRetrieveThemeFileUsingGETNotFound() *RetrieveThemeFileUsingGETNotFound {
	return &RetrieveThemeFileUsingGETNotFound{}
}

/*
RetrieveThemeFileUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RetrieveThemeFileUsingGETNotFound struct {
}

// IsSuccess returns true when this retrieve theme file using g e t not found response has a 2xx status code
func (o *RetrieveThemeFileUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retrieve theme file using g e t not found response has a 3xx status code
func (o *RetrieveThemeFileUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retrieve theme file using g e t not found response has a 4xx status code
func (o *RetrieveThemeFileUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this retrieve theme file using g e t not found response has a 5xx status code
func (o *RetrieveThemeFileUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this retrieve theme file using g e t not found response a status code equal to that given
func (o *RetrieveThemeFileUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the retrieve theme file using g e t not found response
func (o *RetrieveThemeFileUsingGETNotFound) Code() int {
	return 404
}

func (o *RetrieveThemeFileUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /public/v1/themeFile][%d] retrieveThemeFileUsingGETNotFound", 404)
}

func (o *RetrieveThemeFileUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /public/v1/themeFile][%d] retrieveThemeFileUsingGETNotFound", 404)
}

func (o *RetrieveThemeFileUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
