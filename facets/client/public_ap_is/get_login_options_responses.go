// Code generated by go-swagger; DO NOT EDIT.

package public_ap_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetLoginOptionsReader is a Reader for the GetLoginOptions structure.
type GetLoginOptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLoginOptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLoginOptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLoginOptionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLoginOptionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetLoginOptionsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLoginOptionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /public/v1/loginOptions] getLoginOptions", response, response.Code())
	}
}

// NewGetLoginOptionsOK creates a GetLoginOptionsOK with default headers values
func NewGetLoginOptionsOK() *GetLoginOptionsOK {
	return &GetLoginOptionsOK{}
}

/*
GetLoginOptionsOK describes a response with status code 200, with default header values.

OK
*/
type GetLoginOptionsOK struct {
	Payload []*models.CustomOAuth2ClientRegistration
}

// IsSuccess returns true when this get login options o k response has a 2xx status code
func (o *GetLoginOptionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get login options o k response has a 3xx status code
func (o *GetLoginOptionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get login options o k response has a 4xx status code
func (o *GetLoginOptionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get login options o k response has a 5xx status code
func (o *GetLoginOptionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get login options o k response a status code equal to that given
func (o *GetLoginOptionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get login options o k response
func (o *GetLoginOptionsOK) Code() int {
	return 200
}

func (o *GetLoginOptionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsOK %s", 200, payload)
}

func (o *GetLoginOptionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsOK %s", 200, payload)
}

func (o *GetLoginOptionsOK) GetPayload() []*models.CustomOAuth2ClientRegistration {
	return o.Payload
}

func (o *GetLoginOptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLoginOptionsBadRequest creates a GetLoginOptionsBadRequest with default headers values
func NewGetLoginOptionsBadRequest() *GetLoginOptionsBadRequest {
	return &GetLoginOptionsBadRequest{}
}

/*
GetLoginOptionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetLoginOptionsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get login options bad request response has a 2xx status code
func (o *GetLoginOptionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get login options bad request response has a 3xx status code
func (o *GetLoginOptionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get login options bad request response has a 4xx status code
func (o *GetLoginOptionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get login options bad request response has a 5xx status code
func (o *GetLoginOptionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get login options bad request response a status code equal to that given
func (o *GetLoginOptionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get login options bad request response
func (o *GetLoginOptionsBadRequest) Code() int {
	return 400
}

func (o *GetLoginOptionsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsBadRequest %s", 400, payload)
}

func (o *GetLoginOptionsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsBadRequest %s", 400, payload)
}

func (o *GetLoginOptionsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetLoginOptionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLoginOptionsNotFound creates a GetLoginOptionsNotFound with default headers values
func NewGetLoginOptionsNotFound() *GetLoginOptionsNotFound {
	return &GetLoginOptionsNotFound{}
}

/*
GetLoginOptionsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetLoginOptionsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get login options not found response has a 2xx status code
func (o *GetLoginOptionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get login options not found response has a 3xx status code
func (o *GetLoginOptionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get login options not found response has a 4xx status code
func (o *GetLoginOptionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get login options not found response has a 5xx status code
func (o *GetLoginOptionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get login options not found response a status code equal to that given
func (o *GetLoginOptionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get login options not found response
func (o *GetLoginOptionsNotFound) Code() int {
	return 404
}

func (o *GetLoginOptionsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsNotFound %s", 404, payload)
}

func (o *GetLoginOptionsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsNotFound %s", 404, payload)
}

func (o *GetLoginOptionsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetLoginOptionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLoginOptionsMethodNotAllowed creates a GetLoginOptionsMethodNotAllowed with default headers values
func NewGetLoginOptionsMethodNotAllowed() *GetLoginOptionsMethodNotAllowed {
	return &GetLoginOptionsMethodNotAllowed{}
}

/*
GetLoginOptionsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetLoginOptionsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get login options method not allowed response has a 2xx status code
func (o *GetLoginOptionsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get login options method not allowed response has a 3xx status code
func (o *GetLoginOptionsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get login options method not allowed response has a 4xx status code
func (o *GetLoginOptionsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get login options method not allowed response has a 5xx status code
func (o *GetLoginOptionsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get login options method not allowed response a status code equal to that given
func (o *GetLoginOptionsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get login options method not allowed response
func (o *GetLoginOptionsMethodNotAllowed) Code() int {
	return 405
}

func (o *GetLoginOptionsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsMethodNotAllowed %s", 405, payload)
}

func (o *GetLoginOptionsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsMethodNotAllowed %s", 405, payload)
}

func (o *GetLoginOptionsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetLoginOptionsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLoginOptionsInternalServerError creates a GetLoginOptionsInternalServerError with default headers values
func NewGetLoginOptionsInternalServerError() *GetLoginOptionsInternalServerError {
	return &GetLoginOptionsInternalServerError{}
}

/*
GetLoginOptionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetLoginOptionsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get login options internal server error response has a 2xx status code
func (o *GetLoginOptionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get login options internal server error response has a 3xx status code
func (o *GetLoginOptionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get login options internal server error response has a 4xx status code
func (o *GetLoginOptionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get login options internal server error response has a 5xx status code
func (o *GetLoginOptionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get login options internal server error response a status code equal to that given
func (o *GetLoginOptionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get login options internal server error response
func (o *GetLoginOptionsInternalServerError) Code() int {
	return 500
}

func (o *GetLoginOptionsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsInternalServerError %s", 500, payload)
}

func (o *GetLoginOptionsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/loginOptions][%d] getLoginOptionsInternalServerError %s", 500, payload)
}

func (o *GetLoginOptionsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetLoginOptionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
