// Code generated by go-swagger; DO NOT EDIT.

package public_ap_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetAllFeaturePropertiesUsingGETReader is a Reader for the GetAllFeaturePropertiesUsingGET structure.
type GetAllFeaturePropertiesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllFeaturePropertiesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllFeaturePropertiesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllFeaturePropertiesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllFeaturePropertiesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllFeaturePropertiesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /public/v1/features] getAllFeaturePropertiesUsingGET", response, response.Code())
	}
}

// NewGetAllFeaturePropertiesUsingGETOK creates a GetAllFeaturePropertiesUsingGETOK with default headers values
func NewGetAllFeaturePropertiesUsingGETOK() *GetAllFeaturePropertiesUsingGETOK {
	return &GetAllFeaturePropertiesUsingGETOK{}
}

/*
GetAllFeaturePropertiesUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllFeaturePropertiesUsingGETOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this get all feature properties using g e t o k response has a 2xx status code
func (o *GetAllFeaturePropertiesUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all feature properties using g e t o k response has a 3xx status code
func (o *GetAllFeaturePropertiesUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all feature properties using g e t o k response has a 4xx status code
func (o *GetAllFeaturePropertiesUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all feature properties using g e t o k response has a 5xx status code
func (o *GetAllFeaturePropertiesUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all feature properties using g e t o k response a status code equal to that given
func (o *GetAllFeaturePropertiesUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all feature properties using g e t o k response
func (o *GetAllFeaturePropertiesUsingGETOK) Code() int {
	return 200
}

func (o *GetAllFeaturePropertiesUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/features][%d] getAllFeaturePropertiesUsingGETOK %s", 200, payload)
}

func (o *GetAllFeaturePropertiesUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/features][%d] getAllFeaturePropertiesUsingGETOK %s", 200, payload)
}

func (o *GetAllFeaturePropertiesUsingGETOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetAllFeaturePropertiesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllFeaturePropertiesUsingGETUnauthorized creates a GetAllFeaturePropertiesUsingGETUnauthorized with default headers values
func NewGetAllFeaturePropertiesUsingGETUnauthorized() *GetAllFeaturePropertiesUsingGETUnauthorized {
	return &GetAllFeaturePropertiesUsingGETUnauthorized{}
}

/*
GetAllFeaturePropertiesUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllFeaturePropertiesUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all feature properties using g e t unauthorized response has a 2xx status code
func (o *GetAllFeaturePropertiesUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all feature properties using g e t unauthorized response has a 3xx status code
func (o *GetAllFeaturePropertiesUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all feature properties using g e t unauthorized response has a 4xx status code
func (o *GetAllFeaturePropertiesUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all feature properties using g e t unauthorized response has a 5xx status code
func (o *GetAllFeaturePropertiesUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all feature properties using g e t unauthorized response a status code equal to that given
func (o *GetAllFeaturePropertiesUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all feature properties using g e t unauthorized response
func (o *GetAllFeaturePropertiesUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllFeaturePropertiesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /public/v1/features][%d] getAllFeaturePropertiesUsingGETUnauthorized", 401)
}

func (o *GetAllFeaturePropertiesUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /public/v1/features][%d] getAllFeaturePropertiesUsingGETUnauthorized", 401)
}

func (o *GetAllFeaturePropertiesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllFeaturePropertiesUsingGETForbidden creates a GetAllFeaturePropertiesUsingGETForbidden with default headers values
func NewGetAllFeaturePropertiesUsingGETForbidden() *GetAllFeaturePropertiesUsingGETForbidden {
	return &GetAllFeaturePropertiesUsingGETForbidden{}
}

/*
GetAllFeaturePropertiesUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllFeaturePropertiesUsingGETForbidden struct {
}

// IsSuccess returns true when this get all feature properties using g e t forbidden response has a 2xx status code
func (o *GetAllFeaturePropertiesUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all feature properties using g e t forbidden response has a 3xx status code
func (o *GetAllFeaturePropertiesUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all feature properties using g e t forbidden response has a 4xx status code
func (o *GetAllFeaturePropertiesUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all feature properties using g e t forbidden response has a 5xx status code
func (o *GetAllFeaturePropertiesUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all feature properties using g e t forbidden response a status code equal to that given
func (o *GetAllFeaturePropertiesUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all feature properties using g e t forbidden response
func (o *GetAllFeaturePropertiesUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllFeaturePropertiesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /public/v1/features][%d] getAllFeaturePropertiesUsingGETForbidden", 403)
}

func (o *GetAllFeaturePropertiesUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /public/v1/features][%d] getAllFeaturePropertiesUsingGETForbidden", 403)
}

func (o *GetAllFeaturePropertiesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllFeaturePropertiesUsingGETNotFound creates a GetAllFeaturePropertiesUsingGETNotFound with default headers values
func NewGetAllFeaturePropertiesUsingGETNotFound() *GetAllFeaturePropertiesUsingGETNotFound {
	return &GetAllFeaturePropertiesUsingGETNotFound{}
}

/*
GetAllFeaturePropertiesUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllFeaturePropertiesUsingGETNotFound struct {
}

// IsSuccess returns true when this get all feature properties using g e t not found response has a 2xx status code
func (o *GetAllFeaturePropertiesUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all feature properties using g e t not found response has a 3xx status code
func (o *GetAllFeaturePropertiesUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all feature properties using g e t not found response has a 4xx status code
func (o *GetAllFeaturePropertiesUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all feature properties using g e t not found response has a 5xx status code
func (o *GetAllFeaturePropertiesUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all feature properties using g e t not found response a status code equal to that given
func (o *GetAllFeaturePropertiesUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all feature properties using g e t not found response
func (o *GetAllFeaturePropertiesUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllFeaturePropertiesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /public/v1/features][%d] getAllFeaturePropertiesUsingGETNotFound", 404)
}

func (o *GetAllFeaturePropertiesUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /public/v1/features][%d] getAllFeaturePropertiesUsingGETNotFound", 404)
}

func (o *GetAllFeaturePropertiesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
