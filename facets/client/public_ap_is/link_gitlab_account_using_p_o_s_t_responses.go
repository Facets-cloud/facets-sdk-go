// Code generated by go-swagger; DO NOT EDIT.

package public_ap_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// LinkGitlabAccountUsingPOSTReader is a Reader for the LinkGitlabAccountUsingPOST structure.
type LinkGitlabAccountUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LinkGitlabAccountUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLinkGitlabAccountUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewLinkGitlabAccountUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewLinkGitlabAccountUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLinkGitlabAccountUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLinkGitlabAccountUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /public/v1/link-gitlab] linkGitlabAccountUsingPOST", response, response.Code())
	}
}

// NewLinkGitlabAccountUsingPOSTOK creates a LinkGitlabAccountUsingPOSTOK with default headers values
func NewLinkGitlabAccountUsingPOSTOK() *LinkGitlabAccountUsingPOSTOK {
	return &LinkGitlabAccountUsingPOSTOK{}
}

/*
LinkGitlabAccountUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type LinkGitlabAccountUsingPOSTOK struct {
}

// IsSuccess returns true when this link gitlab account using p o s t o k response has a 2xx status code
func (o *LinkGitlabAccountUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this link gitlab account using p o s t o k response has a 3xx status code
func (o *LinkGitlabAccountUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link gitlab account using p o s t o k response has a 4xx status code
func (o *LinkGitlabAccountUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this link gitlab account using p o s t o k response has a 5xx status code
func (o *LinkGitlabAccountUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this link gitlab account using p o s t o k response a status code equal to that given
func (o *LinkGitlabAccountUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the link gitlab account using p o s t o k response
func (o *LinkGitlabAccountUsingPOSTOK) Code() int {
	return 200
}

func (o *LinkGitlabAccountUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountUsingPOSTOK", 200)
}

func (o *LinkGitlabAccountUsingPOSTOK) String() string {
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountUsingPOSTOK", 200)
}

func (o *LinkGitlabAccountUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinkGitlabAccountUsingPOSTCreated creates a LinkGitlabAccountUsingPOSTCreated with default headers values
func NewLinkGitlabAccountUsingPOSTCreated() *LinkGitlabAccountUsingPOSTCreated {
	return &LinkGitlabAccountUsingPOSTCreated{}
}

/*
LinkGitlabAccountUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type LinkGitlabAccountUsingPOSTCreated struct {
}

// IsSuccess returns true when this link gitlab account using p o s t created response has a 2xx status code
func (o *LinkGitlabAccountUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this link gitlab account using p o s t created response has a 3xx status code
func (o *LinkGitlabAccountUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link gitlab account using p o s t created response has a 4xx status code
func (o *LinkGitlabAccountUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this link gitlab account using p o s t created response has a 5xx status code
func (o *LinkGitlabAccountUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this link gitlab account using p o s t created response a status code equal to that given
func (o *LinkGitlabAccountUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the link gitlab account using p o s t created response
func (o *LinkGitlabAccountUsingPOSTCreated) Code() int {
	return 201
}

func (o *LinkGitlabAccountUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountUsingPOSTCreated", 201)
}

func (o *LinkGitlabAccountUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountUsingPOSTCreated", 201)
}

func (o *LinkGitlabAccountUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinkGitlabAccountUsingPOSTUnauthorized creates a LinkGitlabAccountUsingPOSTUnauthorized with default headers values
func NewLinkGitlabAccountUsingPOSTUnauthorized() *LinkGitlabAccountUsingPOSTUnauthorized {
	return &LinkGitlabAccountUsingPOSTUnauthorized{}
}

/*
LinkGitlabAccountUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type LinkGitlabAccountUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this link gitlab account using p o s t unauthorized response has a 2xx status code
func (o *LinkGitlabAccountUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link gitlab account using p o s t unauthorized response has a 3xx status code
func (o *LinkGitlabAccountUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link gitlab account using p o s t unauthorized response has a 4xx status code
func (o *LinkGitlabAccountUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this link gitlab account using p o s t unauthorized response has a 5xx status code
func (o *LinkGitlabAccountUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this link gitlab account using p o s t unauthorized response a status code equal to that given
func (o *LinkGitlabAccountUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the link gitlab account using p o s t unauthorized response
func (o *LinkGitlabAccountUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *LinkGitlabAccountUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountUsingPOSTUnauthorized", 401)
}

func (o *LinkGitlabAccountUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountUsingPOSTUnauthorized", 401)
}

func (o *LinkGitlabAccountUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinkGitlabAccountUsingPOSTForbidden creates a LinkGitlabAccountUsingPOSTForbidden with default headers values
func NewLinkGitlabAccountUsingPOSTForbidden() *LinkGitlabAccountUsingPOSTForbidden {
	return &LinkGitlabAccountUsingPOSTForbidden{}
}

/*
LinkGitlabAccountUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type LinkGitlabAccountUsingPOSTForbidden struct {
}

// IsSuccess returns true when this link gitlab account using p o s t forbidden response has a 2xx status code
func (o *LinkGitlabAccountUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link gitlab account using p o s t forbidden response has a 3xx status code
func (o *LinkGitlabAccountUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link gitlab account using p o s t forbidden response has a 4xx status code
func (o *LinkGitlabAccountUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this link gitlab account using p o s t forbidden response has a 5xx status code
func (o *LinkGitlabAccountUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this link gitlab account using p o s t forbidden response a status code equal to that given
func (o *LinkGitlabAccountUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the link gitlab account using p o s t forbidden response
func (o *LinkGitlabAccountUsingPOSTForbidden) Code() int {
	return 403
}

func (o *LinkGitlabAccountUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountUsingPOSTForbidden", 403)
}

func (o *LinkGitlabAccountUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountUsingPOSTForbidden", 403)
}

func (o *LinkGitlabAccountUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinkGitlabAccountUsingPOSTNotFound creates a LinkGitlabAccountUsingPOSTNotFound with default headers values
func NewLinkGitlabAccountUsingPOSTNotFound() *LinkGitlabAccountUsingPOSTNotFound {
	return &LinkGitlabAccountUsingPOSTNotFound{}
}

/*
LinkGitlabAccountUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type LinkGitlabAccountUsingPOSTNotFound struct {
}

// IsSuccess returns true when this link gitlab account using p o s t not found response has a 2xx status code
func (o *LinkGitlabAccountUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link gitlab account using p o s t not found response has a 3xx status code
func (o *LinkGitlabAccountUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link gitlab account using p o s t not found response has a 4xx status code
func (o *LinkGitlabAccountUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this link gitlab account using p o s t not found response has a 5xx status code
func (o *LinkGitlabAccountUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this link gitlab account using p o s t not found response a status code equal to that given
func (o *LinkGitlabAccountUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the link gitlab account using p o s t not found response
func (o *LinkGitlabAccountUsingPOSTNotFound) Code() int {
	return 404
}

func (o *LinkGitlabAccountUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountUsingPOSTNotFound", 404)
}

func (o *LinkGitlabAccountUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /public/v1/link-gitlab][%d] linkGitlabAccountUsingPOSTNotFound", 404)
}

func (o *LinkGitlabAccountUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
