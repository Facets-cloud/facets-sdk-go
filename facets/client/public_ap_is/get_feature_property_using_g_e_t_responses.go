// Code generated by go-swagger; DO NOT EDIT.

package public_ap_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetFeaturePropertyUsingGETReader is a Reader for the GetFeaturePropertyUsingGET structure.
type GetFeaturePropertyUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFeaturePropertyUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFeaturePropertyUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetFeaturePropertyUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetFeaturePropertyUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetFeaturePropertyUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /public/v1/features/{name}] getFeaturePropertyUsingGET", response, response.Code())
	}
}

// NewGetFeaturePropertyUsingGETOK creates a GetFeaturePropertyUsingGETOK with default headers values
func NewGetFeaturePropertyUsingGETOK() *GetFeaturePropertyUsingGETOK {
	return &GetFeaturePropertyUsingGETOK{}
}

/*
GetFeaturePropertyUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetFeaturePropertyUsingGETOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this get feature property using g e t o k response has a 2xx status code
func (o *GetFeaturePropertyUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get feature property using g e t o k response has a 3xx status code
func (o *GetFeaturePropertyUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature property using g e t o k response has a 4xx status code
func (o *GetFeaturePropertyUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get feature property using g e t o k response has a 5xx status code
func (o *GetFeaturePropertyUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get feature property using g e t o k response a status code equal to that given
func (o *GetFeaturePropertyUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get feature property using g e t o k response
func (o *GetFeaturePropertyUsingGETOK) Code() int {
	return 200
}

func (o *GetFeaturePropertyUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/features/{name}][%d] getFeaturePropertyUsingGETOK %s", 200, payload)
}

func (o *GetFeaturePropertyUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /public/v1/features/{name}][%d] getFeaturePropertyUsingGETOK %s", 200, payload)
}

func (o *GetFeaturePropertyUsingGETOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetFeaturePropertyUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeaturePropertyUsingGETUnauthorized creates a GetFeaturePropertyUsingGETUnauthorized with default headers values
func NewGetFeaturePropertyUsingGETUnauthorized() *GetFeaturePropertyUsingGETUnauthorized {
	return &GetFeaturePropertyUsingGETUnauthorized{}
}

/*
GetFeaturePropertyUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetFeaturePropertyUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get feature property using g e t unauthorized response has a 2xx status code
func (o *GetFeaturePropertyUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feature property using g e t unauthorized response has a 3xx status code
func (o *GetFeaturePropertyUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature property using g e t unauthorized response has a 4xx status code
func (o *GetFeaturePropertyUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feature property using g e t unauthorized response has a 5xx status code
func (o *GetFeaturePropertyUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get feature property using g e t unauthorized response a status code equal to that given
func (o *GetFeaturePropertyUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get feature property using g e t unauthorized response
func (o *GetFeaturePropertyUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetFeaturePropertyUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /public/v1/features/{name}][%d] getFeaturePropertyUsingGETUnauthorized", 401)
}

func (o *GetFeaturePropertyUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /public/v1/features/{name}][%d] getFeaturePropertyUsingGETUnauthorized", 401)
}

func (o *GetFeaturePropertyUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFeaturePropertyUsingGETForbidden creates a GetFeaturePropertyUsingGETForbidden with default headers values
func NewGetFeaturePropertyUsingGETForbidden() *GetFeaturePropertyUsingGETForbidden {
	return &GetFeaturePropertyUsingGETForbidden{}
}

/*
GetFeaturePropertyUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetFeaturePropertyUsingGETForbidden struct {
}

// IsSuccess returns true when this get feature property using g e t forbidden response has a 2xx status code
func (o *GetFeaturePropertyUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feature property using g e t forbidden response has a 3xx status code
func (o *GetFeaturePropertyUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature property using g e t forbidden response has a 4xx status code
func (o *GetFeaturePropertyUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feature property using g e t forbidden response has a 5xx status code
func (o *GetFeaturePropertyUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get feature property using g e t forbidden response a status code equal to that given
func (o *GetFeaturePropertyUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get feature property using g e t forbidden response
func (o *GetFeaturePropertyUsingGETForbidden) Code() int {
	return 403
}

func (o *GetFeaturePropertyUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /public/v1/features/{name}][%d] getFeaturePropertyUsingGETForbidden", 403)
}

func (o *GetFeaturePropertyUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /public/v1/features/{name}][%d] getFeaturePropertyUsingGETForbidden", 403)
}

func (o *GetFeaturePropertyUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFeaturePropertyUsingGETNotFound creates a GetFeaturePropertyUsingGETNotFound with default headers values
func NewGetFeaturePropertyUsingGETNotFound() *GetFeaturePropertyUsingGETNotFound {
	return &GetFeaturePropertyUsingGETNotFound{}
}

/*
GetFeaturePropertyUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetFeaturePropertyUsingGETNotFound struct {
}

// IsSuccess returns true when this get feature property using g e t not found response has a 2xx status code
func (o *GetFeaturePropertyUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feature property using g e t not found response has a 3xx status code
func (o *GetFeaturePropertyUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature property using g e t not found response has a 4xx status code
func (o *GetFeaturePropertyUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feature property using g e t not found response has a 5xx status code
func (o *GetFeaturePropertyUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get feature property using g e t not found response a status code equal to that given
func (o *GetFeaturePropertyUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get feature property using g e t not found response
func (o *GetFeaturePropertyUsingGETNotFound) Code() int {
	return 404
}

func (o *GetFeaturePropertyUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /public/v1/features/{name}][%d] getFeaturePropertyUsingGETNotFound", 404)
}

func (o *GetFeaturePropertyUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /public/v1/features/{name}][%d] getFeaturePropertyUsingGETNotFound", 404)
}

func (o *GetFeaturePropertyUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
