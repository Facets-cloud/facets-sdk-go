// Code generated by go-swagger; DO NOT EDIT.

package public_ap_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new public ap is API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new public ap is API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new public ap is API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for public ap is API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAllFeatureProperties(params *GetAllFeaturePropertiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllFeaturePropertiesOK, error)

	GetCPCloud(params *GetCPCloudParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCPCloudOK, error)

	GetFeatureProperty(params *GetFeaturePropertyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFeaturePropertyOK, error)

	GetLoginOptions(params *GetLoginOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLoginOptionsOK, error)

	GetLogo(params *GetLogoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLogoOK, error)

	HealthCheck(params *HealthCheckParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HealthCheckOK, error)

	LinkAwsAccount(params *LinkAwsAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkAwsAccountOK, error)

	LinkAzureAccount(params *LinkAzureAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkAzureAccountOK, error)

	LinkBitbucketAccount(params *LinkBitbucketAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkBitbucketAccountOK, error)

	LinkDockerRegistries(params *LinkDockerRegistriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkDockerRegistriesOK, error)

	LinkECR(params *LinkECRParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkECROK, error)

	LinkGcpAccount(params *LinkGcpAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkGcpAccountOK, error)

	LinkGithubAccount(params *LinkGithubAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkGithubAccountOK, error)

	LinkGitlabAccount(params *LinkGitlabAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkGitlabAccountOK, error)

	LinkK8sAccount(params *LinkK8sAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkK8sAccountOK, error)

	ProcessGithubInstallationRequest(params *ProcessGithubInstallationRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProcessGithubInstallationRequestOK, error)

	RetrieveThemeFile(params *RetrieveThemeFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RetrieveThemeFileOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAllFeatureProperties get all feature properties API
*/
func (a *Client) GetAllFeatureProperties(params *GetAllFeaturePropertiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllFeaturePropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllFeaturePropertiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllFeatureProperties",
		Method:             "GET",
		PathPattern:        "/public/v1/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllFeaturePropertiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllFeaturePropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllFeatureProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCPCloud get c p cloud API
*/
func (a *Client) GetCPCloud(params *GetCPCloudParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCPCloudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCPCloudParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCPCloud",
		Method:             "GET",
		PathPattern:        "/public/v1/cp-cloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCPCloudReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCPCloudOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCPCloud: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFeatureProperty get feature property API
*/
func (a *Client) GetFeatureProperty(params *GetFeaturePropertyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFeaturePropertyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeaturePropertyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFeatureProperty",
		Method:             "GET",
		PathPattern:        "/public/v1/features/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFeaturePropertyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFeaturePropertyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFeatureProperty: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLoginOptions get login options API
*/
func (a *Client) GetLoginOptions(params *GetLoginOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLoginOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoginOptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLoginOptions",
		Method:             "GET",
		PathPattern:        "/public/v1/loginOptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLoginOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLoginOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLoginOptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLogo get logo API
*/
func (a *Client) GetLogo(params *GetLogoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLogoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLogo",
		Method:             "GET",
		PathPattern:        "/public/v1/logo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLogoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLogo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HealthCheck health check API
*/
func (a *Client) HealthCheck(params *HealthCheckParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HealthCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "healthCheck",
		Method:             "GET",
		PathPattern:        "/public/v1/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HealthCheckReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HealthCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for healthCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkAwsAccount link aws account API
*/
func (a *Client) LinkAwsAccount(params *LinkAwsAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkAwsAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkAwsAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkAwsAccount",
		Method:             "POST",
		PathPattern:        "/public/v1/link-aws",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkAwsAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkAwsAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for linkAwsAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkAzureAccount link azure account API
*/
func (a *Client) LinkAzureAccount(params *LinkAzureAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkAzureAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkAzureAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkAzureAccount",
		Method:             "POST",
		PathPattern:        "/public/v1/link-azure",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkAzureAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkAzureAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for linkAzureAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkBitbucketAccount link bitbucket account API
*/
func (a *Client) LinkBitbucketAccount(params *LinkBitbucketAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkBitbucketAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkBitbucketAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkBitbucketAccount",
		Method:             "POST",
		PathPattern:        "/public/v1/link-bitbucket",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkBitbucketAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkBitbucketAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for linkBitbucketAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkDockerRegistries link docker registries API
*/
func (a *Client) LinkDockerRegistries(params *LinkDockerRegistriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkDockerRegistriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkDockerRegistriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkDockerRegistries",
		Method:             "POST",
		PathPattern:        "/public/v1/link-docker-registries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkDockerRegistriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkDockerRegistriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for linkDockerRegistries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkECR link e c r API
*/
func (a *Client) LinkECR(params *LinkECRParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkECROK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkECRParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkECR",
		Method:             "POST",
		PathPattern:        "/public/v1/link-ecr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkECRReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkECROK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for linkECR: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkGcpAccount link gcp account API
*/
func (a *Client) LinkGcpAccount(params *LinkGcpAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkGcpAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkGcpAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkGcpAccount",
		Method:             "POST",
		PathPattern:        "/public/v1/link-gcp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkGcpAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkGcpAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for linkGcpAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkGithubAccount link github account API
*/
func (a *Client) LinkGithubAccount(params *LinkGithubAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkGithubAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkGithubAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkGithubAccount",
		Method:             "POST",
		PathPattern:        "/public/v1/link-github",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkGithubAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkGithubAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for linkGithubAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkGitlabAccount link gitlab account API
*/
func (a *Client) LinkGitlabAccount(params *LinkGitlabAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkGitlabAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkGitlabAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkGitlabAccount",
		Method:             "POST",
		PathPattern:        "/public/v1/link-gitlab",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkGitlabAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkGitlabAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for linkGitlabAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkK8sAccount link k8s account API
*/
func (a *Client) LinkK8sAccount(params *LinkK8sAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkK8sAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkK8sAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkK8sAccount",
		Method:             "POST",
		PathPattern:        "/public/v1/link-kubernetes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkK8sAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkK8sAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for linkK8sAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProcessGithubInstallationRequest process github installation request API
*/
func (a *Client) ProcessGithubInstallationRequest(params *ProcessGithubInstallationRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProcessGithubInstallationRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProcessGithubInstallationRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "processGithubInstallationRequest",
		Method:             "POST",
		PathPattern:        "/public/v1/github-installation-request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProcessGithubInstallationRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProcessGithubInstallationRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for processGithubInstallationRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RetrieveThemeFile retrieve theme file API
*/
func (a *Client) RetrieveThemeFile(params *RetrieveThemeFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RetrieveThemeFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveThemeFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "retrieveThemeFile",
		Method:             "GET",
		PathPattern:        "/public/v1/themeFile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RetrieveThemeFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetrieveThemeFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for retrieveThemeFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
