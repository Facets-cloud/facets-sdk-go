// Code generated by go-swagger; DO NOT EDIT.

package public_ap_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new public ap is API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new public ap is API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new public ap is API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for public ap is API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAllFeaturePropertiesUsingGET(params *GetAllFeaturePropertiesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllFeaturePropertiesUsingGETOK, error)

	GetCPCloudUsingGET(params *GetCPCloudUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCPCloudUsingGETOK, error)

	GetFeaturePropertyUsingGET(params *GetFeaturePropertyUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFeaturePropertyUsingGETOK, error)

	GetLoginOptionsUsingGET(params *GetLoginOptionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLoginOptionsUsingGETOK, error)

	GetLogoUsingGET(params *GetLogoUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLogoUsingGETOK, error)

	HealthCheckUsingGET(params *HealthCheckUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HealthCheckUsingGETOK, error)

	LinkAwsAccountUsingPOST(params *LinkAwsAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkAwsAccountUsingPOSTOK, *LinkAwsAccountUsingPOSTCreated, error)

	LinkAzureAccountUsingPOST(params *LinkAzureAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkAzureAccountUsingPOSTOK, *LinkAzureAccountUsingPOSTCreated, error)

	LinkBitbucketAccountUsingPOST(params *LinkBitbucketAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkBitbucketAccountUsingPOSTOK, *LinkBitbucketAccountUsingPOSTCreated, error)

	LinkDockerRegistriesUsingPOST(params *LinkDockerRegistriesUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkDockerRegistriesUsingPOSTOK, *LinkDockerRegistriesUsingPOSTCreated, error)

	LinkECRUsingPOST(params *LinkECRUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkECRUsingPOSTOK, *LinkECRUsingPOSTCreated, error)

	LinkGcpAccountUsingPOST(params *LinkGcpAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkGcpAccountUsingPOSTOK, *LinkGcpAccountUsingPOSTCreated, error)

	LinkGithubAccountUsingPOST(params *LinkGithubAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkGithubAccountUsingPOSTOK, *LinkGithubAccountUsingPOSTCreated, error)

	LinkGitlabAccountUsingPOST(params *LinkGitlabAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkGitlabAccountUsingPOSTOK, *LinkGitlabAccountUsingPOSTCreated, error)

	LinkK8sAccountUsingPOST(params *LinkK8sAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkK8sAccountUsingPOSTOK, *LinkK8sAccountUsingPOSTCreated, error)

	ProcessGithubInstallationRequestUsingPOST(params *ProcessGithubInstallationRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProcessGithubInstallationRequestUsingPOSTOK, *ProcessGithubInstallationRequestUsingPOSTCreated, error)

	RetrieveThemeFileUsingGET(params *RetrieveThemeFileUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RetrieveThemeFileUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAllFeaturePropertiesUsingGET gets all feature properties
*/
func (a *Client) GetAllFeaturePropertiesUsingGET(params *GetAllFeaturePropertiesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllFeaturePropertiesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllFeaturePropertiesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllFeaturePropertiesUsingGET",
		Method:             "GET",
		PathPattern:        "/public/v1/features",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllFeaturePropertiesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllFeaturePropertiesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllFeaturePropertiesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCPCloudUsingGET gets c p cloud
*/
func (a *Client) GetCPCloudUsingGET(params *GetCPCloudUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCPCloudUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCPCloudUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCPCloudUsingGET",
		Method:             "GET",
		PathPattern:        "/public/v1/cp-cloud",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCPCloudUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCPCloudUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCPCloudUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFeaturePropertyUsingGET gets feature property
*/
func (a *Client) GetFeaturePropertyUsingGET(params *GetFeaturePropertyUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFeaturePropertyUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeaturePropertyUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFeaturePropertyUsingGET",
		Method:             "GET",
		PathPattern:        "/public/v1/features/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFeaturePropertyUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFeaturePropertyUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFeaturePropertyUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLoginOptionsUsingGET gets login options
*/
func (a *Client) GetLoginOptionsUsingGET(params *GetLoginOptionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLoginOptionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoginOptionsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLoginOptionsUsingGET",
		Method:             "GET",
		PathPattern:        "/public/v1/loginOptions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLoginOptionsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLoginOptionsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLoginOptionsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLogoUsingGET gets logo
*/
func (a *Client) GetLogoUsingGET(params *GetLogoUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLogoUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogoUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLogoUsingGET",
		Method:             "GET",
		PathPattern:        "/public/v1/logo",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLogoUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogoUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLogoUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HealthCheckUsingGET healths check
*/
func (a *Client) HealthCheckUsingGET(params *HealthCheckUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HealthCheckUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthCheckUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "healthCheckUsingGET",
		Method:             "GET",
		PathPattern:        "/public/v1/health",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HealthCheckUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HealthCheckUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for healthCheckUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkAwsAccountUsingPOST links aws account
*/
func (a *Client) LinkAwsAccountUsingPOST(params *LinkAwsAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkAwsAccountUsingPOSTOK, *LinkAwsAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkAwsAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkAwsAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/public/v1/link-aws",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkAwsAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LinkAwsAccountUsingPOSTOK:
		return value, nil, nil
	case *LinkAwsAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for public_ap_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkAzureAccountUsingPOST links azure account
*/
func (a *Client) LinkAzureAccountUsingPOST(params *LinkAzureAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkAzureAccountUsingPOSTOK, *LinkAzureAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkAzureAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkAzureAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/public/v1/link-azure",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkAzureAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LinkAzureAccountUsingPOSTOK:
		return value, nil, nil
	case *LinkAzureAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for public_ap_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkBitbucketAccountUsingPOST links bitbucket account
*/
func (a *Client) LinkBitbucketAccountUsingPOST(params *LinkBitbucketAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkBitbucketAccountUsingPOSTOK, *LinkBitbucketAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkBitbucketAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkBitbucketAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/public/v1/link-bitbucket",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkBitbucketAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LinkBitbucketAccountUsingPOSTOK:
		return value, nil, nil
	case *LinkBitbucketAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for public_ap_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkDockerRegistriesUsingPOST links docker registries
*/
func (a *Client) LinkDockerRegistriesUsingPOST(params *LinkDockerRegistriesUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkDockerRegistriesUsingPOSTOK, *LinkDockerRegistriesUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkDockerRegistriesUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkDockerRegistriesUsingPOST",
		Method:             "POST",
		PathPattern:        "/public/v1/link-docker-registries",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkDockerRegistriesUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LinkDockerRegistriesUsingPOSTOK:
		return value, nil, nil
	case *LinkDockerRegistriesUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for public_ap_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkECRUsingPOST links e c r
*/
func (a *Client) LinkECRUsingPOST(params *LinkECRUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkECRUsingPOSTOK, *LinkECRUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkECRUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkECRUsingPOST",
		Method:             "POST",
		PathPattern:        "/public/v1/link-ecr",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkECRUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LinkECRUsingPOSTOK:
		return value, nil, nil
	case *LinkECRUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for public_ap_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkGcpAccountUsingPOST links gcp account
*/
func (a *Client) LinkGcpAccountUsingPOST(params *LinkGcpAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkGcpAccountUsingPOSTOK, *LinkGcpAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkGcpAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkGcpAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/public/v1/link-gcp",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkGcpAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LinkGcpAccountUsingPOSTOK:
		return value, nil, nil
	case *LinkGcpAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for public_ap_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkGithubAccountUsingPOST links github account
*/
func (a *Client) LinkGithubAccountUsingPOST(params *LinkGithubAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkGithubAccountUsingPOSTOK, *LinkGithubAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkGithubAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkGithubAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/public/v1/link-github",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkGithubAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LinkGithubAccountUsingPOSTOK:
		return value, nil, nil
	case *LinkGithubAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for public_ap_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkGitlabAccountUsingPOST links gitlab account
*/
func (a *Client) LinkGitlabAccountUsingPOST(params *LinkGitlabAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkGitlabAccountUsingPOSTOK, *LinkGitlabAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkGitlabAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkGitlabAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/public/v1/link-gitlab",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkGitlabAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LinkGitlabAccountUsingPOSTOK:
		return value, nil, nil
	case *LinkGitlabAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for public_ap_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkK8sAccountUsingPOST links k8s account
*/
func (a *Client) LinkK8sAccountUsingPOST(params *LinkK8sAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LinkK8sAccountUsingPOSTOK, *LinkK8sAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkK8sAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkK8sAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/public/v1/link-kubernetes",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkK8sAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LinkK8sAccountUsingPOSTOK:
		return value, nil, nil
	case *LinkK8sAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for public_ap_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProcessGithubInstallationRequestUsingPOST processes github installation request
*/
func (a *Client) ProcessGithubInstallationRequestUsingPOST(params *ProcessGithubInstallationRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProcessGithubInstallationRequestUsingPOSTOK, *ProcessGithubInstallationRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProcessGithubInstallationRequestUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "processGithubInstallationRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/public/v1/github-installation-request",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProcessGithubInstallationRequestUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProcessGithubInstallationRequestUsingPOSTOK:
		return value, nil, nil
	case *ProcessGithubInstallationRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for public_ap_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RetrieveThemeFileUsingGET retrieves theme file
*/
func (a *Client) RetrieveThemeFileUsingGET(params *RetrieveThemeFileUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RetrieveThemeFileUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveThemeFileUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "retrieveThemeFileUsingGET",
		Method:             "GET",
		PathPattern:        "/public/v1/themeFile",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RetrieveThemeFileUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetrieveThemeFileUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for retrieveThemeFileUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
