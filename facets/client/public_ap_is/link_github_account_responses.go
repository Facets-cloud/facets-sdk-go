// Code generated by go-swagger; DO NOT EDIT.

package public_ap_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// LinkGithubAccountReader is a Reader for the LinkGithubAccount structure.
type LinkGithubAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LinkGithubAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLinkGithubAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLinkGithubAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLinkGithubAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewLinkGithubAccountMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLinkGithubAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /public/v1/link-github] linkGithubAccount", response, response.Code())
	}
}

// NewLinkGithubAccountOK creates a LinkGithubAccountOK with default headers values
func NewLinkGithubAccountOK() *LinkGithubAccountOK {
	return &LinkGithubAccountOK{}
}

/*
LinkGithubAccountOK describes a response with status code 200, with default header values.

OK
*/
type LinkGithubAccountOK struct {
}

// IsSuccess returns true when this link github account o k response has a 2xx status code
func (o *LinkGithubAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this link github account o k response has a 3xx status code
func (o *LinkGithubAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link github account o k response has a 4xx status code
func (o *LinkGithubAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this link github account o k response has a 5xx status code
func (o *LinkGithubAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this link github account o k response a status code equal to that given
func (o *LinkGithubAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the link github account o k response
func (o *LinkGithubAccountOK) Code() int {
	return 200
}

func (o *LinkGithubAccountOK) Error() string {
	return fmt.Sprintf("[POST /public/v1/link-github][%d] linkGithubAccountOK", 200)
}

func (o *LinkGithubAccountOK) String() string {
	return fmt.Sprintf("[POST /public/v1/link-github][%d] linkGithubAccountOK", 200)
}

func (o *LinkGithubAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinkGithubAccountBadRequest creates a LinkGithubAccountBadRequest with default headers values
func NewLinkGithubAccountBadRequest() *LinkGithubAccountBadRequest {
	return &LinkGithubAccountBadRequest{}
}

/*
LinkGithubAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type LinkGithubAccountBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link github account bad request response has a 2xx status code
func (o *LinkGithubAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link github account bad request response has a 3xx status code
func (o *LinkGithubAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link github account bad request response has a 4xx status code
func (o *LinkGithubAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this link github account bad request response has a 5xx status code
func (o *LinkGithubAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this link github account bad request response a status code equal to that given
func (o *LinkGithubAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the link github account bad request response
func (o *LinkGithubAccountBadRequest) Code() int {
	return 400
}

func (o *LinkGithubAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-github][%d] linkGithubAccountBadRequest %s", 400, payload)
}

func (o *LinkGithubAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-github][%d] linkGithubAccountBadRequest %s", 400, payload)
}

func (o *LinkGithubAccountBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkGithubAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkGithubAccountNotFound creates a LinkGithubAccountNotFound with default headers values
func NewLinkGithubAccountNotFound() *LinkGithubAccountNotFound {
	return &LinkGithubAccountNotFound{}
}

/*
LinkGithubAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type LinkGithubAccountNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link github account not found response has a 2xx status code
func (o *LinkGithubAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link github account not found response has a 3xx status code
func (o *LinkGithubAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link github account not found response has a 4xx status code
func (o *LinkGithubAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this link github account not found response has a 5xx status code
func (o *LinkGithubAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this link github account not found response a status code equal to that given
func (o *LinkGithubAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the link github account not found response
func (o *LinkGithubAccountNotFound) Code() int {
	return 404
}

func (o *LinkGithubAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-github][%d] linkGithubAccountNotFound %s", 404, payload)
}

func (o *LinkGithubAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-github][%d] linkGithubAccountNotFound %s", 404, payload)
}

func (o *LinkGithubAccountNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkGithubAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkGithubAccountMethodNotAllowed creates a LinkGithubAccountMethodNotAllowed with default headers values
func NewLinkGithubAccountMethodNotAllowed() *LinkGithubAccountMethodNotAllowed {
	return &LinkGithubAccountMethodNotAllowed{}
}

/*
LinkGithubAccountMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type LinkGithubAccountMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link github account method not allowed response has a 2xx status code
func (o *LinkGithubAccountMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link github account method not allowed response has a 3xx status code
func (o *LinkGithubAccountMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link github account method not allowed response has a 4xx status code
func (o *LinkGithubAccountMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this link github account method not allowed response has a 5xx status code
func (o *LinkGithubAccountMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this link github account method not allowed response a status code equal to that given
func (o *LinkGithubAccountMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the link github account method not allowed response
func (o *LinkGithubAccountMethodNotAllowed) Code() int {
	return 405
}

func (o *LinkGithubAccountMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-github][%d] linkGithubAccountMethodNotAllowed %s", 405, payload)
}

func (o *LinkGithubAccountMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-github][%d] linkGithubAccountMethodNotAllowed %s", 405, payload)
}

func (o *LinkGithubAccountMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkGithubAccountMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkGithubAccountInternalServerError creates a LinkGithubAccountInternalServerError with default headers values
func NewLinkGithubAccountInternalServerError() *LinkGithubAccountInternalServerError {
	return &LinkGithubAccountInternalServerError{}
}

/*
LinkGithubAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type LinkGithubAccountInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link github account internal server error response has a 2xx status code
func (o *LinkGithubAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link github account internal server error response has a 3xx status code
func (o *LinkGithubAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link github account internal server error response has a 4xx status code
func (o *LinkGithubAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this link github account internal server error response has a 5xx status code
func (o *LinkGithubAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this link github account internal server error response a status code equal to that given
func (o *LinkGithubAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the link github account internal server error response
func (o *LinkGithubAccountInternalServerError) Code() int {
	return 500
}

func (o *LinkGithubAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-github][%d] linkGithubAccountInternalServerError %s", 500, payload)
}

func (o *LinkGithubAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-github][%d] linkGithubAccountInternalServerError %s", 500, payload)
}

func (o *LinkGithubAccountInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkGithubAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
