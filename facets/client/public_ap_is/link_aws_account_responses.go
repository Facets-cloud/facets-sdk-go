// Code generated by go-swagger; DO NOT EDIT.

package public_ap_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// LinkAwsAccountReader is a Reader for the LinkAwsAccount structure.
type LinkAwsAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LinkAwsAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLinkAwsAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLinkAwsAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLinkAwsAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewLinkAwsAccountMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLinkAwsAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /public/v1/link-aws] linkAwsAccount", response, response.Code())
	}
}

// NewLinkAwsAccountOK creates a LinkAwsAccountOK with default headers values
func NewLinkAwsAccountOK() *LinkAwsAccountOK {
	return &LinkAwsAccountOK{}
}

/*
LinkAwsAccountOK describes a response with status code 200, with default header values.

OK
*/
type LinkAwsAccountOK struct {
}

// IsSuccess returns true when this link aws account o k response has a 2xx status code
func (o *LinkAwsAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this link aws account o k response has a 3xx status code
func (o *LinkAwsAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link aws account o k response has a 4xx status code
func (o *LinkAwsAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this link aws account o k response has a 5xx status code
func (o *LinkAwsAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this link aws account o k response a status code equal to that given
func (o *LinkAwsAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the link aws account o k response
func (o *LinkAwsAccountOK) Code() int {
	return 200
}

func (o *LinkAwsAccountOK) Error() string {
	return fmt.Sprintf("[POST /public/v1/link-aws][%d] linkAwsAccountOK", 200)
}

func (o *LinkAwsAccountOK) String() string {
	return fmt.Sprintf("[POST /public/v1/link-aws][%d] linkAwsAccountOK", 200)
}

func (o *LinkAwsAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinkAwsAccountBadRequest creates a LinkAwsAccountBadRequest with default headers values
func NewLinkAwsAccountBadRequest() *LinkAwsAccountBadRequest {
	return &LinkAwsAccountBadRequest{}
}

/*
LinkAwsAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type LinkAwsAccountBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link aws account bad request response has a 2xx status code
func (o *LinkAwsAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link aws account bad request response has a 3xx status code
func (o *LinkAwsAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link aws account bad request response has a 4xx status code
func (o *LinkAwsAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this link aws account bad request response has a 5xx status code
func (o *LinkAwsAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this link aws account bad request response a status code equal to that given
func (o *LinkAwsAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the link aws account bad request response
func (o *LinkAwsAccountBadRequest) Code() int {
	return 400
}

func (o *LinkAwsAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-aws][%d] linkAwsAccountBadRequest %s", 400, payload)
}

func (o *LinkAwsAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-aws][%d] linkAwsAccountBadRequest %s", 400, payload)
}

func (o *LinkAwsAccountBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkAwsAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkAwsAccountNotFound creates a LinkAwsAccountNotFound with default headers values
func NewLinkAwsAccountNotFound() *LinkAwsAccountNotFound {
	return &LinkAwsAccountNotFound{}
}

/*
LinkAwsAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type LinkAwsAccountNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link aws account not found response has a 2xx status code
func (o *LinkAwsAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link aws account not found response has a 3xx status code
func (o *LinkAwsAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link aws account not found response has a 4xx status code
func (o *LinkAwsAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this link aws account not found response has a 5xx status code
func (o *LinkAwsAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this link aws account not found response a status code equal to that given
func (o *LinkAwsAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the link aws account not found response
func (o *LinkAwsAccountNotFound) Code() int {
	return 404
}

func (o *LinkAwsAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-aws][%d] linkAwsAccountNotFound %s", 404, payload)
}

func (o *LinkAwsAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-aws][%d] linkAwsAccountNotFound %s", 404, payload)
}

func (o *LinkAwsAccountNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkAwsAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkAwsAccountMethodNotAllowed creates a LinkAwsAccountMethodNotAllowed with default headers values
func NewLinkAwsAccountMethodNotAllowed() *LinkAwsAccountMethodNotAllowed {
	return &LinkAwsAccountMethodNotAllowed{}
}

/*
LinkAwsAccountMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type LinkAwsAccountMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link aws account method not allowed response has a 2xx status code
func (o *LinkAwsAccountMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link aws account method not allowed response has a 3xx status code
func (o *LinkAwsAccountMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link aws account method not allowed response has a 4xx status code
func (o *LinkAwsAccountMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this link aws account method not allowed response has a 5xx status code
func (o *LinkAwsAccountMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this link aws account method not allowed response a status code equal to that given
func (o *LinkAwsAccountMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the link aws account method not allowed response
func (o *LinkAwsAccountMethodNotAllowed) Code() int {
	return 405
}

func (o *LinkAwsAccountMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-aws][%d] linkAwsAccountMethodNotAllowed %s", 405, payload)
}

func (o *LinkAwsAccountMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-aws][%d] linkAwsAccountMethodNotAllowed %s", 405, payload)
}

func (o *LinkAwsAccountMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkAwsAccountMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkAwsAccountInternalServerError creates a LinkAwsAccountInternalServerError with default headers values
func NewLinkAwsAccountInternalServerError() *LinkAwsAccountInternalServerError {
	return &LinkAwsAccountInternalServerError{}
}

/*
LinkAwsAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type LinkAwsAccountInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link aws account internal server error response has a 2xx status code
func (o *LinkAwsAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link aws account internal server error response has a 3xx status code
func (o *LinkAwsAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link aws account internal server error response has a 4xx status code
func (o *LinkAwsAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this link aws account internal server error response has a 5xx status code
func (o *LinkAwsAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this link aws account internal server error response a status code equal to that given
func (o *LinkAwsAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the link aws account internal server error response
func (o *LinkAwsAccountInternalServerError) Code() int {
	return 500
}

func (o *LinkAwsAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-aws][%d] linkAwsAccountInternalServerError %s", 500, payload)
}

func (o *LinkAwsAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-aws][%d] linkAwsAccountInternalServerError %s", 500, payload)
}

func (o *LinkAwsAccountInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkAwsAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
