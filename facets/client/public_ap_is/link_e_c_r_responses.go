// Code generated by go-swagger; DO NOT EDIT.

package public_ap_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// LinkECRReader is a Reader for the LinkECR structure.
type LinkECRReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LinkECRReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLinkECROK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLinkECRBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLinkECRNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewLinkECRMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLinkECRInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /public/v1/link-ecr] linkECR", response, response.Code())
	}
}

// NewLinkECROK creates a LinkECROK with default headers values
func NewLinkECROK() *LinkECROK {
	return &LinkECROK{}
}

/*
LinkECROK describes a response with status code 200, with default header values.

OK
*/
type LinkECROK struct {
}

// IsSuccess returns true when this link e c r o k response has a 2xx status code
func (o *LinkECROK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this link e c r o k response has a 3xx status code
func (o *LinkECROK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link e c r o k response has a 4xx status code
func (o *LinkECROK) IsClientError() bool {
	return false
}

// IsServerError returns true when this link e c r o k response has a 5xx status code
func (o *LinkECROK) IsServerError() bool {
	return false
}

// IsCode returns true when this link e c r o k response a status code equal to that given
func (o *LinkECROK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the link e c r o k response
func (o *LinkECROK) Code() int {
	return 200
}

func (o *LinkECROK) Error() string {
	return fmt.Sprintf("[POST /public/v1/link-ecr][%d] linkECROK", 200)
}

func (o *LinkECROK) String() string {
	return fmt.Sprintf("[POST /public/v1/link-ecr][%d] linkECROK", 200)
}

func (o *LinkECROK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinkECRBadRequest creates a LinkECRBadRequest with default headers values
func NewLinkECRBadRequest() *LinkECRBadRequest {
	return &LinkECRBadRequest{}
}

/*
LinkECRBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type LinkECRBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link e c r bad request response has a 2xx status code
func (o *LinkECRBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link e c r bad request response has a 3xx status code
func (o *LinkECRBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link e c r bad request response has a 4xx status code
func (o *LinkECRBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this link e c r bad request response has a 5xx status code
func (o *LinkECRBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this link e c r bad request response a status code equal to that given
func (o *LinkECRBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the link e c r bad request response
func (o *LinkECRBadRequest) Code() int {
	return 400
}

func (o *LinkECRBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-ecr][%d] linkECRBadRequest %s", 400, payload)
}

func (o *LinkECRBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-ecr][%d] linkECRBadRequest %s", 400, payload)
}

func (o *LinkECRBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkECRBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkECRNotFound creates a LinkECRNotFound with default headers values
func NewLinkECRNotFound() *LinkECRNotFound {
	return &LinkECRNotFound{}
}

/*
LinkECRNotFound describes a response with status code 404, with default header values.

Not Found
*/
type LinkECRNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link e c r not found response has a 2xx status code
func (o *LinkECRNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link e c r not found response has a 3xx status code
func (o *LinkECRNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link e c r not found response has a 4xx status code
func (o *LinkECRNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this link e c r not found response has a 5xx status code
func (o *LinkECRNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this link e c r not found response a status code equal to that given
func (o *LinkECRNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the link e c r not found response
func (o *LinkECRNotFound) Code() int {
	return 404
}

func (o *LinkECRNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-ecr][%d] linkECRNotFound %s", 404, payload)
}

func (o *LinkECRNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-ecr][%d] linkECRNotFound %s", 404, payload)
}

func (o *LinkECRNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkECRNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkECRMethodNotAllowed creates a LinkECRMethodNotAllowed with default headers values
func NewLinkECRMethodNotAllowed() *LinkECRMethodNotAllowed {
	return &LinkECRMethodNotAllowed{}
}

/*
LinkECRMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type LinkECRMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link e c r method not allowed response has a 2xx status code
func (o *LinkECRMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link e c r method not allowed response has a 3xx status code
func (o *LinkECRMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link e c r method not allowed response has a 4xx status code
func (o *LinkECRMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this link e c r method not allowed response has a 5xx status code
func (o *LinkECRMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this link e c r method not allowed response a status code equal to that given
func (o *LinkECRMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the link e c r method not allowed response
func (o *LinkECRMethodNotAllowed) Code() int {
	return 405
}

func (o *LinkECRMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-ecr][%d] linkECRMethodNotAllowed %s", 405, payload)
}

func (o *LinkECRMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-ecr][%d] linkECRMethodNotAllowed %s", 405, payload)
}

func (o *LinkECRMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkECRMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkECRInternalServerError creates a LinkECRInternalServerError with default headers values
func NewLinkECRInternalServerError() *LinkECRInternalServerError {
	return &LinkECRInternalServerError{}
}

/*
LinkECRInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type LinkECRInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this link e c r internal server error response has a 2xx status code
func (o *LinkECRInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link e c r internal server error response has a 3xx status code
func (o *LinkECRInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link e c r internal server error response has a 4xx status code
func (o *LinkECRInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this link e c r internal server error response has a 5xx status code
func (o *LinkECRInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this link e c r internal server error response a status code equal to that given
func (o *LinkECRInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the link e c r internal server error response
func (o *LinkECRInternalServerError) Code() int {
	return 500
}

func (o *LinkECRInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-ecr][%d] linkECRInternalServerError %s", 500, payload)
}

func (o *LinkECRInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public/v1/link-ecr][%d] linkECRInternalServerError %s", 500, payload)
}

func (o *LinkECRInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LinkECRInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
