// Code generated by go-swagger; DO NOT EDIT.

package ui_opa_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreatePolicyReader is a Reader for the CreatePolicy structure.
type CreatePolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreatePolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreatePolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreatePolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreatePolicyMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreatePolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/opa/{policyName}] createPolicy", response, response.Code())
	}
}

// NewCreatePolicyOK creates a CreatePolicyOK with default headers values
func NewCreatePolicyOK() *CreatePolicyOK {
	return &CreatePolicyOK{}
}

/*
CreatePolicyOK describes a response with status code 200, with default header values.

OK
*/
type CreatePolicyOK struct {
	Payload *models.OpaPolicy
}

// IsSuccess returns true when this create policy o k response has a 2xx status code
func (o *CreatePolicyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create policy o k response has a 3xx status code
func (o *CreatePolicyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create policy o k response has a 4xx status code
func (o *CreatePolicyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create policy o k response has a 5xx status code
func (o *CreatePolicyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create policy o k response a status code equal to that given
func (o *CreatePolicyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create policy o k response
func (o *CreatePolicyOK) Code() int {
	return 200
}

func (o *CreatePolicyOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}][%d] createPolicyOK %s", 200, payload)
}

func (o *CreatePolicyOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}][%d] createPolicyOK %s", 200, payload)
}

func (o *CreatePolicyOK) GetPayload() *models.OpaPolicy {
	return o.Payload
}

func (o *CreatePolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpaPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePolicyBadRequest creates a CreatePolicyBadRequest with default headers values
func NewCreatePolicyBadRequest() *CreatePolicyBadRequest {
	return &CreatePolicyBadRequest{}
}

/*
CreatePolicyBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreatePolicyBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create policy bad request response has a 2xx status code
func (o *CreatePolicyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create policy bad request response has a 3xx status code
func (o *CreatePolicyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create policy bad request response has a 4xx status code
func (o *CreatePolicyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create policy bad request response has a 5xx status code
func (o *CreatePolicyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create policy bad request response a status code equal to that given
func (o *CreatePolicyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create policy bad request response
func (o *CreatePolicyBadRequest) Code() int {
	return 400
}

func (o *CreatePolicyBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}][%d] createPolicyBadRequest %s", 400, payload)
}

func (o *CreatePolicyBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}][%d] createPolicyBadRequest %s", 400, payload)
}

func (o *CreatePolicyBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreatePolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePolicyNotFound creates a CreatePolicyNotFound with default headers values
func NewCreatePolicyNotFound() *CreatePolicyNotFound {
	return &CreatePolicyNotFound{}
}

/*
CreatePolicyNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreatePolicyNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create policy not found response has a 2xx status code
func (o *CreatePolicyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create policy not found response has a 3xx status code
func (o *CreatePolicyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create policy not found response has a 4xx status code
func (o *CreatePolicyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create policy not found response has a 5xx status code
func (o *CreatePolicyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create policy not found response a status code equal to that given
func (o *CreatePolicyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create policy not found response
func (o *CreatePolicyNotFound) Code() int {
	return 404
}

func (o *CreatePolicyNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}][%d] createPolicyNotFound %s", 404, payload)
}

func (o *CreatePolicyNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}][%d] createPolicyNotFound %s", 404, payload)
}

func (o *CreatePolicyNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreatePolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePolicyMethodNotAllowed creates a CreatePolicyMethodNotAllowed with default headers values
func NewCreatePolicyMethodNotAllowed() *CreatePolicyMethodNotAllowed {
	return &CreatePolicyMethodNotAllowed{}
}

/*
CreatePolicyMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type CreatePolicyMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create policy method not allowed response has a 2xx status code
func (o *CreatePolicyMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create policy method not allowed response has a 3xx status code
func (o *CreatePolicyMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create policy method not allowed response has a 4xx status code
func (o *CreatePolicyMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create policy method not allowed response has a 5xx status code
func (o *CreatePolicyMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this create policy method not allowed response a status code equal to that given
func (o *CreatePolicyMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the create policy method not allowed response
func (o *CreatePolicyMethodNotAllowed) Code() int {
	return 405
}

func (o *CreatePolicyMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}][%d] createPolicyMethodNotAllowed %s", 405, payload)
}

func (o *CreatePolicyMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}][%d] createPolicyMethodNotAllowed %s", 405, payload)
}

func (o *CreatePolicyMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreatePolicyMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePolicyInternalServerError creates a CreatePolicyInternalServerError with default headers values
func NewCreatePolicyInternalServerError() *CreatePolicyInternalServerError {
	return &CreatePolicyInternalServerError{}
}

/*
CreatePolicyInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreatePolicyInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create policy internal server error response has a 2xx status code
func (o *CreatePolicyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create policy internal server error response has a 3xx status code
func (o *CreatePolicyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create policy internal server error response has a 4xx status code
func (o *CreatePolicyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create policy internal server error response has a 5xx status code
func (o *CreatePolicyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create policy internal server error response a status code equal to that given
func (o *CreatePolicyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create policy internal server error response
func (o *CreatePolicyInternalServerError) Code() int {
	return 500
}

func (o *CreatePolicyInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}][%d] createPolicyInternalServerError %s", 500, payload)
}

func (o *CreatePolicyInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}][%d] createPolicyInternalServerError %s", 500, payload)
}

func (o *CreatePolicyInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreatePolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
