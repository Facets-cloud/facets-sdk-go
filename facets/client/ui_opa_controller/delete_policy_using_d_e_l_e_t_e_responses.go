// Code generated by go-swagger; DO NOT EDIT.

package ui_opa_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeletePolicyUsingDELETEReader is a Reader for the DeletePolicyUsingDELETE structure.
type DeletePolicyUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePolicyUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeletePolicyUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeletePolicyUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeletePolicyUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeletePolicyUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/opa/{policyName}] deletePolicyUsingDELETE", response, response.Code())
	}
}

// NewDeletePolicyUsingDELETEOK creates a DeletePolicyUsingDELETEOK with default headers values
func NewDeletePolicyUsingDELETEOK() *DeletePolicyUsingDELETEOK {
	return &DeletePolicyUsingDELETEOK{}
}

/*
DeletePolicyUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeletePolicyUsingDELETEOK struct {
}

// IsSuccess returns true when this delete policy using d e l e t e o k response has a 2xx status code
func (o *DeletePolicyUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete policy using d e l e t e o k response has a 3xx status code
func (o *DeletePolicyUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete policy using d e l e t e o k response has a 4xx status code
func (o *DeletePolicyUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete policy using d e l e t e o k response has a 5xx status code
func (o *DeletePolicyUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete policy using d e l e t e o k response a status code equal to that given
func (o *DeletePolicyUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete policy using d e l e t e o k response
func (o *DeletePolicyUsingDELETEOK) Code() int {
	return 200
}

func (o *DeletePolicyUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/opa/{policyName}][%d] deletePolicyUsingDELETEOK", 200)
}

func (o *DeletePolicyUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/opa/{policyName}][%d] deletePolicyUsingDELETEOK", 200)
}

func (o *DeletePolicyUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePolicyUsingDELETENoContent creates a DeletePolicyUsingDELETENoContent with default headers values
func NewDeletePolicyUsingDELETENoContent() *DeletePolicyUsingDELETENoContent {
	return &DeletePolicyUsingDELETENoContent{}
}

/*
DeletePolicyUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeletePolicyUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete policy using d e l e t e no content response has a 2xx status code
func (o *DeletePolicyUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete policy using d e l e t e no content response has a 3xx status code
func (o *DeletePolicyUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete policy using d e l e t e no content response has a 4xx status code
func (o *DeletePolicyUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete policy using d e l e t e no content response has a 5xx status code
func (o *DeletePolicyUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete policy using d e l e t e no content response a status code equal to that given
func (o *DeletePolicyUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete policy using d e l e t e no content response
func (o *DeletePolicyUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeletePolicyUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/opa/{policyName}][%d] deletePolicyUsingDELETENoContent", 204)
}

func (o *DeletePolicyUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/opa/{policyName}][%d] deletePolicyUsingDELETENoContent", 204)
}

func (o *DeletePolicyUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePolicyUsingDELETEUnauthorized creates a DeletePolicyUsingDELETEUnauthorized with default headers values
func NewDeletePolicyUsingDELETEUnauthorized() *DeletePolicyUsingDELETEUnauthorized {
	return &DeletePolicyUsingDELETEUnauthorized{}
}

/*
DeletePolicyUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeletePolicyUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete policy using d e l e t e unauthorized response has a 2xx status code
func (o *DeletePolicyUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete policy using d e l e t e unauthorized response has a 3xx status code
func (o *DeletePolicyUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete policy using d e l e t e unauthorized response has a 4xx status code
func (o *DeletePolicyUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete policy using d e l e t e unauthorized response has a 5xx status code
func (o *DeletePolicyUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete policy using d e l e t e unauthorized response a status code equal to that given
func (o *DeletePolicyUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete policy using d e l e t e unauthorized response
func (o *DeletePolicyUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeletePolicyUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/opa/{policyName}][%d] deletePolicyUsingDELETEUnauthorized", 401)
}

func (o *DeletePolicyUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/opa/{policyName}][%d] deletePolicyUsingDELETEUnauthorized", 401)
}

func (o *DeletePolicyUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePolicyUsingDELETEForbidden creates a DeletePolicyUsingDELETEForbidden with default headers values
func NewDeletePolicyUsingDELETEForbidden() *DeletePolicyUsingDELETEForbidden {
	return &DeletePolicyUsingDELETEForbidden{}
}

/*
DeletePolicyUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeletePolicyUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete policy using d e l e t e forbidden response has a 2xx status code
func (o *DeletePolicyUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete policy using d e l e t e forbidden response has a 3xx status code
func (o *DeletePolicyUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete policy using d e l e t e forbidden response has a 4xx status code
func (o *DeletePolicyUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete policy using d e l e t e forbidden response has a 5xx status code
func (o *DeletePolicyUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete policy using d e l e t e forbidden response a status code equal to that given
func (o *DeletePolicyUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete policy using d e l e t e forbidden response
func (o *DeletePolicyUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeletePolicyUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/opa/{policyName}][%d] deletePolicyUsingDELETEForbidden", 403)
}

func (o *DeletePolicyUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/opa/{policyName}][%d] deletePolicyUsingDELETEForbidden", 403)
}

func (o *DeletePolicyUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
