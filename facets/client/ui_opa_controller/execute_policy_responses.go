// Code generated by go-swagger; DO NOT EDIT.

package ui_opa_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ExecutePolicyReader is a Reader for the ExecutePolicy structure.
type ExecutePolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecutePolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecutePolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecutePolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExecutePolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewExecutePolicyMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecutePolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/opa/{policyName}/execute] executePolicy", response, response.Code())
	}
}

// NewExecutePolicyOK creates a ExecutePolicyOK with default headers values
func NewExecutePolicyOK() *ExecutePolicyOK {
	return &ExecutePolicyOK{}
}

/*
ExecutePolicyOK describes a response with status code 200, with default header values.

OK
*/
type ExecutePolicyOK struct {
	Payload *models.OpaPolicyExecutionResult
}

// IsSuccess returns true when this execute policy o k response has a 2xx status code
func (o *ExecutePolicyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute policy o k response has a 3xx status code
func (o *ExecutePolicyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute policy o k response has a 4xx status code
func (o *ExecutePolicyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute policy o k response has a 5xx status code
func (o *ExecutePolicyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execute policy o k response a status code equal to that given
func (o *ExecutePolicyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execute policy o k response
func (o *ExecutePolicyOK) Code() int {
	return 200
}

func (o *ExecutePolicyOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}/execute][%d] executePolicyOK %s", 200, payload)
}

func (o *ExecutePolicyOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}/execute][%d] executePolicyOK %s", 200, payload)
}

func (o *ExecutePolicyOK) GetPayload() *models.OpaPolicyExecutionResult {
	return o.Payload
}

func (o *ExecutePolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpaPolicyExecutionResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutePolicyBadRequest creates a ExecutePolicyBadRequest with default headers values
func NewExecutePolicyBadRequest() *ExecutePolicyBadRequest {
	return &ExecutePolicyBadRequest{}
}

/*
ExecutePolicyBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecutePolicyBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this execute policy bad request response has a 2xx status code
func (o *ExecutePolicyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute policy bad request response has a 3xx status code
func (o *ExecutePolicyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute policy bad request response has a 4xx status code
func (o *ExecutePolicyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute policy bad request response has a 5xx status code
func (o *ExecutePolicyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execute policy bad request response a status code equal to that given
func (o *ExecutePolicyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the execute policy bad request response
func (o *ExecutePolicyBadRequest) Code() int {
	return 400
}

func (o *ExecutePolicyBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}/execute][%d] executePolicyBadRequest %s", 400, payload)
}

func (o *ExecutePolicyBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}/execute][%d] executePolicyBadRequest %s", 400, payload)
}

func (o *ExecutePolicyBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ExecutePolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutePolicyNotFound creates a ExecutePolicyNotFound with default headers values
func NewExecutePolicyNotFound() *ExecutePolicyNotFound {
	return &ExecutePolicyNotFound{}
}

/*
ExecutePolicyNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ExecutePolicyNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this execute policy not found response has a 2xx status code
func (o *ExecutePolicyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute policy not found response has a 3xx status code
func (o *ExecutePolicyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute policy not found response has a 4xx status code
func (o *ExecutePolicyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute policy not found response has a 5xx status code
func (o *ExecutePolicyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this execute policy not found response a status code equal to that given
func (o *ExecutePolicyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the execute policy not found response
func (o *ExecutePolicyNotFound) Code() int {
	return 404
}

func (o *ExecutePolicyNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}/execute][%d] executePolicyNotFound %s", 404, payload)
}

func (o *ExecutePolicyNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}/execute][%d] executePolicyNotFound %s", 404, payload)
}

func (o *ExecutePolicyNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ExecutePolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutePolicyMethodNotAllowed creates a ExecutePolicyMethodNotAllowed with default headers values
func NewExecutePolicyMethodNotAllowed() *ExecutePolicyMethodNotAllowed {
	return &ExecutePolicyMethodNotAllowed{}
}

/*
ExecutePolicyMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ExecutePolicyMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this execute policy method not allowed response has a 2xx status code
func (o *ExecutePolicyMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute policy method not allowed response has a 3xx status code
func (o *ExecutePolicyMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute policy method not allowed response has a 4xx status code
func (o *ExecutePolicyMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute policy method not allowed response has a 5xx status code
func (o *ExecutePolicyMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this execute policy method not allowed response a status code equal to that given
func (o *ExecutePolicyMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the execute policy method not allowed response
func (o *ExecutePolicyMethodNotAllowed) Code() int {
	return 405
}

func (o *ExecutePolicyMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}/execute][%d] executePolicyMethodNotAllowed %s", 405, payload)
}

func (o *ExecutePolicyMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}/execute][%d] executePolicyMethodNotAllowed %s", 405, payload)
}

func (o *ExecutePolicyMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ExecutePolicyMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutePolicyInternalServerError creates a ExecutePolicyInternalServerError with default headers values
func NewExecutePolicyInternalServerError() *ExecutePolicyInternalServerError {
	return &ExecutePolicyInternalServerError{}
}

/*
ExecutePolicyInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExecutePolicyInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this execute policy internal server error response has a 2xx status code
func (o *ExecutePolicyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute policy internal server error response has a 3xx status code
func (o *ExecutePolicyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute policy internal server error response has a 4xx status code
func (o *ExecutePolicyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute policy internal server error response has a 5xx status code
func (o *ExecutePolicyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execute policy internal server error response a status code equal to that given
func (o *ExecutePolicyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the execute policy internal server error response
func (o *ExecutePolicyInternalServerError) Code() int {
	return 500
}

func (o *ExecutePolicyInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}/execute][%d] executePolicyInternalServerError %s", 500, payload)
}

func (o *ExecutePolicyInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/opa/{policyName}/execute][%d] executePolicyInternalServerError %s", 500, payload)
}

func (o *ExecutePolicyInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ExecutePolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
