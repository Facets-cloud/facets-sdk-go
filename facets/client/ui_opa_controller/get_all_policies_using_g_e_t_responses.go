// Code generated by go-swagger; DO NOT EDIT.

package ui_opa_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllPoliciesUsingGETReader is a Reader for the GetAllPoliciesUsingGET structure.
type GetAllPoliciesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllPoliciesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllPoliciesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllPoliciesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllPoliciesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllPoliciesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/opa] getAllPoliciesUsingGET", response, response.Code())
	}
}

// NewGetAllPoliciesUsingGETOK creates a GetAllPoliciesUsingGETOK with default headers values
func NewGetAllPoliciesUsingGETOK() *GetAllPoliciesUsingGETOK {
	return &GetAllPoliciesUsingGETOK{}
}

/*
GetAllPoliciesUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllPoliciesUsingGETOK struct {
	Payload []*models.OpaPolicy
}

// IsSuccess returns true when this get all policies using g e t o k response has a 2xx status code
func (o *GetAllPoliciesUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all policies using g e t o k response has a 3xx status code
func (o *GetAllPoliciesUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all policies using g e t o k response has a 4xx status code
func (o *GetAllPoliciesUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all policies using g e t o k response has a 5xx status code
func (o *GetAllPoliciesUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all policies using g e t o k response a status code equal to that given
func (o *GetAllPoliciesUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all policies using g e t o k response
func (o *GetAllPoliciesUsingGETOK) Code() int {
	return 200
}

func (o *GetAllPoliciesUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/opa][%d] getAllPoliciesUsingGETOK %s", 200, payload)
}

func (o *GetAllPoliciesUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/opa][%d] getAllPoliciesUsingGETOK %s", 200, payload)
}

func (o *GetAllPoliciesUsingGETOK) GetPayload() []*models.OpaPolicy {
	return o.Payload
}

func (o *GetAllPoliciesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllPoliciesUsingGETUnauthorized creates a GetAllPoliciesUsingGETUnauthorized with default headers values
func NewGetAllPoliciesUsingGETUnauthorized() *GetAllPoliciesUsingGETUnauthorized {
	return &GetAllPoliciesUsingGETUnauthorized{}
}

/*
GetAllPoliciesUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllPoliciesUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all policies using g e t unauthorized response has a 2xx status code
func (o *GetAllPoliciesUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all policies using g e t unauthorized response has a 3xx status code
func (o *GetAllPoliciesUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all policies using g e t unauthorized response has a 4xx status code
func (o *GetAllPoliciesUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all policies using g e t unauthorized response has a 5xx status code
func (o *GetAllPoliciesUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all policies using g e t unauthorized response a status code equal to that given
func (o *GetAllPoliciesUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all policies using g e t unauthorized response
func (o *GetAllPoliciesUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllPoliciesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/opa][%d] getAllPoliciesUsingGETUnauthorized", 401)
}

func (o *GetAllPoliciesUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/opa][%d] getAllPoliciesUsingGETUnauthorized", 401)
}

func (o *GetAllPoliciesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllPoliciesUsingGETForbidden creates a GetAllPoliciesUsingGETForbidden with default headers values
func NewGetAllPoliciesUsingGETForbidden() *GetAllPoliciesUsingGETForbidden {
	return &GetAllPoliciesUsingGETForbidden{}
}

/*
GetAllPoliciesUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllPoliciesUsingGETForbidden struct {
}

// IsSuccess returns true when this get all policies using g e t forbidden response has a 2xx status code
func (o *GetAllPoliciesUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all policies using g e t forbidden response has a 3xx status code
func (o *GetAllPoliciesUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all policies using g e t forbidden response has a 4xx status code
func (o *GetAllPoliciesUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all policies using g e t forbidden response has a 5xx status code
func (o *GetAllPoliciesUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all policies using g e t forbidden response a status code equal to that given
func (o *GetAllPoliciesUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all policies using g e t forbidden response
func (o *GetAllPoliciesUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllPoliciesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/opa][%d] getAllPoliciesUsingGETForbidden", 403)
}

func (o *GetAllPoliciesUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/opa][%d] getAllPoliciesUsingGETForbidden", 403)
}

func (o *GetAllPoliciesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllPoliciesUsingGETNotFound creates a GetAllPoliciesUsingGETNotFound with default headers values
func NewGetAllPoliciesUsingGETNotFound() *GetAllPoliciesUsingGETNotFound {
	return &GetAllPoliciesUsingGETNotFound{}
}

/*
GetAllPoliciesUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllPoliciesUsingGETNotFound struct {
}

// IsSuccess returns true when this get all policies using g e t not found response has a 2xx status code
func (o *GetAllPoliciesUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all policies using g e t not found response has a 3xx status code
func (o *GetAllPoliciesUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all policies using g e t not found response has a 4xx status code
func (o *GetAllPoliciesUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all policies using g e t not found response has a 5xx status code
func (o *GetAllPoliciesUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all policies using g e t not found response a status code equal to that given
func (o *GetAllPoliciesUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all policies using g e t not found response
func (o *GetAllPoliciesUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllPoliciesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/opa][%d] getAllPoliciesUsingGETNotFound", 404)
}

func (o *GetAllPoliciesUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/opa][%d] getAllPoliciesUsingGETNotFound", 404)
}

func (o *GetAllPoliciesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
