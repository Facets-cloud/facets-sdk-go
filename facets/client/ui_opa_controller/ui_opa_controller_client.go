// Code generated by go-swagger; DO NOT EDIT.

package ui_opa_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui opa controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui opa controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui opa controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui opa controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	BulkEditOpaPolicyStateUsingPOST(params *BulkEditOpaPolicyStateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEditOpaPolicyStateUsingPOSTOK, *BulkEditOpaPolicyStateUsingPOSTCreated, error)

	CreatePolicyUsingPOST(params *CreatePolicyUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePolicyUsingPOSTOK, *CreatePolicyUsingPOSTCreated, error)

	DeletePolicyUsingDELETE(params *DeletePolicyUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePolicyUsingDELETEOK, *DeletePolicyUsingDELETENoContent, error)

	EditPolicyUsingPUT(params *EditPolicyUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditPolicyUsingPUTOK, *EditPolicyUsingPUTCreated, error)

	ExecutePolicyUsingPOST(params *ExecutePolicyUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExecutePolicyUsingPOSTOK, *ExecutePolicyUsingPOSTCreated, error)

	GetAllPoliciesUsingGET(params *GetAllPoliciesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllPoliciesUsingGETOK, error)

	GetAllPolicyTemplatesUsingGET(params *GetAllPolicyTemplatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllPolicyTemplatesUsingGETOK, error)

	GetPolicyUsingGET(params *GetPolicyUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPolicyUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
BulkEditOpaPolicyStateUsingPOST bulks edit opa policy state
*/
func (a *Client) BulkEditOpaPolicyStateUsingPOST(params *BulkEditOpaPolicyStateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEditOpaPolicyStateUsingPOSTOK, *BulkEditOpaPolicyStateUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkEditOpaPolicyStateUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "bulkEditOpaPolicyStateUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/opa/enable-disable-policies",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BulkEditOpaPolicyStateUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BulkEditOpaPolicyStateUsingPOSTOK:
		return value, nil, nil
	case *BulkEditOpaPolicyStateUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_opa_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePolicyUsingPOST creates policy
*/
func (a *Client) CreatePolicyUsingPOST(params *CreatePolicyUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePolicyUsingPOSTOK, *CreatePolicyUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePolicyUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPolicyUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/opa/{policyName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePolicyUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreatePolicyUsingPOSTOK:
		return value, nil, nil
	case *CreatePolicyUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_opa_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePolicyUsingDELETE deletes policy
*/
func (a *Client) DeletePolicyUsingDELETE(params *DeletePolicyUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePolicyUsingDELETEOK, *DeletePolicyUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePolicyUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/opa/{policyName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePolicyUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeletePolicyUsingDELETEOK:
		return value, nil, nil
	case *DeletePolicyUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_opa_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EditPolicyUsingPUT edits policy
*/
func (a *Client) EditPolicyUsingPUT(params *EditPolicyUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditPolicyUsingPUTOK, *EditPolicyUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditPolicyUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editPolicyUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/opa/{policyName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditPolicyUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *EditPolicyUsingPUTOK:
		return value, nil, nil
	case *EditPolicyUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_opa_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecutePolicyUsingPOST executes policy
*/
func (a *Client) ExecutePolicyUsingPOST(params *ExecutePolicyUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExecutePolicyUsingPOSTOK, *ExecutePolicyUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutePolicyUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "executePolicyUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/opa/{policyName}/execute",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExecutePolicyUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ExecutePolicyUsingPOSTOK:
		return value, nil, nil
	case *ExecutePolicyUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_opa_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllPoliciesUsingGET gets all policies
*/
func (a *Client) GetAllPoliciesUsingGET(params *GetAllPoliciesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllPoliciesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPoliciesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllPoliciesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/opa",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllPoliciesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllPoliciesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllPoliciesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllPolicyTemplatesUsingGET gets all policy templates
*/
func (a *Client) GetAllPolicyTemplatesUsingGET(params *GetAllPolicyTemplatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllPolicyTemplatesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPolicyTemplatesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllPolicyTemplatesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/opa/policy-templates",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllPolicyTemplatesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllPolicyTemplatesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllPolicyTemplatesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPolicyUsingGET gets policy
*/
func (a *Client) GetPolicyUsingGET(params *GetPolicyUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPolicyUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPolicyUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/opa/{policyName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPolicyUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPolicyUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
