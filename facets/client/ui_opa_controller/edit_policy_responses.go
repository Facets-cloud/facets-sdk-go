// Code generated by go-swagger; DO NOT EDIT.

package ui_opa_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// EditPolicyReader is a Reader for the EditPolicy structure.
type EditPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EditPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEditPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEditPolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEditPolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewEditPolicyMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEditPolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/opa/{policyName}] editPolicy", response, response.Code())
	}
}

// NewEditPolicyOK creates a EditPolicyOK with default headers values
func NewEditPolicyOK() *EditPolicyOK {
	return &EditPolicyOK{}
}

/*
EditPolicyOK describes a response with status code 200, with default header values.

OK
*/
type EditPolicyOK struct {
	Payload *models.OpaPolicy
}

// IsSuccess returns true when this edit policy o k response has a 2xx status code
func (o *EditPolicyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this edit policy o k response has a 3xx status code
func (o *EditPolicyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit policy o k response has a 4xx status code
func (o *EditPolicyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this edit policy o k response has a 5xx status code
func (o *EditPolicyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this edit policy o k response a status code equal to that given
func (o *EditPolicyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the edit policy o k response
func (o *EditPolicyOK) Code() int {
	return 200
}

func (o *EditPolicyOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/opa/{policyName}][%d] editPolicyOK %s", 200, payload)
}

func (o *EditPolicyOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/opa/{policyName}][%d] editPolicyOK %s", 200, payload)
}

func (o *EditPolicyOK) GetPayload() *models.OpaPolicy {
	return o.Payload
}

func (o *EditPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpaPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditPolicyBadRequest creates a EditPolicyBadRequest with default headers values
func NewEditPolicyBadRequest() *EditPolicyBadRequest {
	return &EditPolicyBadRequest{}
}

/*
EditPolicyBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type EditPolicyBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this edit policy bad request response has a 2xx status code
func (o *EditPolicyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edit policy bad request response has a 3xx status code
func (o *EditPolicyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit policy bad request response has a 4xx status code
func (o *EditPolicyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this edit policy bad request response has a 5xx status code
func (o *EditPolicyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this edit policy bad request response a status code equal to that given
func (o *EditPolicyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the edit policy bad request response
func (o *EditPolicyBadRequest) Code() int {
	return 400
}

func (o *EditPolicyBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/opa/{policyName}][%d] editPolicyBadRequest %s", 400, payload)
}

func (o *EditPolicyBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/opa/{policyName}][%d] editPolicyBadRequest %s", 400, payload)
}

func (o *EditPolicyBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *EditPolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditPolicyNotFound creates a EditPolicyNotFound with default headers values
func NewEditPolicyNotFound() *EditPolicyNotFound {
	return &EditPolicyNotFound{}
}

/*
EditPolicyNotFound describes a response with status code 404, with default header values.

Not Found
*/
type EditPolicyNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this edit policy not found response has a 2xx status code
func (o *EditPolicyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edit policy not found response has a 3xx status code
func (o *EditPolicyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit policy not found response has a 4xx status code
func (o *EditPolicyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this edit policy not found response has a 5xx status code
func (o *EditPolicyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this edit policy not found response a status code equal to that given
func (o *EditPolicyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the edit policy not found response
func (o *EditPolicyNotFound) Code() int {
	return 404
}

func (o *EditPolicyNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/opa/{policyName}][%d] editPolicyNotFound %s", 404, payload)
}

func (o *EditPolicyNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/opa/{policyName}][%d] editPolicyNotFound %s", 404, payload)
}

func (o *EditPolicyNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *EditPolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditPolicyMethodNotAllowed creates a EditPolicyMethodNotAllowed with default headers values
func NewEditPolicyMethodNotAllowed() *EditPolicyMethodNotAllowed {
	return &EditPolicyMethodNotAllowed{}
}

/*
EditPolicyMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type EditPolicyMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this edit policy method not allowed response has a 2xx status code
func (o *EditPolicyMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edit policy method not allowed response has a 3xx status code
func (o *EditPolicyMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit policy method not allowed response has a 4xx status code
func (o *EditPolicyMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this edit policy method not allowed response has a 5xx status code
func (o *EditPolicyMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this edit policy method not allowed response a status code equal to that given
func (o *EditPolicyMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the edit policy method not allowed response
func (o *EditPolicyMethodNotAllowed) Code() int {
	return 405
}

func (o *EditPolicyMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/opa/{policyName}][%d] editPolicyMethodNotAllowed %s", 405, payload)
}

func (o *EditPolicyMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/opa/{policyName}][%d] editPolicyMethodNotAllowed %s", 405, payload)
}

func (o *EditPolicyMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *EditPolicyMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditPolicyInternalServerError creates a EditPolicyInternalServerError with default headers values
func NewEditPolicyInternalServerError() *EditPolicyInternalServerError {
	return &EditPolicyInternalServerError{}
}

/*
EditPolicyInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type EditPolicyInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this edit policy internal server error response has a 2xx status code
func (o *EditPolicyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edit policy internal server error response has a 3xx status code
func (o *EditPolicyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit policy internal server error response has a 4xx status code
func (o *EditPolicyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this edit policy internal server error response has a 5xx status code
func (o *EditPolicyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this edit policy internal server error response a status code equal to that given
func (o *EditPolicyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the edit policy internal server error response
func (o *EditPolicyInternalServerError) Code() int {
	return 500
}

func (o *EditPolicyInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/opa/{policyName}][%d] editPolicyInternalServerError %s", 500, payload)
}

func (o *EditPolicyInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/opa/{policyName}][%d] editPolicyInternalServerError %s", 500, payload)
}

func (o *EditPolicyInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *EditPolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
