// Code generated by go-swagger; DO NOT EDIT.

package ui_ci_cd_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RegisterArtifactSaasReader is a Reader for the RegisterArtifactSaas structure.
type RegisterArtifactSaasReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterArtifactSaasReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRegisterArtifactSaasOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRegisterArtifactSaasBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRegisterArtifactSaasNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRegisterArtifactSaasMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRegisterArtifactSaasInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/ci-cd/register] registerArtifactSaas", response, response.Code())
	}
}

// NewRegisterArtifactSaasOK creates a RegisterArtifactSaasOK with default headers values
func NewRegisterArtifactSaasOK() *RegisterArtifactSaasOK {
	return &RegisterArtifactSaasOK{}
}

/*
RegisterArtifactSaasOK describes a response with status code 200, with default header values.

Artifact registered successfully.
*/
type RegisterArtifactSaasOK struct {
}

// IsSuccess returns true when this register artifact saas o k response has a 2xx status code
func (o *RegisterArtifactSaasOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this register artifact saas o k response has a 3xx status code
func (o *RegisterArtifactSaasOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register artifact saas o k response has a 4xx status code
func (o *RegisterArtifactSaasOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this register artifact saas o k response has a 5xx status code
func (o *RegisterArtifactSaasOK) IsServerError() bool {
	return false
}

// IsCode returns true when this register artifact saas o k response a status code equal to that given
func (o *RegisterArtifactSaasOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the register artifact saas o k response
func (o *RegisterArtifactSaasOK) Code() int {
	return 200
}

func (o *RegisterArtifactSaasOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd/register][%d] registerArtifactSaasOK", 200)
}

func (o *RegisterArtifactSaasOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd/register][%d] registerArtifactSaasOK", 200)
}

func (o *RegisterArtifactSaasOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterArtifactSaasBadRequest creates a RegisterArtifactSaasBadRequest with default headers values
func NewRegisterArtifactSaasBadRequest() *RegisterArtifactSaasBadRequest {
	return &RegisterArtifactSaasBadRequest{}
}

/*
RegisterArtifactSaasBadRequest describes a response with status code 400, with default header values.

Invalid input.
*/
type RegisterArtifactSaasBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this register artifact saas bad request response has a 2xx status code
func (o *RegisterArtifactSaasBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register artifact saas bad request response has a 3xx status code
func (o *RegisterArtifactSaasBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register artifact saas bad request response has a 4xx status code
func (o *RegisterArtifactSaasBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this register artifact saas bad request response has a 5xx status code
func (o *RegisterArtifactSaasBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this register artifact saas bad request response a status code equal to that given
func (o *RegisterArtifactSaasBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the register artifact saas bad request response
func (o *RegisterArtifactSaasBadRequest) Code() int {
	return 400
}

func (o *RegisterArtifactSaasBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd/register][%d] registerArtifactSaasBadRequest %s", 400, payload)
}

func (o *RegisterArtifactSaasBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd/register][%d] registerArtifactSaasBadRequest %s", 400, payload)
}

func (o *RegisterArtifactSaasBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RegisterArtifactSaasBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterArtifactSaasNotFound creates a RegisterArtifactSaasNotFound with default headers values
func NewRegisterArtifactSaasNotFound() *RegisterArtifactSaasNotFound {
	return &RegisterArtifactSaasNotFound{}
}

/*
RegisterArtifactSaasNotFound describes a response with status code 404, with default header values.

Stack not found.
*/
type RegisterArtifactSaasNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this register artifact saas not found response has a 2xx status code
func (o *RegisterArtifactSaasNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register artifact saas not found response has a 3xx status code
func (o *RegisterArtifactSaasNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register artifact saas not found response has a 4xx status code
func (o *RegisterArtifactSaasNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this register artifact saas not found response has a 5xx status code
func (o *RegisterArtifactSaasNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this register artifact saas not found response a status code equal to that given
func (o *RegisterArtifactSaasNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the register artifact saas not found response
func (o *RegisterArtifactSaasNotFound) Code() int {
	return 404
}

func (o *RegisterArtifactSaasNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd/register][%d] registerArtifactSaasNotFound %s", 404, payload)
}

func (o *RegisterArtifactSaasNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd/register][%d] registerArtifactSaasNotFound %s", 404, payload)
}

func (o *RegisterArtifactSaasNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RegisterArtifactSaasNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterArtifactSaasMethodNotAllowed creates a RegisterArtifactSaasMethodNotAllowed with default headers values
func NewRegisterArtifactSaasMethodNotAllowed() *RegisterArtifactSaasMethodNotAllowed {
	return &RegisterArtifactSaasMethodNotAllowed{}
}

/*
RegisterArtifactSaasMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RegisterArtifactSaasMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this register artifact saas method not allowed response has a 2xx status code
func (o *RegisterArtifactSaasMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register artifact saas method not allowed response has a 3xx status code
func (o *RegisterArtifactSaasMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register artifact saas method not allowed response has a 4xx status code
func (o *RegisterArtifactSaasMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this register artifact saas method not allowed response has a 5xx status code
func (o *RegisterArtifactSaasMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this register artifact saas method not allowed response a status code equal to that given
func (o *RegisterArtifactSaasMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the register artifact saas method not allowed response
func (o *RegisterArtifactSaasMethodNotAllowed) Code() int {
	return 405
}

func (o *RegisterArtifactSaasMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd/register][%d] registerArtifactSaasMethodNotAllowed %s", 405, payload)
}

func (o *RegisterArtifactSaasMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd/register][%d] registerArtifactSaasMethodNotAllowed %s", 405, payload)
}

func (o *RegisterArtifactSaasMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RegisterArtifactSaasMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterArtifactSaasInternalServerError creates a RegisterArtifactSaasInternalServerError with default headers values
func NewRegisterArtifactSaasInternalServerError() *RegisterArtifactSaasInternalServerError {
	return &RegisterArtifactSaasInternalServerError{}
}

/*
RegisterArtifactSaasInternalServerError describes a response with status code 500, with default header values.

Internal server error.
*/
type RegisterArtifactSaasInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this register artifact saas internal server error response has a 2xx status code
func (o *RegisterArtifactSaasInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register artifact saas internal server error response has a 3xx status code
func (o *RegisterArtifactSaasInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register artifact saas internal server error response has a 4xx status code
func (o *RegisterArtifactSaasInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this register artifact saas internal server error response has a 5xx status code
func (o *RegisterArtifactSaasInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this register artifact saas internal server error response a status code equal to that given
func (o *RegisterArtifactSaasInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the register artifact saas internal server error response
func (o *RegisterArtifactSaasInternalServerError) Code() int {
	return 500
}

func (o *RegisterArtifactSaasInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd/register][%d] registerArtifactSaasInternalServerError %s", 500, payload)
}

func (o *RegisterArtifactSaasInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd/register][%d] registerArtifactSaasInternalServerError %s", 500, payload)
}

func (o *RegisterArtifactSaasInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RegisterArtifactSaasInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
