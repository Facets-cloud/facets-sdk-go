// Code generated by go-swagger; DO NOT EDIT.

package ui_ci_cd_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// SaveCiCdDetailsReader is a Reader for the SaveCiCdDetails structure.
type SaveCiCdDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SaveCiCdDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSaveCiCdDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSaveCiCdDetailsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSaveCiCdDetailsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewSaveCiCdDetailsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSaveCiCdDetailsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/ci-cd] saveCiCdDetails", response, response.Code())
	}
}

// NewSaveCiCdDetailsOK creates a SaveCiCdDetailsOK with default headers values
func NewSaveCiCdDetailsOK() *SaveCiCdDetailsOK {
	return &SaveCiCdDetailsOK{}
}

/*
SaveCiCdDetailsOK describes a response with status code 200, with default header values.

Successfully saved CI/CD details.
*/
type SaveCiCdDetailsOK struct {
}

// IsSuccess returns true when this save ci cd details o k response has a 2xx status code
func (o *SaveCiCdDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this save ci cd details o k response has a 3xx status code
func (o *SaveCiCdDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save ci cd details o k response has a 4xx status code
func (o *SaveCiCdDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this save ci cd details o k response has a 5xx status code
func (o *SaveCiCdDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this save ci cd details o k response a status code equal to that given
func (o *SaveCiCdDetailsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the save ci cd details o k response
func (o *SaveCiCdDetailsOK) Code() int {
	return 200
}

func (o *SaveCiCdDetailsOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd][%d] saveCiCdDetailsOK", 200)
}

func (o *SaveCiCdDetailsOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd][%d] saveCiCdDetailsOK", 200)
}

func (o *SaveCiCdDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSaveCiCdDetailsBadRequest creates a SaveCiCdDetailsBadRequest with default headers values
func NewSaveCiCdDetailsBadRequest() *SaveCiCdDetailsBadRequest {
	return &SaveCiCdDetailsBadRequest{}
}

/*
SaveCiCdDetailsBadRequest describes a response with status code 400, with default header values.

Invalid input provided.
*/
type SaveCiCdDetailsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this save ci cd details bad request response has a 2xx status code
func (o *SaveCiCdDetailsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save ci cd details bad request response has a 3xx status code
func (o *SaveCiCdDetailsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save ci cd details bad request response has a 4xx status code
func (o *SaveCiCdDetailsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this save ci cd details bad request response has a 5xx status code
func (o *SaveCiCdDetailsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this save ci cd details bad request response a status code equal to that given
func (o *SaveCiCdDetailsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the save ci cd details bad request response
func (o *SaveCiCdDetailsBadRequest) Code() int {
	return 400
}

func (o *SaveCiCdDetailsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd][%d] saveCiCdDetailsBadRequest %s", 400, payload)
}

func (o *SaveCiCdDetailsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd][%d] saveCiCdDetailsBadRequest %s", 400, payload)
}

func (o *SaveCiCdDetailsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SaveCiCdDetailsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveCiCdDetailsNotFound creates a SaveCiCdDetailsNotFound with default headers values
func NewSaveCiCdDetailsNotFound() *SaveCiCdDetailsNotFound {
	return &SaveCiCdDetailsNotFound{}
}

/*
SaveCiCdDetailsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SaveCiCdDetailsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this save ci cd details not found response has a 2xx status code
func (o *SaveCiCdDetailsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save ci cd details not found response has a 3xx status code
func (o *SaveCiCdDetailsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save ci cd details not found response has a 4xx status code
func (o *SaveCiCdDetailsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this save ci cd details not found response has a 5xx status code
func (o *SaveCiCdDetailsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this save ci cd details not found response a status code equal to that given
func (o *SaveCiCdDetailsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the save ci cd details not found response
func (o *SaveCiCdDetailsNotFound) Code() int {
	return 404
}

func (o *SaveCiCdDetailsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd][%d] saveCiCdDetailsNotFound %s", 404, payload)
}

func (o *SaveCiCdDetailsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd][%d] saveCiCdDetailsNotFound %s", 404, payload)
}

func (o *SaveCiCdDetailsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SaveCiCdDetailsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveCiCdDetailsMethodNotAllowed creates a SaveCiCdDetailsMethodNotAllowed with default headers values
func NewSaveCiCdDetailsMethodNotAllowed() *SaveCiCdDetailsMethodNotAllowed {
	return &SaveCiCdDetailsMethodNotAllowed{}
}

/*
SaveCiCdDetailsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type SaveCiCdDetailsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this save ci cd details method not allowed response has a 2xx status code
func (o *SaveCiCdDetailsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save ci cd details method not allowed response has a 3xx status code
func (o *SaveCiCdDetailsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save ci cd details method not allowed response has a 4xx status code
func (o *SaveCiCdDetailsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this save ci cd details method not allowed response has a 5xx status code
func (o *SaveCiCdDetailsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this save ci cd details method not allowed response a status code equal to that given
func (o *SaveCiCdDetailsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the save ci cd details method not allowed response
func (o *SaveCiCdDetailsMethodNotAllowed) Code() int {
	return 405
}

func (o *SaveCiCdDetailsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd][%d] saveCiCdDetailsMethodNotAllowed %s", 405, payload)
}

func (o *SaveCiCdDetailsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd][%d] saveCiCdDetailsMethodNotAllowed %s", 405, payload)
}

func (o *SaveCiCdDetailsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SaveCiCdDetailsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveCiCdDetailsInternalServerError creates a SaveCiCdDetailsInternalServerError with default headers values
func NewSaveCiCdDetailsInternalServerError() *SaveCiCdDetailsInternalServerError {
	return &SaveCiCdDetailsInternalServerError{}
}

/*
SaveCiCdDetailsInternalServerError describes a response with status code 500, with default header values.

Internal server error.
*/
type SaveCiCdDetailsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this save ci cd details internal server error response has a 2xx status code
func (o *SaveCiCdDetailsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save ci cd details internal server error response has a 3xx status code
func (o *SaveCiCdDetailsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save ci cd details internal server error response has a 4xx status code
func (o *SaveCiCdDetailsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this save ci cd details internal server error response has a 5xx status code
func (o *SaveCiCdDetailsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this save ci cd details internal server error response a status code equal to that given
func (o *SaveCiCdDetailsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the save ci cd details internal server error response
func (o *SaveCiCdDetailsInternalServerError) Code() int {
	return 500
}

func (o *SaveCiCdDetailsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd][%d] saveCiCdDetailsInternalServerError %s", 500, payload)
}

func (o *SaveCiCdDetailsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/ci-cd][%d] saveCiCdDetailsInternalServerError %s", 500, payload)
}

func (o *SaveCiCdDetailsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SaveCiCdDetailsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
