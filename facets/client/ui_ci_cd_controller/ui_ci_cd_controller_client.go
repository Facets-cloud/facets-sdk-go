// Code generated by go-swagger; DO NOT EDIT.

package ui_ci_cd_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui ci cd controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui ci cd controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui ci cd controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui ci cd controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AttachRuleAndWorkflowUsingPUT(params *AttachRuleAndWorkflowUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AttachRuleAndWorkflowUsingPUTOK, *AttachRuleAndWorkflowUsingPUTCreated, error)

	DetachRuleAndWorkflowUsingPUT(params *DetachRuleAndWorkflowUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetachRuleAndWorkflowUsingPUTOK, *DetachRuleAndWorkflowUsingPUTCreated, error)

	GenerateArtifactPushCredentialsUsingPOST1(params *GenerateArtifactPushCredentialsUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateArtifactPushCredentialsUsingPOST1OK, *GenerateArtifactPushCredentialsUsingPOST1Created, error)

	GetCiCdDetailsUsingGET(params *GetCiCdDetailsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCiCdDetailsUsingGETOK, error)

	RegisterArtifactSaasUsingPOST1(params *RegisterArtifactSaasUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactSaasUsingPOST1OK, *RegisterArtifactSaasUsingPOST1Created, error)

	SaveCiCdDetailsUsingPOST(params *SaveCiCdDetailsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveCiCdDetailsUsingPOSTOK, *SaveCiCdDetailsUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	AttachRuleAndWorkflowUsingPUT attaches rule and workflow

	- **Description:** Attaches a rule and workflow to an artifact CI.

- **Restrictions:** CI must exist or will be created for the project.
- **Permissions:** Requires `ARTIFACT_CI_WRITE` permission.
- **Audit Logging:** Not applicable.
*/
func (a *Client) AttachRuleAndWorkflowUsingPUT(params *AttachRuleAndWorkflowUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AttachRuleAndWorkflowUsingPUTOK, *AttachRuleAndWorkflowUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachRuleAndWorkflowUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "attachRuleAndWorkflowUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/ci-cd/attach",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AttachRuleAndWorkflowUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AttachRuleAndWorkflowUsingPUTOK:
		return value, nil, nil
	case *AttachRuleAndWorkflowUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_ci_cd_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DetachRuleAndWorkflowUsingPUT detaches rule and workflow

	- **Description:** Detaches a rule and workflow from an artifact CI.

- **Restrictions:** Existing CI registration required.
- **Permissions:** Requires `ARTIFACT_CI_WRITE` permission.
- **Audit Logging:** Not applicable.
*/
func (a *Client) DetachRuleAndWorkflowUsingPUT(params *DetachRuleAndWorkflowUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetachRuleAndWorkflowUsingPUTOK, *DetachRuleAndWorkflowUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetachRuleAndWorkflowUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "detachRuleAndWorkflowUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/ci-cd/detach",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DetachRuleAndWorkflowUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DetachRuleAndWorkflowUsingPUTOK:
		return value, nil, nil
	case *DetachRuleAndWorkflowUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_ci_cd_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GenerateArtifactPushCredentialsUsingPOST1 generates artifact push credentials

	- **Description:** Generates push credentials for an artifact.

- **Restrictions:** Only for supported artifactory types.
- **Permissions:** Requires `ARTIFACTS_WRITE` permission.
- **Audit Logging:** Not applicable.
*/
func (a *Client) GenerateArtifactPushCredentialsUsingPOST1(params *GenerateArtifactPushCredentialsUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateArtifactPushCredentialsUsingPOST1OK, *GenerateArtifactPushCredentialsUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateArtifactPushCredentialsUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateArtifactPushCredentialsUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/ci-cd/pushCredentials",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateArtifactPushCredentialsUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GenerateArtifactPushCredentialsUsingPOST1OK:
		return value, nil, nil
	case *GenerateArtifactPushCredentialsUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_ci_cd_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCiCdDetailsUsingGET gets c i c d details

	- **Description:** Retrieves CI/CD details for a specified project name.

- **Restrictions:** Requires existing default artifact routing rule or promotion workflow.
- **Permissions:** None required.
- **Audit Logging:** Not applicable.
*/
func (a *Client) GetCiCdDetailsUsingGET(params *GetCiCdDetailsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCiCdDetailsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCiCdDetailsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCiCdDetailsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/ci-cd/{stackName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCiCdDetailsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCiCdDetailsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCiCdDetailsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RegisterArtifactSaasUsingPOST1 registers artifact saa s

	- **Description:** Registers a new artifact within the system for SaaS.

- **Restrictions:** Valid artifactory name and consistent registration type required. Blueprint must be CI/CD configured.
- **Permissions:** Requires `ARTIFACTS_WRITE` permission.
- **Audit Logging:** Not applicable.
*/
func (a *Client) RegisterArtifactSaasUsingPOST1(params *RegisterArtifactSaasUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactSaasUsingPOST1OK, *RegisterArtifactSaasUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterArtifactSaasUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerArtifactSaasUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/ci-cd/register",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterArtifactSaasUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RegisterArtifactSaasUsingPOST1OK:
		return value, nil, nil
	case *RegisterArtifactSaasUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_ci_cd_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	SaveCiCdDetailsUsingPOST saves c i c d details

	- **Description:** Saves CI/CD configuration details.

- **Restrictions:** Cannot change registration type after initial configuration.
- **Permissions:** Requires `CI_CD_CONFIGURE` permission.
- **Audit Logging:** This operation is logged for audit purposes.
*/
func (a *Client) SaveCiCdDetailsUsingPOST(params *SaveCiCdDetailsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveCiCdDetailsUsingPOSTOK, *SaveCiCdDetailsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveCiCdDetailsUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "saveCiCdDetailsUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/ci-cd",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveCiCdDetailsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SaveCiCdDetailsUsingPOSTOK:
		return value, nil, nil
	case *SaveCiCdDetailsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_ci_cd_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
