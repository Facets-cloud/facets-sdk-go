// Code generated by go-swagger; DO NOT EDIT.

package ui_ci_cd_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui ci cd controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui ci cd controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui ci cd controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui ci cd controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AttachRuleAndWorkflow(params *AttachRuleAndWorkflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AttachRuleAndWorkflowOK, error)

	DetachRuleAndWorkflow(params *DetachRuleAndWorkflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetachRuleAndWorkflowOK, error)

	GenerateArtifactPushCredentials(params *GenerateArtifactPushCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateArtifactPushCredentialsOK, error)

	GetCiCdDetails(params *GetCiCdDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCiCdDetailsOK, error)

	RegisterArtifactSaas(params *RegisterArtifactSaasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactSaasOK, error)

	SaveCiCdDetails(params *SaveCiCdDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveCiCdDetailsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	AttachRuleAndWorkflow attaches rule and workflow

	- **Description:** Attaches a rule and workflow to an artifact CI.

- **Restrictions:** CI must exist or will be created for the project.
- **Permissions:** Requires `ARTIFACT_CI_WRITE` permission.
- **Audit Logging:** Not applicable.
*/
func (a *Client) AttachRuleAndWorkflow(params *AttachRuleAndWorkflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AttachRuleAndWorkflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachRuleAndWorkflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "attachRuleAndWorkflow",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/ci-cd/attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AttachRuleAndWorkflowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttachRuleAndWorkflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for attachRuleAndWorkflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DetachRuleAndWorkflow detaches rule and workflow

	- **Description:** Detaches a rule and workflow from an artifact CI.

- **Restrictions:** Existing CI registration required.
- **Permissions:** Requires `ARTIFACT_CI_WRITE` permission.
- **Audit Logging:** Not applicable.
*/
func (a *Client) DetachRuleAndWorkflow(params *DetachRuleAndWorkflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetachRuleAndWorkflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetachRuleAndWorkflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "detachRuleAndWorkflow",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/ci-cd/detach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DetachRuleAndWorkflowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DetachRuleAndWorkflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for detachRuleAndWorkflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GenerateArtifactPushCredentials generates artifact push credentials

	- **Description:** Generates push credentials for an artifact.

- **Restrictions:** Only for supported artifactory types.
- **Permissions:** Requires `ARTIFACTS_WRITE` permission.
- **Audit Logging:** Not applicable.
*/
func (a *Client) GenerateArtifactPushCredentials(params *GenerateArtifactPushCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateArtifactPushCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateArtifactPushCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateArtifactPushCredentials",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/ci-cd/pushCredentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateArtifactPushCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateArtifactPushCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generateArtifactPushCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCiCdDetails gets c i c d details

	- **Description:** Retrieves CI/CD details for a specified project name.

- **Restrictions:** Requires existing default artifact routing rule or promotion workflow.
- **Permissions:** None required.
- **Audit Logging:** Not applicable.
*/
func (a *Client) GetCiCdDetails(params *GetCiCdDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCiCdDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCiCdDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCiCdDetails",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/ci-cd/{stackName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCiCdDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCiCdDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCiCdDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RegisterArtifactSaas registers artifact saa s

	- **Description:** Registers a new artifact within the system for SaaS.

- **Restrictions:** Valid artifactory name and consistent registration type required. Blueprint must be CI/CD configured.
- **Permissions:** Requires `ARTIFACTS_WRITE` permission.
- **Audit Logging:** Not applicable.
*/
func (a *Client) RegisterArtifactSaas(params *RegisterArtifactSaasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterArtifactSaasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterArtifactSaasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerArtifactSaas",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/ci-cd/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterArtifactSaasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterArtifactSaasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registerArtifactSaas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	SaveCiCdDetails saves c i c d details

	- **Description:** Saves CI/CD configuration details.

- **Restrictions:** Cannot change registration type after initial configuration.
- **Permissions:** Requires `CI_CD_CONFIGURE` permission.
- **Audit Logging:** This operation is logged for audit purposes.
*/
func (a *Client) SaveCiCdDetails(params *SaveCiCdDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveCiCdDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveCiCdDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "saveCiCdDetails",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/ci-cd",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveCiCdDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveCiCdDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveCiCdDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
