// Code generated by go-swagger; DO NOT EDIT.

package ui_ci_cd_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AttachRuleAndWorkflowUsingPUTReader is a Reader for the AttachRuleAndWorkflowUsingPUT structure.
type AttachRuleAndWorkflowUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AttachRuleAndWorkflowUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAttachRuleAndWorkflowUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewAttachRuleAndWorkflowUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAttachRuleAndWorkflowUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAttachRuleAndWorkflowUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAttachRuleAndWorkflowUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAttachRuleAndWorkflowUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAttachRuleAndWorkflowUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/ci-cd/attach] attachRuleAndWorkflowUsingPUT", response, response.Code())
	}
}

// NewAttachRuleAndWorkflowUsingPUTOK creates a AttachRuleAndWorkflowUsingPUTOK with default headers values
func NewAttachRuleAndWorkflowUsingPUTOK() *AttachRuleAndWorkflowUsingPUTOK {
	return &AttachRuleAndWorkflowUsingPUTOK{}
}

/*
AttachRuleAndWorkflowUsingPUTOK describes a response with status code 200, with default header values.

Rule and workflow attached successfully.
*/
type AttachRuleAndWorkflowUsingPUTOK struct {
}

// IsSuccess returns true when this attach rule and workflow using p u t o k response has a 2xx status code
func (o *AttachRuleAndWorkflowUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this attach rule and workflow using p u t o k response has a 3xx status code
func (o *AttachRuleAndWorkflowUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach rule and workflow using p u t o k response has a 4xx status code
func (o *AttachRuleAndWorkflowUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this attach rule and workflow using p u t o k response has a 5xx status code
func (o *AttachRuleAndWorkflowUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this attach rule and workflow using p u t o k response a status code equal to that given
func (o *AttachRuleAndWorkflowUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the attach rule and workflow using p u t o k response
func (o *AttachRuleAndWorkflowUsingPUTOK) Code() int {
	return 200
}

func (o *AttachRuleAndWorkflowUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowUsingPUTOK", 200)
}

func (o *AttachRuleAndWorkflowUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowUsingPUTOK", 200)
}

func (o *AttachRuleAndWorkflowUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAttachRuleAndWorkflowUsingPUTCreated creates a AttachRuleAndWorkflowUsingPUTCreated with default headers values
func NewAttachRuleAndWorkflowUsingPUTCreated() *AttachRuleAndWorkflowUsingPUTCreated {
	return &AttachRuleAndWorkflowUsingPUTCreated{}
}

/*
AttachRuleAndWorkflowUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type AttachRuleAndWorkflowUsingPUTCreated struct {
}

// IsSuccess returns true when this attach rule and workflow using p u t created response has a 2xx status code
func (o *AttachRuleAndWorkflowUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this attach rule and workflow using p u t created response has a 3xx status code
func (o *AttachRuleAndWorkflowUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach rule and workflow using p u t created response has a 4xx status code
func (o *AttachRuleAndWorkflowUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this attach rule and workflow using p u t created response has a 5xx status code
func (o *AttachRuleAndWorkflowUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this attach rule and workflow using p u t created response a status code equal to that given
func (o *AttachRuleAndWorkflowUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the attach rule and workflow using p u t created response
func (o *AttachRuleAndWorkflowUsingPUTCreated) Code() int {
	return 201
}

func (o *AttachRuleAndWorkflowUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowUsingPUTCreated", 201)
}

func (o *AttachRuleAndWorkflowUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowUsingPUTCreated", 201)
}

func (o *AttachRuleAndWorkflowUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAttachRuleAndWorkflowUsingPUTBadRequest creates a AttachRuleAndWorkflowUsingPUTBadRequest with default headers values
func NewAttachRuleAndWorkflowUsingPUTBadRequest() *AttachRuleAndWorkflowUsingPUTBadRequest {
	return &AttachRuleAndWorkflowUsingPUTBadRequest{}
}

/*
AttachRuleAndWorkflowUsingPUTBadRequest describes a response with status code 400, with default header values.

Invalid input.
*/
type AttachRuleAndWorkflowUsingPUTBadRequest struct {
}

// IsSuccess returns true when this attach rule and workflow using p u t bad request response has a 2xx status code
func (o *AttachRuleAndWorkflowUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach rule and workflow using p u t bad request response has a 3xx status code
func (o *AttachRuleAndWorkflowUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach rule and workflow using p u t bad request response has a 4xx status code
func (o *AttachRuleAndWorkflowUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach rule and workflow using p u t bad request response has a 5xx status code
func (o *AttachRuleAndWorkflowUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this attach rule and workflow using p u t bad request response a status code equal to that given
func (o *AttachRuleAndWorkflowUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the attach rule and workflow using p u t bad request response
func (o *AttachRuleAndWorkflowUsingPUTBadRequest) Code() int {
	return 400
}

func (o *AttachRuleAndWorkflowUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowUsingPUTBadRequest", 400)
}

func (o *AttachRuleAndWorkflowUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowUsingPUTBadRequest", 400)
}

func (o *AttachRuleAndWorkflowUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAttachRuleAndWorkflowUsingPUTUnauthorized creates a AttachRuleAndWorkflowUsingPUTUnauthorized with default headers values
func NewAttachRuleAndWorkflowUsingPUTUnauthorized() *AttachRuleAndWorkflowUsingPUTUnauthorized {
	return &AttachRuleAndWorkflowUsingPUTUnauthorized{}
}

/*
AttachRuleAndWorkflowUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AttachRuleAndWorkflowUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this attach rule and workflow using p u t unauthorized response has a 2xx status code
func (o *AttachRuleAndWorkflowUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach rule and workflow using p u t unauthorized response has a 3xx status code
func (o *AttachRuleAndWorkflowUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach rule and workflow using p u t unauthorized response has a 4xx status code
func (o *AttachRuleAndWorkflowUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach rule and workflow using p u t unauthorized response has a 5xx status code
func (o *AttachRuleAndWorkflowUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this attach rule and workflow using p u t unauthorized response a status code equal to that given
func (o *AttachRuleAndWorkflowUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the attach rule and workflow using p u t unauthorized response
func (o *AttachRuleAndWorkflowUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *AttachRuleAndWorkflowUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowUsingPUTUnauthorized", 401)
}

func (o *AttachRuleAndWorkflowUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowUsingPUTUnauthorized", 401)
}

func (o *AttachRuleAndWorkflowUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAttachRuleAndWorkflowUsingPUTForbidden creates a AttachRuleAndWorkflowUsingPUTForbidden with default headers values
func NewAttachRuleAndWorkflowUsingPUTForbidden() *AttachRuleAndWorkflowUsingPUTForbidden {
	return &AttachRuleAndWorkflowUsingPUTForbidden{}
}

/*
AttachRuleAndWorkflowUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AttachRuleAndWorkflowUsingPUTForbidden struct {
}

// IsSuccess returns true when this attach rule and workflow using p u t forbidden response has a 2xx status code
func (o *AttachRuleAndWorkflowUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach rule and workflow using p u t forbidden response has a 3xx status code
func (o *AttachRuleAndWorkflowUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach rule and workflow using p u t forbidden response has a 4xx status code
func (o *AttachRuleAndWorkflowUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach rule and workflow using p u t forbidden response has a 5xx status code
func (o *AttachRuleAndWorkflowUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this attach rule and workflow using p u t forbidden response a status code equal to that given
func (o *AttachRuleAndWorkflowUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the attach rule and workflow using p u t forbidden response
func (o *AttachRuleAndWorkflowUsingPUTForbidden) Code() int {
	return 403
}

func (o *AttachRuleAndWorkflowUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowUsingPUTForbidden", 403)
}

func (o *AttachRuleAndWorkflowUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowUsingPUTForbidden", 403)
}

func (o *AttachRuleAndWorkflowUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAttachRuleAndWorkflowUsingPUTNotFound creates a AttachRuleAndWorkflowUsingPUTNotFound with default headers values
func NewAttachRuleAndWorkflowUsingPUTNotFound() *AttachRuleAndWorkflowUsingPUTNotFound {
	return &AttachRuleAndWorkflowUsingPUTNotFound{}
}

/*
AttachRuleAndWorkflowUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AttachRuleAndWorkflowUsingPUTNotFound struct {
}

// IsSuccess returns true when this attach rule and workflow using p u t not found response has a 2xx status code
func (o *AttachRuleAndWorkflowUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach rule and workflow using p u t not found response has a 3xx status code
func (o *AttachRuleAndWorkflowUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach rule and workflow using p u t not found response has a 4xx status code
func (o *AttachRuleAndWorkflowUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach rule and workflow using p u t not found response has a 5xx status code
func (o *AttachRuleAndWorkflowUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this attach rule and workflow using p u t not found response a status code equal to that given
func (o *AttachRuleAndWorkflowUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the attach rule and workflow using p u t not found response
func (o *AttachRuleAndWorkflowUsingPUTNotFound) Code() int {
	return 404
}

func (o *AttachRuleAndWorkflowUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowUsingPUTNotFound", 404)
}

func (o *AttachRuleAndWorkflowUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowUsingPUTNotFound", 404)
}

func (o *AttachRuleAndWorkflowUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAttachRuleAndWorkflowUsingPUTInternalServerError creates a AttachRuleAndWorkflowUsingPUTInternalServerError with default headers values
func NewAttachRuleAndWorkflowUsingPUTInternalServerError() *AttachRuleAndWorkflowUsingPUTInternalServerError {
	return &AttachRuleAndWorkflowUsingPUTInternalServerError{}
}

/*
AttachRuleAndWorkflowUsingPUTInternalServerError describes a response with status code 500, with default header values.

Internal server error.
*/
type AttachRuleAndWorkflowUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this attach rule and workflow using p u t internal server error response has a 2xx status code
func (o *AttachRuleAndWorkflowUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach rule and workflow using p u t internal server error response has a 3xx status code
func (o *AttachRuleAndWorkflowUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach rule and workflow using p u t internal server error response has a 4xx status code
func (o *AttachRuleAndWorkflowUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this attach rule and workflow using p u t internal server error response has a 5xx status code
func (o *AttachRuleAndWorkflowUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this attach rule and workflow using p u t internal server error response a status code equal to that given
func (o *AttachRuleAndWorkflowUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the attach rule and workflow using p u t internal server error response
func (o *AttachRuleAndWorkflowUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *AttachRuleAndWorkflowUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowUsingPUTInternalServerError", 500)
}

func (o *AttachRuleAndWorkflowUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowUsingPUTInternalServerError", 500)
}

func (o *AttachRuleAndWorkflowUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
