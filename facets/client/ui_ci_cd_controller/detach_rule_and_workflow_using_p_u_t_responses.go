// Code generated by go-swagger; DO NOT EDIT.

package ui_ci_cd_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DetachRuleAndWorkflowUsingPUTReader is a Reader for the DetachRuleAndWorkflowUsingPUT structure.
type DetachRuleAndWorkflowUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DetachRuleAndWorkflowUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDetachRuleAndWorkflowUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewDetachRuleAndWorkflowUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDetachRuleAndWorkflowUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDetachRuleAndWorkflowUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDetachRuleAndWorkflowUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDetachRuleAndWorkflowUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDetachRuleAndWorkflowUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/ci-cd/detach] detachRuleAndWorkflowUsingPUT", response, response.Code())
	}
}

// NewDetachRuleAndWorkflowUsingPUTOK creates a DetachRuleAndWorkflowUsingPUTOK with default headers values
func NewDetachRuleAndWorkflowUsingPUTOK() *DetachRuleAndWorkflowUsingPUTOK {
	return &DetachRuleAndWorkflowUsingPUTOK{}
}

/*
DetachRuleAndWorkflowUsingPUTOK describes a response with status code 200, with default header values.

Rule and workflow detached successfully.
*/
type DetachRuleAndWorkflowUsingPUTOK struct {
}

// IsSuccess returns true when this detach rule and workflow using p u t o k response has a 2xx status code
func (o *DetachRuleAndWorkflowUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this detach rule and workflow using p u t o k response has a 3xx status code
func (o *DetachRuleAndWorkflowUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach rule and workflow using p u t o k response has a 4xx status code
func (o *DetachRuleAndWorkflowUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this detach rule and workflow using p u t o k response has a 5xx status code
func (o *DetachRuleAndWorkflowUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this detach rule and workflow using p u t o k response a status code equal to that given
func (o *DetachRuleAndWorkflowUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the detach rule and workflow using p u t o k response
func (o *DetachRuleAndWorkflowUsingPUTOK) Code() int {
	return 200
}

func (o *DetachRuleAndWorkflowUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowUsingPUTOK", 200)
}

func (o *DetachRuleAndWorkflowUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowUsingPUTOK", 200)
}

func (o *DetachRuleAndWorkflowUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDetachRuleAndWorkflowUsingPUTCreated creates a DetachRuleAndWorkflowUsingPUTCreated with default headers values
func NewDetachRuleAndWorkflowUsingPUTCreated() *DetachRuleAndWorkflowUsingPUTCreated {
	return &DetachRuleAndWorkflowUsingPUTCreated{}
}

/*
DetachRuleAndWorkflowUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type DetachRuleAndWorkflowUsingPUTCreated struct {
}

// IsSuccess returns true when this detach rule and workflow using p u t created response has a 2xx status code
func (o *DetachRuleAndWorkflowUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this detach rule and workflow using p u t created response has a 3xx status code
func (o *DetachRuleAndWorkflowUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach rule and workflow using p u t created response has a 4xx status code
func (o *DetachRuleAndWorkflowUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this detach rule and workflow using p u t created response has a 5xx status code
func (o *DetachRuleAndWorkflowUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this detach rule and workflow using p u t created response a status code equal to that given
func (o *DetachRuleAndWorkflowUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the detach rule and workflow using p u t created response
func (o *DetachRuleAndWorkflowUsingPUTCreated) Code() int {
	return 201
}

func (o *DetachRuleAndWorkflowUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowUsingPUTCreated", 201)
}

func (o *DetachRuleAndWorkflowUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowUsingPUTCreated", 201)
}

func (o *DetachRuleAndWorkflowUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDetachRuleAndWorkflowUsingPUTBadRequest creates a DetachRuleAndWorkflowUsingPUTBadRequest with default headers values
func NewDetachRuleAndWorkflowUsingPUTBadRequest() *DetachRuleAndWorkflowUsingPUTBadRequest {
	return &DetachRuleAndWorkflowUsingPUTBadRequest{}
}

/*
DetachRuleAndWorkflowUsingPUTBadRequest describes a response with status code 400, with default header values.

Invalid input.
*/
type DetachRuleAndWorkflowUsingPUTBadRequest struct {
}

// IsSuccess returns true when this detach rule and workflow using p u t bad request response has a 2xx status code
func (o *DetachRuleAndWorkflowUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detach rule and workflow using p u t bad request response has a 3xx status code
func (o *DetachRuleAndWorkflowUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach rule and workflow using p u t bad request response has a 4xx status code
func (o *DetachRuleAndWorkflowUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this detach rule and workflow using p u t bad request response has a 5xx status code
func (o *DetachRuleAndWorkflowUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this detach rule and workflow using p u t bad request response a status code equal to that given
func (o *DetachRuleAndWorkflowUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the detach rule and workflow using p u t bad request response
func (o *DetachRuleAndWorkflowUsingPUTBadRequest) Code() int {
	return 400
}

func (o *DetachRuleAndWorkflowUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowUsingPUTBadRequest", 400)
}

func (o *DetachRuleAndWorkflowUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowUsingPUTBadRequest", 400)
}

func (o *DetachRuleAndWorkflowUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDetachRuleAndWorkflowUsingPUTUnauthorized creates a DetachRuleAndWorkflowUsingPUTUnauthorized with default headers values
func NewDetachRuleAndWorkflowUsingPUTUnauthorized() *DetachRuleAndWorkflowUsingPUTUnauthorized {
	return &DetachRuleAndWorkflowUsingPUTUnauthorized{}
}

/*
DetachRuleAndWorkflowUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DetachRuleAndWorkflowUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this detach rule and workflow using p u t unauthorized response has a 2xx status code
func (o *DetachRuleAndWorkflowUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detach rule and workflow using p u t unauthorized response has a 3xx status code
func (o *DetachRuleAndWorkflowUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach rule and workflow using p u t unauthorized response has a 4xx status code
func (o *DetachRuleAndWorkflowUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this detach rule and workflow using p u t unauthorized response has a 5xx status code
func (o *DetachRuleAndWorkflowUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this detach rule and workflow using p u t unauthorized response a status code equal to that given
func (o *DetachRuleAndWorkflowUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the detach rule and workflow using p u t unauthorized response
func (o *DetachRuleAndWorkflowUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *DetachRuleAndWorkflowUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowUsingPUTUnauthorized", 401)
}

func (o *DetachRuleAndWorkflowUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowUsingPUTUnauthorized", 401)
}

func (o *DetachRuleAndWorkflowUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDetachRuleAndWorkflowUsingPUTForbidden creates a DetachRuleAndWorkflowUsingPUTForbidden with default headers values
func NewDetachRuleAndWorkflowUsingPUTForbidden() *DetachRuleAndWorkflowUsingPUTForbidden {
	return &DetachRuleAndWorkflowUsingPUTForbidden{}
}

/*
DetachRuleAndWorkflowUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DetachRuleAndWorkflowUsingPUTForbidden struct {
}

// IsSuccess returns true when this detach rule and workflow using p u t forbidden response has a 2xx status code
func (o *DetachRuleAndWorkflowUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detach rule and workflow using p u t forbidden response has a 3xx status code
func (o *DetachRuleAndWorkflowUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach rule and workflow using p u t forbidden response has a 4xx status code
func (o *DetachRuleAndWorkflowUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this detach rule and workflow using p u t forbidden response has a 5xx status code
func (o *DetachRuleAndWorkflowUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this detach rule and workflow using p u t forbidden response a status code equal to that given
func (o *DetachRuleAndWorkflowUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the detach rule and workflow using p u t forbidden response
func (o *DetachRuleAndWorkflowUsingPUTForbidden) Code() int {
	return 403
}

func (o *DetachRuleAndWorkflowUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowUsingPUTForbidden", 403)
}

func (o *DetachRuleAndWorkflowUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowUsingPUTForbidden", 403)
}

func (o *DetachRuleAndWorkflowUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDetachRuleAndWorkflowUsingPUTNotFound creates a DetachRuleAndWorkflowUsingPUTNotFound with default headers values
func NewDetachRuleAndWorkflowUsingPUTNotFound() *DetachRuleAndWorkflowUsingPUTNotFound {
	return &DetachRuleAndWorkflowUsingPUTNotFound{}
}

/*
DetachRuleAndWorkflowUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DetachRuleAndWorkflowUsingPUTNotFound struct {
}

// IsSuccess returns true when this detach rule and workflow using p u t not found response has a 2xx status code
func (o *DetachRuleAndWorkflowUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detach rule and workflow using p u t not found response has a 3xx status code
func (o *DetachRuleAndWorkflowUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach rule and workflow using p u t not found response has a 4xx status code
func (o *DetachRuleAndWorkflowUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this detach rule and workflow using p u t not found response has a 5xx status code
func (o *DetachRuleAndWorkflowUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this detach rule and workflow using p u t not found response a status code equal to that given
func (o *DetachRuleAndWorkflowUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the detach rule and workflow using p u t not found response
func (o *DetachRuleAndWorkflowUsingPUTNotFound) Code() int {
	return 404
}

func (o *DetachRuleAndWorkflowUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowUsingPUTNotFound", 404)
}

func (o *DetachRuleAndWorkflowUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowUsingPUTNotFound", 404)
}

func (o *DetachRuleAndWorkflowUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDetachRuleAndWorkflowUsingPUTInternalServerError creates a DetachRuleAndWorkflowUsingPUTInternalServerError with default headers values
func NewDetachRuleAndWorkflowUsingPUTInternalServerError() *DetachRuleAndWorkflowUsingPUTInternalServerError {
	return &DetachRuleAndWorkflowUsingPUTInternalServerError{}
}

/*
DetachRuleAndWorkflowUsingPUTInternalServerError describes a response with status code 500, with default header values.

Internal server error.
*/
type DetachRuleAndWorkflowUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this detach rule and workflow using p u t internal server error response has a 2xx status code
func (o *DetachRuleAndWorkflowUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detach rule and workflow using p u t internal server error response has a 3xx status code
func (o *DetachRuleAndWorkflowUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach rule and workflow using p u t internal server error response has a 4xx status code
func (o *DetachRuleAndWorkflowUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this detach rule and workflow using p u t internal server error response has a 5xx status code
func (o *DetachRuleAndWorkflowUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this detach rule and workflow using p u t internal server error response a status code equal to that given
func (o *DetachRuleAndWorkflowUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the detach rule and workflow using p u t internal server error response
func (o *DetachRuleAndWorkflowUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *DetachRuleAndWorkflowUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowUsingPUTInternalServerError", 500)
}

func (o *DetachRuleAndWorkflowUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowUsingPUTInternalServerError", 500)
}

func (o *DetachRuleAndWorkflowUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
