// Code generated by go-swagger; DO NOT EDIT.

package ui_ci_cd_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DetachRuleAndWorkflowReader is a Reader for the DetachRuleAndWorkflow structure.
type DetachRuleAndWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DetachRuleAndWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDetachRuleAndWorkflowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDetachRuleAndWorkflowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDetachRuleAndWorkflowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDetachRuleAndWorkflowMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDetachRuleAndWorkflowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/ci-cd/detach] detachRuleAndWorkflow", response, response.Code())
	}
}

// NewDetachRuleAndWorkflowOK creates a DetachRuleAndWorkflowOK with default headers values
func NewDetachRuleAndWorkflowOK() *DetachRuleAndWorkflowOK {
	return &DetachRuleAndWorkflowOK{}
}

/*
DetachRuleAndWorkflowOK describes a response with status code 200, with default header values.

Rule and workflow detached successfully.
*/
type DetachRuleAndWorkflowOK struct {
}

// IsSuccess returns true when this detach rule and workflow o k response has a 2xx status code
func (o *DetachRuleAndWorkflowOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this detach rule and workflow o k response has a 3xx status code
func (o *DetachRuleAndWorkflowOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach rule and workflow o k response has a 4xx status code
func (o *DetachRuleAndWorkflowOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this detach rule and workflow o k response has a 5xx status code
func (o *DetachRuleAndWorkflowOK) IsServerError() bool {
	return false
}

// IsCode returns true when this detach rule and workflow o k response a status code equal to that given
func (o *DetachRuleAndWorkflowOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the detach rule and workflow o k response
func (o *DetachRuleAndWorkflowOK) Code() int {
	return 200
}

func (o *DetachRuleAndWorkflowOK) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowOK", 200)
}

func (o *DetachRuleAndWorkflowOK) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowOK", 200)
}

func (o *DetachRuleAndWorkflowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDetachRuleAndWorkflowBadRequest creates a DetachRuleAndWorkflowBadRequest with default headers values
func NewDetachRuleAndWorkflowBadRequest() *DetachRuleAndWorkflowBadRequest {
	return &DetachRuleAndWorkflowBadRequest{}
}

/*
DetachRuleAndWorkflowBadRequest describes a response with status code 400, with default header values.

Invalid input.
*/
type DetachRuleAndWorkflowBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this detach rule and workflow bad request response has a 2xx status code
func (o *DetachRuleAndWorkflowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detach rule and workflow bad request response has a 3xx status code
func (o *DetachRuleAndWorkflowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach rule and workflow bad request response has a 4xx status code
func (o *DetachRuleAndWorkflowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this detach rule and workflow bad request response has a 5xx status code
func (o *DetachRuleAndWorkflowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this detach rule and workflow bad request response a status code equal to that given
func (o *DetachRuleAndWorkflowBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the detach rule and workflow bad request response
func (o *DetachRuleAndWorkflowBadRequest) Code() int {
	return 400
}

func (o *DetachRuleAndWorkflowBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowBadRequest %s", 400, payload)
}

func (o *DetachRuleAndWorkflowBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowBadRequest %s", 400, payload)
}

func (o *DetachRuleAndWorkflowBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DetachRuleAndWorkflowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetachRuleAndWorkflowNotFound creates a DetachRuleAndWorkflowNotFound with default headers values
func NewDetachRuleAndWorkflowNotFound() *DetachRuleAndWorkflowNotFound {
	return &DetachRuleAndWorkflowNotFound{}
}

/*
DetachRuleAndWorkflowNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DetachRuleAndWorkflowNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this detach rule and workflow not found response has a 2xx status code
func (o *DetachRuleAndWorkflowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detach rule and workflow not found response has a 3xx status code
func (o *DetachRuleAndWorkflowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach rule and workflow not found response has a 4xx status code
func (o *DetachRuleAndWorkflowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this detach rule and workflow not found response has a 5xx status code
func (o *DetachRuleAndWorkflowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this detach rule and workflow not found response a status code equal to that given
func (o *DetachRuleAndWorkflowNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the detach rule and workflow not found response
func (o *DetachRuleAndWorkflowNotFound) Code() int {
	return 404
}

func (o *DetachRuleAndWorkflowNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowNotFound %s", 404, payload)
}

func (o *DetachRuleAndWorkflowNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowNotFound %s", 404, payload)
}

func (o *DetachRuleAndWorkflowNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DetachRuleAndWorkflowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetachRuleAndWorkflowMethodNotAllowed creates a DetachRuleAndWorkflowMethodNotAllowed with default headers values
func NewDetachRuleAndWorkflowMethodNotAllowed() *DetachRuleAndWorkflowMethodNotAllowed {
	return &DetachRuleAndWorkflowMethodNotAllowed{}
}

/*
DetachRuleAndWorkflowMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DetachRuleAndWorkflowMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this detach rule and workflow method not allowed response has a 2xx status code
func (o *DetachRuleAndWorkflowMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detach rule and workflow method not allowed response has a 3xx status code
func (o *DetachRuleAndWorkflowMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach rule and workflow method not allowed response has a 4xx status code
func (o *DetachRuleAndWorkflowMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this detach rule and workflow method not allowed response has a 5xx status code
func (o *DetachRuleAndWorkflowMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this detach rule and workflow method not allowed response a status code equal to that given
func (o *DetachRuleAndWorkflowMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the detach rule and workflow method not allowed response
func (o *DetachRuleAndWorkflowMethodNotAllowed) Code() int {
	return 405
}

func (o *DetachRuleAndWorkflowMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowMethodNotAllowed %s", 405, payload)
}

func (o *DetachRuleAndWorkflowMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowMethodNotAllowed %s", 405, payload)
}

func (o *DetachRuleAndWorkflowMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DetachRuleAndWorkflowMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetachRuleAndWorkflowInternalServerError creates a DetachRuleAndWorkflowInternalServerError with default headers values
func NewDetachRuleAndWorkflowInternalServerError() *DetachRuleAndWorkflowInternalServerError {
	return &DetachRuleAndWorkflowInternalServerError{}
}

/*
DetachRuleAndWorkflowInternalServerError describes a response with status code 500, with default header values.

Internal server error.
*/
type DetachRuleAndWorkflowInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this detach rule and workflow internal server error response has a 2xx status code
func (o *DetachRuleAndWorkflowInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detach rule and workflow internal server error response has a 3xx status code
func (o *DetachRuleAndWorkflowInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach rule and workflow internal server error response has a 4xx status code
func (o *DetachRuleAndWorkflowInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this detach rule and workflow internal server error response has a 5xx status code
func (o *DetachRuleAndWorkflowInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this detach rule and workflow internal server error response a status code equal to that given
func (o *DetachRuleAndWorkflowInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the detach rule and workflow internal server error response
func (o *DetachRuleAndWorkflowInternalServerError) Code() int {
	return 500
}

func (o *DetachRuleAndWorkflowInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowInternalServerError %s", 500, payload)
}

func (o *DetachRuleAndWorkflowInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/detach][%d] detachRuleAndWorkflowInternalServerError %s", 500, payload)
}

func (o *DetachRuleAndWorkflowInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DetachRuleAndWorkflowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
