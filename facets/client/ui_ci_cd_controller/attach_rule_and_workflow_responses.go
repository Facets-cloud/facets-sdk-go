// Code generated by go-swagger; DO NOT EDIT.

package ui_ci_cd_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// AttachRuleAndWorkflowReader is a Reader for the AttachRuleAndWorkflow structure.
type AttachRuleAndWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AttachRuleAndWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAttachRuleAndWorkflowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAttachRuleAndWorkflowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAttachRuleAndWorkflowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewAttachRuleAndWorkflowMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAttachRuleAndWorkflowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/ci-cd/attach] attachRuleAndWorkflow", response, response.Code())
	}
}

// NewAttachRuleAndWorkflowOK creates a AttachRuleAndWorkflowOK with default headers values
func NewAttachRuleAndWorkflowOK() *AttachRuleAndWorkflowOK {
	return &AttachRuleAndWorkflowOK{}
}

/*
AttachRuleAndWorkflowOK describes a response with status code 200, with default header values.

Rule and workflow attached successfully.
*/
type AttachRuleAndWorkflowOK struct {
}

// IsSuccess returns true when this attach rule and workflow o k response has a 2xx status code
func (o *AttachRuleAndWorkflowOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this attach rule and workflow o k response has a 3xx status code
func (o *AttachRuleAndWorkflowOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach rule and workflow o k response has a 4xx status code
func (o *AttachRuleAndWorkflowOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this attach rule and workflow o k response has a 5xx status code
func (o *AttachRuleAndWorkflowOK) IsServerError() bool {
	return false
}

// IsCode returns true when this attach rule and workflow o k response a status code equal to that given
func (o *AttachRuleAndWorkflowOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the attach rule and workflow o k response
func (o *AttachRuleAndWorkflowOK) Code() int {
	return 200
}

func (o *AttachRuleAndWorkflowOK) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowOK", 200)
}

func (o *AttachRuleAndWorkflowOK) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowOK", 200)
}

func (o *AttachRuleAndWorkflowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAttachRuleAndWorkflowBadRequest creates a AttachRuleAndWorkflowBadRequest with default headers values
func NewAttachRuleAndWorkflowBadRequest() *AttachRuleAndWorkflowBadRequest {
	return &AttachRuleAndWorkflowBadRequest{}
}

/*
AttachRuleAndWorkflowBadRequest describes a response with status code 400, with default header values.

Invalid input.
*/
type AttachRuleAndWorkflowBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this attach rule and workflow bad request response has a 2xx status code
func (o *AttachRuleAndWorkflowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach rule and workflow bad request response has a 3xx status code
func (o *AttachRuleAndWorkflowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach rule and workflow bad request response has a 4xx status code
func (o *AttachRuleAndWorkflowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach rule and workflow bad request response has a 5xx status code
func (o *AttachRuleAndWorkflowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this attach rule and workflow bad request response a status code equal to that given
func (o *AttachRuleAndWorkflowBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the attach rule and workflow bad request response
func (o *AttachRuleAndWorkflowBadRequest) Code() int {
	return 400
}

func (o *AttachRuleAndWorkflowBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowBadRequest %s", 400, payload)
}

func (o *AttachRuleAndWorkflowBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowBadRequest %s", 400, payload)
}

func (o *AttachRuleAndWorkflowBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AttachRuleAndWorkflowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachRuleAndWorkflowNotFound creates a AttachRuleAndWorkflowNotFound with default headers values
func NewAttachRuleAndWorkflowNotFound() *AttachRuleAndWorkflowNotFound {
	return &AttachRuleAndWorkflowNotFound{}
}

/*
AttachRuleAndWorkflowNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AttachRuleAndWorkflowNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this attach rule and workflow not found response has a 2xx status code
func (o *AttachRuleAndWorkflowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach rule and workflow not found response has a 3xx status code
func (o *AttachRuleAndWorkflowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach rule and workflow not found response has a 4xx status code
func (o *AttachRuleAndWorkflowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach rule and workflow not found response has a 5xx status code
func (o *AttachRuleAndWorkflowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this attach rule and workflow not found response a status code equal to that given
func (o *AttachRuleAndWorkflowNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the attach rule and workflow not found response
func (o *AttachRuleAndWorkflowNotFound) Code() int {
	return 404
}

func (o *AttachRuleAndWorkflowNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowNotFound %s", 404, payload)
}

func (o *AttachRuleAndWorkflowNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowNotFound %s", 404, payload)
}

func (o *AttachRuleAndWorkflowNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AttachRuleAndWorkflowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachRuleAndWorkflowMethodNotAllowed creates a AttachRuleAndWorkflowMethodNotAllowed with default headers values
func NewAttachRuleAndWorkflowMethodNotAllowed() *AttachRuleAndWorkflowMethodNotAllowed {
	return &AttachRuleAndWorkflowMethodNotAllowed{}
}

/*
AttachRuleAndWorkflowMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type AttachRuleAndWorkflowMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this attach rule and workflow method not allowed response has a 2xx status code
func (o *AttachRuleAndWorkflowMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach rule and workflow method not allowed response has a 3xx status code
func (o *AttachRuleAndWorkflowMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach rule and workflow method not allowed response has a 4xx status code
func (o *AttachRuleAndWorkflowMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this attach rule and workflow method not allowed response has a 5xx status code
func (o *AttachRuleAndWorkflowMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this attach rule and workflow method not allowed response a status code equal to that given
func (o *AttachRuleAndWorkflowMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the attach rule and workflow method not allowed response
func (o *AttachRuleAndWorkflowMethodNotAllowed) Code() int {
	return 405
}

func (o *AttachRuleAndWorkflowMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowMethodNotAllowed %s", 405, payload)
}

func (o *AttachRuleAndWorkflowMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowMethodNotAllowed %s", 405, payload)
}

func (o *AttachRuleAndWorkflowMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AttachRuleAndWorkflowMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachRuleAndWorkflowInternalServerError creates a AttachRuleAndWorkflowInternalServerError with default headers values
func NewAttachRuleAndWorkflowInternalServerError() *AttachRuleAndWorkflowInternalServerError {
	return &AttachRuleAndWorkflowInternalServerError{}
}

/*
AttachRuleAndWorkflowInternalServerError describes a response with status code 500, with default header values.

Internal server error.
*/
type AttachRuleAndWorkflowInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this attach rule and workflow internal server error response has a 2xx status code
func (o *AttachRuleAndWorkflowInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this attach rule and workflow internal server error response has a 3xx status code
func (o *AttachRuleAndWorkflowInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this attach rule and workflow internal server error response has a 4xx status code
func (o *AttachRuleAndWorkflowInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this attach rule and workflow internal server error response has a 5xx status code
func (o *AttachRuleAndWorkflowInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this attach rule and workflow internal server error response a status code equal to that given
func (o *AttachRuleAndWorkflowInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the attach rule and workflow internal server error response
func (o *AttachRuleAndWorkflowInternalServerError) Code() int {
	return 500
}

func (o *AttachRuleAndWorkflowInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowInternalServerError %s", 500, payload)
}

func (o *AttachRuleAndWorkflowInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/ci-cd/attach][%d] attachRuleAndWorkflowInternalServerError %s", 500, payload)
}

func (o *AttachRuleAndWorkflowInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AttachRuleAndWorkflowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
