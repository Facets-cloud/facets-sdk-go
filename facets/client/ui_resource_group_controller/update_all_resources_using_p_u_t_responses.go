// Code generated by go-swagger; DO NOT EDIT.

package ui_resource_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateAllResourcesUsingPUTReader is a Reader for the UpdateAllResourcesUsingPUT structure.
type UpdateAllResourcesUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAllResourcesUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAllResourcesUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateAllResourcesUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateAllResourcesUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAllResourcesUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAllResourcesUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/resource-groups/{resourceGroupId}/resources] updateAllResourcesUsingPUT", response, response.Code())
	}
}

// NewUpdateAllResourcesUsingPUTOK creates a UpdateAllResourcesUsingPUTOK with default headers values
func NewUpdateAllResourcesUsingPUTOK() *UpdateAllResourcesUsingPUTOK {
	return &UpdateAllResourcesUsingPUTOK{}
}

/*
UpdateAllResourcesUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateAllResourcesUsingPUTOK struct {
	Payload *models.ResourceGroup
}

// IsSuccess returns true when this update all resources using p u t o k response has a 2xx status code
func (o *UpdateAllResourcesUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update all resources using p u t o k response has a 3xx status code
func (o *UpdateAllResourcesUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update all resources using p u t o k response has a 4xx status code
func (o *UpdateAllResourcesUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update all resources using p u t o k response has a 5xx status code
func (o *UpdateAllResourcesUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update all resources using p u t o k response a status code equal to that given
func (o *UpdateAllResourcesUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update all resources using p u t o k response
func (o *UpdateAllResourcesUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateAllResourcesUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateAllResourcesUsingPUTOK %s", 200, payload)
}

func (o *UpdateAllResourcesUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateAllResourcesUsingPUTOK %s", 200, payload)
}

func (o *UpdateAllResourcesUsingPUTOK) GetPayload() *models.ResourceGroup {
	return o.Payload
}

func (o *UpdateAllResourcesUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResourceGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAllResourcesUsingPUTCreated creates a UpdateAllResourcesUsingPUTCreated with default headers values
func NewUpdateAllResourcesUsingPUTCreated() *UpdateAllResourcesUsingPUTCreated {
	return &UpdateAllResourcesUsingPUTCreated{}
}

/*
UpdateAllResourcesUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateAllResourcesUsingPUTCreated struct {
}

// IsSuccess returns true when this update all resources using p u t created response has a 2xx status code
func (o *UpdateAllResourcesUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update all resources using p u t created response has a 3xx status code
func (o *UpdateAllResourcesUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update all resources using p u t created response has a 4xx status code
func (o *UpdateAllResourcesUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update all resources using p u t created response has a 5xx status code
func (o *UpdateAllResourcesUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update all resources using p u t created response a status code equal to that given
func (o *UpdateAllResourcesUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update all resources using p u t created response
func (o *UpdateAllResourcesUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateAllResourcesUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateAllResourcesUsingPUTCreated", 201)
}

func (o *UpdateAllResourcesUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateAllResourcesUsingPUTCreated", 201)
}

func (o *UpdateAllResourcesUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAllResourcesUsingPUTUnauthorized creates a UpdateAllResourcesUsingPUTUnauthorized with default headers values
func NewUpdateAllResourcesUsingPUTUnauthorized() *UpdateAllResourcesUsingPUTUnauthorized {
	return &UpdateAllResourcesUsingPUTUnauthorized{}
}

/*
UpdateAllResourcesUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateAllResourcesUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update all resources using p u t unauthorized response has a 2xx status code
func (o *UpdateAllResourcesUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update all resources using p u t unauthorized response has a 3xx status code
func (o *UpdateAllResourcesUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update all resources using p u t unauthorized response has a 4xx status code
func (o *UpdateAllResourcesUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update all resources using p u t unauthorized response has a 5xx status code
func (o *UpdateAllResourcesUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update all resources using p u t unauthorized response a status code equal to that given
func (o *UpdateAllResourcesUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update all resources using p u t unauthorized response
func (o *UpdateAllResourcesUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateAllResourcesUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateAllResourcesUsingPUTUnauthorized", 401)
}

func (o *UpdateAllResourcesUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateAllResourcesUsingPUTUnauthorized", 401)
}

func (o *UpdateAllResourcesUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAllResourcesUsingPUTForbidden creates a UpdateAllResourcesUsingPUTForbidden with default headers values
func NewUpdateAllResourcesUsingPUTForbidden() *UpdateAllResourcesUsingPUTForbidden {
	return &UpdateAllResourcesUsingPUTForbidden{}
}

/*
UpdateAllResourcesUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateAllResourcesUsingPUTForbidden struct {
}

// IsSuccess returns true when this update all resources using p u t forbidden response has a 2xx status code
func (o *UpdateAllResourcesUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update all resources using p u t forbidden response has a 3xx status code
func (o *UpdateAllResourcesUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update all resources using p u t forbidden response has a 4xx status code
func (o *UpdateAllResourcesUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update all resources using p u t forbidden response has a 5xx status code
func (o *UpdateAllResourcesUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update all resources using p u t forbidden response a status code equal to that given
func (o *UpdateAllResourcesUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update all resources using p u t forbidden response
func (o *UpdateAllResourcesUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateAllResourcesUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateAllResourcesUsingPUTForbidden", 403)
}

func (o *UpdateAllResourcesUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateAllResourcesUsingPUTForbidden", 403)
}

func (o *UpdateAllResourcesUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAllResourcesUsingPUTNotFound creates a UpdateAllResourcesUsingPUTNotFound with default headers values
func NewUpdateAllResourcesUsingPUTNotFound() *UpdateAllResourcesUsingPUTNotFound {
	return &UpdateAllResourcesUsingPUTNotFound{}
}

/*
UpdateAllResourcesUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateAllResourcesUsingPUTNotFound struct {
}

// IsSuccess returns true when this update all resources using p u t not found response has a 2xx status code
func (o *UpdateAllResourcesUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update all resources using p u t not found response has a 3xx status code
func (o *UpdateAllResourcesUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update all resources using p u t not found response has a 4xx status code
func (o *UpdateAllResourcesUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update all resources using p u t not found response has a 5xx status code
func (o *UpdateAllResourcesUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update all resources using p u t not found response a status code equal to that given
func (o *UpdateAllResourcesUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update all resources using p u t not found response
func (o *UpdateAllResourcesUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateAllResourcesUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateAllResourcesUsingPUTNotFound", 404)
}

func (o *UpdateAllResourcesUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateAllResourcesUsingPUTNotFound", 404)
}

func (o *UpdateAllResourcesUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
