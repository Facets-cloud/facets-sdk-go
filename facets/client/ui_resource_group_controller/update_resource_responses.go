// Code generated by go-swagger; DO NOT EDIT.

package ui_resource_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateResourceReader is a Reader for the UpdateResource structure.
type UpdateResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateResourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateResourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateResourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateResourceMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateResourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources] updateResource", response, response.Code())
	}
}

// NewUpdateResourceOK creates a UpdateResourceOK with default headers values
func NewUpdateResourceOK() *UpdateResourceOK {
	return &UpdateResourceOK{}
}

/*
UpdateResourceOK describes a response with status code 200, with default header values.

OK
*/
type UpdateResourceOK struct {
	Payload *models.ResourceGroup
}

// IsSuccess returns true when this update resource o k response has a 2xx status code
func (o *UpdateResourceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update resource o k response has a 3xx status code
func (o *UpdateResourceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update resource o k response has a 4xx status code
func (o *UpdateResourceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update resource o k response has a 5xx status code
func (o *UpdateResourceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update resource o k response a status code equal to that given
func (o *UpdateResourceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update resource o k response
func (o *UpdateResourceOK) Code() int {
	return 200
}

func (o *UpdateResourceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceOK %s", 200, payload)
}

func (o *UpdateResourceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceOK %s", 200, payload)
}

func (o *UpdateResourceOK) GetPayload() *models.ResourceGroup {
	return o.Payload
}

func (o *UpdateResourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResourceGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateResourceBadRequest creates a UpdateResourceBadRequest with default headers values
func NewUpdateResourceBadRequest() *UpdateResourceBadRequest {
	return &UpdateResourceBadRequest{}
}

/*
UpdateResourceBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateResourceBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update resource bad request response has a 2xx status code
func (o *UpdateResourceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update resource bad request response has a 3xx status code
func (o *UpdateResourceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update resource bad request response has a 4xx status code
func (o *UpdateResourceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update resource bad request response has a 5xx status code
func (o *UpdateResourceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update resource bad request response a status code equal to that given
func (o *UpdateResourceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update resource bad request response
func (o *UpdateResourceBadRequest) Code() int {
	return 400
}

func (o *UpdateResourceBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceBadRequest %s", 400, payload)
}

func (o *UpdateResourceBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceBadRequest %s", 400, payload)
}

func (o *UpdateResourceBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateResourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateResourceNotFound creates a UpdateResourceNotFound with default headers values
func NewUpdateResourceNotFound() *UpdateResourceNotFound {
	return &UpdateResourceNotFound{}
}

/*
UpdateResourceNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateResourceNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update resource not found response has a 2xx status code
func (o *UpdateResourceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update resource not found response has a 3xx status code
func (o *UpdateResourceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update resource not found response has a 4xx status code
func (o *UpdateResourceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update resource not found response has a 5xx status code
func (o *UpdateResourceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update resource not found response a status code equal to that given
func (o *UpdateResourceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update resource not found response
func (o *UpdateResourceNotFound) Code() int {
	return 404
}

func (o *UpdateResourceNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceNotFound %s", 404, payload)
}

func (o *UpdateResourceNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceNotFound %s", 404, payload)
}

func (o *UpdateResourceNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateResourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateResourceMethodNotAllowed creates a UpdateResourceMethodNotAllowed with default headers values
func NewUpdateResourceMethodNotAllowed() *UpdateResourceMethodNotAllowed {
	return &UpdateResourceMethodNotAllowed{}
}

/*
UpdateResourceMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateResourceMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update resource method not allowed response has a 2xx status code
func (o *UpdateResourceMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update resource method not allowed response has a 3xx status code
func (o *UpdateResourceMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update resource method not allowed response has a 4xx status code
func (o *UpdateResourceMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update resource method not allowed response has a 5xx status code
func (o *UpdateResourceMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update resource method not allowed response a status code equal to that given
func (o *UpdateResourceMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update resource method not allowed response
func (o *UpdateResourceMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateResourceMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceMethodNotAllowed %s", 405, payload)
}

func (o *UpdateResourceMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceMethodNotAllowed %s", 405, payload)
}

func (o *UpdateResourceMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateResourceMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateResourceInternalServerError creates a UpdateResourceInternalServerError with default headers values
func NewUpdateResourceInternalServerError() *UpdateResourceInternalServerError {
	return &UpdateResourceInternalServerError{}
}

/*
UpdateResourceInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateResourceInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update resource internal server error response has a 2xx status code
func (o *UpdateResourceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update resource internal server error response has a 3xx status code
func (o *UpdateResourceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update resource internal server error response has a 4xx status code
func (o *UpdateResourceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update resource internal server error response has a 5xx status code
func (o *UpdateResourceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update resource internal server error response a status code equal to that given
func (o *UpdateResourceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update resource internal server error response
func (o *UpdateResourceInternalServerError) Code() int {
	return 500
}

func (o *UpdateResourceInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceInternalServerError %s", 500, payload)
}

func (o *UpdateResourceInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceInternalServerError %s", 500, payload)
}

func (o *UpdateResourceInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateResourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
