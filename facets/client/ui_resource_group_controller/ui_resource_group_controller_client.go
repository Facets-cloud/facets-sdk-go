// Code generated by go-swagger; DO NOT EDIT.

package ui_resource_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui resource group controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui resource group controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui resource group controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui resource group controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUsingPOST(params *CreateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUsingPOSTOK, *CreateUsingPOSTCreated, error)

	DeleteUsingDELETE1(params *DeleteUsingDELETE1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUsingDELETE1OK, *DeleteUsingDELETE1NoContent, error)

	FindAllUsingGET(params *FindAllUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAllUsingGETOK, error)

	GetResourceGroupUsingGET(params *GetResourceGroupUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupUsingGETOK, error)

	GetResourceGroupsForSessionUserUsingGET(params *GetResourceGroupsForSessionUserUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupsForSessionUserUsingGETOK, error)

	UpdateAllResourcesUsingPUT(params *UpdateAllResourcesUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAllResourcesUsingPUTOK, *UpdateAllResourcesUsingPUTCreated, error)

	UpdateResourceUsingPATCH(params *UpdateResourceUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateResourceUsingPATCHOK, *UpdateResourceUsingPATCHNoContent, error)

	UpdateUsingPUT1(params *UpdateUsingPUT1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUsingPUT1OK, *UpdateUsingPUT1Created, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateUsingPOST creates
*/
func (a *Client) CreateUsingPOST(params *CreateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUsingPOSTOK, *CreateUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/resource-groups",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateUsingPOSTOK:
		return value, nil, nil
	case *CreateUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_resource_group_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUsingDELETE1 deletes
*/
func (a *Client) DeleteUsingDELETE1(params *DeleteUsingDELETE1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUsingDELETE1OK, *DeleteUsingDELETE1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/resource-groups/{resourceGroupId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUsingDELETE1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteUsingDELETE1OK:
		return value, nil, nil
	case *DeleteUsingDELETE1NoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_resource_group_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindAllUsingGET finds all
*/
func (a *Client) FindAllUsingGET(params *FindAllUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAllUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindAllUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findAllUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/resource-groups",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindAllUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindAllUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findAllUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceGroupUsingGET gets resource group
*/
func (a *Client) GetResourceGroupUsingGET(params *GetResourceGroupUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceGroupUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceGroupUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/resource-groups/{resourceGroupId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceGroupUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceGroupUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceGroupUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceGroupsForSessionUserUsingGET gets resource groups for session user
*/
func (a *Client) GetResourceGroupsForSessionUserUsingGET(params *GetResourceGroupsForSessionUserUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupsForSessionUserUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceGroupsForSessionUserUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceGroupsForSessionUserUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/resource-groups/me",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceGroupsForSessionUserUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceGroupsForSessionUserUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceGroupsForSessionUserUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAllResourcesUsingPUT updates all resources
*/
func (a *Client) UpdateAllResourcesUsingPUT(params *UpdateAllResourcesUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAllResourcesUsingPUTOK, *UpdateAllResourcesUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAllResourcesUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAllResourcesUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/resource-groups/{resourceGroupId}/resources",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAllResourcesUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAllResourcesUsingPUTOK:
		return value, nil, nil
	case *UpdateAllResourcesUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_resource_group_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateResourceUsingPATCH updates resource
*/
func (a *Client) UpdateResourceUsingPATCH(params *UpdateResourceUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateResourceUsingPATCHOK, *UpdateResourceUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateResourceUsingPATCHParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateResourceUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/cc-ui/v1/resource-groups/{resourceGroupId}/resources",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateResourceUsingPATCHReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateResourceUsingPATCHOK:
		return value, nil, nil
	case *UpdateResourceUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_resource_group_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUsingPUT1 updates
*/
func (a *Client) UpdateUsingPUT1(params *UpdateUsingPUT1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUsingPUT1OK, *UpdateUsingPUT1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/resource-groups/{resourceGroupId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUsingPUT1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateUsingPUT1OK:
		return value, nil, nil
	case *UpdateUsingPUT1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_resource_group_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
