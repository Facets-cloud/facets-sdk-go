// Code generated by go-swagger; DO NOT EDIT.

package ui_resource_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui resource group controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui resource group controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui resource group controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui resource group controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Create(params *CreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOK, error)

	Delete1(params *Delete1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*Delete1OK, error)

	FindAll(params *FindAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAllOK, error)

	GetResourceGroup(params *GetResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupOK, error)

	GetResourceGroupsForSessionUser(params *GetResourceGroupsForSessionUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupsForSessionUserOK, error)

	UpdateAllResources(params *UpdateAllResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAllResourcesOK, error)

	UpdateResource(params *UpdateResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateResourceOK, error)

	Update1(params *Update1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*Update1OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Create create API
*/
func (a *Client) Create(params *CreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/resource-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Delete1 delete 1 API
*/
func (a *Client) Delete1(params *Delete1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*Delete1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelete1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_1",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/resource-groups/{resourceGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &Delete1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Delete1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindAll find all API
*/
func (a *Client) FindAll(params *FindAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findAll",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/resource-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceGroup get resource group API
*/
func (a *Client) GetResourceGroup(params *GetResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceGroup",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/resource-groups/{resourceGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceGroupsForSessionUser get resource groups for session user API
*/
func (a *Client) GetResourceGroupsForSessionUser(params *GetResourceGroupsForSessionUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupsForSessionUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceGroupsForSessionUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceGroupsForSessionUser",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/resource-groups/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceGroupsForSessionUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceGroupsForSessionUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceGroupsForSessionUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAllResources update all resources API
*/
func (a *Client) UpdateAllResources(params *UpdateAllResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAllResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAllResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAllResources",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/resource-groups/{resourceGroupId}/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAllResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAllResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAllResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateResource update resource API
*/
func (a *Client) UpdateResource(params *UpdateResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateResource",
		Method:             "PATCH",
		PathPattern:        "/cc-ui/v1/resource-groups/{resourceGroupId}/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Update1 update 1 API
*/
func (a *Client) Update1(params *Update1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*Update1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdate1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_1",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/resource-groups/{resourceGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &Update1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Update1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
