// Code generated by go-swagger; DO NOT EDIT.

package ui_resource_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// FindAllUsingGETReader is a Reader for the FindAllUsingGET structure.
type FindAllUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindAllUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindAllUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindAllUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindAllUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindAllUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/resource-groups] findAllUsingGET", response, response.Code())
	}
}

// NewFindAllUsingGETOK creates a FindAllUsingGETOK with default headers values
func NewFindAllUsingGETOK() *FindAllUsingGETOK {
	return &FindAllUsingGETOK{}
}

/*
FindAllUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type FindAllUsingGETOK struct {
	Payload []*models.ResourceGroup
}

// IsSuccess returns true when this find all using g e t o k response has a 2xx status code
func (o *FindAllUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this find all using g e t o k response has a 3xx status code
func (o *FindAllUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find all using g e t o k response has a 4xx status code
func (o *FindAllUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this find all using g e t o k response has a 5xx status code
func (o *FindAllUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this find all using g e t o k response a status code equal to that given
func (o *FindAllUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the find all using g e t o k response
func (o *FindAllUsingGETOK) Code() int {
	return 200
}

func (o *FindAllUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/resource-groups][%d] findAllUsingGETOK %s", 200, payload)
}

func (o *FindAllUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/resource-groups][%d] findAllUsingGETOK %s", 200, payload)
}

func (o *FindAllUsingGETOK) GetPayload() []*models.ResourceGroup {
	return o.Payload
}

func (o *FindAllUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindAllUsingGETUnauthorized creates a FindAllUsingGETUnauthorized with default headers values
func NewFindAllUsingGETUnauthorized() *FindAllUsingGETUnauthorized {
	return &FindAllUsingGETUnauthorized{}
}

/*
FindAllUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type FindAllUsingGETUnauthorized struct {
}

// IsSuccess returns true when this find all using g e t unauthorized response has a 2xx status code
func (o *FindAllUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find all using g e t unauthorized response has a 3xx status code
func (o *FindAllUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find all using g e t unauthorized response has a 4xx status code
func (o *FindAllUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this find all using g e t unauthorized response has a 5xx status code
func (o *FindAllUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this find all using g e t unauthorized response a status code equal to that given
func (o *FindAllUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the find all using g e t unauthorized response
func (o *FindAllUsingGETUnauthorized) Code() int {
	return 401
}

func (o *FindAllUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resource-groups][%d] findAllUsingGETUnauthorized", 401)
}

func (o *FindAllUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resource-groups][%d] findAllUsingGETUnauthorized", 401)
}

func (o *FindAllUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindAllUsingGETForbidden creates a FindAllUsingGETForbidden with default headers values
func NewFindAllUsingGETForbidden() *FindAllUsingGETForbidden {
	return &FindAllUsingGETForbidden{}
}

/*
FindAllUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type FindAllUsingGETForbidden struct {
}

// IsSuccess returns true when this find all using g e t forbidden response has a 2xx status code
func (o *FindAllUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find all using g e t forbidden response has a 3xx status code
func (o *FindAllUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find all using g e t forbidden response has a 4xx status code
func (o *FindAllUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this find all using g e t forbidden response has a 5xx status code
func (o *FindAllUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this find all using g e t forbidden response a status code equal to that given
func (o *FindAllUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the find all using g e t forbidden response
func (o *FindAllUsingGETForbidden) Code() int {
	return 403
}

func (o *FindAllUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resource-groups][%d] findAllUsingGETForbidden", 403)
}

func (o *FindAllUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resource-groups][%d] findAllUsingGETForbidden", 403)
}

func (o *FindAllUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindAllUsingGETNotFound creates a FindAllUsingGETNotFound with default headers values
func NewFindAllUsingGETNotFound() *FindAllUsingGETNotFound {
	return &FindAllUsingGETNotFound{}
}

/*
FindAllUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type FindAllUsingGETNotFound struct {
}

// IsSuccess returns true when this find all using g e t not found response has a 2xx status code
func (o *FindAllUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find all using g e t not found response has a 3xx status code
func (o *FindAllUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find all using g e t not found response has a 4xx status code
func (o *FindAllUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this find all using g e t not found response has a 5xx status code
func (o *FindAllUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this find all using g e t not found response a status code equal to that given
func (o *FindAllUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the find all using g e t not found response
func (o *FindAllUsingGETNotFound) Code() int {
	return 404
}

func (o *FindAllUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resource-groups][%d] findAllUsingGETNotFound", 404)
}

func (o *FindAllUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/resource-groups][%d] findAllUsingGETNotFound", 404)
}

func (o *FindAllUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
