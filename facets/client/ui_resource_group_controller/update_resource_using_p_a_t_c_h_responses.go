// Code generated by go-swagger; DO NOT EDIT.

package ui_resource_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateResourceUsingPATCHReader is a Reader for the UpdateResourceUsingPATCH structure.
type UpdateResourceUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateResourceUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateResourceUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateResourceUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateResourceUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateResourceUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources] updateResourceUsingPATCH", response, response.Code())
	}
}

// NewUpdateResourceUsingPATCHOK creates a UpdateResourceUsingPATCHOK with default headers values
func NewUpdateResourceUsingPATCHOK() *UpdateResourceUsingPATCHOK {
	return &UpdateResourceUsingPATCHOK{}
}

/*
UpdateResourceUsingPATCHOK describes a response with status code 200, with default header values.

OK
*/
type UpdateResourceUsingPATCHOK struct {
	Payload *models.ResourceGroup
}

// IsSuccess returns true when this update resource using p a t c h o k response has a 2xx status code
func (o *UpdateResourceUsingPATCHOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update resource using p a t c h o k response has a 3xx status code
func (o *UpdateResourceUsingPATCHOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update resource using p a t c h o k response has a 4xx status code
func (o *UpdateResourceUsingPATCHOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update resource using p a t c h o k response has a 5xx status code
func (o *UpdateResourceUsingPATCHOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update resource using p a t c h o k response a status code equal to that given
func (o *UpdateResourceUsingPATCHOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update resource using p a t c h o k response
func (o *UpdateResourceUsingPATCHOK) Code() int {
	return 200
}

func (o *UpdateResourceUsingPATCHOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceUsingPATCHOK %s", 200, payload)
}

func (o *UpdateResourceUsingPATCHOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceUsingPATCHOK %s", 200, payload)
}

func (o *UpdateResourceUsingPATCHOK) GetPayload() *models.ResourceGroup {
	return o.Payload
}

func (o *UpdateResourceUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResourceGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateResourceUsingPATCHNoContent creates a UpdateResourceUsingPATCHNoContent with default headers values
func NewUpdateResourceUsingPATCHNoContent() *UpdateResourceUsingPATCHNoContent {
	return &UpdateResourceUsingPATCHNoContent{}
}

/*
UpdateResourceUsingPATCHNoContent describes a response with status code 204, with default header values.

No Content
*/
type UpdateResourceUsingPATCHNoContent struct {
}

// IsSuccess returns true when this update resource using p a t c h no content response has a 2xx status code
func (o *UpdateResourceUsingPATCHNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update resource using p a t c h no content response has a 3xx status code
func (o *UpdateResourceUsingPATCHNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update resource using p a t c h no content response has a 4xx status code
func (o *UpdateResourceUsingPATCHNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update resource using p a t c h no content response has a 5xx status code
func (o *UpdateResourceUsingPATCHNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update resource using p a t c h no content response a status code equal to that given
func (o *UpdateResourceUsingPATCHNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update resource using p a t c h no content response
func (o *UpdateResourceUsingPATCHNoContent) Code() int {
	return 204
}

func (o *UpdateResourceUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceUsingPATCHNoContent", 204)
}

func (o *UpdateResourceUsingPATCHNoContent) String() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceUsingPATCHNoContent", 204)
}

func (o *UpdateResourceUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateResourceUsingPATCHUnauthorized creates a UpdateResourceUsingPATCHUnauthorized with default headers values
func NewUpdateResourceUsingPATCHUnauthorized() *UpdateResourceUsingPATCHUnauthorized {
	return &UpdateResourceUsingPATCHUnauthorized{}
}

/*
UpdateResourceUsingPATCHUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateResourceUsingPATCHUnauthorized struct {
}

// IsSuccess returns true when this update resource using p a t c h unauthorized response has a 2xx status code
func (o *UpdateResourceUsingPATCHUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update resource using p a t c h unauthorized response has a 3xx status code
func (o *UpdateResourceUsingPATCHUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update resource using p a t c h unauthorized response has a 4xx status code
func (o *UpdateResourceUsingPATCHUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update resource using p a t c h unauthorized response has a 5xx status code
func (o *UpdateResourceUsingPATCHUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update resource using p a t c h unauthorized response a status code equal to that given
func (o *UpdateResourceUsingPATCHUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update resource using p a t c h unauthorized response
func (o *UpdateResourceUsingPATCHUnauthorized) Code() int {
	return 401
}

func (o *UpdateResourceUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceUsingPATCHUnauthorized", 401)
}

func (o *UpdateResourceUsingPATCHUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceUsingPATCHUnauthorized", 401)
}

func (o *UpdateResourceUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateResourceUsingPATCHForbidden creates a UpdateResourceUsingPATCHForbidden with default headers values
func NewUpdateResourceUsingPATCHForbidden() *UpdateResourceUsingPATCHForbidden {
	return &UpdateResourceUsingPATCHForbidden{}
}

/*
UpdateResourceUsingPATCHForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateResourceUsingPATCHForbidden struct {
}

// IsSuccess returns true when this update resource using p a t c h forbidden response has a 2xx status code
func (o *UpdateResourceUsingPATCHForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update resource using p a t c h forbidden response has a 3xx status code
func (o *UpdateResourceUsingPATCHForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update resource using p a t c h forbidden response has a 4xx status code
func (o *UpdateResourceUsingPATCHForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update resource using p a t c h forbidden response has a 5xx status code
func (o *UpdateResourceUsingPATCHForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update resource using p a t c h forbidden response a status code equal to that given
func (o *UpdateResourceUsingPATCHForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update resource using p a t c h forbidden response
func (o *UpdateResourceUsingPATCHForbidden) Code() int {
	return 403
}

func (o *UpdateResourceUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceUsingPATCHForbidden", 403)
}

func (o *UpdateResourceUsingPATCHForbidden) String() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/resource-groups/{resourceGroupId}/resources][%d] updateResourceUsingPATCHForbidden", 403)
}

func (o *UpdateResourceUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
