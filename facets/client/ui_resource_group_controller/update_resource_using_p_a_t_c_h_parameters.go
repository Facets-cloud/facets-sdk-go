// Code generated by go-swagger; DO NOT EDIT.

package ui_resource_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// NewUpdateResourceUsingPATCHParams creates a new UpdateResourceUsingPATCHParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateResourceUsingPATCHParams() *UpdateResourceUsingPATCHParams {
	return &UpdateResourceUsingPATCHParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateResourceUsingPATCHParamsWithTimeout creates a new UpdateResourceUsingPATCHParams object
// with the ability to set a timeout on a request.
func NewUpdateResourceUsingPATCHParamsWithTimeout(timeout time.Duration) *UpdateResourceUsingPATCHParams {
	return &UpdateResourceUsingPATCHParams{
		timeout: timeout,
	}
}

// NewUpdateResourceUsingPATCHParamsWithContext creates a new UpdateResourceUsingPATCHParams object
// with the ability to set a context for a request.
func NewUpdateResourceUsingPATCHParamsWithContext(ctx context.Context) *UpdateResourceUsingPATCHParams {
	return &UpdateResourceUsingPATCHParams{
		Context: ctx,
	}
}

// NewUpdateResourceUsingPATCHParamsWithHTTPClient creates a new UpdateResourceUsingPATCHParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateResourceUsingPATCHParamsWithHTTPClient(client *http.Client) *UpdateResourceUsingPATCHParams {
	return &UpdateResourceUsingPATCHParams{
		HTTPClient: client,
	}
}

/*
UpdateResourceUsingPATCHParams contains all the parameters to send to the API endpoint

	for the update resource using p a t c h operation.

	Typically these are written to a http.Request.
*/
type UpdateResourceUsingPATCHParams struct {

	/* ResourceGroupID.

	   resourceGroupId
	*/
	ResourceGroupID string

	/* ResourceUpdateRequest.

	   resourceUpdateRequest
	*/
	ResourceUpdateRequest *models.ResourceInfo

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update resource using p a t c h params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateResourceUsingPATCHParams) WithDefaults() *UpdateResourceUsingPATCHParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update resource using p a t c h params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateResourceUsingPATCHParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update resource using p a t c h params
func (o *UpdateResourceUsingPATCHParams) WithTimeout(timeout time.Duration) *UpdateResourceUsingPATCHParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update resource using p a t c h params
func (o *UpdateResourceUsingPATCHParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update resource using p a t c h params
func (o *UpdateResourceUsingPATCHParams) WithContext(ctx context.Context) *UpdateResourceUsingPATCHParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update resource using p a t c h params
func (o *UpdateResourceUsingPATCHParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update resource using p a t c h params
func (o *UpdateResourceUsingPATCHParams) WithHTTPClient(client *http.Client) *UpdateResourceUsingPATCHParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update resource using p a t c h params
func (o *UpdateResourceUsingPATCHParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithResourceGroupID adds the resourceGroupID to the update resource using p a t c h params
func (o *UpdateResourceUsingPATCHParams) WithResourceGroupID(resourceGroupID string) *UpdateResourceUsingPATCHParams {
	o.SetResourceGroupID(resourceGroupID)
	return o
}

// SetResourceGroupID adds the resourceGroupId to the update resource using p a t c h params
func (o *UpdateResourceUsingPATCHParams) SetResourceGroupID(resourceGroupID string) {
	o.ResourceGroupID = resourceGroupID
}

// WithResourceUpdateRequest adds the resourceUpdateRequest to the update resource using p a t c h params
func (o *UpdateResourceUsingPATCHParams) WithResourceUpdateRequest(resourceUpdateRequest *models.ResourceInfo) *UpdateResourceUsingPATCHParams {
	o.SetResourceUpdateRequest(resourceUpdateRequest)
	return o
}

// SetResourceUpdateRequest adds the resourceUpdateRequest to the update resource using p a t c h params
func (o *UpdateResourceUsingPATCHParams) SetResourceUpdateRequest(resourceUpdateRequest *models.ResourceInfo) {
	o.ResourceUpdateRequest = resourceUpdateRequest
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateResourceUsingPATCHParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param resourceGroupId
	if err := r.SetPathParam("resourceGroupId", o.ResourceGroupID); err != nil {
		return err
	}
	if o.ResourceUpdateRequest != nil {
		if err := r.SetBodyParam(o.ResourceUpdateRequest); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
