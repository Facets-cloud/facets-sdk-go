// Code generated by go-swagger; DO NOT EDIT.

package ui_audit_logs_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAuditLogsUsingGETParams creates a new GetAuditLogsUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAuditLogsUsingGETParams() *GetAuditLogsUsingGETParams {
	return &GetAuditLogsUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAuditLogsUsingGETParamsWithTimeout creates a new GetAuditLogsUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetAuditLogsUsingGETParamsWithTimeout(timeout time.Duration) *GetAuditLogsUsingGETParams {
	return &GetAuditLogsUsingGETParams{
		timeout: timeout,
	}
}

// NewGetAuditLogsUsingGETParamsWithContext creates a new GetAuditLogsUsingGETParams object
// with the ability to set a context for a request.
func NewGetAuditLogsUsingGETParamsWithContext(ctx context.Context) *GetAuditLogsUsingGETParams {
	return &GetAuditLogsUsingGETParams{
		Context: ctx,
	}
}

// NewGetAuditLogsUsingGETParamsWithHTTPClient creates a new GetAuditLogsUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAuditLogsUsingGETParamsWithHTTPClient(client *http.Client) *GetAuditLogsUsingGETParams {
	return &GetAuditLogsUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetAuditLogsUsingGETParams contains all the parameters to send to the API endpoint

	for the get audit logs using g e t operation.

	Typically these are written to a http.Request.
*/
type GetAuditLogsUsingGETParams struct {

	/* ClusterName.

	   Regex based string match
	*/
	ClusterName *string

	/* End.

	   end

	   Format: date-time
	*/
	End *strfmt.DateTime

	/* Entity.

	   entity
	*/
	Entity []string

	/* EntityAction.

	   entityAction
	*/
	EntityAction []string

	/* Number.

	   number

	   Format: int32
	*/
	Number *int32

	/* PerformedBy.

	   Regex based string match
	*/
	PerformedBy *string

	/* Size.

	   size

	   Format: int32
	   Default: 50
	*/
	Size *int32

	/* StackName.

	   Regex based string match
	*/
	StackName *string

	/* Start.

	   start

	   Format: date-time
	*/
	Start *strfmt.DateTime

	/* Target.

	   Regex based string match
	*/
	Target *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get audit logs using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuditLogsUsingGETParams) WithDefaults() *GetAuditLogsUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get audit logs using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuditLogsUsingGETParams) SetDefaults() {
	var (
		numberDefault = int32(0)

		sizeDefault = int32(50)
	)

	val := GetAuditLogsUsingGETParams{
		Number: &numberDefault,
		Size:   &sizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) WithTimeout(timeout time.Duration) *GetAuditLogsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) WithContext(ctx context.Context) *GetAuditLogsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) WithHTTPClient(client *http.Client) *GetAuditLogsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterName adds the clusterName to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) WithClusterName(clusterName *string) *GetAuditLogsUsingGETParams {
	o.SetClusterName(clusterName)
	return o
}

// SetClusterName adds the clusterName to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) SetClusterName(clusterName *string) {
	o.ClusterName = clusterName
}

// WithEnd adds the end to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) WithEnd(end *strfmt.DateTime) *GetAuditLogsUsingGETParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) SetEnd(end *strfmt.DateTime) {
	o.End = end
}

// WithEntity adds the entity to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) WithEntity(entity []string) *GetAuditLogsUsingGETParams {
	o.SetEntity(entity)
	return o
}

// SetEntity adds the entity to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) SetEntity(entity []string) {
	o.Entity = entity
}

// WithEntityAction adds the entityAction to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) WithEntityAction(entityAction []string) *GetAuditLogsUsingGETParams {
	o.SetEntityAction(entityAction)
	return o
}

// SetEntityAction adds the entityAction to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) SetEntityAction(entityAction []string) {
	o.EntityAction = entityAction
}

// WithNumber adds the number to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) WithNumber(number *int32) *GetAuditLogsUsingGETParams {
	o.SetNumber(number)
	return o
}

// SetNumber adds the number to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) SetNumber(number *int32) {
	o.Number = number
}

// WithPerformedBy adds the performedBy to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) WithPerformedBy(performedBy *string) *GetAuditLogsUsingGETParams {
	o.SetPerformedBy(performedBy)
	return o
}

// SetPerformedBy adds the performedBy to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) SetPerformedBy(performedBy *string) {
	o.PerformedBy = performedBy
}

// WithSize adds the size to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) WithSize(size *int32) *GetAuditLogsUsingGETParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) SetSize(size *int32) {
	o.Size = size
}

// WithStackName adds the stackName to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) WithStackName(stackName *string) *GetAuditLogsUsingGETParams {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) SetStackName(stackName *string) {
	o.StackName = stackName
}

// WithStart adds the start to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) WithStart(start *strfmt.DateTime) *GetAuditLogsUsingGETParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) SetStart(start *strfmt.DateTime) {
	o.Start = start
}

// WithTarget adds the target to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) WithTarget(target *string) *GetAuditLogsUsingGETParams {
	o.SetTarget(target)
	return o
}

// SetTarget adds the target to the get audit logs using g e t params
func (o *GetAuditLogsUsingGETParams) SetTarget(target *string) {
	o.Target = target
}

// WriteToRequest writes these params to a swagger request
func (o *GetAuditLogsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterName != nil {

		// query param clusterName
		var qrClusterName string

		if o.ClusterName != nil {
			qrClusterName = *o.ClusterName
		}
		qClusterName := qrClusterName
		if qClusterName != "" {

			if err := r.SetQueryParam("clusterName", qClusterName); err != nil {
				return err
			}
		}
	}

	if o.End != nil {

		// query param end
		var qrEnd strfmt.DateTime

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := qrEnd.String()
		if qEnd != "" {

			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}
	}

	if o.Entity != nil {

		// binding items for entity
		joinedEntity := o.bindParamEntity(reg)

		// query array param entity
		if err := r.SetQueryParam("entity", joinedEntity...); err != nil {
			return err
		}
	}

	if o.EntityAction != nil {

		// binding items for entityAction
		joinedEntityAction := o.bindParamEntityAction(reg)

		// query array param entityAction
		if err := r.SetQueryParam("entityAction", joinedEntityAction...); err != nil {
			return err
		}
	}

	if o.Number != nil {

		// query param number
		var qrNumber int32

		if o.Number != nil {
			qrNumber = *o.Number
		}
		qNumber := swag.FormatInt32(qrNumber)
		if qNumber != "" {

			if err := r.SetQueryParam("number", qNumber); err != nil {
				return err
			}
		}
	}

	if o.PerformedBy != nil {

		// query param performedBy
		var qrPerformedBy string

		if o.PerformedBy != nil {
			qrPerformedBy = *o.PerformedBy
		}
		qPerformedBy := qrPerformedBy
		if qPerformedBy != "" {

			if err := r.SetQueryParam("performedBy", qPerformedBy); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int32

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.StackName != nil {

		// query param stackName
		var qrStackName string

		if o.StackName != nil {
			qrStackName = *o.StackName
		}
		qStackName := qrStackName
		if qStackName != "" {

			if err := r.SetQueryParam("stackName", qStackName); err != nil {
				return err
			}
		}
	}

	if o.Start != nil {

		// query param start
		var qrStart strfmt.DateTime

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := qrStart.String()
		if qStart != "" {

			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}
	}

	if o.Target != nil {

		// query param target
		var qrTarget string

		if o.Target != nil {
			qrTarget = *o.Target
		}
		qTarget := qrTarget
		if qTarget != "" {

			if err := r.SetQueryParam("target", qTarget); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetAuditLogsUsingGET binds the parameter entity
func (o *GetAuditLogsUsingGETParams) bindParamEntity(formats strfmt.Registry) []string {
	entityIR := o.Entity

	var entityIC []string
	for _, entityIIR := range entityIR { // explode []string

		entityIIV := entityIIR // string as string
		entityIC = append(entityIC, entityIIV)
	}

	// items.CollectionFormat: "multi"
	entityIS := swag.JoinByFormat(entityIC, "multi")

	return entityIS
}

// bindParamGetAuditLogsUsingGET binds the parameter entityAction
func (o *GetAuditLogsUsingGETParams) bindParamEntityAction(formats strfmt.Registry) []string {
	entityActionIR := o.EntityAction

	var entityActionIC []string
	for _, entityActionIIR := range entityActionIR { // explode []string

		entityActionIIV := entityActionIIR // string as string
		entityActionIC = append(entityActionIC, entityActionIIV)
	}

	// items.CollectionFormat: "multi"
	entityActionIS := swag.JoinByFormat(entityActionIC, "multi")

	return entityActionIS
}
