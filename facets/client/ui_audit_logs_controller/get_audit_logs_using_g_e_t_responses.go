// Code generated by go-swagger; DO NOT EDIT.

package ui_audit_logs_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAuditLogsUsingGETReader is a Reader for the GetAuditLogsUsingGET structure.
type GetAuditLogsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuditLogsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuditLogsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAuditLogsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAuditLogsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAuditLogsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/audit-logs] getAuditLogsUsingGET", response, response.Code())
	}
}

// NewGetAuditLogsUsingGETOK creates a GetAuditLogsUsingGETOK with default headers values
func NewGetAuditLogsUsingGETOK() *GetAuditLogsUsingGETOK {
	return &GetAuditLogsUsingGETOK{}
}

/*
GetAuditLogsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAuditLogsUsingGETOK struct {
	Payload *models.PageFacetsAuditLogResponse
}

// IsSuccess returns true when this get audit logs using g e t o k response has a 2xx status code
func (o *GetAuditLogsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get audit logs using g e t o k response has a 3xx status code
func (o *GetAuditLogsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audit logs using g e t o k response has a 4xx status code
func (o *GetAuditLogsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get audit logs using g e t o k response has a 5xx status code
func (o *GetAuditLogsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get audit logs using g e t o k response a status code equal to that given
func (o *GetAuditLogsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get audit logs using g e t o k response
func (o *GetAuditLogsUsingGETOK) Code() int {
	return 200
}

func (o *GetAuditLogsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsUsingGETOK %s", 200, payload)
}

func (o *GetAuditLogsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsUsingGETOK %s", 200, payload)
}

func (o *GetAuditLogsUsingGETOK) GetPayload() *models.PageFacetsAuditLogResponse {
	return o.Payload
}

func (o *GetAuditLogsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageFacetsAuditLogResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuditLogsUsingGETUnauthorized creates a GetAuditLogsUsingGETUnauthorized with default headers values
func NewGetAuditLogsUsingGETUnauthorized() *GetAuditLogsUsingGETUnauthorized {
	return &GetAuditLogsUsingGETUnauthorized{}
}

/*
GetAuditLogsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAuditLogsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get audit logs using g e t unauthorized response has a 2xx status code
func (o *GetAuditLogsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audit logs using g e t unauthorized response has a 3xx status code
func (o *GetAuditLogsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audit logs using g e t unauthorized response has a 4xx status code
func (o *GetAuditLogsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audit logs using g e t unauthorized response has a 5xx status code
func (o *GetAuditLogsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get audit logs using g e t unauthorized response a status code equal to that given
func (o *GetAuditLogsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get audit logs using g e t unauthorized response
func (o *GetAuditLogsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAuditLogsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsUsingGETUnauthorized", 401)
}

func (o *GetAuditLogsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsUsingGETUnauthorized", 401)
}

func (o *GetAuditLogsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAuditLogsUsingGETForbidden creates a GetAuditLogsUsingGETForbidden with default headers values
func NewGetAuditLogsUsingGETForbidden() *GetAuditLogsUsingGETForbidden {
	return &GetAuditLogsUsingGETForbidden{}
}

/*
GetAuditLogsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAuditLogsUsingGETForbidden struct {
}

// IsSuccess returns true when this get audit logs using g e t forbidden response has a 2xx status code
func (o *GetAuditLogsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audit logs using g e t forbidden response has a 3xx status code
func (o *GetAuditLogsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audit logs using g e t forbidden response has a 4xx status code
func (o *GetAuditLogsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audit logs using g e t forbidden response has a 5xx status code
func (o *GetAuditLogsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get audit logs using g e t forbidden response a status code equal to that given
func (o *GetAuditLogsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get audit logs using g e t forbidden response
func (o *GetAuditLogsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAuditLogsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsUsingGETForbidden", 403)
}

func (o *GetAuditLogsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsUsingGETForbidden", 403)
}

func (o *GetAuditLogsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAuditLogsUsingGETNotFound creates a GetAuditLogsUsingGETNotFound with default headers values
func NewGetAuditLogsUsingGETNotFound() *GetAuditLogsUsingGETNotFound {
	return &GetAuditLogsUsingGETNotFound{}
}

/*
GetAuditLogsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAuditLogsUsingGETNotFound struct {
}

// IsSuccess returns true when this get audit logs using g e t not found response has a 2xx status code
func (o *GetAuditLogsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audit logs using g e t not found response has a 3xx status code
func (o *GetAuditLogsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audit logs using g e t not found response has a 4xx status code
func (o *GetAuditLogsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audit logs using g e t not found response has a 5xx status code
func (o *GetAuditLogsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get audit logs using g e t not found response a status code equal to that given
func (o *GetAuditLogsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get audit logs using g e t not found response
func (o *GetAuditLogsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAuditLogsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsUsingGETNotFound", 404)
}

func (o *GetAuditLogsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsUsingGETNotFound", 404)
}

func (o *GetAuditLogsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
