// Code generated by go-swagger; DO NOT EDIT.

package ui_audit_logs_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAuditLogsReader is a Reader for the GetAuditLogs structure.
type GetAuditLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuditLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuditLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAuditLogsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAuditLogsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAuditLogsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAuditLogsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/audit-logs] getAuditLogs", response, response.Code())
	}
}

// NewGetAuditLogsOK creates a GetAuditLogsOK with default headers values
func NewGetAuditLogsOK() *GetAuditLogsOK {
	return &GetAuditLogsOK{}
}

/*
GetAuditLogsOK describes a response with status code 200, with default header values.

OK
*/
type GetAuditLogsOK struct {
	Payload *models.PageFacetsAuditLogResponse
}

// IsSuccess returns true when this get audit logs o k response has a 2xx status code
func (o *GetAuditLogsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get audit logs o k response has a 3xx status code
func (o *GetAuditLogsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audit logs o k response has a 4xx status code
func (o *GetAuditLogsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get audit logs o k response has a 5xx status code
func (o *GetAuditLogsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get audit logs o k response a status code equal to that given
func (o *GetAuditLogsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get audit logs o k response
func (o *GetAuditLogsOK) Code() int {
	return 200
}

func (o *GetAuditLogsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsOK %s", 200, payload)
}

func (o *GetAuditLogsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsOK %s", 200, payload)
}

func (o *GetAuditLogsOK) GetPayload() *models.PageFacetsAuditLogResponse {
	return o.Payload
}

func (o *GetAuditLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageFacetsAuditLogResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuditLogsBadRequest creates a GetAuditLogsBadRequest with default headers values
func NewGetAuditLogsBadRequest() *GetAuditLogsBadRequest {
	return &GetAuditLogsBadRequest{}
}

/*
GetAuditLogsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAuditLogsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get audit logs bad request response has a 2xx status code
func (o *GetAuditLogsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audit logs bad request response has a 3xx status code
func (o *GetAuditLogsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audit logs bad request response has a 4xx status code
func (o *GetAuditLogsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audit logs bad request response has a 5xx status code
func (o *GetAuditLogsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get audit logs bad request response a status code equal to that given
func (o *GetAuditLogsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get audit logs bad request response
func (o *GetAuditLogsBadRequest) Code() int {
	return 400
}

func (o *GetAuditLogsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsBadRequest %s", 400, payload)
}

func (o *GetAuditLogsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsBadRequest %s", 400, payload)
}

func (o *GetAuditLogsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAuditLogsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuditLogsNotFound creates a GetAuditLogsNotFound with default headers values
func NewGetAuditLogsNotFound() *GetAuditLogsNotFound {
	return &GetAuditLogsNotFound{}
}

/*
GetAuditLogsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAuditLogsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get audit logs not found response has a 2xx status code
func (o *GetAuditLogsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audit logs not found response has a 3xx status code
func (o *GetAuditLogsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audit logs not found response has a 4xx status code
func (o *GetAuditLogsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audit logs not found response has a 5xx status code
func (o *GetAuditLogsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get audit logs not found response a status code equal to that given
func (o *GetAuditLogsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get audit logs not found response
func (o *GetAuditLogsNotFound) Code() int {
	return 404
}

func (o *GetAuditLogsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsNotFound %s", 404, payload)
}

func (o *GetAuditLogsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsNotFound %s", 404, payload)
}

func (o *GetAuditLogsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAuditLogsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuditLogsMethodNotAllowed creates a GetAuditLogsMethodNotAllowed with default headers values
func NewGetAuditLogsMethodNotAllowed() *GetAuditLogsMethodNotAllowed {
	return &GetAuditLogsMethodNotAllowed{}
}

/*
GetAuditLogsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAuditLogsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get audit logs method not allowed response has a 2xx status code
func (o *GetAuditLogsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audit logs method not allowed response has a 3xx status code
func (o *GetAuditLogsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audit logs method not allowed response has a 4xx status code
func (o *GetAuditLogsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audit logs method not allowed response has a 5xx status code
func (o *GetAuditLogsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get audit logs method not allowed response a status code equal to that given
func (o *GetAuditLogsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get audit logs method not allowed response
func (o *GetAuditLogsMethodNotAllowed) Code() int {
	return 405
}

func (o *GetAuditLogsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsMethodNotAllowed %s", 405, payload)
}

func (o *GetAuditLogsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsMethodNotAllowed %s", 405, payload)
}

func (o *GetAuditLogsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAuditLogsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuditLogsInternalServerError creates a GetAuditLogsInternalServerError with default headers values
func NewGetAuditLogsInternalServerError() *GetAuditLogsInternalServerError {
	return &GetAuditLogsInternalServerError{}
}

/*
GetAuditLogsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAuditLogsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get audit logs internal server error response has a 2xx status code
func (o *GetAuditLogsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audit logs internal server error response has a 3xx status code
func (o *GetAuditLogsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audit logs internal server error response has a 4xx status code
func (o *GetAuditLogsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get audit logs internal server error response has a 5xx status code
func (o *GetAuditLogsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get audit logs internal server error response a status code equal to that given
func (o *GetAuditLogsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get audit logs internal server error response
func (o *GetAuditLogsInternalServerError) Code() int {
	return 500
}

func (o *GetAuditLogsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsInternalServerError %s", 500, payload)
}

func (o *GetAuditLogsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/audit-logs][%d] getAuditLogsInternalServerError %s", 500, payload)
}

func (o *GetAuditLogsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAuditLogsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
