// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetLaunchDAGParams creates a new GetLaunchDAGParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetLaunchDAGParams() *GetLaunchDAGParams {
	return &GetLaunchDAGParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetLaunchDAGParamsWithTimeout creates a new GetLaunchDAGParams object
// with the ability to set a timeout on a request.
func NewGetLaunchDAGParamsWithTimeout(timeout time.Duration) *GetLaunchDAGParams {
	return &GetLaunchDAGParams{
		timeout: timeout,
	}
}

// NewGetLaunchDAGParamsWithContext creates a new GetLaunchDAGParams object
// with the ability to set a context for a request.
func NewGetLaunchDAGParamsWithContext(ctx context.Context) *GetLaunchDAGParams {
	return &GetLaunchDAGParams{
		Context: ctx,
	}
}

// NewGetLaunchDAGParamsWithHTTPClient creates a new GetLaunchDAGParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetLaunchDAGParamsWithHTTPClient(client *http.Client) *GetLaunchDAGParams {
	return &GetLaunchDAGParams{
		HTTPClient: client,
	}
}

/*
GetLaunchDAGParams contains all the parameters to send to the API endpoint

	for the get launch d a g operation.

	Typically these are written to a http.Request.
*/
type GetLaunchDAGParams struct {

	// Cloud.
	Cloud string

	// ClusterID.
	ClusterID string

	// IsDependent.
	IsDependent *string

	// IsProvidedK8s.
	IsProvidedK8s *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get launch d a g params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLaunchDAGParams) WithDefaults() *GetLaunchDAGParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get launch d a g params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLaunchDAGParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get launch d a g params
func (o *GetLaunchDAGParams) WithTimeout(timeout time.Duration) *GetLaunchDAGParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get launch d a g params
func (o *GetLaunchDAGParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get launch d a g params
func (o *GetLaunchDAGParams) WithContext(ctx context.Context) *GetLaunchDAGParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get launch d a g params
func (o *GetLaunchDAGParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get launch d a g params
func (o *GetLaunchDAGParams) WithHTTPClient(client *http.Client) *GetLaunchDAGParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get launch d a g params
func (o *GetLaunchDAGParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCloud adds the cloud to the get launch d a g params
func (o *GetLaunchDAGParams) WithCloud(cloud string) *GetLaunchDAGParams {
	o.SetCloud(cloud)
	return o
}

// SetCloud adds the cloud to the get launch d a g params
func (o *GetLaunchDAGParams) SetCloud(cloud string) {
	o.Cloud = cloud
}

// WithClusterID adds the clusterID to the get launch d a g params
func (o *GetLaunchDAGParams) WithClusterID(clusterID string) *GetLaunchDAGParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the get launch d a g params
func (o *GetLaunchDAGParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithIsDependent adds the isDependent to the get launch d a g params
func (o *GetLaunchDAGParams) WithIsDependent(isDependent *string) *GetLaunchDAGParams {
	o.SetIsDependent(isDependent)
	return o
}

// SetIsDependent adds the isDependent to the get launch d a g params
func (o *GetLaunchDAGParams) SetIsDependent(isDependent *string) {
	o.IsDependent = isDependent
}

// WithIsProvidedK8s adds the isProvidedK8s to the get launch d a g params
func (o *GetLaunchDAGParams) WithIsProvidedK8s(isProvidedK8s *string) *GetLaunchDAGParams {
	o.SetIsProvidedK8s(isProvidedK8s)
	return o
}

// SetIsProvidedK8s adds the isProvidedK8s to the get launch d a g params
func (o *GetLaunchDAGParams) SetIsProvidedK8s(isProvidedK8s *string) {
	o.IsProvidedK8s = isProvidedK8s
}

// WriteToRequest writes these params to a swagger request
func (o *GetLaunchDAGParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cloud
	if err := r.SetPathParam("cloud", o.Cloud); err != nil {
		return err
	}

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID); err != nil {
		return err
	}

	if o.IsDependent != nil {

		// query param isDependent
		var qrIsDependent string

		if o.IsDependent != nil {
			qrIsDependent = *o.IsDependent
		}
		qIsDependent := qrIsDependent
		if qIsDependent != "" {

			if err := r.SetQueryParam("isDependent", qIsDependent); err != nil {
				return err
			}
		}
	}

	if o.IsProvidedK8s != nil {

		// query param isProvidedK8s
		var qrIsProvidedK8s string

		if o.IsProvidedK8s != nil {
			qrIsProvidedK8s = *o.IsProvidedK8s
		}
		qIsProvidedK8s := qrIsProvidedK8s
		if qIsProvidedK8s != "" {

			if err := r.SetQueryParam("isProvidedK8s", qIsProvidedK8s); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
