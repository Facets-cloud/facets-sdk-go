// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetReleaseStreamsReader is a Reader for the GetReleaseStreams structure.
type GetReleaseStreamsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReleaseStreamsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReleaseStreamsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetReleaseStreamsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReleaseStreamsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetReleaseStreamsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetReleaseStreamsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/dropdown/releaseStreams] getReleaseStreams", response, response.Code())
	}
}

// NewGetReleaseStreamsOK creates a GetReleaseStreamsOK with default headers values
func NewGetReleaseStreamsOK() *GetReleaseStreamsOK {
	return &GetReleaseStreamsOK{}
}

/*
GetReleaseStreamsOK describes a response with status code 200, with default header values.

OK
*/
type GetReleaseStreamsOK struct {
	Payload []string
}

// IsSuccess returns true when this get release streams o k response has a 2xx status code
func (o *GetReleaseStreamsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get release streams o k response has a 3xx status code
func (o *GetReleaseStreamsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release streams o k response has a 4xx status code
func (o *GetReleaseStreamsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get release streams o k response has a 5xx status code
func (o *GetReleaseStreamsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get release streams o k response a status code equal to that given
func (o *GetReleaseStreamsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get release streams o k response
func (o *GetReleaseStreamsOK) Code() int {
	return 200
}

func (o *GetReleaseStreamsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsOK %s", 200, payload)
}

func (o *GetReleaseStreamsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsOK %s", 200, payload)
}

func (o *GetReleaseStreamsOK) GetPayload() []string {
	return o.Payload
}

func (o *GetReleaseStreamsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseStreamsBadRequest creates a GetReleaseStreamsBadRequest with default headers values
func NewGetReleaseStreamsBadRequest() *GetReleaseStreamsBadRequest {
	return &GetReleaseStreamsBadRequest{}
}

/*
GetReleaseStreamsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetReleaseStreamsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get release streams bad request response has a 2xx status code
func (o *GetReleaseStreamsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release streams bad request response has a 3xx status code
func (o *GetReleaseStreamsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release streams bad request response has a 4xx status code
func (o *GetReleaseStreamsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release streams bad request response has a 5xx status code
func (o *GetReleaseStreamsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get release streams bad request response a status code equal to that given
func (o *GetReleaseStreamsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get release streams bad request response
func (o *GetReleaseStreamsBadRequest) Code() int {
	return 400
}

func (o *GetReleaseStreamsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsBadRequest %s", 400, payload)
}

func (o *GetReleaseStreamsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsBadRequest %s", 400, payload)
}

func (o *GetReleaseStreamsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetReleaseStreamsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseStreamsNotFound creates a GetReleaseStreamsNotFound with default headers values
func NewGetReleaseStreamsNotFound() *GetReleaseStreamsNotFound {
	return &GetReleaseStreamsNotFound{}
}

/*
GetReleaseStreamsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetReleaseStreamsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get release streams not found response has a 2xx status code
func (o *GetReleaseStreamsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release streams not found response has a 3xx status code
func (o *GetReleaseStreamsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release streams not found response has a 4xx status code
func (o *GetReleaseStreamsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release streams not found response has a 5xx status code
func (o *GetReleaseStreamsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get release streams not found response a status code equal to that given
func (o *GetReleaseStreamsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get release streams not found response
func (o *GetReleaseStreamsNotFound) Code() int {
	return 404
}

func (o *GetReleaseStreamsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsNotFound %s", 404, payload)
}

func (o *GetReleaseStreamsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsNotFound %s", 404, payload)
}

func (o *GetReleaseStreamsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetReleaseStreamsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseStreamsMethodNotAllowed creates a GetReleaseStreamsMethodNotAllowed with default headers values
func NewGetReleaseStreamsMethodNotAllowed() *GetReleaseStreamsMethodNotAllowed {
	return &GetReleaseStreamsMethodNotAllowed{}
}

/*
GetReleaseStreamsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetReleaseStreamsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get release streams method not allowed response has a 2xx status code
func (o *GetReleaseStreamsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release streams method not allowed response has a 3xx status code
func (o *GetReleaseStreamsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release streams method not allowed response has a 4xx status code
func (o *GetReleaseStreamsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release streams method not allowed response has a 5xx status code
func (o *GetReleaseStreamsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get release streams method not allowed response a status code equal to that given
func (o *GetReleaseStreamsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get release streams method not allowed response
func (o *GetReleaseStreamsMethodNotAllowed) Code() int {
	return 405
}

func (o *GetReleaseStreamsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsMethodNotAllowed %s", 405, payload)
}

func (o *GetReleaseStreamsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsMethodNotAllowed %s", 405, payload)
}

func (o *GetReleaseStreamsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetReleaseStreamsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseStreamsInternalServerError creates a GetReleaseStreamsInternalServerError with default headers values
func NewGetReleaseStreamsInternalServerError() *GetReleaseStreamsInternalServerError {
	return &GetReleaseStreamsInternalServerError{}
}

/*
GetReleaseStreamsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetReleaseStreamsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get release streams internal server error response has a 2xx status code
func (o *GetReleaseStreamsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release streams internal server error response has a 3xx status code
func (o *GetReleaseStreamsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release streams internal server error response has a 4xx status code
func (o *GetReleaseStreamsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get release streams internal server error response has a 5xx status code
func (o *GetReleaseStreamsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get release streams internal server error response a status code equal to that given
func (o *GetReleaseStreamsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get release streams internal server error response
func (o *GetReleaseStreamsInternalServerError) Code() int {
	return 500
}

func (o *GetReleaseStreamsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsInternalServerError %s", 500, payload)
}

func (o *GetReleaseStreamsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsInternalServerError %s", 500, payload)
}

func (o *GetReleaseStreamsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetReleaseStreamsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
