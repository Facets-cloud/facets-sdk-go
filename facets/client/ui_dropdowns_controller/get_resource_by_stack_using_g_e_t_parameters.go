// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetResourceByStackUsingGETParams creates a new GetResourceByStackUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetResourceByStackUsingGETParams() *GetResourceByStackUsingGETParams {
	return &GetResourceByStackUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetResourceByStackUsingGETParamsWithTimeout creates a new GetResourceByStackUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetResourceByStackUsingGETParamsWithTimeout(timeout time.Duration) *GetResourceByStackUsingGETParams {
	return &GetResourceByStackUsingGETParams{
		timeout: timeout,
	}
}

// NewGetResourceByStackUsingGETParamsWithContext creates a new GetResourceByStackUsingGETParams object
// with the ability to set a context for a request.
func NewGetResourceByStackUsingGETParamsWithContext(ctx context.Context) *GetResourceByStackUsingGETParams {
	return &GetResourceByStackUsingGETParams{
		Context: ctx,
	}
}

// NewGetResourceByStackUsingGETParamsWithHTTPClient creates a new GetResourceByStackUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetResourceByStackUsingGETParamsWithHTTPClient(client *http.Client) *GetResourceByStackUsingGETParams {
	return &GetResourceByStackUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetResourceByStackUsingGETParams contains all the parameters to send to the API endpoint

	for the get resource by stack using g e t operation.

	Typically these are written to a http.Request.
*/
type GetResourceByStackUsingGETParams struct {

	/* Branch.

	   branch
	*/
	Branch *string

	/* ResourceName.

	   resourceName
	*/
	ResourceName string

	/* ResourceType.

	   resourceType
	*/
	ResourceType string

	/* StackName.

	   stackName
	*/
	StackName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get resource by stack using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetResourceByStackUsingGETParams) WithDefaults() *GetResourceByStackUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get resource by stack using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetResourceByStackUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get resource by stack using g e t params
func (o *GetResourceByStackUsingGETParams) WithTimeout(timeout time.Duration) *GetResourceByStackUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get resource by stack using g e t params
func (o *GetResourceByStackUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get resource by stack using g e t params
func (o *GetResourceByStackUsingGETParams) WithContext(ctx context.Context) *GetResourceByStackUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get resource by stack using g e t params
func (o *GetResourceByStackUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get resource by stack using g e t params
func (o *GetResourceByStackUsingGETParams) WithHTTPClient(client *http.Client) *GetResourceByStackUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get resource by stack using g e t params
func (o *GetResourceByStackUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBranch adds the branch to the get resource by stack using g e t params
func (o *GetResourceByStackUsingGETParams) WithBranch(branch *string) *GetResourceByStackUsingGETParams {
	o.SetBranch(branch)
	return o
}

// SetBranch adds the branch to the get resource by stack using g e t params
func (o *GetResourceByStackUsingGETParams) SetBranch(branch *string) {
	o.Branch = branch
}

// WithResourceName adds the resourceName to the get resource by stack using g e t params
func (o *GetResourceByStackUsingGETParams) WithResourceName(resourceName string) *GetResourceByStackUsingGETParams {
	o.SetResourceName(resourceName)
	return o
}

// SetResourceName adds the resourceName to the get resource by stack using g e t params
func (o *GetResourceByStackUsingGETParams) SetResourceName(resourceName string) {
	o.ResourceName = resourceName
}

// WithResourceType adds the resourceType to the get resource by stack using g e t params
func (o *GetResourceByStackUsingGETParams) WithResourceType(resourceType string) *GetResourceByStackUsingGETParams {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the get resource by stack using g e t params
func (o *GetResourceByStackUsingGETParams) SetResourceType(resourceType string) {
	o.ResourceType = resourceType
}

// WithStackName adds the stackName to the get resource by stack using g e t params
func (o *GetResourceByStackUsingGETParams) WithStackName(stackName string) *GetResourceByStackUsingGETParams {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the get resource by stack using g e t params
func (o *GetResourceByStackUsingGETParams) SetStackName(stackName string) {
	o.StackName = stackName
}

// WriteToRequest writes these params to a swagger request
func (o *GetResourceByStackUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Branch != nil {

		// query param branch
		var qrBranch string

		if o.Branch != nil {
			qrBranch = *o.Branch
		}
		qBranch := qrBranch
		if qBranch != "" {

			if err := r.SetQueryParam("branch", qBranch); err != nil {
				return err
			}
		}
	}

	// path param resourceName
	if err := r.SetPathParam("resourceName", o.ResourceName); err != nil {
		return err
	}

	// path param resourceType
	if err := r.SetPathParam("resourceType", o.ResourceType); err != nil {
		return err
	}

	// path param stackName
	if err := r.SetPathParam("stackName", o.StackName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
