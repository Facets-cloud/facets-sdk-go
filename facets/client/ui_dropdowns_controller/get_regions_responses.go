// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetRegionsReader is a Reader for the GetRegions structure.
type GetRegionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRegionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRegionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRegionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRegionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetRegionsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRegionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/dropdown/{cloud}/regions] getRegions", response, response.Code())
	}
}

// NewGetRegionsOK creates a GetRegionsOK with default headers values
func NewGetRegionsOK() *GetRegionsOK {
	return &GetRegionsOK{}
}

/*
GetRegionsOK describes a response with status code 200, with default header values.

OK
*/
type GetRegionsOK struct {
	Payload []*models.AllRegionsAndAZ
}

// IsSuccess returns true when this get regions o k response has a 2xx status code
func (o *GetRegionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get regions o k response has a 3xx status code
func (o *GetRegionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get regions o k response has a 4xx status code
func (o *GetRegionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get regions o k response has a 5xx status code
func (o *GetRegionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get regions o k response a status code equal to that given
func (o *GetRegionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get regions o k response
func (o *GetRegionsOK) Code() int {
	return 200
}

func (o *GetRegionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{cloud}/regions][%d] getRegionsOK %s", 200, payload)
}

func (o *GetRegionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{cloud}/regions][%d] getRegionsOK %s", 200, payload)
}

func (o *GetRegionsOK) GetPayload() []*models.AllRegionsAndAZ {
	return o.Payload
}

func (o *GetRegionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRegionsBadRequest creates a GetRegionsBadRequest with default headers values
func NewGetRegionsBadRequest() *GetRegionsBadRequest {
	return &GetRegionsBadRequest{}
}

/*
GetRegionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetRegionsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get regions bad request response has a 2xx status code
func (o *GetRegionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get regions bad request response has a 3xx status code
func (o *GetRegionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get regions bad request response has a 4xx status code
func (o *GetRegionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get regions bad request response has a 5xx status code
func (o *GetRegionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get regions bad request response a status code equal to that given
func (o *GetRegionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get regions bad request response
func (o *GetRegionsBadRequest) Code() int {
	return 400
}

func (o *GetRegionsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{cloud}/regions][%d] getRegionsBadRequest %s", 400, payload)
}

func (o *GetRegionsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{cloud}/regions][%d] getRegionsBadRequest %s", 400, payload)
}

func (o *GetRegionsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetRegionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRegionsNotFound creates a GetRegionsNotFound with default headers values
func NewGetRegionsNotFound() *GetRegionsNotFound {
	return &GetRegionsNotFound{}
}

/*
GetRegionsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetRegionsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get regions not found response has a 2xx status code
func (o *GetRegionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get regions not found response has a 3xx status code
func (o *GetRegionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get regions not found response has a 4xx status code
func (o *GetRegionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get regions not found response has a 5xx status code
func (o *GetRegionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get regions not found response a status code equal to that given
func (o *GetRegionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get regions not found response
func (o *GetRegionsNotFound) Code() int {
	return 404
}

func (o *GetRegionsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{cloud}/regions][%d] getRegionsNotFound %s", 404, payload)
}

func (o *GetRegionsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{cloud}/regions][%d] getRegionsNotFound %s", 404, payload)
}

func (o *GetRegionsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetRegionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRegionsMethodNotAllowed creates a GetRegionsMethodNotAllowed with default headers values
func NewGetRegionsMethodNotAllowed() *GetRegionsMethodNotAllowed {
	return &GetRegionsMethodNotAllowed{}
}

/*
GetRegionsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetRegionsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get regions method not allowed response has a 2xx status code
func (o *GetRegionsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get regions method not allowed response has a 3xx status code
func (o *GetRegionsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get regions method not allowed response has a 4xx status code
func (o *GetRegionsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get regions method not allowed response has a 5xx status code
func (o *GetRegionsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get regions method not allowed response a status code equal to that given
func (o *GetRegionsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get regions method not allowed response
func (o *GetRegionsMethodNotAllowed) Code() int {
	return 405
}

func (o *GetRegionsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{cloud}/regions][%d] getRegionsMethodNotAllowed %s", 405, payload)
}

func (o *GetRegionsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{cloud}/regions][%d] getRegionsMethodNotAllowed %s", 405, payload)
}

func (o *GetRegionsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetRegionsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRegionsInternalServerError creates a GetRegionsInternalServerError with default headers values
func NewGetRegionsInternalServerError() *GetRegionsInternalServerError {
	return &GetRegionsInternalServerError{}
}

/*
GetRegionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetRegionsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get regions internal server error response has a 2xx status code
func (o *GetRegionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get regions internal server error response has a 3xx status code
func (o *GetRegionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get regions internal server error response has a 4xx status code
func (o *GetRegionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get regions internal server error response has a 5xx status code
func (o *GetRegionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get regions internal server error response a status code equal to that given
func (o *GetRegionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get regions internal server error response
func (o *GetRegionsInternalServerError) Code() int {
	return 500
}

func (o *GetRegionsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{cloud}/regions][%d] getRegionsInternalServerError %s", 500, payload)
}

func (o *GetRegionsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{cloud}/regions][%d] getRegionsInternalServerError %s", 500, payload)
}

func (o *GetRegionsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetRegionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
