// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetRolePermissionsUsingGETReader is a Reader for the GetRolePermissionsUsingGET structure.
type GetRolePermissionsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRolePermissionsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRolePermissionsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRolePermissionsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRolePermissionsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRolePermissionsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/dropdown/rolePermissions/{role}] getRolePermissionsUsingGET", response, response.Code())
	}
}

// NewGetRolePermissionsUsingGETOK creates a GetRolePermissionsUsingGETOK with default headers values
func NewGetRolePermissionsUsingGETOK() *GetRolePermissionsUsingGETOK {
	return &GetRolePermissionsUsingGETOK{}
}

/*
GetRolePermissionsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetRolePermissionsUsingGETOK struct {
	Payload []*models.RBACEntity
}

// IsSuccess returns true when this get role permissions using g e t o k response has a 2xx status code
func (o *GetRolePermissionsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get role permissions using g e t o k response has a 3xx status code
func (o *GetRolePermissionsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get role permissions using g e t o k response has a 4xx status code
func (o *GetRolePermissionsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get role permissions using g e t o k response has a 5xx status code
func (o *GetRolePermissionsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get role permissions using g e t o k response a status code equal to that given
func (o *GetRolePermissionsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get role permissions using g e t o k response
func (o *GetRolePermissionsUsingGETOK) Code() int {
	return 200
}

func (o *GetRolePermissionsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsUsingGETOK %s", 200, payload)
}

func (o *GetRolePermissionsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsUsingGETOK %s", 200, payload)
}

func (o *GetRolePermissionsUsingGETOK) GetPayload() []*models.RBACEntity {
	return o.Payload
}

func (o *GetRolePermissionsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRolePermissionsUsingGETUnauthorized creates a GetRolePermissionsUsingGETUnauthorized with default headers values
func NewGetRolePermissionsUsingGETUnauthorized() *GetRolePermissionsUsingGETUnauthorized {
	return &GetRolePermissionsUsingGETUnauthorized{}
}

/*
GetRolePermissionsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRolePermissionsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get role permissions using g e t unauthorized response has a 2xx status code
func (o *GetRolePermissionsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get role permissions using g e t unauthorized response has a 3xx status code
func (o *GetRolePermissionsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get role permissions using g e t unauthorized response has a 4xx status code
func (o *GetRolePermissionsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get role permissions using g e t unauthorized response has a 5xx status code
func (o *GetRolePermissionsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get role permissions using g e t unauthorized response a status code equal to that given
func (o *GetRolePermissionsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get role permissions using g e t unauthorized response
func (o *GetRolePermissionsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetRolePermissionsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsUsingGETUnauthorized", 401)
}

func (o *GetRolePermissionsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsUsingGETUnauthorized", 401)
}

func (o *GetRolePermissionsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRolePermissionsUsingGETForbidden creates a GetRolePermissionsUsingGETForbidden with default headers values
func NewGetRolePermissionsUsingGETForbidden() *GetRolePermissionsUsingGETForbidden {
	return &GetRolePermissionsUsingGETForbidden{}
}

/*
GetRolePermissionsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRolePermissionsUsingGETForbidden struct {
}

// IsSuccess returns true when this get role permissions using g e t forbidden response has a 2xx status code
func (o *GetRolePermissionsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get role permissions using g e t forbidden response has a 3xx status code
func (o *GetRolePermissionsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get role permissions using g e t forbidden response has a 4xx status code
func (o *GetRolePermissionsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get role permissions using g e t forbidden response has a 5xx status code
func (o *GetRolePermissionsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get role permissions using g e t forbidden response a status code equal to that given
func (o *GetRolePermissionsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get role permissions using g e t forbidden response
func (o *GetRolePermissionsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetRolePermissionsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsUsingGETForbidden", 403)
}

func (o *GetRolePermissionsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsUsingGETForbidden", 403)
}

func (o *GetRolePermissionsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRolePermissionsUsingGETNotFound creates a GetRolePermissionsUsingGETNotFound with default headers values
func NewGetRolePermissionsUsingGETNotFound() *GetRolePermissionsUsingGETNotFound {
	return &GetRolePermissionsUsingGETNotFound{}
}

/*
GetRolePermissionsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetRolePermissionsUsingGETNotFound struct {
}

// IsSuccess returns true when this get role permissions using g e t not found response has a 2xx status code
func (o *GetRolePermissionsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get role permissions using g e t not found response has a 3xx status code
func (o *GetRolePermissionsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get role permissions using g e t not found response has a 4xx status code
func (o *GetRolePermissionsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get role permissions using g e t not found response has a 5xx status code
func (o *GetRolePermissionsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get role permissions using g e t not found response a status code equal to that given
func (o *GetRolePermissionsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get role permissions using g e t not found response
func (o *GetRolePermissionsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetRolePermissionsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsUsingGETNotFound", 404)
}

func (o *GetRolePermissionsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsUsingGETNotFound", 404)
}

func (o *GetRolePermissionsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
