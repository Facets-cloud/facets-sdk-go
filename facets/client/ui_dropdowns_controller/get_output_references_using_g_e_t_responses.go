// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetOutputReferencesUsingGETReader is a Reader for the GetOutputReferencesUsingGET structure.
type GetOutputReferencesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOutputReferencesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOutputReferencesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOutputReferencesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOutputReferencesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOutputReferencesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/dropdown/{stackName}/output/{outputType}/references] getOutputReferencesUsingGET", response, response.Code())
	}
}

// NewGetOutputReferencesUsingGETOK creates a GetOutputReferencesUsingGETOK with default headers values
func NewGetOutputReferencesUsingGETOK() *GetOutputReferencesUsingGETOK {
	return &GetOutputReferencesUsingGETOK{}
}

/*
GetOutputReferencesUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetOutputReferencesUsingGETOK struct {
	Payload []*models.OutputReference
}

// IsSuccess returns true when this get output references using g e t o k response has a 2xx status code
func (o *GetOutputReferencesUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get output references using g e t o k response has a 3xx status code
func (o *GetOutputReferencesUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get output references using g e t o k response has a 4xx status code
func (o *GetOutputReferencesUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get output references using g e t o k response has a 5xx status code
func (o *GetOutputReferencesUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get output references using g e t o k response a status code equal to that given
func (o *GetOutputReferencesUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get output references using g e t o k response
func (o *GetOutputReferencesUsingGETOK) Code() int {
	return 200
}

func (o *GetOutputReferencesUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output/{outputType}/references][%d] getOutputReferencesUsingGETOK %s", 200, payload)
}

func (o *GetOutputReferencesUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output/{outputType}/references][%d] getOutputReferencesUsingGETOK %s", 200, payload)
}

func (o *GetOutputReferencesUsingGETOK) GetPayload() []*models.OutputReference {
	return o.Payload
}

func (o *GetOutputReferencesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutputReferencesUsingGETUnauthorized creates a GetOutputReferencesUsingGETUnauthorized with default headers values
func NewGetOutputReferencesUsingGETUnauthorized() *GetOutputReferencesUsingGETUnauthorized {
	return &GetOutputReferencesUsingGETUnauthorized{}
}

/*
GetOutputReferencesUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOutputReferencesUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get output references using g e t unauthorized response has a 2xx status code
func (o *GetOutputReferencesUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get output references using g e t unauthorized response has a 3xx status code
func (o *GetOutputReferencesUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get output references using g e t unauthorized response has a 4xx status code
func (o *GetOutputReferencesUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get output references using g e t unauthorized response has a 5xx status code
func (o *GetOutputReferencesUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get output references using g e t unauthorized response a status code equal to that given
func (o *GetOutputReferencesUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get output references using g e t unauthorized response
func (o *GetOutputReferencesUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetOutputReferencesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output/{outputType}/references][%d] getOutputReferencesUsingGETUnauthorized", 401)
}

func (o *GetOutputReferencesUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output/{outputType}/references][%d] getOutputReferencesUsingGETUnauthorized", 401)
}

func (o *GetOutputReferencesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOutputReferencesUsingGETForbidden creates a GetOutputReferencesUsingGETForbidden with default headers values
func NewGetOutputReferencesUsingGETForbidden() *GetOutputReferencesUsingGETForbidden {
	return &GetOutputReferencesUsingGETForbidden{}
}

/*
GetOutputReferencesUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOutputReferencesUsingGETForbidden struct {
}

// IsSuccess returns true when this get output references using g e t forbidden response has a 2xx status code
func (o *GetOutputReferencesUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get output references using g e t forbidden response has a 3xx status code
func (o *GetOutputReferencesUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get output references using g e t forbidden response has a 4xx status code
func (o *GetOutputReferencesUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get output references using g e t forbidden response has a 5xx status code
func (o *GetOutputReferencesUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get output references using g e t forbidden response a status code equal to that given
func (o *GetOutputReferencesUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get output references using g e t forbidden response
func (o *GetOutputReferencesUsingGETForbidden) Code() int {
	return 403
}

func (o *GetOutputReferencesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output/{outputType}/references][%d] getOutputReferencesUsingGETForbidden", 403)
}

func (o *GetOutputReferencesUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output/{outputType}/references][%d] getOutputReferencesUsingGETForbidden", 403)
}

func (o *GetOutputReferencesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOutputReferencesUsingGETNotFound creates a GetOutputReferencesUsingGETNotFound with default headers values
func NewGetOutputReferencesUsingGETNotFound() *GetOutputReferencesUsingGETNotFound {
	return &GetOutputReferencesUsingGETNotFound{}
}

/*
GetOutputReferencesUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetOutputReferencesUsingGETNotFound struct {
}

// IsSuccess returns true when this get output references using g e t not found response has a 2xx status code
func (o *GetOutputReferencesUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get output references using g e t not found response has a 3xx status code
func (o *GetOutputReferencesUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get output references using g e t not found response has a 4xx status code
func (o *GetOutputReferencesUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get output references using g e t not found response has a 5xx status code
func (o *GetOutputReferencesUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get output references using g e t not found response a status code equal to that given
func (o *GetOutputReferencesUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get output references using g e t not found response
func (o *GetOutputReferencesUsingGETNotFound) Code() int {
	return 404
}

func (o *GetOutputReferencesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output/{outputType}/references][%d] getOutputReferencesUsingGETNotFound", 404)
}

func (o *GetOutputReferencesUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output/{outputType}/references][%d] getOutputReferencesUsingGETNotFound", 404)
}

func (o *GetOutputReferencesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
