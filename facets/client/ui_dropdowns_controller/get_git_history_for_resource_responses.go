// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetGitHistoryForResourceReader is a Reader for the GetGitHistoryForResource structure.
type GetGitHistoryForResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGitHistoryForResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGitHistoryForResourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGitHistoryForResourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGitHistoryForResourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetGitHistoryForResourceMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGitHistoryForResourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}] getGitHistoryForResource", response, response.Code())
	}
}

// NewGetGitHistoryForResourceOK creates a GetGitHistoryForResourceOK with default headers values
func NewGetGitHistoryForResourceOK() *GetGitHistoryForResourceOK {
	return &GetGitHistoryForResourceOK{}
}

/*
GetGitHistoryForResourceOK describes a response with status code 200, with default header values.

OK
*/
type GetGitHistoryForResourceOK struct {
	Payload *models.StackGitLog
}

// IsSuccess returns true when this get git history for resource o k response has a 2xx status code
func (o *GetGitHistoryForResourceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get git history for resource o k response has a 3xx status code
func (o *GetGitHistoryForResourceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git history for resource o k response has a 4xx status code
func (o *GetGitHistoryForResourceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get git history for resource o k response has a 5xx status code
func (o *GetGitHistoryForResourceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get git history for resource o k response a status code equal to that given
func (o *GetGitHistoryForResourceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get git history for resource o k response
func (o *GetGitHistoryForResourceOK) Code() int {
	return 200
}

func (o *GetGitHistoryForResourceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceOK %s", 200, payload)
}

func (o *GetGitHistoryForResourceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceOK %s", 200, payload)
}

func (o *GetGitHistoryForResourceOK) GetPayload() *models.StackGitLog {
	return o.Payload
}

func (o *GetGitHistoryForResourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StackGitLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGitHistoryForResourceBadRequest creates a GetGitHistoryForResourceBadRequest with default headers values
func NewGetGitHistoryForResourceBadRequest() *GetGitHistoryForResourceBadRequest {
	return &GetGitHistoryForResourceBadRequest{}
}

/*
GetGitHistoryForResourceBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetGitHistoryForResourceBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get git history for resource bad request response has a 2xx status code
func (o *GetGitHistoryForResourceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get git history for resource bad request response has a 3xx status code
func (o *GetGitHistoryForResourceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git history for resource bad request response has a 4xx status code
func (o *GetGitHistoryForResourceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get git history for resource bad request response has a 5xx status code
func (o *GetGitHistoryForResourceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get git history for resource bad request response a status code equal to that given
func (o *GetGitHistoryForResourceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get git history for resource bad request response
func (o *GetGitHistoryForResourceBadRequest) Code() int {
	return 400
}

func (o *GetGitHistoryForResourceBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceBadRequest %s", 400, payload)
}

func (o *GetGitHistoryForResourceBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceBadRequest %s", 400, payload)
}

func (o *GetGitHistoryForResourceBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetGitHistoryForResourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGitHistoryForResourceNotFound creates a GetGitHistoryForResourceNotFound with default headers values
func NewGetGitHistoryForResourceNotFound() *GetGitHistoryForResourceNotFound {
	return &GetGitHistoryForResourceNotFound{}
}

/*
GetGitHistoryForResourceNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetGitHistoryForResourceNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get git history for resource not found response has a 2xx status code
func (o *GetGitHistoryForResourceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get git history for resource not found response has a 3xx status code
func (o *GetGitHistoryForResourceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git history for resource not found response has a 4xx status code
func (o *GetGitHistoryForResourceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get git history for resource not found response has a 5xx status code
func (o *GetGitHistoryForResourceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get git history for resource not found response a status code equal to that given
func (o *GetGitHistoryForResourceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get git history for resource not found response
func (o *GetGitHistoryForResourceNotFound) Code() int {
	return 404
}

func (o *GetGitHistoryForResourceNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceNotFound %s", 404, payload)
}

func (o *GetGitHistoryForResourceNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceNotFound %s", 404, payload)
}

func (o *GetGitHistoryForResourceNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetGitHistoryForResourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGitHistoryForResourceMethodNotAllowed creates a GetGitHistoryForResourceMethodNotAllowed with default headers values
func NewGetGitHistoryForResourceMethodNotAllowed() *GetGitHistoryForResourceMethodNotAllowed {
	return &GetGitHistoryForResourceMethodNotAllowed{}
}

/*
GetGitHistoryForResourceMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetGitHistoryForResourceMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get git history for resource method not allowed response has a 2xx status code
func (o *GetGitHistoryForResourceMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get git history for resource method not allowed response has a 3xx status code
func (o *GetGitHistoryForResourceMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git history for resource method not allowed response has a 4xx status code
func (o *GetGitHistoryForResourceMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get git history for resource method not allowed response has a 5xx status code
func (o *GetGitHistoryForResourceMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get git history for resource method not allowed response a status code equal to that given
func (o *GetGitHistoryForResourceMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get git history for resource method not allowed response
func (o *GetGitHistoryForResourceMethodNotAllowed) Code() int {
	return 405
}

func (o *GetGitHistoryForResourceMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceMethodNotAllowed %s", 405, payload)
}

func (o *GetGitHistoryForResourceMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceMethodNotAllowed %s", 405, payload)
}

func (o *GetGitHistoryForResourceMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetGitHistoryForResourceMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGitHistoryForResourceInternalServerError creates a GetGitHistoryForResourceInternalServerError with default headers values
func NewGetGitHistoryForResourceInternalServerError() *GetGitHistoryForResourceInternalServerError {
	return &GetGitHistoryForResourceInternalServerError{}
}

/*
GetGitHistoryForResourceInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetGitHistoryForResourceInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get git history for resource internal server error response has a 2xx status code
func (o *GetGitHistoryForResourceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get git history for resource internal server error response has a 3xx status code
func (o *GetGitHistoryForResourceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git history for resource internal server error response has a 4xx status code
func (o *GetGitHistoryForResourceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get git history for resource internal server error response has a 5xx status code
func (o *GetGitHistoryForResourceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get git history for resource internal server error response a status code equal to that given
func (o *GetGitHistoryForResourceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get git history for resource internal server error response
func (o *GetGitHistoryForResourceInternalServerError) Code() int {
	return 500
}

func (o *GetGitHistoryForResourceInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceInternalServerError %s", 500, payload)
}

func (o *GetGitHistoryForResourceInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceInternalServerError %s", 500, payload)
}

func (o *GetGitHistoryForResourceInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetGitHistoryForResourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
