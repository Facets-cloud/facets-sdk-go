// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllVCSReader is a Reader for the GetAllVCS structure.
type GetAllVCSReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllVCSReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllVCSOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllVCSBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllVCSNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAllVCSMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllVCSInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/dropdown/vcs] getAllVCS", response, response.Code())
	}
}

// NewGetAllVCSOK creates a GetAllVCSOK with default headers values
func NewGetAllVCSOK() *GetAllVCSOK {
	return &GetAllVCSOK{}
}

/*
GetAllVCSOK describes a response with status code 200, with default header values.

OK
*/
type GetAllVCSOK struct {
	Payload []string
}

// IsSuccess returns true when this get all v c s o k response has a 2xx status code
func (o *GetAllVCSOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all v c s o k response has a 3xx status code
func (o *GetAllVCSOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all v c s o k response has a 4xx status code
func (o *GetAllVCSOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all v c s o k response has a 5xx status code
func (o *GetAllVCSOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all v c s o k response a status code equal to that given
func (o *GetAllVCSOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all v c s o k response
func (o *GetAllVCSOK) Code() int {
	return 200
}

func (o *GetAllVCSOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSOK %s", 200, payload)
}

func (o *GetAllVCSOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSOK %s", 200, payload)
}

func (o *GetAllVCSOK) GetPayload() []string {
	return o.Payload
}

func (o *GetAllVCSOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllVCSBadRequest creates a GetAllVCSBadRequest with default headers values
func NewGetAllVCSBadRequest() *GetAllVCSBadRequest {
	return &GetAllVCSBadRequest{}
}

/*
GetAllVCSBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAllVCSBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all v c s bad request response has a 2xx status code
func (o *GetAllVCSBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all v c s bad request response has a 3xx status code
func (o *GetAllVCSBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all v c s bad request response has a 4xx status code
func (o *GetAllVCSBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all v c s bad request response has a 5xx status code
func (o *GetAllVCSBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all v c s bad request response a status code equal to that given
func (o *GetAllVCSBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all v c s bad request response
func (o *GetAllVCSBadRequest) Code() int {
	return 400
}

func (o *GetAllVCSBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSBadRequest %s", 400, payload)
}

func (o *GetAllVCSBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSBadRequest %s", 400, payload)
}

func (o *GetAllVCSBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllVCSBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllVCSNotFound creates a GetAllVCSNotFound with default headers values
func NewGetAllVCSNotFound() *GetAllVCSNotFound {
	return &GetAllVCSNotFound{}
}

/*
GetAllVCSNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllVCSNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all v c s not found response has a 2xx status code
func (o *GetAllVCSNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all v c s not found response has a 3xx status code
func (o *GetAllVCSNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all v c s not found response has a 4xx status code
func (o *GetAllVCSNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all v c s not found response has a 5xx status code
func (o *GetAllVCSNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all v c s not found response a status code equal to that given
func (o *GetAllVCSNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all v c s not found response
func (o *GetAllVCSNotFound) Code() int {
	return 404
}

func (o *GetAllVCSNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSNotFound %s", 404, payload)
}

func (o *GetAllVCSNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSNotFound %s", 404, payload)
}

func (o *GetAllVCSNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllVCSNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllVCSMethodNotAllowed creates a GetAllVCSMethodNotAllowed with default headers values
func NewGetAllVCSMethodNotAllowed() *GetAllVCSMethodNotAllowed {
	return &GetAllVCSMethodNotAllowed{}
}

/*
GetAllVCSMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAllVCSMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all v c s method not allowed response has a 2xx status code
func (o *GetAllVCSMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all v c s method not allowed response has a 3xx status code
func (o *GetAllVCSMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all v c s method not allowed response has a 4xx status code
func (o *GetAllVCSMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all v c s method not allowed response has a 5xx status code
func (o *GetAllVCSMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get all v c s method not allowed response a status code equal to that given
func (o *GetAllVCSMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get all v c s method not allowed response
func (o *GetAllVCSMethodNotAllowed) Code() int {
	return 405
}

func (o *GetAllVCSMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSMethodNotAllowed %s", 405, payload)
}

func (o *GetAllVCSMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSMethodNotAllowed %s", 405, payload)
}

func (o *GetAllVCSMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllVCSMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllVCSInternalServerError creates a GetAllVCSInternalServerError with default headers values
func NewGetAllVCSInternalServerError() *GetAllVCSInternalServerError {
	return &GetAllVCSInternalServerError{}
}

/*
GetAllVCSInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAllVCSInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all v c s internal server error response has a 2xx status code
func (o *GetAllVCSInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all v c s internal server error response has a 3xx status code
func (o *GetAllVCSInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all v c s internal server error response has a 4xx status code
func (o *GetAllVCSInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all v c s internal server error response has a 5xx status code
func (o *GetAllVCSInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all v c s internal server error response a status code equal to that given
func (o *GetAllVCSInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all v c s internal server error response
func (o *GetAllVCSInternalServerError) Code() int {
	return 500
}

func (o *GetAllVCSInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSInternalServerError %s", 500, payload)
}

func (o *GetAllVCSInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSInternalServerError %s", 500, payload)
}

func (o *GetAllVCSInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllVCSInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
