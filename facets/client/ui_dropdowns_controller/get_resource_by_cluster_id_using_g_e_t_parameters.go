// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetResourceByClusterIDUsingGETParams creates a new GetResourceByClusterIDUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetResourceByClusterIDUsingGETParams() *GetResourceByClusterIDUsingGETParams {
	return &GetResourceByClusterIDUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetResourceByClusterIDUsingGETParamsWithTimeout creates a new GetResourceByClusterIDUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetResourceByClusterIDUsingGETParamsWithTimeout(timeout time.Duration) *GetResourceByClusterIDUsingGETParams {
	return &GetResourceByClusterIDUsingGETParams{
		timeout: timeout,
	}
}

// NewGetResourceByClusterIDUsingGETParamsWithContext creates a new GetResourceByClusterIDUsingGETParams object
// with the ability to set a context for a request.
func NewGetResourceByClusterIDUsingGETParamsWithContext(ctx context.Context) *GetResourceByClusterIDUsingGETParams {
	return &GetResourceByClusterIDUsingGETParams{
		Context: ctx,
	}
}

// NewGetResourceByClusterIDUsingGETParamsWithHTTPClient creates a new GetResourceByClusterIDUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetResourceByClusterIDUsingGETParamsWithHTTPClient(client *http.Client) *GetResourceByClusterIDUsingGETParams {
	return &GetResourceByClusterIDUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetResourceByClusterIDUsingGETParams contains all the parameters to send to the API endpoint

	for the get resource by cluster Id using g e t operation.

	Typically these are written to a http.Request.
*/
type GetResourceByClusterIDUsingGETParams struct {

	/* ClusterID.

	   clusterId
	*/
	ClusterID string

	/* IncludeContent.

	   includeContent
	*/
	IncludeContent *bool

	/* ResourceName.

	   resourceName
	*/
	ResourceName string

	/* ResourceType.

	   resourceType
	*/
	ResourceType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get resource by cluster Id using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetResourceByClusterIDUsingGETParams) WithDefaults() *GetResourceByClusterIDUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get resource by cluster Id using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetResourceByClusterIDUsingGETParams) SetDefaults() {
	var (
		includeContentDefault = bool(false)
	)

	val := GetResourceByClusterIDUsingGETParams{
		IncludeContent: &includeContentDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get resource by cluster Id using g e t params
func (o *GetResourceByClusterIDUsingGETParams) WithTimeout(timeout time.Duration) *GetResourceByClusterIDUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get resource by cluster Id using g e t params
func (o *GetResourceByClusterIDUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get resource by cluster Id using g e t params
func (o *GetResourceByClusterIDUsingGETParams) WithContext(ctx context.Context) *GetResourceByClusterIDUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get resource by cluster Id using g e t params
func (o *GetResourceByClusterIDUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get resource by cluster Id using g e t params
func (o *GetResourceByClusterIDUsingGETParams) WithHTTPClient(client *http.Client) *GetResourceByClusterIDUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get resource by cluster Id using g e t params
func (o *GetResourceByClusterIDUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the get resource by cluster Id using g e t params
func (o *GetResourceByClusterIDUsingGETParams) WithClusterID(clusterID string) *GetResourceByClusterIDUsingGETParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the get resource by cluster Id using g e t params
func (o *GetResourceByClusterIDUsingGETParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithIncludeContent adds the includeContent to the get resource by cluster Id using g e t params
func (o *GetResourceByClusterIDUsingGETParams) WithIncludeContent(includeContent *bool) *GetResourceByClusterIDUsingGETParams {
	o.SetIncludeContent(includeContent)
	return o
}

// SetIncludeContent adds the includeContent to the get resource by cluster Id using g e t params
func (o *GetResourceByClusterIDUsingGETParams) SetIncludeContent(includeContent *bool) {
	o.IncludeContent = includeContent
}

// WithResourceName adds the resourceName to the get resource by cluster Id using g e t params
func (o *GetResourceByClusterIDUsingGETParams) WithResourceName(resourceName string) *GetResourceByClusterIDUsingGETParams {
	o.SetResourceName(resourceName)
	return o
}

// SetResourceName adds the resourceName to the get resource by cluster Id using g e t params
func (o *GetResourceByClusterIDUsingGETParams) SetResourceName(resourceName string) {
	o.ResourceName = resourceName
}

// WithResourceType adds the resourceType to the get resource by cluster Id using g e t params
func (o *GetResourceByClusterIDUsingGETParams) WithResourceType(resourceType string) *GetResourceByClusterIDUsingGETParams {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the get resource by cluster Id using g e t params
func (o *GetResourceByClusterIDUsingGETParams) SetResourceType(resourceType string) {
	o.ResourceType = resourceType
}

// WriteToRequest writes these params to a swagger request
func (o *GetResourceByClusterIDUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID); err != nil {
		return err
	}

	if o.IncludeContent != nil {

		// query param includeContent
		var qrIncludeContent bool

		if o.IncludeContent != nil {
			qrIncludeContent = *o.IncludeContent
		}
		qIncludeContent := swag.FormatBool(qrIncludeContent)
		if qIncludeContent != "" {

			if err := r.SetQueryParam("includeContent", qIncludeContent); err != nil {
				return err
			}
		}
	}

	// path param resourceName
	if err := r.SetPathParam("resourceName", o.ResourceName); err != nil {
		return err
	}

	// path param resourceType
	if err := r.SetPathParam("resourceType", o.ResourceType); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
