// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllResourcesByStackUsingGETParams creates a new GetAllResourcesByStackUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllResourcesByStackUsingGETParams() *GetAllResourcesByStackUsingGETParams {
	return &GetAllResourcesByStackUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllResourcesByStackUsingGETParamsWithTimeout creates a new GetAllResourcesByStackUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetAllResourcesByStackUsingGETParamsWithTimeout(timeout time.Duration) *GetAllResourcesByStackUsingGETParams {
	return &GetAllResourcesByStackUsingGETParams{
		timeout: timeout,
	}
}

// NewGetAllResourcesByStackUsingGETParamsWithContext creates a new GetAllResourcesByStackUsingGETParams object
// with the ability to set a context for a request.
func NewGetAllResourcesByStackUsingGETParamsWithContext(ctx context.Context) *GetAllResourcesByStackUsingGETParams {
	return &GetAllResourcesByStackUsingGETParams{
		Context: ctx,
	}
}

// NewGetAllResourcesByStackUsingGETParamsWithHTTPClient creates a new GetAllResourcesByStackUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllResourcesByStackUsingGETParamsWithHTTPClient(client *http.Client) *GetAllResourcesByStackUsingGETParams {
	return &GetAllResourcesByStackUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetAllResourcesByStackUsingGETParams contains all the parameters to send to the API endpoint

	for the get all resources by stack using g e t operation.

	Typically these are written to a http.Request.
*/
type GetAllResourcesByStackUsingGETParams struct {

	/* Branch.

	   branch
	*/
	Branch *string

	/* ExcludeAddOns.

	   excludeAddOns
	*/
	ExcludeAddOns *bool

	/* IncludeContent.

	   includeContent
	*/
	IncludeContent *bool

	/* StackName.

	   stackName
	*/
	StackName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all resources by stack using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllResourcesByStackUsingGETParams) WithDefaults() *GetAllResourcesByStackUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all resources by stack using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllResourcesByStackUsingGETParams) SetDefaults() {
	var (
		excludeAddOnsDefault = bool(false)

		includeContentDefault = bool(false)
	)

	val := GetAllResourcesByStackUsingGETParams{
		ExcludeAddOns:  &excludeAddOnsDefault,
		IncludeContent: &includeContentDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get all resources by stack using g e t params
func (o *GetAllResourcesByStackUsingGETParams) WithTimeout(timeout time.Duration) *GetAllResourcesByStackUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all resources by stack using g e t params
func (o *GetAllResourcesByStackUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all resources by stack using g e t params
func (o *GetAllResourcesByStackUsingGETParams) WithContext(ctx context.Context) *GetAllResourcesByStackUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all resources by stack using g e t params
func (o *GetAllResourcesByStackUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all resources by stack using g e t params
func (o *GetAllResourcesByStackUsingGETParams) WithHTTPClient(client *http.Client) *GetAllResourcesByStackUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all resources by stack using g e t params
func (o *GetAllResourcesByStackUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBranch adds the branch to the get all resources by stack using g e t params
func (o *GetAllResourcesByStackUsingGETParams) WithBranch(branch *string) *GetAllResourcesByStackUsingGETParams {
	o.SetBranch(branch)
	return o
}

// SetBranch adds the branch to the get all resources by stack using g e t params
func (o *GetAllResourcesByStackUsingGETParams) SetBranch(branch *string) {
	o.Branch = branch
}

// WithExcludeAddOns adds the excludeAddOns to the get all resources by stack using g e t params
func (o *GetAllResourcesByStackUsingGETParams) WithExcludeAddOns(excludeAddOns *bool) *GetAllResourcesByStackUsingGETParams {
	o.SetExcludeAddOns(excludeAddOns)
	return o
}

// SetExcludeAddOns adds the excludeAddOns to the get all resources by stack using g e t params
func (o *GetAllResourcesByStackUsingGETParams) SetExcludeAddOns(excludeAddOns *bool) {
	o.ExcludeAddOns = excludeAddOns
}

// WithIncludeContent adds the includeContent to the get all resources by stack using g e t params
func (o *GetAllResourcesByStackUsingGETParams) WithIncludeContent(includeContent *bool) *GetAllResourcesByStackUsingGETParams {
	o.SetIncludeContent(includeContent)
	return o
}

// SetIncludeContent adds the includeContent to the get all resources by stack using g e t params
func (o *GetAllResourcesByStackUsingGETParams) SetIncludeContent(includeContent *bool) {
	o.IncludeContent = includeContent
}

// WithStackName adds the stackName to the get all resources by stack using g e t params
func (o *GetAllResourcesByStackUsingGETParams) WithStackName(stackName string) *GetAllResourcesByStackUsingGETParams {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the get all resources by stack using g e t params
func (o *GetAllResourcesByStackUsingGETParams) SetStackName(stackName string) {
	o.StackName = stackName
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllResourcesByStackUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Branch != nil {

		// query param branch
		var qrBranch string

		if o.Branch != nil {
			qrBranch = *o.Branch
		}
		qBranch := qrBranch
		if qBranch != "" {

			if err := r.SetQueryParam("branch", qBranch); err != nil {
				return err
			}
		}
	}

	if o.ExcludeAddOns != nil {

		// query param excludeAddOns
		var qrExcludeAddOns bool

		if o.ExcludeAddOns != nil {
			qrExcludeAddOns = *o.ExcludeAddOns
		}
		qExcludeAddOns := swag.FormatBool(qrExcludeAddOns)
		if qExcludeAddOns != "" {

			if err := r.SetQueryParam("excludeAddOns", qExcludeAddOns); err != nil {
				return err
			}
		}
	}

	if o.IncludeContent != nil {

		// query param includeContent
		var qrIncludeContent bool

		if o.IncludeContent != nil {
			qrIncludeContent = *o.IncludeContent
		}
		qIncludeContent := swag.FormatBool(qrIncludeContent)
		if qIncludeContent != "" {

			if err := r.SetQueryParam("includeContent", qIncludeContent); err != nil {
				return err
			}
		}
	}

	// path param stackName
	if err := r.SetPathParam("stackName", o.StackName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
