// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllPermissionsUsingGETReader is a Reader for the GetAllPermissionsUsingGET structure.
type GetAllPermissionsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllPermissionsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllPermissionsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllPermissionsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllPermissionsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllPermissionsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/dropdown/getAllPermissions] getAllPermissionsUsingGET", response, response.Code())
	}
}

// NewGetAllPermissionsUsingGETOK creates a GetAllPermissionsUsingGETOK with default headers values
func NewGetAllPermissionsUsingGETOK() *GetAllPermissionsUsingGETOK {
	return &GetAllPermissionsUsingGETOK{}
}

/*
GetAllPermissionsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllPermissionsUsingGETOK struct {
	Payload []*models.RBACEntity
}

// IsSuccess returns true when this get all permissions using g e t o k response has a 2xx status code
func (o *GetAllPermissionsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all permissions using g e t o k response has a 3xx status code
func (o *GetAllPermissionsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all permissions using g e t o k response has a 4xx status code
func (o *GetAllPermissionsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all permissions using g e t o k response has a 5xx status code
func (o *GetAllPermissionsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all permissions using g e t o k response a status code equal to that given
func (o *GetAllPermissionsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all permissions using g e t o k response
func (o *GetAllPermissionsUsingGETOK) Code() int {
	return 200
}

func (o *GetAllPermissionsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/getAllPermissions][%d] getAllPermissionsUsingGETOK %s", 200, payload)
}

func (o *GetAllPermissionsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/getAllPermissions][%d] getAllPermissionsUsingGETOK %s", 200, payload)
}

func (o *GetAllPermissionsUsingGETOK) GetPayload() []*models.RBACEntity {
	return o.Payload
}

func (o *GetAllPermissionsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllPermissionsUsingGETUnauthorized creates a GetAllPermissionsUsingGETUnauthorized with default headers values
func NewGetAllPermissionsUsingGETUnauthorized() *GetAllPermissionsUsingGETUnauthorized {
	return &GetAllPermissionsUsingGETUnauthorized{}
}

/*
GetAllPermissionsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllPermissionsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all permissions using g e t unauthorized response has a 2xx status code
func (o *GetAllPermissionsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all permissions using g e t unauthorized response has a 3xx status code
func (o *GetAllPermissionsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all permissions using g e t unauthorized response has a 4xx status code
func (o *GetAllPermissionsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all permissions using g e t unauthorized response has a 5xx status code
func (o *GetAllPermissionsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all permissions using g e t unauthorized response a status code equal to that given
func (o *GetAllPermissionsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all permissions using g e t unauthorized response
func (o *GetAllPermissionsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllPermissionsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/getAllPermissions][%d] getAllPermissionsUsingGETUnauthorized", 401)
}

func (o *GetAllPermissionsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/getAllPermissions][%d] getAllPermissionsUsingGETUnauthorized", 401)
}

func (o *GetAllPermissionsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllPermissionsUsingGETForbidden creates a GetAllPermissionsUsingGETForbidden with default headers values
func NewGetAllPermissionsUsingGETForbidden() *GetAllPermissionsUsingGETForbidden {
	return &GetAllPermissionsUsingGETForbidden{}
}

/*
GetAllPermissionsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllPermissionsUsingGETForbidden struct {
}

// IsSuccess returns true when this get all permissions using g e t forbidden response has a 2xx status code
func (o *GetAllPermissionsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all permissions using g e t forbidden response has a 3xx status code
func (o *GetAllPermissionsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all permissions using g e t forbidden response has a 4xx status code
func (o *GetAllPermissionsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all permissions using g e t forbidden response has a 5xx status code
func (o *GetAllPermissionsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all permissions using g e t forbidden response a status code equal to that given
func (o *GetAllPermissionsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all permissions using g e t forbidden response
func (o *GetAllPermissionsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllPermissionsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/getAllPermissions][%d] getAllPermissionsUsingGETForbidden", 403)
}

func (o *GetAllPermissionsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/getAllPermissions][%d] getAllPermissionsUsingGETForbidden", 403)
}

func (o *GetAllPermissionsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllPermissionsUsingGETNotFound creates a GetAllPermissionsUsingGETNotFound with default headers values
func NewGetAllPermissionsUsingGETNotFound() *GetAllPermissionsUsingGETNotFound {
	return &GetAllPermissionsUsingGETNotFound{}
}

/*
GetAllPermissionsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllPermissionsUsingGETNotFound struct {
}

// IsSuccess returns true when this get all permissions using g e t not found response has a 2xx status code
func (o *GetAllPermissionsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all permissions using g e t not found response has a 3xx status code
func (o *GetAllPermissionsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all permissions using g e t not found response has a 4xx status code
func (o *GetAllPermissionsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all permissions using g e t not found response has a 5xx status code
func (o *GetAllPermissionsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all permissions using g e t not found response a status code equal to that given
func (o *GetAllPermissionsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all permissions using g e t not found response
func (o *GetAllPermissionsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllPermissionsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/getAllPermissions][%d] getAllPermissionsUsingGETNotFound", 404)
}

func (o *GetAllPermissionsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/getAllPermissions][%d] getAllPermissionsUsingGETNotFound", 404)
}

func (o *GetAllPermissionsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
