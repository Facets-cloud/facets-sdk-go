// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSyncSubstackGitHistoryParams creates a new SyncSubstackGitHistoryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSyncSubstackGitHistoryParams() *SyncSubstackGitHistoryParams {
	return &SyncSubstackGitHistoryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSyncSubstackGitHistoryParamsWithTimeout creates a new SyncSubstackGitHistoryParams object
// with the ability to set a timeout on a request.
func NewSyncSubstackGitHistoryParamsWithTimeout(timeout time.Duration) *SyncSubstackGitHistoryParams {
	return &SyncSubstackGitHistoryParams{
		timeout: timeout,
	}
}

// NewSyncSubstackGitHistoryParamsWithContext creates a new SyncSubstackGitHistoryParams object
// with the ability to set a context for a request.
func NewSyncSubstackGitHistoryParamsWithContext(ctx context.Context) *SyncSubstackGitHistoryParams {
	return &SyncSubstackGitHistoryParams{
		Context: ctx,
	}
}

// NewSyncSubstackGitHistoryParamsWithHTTPClient creates a new SyncSubstackGitHistoryParams object
// with the ability to set a custom HTTPClient for a request.
func NewSyncSubstackGitHistoryParamsWithHTTPClient(client *http.Client) *SyncSubstackGitHistoryParams {
	return &SyncSubstackGitHistoryParams{
		HTTPClient: client,
	}
}

/*
SyncSubstackGitHistoryParams contains all the parameters to send to the API endpoint

	for the sync substack git history operation.

	Typically these are written to a http.Request.
*/
type SyncSubstackGitHistoryParams struct {

	// ForceSync.
	ForceSync string

	// SubstackName.
	SubstackName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the sync substack git history params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SyncSubstackGitHistoryParams) WithDefaults() *SyncSubstackGitHistoryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the sync substack git history params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SyncSubstackGitHistoryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the sync substack git history params
func (o *SyncSubstackGitHistoryParams) WithTimeout(timeout time.Duration) *SyncSubstackGitHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the sync substack git history params
func (o *SyncSubstackGitHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the sync substack git history params
func (o *SyncSubstackGitHistoryParams) WithContext(ctx context.Context) *SyncSubstackGitHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the sync substack git history params
func (o *SyncSubstackGitHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the sync substack git history params
func (o *SyncSubstackGitHistoryParams) WithHTTPClient(client *http.Client) *SyncSubstackGitHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the sync substack git history params
func (o *SyncSubstackGitHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForceSync adds the forceSync to the sync substack git history params
func (o *SyncSubstackGitHistoryParams) WithForceSync(forceSync string) *SyncSubstackGitHistoryParams {
	o.SetForceSync(forceSync)
	return o
}

// SetForceSync adds the forceSync to the sync substack git history params
func (o *SyncSubstackGitHistoryParams) SetForceSync(forceSync string) {
	o.ForceSync = forceSync
}

// WithSubstackName adds the substackName to the sync substack git history params
func (o *SyncSubstackGitHistoryParams) WithSubstackName(substackName string) *SyncSubstackGitHistoryParams {
	o.SetSubstackName(substackName)
	return o
}

// SetSubstackName adds the substackName to the sync substack git history params
func (o *SyncSubstackGitHistoryParams) SetSubstackName(substackName string) {
	o.SubstackName = substackName
}

// WriteToRequest writes these params to a swagger request
func (o *SyncSubstackGitHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param forceSync
	qrForceSync := o.ForceSync
	qForceSync := qrForceSync
	if qForceSync != "" {

		if err := r.SetQueryParam("forceSync", qForceSync); err != nil {
			return err
		}
	}

	// query param substackName
	qrSubstackName := o.SubstackName
	qSubstackName := qrSubstackName
	if qSubstackName != "" {

		if err := r.SetQueryParam("substackName", qSubstackName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
