// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetAllVCSUsingGETReader is a Reader for the GetAllVCSUsingGET structure.
type GetAllVCSUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllVCSUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllVCSUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllVCSUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllVCSUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllVCSUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/dropdown/vcs] getAllVCSUsingGET", response, response.Code())
	}
}

// NewGetAllVCSUsingGETOK creates a GetAllVCSUsingGETOK with default headers values
func NewGetAllVCSUsingGETOK() *GetAllVCSUsingGETOK {
	return &GetAllVCSUsingGETOK{}
}

/*
GetAllVCSUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllVCSUsingGETOK struct {
	Payload []string
}

// IsSuccess returns true when this get all v c s using g e t o k response has a 2xx status code
func (o *GetAllVCSUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all v c s using g e t o k response has a 3xx status code
func (o *GetAllVCSUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all v c s using g e t o k response has a 4xx status code
func (o *GetAllVCSUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all v c s using g e t o k response has a 5xx status code
func (o *GetAllVCSUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all v c s using g e t o k response a status code equal to that given
func (o *GetAllVCSUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all v c s using g e t o k response
func (o *GetAllVCSUsingGETOK) Code() int {
	return 200
}

func (o *GetAllVCSUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSUsingGETOK %s", 200, payload)
}

func (o *GetAllVCSUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSUsingGETOK %s", 200, payload)
}

func (o *GetAllVCSUsingGETOK) GetPayload() []string {
	return o.Payload
}

func (o *GetAllVCSUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllVCSUsingGETUnauthorized creates a GetAllVCSUsingGETUnauthorized with default headers values
func NewGetAllVCSUsingGETUnauthorized() *GetAllVCSUsingGETUnauthorized {
	return &GetAllVCSUsingGETUnauthorized{}
}

/*
GetAllVCSUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllVCSUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all v c s using g e t unauthorized response has a 2xx status code
func (o *GetAllVCSUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all v c s using g e t unauthorized response has a 3xx status code
func (o *GetAllVCSUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all v c s using g e t unauthorized response has a 4xx status code
func (o *GetAllVCSUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all v c s using g e t unauthorized response has a 5xx status code
func (o *GetAllVCSUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all v c s using g e t unauthorized response a status code equal to that given
func (o *GetAllVCSUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all v c s using g e t unauthorized response
func (o *GetAllVCSUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllVCSUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSUsingGETUnauthorized", 401)
}

func (o *GetAllVCSUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSUsingGETUnauthorized", 401)
}

func (o *GetAllVCSUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllVCSUsingGETForbidden creates a GetAllVCSUsingGETForbidden with default headers values
func NewGetAllVCSUsingGETForbidden() *GetAllVCSUsingGETForbidden {
	return &GetAllVCSUsingGETForbidden{}
}

/*
GetAllVCSUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllVCSUsingGETForbidden struct {
}

// IsSuccess returns true when this get all v c s using g e t forbidden response has a 2xx status code
func (o *GetAllVCSUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all v c s using g e t forbidden response has a 3xx status code
func (o *GetAllVCSUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all v c s using g e t forbidden response has a 4xx status code
func (o *GetAllVCSUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all v c s using g e t forbidden response has a 5xx status code
func (o *GetAllVCSUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all v c s using g e t forbidden response a status code equal to that given
func (o *GetAllVCSUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all v c s using g e t forbidden response
func (o *GetAllVCSUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllVCSUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSUsingGETForbidden", 403)
}

func (o *GetAllVCSUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSUsingGETForbidden", 403)
}

func (o *GetAllVCSUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllVCSUsingGETNotFound creates a GetAllVCSUsingGETNotFound with default headers values
func NewGetAllVCSUsingGETNotFound() *GetAllVCSUsingGETNotFound {
	return &GetAllVCSUsingGETNotFound{}
}

/*
GetAllVCSUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllVCSUsingGETNotFound struct {
}

// IsSuccess returns true when this get all v c s using g e t not found response has a 2xx status code
func (o *GetAllVCSUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all v c s using g e t not found response has a 3xx status code
func (o *GetAllVCSUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all v c s using g e t not found response has a 4xx status code
func (o *GetAllVCSUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all v c s using g e t not found response has a 5xx status code
func (o *GetAllVCSUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all v c s using g e t not found response a status code equal to that given
func (o *GetAllVCSUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all v c s using g e t not found response
func (o *GetAllVCSUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllVCSUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSUsingGETNotFound", 404)
}

func (o *GetAllVCSUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/vcs][%d] getAllVCSUsingGETNotFound", 404)
}

func (o *GetAllVCSUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
