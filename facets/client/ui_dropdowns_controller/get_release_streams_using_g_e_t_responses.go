// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetReleaseStreamsUsingGETReader is a Reader for the GetReleaseStreamsUsingGET structure.
type GetReleaseStreamsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReleaseStreamsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReleaseStreamsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetReleaseStreamsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetReleaseStreamsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReleaseStreamsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/dropdown/releaseStreams] getReleaseStreamsUsingGET", response, response.Code())
	}
}

// NewGetReleaseStreamsUsingGETOK creates a GetReleaseStreamsUsingGETOK with default headers values
func NewGetReleaseStreamsUsingGETOK() *GetReleaseStreamsUsingGETOK {
	return &GetReleaseStreamsUsingGETOK{}
}

/*
GetReleaseStreamsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetReleaseStreamsUsingGETOK struct {
	Payload []string
}

// IsSuccess returns true when this get release streams using g e t o k response has a 2xx status code
func (o *GetReleaseStreamsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get release streams using g e t o k response has a 3xx status code
func (o *GetReleaseStreamsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release streams using g e t o k response has a 4xx status code
func (o *GetReleaseStreamsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get release streams using g e t o k response has a 5xx status code
func (o *GetReleaseStreamsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get release streams using g e t o k response a status code equal to that given
func (o *GetReleaseStreamsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get release streams using g e t o k response
func (o *GetReleaseStreamsUsingGETOK) Code() int {
	return 200
}

func (o *GetReleaseStreamsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsUsingGETOK %s", 200, payload)
}

func (o *GetReleaseStreamsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsUsingGETOK %s", 200, payload)
}

func (o *GetReleaseStreamsUsingGETOK) GetPayload() []string {
	return o.Payload
}

func (o *GetReleaseStreamsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseStreamsUsingGETUnauthorized creates a GetReleaseStreamsUsingGETUnauthorized with default headers values
func NewGetReleaseStreamsUsingGETUnauthorized() *GetReleaseStreamsUsingGETUnauthorized {
	return &GetReleaseStreamsUsingGETUnauthorized{}
}

/*
GetReleaseStreamsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetReleaseStreamsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get release streams using g e t unauthorized response has a 2xx status code
func (o *GetReleaseStreamsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release streams using g e t unauthorized response has a 3xx status code
func (o *GetReleaseStreamsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release streams using g e t unauthorized response has a 4xx status code
func (o *GetReleaseStreamsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release streams using g e t unauthorized response has a 5xx status code
func (o *GetReleaseStreamsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get release streams using g e t unauthorized response a status code equal to that given
func (o *GetReleaseStreamsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get release streams using g e t unauthorized response
func (o *GetReleaseStreamsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetReleaseStreamsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsUsingGETUnauthorized", 401)
}

func (o *GetReleaseStreamsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsUsingGETUnauthorized", 401)
}

func (o *GetReleaseStreamsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReleaseStreamsUsingGETForbidden creates a GetReleaseStreamsUsingGETForbidden with default headers values
func NewGetReleaseStreamsUsingGETForbidden() *GetReleaseStreamsUsingGETForbidden {
	return &GetReleaseStreamsUsingGETForbidden{}
}

/*
GetReleaseStreamsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetReleaseStreamsUsingGETForbidden struct {
}

// IsSuccess returns true when this get release streams using g e t forbidden response has a 2xx status code
func (o *GetReleaseStreamsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release streams using g e t forbidden response has a 3xx status code
func (o *GetReleaseStreamsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release streams using g e t forbidden response has a 4xx status code
func (o *GetReleaseStreamsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release streams using g e t forbidden response has a 5xx status code
func (o *GetReleaseStreamsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get release streams using g e t forbidden response a status code equal to that given
func (o *GetReleaseStreamsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get release streams using g e t forbidden response
func (o *GetReleaseStreamsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetReleaseStreamsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsUsingGETForbidden", 403)
}

func (o *GetReleaseStreamsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsUsingGETForbidden", 403)
}

func (o *GetReleaseStreamsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReleaseStreamsUsingGETNotFound creates a GetReleaseStreamsUsingGETNotFound with default headers values
func NewGetReleaseStreamsUsingGETNotFound() *GetReleaseStreamsUsingGETNotFound {
	return &GetReleaseStreamsUsingGETNotFound{}
}

/*
GetReleaseStreamsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetReleaseStreamsUsingGETNotFound struct {
}

// IsSuccess returns true when this get release streams using g e t not found response has a 2xx status code
func (o *GetReleaseStreamsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release streams using g e t not found response has a 3xx status code
func (o *GetReleaseStreamsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release streams using g e t not found response has a 4xx status code
func (o *GetReleaseStreamsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release streams using g e t not found response has a 5xx status code
func (o *GetReleaseStreamsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get release streams using g e t not found response a status code equal to that given
func (o *GetReleaseStreamsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get release streams using g e t not found response
func (o *GetReleaseStreamsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetReleaseStreamsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsUsingGETNotFound", 404)
}

func (o *GetReleaseStreamsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/releaseStreams][%d] getReleaseStreamsUsingGETNotFound", 404)
}

func (o *GetReleaseStreamsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
