// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetAllResourcesByClusterParams creates a new GetAllResourcesByClusterParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllResourcesByClusterParams() *GetAllResourcesByClusterParams {
	return &GetAllResourcesByClusterParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllResourcesByClusterParamsWithTimeout creates a new GetAllResourcesByClusterParams object
// with the ability to set a timeout on a request.
func NewGetAllResourcesByClusterParamsWithTimeout(timeout time.Duration) *GetAllResourcesByClusterParams {
	return &GetAllResourcesByClusterParams{
		timeout: timeout,
	}
}

// NewGetAllResourcesByClusterParamsWithContext creates a new GetAllResourcesByClusterParams object
// with the ability to set a context for a request.
func NewGetAllResourcesByClusterParamsWithContext(ctx context.Context) *GetAllResourcesByClusterParams {
	return &GetAllResourcesByClusterParams{
		Context: ctx,
	}
}

// NewGetAllResourcesByClusterParamsWithHTTPClient creates a new GetAllResourcesByClusterParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllResourcesByClusterParamsWithHTTPClient(client *http.Client) *GetAllResourcesByClusterParams {
	return &GetAllResourcesByClusterParams{
		HTTPClient: client,
	}
}

/*
GetAllResourcesByClusterParams contains all the parameters to send to the API endpoint

	for the get all resources by cluster operation.

	Typically these are written to a http.Request.
*/
type GetAllResourcesByClusterParams struct {

	// ClusterID.
	ClusterID string

	// ExcludeAddOns.
	ExcludeAddOns *string

	// IncludeContent.
	IncludeContent *string

	// IncludeSubstack.
	IncludeSubstack *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all resources by cluster params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllResourcesByClusterParams) WithDefaults() *GetAllResourcesByClusterParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all resources by cluster params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllResourcesByClusterParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get all resources by cluster params
func (o *GetAllResourcesByClusterParams) WithTimeout(timeout time.Duration) *GetAllResourcesByClusterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all resources by cluster params
func (o *GetAllResourcesByClusterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all resources by cluster params
func (o *GetAllResourcesByClusterParams) WithContext(ctx context.Context) *GetAllResourcesByClusterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all resources by cluster params
func (o *GetAllResourcesByClusterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all resources by cluster params
func (o *GetAllResourcesByClusterParams) WithHTTPClient(client *http.Client) *GetAllResourcesByClusterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all resources by cluster params
func (o *GetAllResourcesByClusterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the get all resources by cluster params
func (o *GetAllResourcesByClusterParams) WithClusterID(clusterID string) *GetAllResourcesByClusterParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the get all resources by cluster params
func (o *GetAllResourcesByClusterParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithExcludeAddOns adds the excludeAddOns to the get all resources by cluster params
func (o *GetAllResourcesByClusterParams) WithExcludeAddOns(excludeAddOns *string) *GetAllResourcesByClusterParams {
	o.SetExcludeAddOns(excludeAddOns)
	return o
}

// SetExcludeAddOns adds the excludeAddOns to the get all resources by cluster params
func (o *GetAllResourcesByClusterParams) SetExcludeAddOns(excludeAddOns *string) {
	o.ExcludeAddOns = excludeAddOns
}

// WithIncludeContent adds the includeContent to the get all resources by cluster params
func (o *GetAllResourcesByClusterParams) WithIncludeContent(includeContent *string) *GetAllResourcesByClusterParams {
	o.SetIncludeContent(includeContent)
	return o
}

// SetIncludeContent adds the includeContent to the get all resources by cluster params
func (o *GetAllResourcesByClusterParams) SetIncludeContent(includeContent *string) {
	o.IncludeContent = includeContent
}

// WithIncludeSubstack adds the includeSubstack to the get all resources by cluster params
func (o *GetAllResourcesByClusterParams) WithIncludeSubstack(includeSubstack *string) *GetAllResourcesByClusterParams {
	o.SetIncludeSubstack(includeSubstack)
	return o
}

// SetIncludeSubstack adds the includeSubstack to the get all resources by cluster params
func (o *GetAllResourcesByClusterParams) SetIncludeSubstack(includeSubstack *string) {
	o.IncludeSubstack = includeSubstack
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllResourcesByClusterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID); err != nil {
		return err
	}

	if o.ExcludeAddOns != nil {

		// query param excludeAddOns
		var qrExcludeAddOns string

		if o.ExcludeAddOns != nil {
			qrExcludeAddOns = *o.ExcludeAddOns
		}
		qExcludeAddOns := qrExcludeAddOns
		if qExcludeAddOns != "" {

			if err := r.SetQueryParam("excludeAddOns", qExcludeAddOns); err != nil {
				return err
			}
		}
	}

	if o.IncludeContent != nil {

		// query param includeContent
		var qrIncludeContent string

		if o.IncludeContent != nil {
			qrIncludeContent = *o.IncludeContent
		}
		qIncludeContent := qrIncludeContent
		if qIncludeContent != "" {

			if err := r.SetQueryParam("includeContent", qIncludeContent); err != nil {
				return err
			}
		}
	}

	if o.IncludeSubstack != nil {

		// query param includeSubstack
		var qrIncludeSubstack string

		if o.IncludeSubstack != nil {
			qrIncludeSubstack = *o.IncludeSubstack
		}
		qIncludeSubstack := qrIncludeSubstack
		if qIncludeSubstack != "" {

			if err := r.SetQueryParam("includeSubstack", qIncludeSubstack); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
