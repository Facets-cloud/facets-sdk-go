// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllResourcesForAllClusterOfStackUsingGETParams creates a new GetAllResourcesForAllClusterOfStackUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllResourcesForAllClusterOfStackUsingGETParams() *GetAllResourcesForAllClusterOfStackUsingGETParams {
	return &GetAllResourcesForAllClusterOfStackUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllResourcesForAllClusterOfStackUsingGETParamsWithTimeout creates a new GetAllResourcesForAllClusterOfStackUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetAllResourcesForAllClusterOfStackUsingGETParamsWithTimeout(timeout time.Duration) *GetAllResourcesForAllClusterOfStackUsingGETParams {
	return &GetAllResourcesForAllClusterOfStackUsingGETParams{
		timeout: timeout,
	}
}

// NewGetAllResourcesForAllClusterOfStackUsingGETParamsWithContext creates a new GetAllResourcesForAllClusterOfStackUsingGETParams object
// with the ability to set a context for a request.
func NewGetAllResourcesForAllClusterOfStackUsingGETParamsWithContext(ctx context.Context) *GetAllResourcesForAllClusterOfStackUsingGETParams {
	return &GetAllResourcesForAllClusterOfStackUsingGETParams{
		Context: ctx,
	}
}

// NewGetAllResourcesForAllClusterOfStackUsingGETParamsWithHTTPClient creates a new GetAllResourcesForAllClusterOfStackUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllResourcesForAllClusterOfStackUsingGETParamsWithHTTPClient(client *http.Client) *GetAllResourcesForAllClusterOfStackUsingGETParams {
	return &GetAllResourcesForAllClusterOfStackUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetAllResourcesForAllClusterOfStackUsingGETParams contains all the parameters to send to the API endpoint

	for the get all resources for all cluster of stack using g e t operation.

	Typically these are written to a http.Request.
*/
type GetAllResourcesForAllClusterOfStackUsingGETParams struct {

	/* ExcludeAddOns.

	   excludeAddOns
	*/
	ExcludeAddOns *bool

	/* StackName.

	   stackName
	*/
	StackName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all resources for all cluster of stack using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllResourcesForAllClusterOfStackUsingGETParams) WithDefaults() *GetAllResourcesForAllClusterOfStackUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all resources for all cluster of stack using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllResourcesForAllClusterOfStackUsingGETParams) SetDefaults() {
	var (
		excludeAddOnsDefault = bool(false)
	)

	val := GetAllResourcesForAllClusterOfStackUsingGETParams{
		ExcludeAddOns: &excludeAddOnsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get all resources for all cluster of stack using g e t params
func (o *GetAllResourcesForAllClusterOfStackUsingGETParams) WithTimeout(timeout time.Duration) *GetAllResourcesForAllClusterOfStackUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all resources for all cluster of stack using g e t params
func (o *GetAllResourcesForAllClusterOfStackUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all resources for all cluster of stack using g e t params
func (o *GetAllResourcesForAllClusterOfStackUsingGETParams) WithContext(ctx context.Context) *GetAllResourcesForAllClusterOfStackUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all resources for all cluster of stack using g e t params
func (o *GetAllResourcesForAllClusterOfStackUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all resources for all cluster of stack using g e t params
func (o *GetAllResourcesForAllClusterOfStackUsingGETParams) WithHTTPClient(client *http.Client) *GetAllResourcesForAllClusterOfStackUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all resources for all cluster of stack using g e t params
func (o *GetAllResourcesForAllClusterOfStackUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExcludeAddOns adds the excludeAddOns to the get all resources for all cluster of stack using g e t params
func (o *GetAllResourcesForAllClusterOfStackUsingGETParams) WithExcludeAddOns(excludeAddOns *bool) *GetAllResourcesForAllClusterOfStackUsingGETParams {
	o.SetExcludeAddOns(excludeAddOns)
	return o
}

// SetExcludeAddOns adds the excludeAddOns to the get all resources for all cluster of stack using g e t params
func (o *GetAllResourcesForAllClusterOfStackUsingGETParams) SetExcludeAddOns(excludeAddOns *bool) {
	o.ExcludeAddOns = excludeAddOns
}

// WithStackName adds the stackName to the get all resources for all cluster of stack using g e t params
func (o *GetAllResourcesForAllClusterOfStackUsingGETParams) WithStackName(stackName string) *GetAllResourcesForAllClusterOfStackUsingGETParams {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the get all resources for all cluster of stack using g e t params
func (o *GetAllResourcesForAllClusterOfStackUsingGETParams) SetStackName(stackName string) {
	o.StackName = stackName
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllResourcesForAllClusterOfStackUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ExcludeAddOns != nil {

		// query param excludeAddOns
		var qrExcludeAddOns bool

		if o.ExcludeAddOns != nil {
			qrExcludeAddOns = *o.ExcludeAddOns
		}
		qExcludeAddOns := swag.FormatBool(qrExcludeAddOns)
		if qExcludeAddOns != "" {

			if err := r.SetQueryParam("excludeAddOns", qExcludeAddOns); err != nil {
				return err
			}
		}
	}

	// path param stackName
	if err := r.SetPathParam("stackName", o.StackName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
