// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetOutputReferencesByTypeReader is a Reader for the GetOutputReferencesByType structure.
type GetOutputReferencesByTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOutputReferencesByTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOutputReferencesByTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOutputReferencesByTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOutputReferencesByTypeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetOutputReferencesByTypeMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOutputReferencesByTypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/dropdown/{stackName}/output-references] getOutputReferencesByType", response, response.Code())
	}
}

// NewGetOutputReferencesByTypeOK creates a GetOutputReferencesByTypeOK with default headers values
func NewGetOutputReferencesByTypeOK() *GetOutputReferencesByTypeOK {
	return &GetOutputReferencesByTypeOK{}
}

/*
GetOutputReferencesByTypeOK describes a response with status code 200, with default header values.

OK
*/
type GetOutputReferencesByTypeOK struct {
	Payload []*models.OutputReference
}

// IsSuccess returns true when this get output references by type o k response has a 2xx status code
func (o *GetOutputReferencesByTypeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get output references by type o k response has a 3xx status code
func (o *GetOutputReferencesByTypeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get output references by type o k response has a 4xx status code
func (o *GetOutputReferencesByTypeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get output references by type o k response has a 5xx status code
func (o *GetOutputReferencesByTypeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get output references by type o k response a status code equal to that given
func (o *GetOutputReferencesByTypeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get output references by type o k response
func (o *GetOutputReferencesByTypeOK) Code() int {
	return 200
}

func (o *GetOutputReferencesByTypeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output-references][%d] getOutputReferencesByTypeOK %s", 200, payload)
}

func (o *GetOutputReferencesByTypeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output-references][%d] getOutputReferencesByTypeOK %s", 200, payload)
}

func (o *GetOutputReferencesByTypeOK) GetPayload() []*models.OutputReference {
	return o.Payload
}

func (o *GetOutputReferencesByTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutputReferencesByTypeBadRequest creates a GetOutputReferencesByTypeBadRequest with default headers values
func NewGetOutputReferencesByTypeBadRequest() *GetOutputReferencesByTypeBadRequest {
	return &GetOutputReferencesByTypeBadRequest{}
}

/*
GetOutputReferencesByTypeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetOutputReferencesByTypeBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get output references by type bad request response has a 2xx status code
func (o *GetOutputReferencesByTypeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get output references by type bad request response has a 3xx status code
func (o *GetOutputReferencesByTypeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get output references by type bad request response has a 4xx status code
func (o *GetOutputReferencesByTypeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get output references by type bad request response has a 5xx status code
func (o *GetOutputReferencesByTypeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get output references by type bad request response a status code equal to that given
func (o *GetOutputReferencesByTypeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get output references by type bad request response
func (o *GetOutputReferencesByTypeBadRequest) Code() int {
	return 400
}

func (o *GetOutputReferencesByTypeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output-references][%d] getOutputReferencesByTypeBadRequest %s", 400, payload)
}

func (o *GetOutputReferencesByTypeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output-references][%d] getOutputReferencesByTypeBadRequest %s", 400, payload)
}

func (o *GetOutputReferencesByTypeBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetOutputReferencesByTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutputReferencesByTypeNotFound creates a GetOutputReferencesByTypeNotFound with default headers values
func NewGetOutputReferencesByTypeNotFound() *GetOutputReferencesByTypeNotFound {
	return &GetOutputReferencesByTypeNotFound{}
}

/*
GetOutputReferencesByTypeNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetOutputReferencesByTypeNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get output references by type not found response has a 2xx status code
func (o *GetOutputReferencesByTypeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get output references by type not found response has a 3xx status code
func (o *GetOutputReferencesByTypeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get output references by type not found response has a 4xx status code
func (o *GetOutputReferencesByTypeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get output references by type not found response has a 5xx status code
func (o *GetOutputReferencesByTypeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get output references by type not found response a status code equal to that given
func (o *GetOutputReferencesByTypeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get output references by type not found response
func (o *GetOutputReferencesByTypeNotFound) Code() int {
	return 404
}

func (o *GetOutputReferencesByTypeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output-references][%d] getOutputReferencesByTypeNotFound %s", 404, payload)
}

func (o *GetOutputReferencesByTypeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output-references][%d] getOutputReferencesByTypeNotFound %s", 404, payload)
}

func (o *GetOutputReferencesByTypeNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetOutputReferencesByTypeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutputReferencesByTypeMethodNotAllowed creates a GetOutputReferencesByTypeMethodNotAllowed with default headers values
func NewGetOutputReferencesByTypeMethodNotAllowed() *GetOutputReferencesByTypeMethodNotAllowed {
	return &GetOutputReferencesByTypeMethodNotAllowed{}
}

/*
GetOutputReferencesByTypeMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetOutputReferencesByTypeMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get output references by type method not allowed response has a 2xx status code
func (o *GetOutputReferencesByTypeMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get output references by type method not allowed response has a 3xx status code
func (o *GetOutputReferencesByTypeMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get output references by type method not allowed response has a 4xx status code
func (o *GetOutputReferencesByTypeMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get output references by type method not allowed response has a 5xx status code
func (o *GetOutputReferencesByTypeMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get output references by type method not allowed response a status code equal to that given
func (o *GetOutputReferencesByTypeMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get output references by type method not allowed response
func (o *GetOutputReferencesByTypeMethodNotAllowed) Code() int {
	return 405
}

func (o *GetOutputReferencesByTypeMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output-references][%d] getOutputReferencesByTypeMethodNotAllowed %s", 405, payload)
}

func (o *GetOutputReferencesByTypeMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output-references][%d] getOutputReferencesByTypeMethodNotAllowed %s", 405, payload)
}

func (o *GetOutputReferencesByTypeMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetOutputReferencesByTypeMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutputReferencesByTypeInternalServerError creates a GetOutputReferencesByTypeInternalServerError with default headers values
func NewGetOutputReferencesByTypeInternalServerError() *GetOutputReferencesByTypeInternalServerError {
	return &GetOutputReferencesByTypeInternalServerError{}
}

/*
GetOutputReferencesByTypeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetOutputReferencesByTypeInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get output references by type internal server error response has a 2xx status code
func (o *GetOutputReferencesByTypeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get output references by type internal server error response has a 3xx status code
func (o *GetOutputReferencesByTypeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get output references by type internal server error response has a 4xx status code
func (o *GetOutputReferencesByTypeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get output references by type internal server error response has a 5xx status code
func (o *GetOutputReferencesByTypeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get output references by type internal server error response a status code equal to that given
func (o *GetOutputReferencesByTypeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get output references by type internal server error response
func (o *GetOutputReferencesByTypeInternalServerError) Code() int {
	return 500
}

func (o *GetOutputReferencesByTypeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output-references][%d] getOutputReferencesByTypeInternalServerError %s", 500, payload)
}

func (o *GetOutputReferencesByTypeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/{stackName}/output-references][%d] getOutputReferencesByTypeInternalServerError %s", 500, payload)
}

func (o *GetOutputReferencesByTypeInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetOutputReferencesByTypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
