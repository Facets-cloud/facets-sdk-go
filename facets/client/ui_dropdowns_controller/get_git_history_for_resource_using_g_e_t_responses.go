// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetGitHistoryForResourceUsingGETReader is a Reader for the GetGitHistoryForResourceUsingGET structure.
type GetGitHistoryForResourceUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGitHistoryForResourceUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGitHistoryForResourceUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetGitHistoryForResourceUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGitHistoryForResourceUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGitHistoryForResourceUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}] getGitHistoryForResourceUsingGET", response, response.Code())
	}
}

// NewGetGitHistoryForResourceUsingGETOK creates a GetGitHistoryForResourceUsingGETOK with default headers values
func NewGetGitHistoryForResourceUsingGETOK() *GetGitHistoryForResourceUsingGETOK {
	return &GetGitHistoryForResourceUsingGETOK{}
}

/*
GetGitHistoryForResourceUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetGitHistoryForResourceUsingGETOK struct {
	Payload *models.StackGitLog
}

// IsSuccess returns true when this get git history for resource using g e t o k response has a 2xx status code
func (o *GetGitHistoryForResourceUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get git history for resource using g e t o k response has a 3xx status code
func (o *GetGitHistoryForResourceUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git history for resource using g e t o k response has a 4xx status code
func (o *GetGitHistoryForResourceUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get git history for resource using g e t o k response has a 5xx status code
func (o *GetGitHistoryForResourceUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get git history for resource using g e t o k response a status code equal to that given
func (o *GetGitHistoryForResourceUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get git history for resource using g e t o k response
func (o *GetGitHistoryForResourceUsingGETOK) Code() int {
	return 200
}

func (o *GetGitHistoryForResourceUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceUsingGETOK %s", 200, payload)
}

func (o *GetGitHistoryForResourceUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceUsingGETOK %s", 200, payload)
}

func (o *GetGitHistoryForResourceUsingGETOK) GetPayload() *models.StackGitLog {
	return o.Payload
}

func (o *GetGitHistoryForResourceUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StackGitLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGitHistoryForResourceUsingGETUnauthorized creates a GetGitHistoryForResourceUsingGETUnauthorized with default headers values
func NewGetGitHistoryForResourceUsingGETUnauthorized() *GetGitHistoryForResourceUsingGETUnauthorized {
	return &GetGitHistoryForResourceUsingGETUnauthorized{}
}

/*
GetGitHistoryForResourceUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetGitHistoryForResourceUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get git history for resource using g e t unauthorized response has a 2xx status code
func (o *GetGitHistoryForResourceUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get git history for resource using g e t unauthorized response has a 3xx status code
func (o *GetGitHistoryForResourceUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git history for resource using g e t unauthorized response has a 4xx status code
func (o *GetGitHistoryForResourceUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get git history for resource using g e t unauthorized response has a 5xx status code
func (o *GetGitHistoryForResourceUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get git history for resource using g e t unauthorized response a status code equal to that given
func (o *GetGitHistoryForResourceUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get git history for resource using g e t unauthorized response
func (o *GetGitHistoryForResourceUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetGitHistoryForResourceUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceUsingGETUnauthorized", 401)
}

func (o *GetGitHistoryForResourceUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceUsingGETUnauthorized", 401)
}

func (o *GetGitHistoryForResourceUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGitHistoryForResourceUsingGETForbidden creates a GetGitHistoryForResourceUsingGETForbidden with default headers values
func NewGetGitHistoryForResourceUsingGETForbidden() *GetGitHistoryForResourceUsingGETForbidden {
	return &GetGitHistoryForResourceUsingGETForbidden{}
}

/*
GetGitHistoryForResourceUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetGitHistoryForResourceUsingGETForbidden struct {
}

// IsSuccess returns true when this get git history for resource using g e t forbidden response has a 2xx status code
func (o *GetGitHistoryForResourceUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get git history for resource using g e t forbidden response has a 3xx status code
func (o *GetGitHistoryForResourceUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git history for resource using g e t forbidden response has a 4xx status code
func (o *GetGitHistoryForResourceUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get git history for resource using g e t forbidden response has a 5xx status code
func (o *GetGitHistoryForResourceUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get git history for resource using g e t forbidden response a status code equal to that given
func (o *GetGitHistoryForResourceUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get git history for resource using g e t forbidden response
func (o *GetGitHistoryForResourceUsingGETForbidden) Code() int {
	return 403
}

func (o *GetGitHistoryForResourceUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceUsingGETForbidden", 403)
}

func (o *GetGitHistoryForResourceUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceUsingGETForbidden", 403)
}

func (o *GetGitHistoryForResourceUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGitHistoryForResourceUsingGETNotFound creates a GetGitHistoryForResourceUsingGETNotFound with default headers values
func NewGetGitHistoryForResourceUsingGETNotFound() *GetGitHistoryForResourceUsingGETNotFound {
	return &GetGitHistoryForResourceUsingGETNotFound{}
}

/*
GetGitHistoryForResourceUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetGitHistoryForResourceUsingGETNotFound struct {
}

// IsSuccess returns true when this get git history for resource using g e t not found response has a 2xx status code
func (o *GetGitHistoryForResourceUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get git history for resource using g e t not found response has a 3xx status code
func (o *GetGitHistoryForResourceUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git history for resource using g e t not found response has a 4xx status code
func (o *GetGitHistoryForResourceUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get git history for resource using g e t not found response has a 5xx status code
func (o *GetGitHistoryForResourceUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get git history for resource using g e t not found response a status code equal to that given
func (o *GetGitHistoryForResourceUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get git history for resource using g e t not found response
func (o *GetGitHistoryForResourceUsingGETNotFound) Code() int {
	return 404
}

func (o *GetGitHistoryForResourceUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceUsingGETNotFound", 404)
}

func (o *GetGitHistoryForResourceUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}][%d] getGitHistoryForResourceUsingGETNotFound", 404)
}

func (o *GetGitHistoryForResourceUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
