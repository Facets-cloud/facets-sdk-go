// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetOutputReferencesParams creates a new GetOutputReferencesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOutputReferencesParams() *GetOutputReferencesParams {
	return &GetOutputReferencesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOutputReferencesParamsWithTimeout creates a new GetOutputReferencesParams object
// with the ability to set a timeout on a request.
func NewGetOutputReferencesParamsWithTimeout(timeout time.Duration) *GetOutputReferencesParams {
	return &GetOutputReferencesParams{
		timeout: timeout,
	}
}

// NewGetOutputReferencesParamsWithContext creates a new GetOutputReferencesParams object
// with the ability to set a context for a request.
func NewGetOutputReferencesParamsWithContext(ctx context.Context) *GetOutputReferencesParams {
	return &GetOutputReferencesParams{
		Context: ctx,
	}
}

// NewGetOutputReferencesParamsWithHTTPClient creates a new GetOutputReferencesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOutputReferencesParamsWithHTTPClient(client *http.Client) *GetOutputReferencesParams {
	return &GetOutputReferencesParams{
		HTTPClient: client,
	}
}

/*
GetOutputReferencesParams contains all the parameters to send to the API endpoint

	for the get output references operation.

	Typically these are written to a http.Request.
*/
type GetOutputReferencesParams struct {

	// OutputType.
	OutputType string

	// ResourceName.
	ResourceName *string

	// ResourceType.
	ResourceType *string

	// StackName.
	StackName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get output references params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOutputReferencesParams) WithDefaults() *GetOutputReferencesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get output references params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOutputReferencesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get output references params
func (o *GetOutputReferencesParams) WithTimeout(timeout time.Duration) *GetOutputReferencesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get output references params
func (o *GetOutputReferencesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get output references params
func (o *GetOutputReferencesParams) WithContext(ctx context.Context) *GetOutputReferencesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get output references params
func (o *GetOutputReferencesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get output references params
func (o *GetOutputReferencesParams) WithHTTPClient(client *http.Client) *GetOutputReferencesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get output references params
func (o *GetOutputReferencesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOutputType adds the outputType to the get output references params
func (o *GetOutputReferencesParams) WithOutputType(outputType string) *GetOutputReferencesParams {
	o.SetOutputType(outputType)
	return o
}

// SetOutputType adds the outputType to the get output references params
func (o *GetOutputReferencesParams) SetOutputType(outputType string) {
	o.OutputType = outputType
}

// WithResourceName adds the resourceName to the get output references params
func (o *GetOutputReferencesParams) WithResourceName(resourceName *string) *GetOutputReferencesParams {
	o.SetResourceName(resourceName)
	return o
}

// SetResourceName adds the resourceName to the get output references params
func (o *GetOutputReferencesParams) SetResourceName(resourceName *string) {
	o.ResourceName = resourceName
}

// WithResourceType adds the resourceType to the get output references params
func (o *GetOutputReferencesParams) WithResourceType(resourceType *string) *GetOutputReferencesParams {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the get output references params
func (o *GetOutputReferencesParams) SetResourceType(resourceType *string) {
	o.ResourceType = resourceType
}

// WithStackName adds the stackName to the get output references params
func (o *GetOutputReferencesParams) WithStackName(stackName string) *GetOutputReferencesParams {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the get output references params
func (o *GetOutputReferencesParams) SetStackName(stackName string) {
	o.StackName = stackName
}

// WriteToRequest writes these params to a swagger request
func (o *GetOutputReferencesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param outputType
	if err := r.SetPathParam("outputType", o.OutputType); err != nil {
		return err
	}

	if o.ResourceName != nil {

		// query param resourceName
		var qrResourceName string

		if o.ResourceName != nil {
			qrResourceName = *o.ResourceName
		}
		qResourceName := qrResourceName
		if qResourceName != "" {

			if err := r.SetQueryParam("resourceName", qResourceName); err != nil {
				return err
			}
		}
	}

	if o.ResourceType != nil {

		// query param resourceType
		var qrResourceType string

		if o.ResourceType != nil {
			qrResourceType = *o.ResourceType
		}
		qResourceType := qrResourceType
		if qResourceType != "" {

			if err := r.SetQueryParam("resourceType", qResourceType); err != nil {
				return err
			}
		}
	}

	// path param stackName
	if err := r.SetPathParam("stackName", o.StackName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
