// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLaunchDAGUsingGETParams creates a new GetLaunchDAGUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetLaunchDAGUsingGETParams() *GetLaunchDAGUsingGETParams {
	return &GetLaunchDAGUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetLaunchDAGUsingGETParamsWithTimeout creates a new GetLaunchDAGUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetLaunchDAGUsingGETParamsWithTimeout(timeout time.Duration) *GetLaunchDAGUsingGETParams {
	return &GetLaunchDAGUsingGETParams{
		timeout: timeout,
	}
}

// NewGetLaunchDAGUsingGETParamsWithContext creates a new GetLaunchDAGUsingGETParams object
// with the ability to set a context for a request.
func NewGetLaunchDAGUsingGETParamsWithContext(ctx context.Context) *GetLaunchDAGUsingGETParams {
	return &GetLaunchDAGUsingGETParams{
		Context: ctx,
	}
}

// NewGetLaunchDAGUsingGETParamsWithHTTPClient creates a new GetLaunchDAGUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetLaunchDAGUsingGETParamsWithHTTPClient(client *http.Client) *GetLaunchDAGUsingGETParams {
	return &GetLaunchDAGUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetLaunchDAGUsingGETParams contains all the parameters to send to the API endpoint

	for the get launch d a g using g e t operation.

	Typically these are written to a http.Request.
*/
type GetLaunchDAGUsingGETParams struct {

	/* Cloud.

	   cloud
	*/
	Cloud string

	/* ClusterID.

	   clusterId
	*/
	ClusterID string

	/* IsDependent.

	   isDependent
	*/
	IsDependent *bool

	/* IsProvidedK8s.

	   isProvidedK8s
	*/
	IsProvidedK8s *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get launch d a g using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLaunchDAGUsingGETParams) WithDefaults() *GetLaunchDAGUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get launch d a g using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLaunchDAGUsingGETParams) SetDefaults() {
	var (
		isDependentDefault = bool(false)

		isProvidedK8sDefault = bool(false)
	)

	val := GetLaunchDAGUsingGETParams{
		IsDependent:   &isDependentDefault,
		IsProvidedK8s: &isProvidedK8sDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get launch d a g using g e t params
func (o *GetLaunchDAGUsingGETParams) WithTimeout(timeout time.Duration) *GetLaunchDAGUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get launch d a g using g e t params
func (o *GetLaunchDAGUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get launch d a g using g e t params
func (o *GetLaunchDAGUsingGETParams) WithContext(ctx context.Context) *GetLaunchDAGUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get launch d a g using g e t params
func (o *GetLaunchDAGUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get launch d a g using g e t params
func (o *GetLaunchDAGUsingGETParams) WithHTTPClient(client *http.Client) *GetLaunchDAGUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get launch d a g using g e t params
func (o *GetLaunchDAGUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCloud adds the cloud to the get launch d a g using g e t params
func (o *GetLaunchDAGUsingGETParams) WithCloud(cloud string) *GetLaunchDAGUsingGETParams {
	o.SetCloud(cloud)
	return o
}

// SetCloud adds the cloud to the get launch d a g using g e t params
func (o *GetLaunchDAGUsingGETParams) SetCloud(cloud string) {
	o.Cloud = cloud
}

// WithClusterID adds the clusterID to the get launch d a g using g e t params
func (o *GetLaunchDAGUsingGETParams) WithClusterID(clusterID string) *GetLaunchDAGUsingGETParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the get launch d a g using g e t params
func (o *GetLaunchDAGUsingGETParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithIsDependent adds the isDependent to the get launch d a g using g e t params
func (o *GetLaunchDAGUsingGETParams) WithIsDependent(isDependent *bool) *GetLaunchDAGUsingGETParams {
	o.SetIsDependent(isDependent)
	return o
}

// SetIsDependent adds the isDependent to the get launch d a g using g e t params
func (o *GetLaunchDAGUsingGETParams) SetIsDependent(isDependent *bool) {
	o.IsDependent = isDependent
}

// WithIsProvidedK8s adds the isProvidedK8s to the get launch d a g using g e t params
func (o *GetLaunchDAGUsingGETParams) WithIsProvidedK8s(isProvidedK8s *bool) *GetLaunchDAGUsingGETParams {
	o.SetIsProvidedK8s(isProvidedK8s)
	return o
}

// SetIsProvidedK8s adds the isProvidedK8s to the get launch d a g using g e t params
func (o *GetLaunchDAGUsingGETParams) SetIsProvidedK8s(isProvidedK8s *bool) {
	o.IsProvidedK8s = isProvidedK8s
}

// WriteToRequest writes these params to a swagger request
func (o *GetLaunchDAGUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cloud
	if err := r.SetPathParam("cloud", o.Cloud); err != nil {
		return err
	}

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID); err != nil {
		return err
	}

	if o.IsDependent != nil {

		// query param isDependent
		var qrIsDependent bool

		if o.IsDependent != nil {
			qrIsDependent = *o.IsDependent
		}
		qIsDependent := swag.FormatBool(qrIsDependent)
		if qIsDependent != "" {

			if err := r.SetQueryParam("isDependent", qIsDependent); err != nil {
				return err
			}
		}
	}

	if o.IsProvidedK8s != nil {

		// query param isProvidedK8s
		var qrIsProvidedK8s bool

		if o.IsProvidedK8s != nil {
			qrIsProvidedK8s = *o.IsProvidedK8s
		}
		qIsProvidedK8s := swag.FormatBool(qrIsProvidedK8s)
		if qIsProvidedK8s != "" {

			if err := r.SetQueryParam("isProvidedK8s", qIsProvidedK8s); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
