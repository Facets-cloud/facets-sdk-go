// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// SyncSubstackGitHistoryReader is a Reader for the SyncSubstackGitHistory structure.
type SyncSubstackGitHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SyncSubstackGitHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSyncSubstackGitHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSyncSubstackGitHistoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSyncSubstackGitHistoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewSyncSubstackGitHistoryMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSyncSubstackGitHistoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/dropdown/logs/substack] syncSubstackGitHistory", response, response.Code())
	}
}

// NewSyncSubstackGitHistoryOK creates a SyncSubstackGitHistoryOK with default headers values
func NewSyncSubstackGitHistoryOK() *SyncSubstackGitHistoryOK {
	return &SyncSubstackGitHistoryOK{}
}

/*
SyncSubstackGitHistoryOK describes a response with status code 200, with default header values.

OK
*/
type SyncSubstackGitHistoryOK struct {
}

// IsSuccess returns true when this sync substack git history o k response has a 2xx status code
func (o *SyncSubstackGitHistoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this sync substack git history o k response has a 3xx status code
func (o *SyncSubstackGitHistoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync substack git history o k response has a 4xx status code
func (o *SyncSubstackGitHistoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this sync substack git history o k response has a 5xx status code
func (o *SyncSubstackGitHistoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this sync substack git history o k response a status code equal to that given
func (o *SyncSubstackGitHistoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the sync substack git history o k response
func (o *SyncSubstackGitHistoryOK) Code() int {
	return 200
}

func (o *SyncSubstackGitHistoryOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/substack][%d] syncSubstackGitHistoryOK", 200)
}

func (o *SyncSubstackGitHistoryOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/substack][%d] syncSubstackGitHistoryOK", 200)
}

func (o *SyncSubstackGitHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncSubstackGitHistoryBadRequest creates a SyncSubstackGitHistoryBadRequest with default headers values
func NewSyncSubstackGitHistoryBadRequest() *SyncSubstackGitHistoryBadRequest {
	return &SyncSubstackGitHistoryBadRequest{}
}

/*
SyncSubstackGitHistoryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SyncSubstackGitHistoryBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this sync substack git history bad request response has a 2xx status code
func (o *SyncSubstackGitHistoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync substack git history bad request response has a 3xx status code
func (o *SyncSubstackGitHistoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync substack git history bad request response has a 4xx status code
func (o *SyncSubstackGitHistoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync substack git history bad request response has a 5xx status code
func (o *SyncSubstackGitHistoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this sync substack git history bad request response a status code equal to that given
func (o *SyncSubstackGitHistoryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the sync substack git history bad request response
func (o *SyncSubstackGitHistoryBadRequest) Code() int {
	return 400
}

func (o *SyncSubstackGitHistoryBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/substack][%d] syncSubstackGitHistoryBadRequest %s", 400, payload)
}

func (o *SyncSubstackGitHistoryBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/substack][%d] syncSubstackGitHistoryBadRequest %s", 400, payload)
}

func (o *SyncSubstackGitHistoryBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SyncSubstackGitHistoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncSubstackGitHistoryNotFound creates a SyncSubstackGitHistoryNotFound with default headers values
func NewSyncSubstackGitHistoryNotFound() *SyncSubstackGitHistoryNotFound {
	return &SyncSubstackGitHistoryNotFound{}
}

/*
SyncSubstackGitHistoryNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SyncSubstackGitHistoryNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this sync substack git history not found response has a 2xx status code
func (o *SyncSubstackGitHistoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync substack git history not found response has a 3xx status code
func (o *SyncSubstackGitHistoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync substack git history not found response has a 4xx status code
func (o *SyncSubstackGitHistoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync substack git history not found response has a 5xx status code
func (o *SyncSubstackGitHistoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this sync substack git history not found response a status code equal to that given
func (o *SyncSubstackGitHistoryNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the sync substack git history not found response
func (o *SyncSubstackGitHistoryNotFound) Code() int {
	return 404
}

func (o *SyncSubstackGitHistoryNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/substack][%d] syncSubstackGitHistoryNotFound %s", 404, payload)
}

func (o *SyncSubstackGitHistoryNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/substack][%d] syncSubstackGitHistoryNotFound %s", 404, payload)
}

func (o *SyncSubstackGitHistoryNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SyncSubstackGitHistoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncSubstackGitHistoryMethodNotAllowed creates a SyncSubstackGitHistoryMethodNotAllowed with default headers values
func NewSyncSubstackGitHistoryMethodNotAllowed() *SyncSubstackGitHistoryMethodNotAllowed {
	return &SyncSubstackGitHistoryMethodNotAllowed{}
}

/*
SyncSubstackGitHistoryMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type SyncSubstackGitHistoryMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this sync substack git history method not allowed response has a 2xx status code
func (o *SyncSubstackGitHistoryMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync substack git history method not allowed response has a 3xx status code
func (o *SyncSubstackGitHistoryMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync substack git history method not allowed response has a 4xx status code
func (o *SyncSubstackGitHistoryMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync substack git history method not allowed response has a 5xx status code
func (o *SyncSubstackGitHistoryMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this sync substack git history method not allowed response a status code equal to that given
func (o *SyncSubstackGitHistoryMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the sync substack git history method not allowed response
func (o *SyncSubstackGitHistoryMethodNotAllowed) Code() int {
	return 405
}

func (o *SyncSubstackGitHistoryMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/substack][%d] syncSubstackGitHistoryMethodNotAllowed %s", 405, payload)
}

func (o *SyncSubstackGitHistoryMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/substack][%d] syncSubstackGitHistoryMethodNotAllowed %s", 405, payload)
}

func (o *SyncSubstackGitHistoryMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SyncSubstackGitHistoryMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncSubstackGitHistoryInternalServerError creates a SyncSubstackGitHistoryInternalServerError with default headers values
func NewSyncSubstackGitHistoryInternalServerError() *SyncSubstackGitHistoryInternalServerError {
	return &SyncSubstackGitHistoryInternalServerError{}
}

/*
SyncSubstackGitHistoryInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type SyncSubstackGitHistoryInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this sync substack git history internal server error response has a 2xx status code
func (o *SyncSubstackGitHistoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync substack git history internal server error response has a 3xx status code
func (o *SyncSubstackGitHistoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync substack git history internal server error response has a 4xx status code
func (o *SyncSubstackGitHistoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this sync substack git history internal server error response has a 5xx status code
func (o *SyncSubstackGitHistoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this sync substack git history internal server error response a status code equal to that given
func (o *SyncSubstackGitHistoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the sync substack git history internal server error response
func (o *SyncSubstackGitHistoryInternalServerError) Code() int {
	return 500
}

func (o *SyncSubstackGitHistoryInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/substack][%d] syncSubstackGitHistoryInternalServerError %s", 500, payload)
}

func (o *SyncSubstackGitHistoryInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/substack][%d] syncSubstackGitHistoryInternalServerError %s", 500, payload)
}

func (o *SyncSubstackGitHistoryInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SyncSubstackGitHistoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
