// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// SyncClusterHistoryUsingPOSTReader is a Reader for the SyncClusterHistoryUsingPOST structure.
type SyncClusterHistoryUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SyncClusterHistoryUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSyncClusterHistoryUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewSyncClusterHistoryUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSyncClusterHistoryUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSyncClusterHistoryUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSyncClusterHistoryUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/dropdown/logs/cluster/{clusterId}] syncClusterHistoryUsingPOST", response, response.Code())
	}
}

// NewSyncClusterHistoryUsingPOSTOK creates a SyncClusterHistoryUsingPOSTOK with default headers values
func NewSyncClusterHistoryUsingPOSTOK() *SyncClusterHistoryUsingPOSTOK {
	return &SyncClusterHistoryUsingPOSTOK{}
}

/*
SyncClusterHistoryUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type SyncClusterHistoryUsingPOSTOK struct {
}

// IsSuccess returns true when this sync cluster history using p o s t o k response has a 2xx status code
func (o *SyncClusterHistoryUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this sync cluster history using p o s t o k response has a 3xx status code
func (o *SyncClusterHistoryUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync cluster history using p o s t o k response has a 4xx status code
func (o *SyncClusterHistoryUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this sync cluster history using p o s t o k response has a 5xx status code
func (o *SyncClusterHistoryUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this sync cluster history using p o s t o k response a status code equal to that given
func (o *SyncClusterHistoryUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the sync cluster history using p o s t o k response
func (o *SyncClusterHistoryUsingPOSTOK) Code() int {
	return 200
}

func (o *SyncClusterHistoryUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/cluster/{clusterId}][%d] syncClusterHistoryUsingPOSTOK", 200)
}

func (o *SyncClusterHistoryUsingPOSTOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/cluster/{clusterId}][%d] syncClusterHistoryUsingPOSTOK", 200)
}

func (o *SyncClusterHistoryUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncClusterHistoryUsingPOSTCreated creates a SyncClusterHistoryUsingPOSTCreated with default headers values
func NewSyncClusterHistoryUsingPOSTCreated() *SyncClusterHistoryUsingPOSTCreated {
	return &SyncClusterHistoryUsingPOSTCreated{}
}

/*
SyncClusterHistoryUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type SyncClusterHistoryUsingPOSTCreated struct {
}

// IsSuccess returns true when this sync cluster history using p o s t created response has a 2xx status code
func (o *SyncClusterHistoryUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this sync cluster history using p o s t created response has a 3xx status code
func (o *SyncClusterHistoryUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync cluster history using p o s t created response has a 4xx status code
func (o *SyncClusterHistoryUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this sync cluster history using p o s t created response has a 5xx status code
func (o *SyncClusterHistoryUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this sync cluster history using p o s t created response a status code equal to that given
func (o *SyncClusterHistoryUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the sync cluster history using p o s t created response
func (o *SyncClusterHistoryUsingPOSTCreated) Code() int {
	return 201
}

func (o *SyncClusterHistoryUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/cluster/{clusterId}][%d] syncClusterHistoryUsingPOSTCreated", 201)
}

func (o *SyncClusterHistoryUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/cluster/{clusterId}][%d] syncClusterHistoryUsingPOSTCreated", 201)
}

func (o *SyncClusterHistoryUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncClusterHistoryUsingPOSTUnauthorized creates a SyncClusterHistoryUsingPOSTUnauthorized with default headers values
func NewSyncClusterHistoryUsingPOSTUnauthorized() *SyncClusterHistoryUsingPOSTUnauthorized {
	return &SyncClusterHistoryUsingPOSTUnauthorized{}
}

/*
SyncClusterHistoryUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SyncClusterHistoryUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this sync cluster history using p o s t unauthorized response has a 2xx status code
func (o *SyncClusterHistoryUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync cluster history using p o s t unauthorized response has a 3xx status code
func (o *SyncClusterHistoryUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync cluster history using p o s t unauthorized response has a 4xx status code
func (o *SyncClusterHistoryUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync cluster history using p o s t unauthorized response has a 5xx status code
func (o *SyncClusterHistoryUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this sync cluster history using p o s t unauthorized response a status code equal to that given
func (o *SyncClusterHistoryUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the sync cluster history using p o s t unauthorized response
func (o *SyncClusterHistoryUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *SyncClusterHistoryUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/cluster/{clusterId}][%d] syncClusterHistoryUsingPOSTUnauthorized", 401)
}

func (o *SyncClusterHistoryUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/cluster/{clusterId}][%d] syncClusterHistoryUsingPOSTUnauthorized", 401)
}

func (o *SyncClusterHistoryUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncClusterHistoryUsingPOSTForbidden creates a SyncClusterHistoryUsingPOSTForbidden with default headers values
func NewSyncClusterHistoryUsingPOSTForbidden() *SyncClusterHistoryUsingPOSTForbidden {
	return &SyncClusterHistoryUsingPOSTForbidden{}
}

/*
SyncClusterHistoryUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SyncClusterHistoryUsingPOSTForbidden struct {
}

// IsSuccess returns true when this sync cluster history using p o s t forbidden response has a 2xx status code
func (o *SyncClusterHistoryUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync cluster history using p o s t forbidden response has a 3xx status code
func (o *SyncClusterHistoryUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync cluster history using p o s t forbidden response has a 4xx status code
func (o *SyncClusterHistoryUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync cluster history using p o s t forbidden response has a 5xx status code
func (o *SyncClusterHistoryUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this sync cluster history using p o s t forbidden response a status code equal to that given
func (o *SyncClusterHistoryUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the sync cluster history using p o s t forbidden response
func (o *SyncClusterHistoryUsingPOSTForbidden) Code() int {
	return 403
}

func (o *SyncClusterHistoryUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/cluster/{clusterId}][%d] syncClusterHistoryUsingPOSTForbidden", 403)
}

func (o *SyncClusterHistoryUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/cluster/{clusterId}][%d] syncClusterHistoryUsingPOSTForbidden", 403)
}

func (o *SyncClusterHistoryUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncClusterHistoryUsingPOSTNotFound creates a SyncClusterHistoryUsingPOSTNotFound with default headers values
func NewSyncClusterHistoryUsingPOSTNotFound() *SyncClusterHistoryUsingPOSTNotFound {
	return &SyncClusterHistoryUsingPOSTNotFound{}
}

/*
SyncClusterHistoryUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SyncClusterHistoryUsingPOSTNotFound struct {
}

// IsSuccess returns true when this sync cluster history using p o s t not found response has a 2xx status code
func (o *SyncClusterHistoryUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync cluster history using p o s t not found response has a 3xx status code
func (o *SyncClusterHistoryUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync cluster history using p o s t not found response has a 4xx status code
func (o *SyncClusterHistoryUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync cluster history using p o s t not found response has a 5xx status code
func (o *SyncClusterHistoryUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this sync cluster history using p o s t not found response a status code equal to that given
func (o *SyncClusterHistoryUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the sync cluster history using p o s t not found response
func (o *SyncClusterHistoryUsingPOSTNotFound) Code() int {
	return 404
}

func (o *SyncClusterHistoryUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/cluster/{clusterId}][%d] syncClusterHistoryUsingPOSTNotFound", 404)
}

func (o *SyncClusterHistoryUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/dropdown/logs/cluster/{clusterId}][%d] syncClusterHistoryUsingPOSTNotFound", 404)
}

func (o *SyncClusterHistoryUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
