// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui dropdowns controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui dropdowns controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui dropdowns controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui dropdowns controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAllClusterResourcesByStackUsingGET(params *GetAllClusterResourcesByStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllClusterResourcesByStackUsingGETOK, error)

	GetAllPermissionsUsingGET(params *GetAllPermissionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllPermissionsUsingGETOK, error)

	GetAllResourcesByClusterUsingGET(params *GetAllResourcesByClusterUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllResourcesByClusterUsingGETOK, error)

	GetAllResourcesByStackUsingGET(params *GetAllResourcesByStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllResourcesByStackUsingGETOK, error)

	GetAllResourcesForAllClusterOfStackUsingGET(params *GetAllResourcesForAllClusterOfStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllResourcesForAllClusterOfStackUsingGETOK, error)

	GetAllResourcesUsingGET(params *GetAllResourcesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllResourcesUsingGETOK, error)

	GetAllVCSUsingGET(params *GetAllVCSUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllVCSUsingGETOK, error)

	GetApplicationListByClusterIDAndResourceNameUsingGET(params *GetApplicationListByClusterIDAndResourceNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationListByClusterIDAndResourceNameUsingGETOK, error)

	GetFileFromFacetsModulesUsingGET(params *GetFileFromFacetsModulesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileFromFacetsModulesUsingGETOK, error)

	GetGitHistoryForResourceUsingGET(params *GetGitHistoryForResourceUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGitHistoryForResourceUsingGETOK, error)

	GetLaunchDAGUsingGET(params *GetLaunchDAGUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLaunchDAGUsingGETOK, error)

	GetOutputReferencesUsingGET(params *GetOutputReferencesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOutputReferencesUsingGETOK, error)

	GetRegionsUsingGET(params *GetRegionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRegionsUsingGETOK, error)

	GetReleaseStreamsUsingGET(params *GetReleaseStreamsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReleaseStreamsUsingGETOK, error)

	GetResourceByClusterIDUsingGET(params *GetResourceByClusterIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceByClusterIDUsingGETOK, error)

	GetResourceByStackUsingGET(params *GetResourceByStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceByStackUsingGETOK, error)

	GetResourceHistoriesByStackUsingGET(params *GetResourceHistoriesByStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceHistoriesByStackUsingGETOK, error)

	GetResourceHistoryOverviewByStackUsingGET(params *GetResourceHistoryOverviewByStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceHistoryOverviewByStackUsingGETOK, error)

	GetRolePermissionsUsingGET(params *GetRolePermissionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRolePermissionsUsingGETOK, error)

	GetServiceOverviewUsingGET(params *GetServiceOverviewUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceOverviewUsingGETOK, error)

	SyncClusterHistoryUsingPOST(params *SyncClusterHistoryUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncClusterHistoryUsingPOSTOK, *SyncClusterHistoryUsingPOSTCreated, error)

	SyncSubstackGitHistoryUsingPOST(params *SyncSubstackGitHistoryUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncSubstackGitHistoryUsingPOSTOK, *SyncSubstackGitHistoryUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAllClusterResourcesByStackUsingGET gets all cluster resources by stack
*/
func (a *Client) GetAllClusterResourcesByStackUsingGET(params *GetAllClusterResourcesByStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllClusterResourcesByStackUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllClusterResourcesByStackUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllClusterResourcesByStackUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/stack/{stackName}/{resourceType}/{resourceName}/cluster-resources-info",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllClusterResourcesByStackUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllClusterResourcesByStackUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllClusterResourcesByStackUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllPermissionsUsingGET gets all permissions
*/
func (a *Client) GetAllPermissionsUsingGET(params *GetAllPermissionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllPermissionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPermissionsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllPermissionsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/getAllPermissions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllPermissionsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllPermissionsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllPermissionsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllResourcesByClusterUsingGET gets all resources by cluster
*/
func (a *Client) GetAllResourcesByClusterUsingGET(params *GetAllResourcesByClusterUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllResourcesByClusterUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllResourcesByClusterUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllResourcesByClusterUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/cluster/{clusterId}/resources-info",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllResourcesByClusterUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllResourcesByClusterUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllResourcesByClusterUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllResourcesByStackUsingGET gets all resources by stack
*/
func (a *Client) GetAllResourcesByStackUsingGET(params *GetAllResourcesByStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllResourcesByStackUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllResourcesByStackUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllResourcesByStackUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/stack/{stackName}/resources-info",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllResourcesByStackUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllResourcesByStackUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllResourcesByStackUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllResourcesForAllClusterOfStackUsingGET gets all resources for all cluster of stack
*/
func (a *Client) GetAllResourcesForAllClusterOfStackUsingGET(params *GetAllResourcesForAllClusterOfStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllResourcesForAllClusterOfStackUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllResourcesForAllClusterOfStackUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllResourcesForAllClusterOfStackUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/stack/{stackName}/all-cluster-resources",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllResourcesForAllClusterOfStackUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllResourcesForAllClusterOfStackUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllResourcesForAllClusterOfStackUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllResourcesUsingGET gets all resources
*/
func (a *Client) GetAllResourcesUsingGET(params *GetAllResourcesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllResourcesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllResourcesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllResourcesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/cluster/{clusterId}/resources",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllResourcesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllResourcesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllResourcesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllVCSUsingGET gets all v c s
*/
func (a *Client) GetAllVCSUsingGET(params *GetAllVCSUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllVCSUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllVCSUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllVCSUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/vcs",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllVCSUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllVCSUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllVCSUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApplicationListByClusterIDAndResourceNameUsingGET gets application list by cluster Id and resource name
*/
func (a *Client) GetApplicationListByClusterIDAndResourceNameUsingGET(params *GetApplicationListByClusterIDAndResourceNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationListByClusterIDAndResourceNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationListByClusterIDAndResourceNameUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApplicationListByClusterIdAndResourceNameUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/{clusterId}/{resourceType}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationListByClusterIDAndResourceNameUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationListByClusterIDAndResourceNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationListByClusterIdAndResourceNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFileFromFacetsModulesUsingGET gets file from facets modules
*/
func (a *Client) GetFileFromFacetsModulesUsingGET(params *GetFileFromFacetsModulesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileFromFacetsModulesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileFromFacetsModulesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFileFromFacetsModulesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/file",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFileFromFacetsModulesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileFromFacetsModulesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFileFromFacetsModulesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGitHistoryForResourceUsingGET gets git history for resource
*/
func (a *Client) GetGitHistoryForResourceUsingGET(params *GetGitHistoryForResourceUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGitHistoryForResourceUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGitHistoryForResourceUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGitHistoryForResourceUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGitHistoryForResourceUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGitHistoryForResourceUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGitHistoryForResourceUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLaunchDAGUsingGET gets launch d a g
*/
func (a *Client) GetLaunchDAGUsingGET(params *GetLaunchDAGUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLaunchDAGUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLaunchDAGUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLaunchDAGUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/{clusterId}/cloud/{cloud}/launch-dag",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLaunchDAGUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLaunchDAGUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLaunchDAGUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOutputReferencesUsingGET gets output references
*/
func (a *Client) GetOutputReferencesUsingGET(params *GetOutputReferencesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOutputReferencesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOutputReferencesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOutputReferencesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/{stackName}/output/{outputType}/references",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOutputReferencesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOutputReferencesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOutputReferencesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRegionsUsingGET gets regions
*/
func (a *Client) GetRegionsUsingGET(params *GetRegionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRegionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRegionsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/{cloud}/regions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRegionsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRegionsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRegionsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReleaseStreamsUsingGET gets release streams
*/
func (a *Client) GetReleaseStreamsUsingGET(params *GetReleaseStreamsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReleaseStreamsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseStreamsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReleaseStreamsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/releaseStreams",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseStreamsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleaseStreamsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleaseStreamsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceByClusterIDUsingGET gets resource by cluster Id
*/
func (a *Client) GetResourceByClusterIDUsingGET(params *GetResourceByClusterIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceByClusterIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceByClusterIDUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceByClusterIdUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/cluster/{clusterId}/{resourceType}/{resourceName}/resource-info",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceByClusterIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceByClusterIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceByClusterIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceByStackUsingGET gets resource by stack
*/
func (a *Client) GetResourceByStackUsingGET(params *GetResourceByStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceByStackUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceByStackUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceByStackUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/stack/{stackName}/{resourceType}/{resourceName}/resource-info",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceByStackUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceByStackUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceByStackUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceHistoriesByStackUsingGET gets resource histories by stack
*/
func (a *Client) GetResourceHistoriesByStackUsingGET(params *GetResourceHistoriesByStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceHistoriesByStackUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceHistoriesByStackUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceHistoriesByStackUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/resource-history",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceHistoriesByStackUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceHistoriesByStackUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceHistoriesByStackUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceHistoryOverviewByStackUsingGET gets resource history overview by stack
*/
func (a *Client) GetResourceHistoryOverviewByStackUsingGET(params *GetResourceHistoryOverviewByStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceHistoryOverviewByStackUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceHistoryOverviewByStackUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceHistoryOverviewByStackUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/resource-history-overview",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceHistoryOverviewByStackUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceHistoryOverviewByStackUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceHistoryOverviewByStackUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRolePermissionsUsingGET gets role permissions
*/
func (a *Client) GetRolePermissionsUsingGET(params *GetRolePermissionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRolePermissionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRolePermissionsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRolePermissionsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/rolePermissions/{role}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRolePermissionsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRolePermissionsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRolePermissionsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServiceOverviewUsingGET gets service overview
*/
func (a *Client) GetServiceOverviewUsingGET(params *GetServiceOverviewUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceOverviewUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceOverviewUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServiceOverviewUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/stack/{stackName}/service/{serviceName}/overview",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServiceOverviewUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceOverviewUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceOverviewUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SyncClusterHistoryUsingPOST syncs cluster history
*/
func (a *Client) SyncClusterHistoryUsingPOST(params *SyncClusterHistoryUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncClusterHistoryUsingPOSTOK, *SyncClusterHistoryUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncClusterHistoryUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncClusterHistoryUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/dropdown/logs/cluster/{clusterId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncClusterHistoryUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SyncClusterHistoryUsingPOSTOK:
		return value, nil, nil
	case *SyncClusterHistoryUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_dropdowns_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SyncSubstackGitHistoryUsingPOST syncs substack git history
*/
func (a *Client) SyncSubstackGitHistoryUsingPOST(params *SyncSubstackGitHistoryUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncSubstackGitHistoryUsingPOSTOK, *SyncSubstackGitHistoryUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncSubstackGitHistoryUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncSubstackGitHistoryUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/dropdown/logs/substack",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncSubstackGitHistoryUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SyncSubstackGitHistoryUsingPOSTOK:
		return value, nil, nil
	case *SyncSubstackGitHistoryUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_dropdowns_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
