// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui dropdowns controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui dropdowns controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui dropdowns controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui dropdowns controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAffectedResourcesByCluster(params *GetAffectedResourcesByClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAffectedResourcesByClusterOK, error)

	GetAffectedResourcesByStack(params *GetAffectedResourcesByStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAffectedResourcesByStackOK, error)

	GetAllClusterResourcesByStack(params *GetAllClusterResourcesByStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllClusterResourcesByStackOK, error)

	GetAllPermissions(params *GetAllPermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllPermissionsOK, error)

	GetAllResources(params *GetAllResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllResourcesOK, error)

	GetAllResourcesByCluster(params *GetAllResourcesByClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllResourcesByClusterOK, error)

	GetAllResourcesByStack(params *GetAllResourcesByStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllResourcesByStackOK, error)

	GetAllResourcesForAllClusterOfStack(params *GetAllResourcesForAllClusterOfStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllResourcesForAllClusterOfStackOK, error)

	GetAllVCS(params *GetAllVCSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllVCSOK, error)

	GetApplicationListByClusterIDAndResourceName(params *GetApplicationListByClusterIDAndResourceNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationListByClusterIDAndResourceNameOK, error)

	GetAzForRegionByCloud(params *GetAzForRegionByCloudParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAzForRegionByCloudOK, error)

	GetFileFromFacetsModules(params *GetFileFromFacetsModulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileFromFacetsModulesOK, error)

	GetGitHistoryForResource(params *GetGitHistoryForResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGitHistoryForResourceOK, error)

	GetLaunchDAG(params *GetLaunchDAGParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLaunchDAGOK, error)

	GetOutputReferences(params *GetOutputReferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOutputReferencesOK, error)

	GetOutputReferencesByType(params *GetOutputReferencesByTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOutputReferencesByTypeOK, error)

	GetRegions(params *GetRegionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRegionsOK, error)

	GetRegionsV2(params *GetRegionsV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRegionsV2OK, error)

	GetReleaseStreams(params *GetReleaseStreamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReleaseStreamsOK, error)

	GetResourceByClusterID(params *GetResourceByClusterIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceByClusterIDOK, error)

	GetResourceByStack(params *GetResourceByStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceByStackOK, error)

	GetResourceHistoriesByStack(params *GetResourceHistoriesByStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceHistoriesByStackOK, error)

	GetResourceHistoryOverviewByStack(params *GetResourceHistoryOverviewByStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceHistoryOverviewByStackOK, error)

	GetRolePermissions(params *GetRolePermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRolePermissionsOK, error)

	GetServiceOverview(params *GetServiceOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceOverviewOK, error)

	SyncClusterHistory(params *SyncClusterHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncClusterHistoryOK, error)

	SyncSubstackGitHistory(params *SyncSubstackGitHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncSubstackGitHistoryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAffectedResourcesByCluster get affected resources by cluster API
*/
func (a *Client) GetAffectedResourcesByCluster(params *GetAffectedResourcesByClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAffectedResourcesByClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAffectedResourcesByClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAffectedResourcesByCluster",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/dropdown/cluster/{clusterId}/affected-resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAffectedResourcesByClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAffectedResourcesByClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAffectedResourcesByCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAffectedResourcesByStack get affected resources by stack API
*/
func (a *Client) GetAffectedResourcesByStack(params *GetAffectedResourcesByStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAffectedResourcesByStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAffectedResourcesByStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAffectedResourcesByStack",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/dropdown/stack/{stackName}/affected-resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAffectedResourcesByStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAffectedResourcesByStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAffectedResourcesByStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllClusterResourcesByStack get all cluster resources by stack API
*/
func (a *Client) GetAllClusterResourcesByStack(params *GetAllClusterResourcesByStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllClusterResourcesByStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllClusterResourcesByStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllClusterResourcesByStack",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/stack/{stackName}/{resourceType}/{resourceName}/cluster-resources-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllClusterResourcesByStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllClusterResourcesByStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllClusterResourcesByStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllPermissions get all permissions API
*/
func (a *Client) GetAllPermissions(params *GetAllPermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllPermissions",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/getAllPermissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllPermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllResources get all resources API
*/
func (a *Client) GetAllResources(params *GetAllResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllResources",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/cluster/{clusterId}/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllResourcesByCluster get all resources by cluster API
*/
func (a *Client) GetAllResourcesByCluster(params *GetAllResourcesByClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllResourcesByClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllResourcesByClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllResourcesByCluster",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/cluster/{clusterId}/resources-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllResourcesByClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllResourcesByClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllResourcesByCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllResourcesByStack get all resources by stack API
*/
func (a *Client) GetAllResourcesByStack(params *GetAllResourcesByStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllResourcesByStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllResourcesByStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllResourcesByStack",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/stack/{stackName}/resources-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllResourcesByStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllResourcesByStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllResourcesByStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllResourcesForAllClusterOfStack get all resources for all cluster of stack API
*/
func (a *Client) GetAllResourcesForAllClusterOfStack(params *GetAllResourcesForAllClusterOfStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllResourcesForAllClusterOfStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllResourcesForAllClusterOfStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllResourcesForAllClusterOfStack",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/stack/{stackName}/all-cluster-resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllResourcesForAllClusterOfStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllResourcesForAllClusterOfStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllResourcesForAllClusterOfStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllVCS get all v c s API
*/
func (a *Client) GetAllVCS(params *GetAllVCSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllVCSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllVCSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllVCS",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/vcs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllVCSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllVCSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllVCS: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApplicationListByClusterIDAndResourceName get application list by cluster Id and resource name API
*/
func (a *Client) GetApplicationListByClusterIDAndResourceName(params *GetApplicationListByClusterIDAndResourceNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationListByClusterIDAndResourceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationListByClusterIDAndResourceNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApplicationListByClusterIdAndResourceName",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/{clusterId}/{resourceType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationListByClusterIDAndResourceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationListByClusterIDAndResourceNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationListByClusterIdAndResourceName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAzForRegionByCloud get az for region by cloud API
*/
func (a *Client) GetAzForRegionByCloud(params *GetAzForRegionByCloudParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAzForRegionByCloudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzForRegionByCloudParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAzForRegionByCloud",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/{cloud}/region/{region}/availability-zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAzForRegionByCloudReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzForRegionByCloudOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzForRegionByCloud: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFileFromFacetsModules get file from facets modules API
*/
func (a *Client) GetFileFromFacetsModules(params *GetFileFromFacetsModulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileFromFacetsModulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileFromFacetsModulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFileFromFacetsModules",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFileFromFacetsModulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileFromFacetsModulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFileFromFacetsModules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGitHistoryForResource get git history for resource API
*/
func (a *Client) GetGitHistoryForResource(params *GetGitHistoryForResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGitHistoryForResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGitHistoryForResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGitHistoryForResource",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGitHistoryForResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGitHistoryForResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGitHistoryForResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLaunchDAG get launch d a g API
*/
func (a *Client) GetLaunchDAG(params *GetLaunchDAGParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLaunchDAGOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLaunchDAGParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLaunchDAG",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/{clusterId}/cloud/{cloud}/launch-dag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLaunchDAGReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLaunchDAGOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLaunchDAG: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOutputReferences get output references API
*/
func (a *Client) GetOutputReferences(params *GetOutputReferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOutputReferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOutputReferencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOutputReferences",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/{stackName}/output/{outputType}/references",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOutputReferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOutputReferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOutputReferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOutputReferencesByType get output references by type API
*/
func (a *Client) GetOutputReferencesByType(params *GetOutputReferencesByTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOutputReferencesByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOutputReferencesByTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOutputReferencesByType",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/{stackName}/output-references",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOutputReferencesByTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOutputReferencesByTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOutputReferencesByType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRegions get regions API
*/
func (a *Client) GetRegions(params *GetRegionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRegions",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/{cloud}/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRegionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRegions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRegionsV2 get regions v2 API
*/
func (a *Client) GetRegionsV2(params *GetRegionsV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRegionsV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionsV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRegionsV2",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/{cloud}/regions-v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRegionsV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRegionsV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRegionsV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReleaseStreams get release streams API
*/
func (a *Client) GetReleaseStreams(params *GetReleaseStreamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReleaseStreamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseStreamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReleaseStreams",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/releaseStreams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseStreamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleaseStreamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleaseStreams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceByClusterID get resource by cluster Id API
*/
func (a *Client) GetResourceByClusterID(params *GetResourceByClusterIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceByClusterIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceByClusterIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceByClusterId",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/cluster/{clusterId}/{resourceType}/{resourceName}/resource-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceByClusterIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceByClusterIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceByClusterId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceByStack get resource by stack API
*/
func (a *Client) GetResourceByStack(params *GetResourceByStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceByStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceByStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceByStack",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/stack/{stackName}/{resourceType}/{resourceName}/resource-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceByStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceByStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceByStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceHistoriesByStack get resource histories by stack API
*/
func (a *Client) GetResourceHistoriesByStack(params *GetResourceHistoriesByStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceHistoriesByStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceHistoriesByStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceHistoriesByStack",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/resource-history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceHistoriesByStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceHistoriesByStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceHistoriesByStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceHistoryOverviewByStack get resource history overview by stack API
*/
func (a *Client) GetResourceHistoryOverviewByStack(params *GetResourceHistoryOverviewByStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceHistoryOverviewByStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceHistoryOverviewByStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceHistoryOverviewByStack",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/resource-history-overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceHistoryOverviewByStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceHistoryOverviewByStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceHistoryOverviewByStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRolePermissions get role permissions API
*/
func (a *Client) GetRolePermissions(params *GetRolePermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRolePermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRolePermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRolePermissions",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/rolePermissions/{role}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRolePermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRolePermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRolePermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServiceOverview get service overview API
*/
func (a *Client) GetServiceOverview(params *GetServiceOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceOverviewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServiceOverview",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/dropdown/stack/{stackName}/service/{serviceName}/overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServiceOverviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceOverview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SyncClusterHistory sync cluster history API
*/
func (a *Client) SyncClusterHistory(params *SyncClusterHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncClusterHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncClusterHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncClusterHistory",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/dropdown/logs/cluster/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncClusterHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncClusterHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for syncClusterHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SyncSubstackGitHistory sync substack git history API
*/
func (a *Client) SyncSubstackGitHistory(params *SyncSubstackGitHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncSubstackGitHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncSubstackGitHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncSubstackGitHistory",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/dropdown/logs/substack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncSubstackGitHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncSubstackGitHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for syncSubstackGitHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
