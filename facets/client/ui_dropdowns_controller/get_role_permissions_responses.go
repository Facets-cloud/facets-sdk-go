// Code generated by go-swagger; DO NOT EDIT.

package ui_dropdowns_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetRolePermissionsReader is a Reader for the GetRolePermissions structure.
type GetRolePermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRolePermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRolePermissionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRolePermissionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRolePermissionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetRolePermissionsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRolePermissionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/dropdown/rolePermissions/{role}] getRolePermissions", response, response.Code())
	}
}

// NewGetRolePermissionsOK creates a GetRolePermissionsOK with default headers values
func NewGetRolePermissionsOK() *GetRolePermissionsOK {
	return &GetRolePermissionsOK{}
}

/*
GetRolePermissionsOK describes a response with status code 200, with default header values.

OK
*/
type GetRolePermissionsOK struct {
	Payload []string
}

// IsSuccess returns true when this get role permissions o k response has a 2xx status code
func (o *GetRolePermissionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get role permissions o k response has a 3xx status code
func (o *GetRolePermissionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get role permissions o k response has a 4xx status code
func (o *GetRolePermissionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get role permissions o k response has a 5xx status code
func (o *GetRolePermissionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get role permissions o k response a status code equal to that given
func (o *GetRolePermissionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get role permissions o k response
func (o *GetRolePermissionsOK) Code() int {
	return 200
}

func (o *GetRolePermissionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsOK %s", 200, payload)
}

func (o *GetRolePermissionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsOK %s", 200, payload)
}

func (o *GetRolePermissionsOK) GetPayload() []string {
	return o.Payload
}

func (o *GetRolePermissionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRolePermissionsBadRequest creates a GetRolePermissionsBadRequest with default headers values
func NewGetRolePermissionsBadRequest() *GetRolePermissionsBadRequest {
	return &GetRolePermissionsBadRequest{}
}

/*
GetRolePermissionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetRolePermissionsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get role permissions bad request response has a 2xx status code
func (o *GetRolePermissionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get role permissions bad request response has a 3xx status code
func (o *GetRolePermissionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get role permissions bad request response has a 4xx status code
func (o *GetRolePermissionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get role permissions bad request response has a 5xx status code
func (o *GetRolePermissionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get role permissions bad request response a status code equal to that given
func (o *GetRolePermissionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get role permissions bad request response
func (o *GetRolePermissionsBadRequest) Code() int {
	return 400
}

func (o *GetRolePermissionsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsBadRequest %s", 400, payload)
}

func (o *GetRolePermissionsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsBadRequest %s", 400, payload)
}

func (o *GetRolePermissionsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetRolePermissionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRolePermissionsNotFound creates a GetRolePermissionsNotFound with default headers values
func NewGetRolePermissionsNotFound() *GetRolePermissionsNotFound {
	return &GetRolePermissionsNotFound{}
}

/*
GetRolePermissionsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetRolePermissionsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get role permissions not found response has a 2xx status code
func (o *GetRolePermissionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get role permissions not found response has a 3xx status code
func (o *GetRolePermissionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get role permissions not found response has a 4xx status code
func (o *GetRolePermissionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get role permissions not found response has a 5xx status code
func (o *GetRolePermissionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get role permissions not found response a status code equal to that given
func (o *GetRolePermissionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get role permissions not found response
func (o *GetRolePermissionsNotFound) Code() int {
	return 404
}

func (o *GetRolePermissionsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsNotFound %s", 404, payload)
}

func (o *GetRolePermissionsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsNotFound %s", 404, payload)
}

func (o *GetRolePermissionsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetRolePermissionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRolePermissionsMethodNotAllowed creates a GetRolePermissionsMethodNotAllowed with default headers values
func NewGetRolePermissionsMethodNotAllowed() *GetRolePermissionsMethodNotAllowed {
	return &GetRolePermissionsMethodNotAllowed{}
}

/*
GetRolePermissionsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetRolePermissionsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get role permissions method not allowed response has a 2xx status code
func (o *GetRolePermissionsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get role permissions method not allowed response has a 3xx status code
func (o *GetRolePermissionsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get role permissions method not allowed response has a 4xx status code
func (o *GetRolePermissionsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get role permissions method not allowed response has a 5xx status code
func (o *GetRolePermissionsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get role permissions method not allowed response a status code equal to that given
func (o *GetRolePermissionsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get role permissions method not allowed response
func (o *GetRolePermissionsMethodNotAllowed) Code() int {
	return 405
}

func (o *GetRolePermissionsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsMethodNotAllowed %s", 405, payload)
}

func (o *GetRolePermissionsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsMethodNotAllowed %s", 405, payload)
}

func (o *GetRolePermissionsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetRolePermissionsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRolePermissionsInternalServerError creates a GetRolePermissionsInternalServerError with default headers values
func NewGetRolePermissionsInternalServerError() *GetRolePermissionsInternalServerError {
	return &GetRolePermissionsInternalServerError{}
}

/*
GetRolePermissionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetRolePermissionsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get role permissions internal server error response has a 2xx status code
func (o *GetRolePermissionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get role permissions internal server error response has a 3xx status code
func (o *GetRolePermissionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get role permissions internal server error response has a 4xx status code
func (o *GetRolePermissionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get role permissions internal server error response has a 5xx status code
func (o *GetRolePermissionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get role permissions internal server error response a status code equal to that given
func (o *GetRolePermissionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get role permissions internal server error response
func (o *GetRolePermissionsInternalServerError) Code() int {
	return 500
}

func (o *GetRolePermissionsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsInternalServerError %s", 500, payload)
}

func (o *GetRolePermissionsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/dropdown/rolePermissions/{role}][%d] getRolePermissionsInternalServerError %s", 500, payload)
}

func (o *GetRolePermissionsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetRolePermissionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
