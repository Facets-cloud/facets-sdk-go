// Code generated by go-swagger; DO NOT EDIT.

package ui_billing_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ReportUsageReader is a Reader for the ReportUsage structure.
type ReportUsageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReportUsageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReportUsageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReportUsageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReportUsageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewReportUsageMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReportUsageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/billing/report-usage] reportUsage", response, response.Code())
	}
}

// NewReportUsageOK creates a ReportUsageOK with default headers values
func NewReportUsageOK() *ReportUsageOK {
	return &ReportUsageOK{}
}

/*
ReportUsageOK describes a response with status code 200, with default header values.

OK
*/
type ReportUsageOK struct {
}

// IsSuccess returns true when this report usage o k response has a 2xx status code
func (o *ReportUsageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this report usage o k response has a 3xx status code
func (o *ReportUsageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this report usage o k response has a 4xx status code
func (o *ReportUsageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this report usage o k response has a 5xx status code
func (o *ReportUsageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this report usage o k response a status code equal to that given
func (o *ReportUsageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the report usage o k response
func (o *ReportUsageOK) Code() int {
	return 200
}

func (o *ReportUsageOK) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageOK", 200)
}

func (o *ReportUsageOK) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageOK", 200)
}

func (o *ReportUsageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReportUsageBadRequest creates a ReportUsageBadRequest with default headers values
func NewReportUsageBadRequest() *ReportUsageBadRequest {
	return &ReportUsageBadRequest{}
}

/*
ReportUsageBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ReportUsageBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this report usage bad request response has a 2xx status code
func (o *ReportUsageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this report usage bad request response has a 3xx status code
func (o *ReportUsageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this report usage bad request response has a 4xx status code
func (o *ReportUsageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this report usage bad request response has a 5xx status code
func (o *ReportUsageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this report usage bad request response a status code equal to that given
func (o *ReportUsageBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the report usage bad request response
func (o *ReportUsageBadRequest) Code() int {
	return 400
}

func (o *ReportUsageBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageBadRequest %s", 400, payload)
}

func (o *ReportUsageBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageBadRequest %s", 400, payload)
}

func (o *ReportUsageBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ReportUsageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportUsageNotFound creates a ReportUsageNotFound with default headers values
func NewReportUsageNotFound() *ReportUsageNotFound {
	return &ReportUsageNotFound{}
}

/*
ReportUsageNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ReportUsageNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this report usage not found response has a 2xx status code
func (o *ReportUsageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this report usage not found response has a 3xx status code
func (o *ReportUsageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this report usage not found response has a 4xx status code
func (o *ReportUsageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this report usage not found response has a 5xx status code
func (o *ReportUsageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this report usage not found response a status code equal to that given
func (o *ReportUsageNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the report usage not found response
func (o *ReportUsageNotFound) Code() int {
	return 404
}

func (o *ReportUsageNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageNotFound %s", 404, payload)
}

func (o *ReportUsageNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageNotFound %s", 404, payload)
}

func (o *ReportUsageNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ReportUsageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportUsageMethodNotAllowed creates a ReportUsageMethodNotAllowed with default headers values
func NewReportUsageMethodNotAllowed() *ReportUsageMethodNotAllowed {
	return &ReportUsageMethodNotAllowed{}
}

/*
ReportUsageMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ReportUsageMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this report usage method not allowed response has a 2xx status code
func (o *ReportUsageMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this report usage method not allowed response has a 3xx status code
func (o *ReportUsageMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this report usage method not allowed response has a 4xx status code
func (o *ReportUsageMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this report usage method not allowed response has a 5xx status code
func (o *ReportUsageMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this report usage method not allowed response a status code equal to that given
func (o *ReportUsageMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the report usage method not allowed response
func (o *ReportUsageMethodNotAllowed) Code() int {
	return 405
}

func (o *ReportUsageMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageMethodNotAllowed %s", 405, payload)
}

func (o *ReportUsageMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageMethodNotAllowed %s", 405, payload)
}

func (o *ReportUsageMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ReportUsageMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportUsageInternalServerError creates a ReportUsageInternalServerError with default headers values
func NewReportUsageInternalServerError() *ReportUsageInternalServerError {
	return &ReportUsageInternalServerError{}
}

/*
ReportUsageInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ReportUsageInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this report usage internal server error response has a 2xx status code
func (o *ReportUsageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this report usage internal server error response has a 3xx status code
func (o *ReportUsageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this report usage internal server error response has a 4xx status code
func (o *ReportUsageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this report usage internal server error response has a 5xx status code
func (o *ReportUsageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this report usage internal server error response a status code equal to that given
func (o *ReportUsageInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the report usage internal server error response
func (o *ReportUsageInternalServerError) Code() int {
	return 500
}

func (o *ReportUsageInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageInternalServerError %s", 500, payload)
}

func (o *ReportUsageInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageInternalServerError %s", 500, payload)
}

func (o *ReportUsageInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ReportUsageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
