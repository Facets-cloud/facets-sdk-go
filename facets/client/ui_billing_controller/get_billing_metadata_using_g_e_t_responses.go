// Code generated by go-swagger; DO NOT EDIT.

package ui_billing_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetBillingMetadataUsingGETReader is a Reader for the GetBillingMetadataUsingGET structure.
type GetBillingMetadataUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBillingMetadataUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBillingMetadataUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetBillingMetadataUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetBillingMetadataUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetBillingMetadataUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/billing/metadata] getBillingMetadataUsingGET", response, response.Code())
	}
}

// NewGetBillingMetadataUsingGETOK creates a GetBillingMetadataUsingGETOK with default headers values
func NewGetBillingMetadataUsingGETOK() *GetBillingMetadataUsingGETOK {
	return &GetBillingMetadataUsingGETOK{}
}

/*
GetBillingMetadataUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetBillingMetadataUsingGETOK struct {
	Payload []*models.BillingMetadata
}

// IsSuccess returns true when this get billing metadata using g e t o k response has a 2xx status code
func (o *GetBillingMetadataUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get billing metadata using g e t o k response has a 3xx status code
func (o *GetBillingMetadataUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get billing metadata using g e t o k response has a 4xx status code
func (o *GetBillingMetadataUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get billing metadata using g e t o k response has a 5xx status code
func (o *GetBillingMetadataUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get billing metadata using g e t o k response a status code equal to that given
func (o *GetBillingMetadataUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get billing metadata using g e t o k response
func (o *GetBillingMetadataUsingGETOK) Code() int {
	return 200
}

func (o *GetBillingMetadataUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/billing/metadata][%d] getBillingMetadataUsingGETOK %s", 200, payload)
}

func (o *GetBillingMetadataUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/billing/metadata][%d] getBillingMetadataUsingGETOK %s", 200, payload)
}

func (o *GetBillingMetadataUsingGETOK) GetPayload() []*models.BillingMetadata {
	return o.Payload
}

func (o *GetBillingMetadataUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBillingMetadataUsingGETUnauthorized creates a GetBillingMetadataUsingGETUnauthorized with default headers values
func NewGetBillingMetadataUsingGETUnauthorized() *GetBillingMetadataUsingGETUnauthorized {
	return &GetBillingMetadataUsingGETUnauthorized{}
}

/*
GetBillingMetadataUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetBillingMetadataUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get billing metadata using g e t unauthorized response has a 2xx status code
func (o *GetBillingMetadataUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get billing metadata using g e t unauthorized response has a 3xx status code
func (o *GetBillingMetadataUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get billing metadata using g e t unauthorized response has a 4xx status code
func (o *GetBillingMetadataUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get billing metadata using g e t unauthorized response has a 5xx status code
func (o *GetBillingMetadataUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get billing metadata using g e t unauthorized response a status code equal to that given
func (o *GetBillingMetadataUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get billing metadata using g e t unauthorized response
func (o *GetBillingMetadataUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetBillingMetadataUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/metadata][%d] getBillingMetadataUsingGETUnauthorized", 401)
}

func (o *GetBillingMetadataUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/metadata][%d] getBillingMetadataUsingGETUnauthorized", 401)
}

func (o *GetBillingMetadataUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBillingMetadataUsingGETForbidden creates a GetBillingMetadataUsingGETForbidden with default headers values
func NewGetBillingMetadataUsingGETForbidden() *GetBillingMetadataUsingGETForbidden {
	return &GetBillingMetadataUsingGETForbidden{}
}

/*
GetBillingMetadataUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetBillingMetadataUsingGETForbidden struct {
}

// IsSuccess returns true when this get billing metadata using g e t forbidden response has a 2xx status code
func (o *GetBillingMetadataUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get billing metadata using g e t forbidden response has a 3xx status code
func (o *GetBillingMetadataUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get billing metadata using g e t forbidden response has a 4xx status code
func (o *GetBillingMetadataUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get billing metadata using g e t forbidden response has a 5xx status code
func (o *GetBillingMetadataUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get billing metadata using g e t forbidden response a status code equal to that given
func (o *GetBillingMetadataUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get billing metadata using g e t forbidden response
func (o *GetBillingMetadataUsingGETForbidden) Code() int {
	return 403
}

func (o *GetBillingMetadataUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/metadata][%d] getBillingMetadataUsingGETForbidden", 403)
}

func (o *GetBillingMetadataUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/metadata][%d] getBillingMetadataUsingGETForbidden", 403)
}

func (o *GetBillingMetadataUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBillingMetadataUsingGETNotFound creates a GetBillingMetadataUsingGETNotFound with default headers values
func NewGetBillingMetadataUsingGETNotFound() *GetBillingMetadataUsingGETNotFound {
	return &GetBillingMetadataUsingGETNotFound{}
}

/*
GetBillingMetadataUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetBillingMetadataUsingGETNotFound struct {
}

// IsSuccess returns true when this get billing metadata using g e t not found response has a 2xx status code
func (o *GetBillingMetadataUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get billing metadata using g e t not found response has a 3xx status code
func (o *GetBillingMetadataUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get billing metadata using g e t not found response has a 4xx status code
func (o *GetBillingMetadataUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get billing metadata using g e t not found response has a 5xx status code
func (o *GetBillingMetadataUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get billing metadata using g e t not found response a status code equal to that given
func (o *GetBillingMetadataUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get billing metadata using g e t not found response
func (o *GetBillingMetadataUsingGETNotFound) Code() int {
	return 404
}

func (o *GetBillingMetadataUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/metadata][%d] getBillingMetadataUsingGETNotFound", 404)
}

func (o *GetBillingMetadataUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/metadata][%d] getBillingMetadataUsingGETNotFound", 404)
}

func (o *GetBillingMetadataUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
