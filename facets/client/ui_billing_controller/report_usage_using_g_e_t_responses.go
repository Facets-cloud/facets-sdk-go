// Code generated by go-swagger; DO NOT EDIT.

package ui_billing_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ReportUsageUsingGETReader is a Reader for the ReportUsageUsingGET structure.
type ReportUsageUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReportUsageUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReportUsageUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewReportUsageUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReportUsageUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReportUsageUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/billing/report-usage] reportUsageUsingGET", response, response.Code())
	}
}

// NewReportUsageUsingGETOK creates a ReportUsageUsingGETOK with default headers values
func NewReportUsageUsingGETOK() *ReportUsageUsingGETOK {
	return &ReportUsageUsingGETOK{}
}

/*
ReportUsageUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type ReportUsageUsingGETOK struct {
}

// IsSuccess returns true when this report usage using g e t o k response has a 2xx status code
func (o *ReportUsageUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this report usage using g e t o k response has a 3xx status code
func (o *ReportUsageUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this report usage using g e t o k response has a 4xx status code
func (o *ReportUsageUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this report usage using g e t o k response has a 5xx status code
func (o *ReportUsageUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this report usage using g e t o k response a status code equal to that given
func (o *ReportUsageUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the report usage using g e t o k response
func (o *ReportUsageUsingGETOK) Code() int {
	return 200
}

func (o *ReportUsageUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageUsingGETOK", 200)
}

func (o *ReportUsageUsingGETOK) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageUsingGETOK", 200)
}

func (o *ReportUsageUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReportUsageUsingGETUnauthorized creates a ReportUsageUsingGETUnauthorized with default headers values
func NewReportUsageUsingGETUnauthorized() *ReportUsageUsingGETUnauthorized {
	return &ReportUsageUsingGETUnauthorized{}
}

/*
ReportUsageUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ReportUsageUsingGETUnauthorized struct {
}

// IsSuccess returns true when this report usage using g e t unauthorized response has a 2xx status code
func (o *ReportUsageUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this report usage using g e t unauthorized response has a 3xx status code
func (o *ReportUsageUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this report usage using g e t unauthorized response has a 4xx status code
func (o *ReportUsageUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this report usage using g e t unauthorized response has a 5xx status code
func (o *ReportUsageUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this report usage using g e t unauthorized response a status code equal to that given
func (o *ReportUsageUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the report usage using g e t unauthorized response
func (o *ReportUsageUsingGETUnauthorized) Code() int {
	return 401
}

func (o *ReportUsageUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageUsingGETUnauthorized", 401)
}

func (o *ReportUsageUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageUsingGETUnauthorized", 401)
}

func (o *ReportUsageUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReportUsageUsingGETForbidden creates a ReportUsageUsingGETForbidden with default headers values
func NewReportUsageUsingGETForbidden() *ReportUsageUsingGETForbidden {
	return &ReportUsageUsingGETForbidden{}
}

/*
ReportUsageUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ReportUsageUsingGETForbidden struct {
}

// IsSuccess returns true when this report usage using g e t forbidden response has a 2xx status code
func (o *ReportUsageUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this report usage using g e t forbidden response has a 3xx status code
func (o *ReportUsageUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this report usage using g e t forbidden response has a 4xx status code
func (o *ReportUsageUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this report usage using g e t forbidden response has a 5xx status code
func (o *ReportUsageUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this report usage using g e t forbidden response a status code equal to that given
func (o *ReportUsageUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the report usage using g e t forbidden response
func (o *ReportUsageUsingGETForbidden) Code() int {
	return 403
}

func (o *ReportUsageUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageUsingGETForbidden", 403)
}

func (o *ReportUsageUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageUsingGETForbidden", 403)
}

func (o *ReportUsageUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReportUsageUsingGETNotFound creates a ReportUsageUsingGETNotFound with default headers values
func NewReportUsageUsingGETNotFound() *ReportUsageUsingGETNotFound {
	return &ReportUsageUsingGETNotFound{}
}

/*
ReportUsageUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ReportUsageUsingGETNotFound struct {
}

// IsSuccess returns true when this report usage using g e t not found response has a 2xx status code
func (o *ReportUsageUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this report usage using g e t not found response has a 3xx status code
func (o *ReportUsageUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this report usage using g e t not found response has a 4xx status code
func (o *ReportUsageUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this report usage using g e t not found response has a 5xx status code
func (o *ReportUsageUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this report usage using g e t not found response a status code equal to that given
func (o *ReportUsageUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the report usage using g e t not found response
func (o *ReportUsageUsingGETNotFound) Code() int {
	return 404
}

func (o *ReportUsageUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageUsingGETNotFound", 404)
}

func (o *ReportUsageUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/report-usage][%d] reportUsageUsingGETNotFound", 404)
}

func (o *ReportUsageUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
