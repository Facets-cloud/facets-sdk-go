// Code generated by go-swagger; DO NOT EDIT.

package ui_billing_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// BuySupportPlanReader is a Reader for the BuySupportPlan structure.
type BuySupportPlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BuySupportPlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBuySupportPlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBuySupportPlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewBuySupportPlanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewBuySupportPlanMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewBuySupportPlanInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/billing/buy-support-plan] buySupportPlan", response, response.Code())
	}
}

// NewBuySupportPlanOK creates a BuySupportPlanOK with default headers values
func NewBuySupportPlanOK() *BuySupportPlanOK {
	return &BuySupportPlanOK{}
}

/*
BuySupportPlanOK describes a response with status code 200, with default header values.

OK
*/
type BuySupportPlanOK struct {
	Payload string
}

// IsSuccess returns true when this buy support plan o k response has a 2xx status code
func (o *BuySupportPlanOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this buy support plan o k response has a 3xx status code
func (o *BuySupportPlanOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this buy support plan o k response has a 4xx status code
func (o *BuySupportPlanOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this buy support plan o k response has a 5xx status code
func (o *BuySupportPlanOK) IsServerError() bool {
	return false
}

// IsCode returns true when this buy support plan o k response a status code equal to that given
func (o *BuySupportPlanOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the buy support plan o k response
func (o *BuySupportPlanOK) Code() int {
	return 200
}

func (o *BuySupportPlanOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/billing/buy-support-plan][%d] buySupportPlanOK %s", 200, payload)
}

func (o *BuySupportPlanOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/billing/buy-support-plan][%d] buySupportPlanOK %s", 200, payload)
}

func (o *BuySupportPlanOK) GetPayload() string {
	return o.Payload
}

func (o *BuySupportPlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBuySupportPlanBadRequest creates a BuySupportPlanBadRequest with default headers values
func NewBuySupportPlanBadRequest() *BuySupportPlanBadRequest {
	return &BuySupportPlanBadRequest{}
}

/*
BuySupportPlanBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type BuySupportPlanBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this buy support plan bad request response has a 2xx status code
func (o *BuySupportPlanBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this buy support plan bad request response has a 3xx status code
func (o *BuySupportPlanBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this buy support plan bad request response has a 4xx status code
func (o *BuySupportPlanBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this buy support plan bad request response has a 5xx status code
func (o *BuySupportPlanBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this buy support plan bad request response a status code equal to that given
func (o *BuySupportPlanBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the buy support plan bad request response
func (o *BuySupportPlanBadRequest) Code() int {
	return 400
}

func (o *BuySupportPlanBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/billing/buy-support-plan][%d] buySupportPlanBadRequest %s", 400, payload)
}

func (o *BuySupportPlanBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/billing/buy-support-plan][%d] buySupportPlanBadRequest %s", 400, payload)
}

func (o *BuySupportPlanBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *BuySupportPlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBuySupportPlanNotFound creates a BuySupportPlanNotFound with default headers values
func NewBuySupportPlanNotFound() *BuySupportPlanNotFound {
	return &BuySupportPlanNotFound{}
}

/*
BuySupportPlanNotFound describes a response with status code 404, with default header values.

Not Found
*/
type BuySupportPlanNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this buy support plan not found response has a 2xx status code
func (o *BuySupportPlanNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this buy support plan not found response has a 3xx status code
func (o *BuySupportPlanNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this buy support plan not found response has a 4xx status code
func (o *BuySupportPlanNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this buy support plan not found response has a 5xx status code
func (o *BuySupportPlanNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this buy support plan not found response a status code equal to that given
func (o *BuySupportPlanNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the buy support plan not found response
func (o *BuySupportPlanNotFound) Code() int {
	return 404
}

func (o *BuySupportPlanNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/billing/buy-support-plan][%d] buySupportPlanNotFound %s", 404, payload)
}

func (o *BuySupportPlanNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/billing/buy-support-plan][%d] buySupportPlanNotFound %s", 404, payload)
}

func (o *BuySupportPlanNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *BuySupportPlanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBuySupportPlanMethodNotAllowed creates a BuySupportPlanMethodNotAllowed with default headers values
func NewBuySupportPlanMethodNotAllowed() *BuySupportPlanMethodNotAllowed {
	return &BuySupportPlanMethodNotAllowed{}
}

/*
BuySupportPlanMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type BuySupportPlanMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this buy support plan method not allowed response has a 2xx status code
func (o *BuySupportPlanMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this buy support plan method not allowed response has a 3xx status code
func (o *BuySupportPlanMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this buy support plan method not allowed response has a 4xx status code
func (o *BuySupportPlanMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this buy support plan method not allowed response has a 5xx status code
func (o *BuySupportPlanMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this buy support plan method not allowed response a status code equal to that given
func (o *BuySupportPlanMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the buy support plan method not allowed response
func (o *BuySupportPlanMethodNotAllowed) Code() int {
	return 405
}

func (o *BuySupportPlanMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/billing/buy-support-plan][%d] buySupportPlanMethodNotAllowed %s", 405, payload)
}

func (o *BuySupportPlanMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/billing/buy-support-plan][%d] buySupportPlanMethodNotAllowed %s", 405, payload)
}

func (o *BuySupportPlanMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *BuySupportPlanMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBuySupportPlanInternalServerError creates a BuySupportPlanInternalServerError with default headers values
func NewBuySupportPlanInternalServerError() *BuySupportPlanInternalServerError {
	return &BuySupportPlanInternalServerError{}
}

/*
BuySupportPlanInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type BuySupportPlanInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this buy support plan internal server error response has a 2xx status code
func (o *BuySupportPlanInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this buy support plan internal server error response has a 3xx status code
func (o *BuySupportPlanInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this buy support plan internal server error response has a 4xx status code
func (o *BuySupportPlanInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this buy support plan internal server error response has a 5xx status code
func (o *BuySupportPlanInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this buy support plan internal server error response a status code equal to that given
func (o *BuySupportPlanInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the buy support plan internal server error response
func (o *BuySupportPlanInternalServerError) Code() int {
	return 500
}

func (o *BuySupportPlanInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/billing/buy-support-plan][%d] buySupportPlanInternalServerError %s", 500, payload)
}

func (o *BuySupportPlanInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/billing/buy-support-plan][%d] buySupportPlanInternalServerError %s", 500, payload)
}

func (o *BuySupportPlanInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *BuySupportPlanInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
