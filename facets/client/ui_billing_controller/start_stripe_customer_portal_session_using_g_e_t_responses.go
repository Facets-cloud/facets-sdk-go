// Code generated by go-swagger; DO NOT EDIT.

package ui_billing_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// StartStripeCustomerPortalSessionUsingGETReader is a Reader for the StartStripeCustomerPortalSessionUsingGET structure.
type StartStripeCustomerPortalSessionUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartStripeCustomerPortalSessionUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStartStripeCustomerPortalSessionUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewStartStripeCustomerPortalSessionUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStartStripeCustomerPortalSessionUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStartStripeCustomerPortalSessionUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/billing/manage-billing] startStripeCustomerPortalSessionUsingGET", response, response.Code())
	}
}

// NewStartStripeCustomerPortalSessionUsingGETOK creates a StartStripeCustomerPortalSessionUsingGETOK with default headers values
func NewStartStripeCustomerPortalSessionUsingGETOK() *StartStripeCustomerPortalSessionUsingGETOK {
	return &StartStripeCustomerPortalSessionUsingGETOK{}
}

/*
StartStripeCustomerPortalSessionUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type StartStripeCustomerPortalSessionUsingGETOK struct {
	Payload string
}

// IsSuccess returns true when this start stripe customer portal session using g e t o k response has a 2xx status code
func (o *StartStripeCustomerPortalSessionUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this start stripe customer portal session using g e t o k response has a 3xx status code
func (o *StartStripeCustomerPortalSessionUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start stripe customer portal session using g e t o k response has a 4xx status code
func (o *StartStripeCustomerPortalSessionUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this start stripe customer portal session using g e t o k response has a 5xx status code
func (o *StartStripeCustomerPortalSessionUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this start stripe customer portal session using g e t o k response a status code equal to that given
func (o *StartStripeCustomerPortalSessionUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the start stripe customer portal session using g e t o k response
func (o *StartStripeCustomerPortalSessionUsingGETOK) Code() int {
	return 200
}

func (o *StartStripeCustomerPortalSessionUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/billing/manage-billing][%d] startStripeCustomerPortalSessionUsingGETOK %s", 200, payload)
}

func (o *StartStripeCustomerPortalSessionUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/billing/manage-billing][%d] startStripeCustomerPortalSessionUsingGETOK %s", 200, payload)
}

func (o *StartStripeCustomerPortalSessionUsingGETOK) GetPayload() string {
	return o.Payload
}

func (o *StartStripeCustomerPortalSessionUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartStripeCustomerPortalSessionUsingGETUnauthorized creates a StartStripeCustomerPortalSessionUsingGETUnauthorized with default headers values
func NewStartStripeCustomerPortalSessionUsingGETUnauthorized() *StartStripeCustomerPortalSessionUsingGETUnauthorized {
	return &StartStripeCustomerPortalSessionUsingGETUnauthorized{}
}

/*
StartStripeCustomerPortalSessionUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StartStripeCustomerPortalSessionUsingGETUnauthorized struct {
}

// IsSuccess returns true when this start stripe customer portal session using g e t unauthorized response has a 2xx status code
func (o *StartStripeCustomerPortalSessionUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start stripe customer portal session using g e t unauthorized response has a 3xx status code
func (o *StartStripeCustomerPortalSessionUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start stripe customer portal session using g e t unauthorized response has a 4xx status code
func (o *StartStripeCustomerPortalSessionUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this start stripe customer portal session using g e t unauthorized response has a 5xx status code
func (o *StartStripeCustomerPortalSessionUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this start stripe customer portal session using g e t unauthorized response a status code equal to that given
func (o *StartStripeCustomerPortalSessionUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the start stripe customer portal session using g e t unauthorized response
func (o *StartStripeCustomerPortalSessionUsingGETUnauthorized) Code() int {
	return 401
}

func (o *StartStripeCustomerPortalSessionUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/manage-billing][%d] startStripeCustomerPortalSessionUsingGETUnauthorized", 401)
}

func (o *StartStripeCustomerPortalSessionUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/manage-billing][%d] startStripeCustomerPortalSessionUsingGETUnauthorized", 401)
}

func (o *StartStripeCustomerPortalSessionUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartStripeCustomerPortalSessionUsingGETForbidden creates a StartStripeCustomerPortalSessionUsingGETForbidden with default headers values
func NewStartStripeCustomerPortalSessionUsingGETForbidden() *StartStripeCustomerPortalSessionUsingGETForbidden {
	return &StartStripeCustomerPortalSessionUsingGETForbidden{}
}

/*
StartStripeCustomerPortalSessionUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StartStripeCustomerPortalSessionUsingGETForbidden struct {
}

// IsSuccess returns true when this start stripe customer portal session using g e t forbidden response has a 2xx status code
func (o *StartStripeCustomerPortalSessionUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start stripe customer portal session using g e t forbidden response has a 3xx status code
func (o *StartStripeCustomerPortalSessionUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start stripe customer portal session using g e t forbidden response has a 4xx status code
func (o *StartStripeCustomerPortalSessionUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this start stripe customer portal session using g e t forbidden response has a 5xx status code
func (o *StartStripeCustomerPortalSessionUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this start stripe customer portal session using g e t forbidden response a status code equal to that given
func (o *StartStripeCustomerPortalSessionUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the start stripe customer portal session using g e t forbidden response
func (o *StartStripeCustomerPortalSessionUsingGETForbidden) Code() int {
	return 403
}

func (o *StartStripeCustomerPortalSessionUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/manage-billing][%d] startStripeCustomerPortalSessionUsingGETForbidden", 403)
}

func (o *StartStripeCustomerPortalSessionUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/manage-billing][%d] startStripeCustomerPortalSessionUsingGETForbidden", 403)
}

func (o *StartStripeCustomerPortalSessionUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartStripeCustomerPortalSessionUsingGETNotFound creates a StartStripeCustomerPortalSessionUsingGETNotFound with default headers values
func NewStartStripeCustomerPortalSessionUsingGETNotFound() *StartStripeCustomerPortalSessionUsingGETNotFound {
	return &StartStripeCustomerPortalSessionUsingGETNotFound{}
}

/*
StartStripeCustomerPortalSessionUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StartStripeCustomerPortalSessionUsingGETNotFound struct {
}

// IsSuccess returns true when this start stripe customer portal session using g e t not found response has a 2xx status code
func (o *StartStripeCustomerPortalSessionUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start stripe customer portal session using g e t not found response has a 3xx status code
func (o *StartStripeCustomerPortalSessionUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start stripe customer portal session using g e t not found response has a 4xx status code
func (o *StartStripeCustomerPortalSessionUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this start stripe customer portal session using g e t not found response has a 5xx status code
func (o *StartStripeCustomerPortalSessionUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this start stripe customer portal session using g e t not found response a status code equal to that given
func (o *StartStripeCustomerPortalSessionUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the start stripe customer portal session using g e t not found response
func (o *StartStripeCustomerPortalSessionUsingGETNotFound) Code() int {
	return 404
}

func (o *StartStripeCustomerPortalSessionUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/manage-billing][%d] startStripeCustomerPortalSessionUsingGETNotFound", 404)
}

func (o *StartStripeCustomerPortalSessionUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/billing/manage-billing][%d] startStripeCustomerPortalSessionUsingGETNotFound", 404)
}

func (o *StartStripeCustomerPortalSessionUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
