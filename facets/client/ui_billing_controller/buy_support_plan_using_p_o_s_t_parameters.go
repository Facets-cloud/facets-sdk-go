// Code generated by go-swagger; DO NOT EDIT.

package ui_billing_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewBuySupportPlanUsingPOSTParams creates a new BuySupportPlanUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewBuySupportPlanUsingPOSTParams() *BuySupportPlanUsingPOSTParams {
	return &BuySupportPlanUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewBuySupportPlanUsingPOSTParamsWithTimeout creates a new BuySupportPlanUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewBuySupportPlanUsingPOSTParamsWithTimeout(timeout time.Duration) *BuySupportPlanUsingPOSTParams {
	return &BuySupportPlanUsingPOSTParams{
		timeout: timeout,
	}
}

// NewBuySupportPlanUsingPOSTParamsWithContext creates a new BuySupportPlanUsingPOSTParams object
// with the ability to set a context for a request.
func NewBuySupportPlanUsingPOSTParamsWithContext(ctx context.Context) *BuySupportPlanUsingPOSTParams {
	return &BuySupportPlanUsingPOSTParams{
		Context: ctx,
	}
}

// NewBuySupportPlanUsingPOSTParamsWithHTTPClient creates a new BuySupportPlanUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewBuySupportPlanUsingPOSTParamsWithHTTPClient(client *http.Client) *BuySupportPlanUsingPOSTParams {
	return &BuySupportPlanUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
BuySupportPlanUsingPOSTParams contains all the parameters to send to the API endpoint

	for the buy support plan using p o s t operation.

	Typically these are written to a http.Request.
*/
type BuySupportPlanUsingPOSTParams struct {

	/* CancelURL.

	   cancelUrl
	*/
	CancelURL string

	/* SuccessURL.

	   successUrl
	*/
	SuccessURL string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the buy support plan using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *BuySupportPlanUsingPOSTParams) WithDefaults() *BuySupportPlanUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the buy support plan using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *BuySupportPlanUsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the buy support plan using p o s t params
func (o *BuySupportPlanUsingPOSTParams) WithTimeout(timeout time.Duration) *BuySupportPlanUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the buy support plan using p o s t params
func (o *BuySupportPlanUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the buy support plan using p o s t params
func (o *BuySupportPlanUsingPOSTParams) WithContext(ctx context.Context) *BuySupportPlanUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the buy support plan using p o s t params
func (o *BuySupportPlanUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the buy support plan using p o s t params
func (o *BuySupportPlanUsingPOSTParams) WithHTTPClient(client *http.Client) *BuySupportPlanUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the buy support plan using p o s t params
func (o *BuySupportPlanUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCancelURL adds the cancelURL to the buy support plan using p o s t params
func (o *BuySupportPlanUsingPOSTParams) WithCancelURL(cancelURL string) *BuySupportPlanUsingPOSTParams {
	o.SetCancelURL(cancelURL)
	return o
}

// SetCancelURL adds the cancelUrl to the buy support plan using p o s t params
func (o *BuySupportPlanUsingPOSTParams) SetCancelURL(cancelURL string) {
	o.CancelURL = cancelURL
}

// WithSuccessURL adds the successURL to the buy support plan using p o s t params
func (o *BuySupportPlanUsingPOSTParams) WithSuccessURL(successURL string) *BuySupportPlanUsingPOSTParams {
	o.SetSuccessURL(successURL)
	return o
}

// SetSuccessURL adds the successUrl to the buy support plan using p o s t params
func (o *BuySupportPlanUsingPOSTParams) SetSuccessURL(successURL string) {
	o.SuccessURL = successURL
}

// WriteToRequest writes these params to a swagger request
func (o *BuySupportPlanUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param cancelUrl
	qrCancelURL := o.CancelURL
	qCancelURL := qrCancelURL
	if qCancelURL != "" {

		if err := r.SetQueryParam("cancelUrl", qCancelURL); err != nil {
			return err
		}
	}

	// query param successUrl
	qrSuccessURL := o.SuccessURL
	qSuccessURL := qrSuccessURL
	if qSuccessURL != "" {

		if err := r.SetQueryParam("successUrl", qSuccessURL); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
