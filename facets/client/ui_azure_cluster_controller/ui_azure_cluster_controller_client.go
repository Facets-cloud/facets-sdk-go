// Code generated by go-swagger; DO NOT EDIT.

package ui_azure_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui azure cluster controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui azure cluster controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui azure cluster controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui azure cluster controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConfigureDraftCluster1(params *ConfigureDraftCluster1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConfigureDraftCluster1OK, error)

	CreateAzureCluster(params *CreateAzureClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAzureClusterOK, error)

	GetAzureCluster(params *GetAzureClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAzureClusterOK, error)

	UpdateAzureCluster(params *UpdateAzureClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAzureClusterOK, error)

	ValidateVnet(params *ValidateVnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateVnetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ConfigureDraftCluster1 configure draft cluster 1 API
*/
func (a *Client) ConfigureDraftCluster1(params *ConfigureDraftCluster1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConfigureDraftCluster1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigureDraftCluster1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "configureDraftCluster_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/azure/clusters/configure/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConfigureDraftCluster1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfigureDraftCluster1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for configureDraftCluster_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAzureCluster create azure cluster API
*/
func (a *Client) CreateAzureCluster(params *CreateAzureClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAzureClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAzureCluster",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/azure/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAzureClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAzureCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAzureCluster get azure cluster API
*/
func (a *Client) GetAzureCluster(params *GetAzureClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAzureClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAzureCluster",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/azure/clusters/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAzureClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAzureCluster update azure cluster API
*/
func (a *Client) UpdateAzureCluster(params *UpdateAzureClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAzureClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAzureClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAzureCluster",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/azure/clusters/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAzureClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAzureClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAzureCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateVnet validate vnet API
*/
func (a *Client) ValidateVnet(params *ValidateVnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateVnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateVnetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateVnet",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/azure/clusters/validate-vnet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateVnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateVnetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateVnet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
