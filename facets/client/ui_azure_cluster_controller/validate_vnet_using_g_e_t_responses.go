// Code generated by go-swagger; DO NOT EDIT.

package ui_azure_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ValidateVnetUsingGETReader is a Reader for the ValidateVnetUsingGET structure.
type ValidateVnetUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateVnetUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateVnetUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewValidateVnetUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewValidateVnetUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewValidateVnetUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/azure/clusters/validate-vnet] validateVnetUsingGET", response, response.Code())
	}
}

// NewValidateVnetUsingGETOK creates a ValidateVnetUsingGETOK with default headers values
func NewValidateVnetUsingGETOK() *ValidateVnetUsingGETOK {
	return &ValidateVnetUsingGETOK{}
}

/*
ValidateVnetUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type ValidateVnetUsingGETOK struct {
	Payload bool
}

// IsSuccess returns true when this validate vnet using g e t o k response has a 2xx status code
func (o *ValidateVnetUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate vnet using g e t o k response has a 3xx status code
func (o *ValidateVnetUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vnet using g e t o k response has a 4xx status code
func (o *ValidateVnetUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate vnet using g e t o k response has a 5xx status code
func (o *ValidateVnetUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vnet using g e t o k response a status code equal to that given
func (o *ValidateVnetUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate vnet using g e t o k response
func (o *ValidateVnetUsingGETOK) Code() int {
	return 200
}

func (o *ValidateVnetUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetUsingGETOK %s", 200, payload)
}

func (o *ValidateVnetUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetUsingGETOK %s", 200, payload)
}

func (o *ValidateVnetUsingGETOK) GetPayload() bool {
	return o.Payload
}

func (o *ValidateVnetUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateVnetUsingGETUnauthorized creates a ValidateVnetUsingGETUnauthorized with default headers values
func NewValidateVnetUsingGETUnauthorized() *ValidateVnetUsingGETUnauthorized {
	return &ValidateVnetUsingGETUnauthorized{}
}

/*
ValidateVnetUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ValidateVnetUsingGETUnauthorized struct {
}

// IsSuccess returns true when this validate vnet using g e t unauthorized response has a 2xx status code
func (o *ValidateVnetUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate vnet using g e t unauthorized response has a 3xx status code
func (o *ValidateVnetUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vnet using g e t unauthorized response has a 4xx status code
func (o *ValidateVnetUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate vnet using g e t unauthorized response has a 5xx status code
func (o *ValidateVnetUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vnet using g e t unauthorized response a status code equal to that given
func (o *ValidateVnetUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the validate vnet using g e t unauthorized response
func (o *ValidateVnetUsingGETUnauthorized) Code() int {
	return 401
}

func (o *ValidateVnetUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetUsingGETUnauthorized", 401)
}

func (o *ValidateVnetUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetUsingGETUnauthorized", 401)
}

func (o *ValidateVnetUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateVnetUsingGETForbidden creates a ValidateVnetUsingGETForbidden with default headers values
func NewValidateVnetUsingGETForbidden() *ValidateVnetUsingGETForbidden {
	return &ValidateVnetUsingGETForbidden{}
}

/*
ValidateVnetUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ValidateVnetUsingGETForbidden struct {
}

// IsSuccess returns true when this validate vnet using g e t forbidden response has a 2xx status code
func (o *ValidateVnetUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate vnet using g e t forbidden response has a 3xx status code
func (o *ValidateVnetUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vnet using g e t forbidden response has a 4xx status code
func (o *ValidateVnetUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate vnet using g e t forbidden response has a 5xx status code
func (o *ValidateVnetUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vnet using g e t forbidden response a status code equal to that given
func (o *ValidateVnetUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the validate vnet using g e t forbidden response
func (o *ValidateVnetUsingGETForbidden) Code() int {
	return 403
}

func (o *ValidateVnetUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetUsingGETForbidden", 403)
}

func (o *ValidateVnetUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetUsingGETForbidden", 403)
}

func (o *ValidateVnetUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateVnetUsingGETNotFound creates a ValidateVnetUsingGETNotFound with default headers values
func NewValidateVnetUsingGETNotFound() *ValidateVnetUsingGETNotFound {
	return &ValidateVnetUsingGETNotFound{}
}

/*
ValidateVnetUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ValidateVnetUsingGETNotFound struct {
}

// IsSuccess returns true when this validate vnet using g e t not found response has a 2xx status code
func (o *ValidateVnetUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate vnet using g e t not found response has a 3xx status code
func (o *ValidateVnetUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vnet using g e t not found response has a 4xx status code
func (o *ValidateVnetUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate vnet using g e t not found response has a 5xx status code
func (o *ValidateVnetUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vnet using g e t not found response a status code equal to that given
func (o *ValidateVnetUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the validate vnet using g e t not found response
func (o *ValidateVnetUsingGETNotFound) Code() int {
	return 404
}

func (o *ValidateVnetUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetUsingGETNotFound", 404)
}

func (o *ValidateVnetUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetUsingGETNotFound", 404)
}

func (o *ValidateVnetUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
