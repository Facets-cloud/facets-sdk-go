// Code generated by go-swagger; DO NOT EDIT.

package ui_azure_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ValidateVnetReader is a Reader for the ValidateVnet structure.
type ValidateVnetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateVnetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateVnetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateVnetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewValidateVnetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewValidateVnetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewValidateVnetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/azure/clusters/validate-vnet] validateVnet", response, response.Code())
	}
}

// NewValidateVnetOK creates a ValidateVnetOK with default headers values
func NewValidateVnetOK() *ValidateVnetOK {
	return &ValidateVnetOK{}
}

/*
ValidateVnetOK describes a response with status code 200, with default header values.

OK
*/
type ValidateVnetOK struct {
	Payload bool
}

// IsSuccess returns true when this validate vnet o k response has a 2xx status code
func (o *ValidateVnetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate vnet o k response has a 3xx status code
func (o *ValidateVnetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vnet o k response has a 4xx status code
func (o *ValidateVnetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate vnet o k response has a 5xx status code
func (o *ValidateVnetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vnet o k response a status code equal to that given
func (o *ValidateVnetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate vnet o k response
func (o *ValidateVnetOK) Code() int {
	return 200
}

func (o *ValidateVnetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetOK %s", 200, payload)
}

func (o *ValidateVnetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetOK %s", 200, payload)
}

func (o *ValidateVnetOK) GetPayload() bool {
	return o.Payload
}

func (o *ValidateVnetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateVnetBadRequest creates a ValidateVnetBadRequest with default headers values
func NewValidateVnetBadRequest() *ValidateVnetBadRequest {
	return &ValidateVnetBadRequest{}
}

/*
ValidateVnetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ValidateVnetBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate vnet bad request response has a 2xx status code
func (o *ValidateVnetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate vnet bad request response has a 3xx status code
func (o *ValidateVnetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vnet bad request response has a 4xx status code
func (o *ValidateVnetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate vnet bad request response has a 5xx status code
func (o *ValidateVnetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vnet bad request response a status code equal to that given
func (o *ValidateVnetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the validate vnet bad request response
func (o *ValidateVnetBadRequest) Code() int {
	return 400
}

func (o *ValidateVnetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetBadRequest %s", 400, payload)
}

func (o *ValidateVnetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetBadRequest %s", 400, payload)
}

func (o *ValidateVnetBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateVnetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateVnetNotFound creates a ValidateVnetNotFound with default headers values
func NewValidateVnetNotFound() *ValidateVnetNotFound {
	return &ValidateVnetNotFound{}
}

/*
ValidateVnetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ValidateVnetNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate vnet not found response has a 2xx status code
func (o *ValidateVnetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate vnet not found response has a 3xx status code
func (o *ValidateVnetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vnet not found response has a 4xx status code
func (o *ValidateVnetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate vnet not found response has a 5xx status code
func (o *ValidateVnetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vnet not found response a status code equal to that given
func (o *ValidateVnetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the validate vnet not found response
func (o *ValidateVnetNotFound) Code() int {
	return 404
}

func (o *ValidateVnetNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetNotFound %s", 404, payload)
}

func (o *ValidateVnetNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetNotFound %s", 404, payload)
}

func (o *ValidateVnetNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateVnetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateVnetMethodNotAllowed creates a ValidateVnetMethodNotAllowed with default headers values
func NewValidateVnetMethodNotAllowed() *ValidateVnetMethodNotAllowed {
	return &ValidateVnetMethodNotAllowed{}
}

/*
ValidateVnetMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ValidateVnetMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate vnet method not allowed response has a 2xx status code
func (o *ValidateVnetMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate vnet method not allowed response has a 3xx status code
func (o *ValidateVnetMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vnet method not allowed response has a 4xx status code
func (o *ValidateVnetMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate vnet method not allowed response has a 5xx status code
func (o *ValidateVnetMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vnet method not allowed response a status code equal to that given
func (o *ValidateVnetMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the validate vnet method not allowed response
func (o *ValidateVnetMethodNotAllowed) Code() int {
	return 405
}

func (o *ValidateVnetMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetMethodNotAllowed %s", 405, payload)
}

func (o *ValidateVnetMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetMethodNotAllowed %s", 405, payload)
}

func (o *ValidateVnetMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateVnetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateVnetInternalServerError creates a ValidateVnetInternalServerError with default headers values
func NewValidateVnetInternalServerError() *ValidateVnetInternalServerError {
	return &ValidateVnetInternalServerError{}
}

/*
ValidateVnetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ValidateVnetInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate vnet internal server error response has a 2xx status code
func (o *ValidateVnetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate vnet internal server error response has a 3xx status code
func (o *ValidateVnetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vnet internal server error response has a 4xx status code
func (o *ValidateVnetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate vnet internal server error response has a 5xx status code
func (o *ValidateVnetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this validate vnet internal server error response a status code equal to that given
func (o *ValidateVnetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the validate vnet internal server error response
func (o *ValidateVnetInternalServerError) Code() int {
	return 500
}

func (o *ValidateVnetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetInternalServerError %s", 500, payload)
}

func (o *ValidateVnetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/azure/clusters/validate-vnet][%d] validateVnetInternalServerError %s", 500, payload)
}

func (o *ValidateVnetInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateVnetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
