// Code generated by go-swagger; DO NOT EDIT.

package ui_versioning_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetVersionsReader is a Reader for the GetVersions structure.
type GetVersionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVersionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVersionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetVersionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVersionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetVersionsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetVersionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/versions/{versioningKey}] getVersions", response, response.Code())
	}
}

// NewGetVersionsOK creates a GetVersionsOK with default headers values
func NewGetVersionsOK() *GetVersionsOK {
	return &GetVersionsOK{}
}

/*
GetVersionsOK describes a response with status code 200, with default header values.

OK
*/
type GetVersionsOK struct {
	Payload []*models.VersionVersioned
}

// IsSuccess returns true when this get versions o k response has a 2xx status code
func (o *GetVersionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get versions o k response has a 3xx status code
func (o *GetVersionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versions o k response has a 4xx status code
func (o *GetVersionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get versions o k response has a 5xx status code
func (o *GetVersionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get versions o k response a status code equal to that given
func (o *GetVersionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get versions o k response
func (o *GetVersionsOK) Code() int {
	return 200
}

func (o *GetVersionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsOK %s", 200, payload)
}

func (o *GetVersionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsOK %s", 200, payload)
}

func (o *GetVersionsOK) GetPayload() []*models.VersionVersioned {
	return o.Payload
}

func (o *GetVersionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionsBadRequest creates a GetVersionsBadRequest with default headers values
func NewGetVersionsBadRequest() *GetVersionsBadRequest {
	return &GetVersionsBadRequest{}
}

/*
GetVersionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetVersionsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get versions bad request response has a 2xx status code
func (o *GetVersionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get versions bad request response has a 3xx status code
func (o *GetVersionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versions bad request response has a 4xx status code
func (o *GetVersionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get versions bad request response has a 5xx status code
func (o *GetVersionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get versions bad request response a status code equal to that given
func (o *GetVersionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get versions bad request response
func (o *GetVersionsBadRequest) Code() int {
	return 400
}

func (o *GetVersionsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsBadRequest %s", 400, payload)
}

func (o *GetVersionsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsBadRequest %s", 400, payload)
}

func (o *GetVersionsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetVersionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionsNotFound creates a GetVersionsNotFound with default headers values
func NewGetVersionsNotFound() *GetVersionsNotFound {
	return &GetVersionsNotFound{}
}

/*
GetVersionsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetVersionsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get versions not found response has a 2xx status code
func (o *GetVersionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get versions not found response has a 3xx status code
func (o *GetVersionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versions not found response has a 4xx status code
func (o *GetVersionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get versions not found response has a 5xx status code
func (o *GetVersionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get versions not found response a status code equal to that given
func (o *GetVersionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get versions not found response
func (o *GetVersionsNotFound) Code() int {
	return 404
}

func (o *GetVersionsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsNotFound %s", 404, payload)
}

func (o *GetVersionsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsNotFound %s", 404, payload)
}

func (o *GetVersionsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetVersionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionsMethodNotAllowed creates a GetVersionsMethodNotAllowed with default headers values
func NewGetVersionsMethodNotAllowed() *GetVersionsMethodNotAllowed {
	return &GetVersionsMethodNotAllowed{}
}

/*
GetVersionsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetVersionsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get versions method not allowed response has a 2xx status code
func (o *GetVersionsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get versions method not allowed response has a 3xx status code
func (o *GetVersionsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versions method not allowed response has a 4xx status code
func (o *GetVersionsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get versions method not allowed response has a 5xx status code
func (o *GetVersionsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get versions method not allowed response a status code equal to that given
func (o *GetVersionsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get versions method not allowed response
func (o *GetVersionsMethodNotAllowed) Code() int {
	return 405
}

func (o *GetVersionsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsMethodNotAllowed %s", 405, payload)
}

func (o *GetVersionsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsMethodNotAllowed %s", 405, payload)
}

func (o *GetVersionsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetVersionsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionsInternalServerError creates a GetVersionsInternalServerError with default headers values
func NewGetVersionsInternalServerError() *GetVersionsInternalServerError {
	return &GetVersionsInternalServerError{}
}

/*
GetVersionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetVersionsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get versions internal server error response has a 2xx status code
func (o *GetVersionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get versions internal server error response has a 3xx status code
func (o *GetVersionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versions internal server error response has a 4xx status code
func (o *GetVersionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get versions internal server error response has a 5xx status code
func (o *GetVersionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get versions internal server error response a status code equal to that given
func (o *GetVersionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get versions internal server error response
func (o *GetVersionsInternalServerError) Code() int {
	return 500
}

func (o *GetVersionsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsInternalServerError %s", 500, payload)
}

func (o *GetVersionsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsInternalServerError %s", 500, payload)
}

func (o *GetVersionsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetVersionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
