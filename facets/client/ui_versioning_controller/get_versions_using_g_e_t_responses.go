// Code generated by go-swagger; DO NOT EDIT.

package ui_versioning_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetVersionsUsingGETReader is a Reader for the GetVersionsUsingGET structure.
type GetVersionsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVersionsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVersionsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetVersionsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetVersionsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVersionsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/versions/{versioningKey}] getVersionsUsingGET", response, response.Code())
	}
}

// NewGetVersionsUsingGETOK creates a GetVersionsUsingGETOK with default headers values
func NewGetVersionsUsingGETOK() *GetVersionsUsingGETOK {
	return &GetVersionsUsingGETOK{}
}

/*
GetVersionsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetVersionsUsingGETOK struct {
	Payload []*models.Version
}

// IsSuccess returns true when this get versions using g e t o k response has a 2xx status code
func (o *GetVersionsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get versions using g e t o k response has a 3xx status code
func (o *GetVersionsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versions using g e t o k response has a 4xx status code
func (o *GetVersionsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get versions using g e t o k response has a 5xx status code
func (o *GetVersionsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get versions using g e t o k response a status code equal to that given
func (o *GetVersionsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get versions using g e t o k response
func (o *GetVersionsUsingGETOK) Code() int {
	return 200
}

func (o *GetVersionsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsUsingGETOK %s", 200, payload)
}

func (o *GetVersionsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsUsingGETOK %s", 200, payload)
}

func (o *GetVersionsUsingGETOK) GetPayload() []*models.Version {
	return o.Payload
}

func (o *GetVersionsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionsUsingGETUnauthorized creates a GetVersionsUsingGETUnauthorized with default headers values
func NewGetVersionsUsingGETUnauthorized() *GetVersionsUsingGETUnauthorized {
	return &GetVersionsUsingGETUnauthorized{}
}

/*
GetVersionsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetVersionsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get versions using g e t unauthorized response has a 2xx status code
func (o *GetVersionsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get versions using g e t unauthorized response has a 3xx status code
func (o *GetVersionsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versions using g e t unauthorized response has a 4xx status code
func (o *GetVersionsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get versions using g e t unauthorized response has a 5xx status code
func (o *GetVersionsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get versions using g e t unauthorized response a status code equal to that given
func (o *GetVersionsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get versions using g e t unauthorized response
func (o *GetVersionsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetVersionsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsUsingGETUnauthorized", 401)
}

func (o *GetVersionsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsUsingGETUnauthorized", 401)
}

func (o *GetVersionsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVersionsUsingGETForbidden creates a GetVersionsUsingGETForbidden with default headers values
func NewGetVersionsUsingGETForbidden() *GetVersionsUsingGETForbidden {
	return &GetVersionsUsingGETForbidden{}
}

/*
GetVersionsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetVersionsUsingGETForbidden struct {
}

// IsSuccess returns true when this get versions using g e t forbidden response has a 2xx status code
func (o *GetVersionsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get versions using g e t forbidden response has a 3xx status code
func (o *GetVersionsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versions using g e t forbidden response has a 4xx status code
func (o *GetVersionsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get versions using g e t forbidden response has a 5xx status code
func (o *GetVersionsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get versions using g e t forbidden response a status code equal to that given
func (o *GetVersionsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get versions using g e t forbidden response
func (o *GetVersionsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetVersionsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsUsingGETForbidden", 403)
}

func (o *GetVersionsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsUsingGETForbidden", 403)
}

func (o *GetVersionsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVersionsUsingGETNotFound creates a GetVersionsUsingGETNotFound with default headers values
func NewGetVersionsUsingGETNotFound() *GetVersionsUsingGETNotFound {
	return &GetVersionsUsingGETNotFound{}
}

/*
GetVersionsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetVersionsUsingGETNotFound struct {
}

// IsSuccess returns true when this get versions using g e t not found response has a 2xx status code
func (o *GetVersionsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get versions using g e t not found response has a 3xx status code
func (o *GetVersionsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versions using g e t not found response has a 4xx status code
func (o *GetVersionsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get versions using g e t not found response has a 5xx status code
func (o *GetVersionsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get versions using g e t not found response a status code equal to that given
func (o *GetVersionsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get versions using g e t not found response
func (o *GetVersionsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetVersionsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsUsingGETNotFound", 404)
}

func (o *GetVersionsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}][%d] getVersionsUsingGETNotFound", 404)
}

func (o *GetVersionsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
