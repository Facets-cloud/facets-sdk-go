// Code generated by go-swagger; DO NOT EDIT.

package ui_versioning_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetVersionsPaginatedReader is a Reader for the GetVersionsPaginated structure.
type GetVersionsPaginatedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVersionsPaginatedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVersionsPaginatedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetVersionsPaginatedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVersionsPaginatedNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetVersionsPaginatedMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetVersionsPaginatedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/versions/{versioningKey}/paginated] getVersionsPaginated", response, response.Code())
	}
}

// NewGetVersionsPaginatedOK creates a GetVersionsPaginatedOK with default headers values
func NewGetVersionsPaginatedOK() *GetVersionsPaginatedOK {
	return &GetVersionsPaginatedOK{}
}

/*
GetVersionsPaginatedOK describes a response with status code 200, with default header values.

OK
*/
type GetVersionsPaginatedOK struct {
	Payload *models.PageVersionVersioned
}

// IsSuccess returns true when this get versions paginated o k response has a 2xx status code
func (o *GetVersionsPaginatedOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get versions paginated o k response has a 3xx status code
func (o *GetVersionsPaginatedOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versions paginated o k response has a 4xx status code
func (o *GetVersionsPaginatedOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get versions paginated o k response has a 5xx status code
func (o *GetVersionsPaginatedOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get versions paginated o k response a status code equal to that given
func (o *GetVersionsPaginatedOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get versions paginated o k response
func (o *GetVersionsPaginatedOK) Code() int {
	return 200
}

func (o *GetVersionsPaginatedOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}/paginated][%d] getVersionsPaginatedOK %s", 200, payload)
}

func (o *GetVersionsPaginatedOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}/paginated][%d] getVersionsPaginatedOK %s", 200, payload)
}

func (o *GetVersionsPaginatedOK) GetPayload() *models.PageVersionVersioned {
	return o.Payload
}

func (o *GetVersionsPaginatedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageVersionVersioned)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionsPaginatedBadRequest creates a GetVersionsPaginatedBadRequest with default headers values
func NewGetVersionsPaginatedBadRequest() *GetVersionsPaginatedBadRequest {
	return &GetVersionsPaginatedBadRequest{}
}

/*
GetVersionsPaginatedBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetVersionsPaginatedBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get versions paginated bad request response has a 2xx status code
func (o *GetVersionsPaginatedBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get versions paginated bad request response has a 3xx status code
func (o *GetVersionsPaginatedBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versions paginated bad request response has a 4xx status code
func (o *GetVersionsPaginatedBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get versions paginated bad request response has a 5xx status code
func (o *GetVersionsPaginatedBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get versions paginated bad request response a status code equal to that given
func (o *GetVersionsPaginatedBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get versions paginated bad request response
func (o *GetVersionsPaginatedBadRequest) Code() int {
	return 400
}

func (o *GetVersionsPaginatedBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}/paginated][%d] getVersionsPaginatedBadRequest %s", 400, payload)
}

func (o *GetVersionsPaginatedBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}/paginated][%d] getVersionsPaginatedBadRequest %s", 400, payload)
}

func (o *GetVersionsPaginatedBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetVersionsPaginatedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionsPaginatedNotFound creates a GetVersionsPaginatedNotFound with default headers values
func NewGetVersionsPaginatedNotFound() *GetVersionsPaginatedNotFound {
	return &GetVersionsPaginatedNotFound{}
}

/*
GetVersionsPaginatedNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetVersionsPaginatedNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get versions paginated not found response has a 2xx status code
func (o *GetVersionsPaginatedNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get versions paginated not found response has a 3xx status code
func (o *GetVersionsPaginatedNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versions paginated not found response has a 4xx status code
func (o *GetVersionsPaginatedNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get versions paginated not found response has a 5xx status code
func (o *GetVersionsPaginatedNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get versions paginated not found response a status code equal to that given
func (o *GetVersionsPaginatedNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get versions paginated not found response
func (o *GetVersionsPaginatedNotFound) Code() int {
	return 404
}

func (o *GetVersionsPaginatedNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}/paginated][%d] getVersionsPaginatedNotFound %s", 404, payload)
}

func (o *GetVersionsPaginatedNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}/paginated][%d] getVersionsPaginatedNotFound %s", 404, payload)
}

func (o *GetVersionsPaginatedNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetVersionsPaginatedNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionsPaginatedMethodNotAllowed creates a GetVersionsPaginatedMethodNotAllowed with default headers values
func NewGetVersionsPaginatedMethodNotAllowed() *GetVersionsPaginatedMethodNotAllowed {
	return &GetVersionsPaginatedMethodNotAllowed{}
}

/*
GetVersionsPaginatedMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetVersionsPaginatedMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get versions paginated method not allowed response has a 2xx status code
func (o *GetVersionsPaginatedMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get versions paginated method not allowed response has a 3xx status code
func (o *GetVersionsPaginatedMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versions paginated method not allowed response has a 4xx status code
func (o *GetVersionsPaginatedMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get versions paginated method not allowed response has a 5xx status code
func (o *GetVersionsPaginatedMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get versions paginated method not allowed response a status code equal to that given
func (o *GetVersionsPaginatedMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get versions paginated method not allowed response
func (o *GetVersionsPaginatedMethodNotAllowed) Code() int {
	return 405
}

func (o *GetVersionsPaginatedMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}/paginated][%d] getVersionsPaginatedMethodNotAllowed %s", 405, payload)
}

func (o *GetVersionsPaginatedMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}/paginated][%d] getVersionsPaginatedMethodNotAllowed %s", 405, payload)
}

func (o *GetVersionsPaginatedMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetVersionsPaginatedMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionsPaginatedInternalServerError creates a GetVersionsPaginatedInternalServerError with default headers values
func NewGetVersionsPaginatedInternalServerError() *GetVersionsPaginatedInternalServerError {
	return &GetVersionsPaginatedInternalServerError{}
}

/*
GetVersionsPaginatedInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetVersionsPaginatedInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get versions paginated internal server error response has a 2xx status code
func (o *GetVersionsPaginatedInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get versions paginated internal server error response has a 3xx status code
func (o *GetVersionsPaginatedInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versions paginated internal server error response has a 4xx status code
func (o *GetVersionsPaginatedInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get versions paginated internal server error response has a 5xx status code
func (o *GetVersionsPaginatedInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get versions paginated internal server error response a status code equal to that given
func (o *GetVersionsPaginatedInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get versions paginated internal server error response
func (o *GetVersionsPaginatedInternalServerError) Code() int {
	return 500
}

func (o *GetVersionsPaginatedInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}/paginated][%d] getVersionsPaginatedInternalServerError %s", 500, payload)
}

func (o *GetVersionsPaginatedInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/{versioningKey}/paginated][%d] getVersionsPaginatedInternalServerError %s", 500, payload)
}

func (o *GetVersionsPaginatedInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetVersionsPaginatedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
