// Code generated by go-swagger; DO NOT EDIT.

package ui_versioning_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteSoftDeleteEntityUsingDELETEReader is a Reader for the DeleteSoftDeleteEntityUsingDELETE structure.
type DeleteSoftDeleteEntityUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSoftDeleteEntityUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSoftDeleteEntityUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteSoftDeleteEntityUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteSoftDeleteEntityUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteSoftDeleteEntityUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/versions/softDeletedEntities] deleteSoftDeleteEntityUsingDELETE", response, response.Code())
	}
}

// NewDeleteSoftDeleteEntityUsingDELETEOK creates a DeleteSoftDeleteEntityUsingDELETEOK with default headers values
func NewDeleteSoftDeleteEntityUsingDELETEOK() *DeleteSoftDeleteEntityUsingDELETEOK {
	return &DeleteSoftDeleteEntityUsingDELETEOK{}
}

/*
DeleteSoftDeleteEntityUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteSoftDeleteEntityUsingDELETEOK struct {
}

// IsSuccess returns true when this delete soft delete entity using d e l e t e o k response has a 2xx status code
func (o *DeleteSoftDeleteEntityUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete soft delete entity using d e l e t e o k response has a 3xx status code
func (o *DeleteSoftDeleteEntityUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete soft delete entity using d e l e t e o k response has a 4xx status code
func (o *DeleteSoftDeleteEntityUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete soft delete entity using d e l e t e o k response has a 5xx status code
func (o *DeleteSoftDeleteEntityUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete soft delete entity using d e l e t e o k response a status code equal to that given
func (o *DeleteSoftDeleteEntityUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete soft delete entity using d e l e t e o k response
func (o *DeleteSoftDeleteEntityUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteSoftDeleteEntityUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityUsingDELETEOK", 200)
}

func (o *DeleteSoftDeleteEntityUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityUsingDELETEOK", 200)
}

func (o *DeleteSoftDeleteEntityUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSoftDeleteEntityUsingDELETENoContent creates a DeleteSoftDeleteEntityUsingDELETENoContent with default headers values
func NewDeleteSoftDeleteEntityUsingDELETENoContent() *DeleteSoftDeleteEntityUsingDELETENoContent {
	return &DeleteSoftDeleteEntityUsingDELETENoContent{}
}

/*
DeleteSoftDeleteEntityUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteSoftDeleteEntityUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete soft delete entity using d e l e t e no content response has a 2xx status code
func (o *DeleteSoftDeleteEntityUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete soft delete entity using d e l e t e no content response has a 3xx status code
func (o *DeleteSoftDeleteEntityUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete soft delete entity using d e l e t e no content response has a 4xx status code
func (o *DeleteSoftDeleteEntityUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete soft delete entity using d e l e t e no content response has a 5xx status code
func (o *DeleteSoftDeleteEntityUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete soft delete entity using d e l e t e no content response a status code equal to that given
func (o *DeleteSoftDeleteEntityUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete soft delete entity using d e l e t e no content response
func (o *DeleteSoftDeleteEntityUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteSoftDeleteEntityUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityUsingDELETENoContent", 204)
}

func (o *DeleteSoftDeleteEntityUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityUsingDELETENoContent", 204)
}

func (o *DeleteSoftDeleteEntityUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSoftDeleteEntityUsingDELETEUnauthorized creates a DeleteSoftDeleteEntityUsingDELETEUnauthorized with default headers values
func NewDeleteSoftDeleteEntityUsingDELETEUnauthorized() *DeleteSoftDeleteEntityUsingDELETEUnauthorized {
	return &DeleteSoftDeleteEntityUsingDELETEUnauthorized{}
}

/*
DeleteSoftDeleteEntityUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteSoftDeleteEntityUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete soft delete entity using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteSoftDeleteEntityUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete soft delete entity using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteSoftDeleteEntityUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete soft delete entity using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteSoftDeleteEntityUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete soft delete entity using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteSoftDeleteEntityUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete soft delete entity using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteSoftDeleteEntityUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete soft delete entity using d e l e t e unauthorized response
func (o *DeleteSoftDeleteEntityUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteSoftDeleteEntityUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityUsingDELETEUnauthorized", 401)
}

func (o *DeleteSoftDeleteEntityUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityUsingDELETEUnauthorized", 401)
}

func (o *DeleteSoftDeleteEntityUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSoftDeleteEntityUsingDELETEForbidden creates a DeleteSoftDeleteEntityUsingDELETEForbidden with default headers values
func NewDeleteSoftDeleteEntityUsingDELETEForbidden() *DeleteSoftDeleteEntityUsingDELETEForbidden {
	return &DeleteSoftDeleteEntityUsingDELETEForbidden{}
}

/*
DeleteSoftDeleteEntityUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteSoftDeleteEntityUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete soft delete entity using d e l e t e forbidden response has a 2xx status code
func (o *DeleteSoftDeleteEntityUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete soft delete entity using d e l e t e forbidden response has a 3xx status code
func (o *DeleteSoftDeleteEntityUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete soft delete entity using d e l e t e forbidden response has a 4xx status code
func (o *DeleteSoftDeleteEntityUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete soft delete entity using d e l e t e forbidden response has a 5xx status code
func (o *DeleteSoftDeleteEntityUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete soft delete entity using d e l e t e forbidden response a status code equal to that given
func (o *DeleteSoftDeleteEntityUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete soft delete entity using d e l e t e forbidden response
func (o *DeleteSoftDeleteEntityUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteSoftDeleteEntityUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityUsingDELETEForbidden", 403)
}

func (o *DeleteSoftDeleteEntityUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityUsingDELETEForbidden", 403)
}

func (o *DeleteSoftDeleteEntityUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
