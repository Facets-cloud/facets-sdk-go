// Code generated by go-swagger; DO NOT EDIT.

package ui_versioning_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteAllSoftDeleteEntitiesUsingDELETEReader is a Reader for the DeleteAllSoftDeleteEntitiesUsingDELETE structure.
type DeleteAllSoftDeleteEntitiesUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteAllSoftDeleteEntitiesUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteAllSoftDeleteEntitiesUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteAllSoftDeleteEntitiesUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/versions/softDeletedEntities/all] deleteAllSoftDeleteEntitiesUsingDELETE", response, response.Code())
	}
}

// NewDeleteAllSoftDeleteEntitiesUsingDELETEOK creates a DeleteAllSoftDeleteEntitiesUsingDELETEOK with default headers values
func NewDeleteAllSoftDeleteEntitiesUsingDELETEOK() *DeleteAllSoftDeleteEntitiesUsingDELETEOK {
	return &DeleteAllSoftDeleteEntitiesUsingDELETEOK{}
}

/*
DeleteAllSoftDeleteEntitiesUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteAllSoftDeleteEntitiesUsingDELETEOK struct {
}

// IsSuccess returns true when this delete all soft delete entities using d e l e t e o k response has a 2xx status code
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete all soft delete entities using d e l e t e o k response has a 3xx status code
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete all soft delete entities using d e l e t e o k response has a 4xx status code
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete all soft delete entities using d e l e t e o k response has a 5xx status code
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete all soft delete entities using d e l e t e o k response a status code equal to that given
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete all soft delete entities using d e l e t e o k response
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteAllSoftDeleteEntitiesUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesUsingDELETEOK", 200)
}

func (o *DeleteAllSoftDeleteEntitiesUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesUsingDELETEOK", 200)
}

func (o *DeleteAllSoftDeleteEntitiesUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAllSoftDeleteEntitiesUsingDELETENoContent creates a DeleteAllSoftDeleteEntitiesUsingDELETENoContent with default headers values
func NewDeleteAllSoftDeleteEntitiesUsingDELETENoContent() *DeleteAllSoftDeleteEntitiesUsingDELETENoContent {
	return &DeleteAllSoftDeleteEntitiesUsingDELETENoContent{}
}

/*
DeleteAllSoftDeleteEntitiesUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteAllSoftDeleteEntitiesUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete all soft delete entities using d e l e t e no content response has a 2xx status code
func (o *DeleteAllSoftDeleteEntitiesUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete all soft delete entities using d e l e t e no content response has a 3xx status code
func (o *DeleteAllSoftDeleteEntitiesUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete all soft delete entities using d e l e t e no content response has a 4xx status code
func (o *DeleteAllSoftDeleteEntitiesUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete all soft delete entities using d e l e t e no content response has a 5xx status code
func (o *DeleteAllSoftDeleteEntitiesUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete all soft delete entities using d e l e t e no content response a status code equal to that given
func (o *DeleteAllSoftDeleteEntitiesUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete all soft delete entities using d e l e t e no content response
func (o *DeleteAllSoftDeleteEntitiesUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteAllSoftDeleteEntitiesUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesUsingDELETENoContent", 204)
}

func (o *DeleteAllSoftDeleteEntitiesUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesUsingDELETENoContent", 204)
}

func (o *DeleteAllSoftDeleteEntitiesUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized creates a DeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized with default headers values
func NewDeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized() *DeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized {
	return &DeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized{}
}

/*
DeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete all soft delete entities using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete all soft delete entities using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete all soft delete entities using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete all soft delete entities using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete all soft delete entities using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete all soft delete entities using d e l e t e unauthorized response
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesUsingDELETEUnauthorized", 401)
}

func (o *DeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesUsingDELETEUnauthorized", 401)
}

func (o *DeleteAllSoftDeleteEntitiesUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAllSoftDeleteEntitiesUsingDELETEForbidden creates a DeleteAllSoftDeleteEntitiesUsingDELETEForbidden with default headers values
func NewDeleteAllSoftDeleteEntitiesUsingDELETEForbidden() *DeleteAllSoftDeleteEntitiesUsingDELETEForbidden {
	return &DeleteAllSoftDeleteEntitiesUsingDELETEForbidden{}
}

/*
DeleteAllSoftDeleteEntitiesUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteAllSoftDeleteEntitiesUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete all soft delete entities using d e l e t e forbidden response has a 2xx status code
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete all soft delete entities using d e l e t e forbidden response has a 3xx status code
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete all soft delete entities using d e l e t e forbidden response has a 4xx status code
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete all soft delete entities using d e l e t e forbidden response has a 5xx status code
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete all soft delete entities using d e l e t e forbidden response a status code equal to that given
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete all soft delete entities using d e l e t e forbidden response
func (o *DeleteAllSoftDeleteEntitiesUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteAllSoftDeleteEntitiesUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesUsingDELETEForbidden", 403)
}

func (o *DeleteAllSoftDeleteEntitiesUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesUsingDELETEForbidden", 403)
}

func (o *DeleteAllSoftDeleteEntitiesUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
