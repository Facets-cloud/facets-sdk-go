// Code generated by go-swagger; DO NOT EDIT.

package ui_versioning_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteAllSoftDeleteEntitiesReader is a Reader for the DeleteAllSoftDeleteEntities structure.
type DeleteAllSoftDeleteEntitiesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAllSoftDeleteEntitiesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteAllSoftDeleteEntitiesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteAllSoftDeleteEntitiesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteAllSoftDeleteEntitiesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteAllSoftDeleteEntitiesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteAllSoftDeleteEntitiesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/versions/softDeletedEntities/all] deleteAllSoftDeleteEntities", response, response.Code())
	}
}

// NewDeleteAllSoftDeleteEntitiesOK creates a DeleteAllSoftDeleteEntitiesOK with default headers values
func NewDeleteAllSoftDeleteEntitiesOK() *DeleteAllSoftDeleteEntitiesOK {
	return &DeleteAllSoftDeleteEntitiesOK{}
}

/*
DeleteAllSoftDeleteEntitiesOK describes a response with status code 200, with default header values.

OK
*/
type DeleteAllSoftDeleteEntitiesOK struct {
}

// IsSuccess returns true when this delete all soft delete entities o k response has a 2xx status code
func (o *DeleteAllSoftDeleteEntitiesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete all soft delete entities o k response has a 3xx status code
func (o *DeleteAllSoftDeleteEntitiesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete all soft delete entities o k response has a 4xx status code
func (o *DeleteAllSoftDeleteEntitiesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete all soft delete entities o k response has a 5xx status code
func (o *DeleteAllSoftDeleteEntitiesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete all soft delete entities o k response a status code equal to that given
func (o *DeleteAllSoftDeleteEntitiesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete all soft delete entities o k response
func (o *DeleteAllSoftDeleteEntitiesOK) Code() int {
	return 200
}

func (o *DeleteAllSoftDeleteEntitiesOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesOK", 200)
}

func (o *DeleteAllSoftDeleteEntitiesOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesOK", 200)
}

func (o *DeleteAllSoftDeleteEntitiesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAllSoftDeleteEntitiesBadRequest creates a DeleteAllSoftDeleteEntitiesBadRequest with default headers values
func NewDeleteAllSoftDeleteEntitiesBadRequest() *DeleteAllSoftDeleteEntitiesBadRequest {
	return &DeleteAllSoftDeleteEntitiesBadRequest{}
}

/*
DeleteAllSoftDeleteEntitiesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteAllSoftDeleteEntitiesBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete all soft delete entities bad request response has a 2xx status code
func (o *DeleteAllSoftDeleteEntitiesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete all soft delete entities bad request response has a 3xx status code
func (o *DeleteAllSoftDeleteEntitiesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete all soft delete entities bad request response has a 4xx status code
func (o *DeleteAllSoftDeleteEntitiesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete all soft delete entities bad request response has a 5xx status code
func (o *DeleteAllSoftDeleteEntitiesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete all soft delete entities bad request response a status code equal to that given
func (o *DeleteAllSoftDeleteEntitiesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete all soft delete entities bad request response
func (o *DeleteAllSoftDeleteEntitiesBadRequest) Code() int {
	return 400
}

func (o *DeleteAllSoftDeleteEntitiesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesBadRequest %s", 400, payload)
}

func (o *DeleteAllSoftDeleteEntitiesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesBadRequest %s", 400, payload)
}

func (o *DeleteAllSoftDeleteEntitiesBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteAllSoftDeleteEntitiesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAllSoftDeleteEntitiesNotFound creates a DeleteAllSoftDeleteEntitiesNotFound with default headers values
func NewDeleteAllSoftDeleteEntitiesNotFound() *DeleteAllSoftDeleteEntitiesNotFound {
	return &DeleteAllSoftDeleteEntitiesNotFound{}
}

/*
DeleteAllSoftDeleteEntitiesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteAllSoftDeleteEntitiesNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete all soft delete entities not found response has a 2xx status code
func (o *DeleteAllSoftDeleteEntitiesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete all soft delete entities not found response has a 3xx status code
func (o *DeleteAllSoftDeleteEntitiesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete all soft delete entities not found response has a 4xx status code
func (o *DeleteAllSoftDeleteEntitiesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete all soft delete entities not found response has a 5xx status code
func (o *DeleteAllSoftDeleteEntitiesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete all soft delete entities not found response a status code equal to that given
func (o *DeleteAllSoftDeleteEntitiesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete all soft delete entities not found response
func (o *DeleteAllSoftDeleteEntitiesNotFound) Code() int {
	return 404
}

func (o *DeleteAllSoftDeleteEntitiesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesNotFound %s", 404, payload)
}

func (o *DeleteAllSoftDeleteEntitiesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesNotFound %s", 404, payload)
}

func (o *DeleteAllSoftDeleteEntitiesNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteAllSoftDeleteEntitiesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAllSoftDeleteEntitiesMethodNotAllowed creates a DeleteAllSoftDeleteEntitiesMethodNotAllowed with default headers values
func NewDeleteAllSoftDeleteEntitiesMethodNotAllowed() *DeleteAllSoftDeleteEntitiesMethodNotAllowed {
	return &DeleteAllSoftDeleteEntitiesMethodNotAllowed{}
}

/*
DeleteAllSoftDeleteEntitiesMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DeleteAllSoftDeleteEntitiesMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete all soft delete entities method not allowed response has a 2xx status code
func (o *DeleteAllSoftDeleteEntitiesMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete all soft delete entities method not allowed response has a 3xx status code
func (o *DeleteAllSoftDeleteEntitiesMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete all soft delete entities method not allowed response has a 4xx status code
func (o *DeleteAllSoftDeleteEntitiesMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete all soft delete entities method not allowed response has a 5xx status code
func (o *DeleteAllSoftDeleteEntitiesMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete all soft delete entities method not allowed response a status code equal to that given
func (o *DeleteAllSoftDeleteEntitiesMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the delete all soft delete entities method not allowed response
func (o *DeleteAllSoftDeleteEntitiesMethodNotAllowed) Code() int {
	return 405
}

func (o *DeleteAllSoftDeleteEntitiesMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesMethodNotAllowed %s", 405, payload)
}

func (o *DeleteAllSoftDeleteEntitiesMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesMethodNotAllowed %s", 405, payload)
}

func (o *DeleteAllSoftDeleteEntitiesMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteAllSoftDeleteEntitiesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAllSoftDeleteEntitiesInternalServerError creates a DeleteAllSoftDeleteEntitiesInternalServerError with default headers values
func NewDeleteAllSoftDeleteEntitiesInternalServerError() *DeleteAllSoftDeleteEntitiesInternalServerError {
	return &DeleteAllSoftDeleteEntitiesInternalServerError{}
}

/*
DeleteAllSoftDeleteEntitiesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteAllSoftDeleteEntitiesInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete all soft delete entities internal server error response has a 2xx status code
func (o *DeleteAllSoftDeleteEntitiesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete all soft delete entities internal server error response has a 3xx status code
func (o *DeleteAllSoftDeleteEntitiesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete all soft delete entities internal server error response has a 4xx status code
func (o *DeleteAllSoftDeleteEntitiesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete all soft delete entities internal server error response has a 5xx status code
func (o *DeleteAllSoftDeleteEntitiesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete all soft delete entities internal server error response a status code equal to that given
func (o *DeleteAllSoftDeleteEntitiesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete all soft delete entities internal server error response
func (o *DeleteAllSoftDeleteEntitiesInternalServerError) Code() int {
	return 500
}

func (o *DeleteAllSoftDeleteEntitiesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesInternalServerError %s", 500, payload)
}

func (o *DeleteAllSoftDeleteEntitiesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities/all][%d] deleteAllSoftDeleteEntitiesInternalServerError %s", 500, payload)
}

func (o *DeleteAllSoftDeleteEntitiesInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteAllSoftDeleteEntitiesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
