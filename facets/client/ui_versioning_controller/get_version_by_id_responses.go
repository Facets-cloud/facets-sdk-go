// Code generated by go-swagger; DO NOT EDIT.

package ui_versioning_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetVersionByIDReader is a Reader for the GetVersionByID structure.
type GetVersionByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVersionByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVersionByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetVersionByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVersionByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetVersionByIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetVersionByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/versions/id/{id}] getVersionById", response, response.Code())
	}
}

// NewGetVersionByIDOK creates a GetVersionByIDOK with default headers values
func NewGetVersionByIDOK() *GetVersionByIDOK {
	return &GetVersionByIDOK{}
}

/*
GetVersionByIDOK describes a response with status code 200, with default header values.

OK
*/
type GetVersionByIDOK struct {
	Payload *models.Version
}

// IsSuccess returns true when this get version by Id o k response has a 2xx status code
func (o *GetVersionByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get version by Id o k response has a 3xx status code
func (o *GetVersionByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get version by Id o k response has a 4xx status code
func (o *GetVersionByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get version by Id o k response has a 5xx status code
func (o *GetVersionByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get version by Id o k response a status code equal to that given
func (o *GetVersionByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get version by Id o k response
func (o *GetVersionByIDOK) Code() int {
	return 200
}

func (o *GetVersionByIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/id/{id}][%d] getVersionByIdOK %s", 200, payload)
}

func (o *GetVersionByIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/id/{id}][%d] getVersionByIdOK %s", 200, payload)
}

func (o *GetVersionByIDOK) GetPayload() *models.Version {
	return o.Payload
}

func (o *GetVersionByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Version)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionByIDBadRequest creates a GetVersionByIDBadRequest with default headers values
func NewGetVersionByIDBadRequest() *GetVersionByIDBadRequest {
	return &GetVersionByIDBadRequest{}
}

/*
GetVersionByIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetVersionByIDBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get version by Id bad request response has a 2xx status code
func (o *GetVersionByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get version by Id bad request response has a 3xx status code
func (o *GetVersionByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get version by Id bad request response has a 4xx status code
func (o *GetVersionByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get version by Id bad request response has a 5xx status code
func (o *GetVersionByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get version by Id bad request response a status code equal to that given
func (o *GetVersionByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get version by Id bad request response
func (o *GetVersionByIDBadRequest) Code() int {
	return 400
}

func (o *GetVersionByIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/id/{id}][%d] getVersionByIdBadRequest %s", 400, payload)
}

func (o *GetVersionByIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/id/{id}][%d] getVersionByIdBadRequest %s", 400, payload)
}

func (o *GetVersionByIDBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetVersionByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionByIDNotFound creates a GetVersionByIDNotFound with default headers values
func NewGetVersionByIDNotFound() *GetVersionByIDNotFound {
	return &GetVersionByIDNotFound{}
}

/*
GetVersionByIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetVersionByIDNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get version by Id not found response has a 2xx status code
func (o *GetVersionByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get version by Id not found response has a 3xx status code
func (o *GetVersionByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get version by Id not found response has a 4xx status code
func (o *GetVersionByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get version by Id not found response has a 5xx status code
func (o *GetVersionByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get version by Id not found response a status code equal to that given
func (o *GetVersionByIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get version by Id not found response
func (o *GetVersionByIDNotFound) Code() int {
	return 404
}

func (o *GetVersionByIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/id/{id}][%d] getVersionByIdNotFound %s", 404, payload)
}

func (o *GetVersionByIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/id/{id}][%d] getVersionByIdNotFound %s", 404, payload)
}

func (o *GetVersionByIDNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetVersionByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionByIDMethodNotAllowed creates a GetVersionByIDMethodNotAllowed with default headers values
func NewGetVersionByIDMethodNotAllowed() *GetVersionByIDMethodNotAllowed {
	return &GetVersionByIDMethodNotAllowed{}
}

/*
GetVersionByIDMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetVersionByIDMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get version by Id method not allowed response has a 2xx status code
func (o *GetVersionByIDMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get version by Id method not allowed response has a 3xx status code
func (o *GetVersionByIDMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get version by Id method not allowed response has a 4xx status code
func (o *GetVersionByIDMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get version by Id method not allowed response has a 5xx status code
func (o *GetVersionByIDMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get version by Id method not allowed response a status code equal to that given
func (o *GetVersionByIDMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get version by Id method not allowed response
func (o *GetVersionByIDMethodNotAllowed) Code() int {
	return 405
}

func (o *GetVersionByIDMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/id/{id}][%d] getVersionByIdMethodNotAllowed %s", 405, payload)
}

func (o *GetVersionByIDMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/id/{id}][%d] getVersionByIdMethodNotAllowed %s", 405, payload)
}

func (o *GetVersionByIDMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetVersionByIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionByIDInternalServerError creates a GetVersionByIDInternalServerError with default headers values
func NewGetVersionByIDInternalServerError() *GetVersionByIDInternalServerError {
	return &GetVersionByIDInternalServerError{}
}

/*
GetVersionByIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetVersionByIDInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get version by Id internal server error response has a 2xx status code
func (o *GetVersionByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get version by Id internal server error response has a 3xx status code
func (o *GetVersionByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get version by Id internal server error response has a 4xx status code
func (o *GetVersionByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get version by Id internal server error response has a 5xx status code
func (o *GetVersionByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get version by Id internal server error response a status code equal to that given
func (o *GetVersionByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get version by Id internal server error response
func (o *GetVersionByIDInternalServerError) Code() int {
	return 500
}

func (o *GetVersionByIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/id/{id}][%d] getVersionByIdInternalServerError %s", 500, payload)
}

func (o *GetVersionByIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/versions/id/{id}][%d] getVersionByIdInternalServerError %s", 500, payload)
}

func (o *GetVersionByIDInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetVersionByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
