// Code generated by go-swagger; DO NOT EDIT.

package ui_versioning_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteSoftDeleteEntityReader is a Reader for the DeleteSoftDeleteEntity structure.
type DeleteSoftDeleteEntityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSoftDeleteEntityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSoftDeleteEntityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSoftDeleteEntityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSoftDeleteEntityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteSoftDeleteEntityMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteSoftDeleteEntityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/versions/softDeletedEntities] deleteSoftDeleteEntity", response, response.Code())
	}
}

// NewDeleteSoftDeleteEntityOK creates a DeleteSoftDeleteEntityOK with default headers values
func NewDeleteSoftDeleteEntityOK() *DeleteSoftDeleteEntityOK {
	return &DeleteSoftDeleteEntityOK{}
}

/*
DeleteSoftDeleteEntityOK describes a response with status code 200, with default header values.

OK
*/
type DeleteSoftDeleteEntityOK struct {
}

// IsSuccess returns true when this delete soft delete entity o k response has a 2xx status code
func (o *DeleteSoftDeleteEntityOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete soft delete entity o k response has a 3xx status code
func (o *DeleteSoftDeleteEntityOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete soft delete entity o k response has a 4xx status code
func (o *DeleteSoftDeleteEntityOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete soft delete entity o k response has a 5xx status code
func (o *DeleteSoftDeleteEntityOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete soft delete entity o k response a status code equal to that given
func (o *DeleteSoftDeleteEntityOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete soft delete entity o k response
func (o *DeleteSoftDeleteEntityOK) Code() int {
	return 200
}

func (o *DeleteSoftDeleteEntityOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityOK", 200)
}

func (o *DeleteSoftDeleteEntityOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityOK", 200)
}

func (o *DeleteSoftDeleteEntityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSoftDeleteEntityBadRequest creates a DeleteSoftDeleteEntityBadRequest with default headers values
func NewDeleteSoftDeleteEntityBadRequest() *DeleteSoftDeleteEntityBadRequest {
	return &DeleteSoftDeleteEntityBadRequest{}
}

/*
DeleteSoftDeleteEntityBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteSoftDeleteEntityBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete soft delete entity bad request response has a 2xx status code
func (o *DeleteSoftDeleteEntityBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete soft delete entity bad request response has a 3xx status code
func (o *DeleteSoftDeleteEntityBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete soft delete entity bad request response has a 4xx status code
func (o *DeleteSoftDeleteEntityBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete soft delete entity bad request response has a 5xx status code
func (o *DeleteSoftDeleteEntityBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete soft delete entity bad request response a status code equal to that given
func (o *DeleteSoftDeleteEntityBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete soft delete entity bad request response
func (o *DeleteSoftDeleteEntityBadRequest) Code() int {
	return 400
}

func (o *DeleteSoftDeleteEntityBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityBadRequest %s", 400, payload)
}

func (o *DeleteSoftDeleteEntityBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityBadRequest %s", 400, payload)
}

func (o *DeleteSoftDeleteEntityBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteSoftDeleteEntityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSoftDeleteEntityNotFound creates a DeleteSoftDeleteEntityNotFound with default headers values
func NewDeleteSoftDeleteEntityNotFound() *DeleteSoftDeleteEntityNotFound {
	return &DeleteSoftDeleteEntityNotFound{}
}

/*
DeleteSoftDeleteEntityNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteSoftDeleteEntityNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete soft delete entity not found response has a 2xx status code
func (o *DeleteSoftDeleteEntityNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete soft delete entity not found response has a 3xx status code
func (o *DeleteSoftDeleteEntityNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete soft delete entity not found response has a 4xx status code
func (o *DeleteSoftDeleteEntityNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete soft delete entity not found response has a 5xx status code
func (o *DeleteSoftDeleteEntityNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete soft delete entity not found response a status code equal to that given
func (o *DeleteSoftDeleteEntityNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete soft delete entity not found response
func (o *DeleteSoftDeleteEntityNotFound) Code() int {
	return 404
}

func (o *DeleteSoftDeleteEntityNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityNotFound %s", 404, payload)
}

func (o *DeleteSoftDeleteEntityNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityNotFound %s", 404, payload)
}

func (o *DeleteSoftDeleteEntityNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteSoftDeleteEntityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSoftDeleteEntityMethodNotAllowed creates a DeleteSoftDeleteEntityMethodNotAllowed with default headers values
func NewDeleteSoftDeleteEntityMethodNotAllowed() *DeleteSoftDeleteEntityMethodNotAllowed {
	return &DeleteSoftDeleteEntityMethodNotAllowed{}
}

/*
DeleteSoftDeleteEntityMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DeleteSoftDeleteEntityMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete soft delete entity method not allowed response has a 2xx status code
func (o *DeleteSoftDeleteEntityMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete soft delete entity method not allowed response has a 3xx status code
func (o *DeleteSoftDeleteEntityMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete soft delete entity method not allowed response has a 4xx status code
func (o *DeleteSoftDeleteEntityMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete soft delete entity method not allowed response has a 5xx status code
func (o *DeleteSoftDeleteEntityMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete soft delete entity method not allowed response a status code equal to that given
func (o *DeleteSoftDeleteEntityMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the delete soft delete entity method not allowed response
func (o *DeleteSoftDeleteEntityMethodNotAllowed) Code() int {
	return 405
}

func (o *DeleteSoftDeleteEntityMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityMethodNotAllowed %s", 405, payload)
}

func (o *DeleteSoftDeleteEntityMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityMethodNotAllowed %s", 405, payload)
}

func (o *DeleteSoftDeleteEntityMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteSoftDeleteEntityMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSoftDeleteEntityInternalServerError creates a DeleteSoftDeleteEntityInternalServerError with default headers values
func NewDeleteSoftDeleteEntityInternalServerError() *DeleteSoftDeleteEntityInternalServerError {
	return &DeleteSoftDeleteEntityInternalServerError{}
}

/*
DeleteSoftDeleteEntityInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteSoftDeleteEntityInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete soft delete entity internal server error response has a 2xx status code
func (o *DeleteSoftDeleteEntityInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete soft delete entity internal server error response has a 3xx status code
func (o *DeleteSoftDeleteEntityInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete soft delete entity internal server error response has a 4xx status code
func (o *DeleteSoftDeleteEntityInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete soft delete entity internal server error response has a 5xx status code
func (o *DeleteSoftDeleteEntityInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete soft delete entity internal server error response a status code equal to that given
func (o *DeleteSoftDeleteEntityInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete soft delete entity internal server error response
func (o *DeleteSoftDeleteEntityInternalServerError) Code() int {
	return 500
}

func (o *DeleteSoftDeleteEntityInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityInternalServerError %s", 500, payload)
}

func (o *DeleteSoftDeleteEntityInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/versions/softDeletedEntities][%d] deleteSoftDeleteEntityInternalServerError %s", 500, payload)
}

func (o *DeleteSoftDeleteEntityInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteSoftDeleteEntityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
