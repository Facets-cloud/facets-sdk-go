// Code generated by go-swagger; DO NOT EDIT.

package ui_versioning_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui versioning controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui versioning controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui versioning controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui versioning controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAllSoftDeleteEntitiesUsingDELETE(params *DeleteAllSoftDeleteEntitiesUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllSoftDeleteEntitiesUsingDELETEOK, *DeleteAllSoftDeleteEntitiesUsingDELETENoContent, error)

	DeleteSoftDeleteEntityUsingDELETE(params *DeleteSoftDeleteEntityUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSoftDeleteEntityUsingDELETEOK, *DeleteSoftDeleteEntityUsingDELETENoContent, error)

	GetVersionByIDUsingGET(params *GetVersionByIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVersionByIDUsingGETOK, error)

	GetVersionsUsingGET(params *GetVersionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVersionsUsingGETOK, error)

	RestoreSoftDeleteUsingPOST(params *RestoreSoftDeleteUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreSoftDeleteUsingPOSTOK, *RestoreSoftDeleteUsingPOSTCreated, error)

	RestoreUsingPOST(params *RestoreUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreUsingPOSTOK, *RestoreUsingPOSTCreated, error)

	SoftDeletedEntitiesByTypeUsingGET(params *SoftDeletedEntitiesByTypeUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SoftDeletedEntitiesByTypeUsingGETOK, error)

	SoftDeletedEntitiesUsingGET(params *SoftDeletedEntitiesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SoftDeletedEntitiesUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAllSoftDeleteEntitiesUsingDELETE deletes all soft delete entities
*/
func (a *Client) DeleteAllSoftDeleteEntitiesUsingDELETE(params *DeleteAllSoftDeleteEntitiesUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllSoftDeleteEntitiesUsingDELETEOK, *DeleteAllSoftDeleteEntitiesUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllSoftDeleteEntitiesUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAllSoftDeleteEntitiesUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/versions/softDeletedEntities/all",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAllSoftDeleteEntitiesUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAllSoftDeleteEntitiesUsingDELETEOK:
		return value, nil, nil
	case *DeleteAllSoftDeleteEntitiesUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_versioning_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSoftDeleteEntityUsingDELETE deletes soft delete entity
*/
func (a *Client) DeleteSoftDeleteEntityUsingDELETE(params *DeleteSoftDeleteEntityUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSoftDeleteEntityUsingDELETEOK, *DeleteSoftDeleteEntityUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSoftDeleteEntityUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSoftDeleteEntityUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/versions/softDeletedEntities",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSoftDeleteEntityUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteSoftDeleteEntityUsingDELETEOK:
		return value, nil, nil
	case *DeleteSoftDeleteEntityUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_versioning_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVersionByIDUsingGET gets version by Id
*/
func (a *Client) GetVersionByIDUsingGET(params *GetVersionByIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVersionByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionByIDUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVersionByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/versions/id/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVersionByIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVersionByIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVersionsUsingGET gets versions
*/
func (a *Client) GetVersionsUsingGET(params *GetVersionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVersionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVersionsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/versions/{versioningKey}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVersionsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVersionsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RestoreSoftDeleteUsingPOST restores soft delete
*/
func (a *Client) RestoreSoftDeleteUsingPOST(params *RestoreSoftDeleteUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreSoftDeleteUsingPOSTOK, *RestoreSoftDeleteUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreSoftDeleteUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restoreSoftDeleteUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/versions/softDeletedEntities/{entityId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RestoreSoftDeleteUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RestoreSoftDeleteUsingPOSTOK:
		return value, nil, nil
	case *RestoreSoftDeleteUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_versioning_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RestoreUsingPOST restores
*/
func (a *Client) RestoreUsingPOST(params *RestoreUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreUsingPOSTOK, *RestoreUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restoreUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/versions/{versionId}/restore",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RestoreUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RestoreUsingPOSTOK:
		return value, nil, nil
	case *RestoreUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_versioning_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SoftDeletedEntitiesByTypeUsingGET softs deleted entities by type
*/
func (a *Client) SoftDeletedEntitiesByTypeUsingGET(params *SoftDeletedEntitiesByTypeUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SoftDeletedEntitiesByTypeUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSoftDeletedEntitiesByTypeUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "softDeletedEntitiesByTypeUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/versions/softDeletedEntities/{entityType}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SoftDeletedEntitiesByTypeUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SoftDeletedEntitiesByTypeUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for softDeletedEntitiesByTypeUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SoftDeletedEntitiesUsingGET softs deleted entities
*/
func (a *Client) SoftDeletedEntitiesUsingGET(params *SoftDeletedEntitiesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SoftDeletedEntitiesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSoftDeletedEntitiesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "softDeletedEntitiesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/versions/softDeletedEntities",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SoftDeletedEntitiesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SoftDeletedEntitiesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for softDeletedEntitiesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
