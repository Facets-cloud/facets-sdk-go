// Code generated by go-swagger; DO NOT EDIT.

package ui_versioning_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui versioning controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui versioning controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui versioning controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui versioning controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAllSoftDeleteEntities(params *DeleteAllSoftDeleteEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllSoftDeleteEntitiesOK, error)

	DeleteSoftDeleteEntity(params *DeleteSoftDeleteEntityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSoftDeleteEntityOK, error)

	GetVersionByID(params *GetVersionByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVersionByIDOK, error)

	GetVersions(params *GetVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVersionsOK, error)

	GetVersionsPaginated(params *GetVersionsPaginatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVersionsPaginatedOK, error)

	Restore(params *RestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreOK, error)

	RestoreSoftDelete(params *RestoreSoftDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreSoftDeleteOK, error)

	SoftDeletedEntities(params *SoftDeletedEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SoftDeletedEntitiesOK, error)

	SoftDeletedEntitiesByType(params *SoftDeletedEntitiesByTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SoftDeletedEntitiesByTypeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAllSoftDeleteEntities delete all soft delete entities API
*/
func (a *Client) DeleteAllSoftDeleteEntities(params *DeleteAllSoftDeleteEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllSoftDeleteEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllSoftDeleteEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAllSoftDeleteEntities",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/versions/softDeletedEntities/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAllSoftDeleteEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAllSoftDeleteEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAllSoftDeleteEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSoftDeleteEntity delete soft delete entity API
*/
func (a *Client) DeleteSoftDeleteEntity(params *DeleteSoftDeleteEntityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSoftDeleteEntityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSoftDeleteEntityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSoftDeleteEntity",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/versions/softDeletedEntities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSoftDeleteEntityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSoftDeleteEntityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSoftDeleteEntity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVersionByID get version by Id API
*/
func (a *Client) GetVersionByID(params *GetVersionByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVersionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVersionById",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/versions/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVersionByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVersionById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVersions get versions API
*/
func (a *Client) GetVersions(params *GetVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVersions",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/versions/{versioningKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVersions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVersionsPaginated get versions paginated API
*/
func (a *Client) GetVersionsPaginated(params *GetVersionsPaginatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVersionsPaginatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionsPaginatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVersionsPaginated",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/versions/{versioningKey}/paginated",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVersionsPaginatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionsPaginatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVersionsPaginated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Restore restore API
*/
func (a *Client) Restore(params *RestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restore",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/versions/{versionId}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RestoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RestoreSoftDelete restore soft delete API
*/
func (a *Client) RestoreSoftDelete(params *RestoreSoftDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreSoftDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreSoftDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restoreSoftDelete",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/versions/softDeletedEntities/{entityId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RestoreSoftDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreSoftDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restoreSoftDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SoftDeletedEntities soft deleted entities API
*/
func (a *Client) SoftDeletedEntities(params *SoftDeletedEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SoftDeletedEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSoftDeletedEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "softDeletedEntities",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/versions/softDeletedEntities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SoftDeletedEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SoftDeletedEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for softDeletedEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SoftDeletedEntitiesByType soft deleted entities by type API
*/
func (a *Client) SoftDeletedEntitiesByType(params *SoftDeletedEntitiesByTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SoftDeletedEntitiesByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSoftDeletedEntitiesByTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "softDeletedEntitiesByType",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/versions/softDeletedEntities/{entityType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SoftDeletedEntitiesByTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SoftDeletedEntitiesByTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for softDeletedEntitiesByType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
