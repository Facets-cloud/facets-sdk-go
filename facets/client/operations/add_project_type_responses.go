// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// AddProjectTypeReader is a Reader for the AddProjectType structure.
type AddProjectTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddProjectTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewAddProjectTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddProjectTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddProjectTypeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddProjectTypeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewAddProjectTypeMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddProjectTypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/project-types] addProjectType", response, response.Code())
	}
}

// NewAddProjectTypeOK creates a AddProjectTypeOK with default headers values
func NewAddProjectTypeOK() *AddProjectTypeOK {
	return &AddProjectTypeOK{}
}

/*
AddProjectTypeOK describes a response with status code 200, with default header values.

Project type created successfully
*/
type AddProjectTypeOK struct {
	Payload *models.ProjectTypeResponse
}

// IsSuccess returns true when this add project type o k response has a 2xx status code
func (o *AddProjectTypeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add project type o k response has a 3xx status code
func (o *AddProjectTypeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add project type o k response has a 4xx status code
func (o *AddProjectTypeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add project type o k response has a 5xx status code
func (o *AddProjectTypeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add project type o k response a status code equal to that given
func (o *AddProjectTypeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add project type o k response
func (o *AddProjectTypeOK) Code() int {
	return 200
}

func (o *AddProjectTypeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeOK %s", 200, payload)
}

func (o *AddProjectTypeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeOK %s", 200, payload)
}

func (o *AddProjectTypeOK) GetPayload() *models.ProjectTypeResponse {
	return o.Payload
}

func (o *AddProjectTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectTypeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddProjectTypeBadRequest creates a AddProjectTypeBadRequest with default headers values
func NewAddProjectTypeBadRequest() *AddProjectTypeBadRequest {
	return &AddProjectTypeBadRequest{}
}

/*
AddProjectTypeBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type AddProjectTypeBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add project type bad request response has a 2xx status code
func (o *AddProjectTypeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add project type bad request response has a 3xx status code
func (o *AddProjectTypeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add project type bad request response has a 4xx status code
func (o *AddProjectTypeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add project type bad request response has a 5xx status code
func (o *AddProjectTypeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add project type bad request response a status code equal to that given
func (o *AddProjectTypeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add project type bad request response
func (o *AddProjectTypeBadRequest) Code() int {
	return 400
}

func (o *AddProjectTypeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeBadRequest %s", 400, payload)
}

func (o *AddProjectTypeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeBadRequest %s", 400, payload)
}

func (o *AddProjectTypeBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddProjectTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddProjectTypeForbidden creates a AddProjectTypeForbidden with default headers values
func NewAddProjectTypeForbidden() *AddProjectTypeForbidden {
	return &AddProjectTypeForbidden{}
}

/*
AddProjectTypeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddProjectTypeForbidden struct {
	Payload string
}

// IsSuccess returns true when this add project type forbidden response has a 2xx status code
func (o *AddProjectTypeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add project type forbidden response has a 3xx status code
func (o *AddProjectTypeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add project type forbidden response has a 4xx status code
func (o *AddProjectTypeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add project type forbidden response has a 5xx status code
func (o *AddProjectTypeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add project type forbidden response a status code equal to that given
func (o *AddProjectTypeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add project type forbidden response
func (o *AddProjectTypeForbidden) Code() int {
	return 403
}

func (o *AddProjectTypeForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeForbidden %s", 403, payload)
}

func (o *AddProjectTypeForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeForbidden %s", 403, payload)
}

func (o *AddProjectTypeForbidden) GetPayload() string {
	return o.Payload
}

func (o *AddProjectTypeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddProjectTypeNotFound creates a AddProjectTypeNotFound with default headers values
func NewAddProjectTypeNotFound() *AddProjectTypeNotFound {
	return &AddProjectTypeNotFound{}
}

/*
AddProjectTypeNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AddProjectTypeNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add project type not found response has a 2xx status code
func (o *AddProjectTypeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add project type not found response has a 3xx status code
func (o *AddProjectTypeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add project type not found response has a 4xx status code
func (o *AddProjectTypeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add project type not found response has a 5xx status code
func (o *AddProjectTypeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add project type not found response a status code equal to that given
func (o *AddProjectTypeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add project type not found response
func (o *AddProjectTypeNotFound) Code() int {
	return 404
}

func (o *AddProjectTypeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeNotFound %s", 404, payload)
}

func (o *AddProjectTypeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeNotFound %s", 404, payload)
}

func (o *AddProjectTypeNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddProjectTypeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddProjectTypeMethodNotAllowed creates a AddProjectTypeMethodNotAllowed with default headers values
func NewAddProjectTypeMethodNotAllowed() *AddProjectTypeMethodNotAllowed {
	return &AddProjectTypeMethodNotAllowed{}
}

/*
AddProjectTypeMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type AddProjectTypeMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add project type method not allowed response has a 2xx status code
func (o *AddProjectTypeMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add project type method not allowed response has a 3xx status code
func (o *AddProjectTypeMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add project type method not allowed response has a 4xx status code
func (o *AddProjectTypeMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this add project type method not allowed response has a 5xx status code
func (o *AddProjectTypeMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this add project type method not allowed response a status code equal to that given
func (o *AddProjectTypeMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the add project type method not allowed response
func (o *AddProjectTypeMethodNotAllowed) Code() int {
	return 405
}

func (o *AddProjectTypeMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeMethodNotAllowed %s", 405, payload)
}

func (o *AddProjectTypeMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeMethodNotAllowed %s", 405, payload)
}

func (o *AddProjectTypeMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddProjectTypeMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddProjectTypeInternalServerError creates a AddProjectTypeInternalServerError with default headers values
func NewAddProjectTypeInternalServerError() *AddProjectTypeInternalServerError {
	return &AddProjectTypeInternalServerError{}
}

/*
AddProjectTypeInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type AddProjectTypeInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add project type internal server error response has a 2xx status code
func (o *AddProjectTypeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add project type internal server error response has a 3xx status code
func (o *AddProjectTypeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add project type internal server error response has a 4xx status code
func (o *AddProjectTypeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add project type internal server error response has a 5xx status code
func (o *AddProjectTypeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add project type internal server error response a status code equal to that given
func (o *AddProjectTypeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add project type internal server error response
func (o *AddProjectTypeInternalServerError) Code() int {
	return 500
}

func (o *AddProjectTypeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeInternalServerError %s", 500, payload)
}

func (o *AddProjectTypeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeInternalServerError %s", 500, payload)
}

func (o *AddProjectTypeInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddProjectTypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
