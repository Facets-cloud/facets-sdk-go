// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// AddToolsConfigReader is a Reader for the AddToolsConfig structure.
type AddToolsConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddToolsConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddToolsConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddToolsConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddToolsConfigForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddToolsConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewAddToolsConfigMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddToolsConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/tools-config] addToolsConfig", response, response.Code())
	}
}

// NewAddToolsConfigOK creates a AddToolsConfigOK with default headers values
func NewAddToolsConfigOK() *AddToolsConfigOK {
	return &AddToolsConfigOK{}
}

/*
AddToolsConfigOK describes a response with status code 200, with default header values.

OK
*/
type AddToolsConfigOK struct {
	Payload *models.ToolsConfig
}

// IsSuccess returns true when this add tools config o k response has a 2xx status code
func (o *AddToolsConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add tools config o k response has a 3xx status code
func (o *AddToolsConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add tools config o k response has a 4xx status code
func (o *AddToolsConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add tools config o k response has a 5xx status code
func (o *AddToolsConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add tools config o k response a status code equal to that given
func (o *AddToolsConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add tools config o k response
func (o *AddToolsConfigOK) Code() int {
	return 200
}

func (o *AddToolsConfigOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/tools-config][%d] addToolsConfigOK %s", 200, payload)
}

func (o *AddToolsConfigOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/tools-config][%d] addToolsConfigOK %s", 200, payload)
}

func (o *AddToolsConfigOK) GetPayload() *models.ToolsConfig {
	return o.Payload
}

func (o *AddToolsConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ToolsConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddToolsConfigBadRequest creates a AddToolsConfigBadRequest with default headers values
func NewAddToolsConfigBadRequest() *AddToolsConfigBadRequest {
	return &AddToolsConfigBadRequest{}
}

/*
AddToolsConfigBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AddToolsConfigBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add tools config bad request response has a 2xx status code
func (o *AddToolsConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add tools config bad request response has a 3xx status code
func (o *AddToolsConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add tools config bad request response has a 4xx status code
func (o *AddToolsConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add tools config bad request response has a 5xx status code
func (o *AddToolsConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add tools config bad request response a status code equal to that given
func (o *AddToolsConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add tools config bad request response
func (o *AddToolsConfigBadRequest) Code() int {
	return 400
}

func (o *AddToolsConfigBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/tools-config][%d] addToolsConfigBadRequest %s", 400, payload)
}

func (o *AddToolsConfigBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/tools-config][%d] addToolsConfigBadRequest %s", 400, payload)
}

func (o *AddToolsConfigBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddToolsConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddToolsConfigForbidden creates a AddToolsConfigForbidden with default headers values
func NewAddToolsConfigForbidden() *AddToolsConfigForbidden {
	return &AddToolsConfigForbidden{}
}

/*
AddToolsConfigForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddToolsConfigForbidden struct {
	Payload string
}

// IsSuccess returns true when this add tools config forbidden response has a 2xx status code
func (o *AddToolsConfigForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add tools config forbidden response has a 3xx status code
func (o *AddToolsConfigForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add tools config forbidden response has a 4xx status code
func (o *AddToolsConfigForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add tools config forbidden response has a 5xx status code
func (o *AddToolsConfigForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add tools config forbidden response a status code equal to that given
func (o *AddToolsConfigForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add tools config forbidden response
func (o *AddToolsConfigForbidden) Code() int {
	return 403
}

func (o *AddToolsConfigForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/tools-config][%d] addToolsConfigForbidden %s", 403, payload)
}

func (o *AddToolsConfigForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/tools-config][%d] addToolsConfigForbidden %s", 403, payload)
}

func (o *AddToolsConfigForbidden) GetPayload() string {
	return o.Payload
}

func (o *AddToolsConfigForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddToolsConfigNotFound creates a AddToolsConfigNotFound with default headers values
func NewAddToolsConfigNotFound() *AddToolsConfigNotFound {
	return &AddToolsConfigNotFound{}
}

/*
AddToolsConfigNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AddToolsConfigNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add tools config not found response has a 2xx status code
func (o *AddToolsConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add tools config not found response has a 3xx status code
func (o *AddToolsConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add tools config not found response has a 4xx status code
func (o *AddToolsConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add tools config not found response has a 5xx status code
func (o *AddToolsConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add tools config not found response a status code equal to that given
func (o *AddToolsConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add tools config not found response
func (o *AddToolsConfigNotFound) Code() int {
	return 404
}

func (o *AddToolsConfigNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/tools-config][%d] addToolsConfigNotFound %s", 404, payload)
}

func (o *AddToolsConfigNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/tools-config][%d] addToolsConfigNotFound %s", 404, payload)
}

func (o *AddToolsConfigNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddToolsConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddToolsConfigMethodNotAllowed creates a AddToolsConfigMethodNotAllowed with default headers values
func NewAddToolsConfigMethodNotAllowed() *AddToolsConfigMethodNotAllowed {
	return &AddToolsConfigMethodNotAllowed{}
}

/*
AddToolsConfigMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type AddToolsConfigMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add tools config method not allowed response has a 2xx status code
func (o *AddToolsConfigMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add tools config method not allowed response has a 3xx status code
func (o *AddToolsConfigMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add tools config method not allowed response has a 4xx status code
func (o *AddToolsConfigMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this add tools config method not allowed response has a 5xx status code
func (o *AddToolsConfigMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this add tools config method not allowed response a status code equal to that given
func (o *AddToolsConfigMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the add tools config method not allowed response
func (o *AddToolsConfigMethodNotAllowed) Code() int {
	return 405
}

func (o *AddToolsConfigMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/tools-config][%d] addToolsConfigMethodNotAllowed %s", 405, payload)
}

func (o *AddToolsConfigMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/tools-config][%d] addToolsConfigMethodNotAllowed %s", 405, payload)
}

func (o *AddToolsConfigMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddToolsConfigMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddToolsConfigInternalServerError creates a AddToolsConfigInternalServerError with default headers values
func NewAddToolsConfigInternalServerError() *AddToolsConfigInternalServerError {
	return &AddToolsConfigInternalServerError{}
}

/*
AddToolsConfigInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AddToolsConfigInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add tools config internal server error response has a 2xx status code
func (o *AddToolsConfigInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add tools config internal server error response has a 3xx status code
func (o *AddToolsConfigInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add tools config internal server error response has a 4xx status code
func (o *AddToolsConfigInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add tools config internal server error response has a 5xx status code
func (o *AddToolsConfigInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add tools config internal server error response a status code equal to that given
func (o *AddToolsConfigInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add tools config internal server error response
func (o *AddToolsConfigInternalServerError) Code() int {
	return 500
}

func (o *AddToolsConfigInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/tools-config][%d] addToolsConfigInternalServerError %s", 500, payload)
}

func (o *AddToolsConfigInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/tools-config][%d] addToolsConfigInternalServerError %s", 500, payload)
}

func (o *AddToolsConfigInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddToolsConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
