// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// AddVariableReader is a Reader for the AddVariable structure.
type AddVariableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddVariableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewAddVariableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddVariableBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddVariableForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddVariableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewAddVariableMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddVariableInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/stacks/{stackName}/variables] addVariable", response, response.Code())
	}
}

// NewAddVariableOK creates a AddVariableOK with default headers values
func NewAddVariableOK() *AddVariableOK {
	return &AddVariableOK{}
}

/*
AddVariableOK describes a response with status code 200, with default header values.

Variable added successfully
*/
type AddVariableOK struct {
}

// IsSuccess returns true when this add variable o k response has a 2xx status code
func (o *AddVariableOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add variable o k response has a 3xx status code
func (o *AddVariableOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add variable o k response has a 4xx status code
func (o *AddVariableOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add variable o k response has a 5xx status code
func (o *AddVariableOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add variable o k response a status code equal to that given
func (o *AddVariableOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add variable o k response
func (o *AddVariableOK) Code() int {
	return 200
}

func (o *AddVariableOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/variables][%d] addVariableOK", 200)
}

func (o *AddVariableOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/variables][%d] addVariableOK", 200)
}

func (o *AddVariableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddVariableBadRequest creates a AddVariableBadRequest with default headers values
func NewAddVariableBadRequest() *AddVariableBadRequest {
	return &AddVariableBadRequest{}
}

/*
AddVariableBadRequest describes a response with status code 400, with default header values.

Invalid request or variable already exists
*/
type AddVariableBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add variable bad request response has a 2xx status code
func (o *AddVariableBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add variable bad request response has a 3xx status code
func (o *AddVariableBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add variable bad request response has a 4xx status code
func (o *AddVariableBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add variable bad request response has a 5xx status code
func (o *AddVariableBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add variable bad request response a status code equal to that given
func (o *AddVariableBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add variable bad request response
func (o *AddVariableBadRequest) Code() int {
	return 400
}

func (o *AddVariableBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/variables][%d] addVariableBadRequest %s", 400, payload)
}

func (o *AddVariableBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/variables][%d] addVariableBadRequest %s", 400, payload)
}

func (o *AddVariableBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddVariableBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddVariableForbidden creates a AddVariableForbidden with default headers values
func NewAddVariableForbidden() *AddVariableForbidden {
	return &AddVariableForbidden{}
}

/*
AddVariableForbidden describes a response with status code 403, with default header values.

Access denied
*/
type AddVariableForbidden struct {
	Payload string
}

// IsSuccess returns true when this add variable forbidden response has a 2xx status code
func (o *AddVariableForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add variable forbidden response has a 3xx status code
func (o *AddVariableForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add variable forbidden response has a 4xx status code
func (o *AddVariableForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add variable forbidden response has a 5xx status code
func (o *AddVariableForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add variable forbidden response a status code equal to that given
func (o *AddVariableForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add variable forbidden response
func (o *AddVariableForbidden) Code() int {
	return 403
}

func (o *AddVariableForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/variables][%d] addVariableForbidden %s", 403, payload)
}

func (o *AddVariableForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/variables][%d] addVariableForbidden %s", 403, payload)
}

func (o *AddVariableForbidden) GetPayload() string {
	return o.Payload
}

func (o *AddVariableForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddVariableNotFound creates a AddVariableNotFound with default headers values
func NewAddVariableNotFound() *AddVariableNotFound {
	return &AddVariableNotFound{}
}

/*
AddVariableNotFound describes a response with status code 404, with default header values.

Project not found
*/
type AddVariableNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add variable not found response has a 2xx status code
func (o *AddVariableNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add variable not found response has a 3xx status code
func (o *AddVariableNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add variable not found response has a 4xx status code
func (o *AddVariableNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add variable not found response has a 5xx status code
func (o *AddVariableNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add variable not found response a status code equal to that given
func (o *AddVariableNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add variable not found response
func (o *AddVariableNotFound) Code() int {
	return 404
}

func (o *AddVariableNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/variables][%d] addVariableNotFound %s", 404, payload)
}

func (o *AddVariableNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/variables][%d] addVariableNotFound %s", 404, payload)
}

func (o *AddVariableNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddVariableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddVariableMethodNotAllowed creates a AddVariableMethodNotAllowed with default headers values
func NewAddVariableMethodNotAllowed() *AddVariableMethodNotAllowed {
	return &AddVariableMethodNotAllowed{}
}

/*
AddVariableMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type AddVariableMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add variable method not allowed response has a 2xx status code
func (o *AddVariableMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add variable method not allowed response has a 3xx status code
func (o *AddVariableMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add variable method not allowed response has a 4xx status code
func (o *AddVariableMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this add variable method not allowed response has a 5xx status code
func (o *AddVariableMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this add variable method not allowed response a status code equal to that given
func (o *AddVariableMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the add variable method not allowed response
func (o *AddVariableMethodNotAllowed) Code() int {
	return 405
}

func (o *AddVariableMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/variables][%d] addVariableMethodNotAllowed %s", 405, payload)
}

func (o *AddVariableMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/variables][%d] addVariableMethodNotAllowed %s", 405, payload)
}

func (o *AddVariableMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddVariableMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddVariableInternalServerError creates a AddVariableInternalServerError with default headers values
func NewAddVariableInternalServerError() *AddVariableInternalServerError {
	return &AddVariableInternalServerError{}
}

/*
AddVariableInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AddVariableInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add variable internal server error response has a 2xx status code
func (o *AddVariableInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add variable internal server error response has a 3xx status code
func (o *AddVariableInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add variable internal server error response has a 4xx status code
func (o *AddVariableInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add variable internal server error response has a 5xx status code
func (o *AddVariableInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add variable internal server error response a status code equal to that given
func (o *AddVariableInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add variable internal server error response
func (o *AddVariableInternalServerError) Code() int {
	return 500
}

func (o *AddVariableInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/variables][%d] addVariableInternalServerError %s", 500, payload)
}

func (o *AddVariableInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/variables][%d] addVariableInternalServerError %s", 500, payload)
}

func (o *AddVariableInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddVariableInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
