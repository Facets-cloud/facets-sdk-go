// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// AddArtifactRoutingRuleReader is a Reader for the AddArtifactRoutingRule structure.
type AddArtifactRoutingRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddArtifactRoutingRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddArtifactRoutingRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddArtifactRoutingRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddArtifactRoutingRuleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddArtifactRoutingRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewAddArtifactRoutingRuleMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddArtifactRoutingRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/artifact-routing-rule] addArtifactRoutingRule", response, response.Code())
	}
}

// NewAddArtifactRoutingRuleOK creates a AddArtifactRoutingRuleOK with default headers values
func NewAddArtifactRoutingRuleOK() *AddArtifactRoutingRuleOK {
	return &AddArtifactRoutingRuleOK{}
}

/*
AddArtifactRoutingRuleOK describes a response with status code 200, with default header values.

OK
*/
type AddArtifactRoutingRuleOK struct {
	Payload *models.ArtifactRoutingRuleResponse
}

// IsSuccess returns true when this add artifact routing rule o k response has a 2xx status code
func (o *AddArtifactRoutingRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add artifact routing rule o k response has a 3xx status code
func (o *AddArtifactRoutingRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add artifact routing rule o k response has a 4xx status code
func (o *AddArtifactRoutingRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add artifact routing rule o k response has a 5xx status code
func (o *AddArtifactRoutingRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add artifact routing rule o k response a status code equal to that given
func (o *AddArtifactRoutingRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add artifact routing rule o k response
func (o *AddArtifactRoutingRuleOK) Code() int {
	return 200
}

func (o *AddArtifactRoutingRuleOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule][%d] addArtifactRoutingRuleOK %s", 200, payload)
}

func (o *AddArtifactRoutingRuleOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule][%d] addArtifactRoutingRuleOK %s", 200, payload)
}

func (o *AddArtifactRoutingRuleOK) GetPayload() *models.ArtifactRoutingRuleResponse {
	return o.Payload
}

func (o *AddArtifactRoutingRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ArtifactRoutingRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddArtifactRoutingRuleBadRequest creates a AddArtifactRoutingRuleBadRequest with default headers values
func NewAddArtifactRoutingRuleBadRequest() *AddArtifactRoutingRuleBadRequest {
	return &AddArtifactRoutingRuleBadRequest{}
}

/*
AddArtifactRoutingRuleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AddArtifactRoutingRuleBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add artifact routing rule bad request response has a 2xx status code
func (o *AddArtifactRoutingRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add artifact routing rule bad request response has a 3xx status code
func (o *AddArtifactRoutingRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add artifact routing rule bad request response has a 4xx status code
func (o *AddArtifactRoutingRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add artifact routing rule bad request response has a 5xx status code
func (o *AddArtifactRoutingRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add artifact routing rule bad request response a status code equal to that given
func (o *AddArtifactRoutingRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add artifact routing rule bad request response
func (o *AddArtifactRoutingRuleBadRequest) Code() int {
	return 400
}

func (o *AddArtifactRoutingRuleBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule][%d] addArtifactRoutingRuleBadRequest %s", 400, payload)
}

func (o *AddArtifactRoutingRuleBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule][%d] addArtifactRoutingRuleBadRequest %s", 400, payload)
}

func (o *AddArtifactRoutingRuleBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddArtifactRoutingRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddArtifactRoutingRuleForbidden creates a AddArtifactRoutingRuleForbidden with default headers values
func NewAddArtifactRoutingRuleForbidden() *AddArtifactRoutingRuleForbidden {
	return &AddArtifactRoutingRuleForbidden{}
}

/*
AddArtifactRoutingRuleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddArtifactRoutingRuleForbidden struct {
	Payload string
}

// IsSuccess returns true when this add artifact routing rule forbidden response has a 2xx status code
func (o *AddArtifactRoutingRuleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add artifact routing rule forbidden response has a 3xx status code
func (o *AddArtifactRoutingRuleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add artifact routing rule forbidden response has a 4xx status code
func (o *AddArtifactRoutingRuleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add artifact routing rule forbidden response has a 5xx status code
func (o *AddArtifactRoutingRuleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add artifact routing rule forbidden response a status code equal to that given
func (o *AddArtifactRoutingRuleForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add artifact routing rule forbidden response
func (o *AddArtifactRoutingRuleForbidden) Code() int {
	return 403
}

func (o *AddArtifactRoutingRuleForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule][%d] addArtifactRoutingRuleForbidden %s", 403, payload)
}

func (o *AddArtifactRoutingRuleForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule][%d] addArtifactRoutingRuleForbidden %s", 403, payload)
}

func (o *AddArtifactRoutingRuleForbidden) GetPayload() string {
	return o.Payload
}

func (o *AddArtifactRoutingRuleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddArtifactRoutingRuleNotFound creates a AddArtifactRoutingRuleNotFound with default headers values
func NewAddArtifactRoutingRuleNotFound() *AddArtifactRoutingRuleNotFound {
	return &AddArtifactRoutingRuleNotFound{}
}

/*
AddArtifactRoutingRuleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AddArtifactRoutingRuleNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add artifact routing rule not found response has a 2xx status code
func (o *AddArtifactRoutingRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add artifact routing rule not found response has a 3xx status code
func (o *AddArtifactRoutingRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add artifact routing rule not found response has a 4xx status code
func (o *AddArtifactRoutingRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add artifact routing rule not found response has a 5xx status code
func (o *AddArtifactRoutingRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add artifact routing rule not found response a status code equal to that given
func (o *AddArtifactRoutingRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add artifact routing rule not found response
func (o *AddArtifactRoutingRuleNotFound) Code() int {
	return 404
}

func (o *AddArtifactRoutingRuleNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule][%d] addArtifactRoutingRuleNotFound %s", 404, payload)
}

func (o *AddArtifactRoutingRuleNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule][%d] addArtifactRoutingRuleNotFound %s", 404, payload)
}

func (o *AddArtifactRoutingRuleNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddArtifactRoutingRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddArtifactRoutingRuleMethodNotAllowed creates a AddArtifactRoutingRuleMethodNotAllowed with default headers values
func NewAddArtifactRoutingRuleMethodNotAllowed() *AddArtifactRoutingRuleMethodNotAllowed {
	return &AddArtifactRoutingRuleMethodNotAllowed{}
}

/*
AddArtifactRoutingRuleMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type AddArtifactRoutingRuleMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add artifact routing rule method not allowed response has a 2xx status code
func (o *AddArtifactRoutingRuleMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add artifact routing rule method not allowed response has a 3xx status code
func (o *AddArtifactRoutingRuleMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add artifact routing rule method not allowed response has a 4xx status code
func (o *AddArtifactRoutingRuleMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this add artifact routing rule method not allowed response has a 5xx status code
func (o *AddArtifactRoutingRuleMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this add artifact routing rule method not allowed response a status code equal to that given
func (o *AddArtifactRoutingRuleMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the add artifact routing rule method not allowed response
func (o *AddArtifactRoutingRuleMethodNotAllowed) Code() int {
	return 405
}

func (o *AddArtifactRoutingRuleMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule][%d] addArtifactRoutingRuleMethodNotAllowed %s", 405, payload)
}

func (o *AddArtifactRoutingRuleMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule][%d] addArtifactRoutingRuleMethodNotAllowed %s", 405, payload)
}

func (o *AddArtifactRoutingRuleMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddArtifactRoutingRuleMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddArtifactRoutingRuleInternalServerError creates a AddArtifactRoutingRuleInternalServerError with default headers values
func NewAddArtifactRoutingRuleInternalServerError() *AddArtifactRoutingRuleInternalServerError {
	return &AddArtifactRoutingRuleInternalServerError{}
}

/*
AddArtifactRoutingRuleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AddArtifactRoutingRuleInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add artifact routing rule internal server error response has a 2xx status code
func (o *AddArtifactRoutingRuleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add artifact routing rule internal server error response has a 3xx status code
func (o *AddArtifactRoutingRuleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add artifact routing rule internal server error response has a 4xx status code
func (o *AddArtifactRoutingRuleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add artifact routing rule internal server error response has a 5xx status code
func (o *AddArtifactRoutingRuleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add artifact routing rule internal server error response a status code equal to that given
func (o *AddArtifactRoutingRuleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add artifact routing rule internal server error response
func (o *AddArtifactRoutingRuleInternalServerError) Code() int {
	return 500
}

func (o *AddArtifactRoutingRuleInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule][%d] addArtifactRoutingRuleInternalServerError %s", 500, payload)
}

func (o *AddArtifactRoutingRuleInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule][%d] addArtifactRoutingRuleInternalServerError %s", 500, payload)
}

func (o *AddArtifactRoutingRuleInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddArtifactRoutingRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
