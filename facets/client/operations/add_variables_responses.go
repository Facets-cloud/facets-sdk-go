// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// AddVariablesReader is a Reader for the AddVariables structure.
type AddVariablesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddVariablesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewAddVariablesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddVariablesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddVariablesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddVariablesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewAddVariablesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddVariablesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/designer/{stackName}/variables] addVariables", response, response.Code())
	}
}

// NewAddVariablesOK creates a AddVariablesOK with default headers values
func NewAddVariablesOK() *AddVariablesOK {
	return &AddVariablesOK{}
}

/*
AddVariablesOK describes a response with status code 200, with default header values.

OK
*/
type AddVariablesOK struct {
}

// IsSuccess returns true when this add variables o k response has a 2xx status code
func (o *AddVariablesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add variables o k response has a 3xx status code
func (o *AddVariablesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add variables o k response has a 4xx status code
func (o *AddVariablesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add variables o k response has a 5xx status code
func (o *AddVariablesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add variables o k response a status code equal to that given
func (o *AddVariablesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add variables o k response
func (o *AddVariablesOK) Code() int {
	return 200
}

func (o *AddVariablesOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/variables][%d] addVariablesOK", 200)
}

func (o *AddVariablesOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/variables][%d] addVariablesOK", 200)
}

func (o *AddVariablesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddVariablesBadRequest creates a AddVariablesBadRequest with default headers values
func NewAddVariablesBadRequest() *AddVariablesBadRequest {
	return &AddVariablesBadRequest{}
}

/*
AddVariablesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AddVariablesBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add variables bad request response has a 2xx status code
func (o *AddVariablesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add variables bad request response has a 3xx status code
func (o *AddVariablesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add variables bad request response has a 4xx status code
func (o *AddVariablesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add variables bad request response has a 5xx status code
func (o *AddVariablesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add variables bad request response a status code equal to that given
func (o *AddVariablesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add variables bad request response
func (o *AddVariablesBadRequest) Code() int {
	return 400
}

func (o *AddVariablesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/variables][%d] addVariablesBadRequest %s", 400, payload)
}

func (o *AddVariablesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/variables][%d] addVariablesBadRequest %s", 400, payload)
}

func (o *AddVariablesBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddVariablesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddVariablesForbidden creates a AddVariablesForbidden with default headers values
func NewAddVariablesForbidden() *AddVariablesForbidden {
	return &AddVariablesForbidden{}
}

/*
AddVariablesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddVariablesForbidden struct {
	Payload string
}

// IsSuccess returns true when this add variables forbidden response has a 2xx status code
func (o *AddVariablesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add variables forbidden response has a 3xx status code
func (o *AddVariablesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add variables forbidden response has a 4xx status code
func (o *AddVariablesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add variables forbidden response has a 5xx status code
func (o *AddVariablesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add variables forbidden response a status code equal to that given
func (o *AddVariablesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add variables forbidden response
func (o *AddVariablesForbidden) Code() int {
	return 403
}

func (o *AddVariablesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/variables][%d] addVariablesForbidden %s", 403, payload)
}

func (o *AddVariablesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/variables][%d] addVariablesForbidden %s", 403, payload)
}

func (o *AddVariablesForbidden) GetPayload() string {
	return o.Payload
}

func (o *AddVariablesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddVariablesNotFound creates a AddVariablesNotFound with default headers values
func NewAddVariablesNotFound() *AddVariablesNotFound {
	return &AddVariablesNotFound{}
}

/*
AddVariablesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AddVariablesNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add variables not found response has a 2xx status code
func (o *AddVariablesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add variables not found response has a 3xx status code
func (o *AddVariablesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add variables not found response has a 4xx status code
func (o *AddVariablesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add variables not found response has a 5xx status code
func (o *AddVariablesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add variables not found response a status code equal to that given
func (o *AddVariablesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add variables not found response
func (o *AddVariablesNotFound) Code() int {
	return 404
}

func (o *AddVariablesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/variables][%d] addVariablesNotFound %s", 404, payload)
}

func (o *AddVariablesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/variables][%d] addVariablesNotFound %s", 404, payload)
}

func (o *AddVariablesNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddVariablesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddVariablesMethodNotAllowed creates a AddVariablesMethodNotAllowed with default headers values
func NewAddVariablesMethodNotAllowed() *AddVariablesMethodNotAllowed {
	return &AddVariablesMethodNotAllowed{}
}

/*
AddVariablesMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type AddVariablesMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add variables method not allowed response has a 2xx status code
func (o *AddVariablesMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add variables method not allowed response has a 3xx status code
func (o *AddVariablesMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add variables method not allowed response has a 4xx status code
func (o *AddVariablesMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this add variables method not allowed response has a 5xx status code
func (o *AddVariablesMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this add variables method not allowed response a status code equal to that given
func (o *AddVariablesMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the add variables method not allowed response
func (o *AddVariablesMethodNotAllowed) Code() int {
	return 405
}

func (o *AddVariablesMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/variables][%d] addVariablesMethodNotAllowed %s", 405, payload)
}

func (o *AddVariablesMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/variables][%d] addVariablesMethodNotAllowed %s", 405, payload)
}

func (o *AddVariablesMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddVariablesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddVariablesInternalServerError creates a AddVariablesInternalServerError with default headers values
func NewAddVariablesInternalServerError() *AddVariablesInternalServerError {
	return &AddVariablesInternalServerError{}
}

/*
AddVariablesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AddVariablesInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add variables internal server error response has a 2xx status code
func (o *AddVariablesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add variables internal server error response has a 3xx status code
func (o *AddVariablesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add variables internal server error response has a 4xx status code
func (o *AddVariablesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add variables internal server error response has a 5xx status code
func (o *AddVariablesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add variables internal server error response a status code equal to that given
func (o *AddVariablesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add variables internal server error response
func (o *AddVariablesInternalServerError) Code() int {
	return 500
}

func (o *AddVariablesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/variables][%d] addVariablesInternalServerError %s", 500, payload)
}

func (o *AddVariablesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/variables][%d] addVariablesInternalServerError %s", 500, payload)
}

func (o *AddVariablesInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddVariablesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
