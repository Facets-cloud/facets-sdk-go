// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// AddReader is a Reader for the Add structure.
type AddReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewAddOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewAddMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/user-token] add", response, response.Code())
	}
}

// NewAddOK creates a AddOK with default headers values
func NewAddOK() *AddOK {
	return &AddOK{}
}

/*
AddOK describes a response with status code 200, with default header values.

OK
*/
type AddOK struct {
	Payload *models.UserVCSTokenResponse
}

// IsSuccess returns true when this add o k response has a 2xx status code
func (o *AddOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add o k response has a 3xx status code
func (o *AddOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add o k response has a 4xx status code
func (o *AddOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add o k response has a 5xx status code
func (o *AddOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add o k response a status code equal to that given
func (o *AddOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add o k response
func (o *AddOK) Code() int {
	return 200
}

func (o *AddOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/user-token][%d] addOK %s", 200, payload)
}

func (o *AddOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/user-token][%d] addOK %s", 200, payload)
}

func (o *AddOK) GetPayload() *models.UserVCSTokenResponse {
	return o.Payload
}

func (o *AddOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserVCSTokenResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddBadRequest creates a AddBadRequest with default headers values
func NewAddBadRequest() *AddBadRequest {
	return &AddBadRequest{}
}

/*
AddBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AddBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add bad request response has a 2xx status code
func (o *AddBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add bad request response has a 3xx status code
func (o *AddBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add bad request response has a 4xx status code
func (o *AddBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add bad request response has a 5xx status code
func (o *AddBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add bad request response a status code equal to that given
func (o *AddBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add bad request response
func (o *AddBadRequest) Code() int {
	return 400
}

func (o *AddBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/user-token][%d] addBadRequest %s", 400, payload)
}

func (o *AddBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/user-token][%d] addBadRequest %s", 400, payload)
}

func (o *AddBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddForbidden creates a AddForbidden with default headers values
func NewAddForbidden() *AddForbidden {
	return &AddForbidden{}
}

/*
AddForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddForbidden struct {
	Payload string
}

// IsSuccess returns true when this add forbidden response has a 2xx status code
func (o *AddForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add forbidden response has a 3xx status code
func (o *AddForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add forbidden response has a 4xx status code
func (o *AddForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add forbidden response has a 5xx status code
func (o *AddForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add forbidden response a status code equal to that given
func (o *AddForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add forbidden response
func (o *AddForbidden) Code() int {
	return 403
}

func (o *AddForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/user-token][%d] addForbidden %s", 403, payload)
}

func (o *AddForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/user-token][%d] addForbidden %s", 403, payload)
}

func (o *AddForbidden) GetPayload() string {
	return o.Payload
}

func (o *AddForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddNotFound creates a AddNotFound with default headers values
func NewAddNotFound() *AddNotFound {
	return &AddNotFound{}
}

/*
AddNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AddNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add not found response has a 2xx status code
func (o *AddNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add not found response has a 3xx status code
func (o *AddNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add not found response has a 4xx status code
func (o *AddNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add not found response has a 5xx status code
func (o *AddNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add not found response a status code equal to that given
func (o *AddNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add not found response
func (o *AddNotFound) Code() int {
	return 404
}

func (o *AddNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/user-token][%d] addNotFound %s", 404, payload)
}

func (o *AddNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/user-token][%d] addNotFound %s", 404, payload)
}

func (o *AddNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddMethodNotAllowed creates a AddMethodNotAllowed with default headers values
func NewAddMethodNotAllowed() *AddMethodNotAllowed {
	return &AddMethodNotAllowed{}
}

/*
AddMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type AddMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add method not allowed response has a 2xx status code
func (o *AddMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add method not allowed response has a 3xx status code
func (o *AddMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add method not allowed response has a 4xx status code
func (o *AddMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this add method not allowed response has a 5xx status code
func (o *AddMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this add method not allowed response a status code equal to that given
func (o *AddMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the add method not allowed response
func (o *AddMethodNotAllowed) Code() int {
	return 405
}

func (o *AddMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/user-token][%d] addMethodNotAllowed %s", 405, payload)
}

func (o *AddMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/user-token][%d] addMethodNotAllowed %s", 405, payload)
}

func (o *AddMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAddInternalServerError creates a AddInternalServerError with default headers values
func NewAddInternalServerError() *AddInternalServerError {
	return &AddInternalServerError{}
}

/*
AddInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AddInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add internal server error response has a 2xx status code
func (o *AddInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add internal server error response has a 3xx status code
func (o *AddInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add internal server error response has a 4xx status code
func (o *AddInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add internal server error response has a 5xx status code
func (o *AddInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add internal server error response a status code equal to that given
func (o *AddInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add internal server error response
func (o *AddInternalServerError) Code() int {
	return 500
}

func (o *AddInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/user-token][%d] addInternalServerError %s", 500, payload)
}

func (o *AddInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/user-token][%d] addInternalServerError %s", 500, payload)
}

func (o *AddInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AddInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
