// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// Add1Reader is a Reader for the Add1 structure.
type Add1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *Add1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdd1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdd1BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAdd1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAdd1NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewAdd1MethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAdd1InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/release-stream] add_1", response, response.Code())
	}
}

// NewAdd1OK creates a Add1OK with default headers values
func NewAdd1OK() *Add1OK {
	return &Add1OK{}
}

/*
Add1OK describes a response with status code 200, with default header values.

OK
*/
type Add1OK struct {
	Payload *models.ReleaseStream
}

// IsSuccess returns true when this add1 o k response has a 2xx status code
func (o *Add1OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add1 o k response has a 3xx status code
func (o *Add1OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add1 o k response has a 4xx status code
func (o *Add1OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add1 o k response has a 5xx status code
func (o *Add1OK) IsServerError() bool {
	return false
}

// IsCode returns true when this add1 o k response a status code equal to that given
func (o *Add1OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add1 o k response
func (o *Add1OK) Code() int {
	return 200
}

func (o *Add1OK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] add1OK %s", 200, payload)
}

func (o *Add1OK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] add1OK %s", 200, payload)
}

func (o *Add1OK) GetPayload() *models.ReleaseStream {
	return o.Payload
}

func (o *Add1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReleaseStream)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdd1BadRequest creates a Add1BadRequest with default headers values
func NewAdd1BadRequest() *Add1BadRequest {
	return &Add1BadRequest{}
}

/*
Add1BadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type Add1BadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add1 bad request response has a 2xx status code
func (o *Add1BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add1 bad request response has a 3xx status code
func (o *Add1BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add1 bad request response has a 4xx status code
func (o *Add1BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add1 bad request response has a 5xx status code
func (o *Add1BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add1 bad request response a status code equal to that given
func (o *Add1BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add1 bad request response
func (o *Add1BadRequest) Code() int {
	return 400
}

func (o *Add1BadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] add1BadRequest %s", 400, payload)
}

func (o *Add1BadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] add1BadRequest %s", 400, payload)
}

func (o *Add1BadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *Add1BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdd1Forbidden creates a Add1Forbidden with default headers values
func NewAdd1Forbidden() *Add1Forbidden {
	return &Add1Forbidden{}
}

/*
Add1Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type Add1Forbidden struct {
	Payload string
}

// IsSuccess returns true when this add1 forbidden response has a 2xx status code
func (o *Add1Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add1 forbidden response has a 3xx status code
func (o *Add1Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add1 forbidden response has a 4xx status code
func (o *Add1Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add1 forbidden response has a 5xx status code
func (o *Add1Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add1 forbidden response a status code equal to that given
func (o *Add1Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add1 forbidden response
func (o *Add1Forbidden) Code() int {
	return 403
}

func (o *Add1Forbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] add1Forbidden %s", 403, payload)
}

func (o *Add1Forbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] add1Forbidden %s", 403, payload)
}

func (o *Add1Forbidden) GetPayload() string {
	return o.Payload
}

func (o *Add1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdd1NotFound creates a Add1NotFound with default headers values
func NewAdd1NotFound() *Add1NotFound {
	return &Add1NotFound{}
}

/*
Add1NotFound describes a response with status code 404, with default header values.

Not Found
*/
type Add1NotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add1 not found response has a 2xx status code
func (o *Add1NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add1 not found response has a 3xx status code
func (o *Add1NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add1 not found response has a 4xx status code
func (o *Add1NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add1 not found response has a 5xx status code
func (o *Add1NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add1 not found response a status code equal to that given
func (o *Add1NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add1 not found response
func (o *Add1NotFound) Code() int {
	return 404
}

func (o *Add1NotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] add1NotFound %s", 404, payload)
}

func (o *Add1NotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] add1NotFound %s", 404, payload)
}

func (o *Add1NotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *Add1NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdd1MethodNotAllowed creates a Add1MethodNotAllowed with default headers values
func NewAdd1MethodNotAllowed() *Add1MethodNotAllowed {
	return &Add1MethodNotAllowed{}
}

/*
Add1MethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type Add1MethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add1 method not allowed response has a 2xx status code
func (o *Add1MethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add1 method not allowed response has a 3xx status code
func (o *Add1MethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add1 method not allowed response has a 4xx status code
func (o *Add1MethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this add1 method not allowed response has a 5xx status code
func (o *Add1MethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this add1 method not allowed response a status code equal to that given
func (o *Add1MethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the add1 method not allowed response
func (o *Add1MethodNotAllowed) Code() int {
	return 405
}

func (o *Add1MethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] add1MethodNotAllowed %s", 405, payload)
}

func (o *Add1MethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] add1MethodNotAllowed %s", 405, payload)
}

func (o *Add1MethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *Add1MethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdd1InternalServerError creates a Add1InternalServerError with default headers values
func NewAdd1InternalServerError() *Add1InternalServerError {
	return &Add1InternalServerError{}
}

/*
Add1InternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type Add1InternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this add1 internal server error response has a 2xx status code
func (o *Add1InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add1 internal server error response has a 3xx status code
func (o *Add1InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add1 internal server error response has a 4xx status code
func (o *Add1InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add1 internal server error response has a 5xx status code
func (o *Add1InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add1 internal server error response a status code equal to that given
func (o *Add1InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add1 internal server error response
func (o *Add1InternalServerError) Code() int {
	return 500
}

func (o *Add1InternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] add1InternalServerError %s", 500, payload)
}

func (o *Add1InternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] add1InternalServerError %s", 500, payload)
}

func (o *Add1InternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *Add1InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
