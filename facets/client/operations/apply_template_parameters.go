// Code generated by go-swagger; DO NOT EDIT.





package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  "context"
  "fmt"
  "net/http"
  "time"

  "github.com/go-openapi/errors"
  "github.com/go-openapi/runtime"
  cr "github.com/go-openapi/runtime/client"
  "github.com/go-openapi/strfmt"
  "github.com/go-openapi/swag"
  "github.com/go-openapi/validate"

  	"github.com/Facets-cloud/facets-sdk-go/facets/models"
  
)

// NewApplyTemplateParams creates a new ApplyTemplateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewApplyTemplateParams() *ApplyTemplateParams {
  return &ApplyTemplateParams{
    timeout: cr.DefaultTimeout,
  }
}

// NewApplyTemplateParamsWithTimeout creates a new ApplyTemplateParams object
// with the ability to set a timeout on a request.
func NewApplyTemplateParamsWithTimeout(timeout time.Duration) *ApplyTemplateParams {
  return &ApplyTemplateParams{
    timeout: timeout,
  }
}

// NewApplyTemplateParamsWithContext creates a new ApplyTemplateParams object
// with the ability to set a context for a request.
func NewApplyTemplateParamsWithContext(ctx context.Context) *ApplyTemplateParams {
  return &ApplyTemplateParams{
    Context: ctx,
  }
}

// NewApplyTemplateParamsWithHTTPClient creates a new ApplyTemplateParams object
// with the ability to set a custom HTTPClient for a request.
func NewApplyTemplateParamsWithHTTPClient(client *http.Client) *ApplyTemplateParams {
  return &ApplyTemplateParams{
    HTTPClient: client,
  }
}

/* ApplyTemplateParams contains all the parameters to send to the API endpoint
   for the apply template operation.

   Typically these are written to a http.Request.
*/
type ApplyTemplateParams struct {

  // Prefix.
    Prefix *

  // StackName.
    StackName 

  // Suffix.
    Suffix *

  // TemplateName.
    TemplateName 

  timeout time.Duration
  Context context.Context
  HTTPClient *http.Client
}

// WithDefaults hydrates default values in the apply template params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApplyTemplateParams) WithDefaults() *ApplyTemplateParams {
    o.SetDefaults()
    return o
}

// SetDefaults hydrates default values in the apply template params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApplyTemplateParams) SetDefaults() {
  // no default values defined for this parameter
}

// WithTimeout adds the timeout to the apply template params
func (o *ApplyTemplateParams) WithTimeout(timeout time.Duration) *ApplyTemplateParams {
  o.SetTimeout(timeout)
  return o
}

// SetTimeout adds the timeout to the apply template params
func (o *ApplyTemplateParams) SetTimeout(timeout time.Duration) {
  o.timeout = timeout
}

// WithContext adds the context to the apply template params
func (o *ApplyTemplateParams) WithContext(ctx context.Context) *ApplyTemplateParams {
  o.SetContext(ctx)
  return o
}

// SetContext adds the context to the apply template params
func (o *ApplyTemplateParams) SetContext(ctx context.Context) {
  o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the apply template params
func (o *ApplyTemplateParams) WithHTTPClient(client *http.Client) *ApplyTemplateParams {
  o.SetHTTPClient(client)
  return o
}

// SetHTTPClient adds the HTTPClient to the apply template params
func (o *ApplyTemplateParams) SetHTTPClient(client *http.Client) {
  o.HTTPClient = client
}

// WithPrefix adds the prefix to the apply template params
func (o *ApplyTemplateParams) WithPrefix(prefix *) *ApplyTemplateParams {
  o.SetPrefix(prefix)
  return o
}

// SetPrefix adds the prefix to the apply template params
func (o *ApplyTemplateParams) SetPrefix(prefix *) {
  o.Prefix = prefix
}

// WithStackName adds the stackName to the apply template params
func (o *ApplyTemplateParams) WithStackName(stackName ) *ApplyTemplateParams {
  o.SetStackName(stackName)
  return o
}

// SetStackName adds the stackName to the apply template params
func (o *ApplyTemplateParams) SetStackName(stackName ) {
  o.StackName = stackName
}

// WithSuffix adds the suffix to the apply template params
func (o *ApplyTemplateParams) WithSuffix(suffix *) *ApplyTemplateParams {
  o.SetSuffix(suffix)
  return o
}

// SetSuffix adds the suffix to the apply template params
func (o *ApplyTemplateParams) SetSuffix(suffix *) {
  o.Suffix = suffix
}

// WithTemplateName adds the templateName to the apply template params
func (o *ApplyTemplateParams) WithTemplateName(templateName ) *ApplyTemplateParams {
  o.SetTemplateName(templateName)
  return o
}

// SetTemplateName adds the templateName to the apply template params
func (o *ApplyTemplateParams) SetTemplateName(templateName ) {
  o.TemplateName = templateName
}

// WriteToRequest writes these params to a swagger request
func (o *ApplyTemplateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

  if err := r.SetTimeout(o.timeout); err != nil {
    return err
  }
  var res []error

  if o.Prefix != nil {

  // query param prefix
  var qrPrefix 

  if o.Prefix != nil {
    qrPrefix = *o.Prefix
  }
  qPrefix := qrPrefix
  if qPrefix != "" {

  if err := r.SetQueryParam("prefix", qPrefix); err != nil {
    return err
  }
  }
  }

  // path param stackName
  if err := r.SetPathParam("stackName", o.StackName); err != nil {
    return err
  }

  if o.Suffix != nil {

  // query param suffix
  var qrSuffix 

  if o.Suffix != nil {
    qrSuffix = *o.Suffix
  }
  qSuffix := qrSuffix
  if qSuffix != "" {

  if err := r.SetQueryParam("suffix", qSuffix); err != nil {
    return err
  }
  }
  }

  // path param templateName
  if err := r.SetPathParam("templateName", o.TemplateName); err != nil {
    return err
  }

  if len(res) > 0 {
    return errors.CompositeValidationError(res...)
  }
  return nil
}
