// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// AbortReleaseReader is a Reader for the AbortRelease structure.
type AbortReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AbortReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewAbortReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAbortReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAbortReleaseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAbortReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewAbortReleaseMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAbortReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/abort] abortRelease", response, response.Code())
	}
}

// NewAbortReleaseOK creates a AbortReleaseOK with default headers values
func NewAbortReleaseOK() *AbortReleaseOK {
	return &AbortReleaseOK{}
}

/*
AbortReleaseOK describes a response with status code 200, with default header values.

OK
*/
type AbortReleaseOK struct {
}

// IsSuccess returns true when this abort release o k response has a 2xx status code
func (o *AbortReleaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this abort release o k response has a 3xx status code
func (o *AbortReleaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this abort release o k response has a 4xx status code
func (o *AbortReleaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this abort release o k response has a 5xx status code
func (o *AbortReleaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this abort release o k response a status code equal to that given
func (o *AbortReleaseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the abort release o k response
func (o *AbortReleaseOK) Code() int {
	return 200
}

func (o *AbortReleaseOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/abort][%d] abortReleaseOK", 200)
}

func (o *AbortReleaseOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/abort][%d] abortReleaseOK", 200)
}

func (o *AbortReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAbortReleaseBadRequest creates a AbortReleaseBadRequest with default headers values
func NewAbortReleaseBadRequest() *AbortReleaseBadRequest {
	return &AbortReleaseBadRequest{}
}

/*
AbortReleaseBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AbortReleaseBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this abort release bad request response has a 2xx status code
func (o *AbortReleaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this abort release bad request response has a 3xx status code
func (o *AbortReleaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this abort release bad request response has a 4xx status code
func (o *AbortReleaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this abort release bad request response has a 5xx status code
func (o *AbortReleaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this abort release bad request response a status code equal to that given
func (o *AbortReleaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the abort release bad request response
func (o *AbortReleaseBadRequest) Code() int {
	return 400
}

func (o *AbortReleaseBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/abort][%d] abortReleaseBadRequest %s", 400, payload)
}

func (o *AbortReleaseBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/abort][%d] abortReleaseBadRequest %s", 400, payload)
}

func (o *AbortReleaseBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AbortReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAbortReleaseForbidden creates a AbortReleaseForbidden with default headers values
func NewAbortReleaseForbidden() *AbortReleaseForbidden {
	return &AbortReleaseForbidden{}
}

/*
AbortReleaseForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AbortReleaseForbidden struct {
	Payload string
}

// IsSuccess returns true when this abort release forbidden response has a 2xx status code
func (o *AbortReleaseForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this abort release forbidden response has a 3xx status code
func (o *AbortReleaseForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this abort release forbidden response has a 4xx status code
func (o *AbortReleaseForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this abort release forbidden response has a 5xx status code
func (o *AbortReleaseForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this abort release forbidden response a status code equal to that given
func (o *AbortReleaseForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the abort release forbidden response
func (o *AbortReleaseForbidden) Code() int {
	return 403
}

func (o *AbortReleaseForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/abort][%d] abortReleaseForbidden %s", 403, payload)
}

func (o *AbortReleaseForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/abort][%d] abortReleaseForbidden %s", 403, payload)
}

func (o *AbortReleaseForbidden) GetPayload() string {
	return o.Payload
}

func (o *AbortReleaseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAbortReleaseNotFound creates a AbortReleaseNotFound with default headers values
func NewAbortReleaseNotFound() *AbortReleaseNotFound {
	return &AbortReleaseNotFound{}
}

/*
AbortReleaseNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AbortReleaseNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this abort release not found response has a 2xx status code
func (o *AbortReleaseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this abort release not found response has a 3xx status code
func (o *AbortReleaseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this abort release not found response has a 4xx status code
func (o *AbortReleaseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this abort release not found response has a 5xx status code
func (o *AbortReleaseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this abort release not found response a status code equal to that given
func (o *AbortReleaseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the abort release not found response
func (o *AbortReleaseNotFound) Code() int {
	return 404
}

func (o *AbortReleaseNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/abort][%d] abortReleaseNotFound %s", 404, payload)
}

func (o *AbortReleaseNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/abort][%d] abortReleaseNotFound %s", 404, payload)
}

func (o *AbortReleaseNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AbortReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAbortReleaseMethodNotAllowed creates a AbortReleaseMethodNotAllowed with default headers values
func NewAbortReleaseMethodNotAllowed() *AbortReleaseMethodNotAllowed {
	return &AbortReleaseMethodNotAllowed{}
}

/*
AbortReleaseMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type AbortReleaseMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this abort release method not allowed response has a 2xx status code
func (o *AbortReleaseMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this abort release method not allowed response has a 3xx status code
func (o *AbortReleaseMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this abort release method not allowed response has a 4xx status code
func (o *AbortReleaseMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this abort release method not allowed response has a 5xx status code
func (o *AbortReleaseMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this abort release method not allowed response a status code equal to that given
func (o *AbortReleaseMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the abort release method not allowed response
func (o *AbortReleaseMethodNotAllowed) Code() int {
	return 405
}

func (o *AbortReleaseMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/abort][%d] abortReleaseMethodNotAllowed %s", 405, payload)
}

func (o *AbortReleaseMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/abort][%d] abortReleaseMethodNotAllowed %s", 405, payload)
}

func (o *AbortReleaseMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AbortReleaseMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAbortReleaseInternalServerError creates a AbortReleaseInternalServerError with default headers values
func NewAbortReleaseInternalServerError() *AbortReleaseInternalServerError {
	return &AbortReleaseInternalServerError{}
}

/*
AbortReleaseInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AbortReleaseInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this abort release internal server error response has a 2xx status code
func (o *AbortReleaseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this abort release internal server error response has a 3xx status code
func (o *AbortReleaseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this abort release internal server error response has a 4xx status code
func (o *AbortReleaseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this abort release internal server error response has a 5xx status code
func (o *AbortReleaseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this abort release internal server error response a status code equal to that given
func (o *AbortReleaseInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the abort release internal server error response
func (o *AbortReleaseInternalServerError) Code() int {
	return 500
}

func (o *AbortReleaseInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/abort][%d] abortReleaseInternalServerError %s", 500, payload)
}

func (o *AbortReleaseInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/abort][%d] abortReleaseInternalServerError %s", 500, payload)
}

func (o *AbortReleaseInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AbortReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
