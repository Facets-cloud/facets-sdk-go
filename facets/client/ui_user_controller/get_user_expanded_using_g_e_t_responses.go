// Code generated by go-swagger; DO NOT EDIT.

package ui_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetUserExpandedUsingGETReader is a Reader for the GetUserExpandedUsingGET structure.
type GetUserExpandedUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserExpandedUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserExpandedUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetUserExpandedUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserExpandedUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserExpandedUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/users/{userId}/user-expanded] getUserExpandedUsingGET", response, response.Code())
	}
}

// NewGetUserExpandedUsingGETOK creates a GetUserExpandedUsingGETOK with default headers values
func NewGetUserExpandedUsingGETOK() *GetUserExpandedUsingGETOK {
	return &GetUserExpandedUsingGETOK{}
}

/*
GetUserExpandedUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetUserExpandedUsingGETOK struct {
	Payload *models.ExpandedUser
}

// IsSuccess returns true when this get user expanded using g e t o k response has a 2xx status code
func (o *GetUserExpandedUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get user expanded using g e t o k response has a 3xx status code
func (o *GetUserExpandedUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user expanded using g e t o k response has a 4xx status code
func (o *GetUserExpandedUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user expanded using g e t o k response has a 5xx status code
func (o *GetUserExpandedUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get user expanded using g e t o k response a status code equal to that given
func (o *GetUserExpandedUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get user expanded using g e t o k response
func (o *GetUserExpandedUsingGETOK) Code() int {
	return 200
}

func (o *GetUserExpandedUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/{userId}/user-expanded][%d] getUserExpandedUsingGETOK %s", 200, payload)
}

func (o *GetUserExpandedUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/{userId}/user-expanded][%d] getUserExpandedUsingGETOK %s", 200, payload)
}

func (o *GetUserExpandedUsingGETOK) GetPayload() *models.ExpandedUser {
	return o.Payload
}

func (o *GetUserExpandedUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExpandedUser)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserExpandedUsingGETUnauthorized creates a GetUserExpandedUsingGETUnauthorized with default headers values
func NewGetUserExpandedUsingGETUnauthorized() *GetUserExpandedUsingGETUnauthorized {
	return &GetUserExpandedUsingGETUnauthorized{}
}

/*
GetUserExpandedUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetUserExpandedUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get user expanded using g e t unauthorized response has a 2xx status code
func (o *GetUserExpandedUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user expanded using g e t unauthorized response has a 3xx status code
func (o *GetUserExpandedUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user expanded using g e t unauthorized response has a 4xx status code
func (o *GetUserExpandedUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user expanded using g e t unauthorized response has a 5xx status code
func (o *GetUserExpandedUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get user expanded using g e t unauthorized response a status code equal to that given
func (o *GetUserExpandedUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get user expanded using g e t unauthorized response
func (o *GetUserExpandedUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetUserExpandedUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/{userId}/user-expanded][%d] getUserExpandedUsingGETUnauthorized", 401)
}

func (o *GetUserExpandedUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/{userId}/user-expanded][%d] getUserExpandedUsingGETUnauthorized", 401)
}

func (o *GetUserExpandedUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserExpandedUsingGETForbidden creates a GetUserExpandedUsingGETForbidden with default headers values
func NewGetUserExpandedUsingGETForbidden() *GetUserExpandedUsingGETForbidden {
	return &GetUserExpandedUsingGETForbidden{}
}

/*
GetUserExpandedUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetUserExpandedUsingGETForbidden struct {
}

// IsSuccess returns true when this get user expanded using g e t forbidden response has a 2xx status code
func (o *GetUserExpandedUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user expanded using g e t forbidden response has a 3xx status code
func (o *GetUserExpandedUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user expanded using g e t forbidden response has a 4xx status code
func (o *GetUserExpandedUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user expanded using g e t forbidden response has a 5xx status code
func (o *GetUserExpandedUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get user expanded using g e t forbidden response a status code equal to that given
func (o *GetUserExpandedUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get user expanded using g e t forbidden response
func (o *GetUserExpandedUsingGETForbidden) Code() int {
	return 403
}

func (o *GetUserExpandedUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/{userId}/user-expanded][%d] getUserExpandedUsingGETForbidden", 403)
}

func (o *GetUserExpandedUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/{userId}/user-expanded][%d] getUserExpandedUsingGETForbidden", 403)
}

func (o *GetUserExpandedUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserExpandedUsingGETNotFound creates a GetUserExpandedUsingGETNotFound with default headers values
func NewGetUserExpandedUsingGETNotFound() *GetUserExpandedUsingGETNotFound {
	return &GetUserExpandedUsingGETNotFound{}
}

/*
GetUserExpandedUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetUserExpandedUsingGETNotFound struct {
}

// IsSuccess returns true when this get user expanded using g e t not found response has a 2xx status code
func (o *GetUserExpandedUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user expanded using g e t not found response has a 3xx status code
func (o *GetUserExpandedUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user expanded using g e t not found response has a 4xx status code
func (o *GetUserExpandedUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user expanded using g e t not found response has a 5xx status code
func (o *GetUserExpandedUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get user expanded using g e t not found response a status code equal to that given
func (o *GetUserExpandedUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get user expanded using g e t not found response
func (o *GetUserExpandedUsingGETNotFound) Code() int {
	return 404
}

func (o *GetUserExpandedUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/{userId}/user-expanded][%d] getUserExpandedUsingGETNotFound", 404)
}

func (o *GetUserExpandedUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/{userId}/user-expanded][%d] getUserExpandedUsingGETNotFound", 404)
}

func (o *GetUserExpandedUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
