// Code generated by go-swagger; DO NOT EDIT.

package ui_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui user controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui user controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui user controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui user controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AnalyzeAccessUsingGET(params *AnalyzeAccessUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AnalyzeAccessUsingGETOK, error)

	CreateTokenUsingPOST(params *CreateTokenUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTokenUsingPOSTOK, *CreateTokenUsingPOSTCreated, error)

	DeleteALlLoggedInUsersUsingDELETE(params *DeleteALlLoggedInUsersUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteALlLoggedInUsersUsingDELETEOK, *DeleteALlLoggedInUsersUsingDELETENoContent, error)

	DeleteTokenUsingDELETE(params *DeleteTokenUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTokenUsingDELETEOK, *DeleteTokenUsingDELETENoContent, error)

	DeleteUserUsingDELETE(params *DeleteUserUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserUsingDELETEOK, *DeleteUserUsingDELETENoContent, error)

	GetALlLoggedInUsersUsingGET(params *GetALlLoggedInUsersUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetALlLoggedInUsersUsingGETOK, error)

	GetAllSystemRolesUsingGET(params *GetAllSystemRolesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSystemRolesUsingGETOK, error)

	GetAllUsersExpandedUsingGET(params *GetAllUsersExpandedUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUsersExpandedUsingGETOK, error)

	GetAllUsersUsingGET(params *GetAllUsersUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUsersUsingGETOK, error)

	GetCurrentUserUsingGET(params *GetCurrentUserUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentUserUsingGETOK, error)

	GetTokenUsingGET(params *GetTokenUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTokenUsingGETOK, error)

	GetUserExpandedUsingGET(params *GetUserExpandedUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserExpandedUsingGETOK, error)

	GetUserUsingGET(params *GetUserUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserUsingGETOK, error)

	InviteUsersUsingPOST(params *InviteUsersUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InviteUsersUsingPOSTOK, *InviteUsersUsingPOSTCreated, error)

	UpdatePasswordUsingPOST(params *UpdatePasswordUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePasswordUsingPOSTOK, *UpdatePasswordUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AnalyzeAccessUsingGET analyzes access
*/
func (a *Client) AnalyzeAccessUsingGET(params *AnalyzeAccessUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AnalyzeAccessUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnalyzeAccessUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "analyzeAccessUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/users/analyze-access",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AnalyzeAccessUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AnalyzeAccessUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for analyzeAccessUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTokenUsingPOST creates token
*/
func (a *Client) CreateTokenUsingPOST(params *CreateTokenUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTokenUsingPOSTOK, *CreateTokenUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTokenUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTokenUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/users/createAccessToken",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTokenUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateTokenUsingPOSTOK:
		return value, nil, nil
	case *CreateTokenUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_user_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteALlLoggedInUsersUsingDELETE deletes a ll logged in users
*/
func (a *Client) DeleteALlLoggedInUsersUsingDELETE(params *DeleteALlLoggedInUsersUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteALlLoggedInUsersUsingDELETEOK, *DeleteALlLoggedInUsersUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteALlLoggedInUsersUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteALlLoggedInUsersUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/users/loggedIn/session",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteALlLoggedInUsersUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteALlLoggedInUsersUsingDELETEOK:
		return value, nil, nil
	case *DeleteALlLoggedInUsersUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_user_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTokenUsingDELETE deletes token
*/
func (a *Client) DeleteTokenUsingDELETE(params *DeleteTokenUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTokenUsingDELETEOK, *DeleteTokenUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTokenUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTokenUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/users/tokens/{tokenId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTokenUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteTokenUsingDELETEOK:
		return value, nil, nil
	case *DeleteTokenUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_user_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUserUsingDELETE deletes user
*/
func (a *Client) DeleteUserUsingDELETE(params *DeleteUserUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserUsingDELETEOK, *DeleteUserUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/users/{userId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteUserUsingDELETEOK:
		return value, nil, nil
	case *DeleteUserUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_user_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetALlLoggedInUsersUsingGET gets a ll logged in users
*/
func (a *Client) GetALlLoggedInUsersUsingGET(params *GetALlLoggedInUsersUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetALlLoggedInUsersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetALlLoggedInUsersUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getALlLoggedInUsersUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/users/loggedIn",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetALlLoggedInUsersUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetALlLoggedInUsersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getALlLoggedInUsersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSystemRolesUsingGET gets all system roles
*/
func (a *Client) GetAllSystemRolesUsingGET(params *GetAllSystemRolesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSystemRolesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSystemRolesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSystemRolesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/users/roles",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllSystemRolesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSystemRolesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSystemRolesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllUsersExpandedUsingGET gets all users expanded
*/
func (a *Client) GetAllUsersExpandedUsingGET(params *GetAllUsersExpandedUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUsersExpandedUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsersExpandedUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUsersExpandedUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/users/list/users-expanded",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllUsersExpandedUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsersExpandedUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsersExpandedUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllUsersUsingGET gets all users
*/
func (a *Client) GetAllUsersUsingGET(params *GetAllUsersUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUsersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsersUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUsersUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/users/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllUsersUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCurrentUserUsingGET gets current user
*/
func (a *Client) GetCurrentUserUsingGET(params *GetCurrentUserUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentUserUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentUserUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCurrentUserUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/users/current-user",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentUserUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentUserUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCurrentUserUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTokenUsingGET gets token
*/
func (a *Client) GetTokenUsingGET(params *GetTokenUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTokenUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTokenUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTokenUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/users/tokens",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTokenUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTokenUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTokenUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserExpandedUsingGET gets user expanded
*/
func (a *Client) GetUserExpandedUsingGET(params *GetUserExpandedUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserExpandedUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserExpandedUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserExpandedUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/users/{userId}/user-expanded",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserExpandedUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserExpandedUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserExpandedUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserUsingGET gets user
*/
func (a *Client) GetUserUsingGET(params *GetUserUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/users/{userId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InviteUsersUsingPOST invites users
*/
func (a *Client) InviteUsersUsingPOST(params *InviteUsersUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InviteUsersUsingPOSTOK, *InviteUsersUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInviteUsersUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "inviteUsersUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/users/invite-users",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InviteUsersUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InviteUsersUsingPOSTOK:
		return value, nil, nil
	case *InviteUsersUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_user_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePasswordUsingPOST updates password
*/
func (a *Client) UpdatePasswordUsingPOST(params *UpdatePasswordUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePasswordUsingPOSTOK, *UpdatePasswordUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePasswordUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePasswordUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/users/updatePassword",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePasswordUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePasswordUsingPOSTOK:
		return value, nil, nil
	case *UpdatePasswordUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_user_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
