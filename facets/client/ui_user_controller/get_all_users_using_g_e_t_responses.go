// Code generated by go-swagger; DO NOT EDIT.

package ui_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllUsersUsingGETReader is a Reader for the GetAllUsersUsingGET structure.
type GetAllUsersUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllUsersUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllUsersUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllUsersUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllUsersUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllUsersUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/users/] getAllUsersUsingGET", response, response.Code())
	}
}

// NewGetAllUsersUsingGETOK creates a GetAllUsersUsingGETOK with default headers values
func NewGetAllUsersUsingGETOK() *GetAllUsersUsingGETOK {
	return &GetAllUsersUsingGETOK{}
}

/*
GetAllUsersUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllUsersUsingGETOK struct {
	Payload []*models.User
}

// IsSuccess returns true when this get all users using g e t o k response has a 2xx status code
func (o *GetAllUsersUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all users using g e t o k response has a 3xx status code
func (o *GetAllUsersUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all users using g e t o k response has a 4xx status code
func (o *GetAllUsersUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all users using g e t o k response has a 5xx status code
func (o *GetAllUsersUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all users using g e t o k response a status code equal to that given
func (o *GetAllUsersUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all users using g e t o k response
func (o *GetAllUsersUsingGETOK) Code() int {
	return 200
}

func (o *GetAllUsersUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersUsingGETOK %s", 200, payload)
}

func (o *GetAllUsersUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersUsingGETOK %s", 200, payload)
}

func (o *GetAllUsersUsingGETOK) GetPayload() []*models.User {
	return o.Payload
}

func (o *GetAllUsersUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllUsersUsingGETUnauthorized creates a GetAllUsersUsingGETUnauthorized with default headers values
func NewGetAllUsersUsingGETUnauthorized() *GetAllUsersUsingGETUnauthorized {
	return &GetAllUsersUsingGETUnauthorized{}
}

/*
GetAllUsersUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllUsersUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all users using g e t unauthorized response has a 2xx status code
func (o *GetAllUsersUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all users using g e t unauthorized response has a 3xx status code
func (o *GetAllUsersUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all users using g e t unauthorized response has a 4xx status code
func (o *GetAllUsersUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all users using g e t unauthorized response has a 5xx status code
func (o *GetAllUsersUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all users using g e t unauthorized response a status code equal to that given
func (o *GetAllUsersUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all users using g e t unauthorized response
func (o *GetAllUsersUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllUsersUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersUsingGETUnauthorized", 401)
}

func (o *GetAllUsersUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersUsingGETUnauthorized", 401)
}

func (o *GetAllUsersUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllUsersUsingGETForbidden creates a GetAllUsersUsingGETForbidden with default headers values
func NewGetAllUsersUsingGETForbidden() *GetAllUsersUsingGETForbidden {
	return &GetAllUsersUsingGETForbidden{}
}

/*
GetAllUsersUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllUsersUsingGETForbidden struct {
}

// IsSuccess returns true when this get all users using g e t forbidden response has a 2xx status code
func (o *GetAllUsersUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all users using g e t forbidden response has a 3xx status code
func (o *GetAllUsersUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all users using g e t forbidden response has a 4xx status code
func (o *GetAllUsersUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all users using g e t forbidden response has a 5xx status code
func (o *GetAllUsersUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all users using g e t forbidden response a status code equal to that given
func (o *GetAllUsersUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all users using g e t forbidden response
func (o *GetAllUsersUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllUsersUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersUsingGETForbidden", 403)
}

func (o *GetAllUsersUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersUsingGETForbidden", 403)
}

func (o *GetAllUsersUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllUsersUsingGETNotFound creates a GetAllUsersUsingGETNotFound with default headers values
func NewGetAllUsersUsingGETNotFound() *GetAllUsersUsingGETNotFound {
	return &GetAllUsersUsingGETNotFound{}
}

/*
GetAllUsersUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllUsersUsingGETNotFound struct {
}

// IsSuccess returns true when this get all users using g e t not found response has a 2xx status code
func (o *GetAllUsersUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all users using g e t not found response has a 3xx status code
func (o *GetAllUsersUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all users using g e t not found response has a 4xx status code
func (o *GetAllUsersUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all users using g e t not found response has a 5xx status code
func (o *GetAllUsersUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all users using g e t not found response a status code equal to that given
func (o *GetAllUsersUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all users using g e t not found response
func (o *GetAllUsersUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllUsersUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersUsingGETNotFound", 404)
}

func (o *GetAllUsersUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersUsingGETNotFound", 404)
}

func (o *GetAllUsersUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
