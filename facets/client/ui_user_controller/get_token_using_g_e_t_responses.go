// Code generated by go-swagger; DO NOT EDIT.

package ui_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetTokenUsingGETReader is a Reader for the GetTokenUsingGET structure.
type GetTokenUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTokenUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTokenUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetTokenUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTokenUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTokenUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/users/tokens] getTokenUsingGET", response, response.Code())
	}
}

// NewGetTokenUsingGETOK creates a GetTokenUsingGETOK with default headers values
func NewGetTokenUsingGETOK() *GetTokenUsingGETOK {
	return &GetTokenUsingGETOK{}
}

/*
GetTokenUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetTokenUsingGETOK struct {
	Payload []*models.UserAccessToken
}

// IsSuccess returns true when this get token using g e t o k response has a 2xx status code
func (o *GetTokenUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get token using g e t o k response has a 3xx status code
func (o *GetTokenUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get token using g e t o k response has a 4xx status code
func (o *GetTokenUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get token using g e t o k response has a 5xx status code
func (o *GetTokenUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get token using g e t o k response a status code equal to that given
func (o *GetTokenUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get token using g e t o k response
func (o *GetTokenUsingGETOK) Code() int {
	return 200
}

func (o *GetTokenUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/tokens][%d] getTokenUsingGETOK %s", 200, payload)
}

func (o *GetTokenUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/tokens][%d] getTokenUsingGETOK %s", 200, payload)
}

func (o *GetTokenUsingGETOK) GetPayload() []*models.UserAccessToken {
	return o.Payload
}

func (o *GetTokenUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTokenUsingGETUnauthorized creates a GetTokenUsingGETUnauthorized with default headers values
func NewGetTokenUsingGETUnauthorized() *GetTokenUsingGETUnauthorized {
	return &GetTokenUsingGETUnauthorized{}
}

/*
GetTokenUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetTokenUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get token using g e t unauthorized response has a 2xx status code
func (o *GetTokenUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get token using g e t unauthorized response has a 3xx status code
func (o *GetTokenUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get token using g e t unauthorized response has a 4xx status code
func (o *GetTokenUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get token using g e t unauthorized response has a 5xx status code
func (o *GetTokenUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get token using g e t unauthorized response a status code equal to that given
func (o *GetTokenUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get token using g e t unauthorized response
func (o *GetTokenUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetTokenUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/tokens][%d] getTokenUsingGETUnauthorized", 401)
}

func (o *GetTokenUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/tokens][%d] getTokenUsingGETUnauthorized", 401)
}

func (o *GetTokenUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTokenUsingGETForbidden creates a GetTokenUsingGETForbidden with default headers values
func NewGetTokenUsingGETForbidden() *GetTokenUsingGETForbidden {
	return &GetTokenUsingGETForbidden{}
}

/*
GetTokenUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetTokenUsingGETForbidden struct {
}

// IsSuccess returns true when this get token using g e t forbidden response has a 2xx status code
func (o *GetTokenUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get token using g e t forbidden response has a 3xx status code
func (o *GetTokenUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get token using g e t forbidden response has a 4xx status code
func (o *GetTokenUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get token using g e t forbidden response has a 5xx status code
func (o *GetTokenUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get token using g e t forbidden response a status code equal to that given
func (o *GetTokenUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get token using g e t forbidden response
func (o *GetTokenUsingGETForbidden) Code() int {
	return 403
}

func (o *GetTokenUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/tokens][%d] getTokenUsingGETForbidden", 403)
}

func (o *GetTokenUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/tokens][%d] getTokenUsingGETForbidden", 403)
}

func (o *GetTokenUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTokenUsingGETNotFound creates a GetTokenUsingGETNotFound with default headers values
func NewGetTokenUsingGETNotFound() *GetTokenUsingGETNotFound {
	return &GetTokenUsingGETNotFound{}
}

/*
GetTokenUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetTokenUsingGETNotFound struct {
}

// IsSuccess returns true when this get token using g e t not found response has a 2xx status code
func (o *GetTokenUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get token using g e t not found response has a 3xx status code
func (o *GetTokenUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get token using g e t not found response has a 4xx status code
func (o *GetTokenUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get token using g e t not found response has a 5xx status code
func (o *GetTokenUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get token using g e t not found response a status code equal to that given
func (o *GetTokenUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get token using g e t not found response
func (o *GetTokenUsingGETNotFound) Code() int {
	return 404
}

func (o *GetTokenUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/tokens][%d] getTokenUsingGETNotFound", 404)
}

func (o *GetTokenUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/tokens][%d] getTokenUsingGETNotFound", 404)
}

func (o *GetTokenUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
