// Code generated by go-swagger; DO NOT EDIT.

package ui_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetALlLoggedInUsersUsingGETReader is a Reader for the GetALlLoggedInUsersUsingGET structure.
type GetALlLoggedInUsersUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetALlLoggedInUsersUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetALlLoggedInUsersUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetALlLoggedInUsersUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetALlLoggedInUsersUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetALlLoggedInUsersUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/users/loggedIn] getALlLoggedInUsersUsingGET", response, response.Code())
	}
}

// NewGetALlLoggedInUsersUsingGETOK creates a GetALlLoggedInUsersUsingGETOK with default headers values
func NewGetALlLoggedInUsersUsingGETOK() *GetALlLoggedInUsersUsingGETOK {
	return &GetALlLoggedInUsersUsingGETOK{}
}

/*
GetALlLoggedInUsersUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetALlLoggedInUsersUsingGETOK struct {
	Payload []interface{}
}

// IsSuccess returns true when this get a ll logged in users using g e t o k response has a 2xx status code
func (o *GetALlLoggedInUsersUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get a ll logged in users using g e t o k response has a 3xx status code
func (o *GetALlLoggedInUsersUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get a ll logged in users using g e t o k response has a 4xx status code
func (o *GetALlLoggedInUsersUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get a ll logged in users using g e t o k response has a 5xx status code
func (o *GetALlLoggedInUsersUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get a ll logged in users using g e t o k response a status code equal to that given
func (o *GetALlLoggedInUsersUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get a ll logged in users using g e t o k response
func (o *GetALlLoggedInUsersUsingGETOK) Code() int {
	return 200
}

func (o *GetALlLoggedInUsersUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/loggedIn][%d] getALlLoggedInUsersUsingGETOK %s", 200, payload)
}

func (o *GetALlLoggedInUsersUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/loggedIn][%d] getALlLoggedInUsersUsingGETOK %s", 200, payload)
}

func (o *GetALlLoggedInUsersUsingGETOK) GetPayload() []interface{} {
	return o.Payload
}

func (o *GetALlLoggedInUsersUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetALlLoggedInUsersUsingGETUnauthorized creates a GetALlLoggedInUsersUsingGETUnauthorized with default headers values
func NewGetALlLoggedInUsersUsingGETUnauthorized() *GetALlLoggedInUsersUsingGETUnauthorized {
	return &GetALlLoggedInUsersUsingGETUnauthorized{}
}

/*
GetALlLoggedInUsersUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetALlLoggedInUsersUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get a ll logged in users using g e t unauthorized response has a 2xx status code
func (o *GetALlLoggedInUsersUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get a ll logged in users using g e t unauthorized response has a 3xx status code
func (o *GetALlLoggedInUsersUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get a ll logged in users using g e t unauthorized response has a 4xx status code
func (o *GetALlLoggedInUsersUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get a ll logged in users using g e t unauthorized response has a 5xx status code
func (o *GetALlLoggedInUsersUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get a ll logged in users using g e t unauthorized response a status code equal to that given
func (o *GetALlLoggedInUsersUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get a ll logged in users using g e t unauthorized response
func (o *GetALlLoggedInUsersUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetALlLoggedInUsersUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/loggedIn][%d] getALlLoggedInUsersUsingGETUnauthorized", 401)
}

func (o *GetALlLoggedInUsersUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/loggedIn][%d] getALlLoggedInUsersUsingGETUnauthorized", 401)
}

func (o *GetALlLoggedInUsersUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetALlLoggedInUsersUsingGETForbidden creates a GetALlLoggedInUsersUsingGETForbidden with default headers values
func NewGetALlLoggedInUsersUsingGETForbidden() *GetALlLoggedInUsersUsingGETForbidden {
	return &GetALlLoggedInUsersUsingGETForbidden{}
}

/*
GetALlLoggedInUsersUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetALlLoggedInUsersUsingGETForbidden struct {
}

// IsSuccess returns true when this get a ll logged in users using g e t forbidden response has a 2xx status code
func (o *GetALlLoggedInUsersUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get a ll logged in users using g e t forbidden response has a 3xx status code
func (o *GetALlLoggedInUsersUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get a ll logged in users using g e t forbidden response has a 4xx status code
func (o *GetALlLoggedInUsersUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get a ll logged in users using g e t forbidden response has a 5xx status code
func (o *GetALlLoggedInUsersUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get a ll logged in users using g e t forbidden response a status code equal to that given
func (o *GetALlLoggedInUsersUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get a ll logged in users using g e t forbidden response
func (o *GetALlLoggedInUsersUsingGETForbidden) Code() int {
	return 403
}

func (o *GetALlLoggedInUsersUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/loggedIn][%d] getALlLoggedInUsersUsingGETForbidden", 403)
}

func (o *GetALlLoggedInUsersUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/loggedIn][%d] getALlLoggedInUsersUsingGETForbidden", 403)
}

func (o *GetALlLoggedInUsersUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetALlLoggedInUsersUsingGETNotFound creates a GetALlLoggedInUsersUsingGETNotFound with default headers values
func NewGetALlLoggedInUsersUsingGETNotFound() *GetALlLoggedInUsersUsingGETNotFound {
	return &GetALlLoggedInUsersUsingGETNotFound{}
}

/*
GetALlLoggedInUsersUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetALlLoggedInUsersUsingGETNotFound struct {
}

// IsSuccess returns true when this get a ll logged in users using g e t not found response has a 2xx status code
func (o *GetALlLoggedInUsersUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get a ll logged in users using g e t not found response has a 3xx status code
func (o *GetALlLoggedInUsersUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get a ll logged in users using g e t not found response has a 4xx status code
func (o *GetALlLoggedInUsersUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get a ll logged in users using g e t not found response has a 5xx status code
func (o *GetALlLoggedInUsersUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get a ll logged in users using g e t not found response a status code equal to that given
func (o *GetALlLoggedInUsersUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get a ll logged in users using g e t not found response
func (o *GetALlLoggedInUsersUsingGETNotFound) Code() int {
	return 404
}

func (o *GetALlLoggedInUsersUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/loggedIn][%d] getALlLoggedInUsersUsingGETNotFound", 404)
}

func (o *GetALlLoggedInUsersUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/loggedIn][%d] getALlLoggedInUsersUsingGETNotFound", 404)
}

func (o *GetALlLoggedInUsersUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
