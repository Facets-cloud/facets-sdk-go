// Code generated by go-swagger; DO NOT EDIT.

package ui_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteTokenReader is a Reader for the DeleteToken structure.
type DeleteTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteTokenMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/users/tokens/{tokenId}] deleteToken", response, response.Code())
	}
}

// NewDeleteTokenOK creates a DeleteTokenOK with default headers values
func NewDeleteTokenOK() *DeleteTokenOK {
	return &DeleteTokenOK{}
}

/*
DeleteTokenOK describes a response with status code 200, with default header values.

OK
*/
type DeleteTokenOK struct {
	Payload []*models.UserAccessToken
}

// IsSuccess returns true when this delete token o k response has a 2xx status code
func (o *DeleteTokenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete token o k response has a 3xx status code
func (o *DeleteTokenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token o k response has a 4xx status code
func (o *DeleteTokenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete token o k response has a 5xx status code
func (o *DeleteTokenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete token o k response a status code equal to that given
func (o *DeleteTokenOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete token o k response
func (o *DeleteTokenOK) Code() int {
	return 200
}

func (o *DeleteTokenOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/tokens/{tokenId}][%d] deleteTokenOK %s", 200, payload)
}

func (o *DeleteTokenOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/tokens/{tokenId}][%d] deleteTokenOK %s", 200, payload)
}

func (o *DeleteTokenOK) GetPayload() []*models.UserAccessToken {
	return o.Payload
}

func (o *DeleteTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTokenBadRequest creates a DeleteTokenBadRequest with default headers values
func NewDeleteTokenBadRequest() *DeleteTokenBadRequest {
	return &DeleteTokenBadRequest{}
}

/*
DeleteTokenBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteTokenBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete token bad request response has a 2xx status code
func (o *DeleteTokenBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete token bad request response has a 3xx status code
func (o *DeleteTokenBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token bad request response has a 4xx status code
func (o *DeleteTokenBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete token bad request response has a 5xx status code
func (o *DeleteTokenBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete token bad request response a status code equal to that given
func (o *DeleteTokenBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete token bad request response
func (o *DeleteTokenBadRequest) Code() int {
	return 400
}

func (o *DeleteTokenBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/tokens/{tokenId}][%d] deleteTokenBadRequest %s", 400, payload)
}

func (o *DeleteTokenBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/tokens/{tokenId}][%d] deleteTokenBadRequest %s", 400, payload)
}

func (o *DeleteTokenBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTokenNotFound creates a DeleteTokenNotFound with default headers values
func NewDeleteTokenNotFound() *DeleteTokenNotFound {
	return &DeleteTokenNotFound{}
}

/*
DeleteTokenNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteTokenNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete token not found response has a 2xx status code
func (o *DeleteTokenNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete token not found response has a 3xx status code
func (o *DeleteTokenNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token not found response has a 4xx status code
func (o *DeleteTokenNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete token not found response has a 5xx status code
func (o *DeleteTokenNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete token not found response a status code equal to that given
func (o *DeleteTokenNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete token not found response
func (o *DeleteTokenNotFound) Code() int {
	return 404
}

func (o *DeleteTokenNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/tokens/{tokenId}][%d] deleteTokenNotFound %s", 404, payload)
}

func (o *DeleteTokenNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/tokens/{tokenId}][%d] deleteTokenNotFound %s", 404, payload)
}

func (o *DeleteTokenNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTokenMethodNotAllowed creates a DeleteTokenMethodNotAllowed with default headers values
func NewDeleteTokenMethodNotAllowed() *DeleteTokenMethodNotAllowed {
	return &DeleteTokenMethodNotAllowed{}
}

/*
DeleteTokenMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DeleteTokenMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete token method not allowed response has a 2xx status code
func (o *DeleteTokenMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete token method not allowed response has a 3xx status code
func (o *DeleteTokenMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token method not allowed response has a 4xx status code
func (o *DeleteTokenMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete token method not allowed response has a 5xx status code
func (o *DeleteTokenMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete token method not allowed response a status code equal to that given
func (o *DeleteTokenMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the delete token method not allowed response
func (o *DeleteTokenMethodNotAllowed) Code() int {
	return 405
}

func (o *DeleteTokenMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/tokens/{tokenId}][%d] deleteTokenMethodNotAllowed %s", 405, payload)
}

func (o *DeleteTokenMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/tokens/{tokenId}][%d] deleteTokenMethodNotAllowed %s", 405, payload)
}

func (o *DeleteTokenMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteTokenMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTokenInternalServerError creates a DeleteTokenInternalServerError with default headers values
func NewDeleteTokenInternalServerError() *DeleteTokenInternalServerError {
	return &DeleteTokenInternalServerError{}
}

/*
DeleteTokenInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteTokenInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete token internal server error response has a 2xx status code
func (o *DeleteTokenInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete token internal server error response has a 3xx status code
func (o *DeleteTokenInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete token internal server error response has a 4xx status code
func (o *DeleteTokenInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete token internal server error response has a 5xx status code
func (o *DeleteTokenInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete token internal server error response a status code equal to that given
func (o *DeleteTokenInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete token internal server error response
func (o *DeleteTokenInternalServerError) Code() int {
	return 500
}

func (o *DeleteTokenInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/tokens/{tokenId}][%d] deleteTokenInternalServerError %s", 500, payload)
}

func (o *DeleteTokenInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/tokens/{tokenId}][%d] deleteTokenInternalServerError %s", 500, payload)
}

func (o *DeleteTokenInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteTokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
