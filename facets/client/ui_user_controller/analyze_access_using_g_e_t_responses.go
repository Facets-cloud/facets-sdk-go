// Code generated by go-swagger; DO NOT EDIT.

package ui_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// AnalyzeAccessUsingGETReader is a Reader for the AnalyzeAccessUsingGET structure.
type AnalyzeAccessUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AnalyzeAccessUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAnalyzeAccessUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAnalyzeAccessUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAnalyzeAccessUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAnalyzeAccessUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/users/analyze-access] analyzeAccessUsingGET", response, response.Code())
	}
}

// NewAnalyzeAccessUsingGETOK creates a AnalyzeAccessUsingGETOK with default headers values
func NewAnalyzeAccessUsingGETOK() *AnalyzeAccessUsingGETOK {
	return &AnalyzeAccessUsingGETOK{}
}

/*
AnalyzeAccessUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type AnalyzeAccessUsingGETOK struct {
	Payload []*models.AccessAnalyzerResponse
}

// IsSuccess returns true when this analyze access using g e t o k response has a 2xx status code
func (o *AnalyzeAccessUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this analyze access using g e t o k response has a 3xx status code
func (o *AnalyzeAccessUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this analyze access using g e t o k response has a 4xx status code
func (o *AnalyzeAccessUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this analyze access using g e t o k response has a 5xx status code
func (o *AnalyzeAccessUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this analyze access using g e t o k response a status code equal to that given
func (o *AnalyzeAccessUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the analyze access using g e t o k response
func (o *AnalyzeAccessUsingGETOK) Code() int {
	return 200
}

func (o *AnalyzeAccessUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessUsingGETOK %s", 200, payload)
}

func (o *AnalyzeAccessUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessUsingGETOK %s", 200, payload)
}

func (o *AnalyzeAccessUsingGETOK) GetPayload() []*models.AccessAnalyzerResponse {
	return o.Payload
}

func (o *AnalyzeAccessUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnalyzeAccessUsingGETUnauthorized creates a AnalyzeAccessUsingGETUnauthorized with default headers values
func NewAnalyzeAccessUsingGETUnauthorized() *AnalyzeAccessUsingGETUnauthorized {
	return &AnalyzeAccessUsingGETUnauthorized{}
}

/*
AnalyzeAccessUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AnalyzeAccessUsingGETUnauthorized struct {
}

// IsSuccess returns true when this analyze access using g e t unauthorized response has a 2xx status code
func (o *AnalyzeAccessUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this analyze access using g e t unauthorized response has a 3xx status code
func (o *AnalyzeAccessUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this analyze access using g e t unauthorized response has a 4xx status code
func (o *AnalyzeAccessUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this analyze access using g e t unauthorized response has a 5xx status code
func (o *AnalyzeAccessUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this analyze access using g e t unauthorized response a status code equal to that given
func (o *AnalyzeAccessUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the analyze access using g e t unauthorized response
func (o *AnalyzeAccessUsingGETUnauthorized) Code() int {
	return 401
}

func (o *AnalyzeAccessUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessUsingGETUnauthorized", 401)
}

func (o *AnalyzeAccessUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessUsingGETUnauthorized", 401)
}

func (o *AnalyzeAccessUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAnalyzeAccessUsingGETForbidden creates a AnalyzeAccessUsingGETForbidden with default headers values
func NewAnalyzeAccessUsingGETForbidden() *AnalyzeAccessUsingGETForbidden {
	return &AnalyzeAccessUsingGETForbidden{}
}

/*
AnalyzeAccessUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AnalyzeAccessUsingGETForbidden struct {
}

// IsSuccess returns true when this analyze access using g e t forbidden response has a 2xx status code
func (o *AnalyzeAccessUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this analyze access using g e t forbidden response has a 3xx status code
func (o *AnalyzeAccessUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this analyze access using g e t forbidden response has a 4xx status code
func (o *AnalyzeAccessUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this analyze access using g e t forbidden response has a 5xx status code
func (o *AnalyzeAccessUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this analyze access using g e t forbidden response a status code equal to that given
func (o *AnalyzeAccessUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the analyze access using g e t forbidden response
func (o *AnalyzeAccessUsingGETForbidden) Code() int {
	return 403
}

func (o *AnalyzeAccessUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessUsingGETForbidden", 403)
}

func (o *AnalyzeAccessUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessUsingGETForbidden", 403)
}

func (o *AnalyzeAccessUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAnalyzeAccessUsingGETNotFound creates a AnalyzeAccessUsingGETNotFound with default headers values
func NewAnalyzeAccessUsingGETNotFound() *AnalyzeAccessUsingGETNotFound {
	return &AnalyzeAccessUsingGETNotFound{}
}

/*
AnalyzeAccessUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AnalyzeAccessUsingGETNotFound struct {
}

// IsSuccess returns true when this analyze access using g e t not found response has a 2xx status code
func (o *AnalyzeAccessUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this analyze access using g e t not found response has a 3xx status code
func (o *AnalyzeAccessUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this analyze access using g e t not found response has a 4xx status code
func (o *AnalyzeAccessUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this analyze access using g e t not found response has a 5xx status code
func (o *AnalyzeAccessUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this analyze access using g e t not found response a status code equal to that given
func (o *AnalyzeAccessUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the analyze access using g e t not found response
func (o *AnalyzeAccessUsingGETNotFound) Code() int {
	return 404
}

func (o *AnalyzeAccessUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessUsingGETNotFound", 404)
}

func (o *AnalyzeAccessUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessUsingGETNotFound", 404)
}

func (o *AnalyzeAccessUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
