// Code generated by go-swagger; DO NOT EDIT.

package ui_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetUserUsingGETReader is a Reader for the GetUserUsingGET structure.
type GetUserUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetUserUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/users/{userId}] getUserUsingGET", response, response.Code())
	}
}

// NewGetUserUsingGETOK creates a GetUserUsingGETOK with default headers values
func NewGetUserUsingGETOK() *GetUserUsingGETOK {
	return &GetUserUsingGETOK{}
}

/*
GetUserUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetUserUsingGETOK struct {
	Payload *models.User
}

// IsSuccess returns true when this get user using g e t o k response has a 2xx status code
func (o *GetUserUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get user using g e t o k response has a 3xx status code
func (o *GetUserUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user using g e t o k response has a 4xx status code
func (o *GetUserUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user using g e t o k response has a 5xx status code
func (o *GetUserUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get user using g e t o k response a status code equal to that given
func (o *GetUserUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get user using g e t o k response
func (o *GetUserUsingGETOK) Code() int {
	return 200
}

func (o *GetUserUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/{userId}][%d] getUserUsingGETOK %s", 200, payload)
}

func (o *GetUserUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/{userId}][%d] getUserUsingGETOK %s", 200, payload)
}

func (o *GetUserUsingGETOK) GetPayload() *models.User {
	return o.Payload
}

func (o *GetUserUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserUsingGETUnauthorized creates a GetUserUsingGETUnauthorized with default headers values
func NewGetUserUsingGETUnauthorized() *GetUserUsingGETUnauthorized {
	return &GetUserUsingGETUnauthorized{}
}

/*
GetUserUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetUserUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get user using g e t unauthorized response has a 2xx status code
func (o *GetUserUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user using g e t unauthorized response has a 3xx status code
func (o *GetUserUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user using g e t unauthorized response has a 4xx status code
func (o *GetUserUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user using g e t unauthorized response has a 5xx status code
func (o *GetUserUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get user using g e t unauthorized response a status code equal to that given
func (o *GetUserUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get user using g e t unauthorized response
func (o *GetUserUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetUserUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/{userId}][%d] getUserUsingGETUnauthorized", 401)
}

func (o *GetUserUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/{userId}][%d] getUserUsingGETUnauthorized", 401)
}

func (o *GetUserUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserUsingGETForbidden creates a GetUserUsingGETForbidden with default headers values
func NewGetUserUsingGETForbidden() *GetUserUsingGETForbidden {
	return &GetUserUsingGETForbidden{}
}

/*
GetUserUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetUserUsingGETForbidden struct {
}

// IsSuccess returns true when this get user using g e t forbidden response has a 2xx status code
func (o *GetUserUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user using g e t forbidden response has a 3xx status code
func (o *GetUserUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user using g e t forbidden response has a 4xx status code
func (o *GetUserUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user using g e t forbidden response has a 5xx status code
func (o *GetUserUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get user using g e t forbidden response a status code equal to that given
func (o *GetUserUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get user using g e t forbidden response
func (o *GetUserUsingGETForbidden) Code() int {
	return 403
}

func (o *GetUserUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/{userId}][%d] getUserUsingGETForbidden", 403)
}

func (o *GetUserUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/{userId}][%d] getUserUsingGETForbidden", 403)
}

func (o *GetUserUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserUsingGETNotFound creates a GetUserUsingGETNotFound with default headers values
func NewGetUserUsingGETNotFound() *GetUserUsingGETNotFound {
	return &GetUserUsingGETNotFound{}
}

/*
GetUserUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetUserUsingGETNotFound struct {
}

// IsSuccess returns true when this get user using g e t not found response has a 2xx status code
func (o *GetUserUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user using g e t not found response has a 3xx status code
func (o *GetUserUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user using g e t not found response has a 4xx status code
func (o *GetUserUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user using g e t not found response has a 5xx status code
func (o *GetUserUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get user using g e t not found response a status code equal to that given
func (o *GetUserUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get user using g e t not found response
func (o *GetUserUsingGETNotFound) Code() int {
	return 404
}

func (o *GetUserUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/{userId}][%d] getUserUsingGETNotFound", 404)
}

func (o *GetUserUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/users/{userId}][%d] getUserUsingGETNotFound", 404)
}

func (o *GetUserUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
