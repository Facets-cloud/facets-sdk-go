// Code generated by go-swagger; DO NOT EDIT.

package ui_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteUserUsingDELETEReader is a Reader for the DeleteUserUsingDELETE structure.
type DeleteUserUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteUserUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteUserUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteUserUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteUserUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteUserUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/users/{userId}] deleteUserUsingDELETE", response, response.Code())
	}
}

// NewDeleteUserUsingDELETEOK creates a DeleteUserUsingDELETEOK with default headers values
func NewDeleteUserUsingDELETEOK() *DeleteUserUsingDELETEOK {
	return &DeleteUserUsingDELETEOK{}
}

/*
DeleteUserUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteUserUsingDELETEOK struct {
	Payload bool
}

// IsSuccess returns true when this delete user using d e l e t e o k response has a 2xx status code
func (o *DeleteUserUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete user using d e l e t e o k response has a 3xx status code
func (o *DeleteUserUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user using d e l e t e o k response has a 4xx status code
func (o *DeleteUserUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete user using d e l e t e o k response has a 5xx status code
func (o *DeleteUserUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user using d e l e t e o k response a status code equal to that given
func (o *DeleteUserUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete user using d e l e t e o k response
func (o *DeleteUserUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteUserUsingDELETEOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/{userId}][%d] deleteUserUsingDELETEOK %s", 200, payload)
}

func (o *DeleteUserUsingDELETEOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/{userId}][%d] deleteUserUsingDELETEOK %s", 200, payload)
}

func (o *DeleteUserUsingDELETEOK) GetPayload() bool {
	return o.Payload
}

func (o *DeleteUserUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUserUsingDELETENoContent creates a DeleteUserUsingDELETENoContent with default headers values
func NewDeleteUserUsingDELETENoContent() *DeleteUserUsingDELETENoContent {
	return &DeleteUserUsingDELETENoContent{}
}

/*
DeleteUserUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteUserUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete user using d e l e t e no content response has a 2xx status code
func (o *DeleteUserUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete user using d e l e t e no content response has a 3xx status code
func (o *DeleteUserUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user using d e l e t e no content response has a 4xx status code
func (o *DeleteUserUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete user using d e l e t e no content response has a 5xx status code
func (o *DeleteUserUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user using d e l e t e no content response a status code equal to that given
func (o *DeleteUserUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete user using d e l e t e no content response
func (o *DeleteUserUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteUserUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/{userId}][%d] deleteUserUsingDELETENoContent", 204)
}

func (o *DeleteUserUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/{userId}][%d] deleteUserUsingDELETENoContent", 204)
}

func (o *DeleteUserUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteUserUsingDELETEUnauthorized creates a DeleteUserUsingDELETEUnauthorized with default headers values
func NewDeleteUserUsingDELETEUnauthorized() *DeleteUserUsingDELETEUnauthorized {
	return &DeleteUserUsingDELETEUnauthorized{}
}

/*
DeleteUserUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteUserUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete user using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteUserUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteUserUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteUserUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteUserUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteUserUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete user using d e l e t e unauthorized response
func (o *DeleteUserUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteUserUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/{userId}][%d] deleteUserUsingDELETEUnauthorized", 401)
}

func (o *DeleteUserUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/{userId}][%d] deleteUserUsingDELETEUnauthorized", 401)
}

func (o *DeleteUserUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteUserUsingDELETEForbidden creates a DeleteUserUsingDELETEForbidden with default headers values
func NewDeleteUserUsingDELETEForbidden() *DeleteUserUsingDELETEForbidden {
	return &DeleteUserUsingDELETEForbidden{}
}

/*
DeleteUserUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteUserUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete user using d e l e t e forbidden response has a 2xx status code
func (o *DeleteUserUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user using d e l e t e forbidden response has a 3xx status code
func (o *DeleteUserUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user using d e l e t e forbidden response has a 4xx status code
func (o *DeleteUserUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user using d e l e t e forbidden response has a 5xx status code
func (o *DeleteUserUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user using d e l e t e forbidden response a status code equal to that given
func (o *DeleteUserUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete user using d e l e t e forbidden response
func (o *DeleteUserUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteUserUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/{userId}][%d] deleteUserUsingDELETEForbidden", 403)
}

func (o *DeleteUserUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/users/{userId}][%d] deleteUserUsingDELETEForbidden", 403)
}

func (o *DeleteUserUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
