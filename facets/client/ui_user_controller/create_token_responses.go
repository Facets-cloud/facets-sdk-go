// Code generated by go-swagger; DO NOT EDIT.

package ui_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateTokenReader is a Reader for the CreateToken structure.
type CreateTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreateTokenMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/users/createAccessToken] createToken", response, response.Code())
	}
}

// NewCreateTokenOK creates a CreateTokenOK with default headers values
func NewCreateTokenOK() *CreateTokenOK {
	return &CreateTokenOK{}
}

/*
CreateTokenOK describes a response with status code 200, with default header values.

OK
*/
type CreateTokenOK struct {
	Payload []*models.UserAccessToken
}

// IsSuccess returns true when this create token o k response has a 2xx status code
func (o *CreateTokenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create token o k response has a 3xx status code
func (o *CreateTokenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create token o k response has a 4xx status code
func (o *CreateTokenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create token o k response has a 5xx status code
func (o *CreateTokenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create token o k response a status code equal to that given
func (o *CreateTokenOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create token o k response
func (o *CreateTokenOK) Code() int {
	return 200
}

func (o *CreateTokenOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/createAccessToken][%d] createTokenOK %s", 200, payload)
}

func (o *CreateTokenOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/createAccessToken][%d] createTokenOK %s", 200, payload)
}

func (o *CreateTokenOK) GetPayload() []*models.UserAccessToken {
	return o.Payload
}

func (o *CreateTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTokenBadRequest creates a CreateTokenBadRequest with default headers values
func NewCreateTokenBadRequest() *CreateTokenBadRequest {
	return &CreateTokenBadRequest{}
}

/*
CreateTokenBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateTokenBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create token bad request response has a 2xx status code
func (o *CreateTokenBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create token bad request response has a 3xx status code
func (o *CreateTokenBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create token bad request response has a 4xx status code
func (o *CreateTokenBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create token bad request response has a 5xx status code
func (o *CreateTokenBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create token bad request response a status code equal to that given
func (o *CreateTokenBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create token bad request response
func (o *CreateTokenBadRequest) Code() int {
	return 400
}

func (o *CreateTokenBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/createAccessToken][%d] createTokenBadRequest %s", 400, payload)
}

func (o *CreateTokenBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/createAccessToken][%d] createTokenBadRequest %s", 400, payload)
}

func (o *CreateTokenBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTokenNotFound creates a CreateTokenNotFound with default headers values
func NewCreateTokenNotFound() *CreateTokenNotFound {
	return &CreateTokenNotFound{}
}

/*
CreateTokenNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateTokenNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create token not found response has a 2xx status code
func (o *CreateTokenNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create token not found response has a 3xx status code
func (o *CreateTokenNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create token not found response has a 4xx status code
func (o *CreateTokenNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create token not found response has a 5xx status code
func (o *CreateTokenNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create token not found response a status code equal to that given
func (o *CreateTokenNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create token not found response
func (o *CreateTokenNotFound) Code() int {
	return 404
}

func (o *CreateTokenNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/createAccessToken][%d] createTokenNotFound %s", 404, payload)
}

func (o *CreateTokenNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/createAccessToken][%d] createTokenNotFound %s", 404, payload)
}

func (o *CreateTokenNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTokenMethodNotAllowed creates a CreateTokenMethodNotAllowed with default headers values
func NewCreateTokenMethodNotAllowed() *CreateTokenMethodNotAllowed {
	return &CreateTokenMethodNotAllowed{}
}

/*
CreateTokenMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type CreateTokenMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create token method not allowed response has a 2xx status code
func (o *CreateTokenMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create token method not allowed response has a 3xx status code
func (o *CreateTokenMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create token method not allowed response has a 4xx status code
func (o *CreateTokenMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create token method not allowed response has a 5xx status code
func (o *CreateTokenMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this create token method not allowed response a status code equal to that given
func (o *CreateTokenMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the create token method not allowed response
func (o *CreateTokenMethodNotAllowed) Code() int {
	return 405
}

func (o *CreateTokenMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/createAccessToken][%d] createTokenMethodNotAllowed %s", 405, payload)
}

func (o *CreateTokenMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/createAccessToken][%d] createTokenMethodNotAllowed %s", 405, payload)
}

func (o *CreateTokenMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateTokenMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTokenInternalServerError creates a CreateTokenInternalServerError with default headers values
func NewCreateTokenInternalServerError() *CreateTokenInternalServerError {
	return &CreateTokenInternalServerError{}
}

/*
CreateTokenInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateTokenInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create token internal server error response has a 2xx status code
func (o *CreateTokenInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create token internal server error response has a 3xx status code
func (o *CreateTokenInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create token internal server error response has a 4xx status code
func (o *CreateTokenInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create token internal server error response has a 5xx status code
func (o *CreateTokenInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create token internal server error response a status code equal to that given
func (o *CreateTokenInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create token internal server error response
func (o *CreateTokenInternalServerError) Code() int {
	return 500
}

func (o *CreateTokenInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/createAccessToken][%d] createTokenInternalServerError %s", 500, payload)
}

func (o *CreateTokenInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/createAccessToken][%d] createTokenInternalServerError %s", 500, payload)
}

func (o *CreateTokenInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateTokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
