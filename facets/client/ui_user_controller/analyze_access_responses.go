// Code generated by go-swagger; DO NOT EDIT.

package ui_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// AnalyzeAccessReader is a Reader for the AnalyzeAccess structure.
type AnalyzeAccessReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AnalyzeAccessReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAnalyzeAccessOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAnalyzeAccessBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAnalyzeAccessNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewAnalyzeAccessMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAnalyzeAccessInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/users/analyze-access] analyzeAccess", response, response.Code())
	}
}

// NewAnalyzeAccessOK creates a AnalyzeAccessOK with default headers values
func NewAnalyzeAccessOK() *AnalyzeAccessOK {
	return &AnalyzeAccessOK{}
}

/*
AnalyzeAccessOK describes a response with status code 200, with default header values.

OK
*/
type AnalyzeAccessOK struct {
	Payload []*models.AccessAnalyzerResponse
}

// IsSuccess returns true when this analyze access o k response has a 2xx status code
func (o *AnalyzeAccessOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this analyze access o k response has a 3xx status code
func (o *AnalyzeAccessOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this analyze access o k response has a 4xx status code
func (o *AnalyzeAccessOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this analyze access o k response has a 5xx status code
func (o *AnalyzeAccessOK) IsServerError() bool {
	return false
}

// IsCode returns true when this analyze access o k response a status code equal to that given
func (o *AnalyzeAccessOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the analyze access o k response
func (o *AnalyzeAccessOK) Code() int {
	return 200
}

func (o *AnalyzeAccessOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessOK %s", 200, payload)
}

func (o *AnalyzeAccessOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessOK %s", 200, payload)
}

func (o *AnalyzeAccessOK) GetPayload() []*models.AccessAnalyzerResponse {
	return o.Payload
}

func (o *AnalyzeAccessOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnalyzeAccessBadRequest creates a AnalyzeAccessBadRequest with default headers values
func NewAnalyzeAccessBadRequest() *AnalyzeAccessBadRequest {
	return &AnalyzeAccessBadRequest{}
}

/*
AnalyzeAccessBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AnalyzeAccessBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this analyze access bad request response has a 2xx status code
func (o *AnalyzeAccessBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this analyze access bad request response has a 3xx status code
func (o *AnalyzeAccessBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this analyze access bad request response has a 4xx status code
func (o *AnalyzeAccessBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this analyze access bad request response has a 5xx status code
func (o *AnalyzeAccessBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this analyze access bad request response a status code equal to that given
func (o *AnalyzeAccessBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the analyze access bad request response
func (o *AnalyzeAccessBadRequest) Code() int {
	return 400
}

func (o *AnalyzeAccessBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessBadRequest %s", 400, payload)
}

func (o *AnalyzeAccessBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessBadRequest %s", 400, payload)
}

func (o *AnalyzeAccessBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AnalyzeAccessBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnalyzeAccessNotFound creates a AnalyzeAccessNotFound with default headers values
func NewAnalyzeAccessNotFound() *AnalyzeAccessNotFound {
	return &AnalyzeAccessNotFound{}
}

/*
AnalyzeAccessNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AnalyzeAccessNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this analyze access not found response has a 2xx status code
func (o *AnalyzeAccessNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this analyze access not found response has a 3xx status code
func (o *AnalyzeAccessNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this analyze access not found response has a 4xx status code
func (o *AnalyzeAccessNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this analyze access not found response has a 5xx status code
func (o *AnalyzeAccessNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this analyze access not found response a status code equal to that given
func (o *AnalyzeAccessNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the analyze access not found response
func (o *AnalyzeAccessNotFound) Code() int {
	return 404
}

func (o *AnalyzeAccessNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessNotFound %s", 404, payload)
}

func (o *AnalyzeAccessNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessNotFound %s", 404, payload)
}

func (o *AnalyzeAccessNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AnalyzeAccessNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnalyzeAccessMethodNotAllowed creates a AnalyzeAccessMethodNotAllowed with default headers values
func NewAnalyzeAccessMethodNotAllowed() *AnalyzeAccessMethodNotAllowed {
	return &AnalyzeAccessMethodNotAllowed{}
}

/*
AnalyzeAccessMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type AnalyzeAccessMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this analyze access method not allowed response has a 2xx status code
func (o *AnalyzeAccessMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this analyze access method not allowed response has a 3xx status code
func (o *AnalyzeAccessMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this analyze access method not allowed response has a 4xx status code
func (o *AnalyzeAccessMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this analyze access method not allowed response has a 5xx status code
func (o *AnalyzeAccessMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this analyze access method not allowed response a status code equal to that given
func (o *AnalyzeAccessMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the analyze access method not allowed response
func (o *AnalyzeAccessMethodNotAllowed) Code() int {
	return 405
}

func (o *AnalyzeAccessMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessMethodNotAllowed %s", 405, payload)
}

func (o *AnalyzeAccessMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessMethodNotAllowed %s", 405, payload)
}

func (o *AnalyzeAccessMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AnalyzeAccessMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnalyzeAccessInternalServerError creates a AnalyzeAccessInternalServerError with default headers values
func NewAnalyzeAccessInternalServerError() *AnalyzeAccessInternalServerError {
	return &AnalyzeAccessInternalServerError{}
}

/*
AnalyzeAccessInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AnalyzeAccessInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this analyze access internal server error response has a 2xx status code
func (o *AnalyzeAccessInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this analyze access internal server error response has a 3xx status code
func (o *AnalyzeAccessInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this analyze access internal server error response has a 4xx status code
func (o *AnalyzeAccessInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this analyze access internal server error response has a 5xx status code
func (o *AnalyzeAccessInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this analyze access internal server error response a status code equal to that given
func (o *AnalyzeAccessInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the analyze access internal server error response
func (o *AnalyzeAccessInternalServerError) Code() int {
	return 500
}

func (o *AnalyzeAccessInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessInternalServerError %s", 500, payload)
}

func (o *AnalyzeAccessInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/analyze-access][%d] analyzeAccessInternalServerError %s", 500, payload)
}

func (o *AnalyzeAccessInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *AnalyzeAccessInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
