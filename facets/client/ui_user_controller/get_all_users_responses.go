// Code generated by go-swagger; DO NOT EDIT.

package ui_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllUsersReader is a Reader for the GetAllUsers structure.
type GetAllUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllUsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllUsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllUsersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAllUsersMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllUsersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/users/] getAllUsers", response, response.Code())
	}
}

// NewGetAllUsersOK creates a GetAllUsersOK with default headers values
func NewGetAllUsersOK() *GetAllUsersOK {
	return &GetAllUsersOK{}
}

/*
GetAllUsersOK describes a response with status code 200, with default header values.

OK
*/
type GetAllUsersOK struct {
	Payload []*models.User
}

// IsSuccess returns true when this get all users o k response has a 2xx status code
func (o *GetAllUsersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all users o k response has a 3xx status code
func (o *GetAllUsersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all users o k response has a 4xx status code
func (o *GetAllUsersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all users o k response has a 5xx status code
func (o *GetAllUsersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all users o k response a status code equal to that given
func (o *GetAllUsersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all users o k response
func (o *GetAllUsersOK) Code() int {
	return 200
}

func (o *GetAllUsersOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersOK %s", 200, payload)
}

func (o *GetAllUsersOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersOK %s", 200, payload)
}

func (o *GetAllUsersOK) GetPayload() []*models.User {
	return o.Payload
}

func (o *GetAllUsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllUsersBadRequest creates a GetAllUsersBadRequest with default headers values
func NewGetAllUsersBadRequest() *GetAllUsersBadRequest {
	return &GetAllUsersBadRequest{}
}

/*
GetAllUsersBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAllUsersBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all users bad request response has a 2xx status code
func (o *GetAllUsersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all users bad request response has a 3xx status code
func (o *GetAllUsersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all users bad request response has a 4xx status code
func (o *GetAllUsersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all users bad request response has a 5xx status code
func (o *GetAllUsersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all users bad request response a status code equal to that given
func (o *GetAllUsersBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all users bad request response
func (o *GetAllUsersBadRequest) Code() int {
	return 400
}

func (o *GetAllUsersBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersBadRequest %s", 400, payload)
}

func (o *GetAllUsersBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersBadRequest %s", 400, payload)
}

func (o *GetAllUsersBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllUsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllUsersNotFound creates a GetAllUsersNotFound with default headers values
func NewGetAllUsersNotFound() *GetAllUsersNotFound {
	return &GetAllUsersNotFound{}
}

/*
GetAllUsersNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllUsersNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all users not found response has a 2xx status code
func (o *GetAllUsersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all users not found response has a 3xx status code
func (o *GetAllUsersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all users not found response has a 4xx status code
func (o *GetAllUsersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all users not found response has a 5xx status code
func (o *GetAllUsersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all users not found response a status code equal to that given
func (o *GetAllUsersNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all users not found response
func (o *GetAllUsersNotFound) Code() int {
	return 404
}

func (o *GetAllUsersNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersNotFound %s", 404, payload)
}

func (o *GetAllUsersNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersNotFound %s", 404, payload)
}

func (o *GetAllUsersNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllUsersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllUsersMethodNotAllowed creates a GetAllUsersMethodNotAllowed with default headers values
func NewGetAllUsersMethodNotAllowed() *GetAllUsersMethodNotAllowed {
	return &GetAllUsersMethodNotAllowed{}
}

/*
GetAllUsersMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAllUsersMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all users method not allowed response has a 2xx status code
func (o *GetAllUsersMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all users method not allowed response has a 3xx status code
func (o *GetAllUsersMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all users method not allowed response has a 4xx status code
func (o *GetAllUsersMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all users method not allowed response has a 5xx status code
func (o *GetAllUsersMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get all users method not allowed response a status code equal to that given
func (o *GetAllUsersMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get all users method not allowed response
func (o *GetAllUsersMethodNotAllowed) Code() int {
	return 405
}

func (o *GetAllUsersMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersMethodNotAllowed %s", 405, payload)
}

func (o *GetAllUsersMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersMethodNotAllowed %s", 405, payload)
}

func (o *GetAllUsersMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllUsersMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllUsersInternalServerError creates a GetAllUsersInternalServerError with default headers values
func NewGetAllUsersInternalServerError() *GetAllUsersInternalServerError {
	return &GetAllUsersInternalServerError{}
}

/*
GetAllUsersInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAllUsersInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all users internal server error response has a 2xx status code
func (o *GetAllUsersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all users internal server error response has a 3xx status code
func (o *GetAllUsersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all users internal server error response has a 4xx status code
func (o *GetAllUsersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all users internal server error response has a 5xx status code
func (o *GetAllUsersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all users internal server error response a status code equal to that given
func (o *GetAllUsersInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all users internal server error response
func (o *GetAllUsersInternalServerError) Code() int {
	return 500
}

func (o *GetAllUsersInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersInternalServerError %s", 500, payload)
}

func (o *GetAllUsersInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/users/][%d] getAllUsersInternalServerError %s", 500, payload)
}

func (o *GetAllUsersInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllUsersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
