// Code generated by go-swagger; DO NOT EDIT.

package ui_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAnalyzeAccessUsingGETParams creates a new AnalyzeAccessUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAnalyzeAccessUsingGETParams() *AnalyzeAccessUsingGETParams {
	return &AnalyzeAccessUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAnalyzeAccessUsingGETParamsWithTimeout creates a new AnalyzeAccessUsingGETParams object
// with the ability to set a timeout on a request.
func NewAnalyzeAccessUsingGETParamsWithTimeout(timeout time.Duration) *AnalyzeAccessUsingGETParams {
	return &AnalyzeAccessUsingGETParams{
		timeout: timeout,
	}
}

// NewAnalyzeAccessUsingGETParamsWithContext creates a new AnalyzeAccessUsingGETParams object
// with the ability to set a context for a request.
func NewAnalyzeAccessUsingGETParamsWithContext(ctx context.Context) *AnalyzeAccessUsingGETParams {
	return &AnalyzeAccessUsingGETParams{
		Context: ctx,
	}
}

// NewAnalyzeAccessUsingGETParamsWithHTTPClient creates a new AnalyzeAccessUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewAnalyzeAccessUsingGETParamsWithHTTPClient(client *http.Client) *AnalyzeAccessUsingGETParams {
	return &AnalyzeAccessUsingGETParams{
		HTTPClient: client,
	}
}

/*
AnalyzeAccessUsingGETParams contains all the parameters to send to the API endpoint

	for the analyze access using g e t operation.

	Typically these are written to a http.Request.
*/
type AnalyzeAccessUsingGETParams struct {

	/* Permissions.

	   permissions
	*/
	Permissions []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the analyze access using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AnalyzeAccessUsingGETParams) WithDefaults() *AnalyzeAccessUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the analyze access using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AnalyzeAccessUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the analyze access using g e t params
func (o *AnalyzeAccessUsingGETParams) WithTimeout(timeout time.Duration) *AnalyzeAccessUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the analyze access using g e t params
func (o *AnalyzeAccessUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the analyze access using g e t params
func (o *AnalyzeAccessUsingGETParams) WithContext(ctx context.Context) *AnalyzeAccessUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the analyze access using g e t params
func (o *AnalyzeAccessUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the analyze access using g e t params
func (o *AnalyzeAccessUsingGETParams) WithHTTPClient(client *http.Client) *AnalyzeAccessUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the analyze access using g e t params
func (o *AnalyzeAccessUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPermissions adds the permissions to the analyze access using g e t params
func (o *AnalyzeAccessUsingGETParams) WithPermissions(permissions []string) *AnalyzeAccessUsingGETParams {
	o.SetPermissions(permissions)
	return o
}

// SetPermissions adds the permissions to the analyze access using g e t params
func (o *AnalyzeAccessUsingGETParams) SetPermissions(permissions []string) {
	o.Permissions = permissions
}

// WriteToRequest writes these params to a swagger request
func (o *AnalyzeAccessUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Permissions != nil {

		// binding items for permissions
		joinedPermissions := o.bindParamPermissions(reg)

		// query array param permissions
		if err := r.SetQueryParam("permissions", joinedPermissions...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamAnalyzeAccessUsingGET binds the parameter permissions
func (o *AnalyzeAccessUsingGETParams) bindParamPermissions(formats strfmt.Registry) []string {
	permissionsIR := o.Permissions

	var permissionsIC []string
	for _, permissionsIIR := range permissionsIR { // explode []string

		permissionsIIV := permissionsIIR // string as string
		permissionsIC = append(permissionsIC, permissionsIIV)
	}

	// items.CollectionFormat: "multi"
	permissionsIS := swag.JoinByFormat(permissionsIC, "multi")

	return permissionsIS
}
