// Code generated by go-swagger; DO NOT EDIT.

package ui_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdatePasswordReader is a Reader for the UpdatePassword structure.
type UpdatePasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePasswordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdatePasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdatePasswordMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdatePasswordInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/users/updatePassword] updatePassword", response, response.Code())
	}
}

// NewUpdatePasswordOK creates a UpdatePasswordOK with default headers values
func NewUpdatePasswordOK() *UpdatePasswordOK {
	return &UpdatePasswordOK{}
}

/*
UpdatePasswordOK describes a response with status code 200, with default header values.

OK
*/
type UpdatePasswordOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this update password o k response has a 2xx status code
func (o *UpdatePasswordOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update password o k response has a 3xx status code
func (o *UpdatePasswordOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update password o k response has a 4xx status code
func (o *UpdatePasswordOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update password o k response has a 5xx status code
func (o *UpdatePasswordOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update password o k response a status code equal to that given
func (o *UpdatePasswordOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update password o k response
func (o *UpdatePasswordOK) Code() int {
	return 200
}

func (o *UpdatePasswordOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordOK %s", 200, payload)
}

func (o *UpdatePasswordOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordOK %s", 200, payload)
}

func (o *UpdatePasswordOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *UpdatePasswordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePasswordBadRequest creates a UpdatePasswordBadRequest with default headers values
func NewUpdatePasswordBadRequest() *UpdatePasswordBadRequest {
	return &UpdatePasswordBadRequest{}
}

/*
UpdatePasswordBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdatePasswordBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update password bad request response has a 2xx status code
func (o *UpdatePasswordBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update password bad request response has a 3xx status code
func (o *UpdatePasswordBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update password bad request response has a 4xx status code
func (o *UpdatePasswordBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update password bad request response has a 5xx status code
func (o *UpdatePasswordBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update password bad request response a status code equal to that given
func (o *UpdatePasswordBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update password bad request response
func (o *UpdatePasswordBadRequest) Code() int {
	return 400
}

func (o *UpdatePasswordBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordBadRequest %s", 400, payload)
}

func (o *UpdatePasswordBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordBadRequest %s", 400, payload)
}

func (o *UpdatePasswordBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdatePasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePasswordNotFound creates a UpdatePasswordNotFound with default headers values
func NewUpdatePasswordNotFound() *UpdatePasswordNotFound {
	return &UpdatePasswordNotFound{}
}

/*
UpdatePasswordNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdatePasswordNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update password not found response has a 2xx status code
func (o *UpdatePasswordNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update password not found response has a 3xx status code
func (o *UpdatePasswordNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update password not found response has a 4xx status code
func (o *UpdatePasswordNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update password not found response has a 5xx status code
func (o *UpdatePasswordNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update password not found response a status code equal to that given
func (o *UpdatePasswordNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update password not found response
func (o *UpdatePasswordNotFound) Code() int {
	return 404
}

func (o *UpdatePasswordNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordNotFound %s", 404, payload)
}

func (o *UpdatePasswordNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordNotFound %s", 404, payload)
}

func (o *UpdatePasswordNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdatePasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePasswordMethodNotAllowed creates a UpdatePasswordMethodNotAllowed with default headers values
func NewUpdatePasswordMethodNotAllowed() *UpdatePasswordMethodNotAllowed {
	return &UpdatePasswordMethodNotAllowed{}
}

/*
UpdatePasswordMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdatePasswordMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update password method not allowed response has a 2xx status code
func (o *UpdatePasswordMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update password method not allowed response has a 3xx status code
func (o *UpdatePasswordMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update password method not allowed response has a 4xx status code
func (o *UpdatePasswordMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update password method not allowed response has a 5xx status code
func (o *UpdatePasswordMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update password method not allowed response a status code equal to that given
func (o *UpdatePasswordMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update password method not allowed response
func (o *UpdatePasswordMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdatePasswordMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordMethodNotAllowed %s", 405, payload)
}

func (o *UpdatePasswordMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordMethodNotAllowed %s", 405, payload)
}

func (o *UpdatePasswordMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdatePasswordMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePasswordInternalServerError creates a UpdatePasswordInternalServerError with default headers values
func NewUpdatePasswordInternalServerError() *UpdatePasswordInternalServerError {
	return &UpdatePasswordInternalServerError{}
}

/*
UpdatePasswordInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdatePasswordInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update password internal server error response has a 2xx status code
func (o *UpdatePasswordInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update password internal server error response has a 3xx status code
func (o *UpdatePasswordInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update password internal server error response has a 4xx status code
func (o *UpdatePasswordInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update password internal server error response has a 5xx status code
func (o *UpdatePasswordInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update password internal server error response a status code equal to that given
func (o *UpdatePasswordInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update password internal server error response
func (o *UpdatePasswordInternalServerError) Code() int {
	return 500
}

func (o *UpdatePasswordInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordInternalServerError %s", 500, payload)
}

func (o *UpdatePasswordInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordInternalServerError %s", 500, payload)
}

func (o *UpdatePasswordInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdatePasswordInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
