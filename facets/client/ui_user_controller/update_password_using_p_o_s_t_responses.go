// Code generated by go-swagger; DO NOT EDIT.

package ui_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdatePasswordUsingPOSTReader is a Reader for the UpdatePasswordUsingPOST structure.
type UpdatePasswordUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePasswordUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePasswordUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdatePasswordUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdatePasswordUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdatePasswordUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePasswordUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/users/updatePassword] updatePasswordUsingPOST", response, response.Code())
	}
}

// NewUpdatePasswordUsingPOSTOK creates a UpdatePasswordUsingPOSTOK with default headers values
func NewUpdatePasswordUsingPOSTOK() *UpdatePasswordUsingPOSTOK {
	return &UpdatePasswordUsingPOSTOK{}
}

/*
UpdatePasswordUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type UpdatePasswordUsingPOSTOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this update password using p o s t o k response has a 2xx status code
func (o *UpdatePasswordUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update password using p o s t o k response has a 3xx status code
func (o *UpdatePasswordUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update password using p o s t o k response has a 4xx status code
func (o *UpdatePasswordUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update password using p o s t o k response has a 5xx status code
func (o *UpdatePasswordUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update password using p o s t o k response a status code equal to that given
func (o *UpdatePasswordUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update password using p o s t o k response
func (o *UpdatePasswordUsingPOSTOK) Code() int {
	return 200
}

func (o *UpdatePasswordUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordUsingPOSTOK %s", 200, payload)
}

func (o *UpdatePasswordUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordUsingPOSTOK %s", 200, payload)
}

func (o *UpdatePasswordUsingPOSTOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *UpdatePasswordUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePasswordUsingPOSTCreated creates a UpdatePasswordUsingPOSTCreated with default headers values
func NewUpdatePasswordUsingPOSTCreated() *UpdatePasswordUsingPOSTCreated {
	return &UpdatePasswordUsingPOSTCreated{}
}

/*
UpdatePasswordUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdatePasswordUsingPOSTCreated struct {
}

// IsSuccess returns true when this update password using p o s t created response has a 2xx status code
func (o *UpdatePasswordUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update password using p o s t created response has a 3xx status code
func (o *UpdatePasswordUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update password using p o s t created response has a 4xx status code
func (o *UpdatePasswordUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update password using p o s t created response has a 5xx status code
func (o *UpdatePasswordUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update password using p o s t created response a status code equal to that given
func (o *UpdatePasswordUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update password using p o s t created response
func (o *UpdatePasswordUsingPOSTCreated) Code() int {
	return 201
}

func (o *UpdatePasswordUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordUsingPOSTCreated", 201)
}

func (o *UpdatePasswordUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordUsingPOSTCreated", 201)
}

func (o *UpdatePasswordUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePasswordUsingPOSTUnauthorized creates a UpdatePasswordUsingPOSTUnauthorized with default headers values
func NewUpdatePasswordUsingPOSTUnauthorized() *UpdatePasswordUsingPOSTUnauthorized {
	return &UpdatePasswordUsingPOSTUnauthorized{}
}

/*
UpdatePasswordUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdatePasswordUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this update password using p o s t unauthorized response has a 2xx status code
func (o *UpdatePasswordUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update password using p o s t unauthorized response has a 3xx status code
func (o *UpdatePasswordUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update password using p o s t unauthorized response has a 4xx status code
func (o *UpdatePasswordUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update password using p o s t unauthorized response has a 5xx status code
func (o *UpdatePasswordUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update password using p o s t unauthorized response a status code equal to that given
func (o *UpdatePasswordUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update password using p o s t unauthorized response
func (o *UpdatePasswordUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *UpdatePasswordUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordUsingPOSTUnauthorized", 401)
}

func (o *UpdatePasswordUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordUsingPOSTUnauthorized", 401)
}

func (o *UpdatePasswordUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePasswordUsingPOSTForbidden creates a UpdatePasswordUsingPOSTForbidden with default headers values
func NewUpdatePasswordUsingPOSTForbidden() *UpdatePasswordUsingPOSTForbidden {
	return &UpdatePasswordUsingPOSTForbidden{}
}

/*
UpdatePasswordUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdatePasswordUsingPOSTForbidden struct {
}

// IsSuccess returns true when this update password using p o s t forbidden response has a 2xx status code
func (o *UpdatePasswordUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update password using p o s t forbidden response has a 3xx status code
func (o *UpdatePasswordUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update password using p o s t forbidden response has a 4xx status code
func (o *UpdatePasswordUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update password using p o s t forbidden response has a 5xx status code
func (o *UpdatePasswordUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update password using p o s t forbidden response a status code equal to that given
func (o *UpdatePasswordUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update password using p o s t forbidden response
func (o *UpdatePasswordUsingPOSTForbidden) Code() int {
	return 403
}

func (o *UpdatePasswordUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordUsingPOSTForbidden", 403)
}

func (o *UpdatePasswordUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordUsingPOSTForbidden", 403)
}

func (o *UpdatePasswordUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePasswordUsingPOSTNotFound creates a UpdatePasswordUsingPOSTNotFound with default headers values
func NewUpdatePasswordUsingPOSTNotFound() *UpdatePasswordUsingPOSTNotFound {
	return &UpdatePasswordUsingPOSTNotFound{}
}

/*
UpdatePasswordUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdatePasswordUsingPOSTNotFound struct {
}

// IsSuccess returns true when this update password using p o s t not found response has a 2xx status code
func (o *UpdatePasswordUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update password using p o s t not found response has a 3xx status code
func (o *UpdatePasswordUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update password using p o s t not found response has a 4xx status code
func (o *UpdatePasswordUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update password using p o s t not found response has a 5xx status code
func (o *UpdatePasswordUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update password using p o s t not found response a status code equal to that given
func (o *UpdatePasswordUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update password using p o s t not found response
func (o *UpdatePasswordUsingPOSTNotFound) Code() int {
	return 404
}

func (o *UpdatePasswordUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordUsingPOSTNotFound", 404)
}

func (o *UpdatePasswordUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/users/updatePassword][%d] updatePasswordUsingPOSTNotFound", 404)
}

func (o *UpdatePasswordUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
