// Code generated by go-swagger; DO NOT EDIT.

package ui_iac_repo_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteIacRepoUsingDELETEReader is a Reader for the DeleteIacRepoUsingDELETE structure.
type DeleteIacRepoUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteIacRepoUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteIacRepoUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteIacRepoUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteIacRepoUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteIacRepoUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/iac/repo/{id}] deleteIacRepoUsingDELETE", response, response.Code())
	}
}

// NewDeleteIacRepoUsingDELETEOK creates a DeleteIacRepoUsingDELETEOK with default headers values
func NewDeleteIacRepoUsingDELETEOK() *DeleteIacRepoUsingDELETEOK {
	return &DeleteIacRepoUsingDELETEOK{}
}

/*
DeleteIacRepoUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteIacRepoUsingDELETEOK struct {
}

// IsSuccess returns true when this delete iac repo using d e l e t e o k response has a 2xx status code
func (o *DeleteIacRepoUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete iac repo using d e l e t e o k response has a 3xx status code
func (o *DeleteIacRepoUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete iac repo using d e l e t e o k response has a 4xx status code
func (o *DeleteIacRepoUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete iac repo using d e l e t e o k response has a 5xx status code
func (o *DeleteIacRepoUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete iac repo using d e l e t e o k response a status code equal to that given
func (o *DeleteIacRepoUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete iac repo using d e l e t e o k response
func (o *DeleteIacRepoUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteIacRepoUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/iac/repo/{id}][%d] deleteIacRepoUsingDELETEOK", 200)
}

func (o *DeleteIacRepoUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/iac/repo/{id}][%d] deleteIacRepoUsingDELETEOK", 200)
}

func (o *DeleteIacRepoUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteIacRepoUsingDELETENoContent creates a DeleteIacRepoUsingDELETENoContent with default headers values
func NewDeleteIacRepoUsingDELETENoContent() *DeleteIacRepoUsingDELETENoContent {
	return &DeleteIacRepoUsingDELETENoContent{}
}

/*
DeleteIacRepoUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteIacRepoUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete iac repo using d e l e t e no content response has a 2xx status code
func (o *DeleteIacRepoUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete iac repo using d e l e t e no content response has a 3xx status code
func (o *DeleteIacRepoUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete iac repo using d e l e t e no content response has a 4xx status code
func (o *DeleteIacRepoUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete iac repo using d e l e t e no content response has a 5xx status code
func (o *DeleteIacRepoUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete iac repo using d e l e t e no content response a status code equal to that given
func (o *DeleteIacRepoUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete iac repo using d e l e t e no content response
func (o *DeleteIacRepoUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteIacRepoUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/iac/repo/{id}][%d] deleteIacRepoUsingDELETENoContent", 204)
}

func (o *DeleteIacRepoUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/iac/repo/{id}][%d] deleteIacRepoUsingDELETENoContent", 204)
}

func (o *DeleteIacRepoUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteIacRepoUsingDELETEUnauthorized creates a DeleteIacRepoUsingDELETEUnauthorized with default headers values
func NewDeleteIacRepoUsingDELETEUnauthorized() *DeleteIacRepoUsingDELETEUnauthorized {
	return &DeleteIacRepoUsingDELETEUnauthorized{}
}

/*
DeleteIacRepoUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteIacRepoUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete iac repo using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteIacRepoUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete iac repo using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteIacRepoUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete iac repo using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteIacRepoUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete iac repo using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteIacRepoUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete iac repo using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteIacRepoUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete iac repo using d e l e t e unauthorized response
func (o *DeleteIacRepoUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteIacRepoUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/iac/repo/{id}][%d] deleteIacRepoUsingDELETEUnauthorized", 401)
}

func (o *DeleteIacRepoUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/iac/repo/{id}][%d] deleteIacRepoUsingDELETEUnauthorized", 401)
}

func (o *DeleteIacRepoUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteIacRepoUsingDELETEForbidden creates a DeleteIacRepoUsingDELETEForbidden with default headers values
func NewDeleteIacRepoUsingDELETEForbidden() *DeleteIacRepoUsingDELETEForbidden {
	return &DeleteIacRepoUsingDELETEForbidden{}
}

/*
DeleteIacRepoUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteIacRepoUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete iac repo using d e l e t e forbidden response has a 2xx status code
func (o *DeleteIacRepoUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete iac repo using d e l e t e forbidden response has a 3xx status code
func (o *DeleteIacRepoUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete iac repo using d e l e t e forbidden response has a 4xx status code
func (o *DeleteIacRepoUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete iac repo using d e l e t e forbidden response has a 5xx status code
func (o *DeleteIacRepoUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete iac repo using d e l e t e forbidden response a status code equal to that given
func (o *DeleteIacRepoUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete iac repo using d e l e t e forbidden response
func (o *DeleteIacRepoUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteIacRepoUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/iac/repo/{id}][%d] deleteIacRepoUsingDELETEForbidden", 403)
}

func (o *DeleteIacRepoUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/iac/repo/{id}][%d] deleteIacRepoUsingDELETEForbidden", 403)
}

func (o *DeleteIacRepoUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
