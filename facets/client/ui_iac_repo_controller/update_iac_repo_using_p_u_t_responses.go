// Code generated by go-swagger; DO NOT EDIT.

package ui_iac_repo_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateIacRepoUsingPUTReader is a Reader for the UpdateIacRepoUsingPUT structure.
type UpdateIacRepoUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateIacRepoUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateIacRepoUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateIacRepoUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateIacRepoUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateIacRepoUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateIacRepoUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/iac/repo/{id}] updateIacRepoUsingPUT", response, response.Code())
	}
}

// NewUpdateIacRepoUsingPUTOK creates a UpdateIacRepoUsingPUTOK with default headers values
func NewUpdateIacRepoUsingPUTOK() *UpdateIacRepoUsingPUTOK {
	return &UpdateIacRepoUsingPUTOK{}
}

/*
UpdateIacRepoUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateIacRepoUsingPUTOK struct {
	Payload *models.IacRepo
}

// IsSuccess returns true when this update iac repo using p u t o k response has a 2xx status code
func (o *UpdateIacRepoUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update iac repo using p u t o k response has a 3xx status code
func (o *UpdateIacRepoUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update iac repo using p u t o k response has a 4xx status code
func (o *UpdateIacRepoUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update iac repo using p u t o k response has a 5xx status code
func (o *UpdateIacRepoUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update iac repo using p u t o k response a status code equal to that given
func (o *UpdateIacRepoUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update iac repo using p u t o k response
func (o *UpdateIacRepoUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateIacRepoUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/iac/repo/{id}][%d] updateIacRepoUsingPUTOK %s", 200, payload)
}

func (o *UpdateIacRepoUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/iac/repo/{id}][%d] updateIacRepoUsingPUTOK %s", 200, payload)
}

func (o *UpdateIacRepoUsingPUTOK) GetPayload() *models.IacRepo {
	return o.Payload
}

func (o *UpdateIacRepoUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IacRepo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIacRepoUsingPUTCreated creates a UpdateIacRepoUsingPUTCreated with default headers values
func NewUpdateIacRepoUsingPUTCreated() *UpdateIacRepoUsingPUTCreated {
	return &UpdateIacRepoUsingPUTCreated{}
}

/*
UpdateIacRepoUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateIacRepoUsingPUTCreated struct {
}

// IsSuccess returns true when this update iac repo using p u t created response has a 2xx status code
func (o *UpdateIacRepoUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update iac repo using p u t created response has a 3xx status code
func (o *UpdateIacRepoUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update iac repo using p u t created response has a 4xx status code
func (o *UpdateIacRepoUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update iac repo using p u t created response has a 5xx status code
func (o *UpdateIacRepoUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update iac repo using p u t created response a status code equal to that given
func (o *UpdateIacRepoUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update iac repo using p u t created response
func (o *UpdateIacRepoUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateIacRepoUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/iac/repo/{id}][%d] updateIacRepoUsingPUTCreated", 201)
}

func (o *UpdateIacRepoUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/iac/repo/{id}][%d] updateIacRepoUsingPUTCreated", 201)
}

func (o *UpdateIacRepoUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateIacRepoUsingPUTUnauthorized creates a UpdateIacRepoUsingPUTUnauthorized with default headers values
func NewUpdateIacRepoUsingPUTUnauthorized() *UpdateIacRepoUsingPUTUnauthorized {
	return &UpdateIacRepoUsingPUTUnauthorized{}
}

/*
UpdateIacRepoUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateIacRepoUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update iac repo using p u t unauthorized response has a 2xx status code
func (o *UpdateIacRepoUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update iac repo using p u t unauthorized response has a 3xx status code
func (o *UpdateIacRepoUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update iac repo using p u t unauthorized response has a 4xx status code
func (o *UpdateIacRepoUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update iac repo using p u t unauthorized response has a 5xx status code
func (o *UpdateIacRepoUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update iac repo using p u t unauthorized response a status code equal to that given
func (o *UpdateIacRepoUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update iac repo using p u t unauthorized response
func (o *UpdateIacRepoUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateIacRepoUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/iac/repo/{id}][%d] updateIacRepoUsingPUTUnauthorized", 401)
}

func (o *UpdateIacRepoUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/iac/repo/{id}][%d] updateIacRepoUsingPUTUnauthorized", 401)
}

func (o *UpdateIacRepoUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateIacRepoUsingPUTForbidden creates a UpdateIacRepoUsingPUTForbidden with default headers values
func NewUpdateIacRepoUsingPUTForbidden() *UpdateIacRepoUsingPUTForbidden {
	return &UpdateIacRepoUsingPUTForbidden{}
}

/*
UpdateIacRepoUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateIacRepoUsingPUTForbidden struct {
}

// IsSuccess returns true when this update iac repo using p u t forbidden response has a 2xx status code
func (o *UpdateIacRepoUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update iac repo using p u t forbidden response has a 3xx status code
func (o *UpdateIacRepoUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update iac repo using p u t forbidden response has a 4xx status code
func (o *UpdateIacRepoUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update iac repo using p u t forbidden response has a 5xx status code
func (o *UpdateIacRepoUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update iac repo using p u t forbidden response a status code equal to that given
func (o *UpdateIacRepoUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update iac repo using p u t forbidden response
func (o *UpdateIacRepoUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateIacRepoUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/iac/repo/{id}][%d] updateIacRepoUsingPUTForbidden", 403)
}

func (o *UpdateIacRepoUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/iac/repo/{id}][%d] updateIacRepoUsingPUTForbidden", 403)
}

func (o *UpdateIacRepoUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateIacRepoUsingPUTNotFound creates a UpdateIacRepoUsingPUTNotFound with default headers values
func NewUpdateIacRepoUsingPUTNotFound() *UpdateIacRepoUsingPUTNotFound {
	return &UpdateIacRepoUsingPUTNotFound{}
}

/*
UpdateIacRepoUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateIacRepoUsingPUTNotFound struct {
}

// IsSuccess returns true when this update iac repo using p u t not found response has a 2xx status code
func (o *UpdateIacRepoUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update iac repo using p u t not found response has a 3xx status code
func (o *UpdateIacRepoUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update iac repo using p u t not found response has a 4xx status code
func (o *UpdateIacRepoUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update iac repo using p u t not found response has a 5xx status code
func (o *UpdateIacRepoUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update iac repo using p u t not found response a status code equal to that given
func (o *UpdateIacRepoUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update iac repo using p u t not found response
func (o *UpdateIacRepoUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateIacRepoUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/iac/repo/{id}][%d] updateIacRepoUsingPUTNotFound", 404)
}

func (o *UpdateIacRepoUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/iac/repo/{id}][%d] updateIacRepoUsingPUTNotFound", 404)
}

func (o *UpdateIacRepoUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
