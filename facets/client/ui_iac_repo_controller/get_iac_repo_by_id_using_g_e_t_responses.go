// Code generated by go-swagger; DO NOT EDIT.

package ui_iac_repo_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetIacRepoByIDUsingGETReader is a Reader for the GetIacRepoByIDUsingGET structure.
type GetIacRepoByIDUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIacRepoByIDUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIacRepoByIDUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetIacRepoByIDUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetIacRepoByIDUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetIacRepoByIDUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/iac/repo/{id}] getIacRepoByIdUsingGET", response, response.Code())
	}
}

// NewGetIacRepoByIDUsingGETOK creates a GetIacRepoByIDUsingGETOK with default headers values
func NewGetIacRepoByIDUsingGETOK() *GetIacRepoByIDUsingGETOK {
	return &GetIacRepoByIDUsingGETOK{}
}

/*
GetIacRepoByIDUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetIacRepoByIDUsingGETOK struct {
	Payload *models.IacRepo
}

// IsSuccess returns true when this get iac repo by Id using g e t o k response has a 2xx status code
func (o *GetIacRepoByIDUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get iac repo by Id using g e t o k response has a 3xx status code
func (o *GetIacRepoByIDUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get iac repo by Id using g e t o k response has a 4xx status code
func (o *GetIacRepoByIDUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get iac repo by Id using g e t o k response has a 5xx status code
func (o *GetIacRepoByIDUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get iac repo by Id using g e t o k response a status code equal to that given
func (o *GetIacRepoByIDUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get iac repo by Id using g e t o k response
func (o *GetIacRepoByIDUsingGETOK) Code() int {
	return 200
}

func (o *GetIacRepoByIDUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/iac/repo/{id}][%d] getIacRepoByIdUsingGETOK %s", 200, payload)
}

func (o *GetIacRepoByIDUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/iac/repo/{id}][%d] getIacRepoByIdUsingGETOK %s", 200, payload)
}

func (o *GetIacRepoByIDUsingGETOK) GetPayload() *models.IacRepo {
	return o.Payload
}

func (o *GetIacRepoByIDUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IacRepo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIacRepoByIDUsingGETUnauthorized creates a GetIacRepoByIDUsingGETUnauthorized with default headers values
func NewGetIacRepoByIDUsingGETUnauthorized() *GetIacRepoByIDUsingGETUnauthorized {
	return &GetIacRepoByIDUsingGETUnauthorized{}
}

/*
GetIacRepoByIDUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetIacRepoByIDUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get iac repo by Id using g e t unauthorized response has a 2xx status code
func (o *GetIacRepoByIDUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get iac repo by Id using g e t unauthorized response has a 3xx status code
func (o *GetIacRepoByIDUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get iac repo by Id using g e t unauthorized response has a 4xx status code
func (o *GetIacRepoByIDUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get iac repo by Id using g e t unauthorized response has a 5xx status code
func (o *GetIacRepoByIDUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get iac repo by Id using g e t unauthorized response a status code equal to that given
func (o *GetIacRepoByIDUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get iac repo by Id using g e t unauthorized response
func (o *GetIacRepoByIDUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetIacRepoByIDUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/iac/repo/{id}][%d] getIacRepoByIdUsingGETUnauthorized", 401)
}

func (o *GetIacRepoByIDUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/iac/repo/{id}][%d] getIacRepoByIdUsingGETUnauthorized", 401)
}

func (o *GetIacRepoByIDUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIacRepoByIDUsingGETForbidden creates a GetIacRepoByIDUsingGETForbidden with default headers values
func NewGetIacRepoByIDUsingGETForbidden() *GetIacRepoByIDUsingGETForbidden {
	return &GetIacRepoByIDUsingGETForbidden{}
}

/*
GetIacRepoByIDUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetIacRepoByIDUsingGETForbidden struct {
}

// IsSuccess returns true when this get iac repo by Id using g e t forbidden response has a 2xx status code
func (o *GetIacRepoByIDUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get iac repo by Id using g e t forbidden response has a 3xx status code
func (o *GetIacRepoByIDUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get iac repo by Id using g e t forbidden response has a 4xx status code
func (o *GetIacRepoByIDUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get iac repo by Id using g e t forbidden response has a 5xx status code
func (o *GetIacRepoByIDUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get iac repo by Id using g e t forbidden response a status code equal to that given
func (o *GetIacRepoByIDUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get iac repo by Id using g e t forbidden response
func (o *GetIacRepoByIDUsingGETForbidden) Code() int {
	return 403
}

func (o *GetIacRepoByIDUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/iac/repo/{id}][%d] getIacRepoByIdUsingGETForbidden", 403)
}

func (o *GetIacRepoByIDUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/iac/repo/{id}][%d] getIacRepoByIdUsingGETForbidden", 403)
}

func (o *GetIacRepoByIDUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIacRepoByIDUsingGETNotFound creates a GetIacRepoByIDUsingGETNotFound with default headers values
func NewGetIacRepoByIDUsingGETNotFound() *GetIacRepoByIDUsingGETNotFound {
	return &GetIacRepoByIDUsingGETNotFound{}
}

/*
GetIacRepoByIDUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetIacRepoByIDUsingGETNotFound struct {
}

// IsSuccess returns true when this get iac repo by Id using g e t not found response has a 2xx status code
func (o *GetIacRepoByIDUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get iac repo by Id using g e t not found response has a 3xx status code
func (o *GetIacRepoByIDUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get iac repo by Id using g e t not found response has a 4xx status code
func (o *GetIacRepoByIDUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get iac repo by Id using g e t not found response has a 5xx status code
func (o *GetIacRepoByIDUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get iac repo by Id using g e t not found response a status code equal to that given
func (o *GetIacRepoByIDUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get iac repo by Id using g e t not found response
func (o *GetIacRepoByIDUsingGETNotFound) Code() int {
	return 404
}

func (o *GetIacRepoByIDUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/iac/repo/{id}][%d] getIacRepoByIdUsingGETNotFound", 404)
}

func (o *GetIacRepoByIDUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/iac/repo/{id}][%d] getIacRepoByIdUsingGETNotFound", 404)
}

func (o *GetIacRepoByIDUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
