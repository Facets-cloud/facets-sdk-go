// Code generated by go-swagger; DO NOT EDIT.

package ui_iac_repo_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllIacReposUsingGETReader is a Reader for the GetAllIacReposUsingGET structure.
type GetAllIacReposUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllIacReposUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllIacReposUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllIacReposUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllIacReposUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllIacReposUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/iac/repo] getAllIacReposUsingGET", response, response.Code())
	}
}

// NewGetAllIacReposUsingGETOK creates a GetAllIacReposUsingGETOK with default headers values
func NewGetAllIacReposUsingGETOK() *GetAllIacReposUsingGETOK {
	return &GetAllIacReposUsingGETOK{}
}

/*
GetAllIacReposUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllIacReposUsingGETOK struct {
	Payload []*models.IacRepo
}

// IsSuccess returns true when this get all iac repos using g e t o k response has a 2xx status code
func (o *GetAllIacReposUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all iac repos using g e t o k response has a 3xx status code
func (o *GetAllIacReposUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all iac repos using g e t o k response has a 4xx status code
func (o *GetAllIacReposUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all iac repos using g e t o k response has a 5xx status code
func (o *GetAllIacReposUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all iac repos using g e t o k response a status code equal to that given
func (o *GetAllIacReposUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all iac repos using g e t o k response
func (o *GetAllIacReposUsingGETOK) Code() int {
	return 200
}

func (o *GetAllIacReposUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/iac/repo][%d] getAllIacReposUsingGETOK %s", 200, payload)
}

func (o *GetAllIacReposUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/iac/repo][%d] getAllIacReposUsingGETOK %s", 200, payload)
}

func (o *GetAllIacReposUsingGETOK) GetPayload() []*models.IacRepo {
	return o.Payload
}

func (o *GetAllIacReposUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllIacReposUsingGETUnauthorized creates a GetAllIacReposUsingGETUnauthorized with default headers values
func NewGetAllIacReposUsingGETUnauthorized() *GetAllIacReposUsingGETUnauthorized {
	return &GetAllIacReposUsingGETUnauthorized{}
}

/*
GetAllIacReposUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllIacReposUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all iac repos using g e t unauthorized response has a 2xx status code
func (o *GetAllIacReposUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all iac repos using g e t unauthorized response has a 3xx status code
func (o *GetAllIacReposUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all iac repos using g e t unauthorized response has a 4xx status code
func (o *GetAllIacReposUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all iac repos using g e t unauthorized response has a 5xx status code
func (o *GetAllIacReposUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all iac repos using g e t unauthorized response a status code equal to that given
func (o *GetAllIacReposUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all iac repos using g e t unauthorized response
func (o *GetAllIacReposUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllIacReposUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/iac/repo][%d] getAllIacReposUsingGETUnauthorized", 401)
}

func (o *GetAllIacReposUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/iac/repo][%d] getAllIacReposUsingGETUnauthorized", 401)
}

func (o *GetAllIacReposUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllIacReposUsingGETForbidden creates a GetAllIacReposUsingGETForbidden with default headers values
func NewGetAllIacReposUsingGETForbidden() *GetAllIacReposUsingGETForbidden {
	return &GetAllIacReposUsingGETForbidden{}
}

/*
GetAllIacReposUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllIacReposUsingGETForbidden struct {
}

// IsSuccess returns true when this get all iac repos using g e t forbidden response has a 2xx status code
func (o *GetAllIacReposUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all iac repos using g e t forbidden response has a 3xx status code
func (o *GetAllIacReposUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all iac repos using g e t forbidden response has a 4xx status code
func (o *GetAllIacReposUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all iac repos using g e t forbidden response has a 5xx status code
func (o *GetAllIacReposUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all iac repos using g e t forbidden response a status code equal to that given
func (o *GetAllIacReposUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all iac repos using g e t forbidden response
func (o *GetAllIacReposUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllIacReposUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/iac/repo][%d] getAllIacReposUsingGETForbidden", 403)
}

func (o *GetAllIacReposUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/iac/repo][%d] getAllIacReposUsingGETForbidden", 403)
}

func (o *GetAllIacReposUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllIacReposUsingGETNotFound creates a GetAllIacReposUsingGETNotFound with default headers values
func NewGetAllIacReposUsingGETNotFound() *GetAllIacReposUsingGETNotFound {
	return &GetAllIacReposUsingGETNotFound{}
}

/*
GetAllIacReposUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllIacReposUsingGETNotFound struct {
}

// IsSuccess returns true when this get all iac repos using g e t not found response has a 2xx status code
func (o *GetAllIacReposUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all iac repos using g e t not found response has a 3xx status code
func (o *GetAllIacReposUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all iac repos using g e t not found response has a 4xx status code
func (o *GetAllIacReposUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all iac repos using g e t not found response has a 5xx status code
func (o *GetAllIacReposUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all iac repos using g e t not found response a status code equal to that given
func (o *GetAllIacReposUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all iac repos using g e t not found response
func (o *GetAllIacReposUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllIacReposUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/iac/repo][%d] getAllIacReposUsingGETNotFound", 404)
}

func (o *GetAllIacReposUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/iac/repo][%d] getAllIacReposUsingGETNotFound", 404)
}

func (o *GetAllIacReposUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
