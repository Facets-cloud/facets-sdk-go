// Code generated by go-swagger; DO NOT EDIT.

package ui_application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RunValidationUsingPOSTReader is a Reader for the RunValidationUsingPOST structure.
type RunValidationUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunValidationUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunValidationUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewRunValidationUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRunValidationUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRunValidationUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRunValidationUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/validate] runValidationUsingPOST", response, response.Code())
	}
}

// NewRunValidationUsingPOSTOK creates a RunValidationUsingPOSTOK with default headers values
func NewRunValidationUsingPOSTOK() *RunValidationUsingPOSTOK {
	return &RunValidationUsingPOSTOK{}
}

/*
RunValidationUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type RunValidationUsingPOSTOK struct {
}

// IsSuccess returns true when this run validation using p o s t o k response has a 2xx status code
func (o *RunValidationUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this run validation using p o s t o k response has a 3xx status code
func (o *RunValidationUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run validation using p o s t o k response has a 4xx status code
func (o *RunValidationUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this run validation using p o s t o k response has a 5xx status code
func (o *RunValidationUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this run validation using p o s t o k response a status code equal to that given
func (o *RunValidationUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the run validation using p o s t o k response
func (o *RunValidationUsingPOSTOK) Code() int {
	return 200
}

func (o *RunValidationUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationUsingPOSTOK", 200)
}

func (o *RunValidationUsingPOSTOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationUsingPOSTOK", 200)
}

func (o *RunValidationUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunValidationUsingPOSTCreated creates a RunValidationUsingPOSTCreated with default headers values
func NewRunValidationUsingPOSTCreated() *RunValidationUsingPOSTCreated {
	return &RunValidationUsingPOSTCreated{}
}

/*
RunValidationUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type RunValidationUsingPOSTCreated struct {
}

// IsSuccess returns true when this run validation using p o s t created response has a 2xx status code
func (o *RunValidationUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this run validation using p o s t created response has a 3xx status code
func (o *RunValidationUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run validation using p o s t created response has a 4xx status code
func (o *RunValidationUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this run validation using p o s t created response has a 5xx status code
func (o *RunValidationUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this run validation using p o s t created response a status code equal to that given
func (o *RunValidationUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the run validation using p o s t created response
func (o *RunValidationUsingPOSTCreated) Code() int {
	return 201
}

func (o *RunValidationUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationUsingPOSTCreated", 201)
}

func (o *RunValidationUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationUsingPOSTCreated", 201)
}

func (o *RunValidationUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunValidationUsingPOSTUnauthorized creates a RunValidationUsingPOSTUnauthorized with default headers values
func NewRunValidationUsingPOSTUnauthorized() *RunValidationUsingPOSTUnauthorized {
	return &RunValidationUsingPOSTUnauthorized{}
}

/*
RunValidationUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RunValidationUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this run validation using p o s t unauthorized response has a 2xx status code
func (o *RunValidationUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run validation using p o s t unauthorized response has a 3xx status code
func (o *RunValidationUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run validation using p o s t unauthorized response has a 4xx status code
func (o *RunValidationUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this run validation using p o s t unauthorized response has a 5xx status code
func (o *RunValidationUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this run validation using p o s t unauthorized response a status code equal to that given
func (o *RunValidationUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the run validation using p o s t unauthorized response
func (o *RunValidationUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *RunValidationUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationUsingPOSTUnauthorized", 401)
}

func (o *RunValidationUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationUsingPOSTUnauthorized", 401)
}

func (o *RunValidationUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunValidationUsingPOSTForbidden creates a RunValidationUsingPOSTForbidden with default headers values
func NewRunValidationUsingPOSTForbidden() *RunValidationUsingPOSTForbidden {
	return &RunValidationUsingPOSTForbidden{}
}

/*
RunValidationUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RunValidationUsingPOSTForbidden struct {
}

// IsSuccess returns true when this run validation using p o s t forbidden response has a 2xx status code
func (o *RunValidationUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run validation using p o s t forbidden response has a 3xx status code
func (o *RunValidationUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run validation using p o s t forbidden response has a 4xx status code
func (o *RunValidationUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this run validation using p o s t forbidden response has a 5xx status code
func (o *RunValidationUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this run validation using p o s t forbidden response a status code equal to that given
func (o *RunValidationUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the run validation using p o s t forbidden response
func (o *RunValidationUsingPOSTForbidden) Code() int {
	return 403
}

func (o *RunValidationUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationUsingPOSTForbidden", 403)
}

func (o *RunValidationUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationUsingPOSTForbidden", 403)
}

func (o *RunValidationUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunValidationUsingPOSTNotFound creates a RunValidationUsingPOSTNotFound with default headers values
func NewRunValidationUsingPOSTNotFound() *RunValidationUsingPOSTNotFound {
	return &RunValidationUsingPOSTNotFound{}
}

/*
RunValidationUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RunValidationUsingPOSTNotFound struct {
}

// IsSuccess returns true when this run validation using p o s t not found response has a 2xx status code
func (o *RunValidationUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run validation using p o s t not found response has a 3xx status code
func (o *RunValidationUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run validation using p o s t not found response has a 4xx status code
func (o *RunValidationUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this run validation using p o s t not found response has a 5xx status code
func (o *RunValidationUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this run validation using p o s t not found response a status code equal to that given
func (o *RunValidationUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the run validation using p o s t not found response
func (o *RunValidationUsingPOSTNotFound) Code() int {
	return 404
}

func (o *RunValidationUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationUsingPOSTNotFound", 404)
}

func (o *RunValidationUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationUsingPOSTNotFound", 404)
}

func (o *RunValidationUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
