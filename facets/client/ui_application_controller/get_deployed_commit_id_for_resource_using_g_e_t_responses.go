// Code generated by go-swagger; DO NOT EDIT.

package ui_application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetDeployedCommitIDForResourceUsingGETReader is a Reader for the GetDeployedCommitIDForResourceUsingGET structure.
type GetDeployedCommitIDForResourceUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeployedCommitIDForResourceUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeployedCommitIDForResourceUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDeployedCommitIDForResourceUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDeployedCommitIDForResourceUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDeployedCommitIDForResourceUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id] getDeployedCommitIdForResourceUsingGET", response, response.Code())
	}
}

// NewGetDeployedCommitIDForResourceUsingGETOK creates a GetDeployedCommitIDForResourceUsingGETOK with default headers values
func NewGetDeployedCommitIDForResourceUsingGETOK() *GetDeployedCommitIDForResourceUsingGETOK {
	return &GetDeployedCommitIDForResourceUsingGETOK{}
}

/*
GetDeployedCommitIDForResourceUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetDeployedCommitIDForResourceUsingGETOK struct {
	Payload string
}

// IsSuccess returns true when this get deployed commit Id for resource using g e t o k response has a 2xx status code
func (o *GetDeployedCommitIDForResourceUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get deployed commit Id for resource using g e t o k response has a 3xx status code
func (o *GetDeployedCommitIDForResourceUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployed commit Id for resource using g e t o k response has a 4xx status code
func (o *GetDeployedCommitIDForResourceUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get deployed commit Id for resource using g e t o k response has a 5xx status code
func (o *GetDeployedCommitIDForResourceUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get deployed commit Id for resource using g e t o k response a status code equal to that given
func (o *GetDeployedCommitIDForResourceUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get deployed commit Id for resource using g e t o k response
func (o *GetDeployedCommitIDForResourceUsingGETOK) Code() int {
	return 200
}

func (o *GetDeployedCommitIDForResourceUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceUsingGETOK %s", 200, payload)
}

func (o *GetDeployedCommitIDForResourceUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceUsingGETOK %s", 200, payload)
}

func (o *GetDeployedCommitIDForResourceUsingGETOK) GetPayload() string {
	return o.Payload
}

func (o *GetDeployedCommitIDForResourceUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeployedCommitIDForResourceUsingGETUnauthorized creates a GetDeployedCommitIDForResourceUsingGETUnauthorized with default headers values
func NewGetDeployedCommitIDForResourceUsingGETUnauthorized() *GetDeployedCommitIDForResourceUsingGETUnauthorized {
	return &GetDeployedCommitIDForResourceUsingGETUnauthorized{}
}

/*
GetDeployedCommitIDForResourceUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetDeployedCommitIDForResourceUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get deployed commit Id for resource using g e t unauthorized response has a 2xx status code
func (o *GetDeployedCommitIDForResourceUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get deployed commit Id for resource using g e t unauthorized response has a 3xx status code
func (o *GetDeployedCommitIDForResourceUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployed commit Id for resource using g e t unauthorized response has a 4xx status code
func (o *GetDeployedCommitIDForResourceUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get deployed commit Id for resource using g e t unauthorized response has a 5xx status code
func (o *GetDeployedCommitIDForResourceUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get deployed commit Id for resource using g e t unauthorized response a status code equal to that given
func (o *GetDeployedCommitIDForResourceUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get deployed commit Id for resource using g e t unauthorized response
func (o *GetDeployedCommitIDForResourceUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetDeployedCommitIDForResourceUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceUsingGETUnauthorized", 401)
}

func (o *GetDeployedCommitIDForResourceUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceUsingGETUnauthorized", 401)
}

func (o *GetDeployedCommitIDForResourceUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeployedCommitIDForResourceUsingGETForbidden creates a GetDeployedCommitIDForResourceUsingGETForbidden with default headers values
func NewGetDeployedCommitIDForResourceUsingGETForbidden() *GetDeployedCommitIDForResourceUsingGETForbidden {
	return &GetDeployedCommitIDForResourceUsingGETForbidden{}
}

/*
GetDeployedCommitIDForResourceUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetDeployedCommitIDForResourceUsingGETForbidden struct {
}

// IsSuccess returns true when this get deployed commit Id for resource using g e t forbidden response has a 2xx status code
func (o *GetDeployedCommitIDForResourceUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get deployed commit Id for resource using g e t forbidden response has a 3xx status code
func (o *GetDeployedCommitIDForResourceUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployed commit Id for resource using g e t forbidden response has a 4xx status code
func (o *GetDeployedCommitIDForResourceUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get deployed commit Id for resource using g e t forbidden response has a 5xx status code
func (o *GetDeployedCommitIDForResourceUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get deployed commit Id for resource using g e t forbidden response a status code equal to that given
func (o *GetDeployedCommitIDForResourceUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get deployed commit Id for resource using g e t forbidden response
func (o *GetDeployedCommitIDForResourceUsingGETForbidden) Code() int {
	return 403
}

func (o *GetDeployedCommitIDForResourceUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceUsingGETForbidden", 403)
}

func (o *GetDeployedCommitIDForResourceUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceUsingGETForbidden", 403)
}

func (o *GetDeployedCommitIDForResourceUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeployedCommitIDForResourceUsingGETNotFound creates a GetDeployedCommitIDForResourceUsingGETNotFound with default headers values
func NewGetDeployedCommitIDForResourceUsingGETNotFound() *GetDeployedCommitIDForResourceUsingGETNotFound {
	return &GetDeployedCommitIDForResourceUsingGETNotFound{}
}

/*
GetDeployedCommitIDForResourceUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetDeployedCommitIDForResourceUsingGETNotFound struct {
}

// IsSuccess returns true when this get deployed commit Id for resource using g e t not found response has a 2xx status code
func (o *GetDeployedCommitIDForResourceUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get deployed commit Id for resource using g e t not found response has a 3xx status code
func (o *GetDeployedCommitIDForResourceUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployed commit Id for resource using g e t not found response has a 4xx status code
func (o *GetDeployedCommitIDForResourceUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get deployed commit Id for resource using g e t not found response has a 5xx status code
func (o *GetDeployedCommitIDForResourceUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get deployed commit Id for resource using g e t not found response a status code equal to that given
func (o *GetDeployedCommitIDForResourceUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get deployed commit Id for resource using g e t not found response
func (o *GetDeployedCommitIDForResourceUsingGETNotFound) Code() int {
	return 404
}

func (o *GetDeployedCommitIDForResourceUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceUsingGETNotFound", 404)
}

func (o *GetDeployedCommitIDForResourceUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceUsingGETNotFound", 404)
}

func (o *GetDeployedCommitIDForResourceUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
