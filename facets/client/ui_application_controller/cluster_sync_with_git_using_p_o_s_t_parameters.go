// Code generated by go-swagger; DO NOT EDIT.

package ui_application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewClusterSyncWithGitUsingPOSTParams creates a new ClusterSyncWithGitUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewClusterSyncWithGitUsingPOSTParams() *ClusterSyncWithGitUsingPOSTParams {
	return &ClusterSyncWithGitUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewClusterSyncWithGitUsingPOSTParamsWithTimeout creates a new ClusterSyncWithGitUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewClusterSyncWithGitUsingPOSTParamsWithTimeout(timeout time.Duration) *ClusterSyncWithGitUsingPOSTParams {
	return &ClusterSyncWithGitUsingPOSTParams{
		timeout: timeout,
	}
}

// NewClusterSyncWithGitUsingPOSTParamsWithContext creates a new ClusterSyncWithGitUsingPOSTParams object
// with the ability to set a context for a request.
func NewClusterSyncWithGitUsingPOSTParamsWithContext(ctx context.Context) *ClusterSyncWithGitUsingPOSTParams {
	return &ClusterSyncWithGitUsingPOSTParams{
		Context: ctx,
	}
}

// NewClusterSyncWithGitUsingPOSTParamsWithHTTPClient creates a new ClusterSyncWithGitUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewClusterSyncWithGitUsingPOSTParamsWithHTTPClient(client *http.Client) *ClusterSyncWithGitUsingPOSTParams {
	return &ClusterSyncWithGitUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
ClusterSyncWithGitUsingPOSTParams contains all the parameters to send to the API endpoint

	for the cluster sync with git using p o s t operation.

	Typically these are written to a http.Request.
*/
type ClusterSyncWithGitUsingPOSTParams struct {

	/* ClusterID.

	   clusterId
	*/
	ClusterID string

	/* Force.

	   force
	*/
	Force *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cluster sync with git using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ClusterSyncWithGitUsingPOSTParams) WithDefaults() *ClusterSyncWithGitUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cluster sync with git using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ClusterSyncWithGitUsingPOSTParams) SetDefaults() {
	var (
		forceDefault = bool(false)
	)

	val := ClusterSyncWithGitUsingPOSTParams{
		Force: &forceDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the cluster sync with git using p o s t params
func (o *ClusterSyncWithGitUsingPOSTParams) WithTimeout(timeout time.Duration) *ClusterSyncWithGitUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cluster sync with git using p o s t params
func (o *ClusterSyncWithGitUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cluster sync with git using p o s t params
func (o *ClusterSyncWithGitUsingPOSTParams) WithContext(ctx context.Context) *ClusterSyncWithGitUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cluster sync with git using p o s t params
func (o *ClusterSyncWithGitUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cluster sync with git using p o s t params
func (o *ClusterSyncWithGitUsingPOSTParams) WithHTTPClient(client *http.Client) *ClusterSyncWithGitUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cluster sync with git using p o s t params
func (o *ClusterSyncWithGitUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the cluster sync with git using p o s t params
func (o *ClusterSyncWithGitUsingPOSTParams) WithClusterID(clusterID string) *ClusterSyncWithGitUsingPOSTParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the cluster sync with git using p o s t params
func (o *ClusterSyncWithGitUsingPOSTParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithForce adds the force to the cluster sync with git using p o s t params
func (o *ClusterSyncWithGitUsingPOSTParams) WithForce(force *bool) *ClusterSyncWithGitUsingPOSTParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the cluster sync with git using p o s t params
func (o *ClusterSyncWithGitUsingPOSTParams) SetForce(force *bool) {
	o.Force = force
}

// WriteToRequest writes these params to a swagger request
func (o *ClusterSyncWithGitUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID); err != nil {
		return err
	}

	if o.Force != nil {

		// query param force
		var qrForce bool

		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {

			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
