// Code generated by go-swagger; DO NOT EDIT.

package ui_application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui application controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui application controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui application controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui application controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Abort(params *AbortParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AbortOK, error)

	ClusterSyncWithGit(params *ClusterSyncWithGitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterSyncWithGitOK, error)

	GetApplicationOverrides(params *GetApplicationOverridesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationOverridesOK, error)

	GetArgoRolloutInfo(params *GetArgoRolloutInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArgoRolloutInfoOK, error)

	GetDeployedCommitIDForResource(params *GetDeployedCommitIDForResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeployedCommitIDForResourceOK, error)

	GetEvents(params *GetEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEventsOK, error)

	GetHPA(params *GetHPAParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHPAOK, error)

	GetIngresses(params *GetIngressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngressesOK, error)

	GetResourceByName(params *GetResourceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceByNameOK, error)

	GetResourceByNameV2(params *GetResourceByNameV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceByNameV2OK, error)

	GetResourceHistory(params *GetResourceHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceHistoryOK, error)

	GetResourceOutProperties(params *GetResourceOutPropertiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceOutPropertiesOK, error)

	GetResourceOverrideObject(params *GetResourceOverrideObjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceOverrideObjectOK, error)

	GetValidations(params *GetValidationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetValidationsOK, error)

	ListPods(params *ListPodsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPodsOK, error)

	Logs(params *LogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LogsOK, error)

	PostResourceOverrideObject(params *PostResourceOverrideObjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostResourceOverrideObjectOK, error)

	Promote(params *PromoteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PromoteOK, error)

	RollingRestart(params *RollingRestartParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RollingRestartOK, error)

	RunValidation(params *RunValidationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RunValidationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Abort abort API
*/
func (a *Client) Abort(params *AbortParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AbortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAbortParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "abort",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/abort",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AbortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AbortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for abort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ClusterSyncWithGit cluster sync with git API
*/
func (a *Client) ClusterSyncWithGit(params *ClusterSyncWithGitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterSyncWithGitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterSyncWithGitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "clusterSyncWithGit",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/sync-with-git",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClusterSyncWithGitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterSyncWithGitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusterSyncWithGit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApplicationOverrides get application overrides API
*/
func (a *Client) GetApplicationOverrides(params *GetApplicationOverridesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationOverridesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationOverridesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApplicationOverrides",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/{resourceType}/{appName}/overrides",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationOverridesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationOverridesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationOverrides: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArgoRolloutInfo get argo rollout info API
*/
func (a *Client) GetArgoRolloutInfo(params *GetArgoRolloutInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArgoRolloutInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArgoRolloutInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArgoRolloutInfo",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/argo-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArgoRolloutInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArgoRolloutInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArgoRolloutInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeployedCommitIDForResource get deployed commit Id for resource API
*/
func (a *Client) GetDeployedCommitIDForResource(params *GetDeployedCommitIDForResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeployedCommitIDForResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeployedCommitIDForResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeployedCommitIdForResource",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeployedCommitIDForResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeployedCommitIDForResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeployedCommitIdForResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEvents get events API
*/
func (a *Client) GetEvents(params *GetEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEvents",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/pods/{podName}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHPA get h p a API
*/
func (a *Client) GetHPA(params *GetHPAParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHPAOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHPAParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHPA",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceName/{applicationName}/hpa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHPAReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHPAOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHPA: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIngresses get ingresses API
*/
func (a *Client) GetIngresses(params *GetIngressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngressesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngresses",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceName/{applicationName}/ingresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngressesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIngresses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceByName get resource by name API
*/
func (a *Client) GetResourceByName(params *GetResourceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceByName",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/{resourceType}/{appName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceByNameV2 get resource by name v2 API
*/
func (a *Client) GetResourceByNameV2(params *GetResourceByNameV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceByNameV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceByNameV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceByNameV2",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceByNameV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceByNameV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceByNameV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceHistory get resource history API
*/
func (a *Client) GetResourceHistory(params *GetResourceHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceHistory",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/resource-history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceOutProperties get resource out properties API
*/
func (a *Client) GetResourceOutProperties(params *GetResourceOutPropertiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceOutPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceOutPropertiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceOutProperties",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/resource-out-properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceOutPropertiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceOutPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceOutProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceOverrideObject get resource override object API
*/
func (a *Client) GetResourceOverrideObject(params *GetResourceOverrideObjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceOverrideObjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceOverrideObjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceOverrideObject",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/overrides",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceOverrideObjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceOverrideObjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceOverrideObject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetValidations get validations API
*/
func (a *Client) GetValidations(params *GetValidationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetValidationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValidationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getValidations",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/validation-errors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetValidationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValidationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPods list pods API
*/
func (a *Client) ListPods(params *ListPodsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPodsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPods",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceName/{applicationName}/pods",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPodsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPodsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPods: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Logs logs API
*/
func (a *Client) Logs(params *LogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "logs",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/pods/{podName}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for logs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostResourceOverrideObject post resource override object API
*/
func (a *Client) PostResourceOverrideObject(params *PostResourceOverrideObjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostResourceOverrideObjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostResourceOverrideObjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postResourceOverrideObject",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/overrides",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostResourceOverrideObjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostResourceOverrideObjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postResourceOverrideObject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Promote promote API
*/
func (a *Client) Promote(params *PromoteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PromoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPromoteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "promote",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/promote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PromoteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PromoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for promote: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RollingRestart rolling restart API
*/
func (a *Client) RollingRestart(params *RollingRestartParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RollingRestartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRollingRestartParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rollingRestart",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/restart/{applicationName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RollingRestartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RollingRestartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rollingRestart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RunValidation run validation API
*/
func (a *Client) RunValidation(params *RunValidationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RunValidationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunValidationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "runValidation",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RunValidationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunValidationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for runValidation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
