// Code generated by go-swagger; DO NOT EDIT.

package ui_application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui application controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui application controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui application controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui application controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AbortUsingPUT(params *AbortUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AbortUsingPUTOK, *AbortUsingPUTCreated, error)

	ClusterSyncWithGitUsingPOST(params *ClusterSyncWithGitUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterSyncWithGitUsingPOSTOK, *ClusterSyncWithGitUsingPOSTCreated, error)

	GetApplicationOverridesUsingGET(params *GetApplicationOverridesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationOverridesUsingGETOK, error)

	GetArgoRolloutInfoUsingGET(params *GetArgoRolloutInfoUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArgoRolloutInfoUsingGETOK, error)

	GetDeployedCommitIDForResourceUsingGET(params *GetDeployedCommitIDForResourceUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeployedCommitIDForResourceUsingGETOK, error)

	GetEventsUsingGET(params *GetEventsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEventsUsingGETOK, error)

	GetHPAUsingGET(params *GetHPAUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHPAUsingGETOK, error)

	GetIngressesUsingGET(params *GetIngressesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngressesUsingGETOK, error)

	GetResourceByNameUsingGET(params *GetResourceByNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceByNameUsingGETOK, error)

	GetResourceByNameV2UsingGET(params *GetResourceByNameV2UsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceByNameV2UsingGETOK, error)

	GetResourceHistoryUsingGET(params *GetResourceHistoryUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceHistoryUsingGETOK, error)

	GetResourceOutPropertiesUsingGET(params *GetResourceOutPropertiesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceOutPropertiesUsingGETOK, error)

	GetResourceOverrideObjectUsingGET(params *GetResourceOverrideObjectUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceOverrideObjectUsingGETOK, error)

	GetValidationsUsingGET(params *GetValidationsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetValidationsUsingGETOK, error)

	ListPodsUsingGET(params *ListPodsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPodsUsingGETOK, error)

	LogsUsingGET(params *LogsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LogsUsingGETOK, error)

	PostResourceOverrideObjectUsingPOST(params *PostResourceOverrideObjectUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostResourceOverrideObjectUsingPOSTOK, *PostResourceOverrideObjectUsingPOSTCreated, error)

	PromoteUsingPUT(params *PromoteUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PromoteUsingPUTOK, *PromoteUsingPUTCreated, error)

	RollingRestartUsingPOST(params *RollingRestartUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RollingRestartUsingPOSTOK, *RollingRestartUsingPOSTCreated, error)

	RunValidationUsingPOST(params *RunValidationUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RunValidationUsingPOSTOK, *RunValidationUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AbortUsingPUT aborts
*/
func (a *Client) AbortUsingPUT(params *AbortUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AbortUsingPUTOK, *AbortUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAbortUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "abortUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/abort",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AbortUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AbortUsingPUTOK:
		return value, nil, nil
	case *AbortUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_application_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ClusterSyncWithGitUsingPOST clusters sync with git
*/
func (a *Client) ClusterSyncWithGitUsingPOST(params *ClusterSyncWithGitUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterSyncWithGitUsingPOSTOK, *ClusterSyncWithGitUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterSyncWithGitUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "clusterSyncWithGitUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/sync-with-git",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClusterSyncWithGitUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ClusterSyncWithGitUsingPOSTOK:
		return value, nil, nil
	case *ClusterSyncWithGitUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_application_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApplicationOverridesUsingGET gets application overrides
*/
func (a *Client) GetApplicationOverridesUsingGET(params *GetApplicationOverridesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationOverridesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationOverridesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApplicationOverridesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/{resourceType}/{appName}/overrides",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationOverridesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationOverridesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationOverridesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArgoRolloutInfoUsingGET gets argo rollout info
*/
func (a *Client) GetArgoRolloutInfoUsingGET(params *GetArgoRolloutInfoUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArgoRolloutInfoUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArgoRolloutInfoUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArgoRolloutInfoUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/argo-info",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArgoRolloutInfoUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArgoRolloutInfoUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArgoRolloutInfoUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeployedCommitIDForResourceUsingGET gets deployed commit Id for resource
*/
func (a *Client) GetDeployedCommitIDForResourceUsingGET(params *GetDeployedCommitIDForResourceUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeployedCommitIDForResourceUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeployedCommitIDForResourceUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeployedCommitIdForResourceUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeployedCommitIDForResourceUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeployedCommitIDForResourceUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeployedCommitIdForResourceUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEventsUsingGET gets events
*/
func (a *Client) GetEventsUsingGET(params *GetEventsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEventsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEventsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/pods/{podName}/events",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEventsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHPAUsingGET gets h p a
*/
func (a *Client) GetHPAUsingGET(params *GetHPAUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHPAUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHPAUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHPAUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceName/{applicationName}/hpa",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHPAUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHPAUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHPAUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIngressesUsingGET gets ingresses
*/
func (a *Client) GetIngressesUsingGET(params *GetIngressesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngressesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngressesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngressesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceName/{applicationName}/ingresses",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngressesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngressesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIngressesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceByNameUsingGET gets resource by name
*/
func (a *Client) GetResourceByNameUsingGET(params *GetResourceByNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceByNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceByNameUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceByNameUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/{resourceType}/{appName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceByNameUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceByNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceByNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceByNameV2UsingGET gets resource by name v2
*/
func (a *Client) GetResourceByNameV2UsingGET(params *GetResourceByNameV2UsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceByNameV2UsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceByNameV2UsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceByNameV2UsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceByNameV2UsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceByNameV2UsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceByNameV2UsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceHistoryUsingGET gets resource history
*/
func (a *Client) GetResourceHistoryUsingGET(params *GetResourceHistoryUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceHistoryUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceHistoryUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceHistoryUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/resource-history",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceHistoryUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceHistoryUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceHistoryUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceOutPropertiesUsingGET gets resource out properties
*/
func (a *Client) GetResourceOutPropertiesUsingGET(params *GetResourceOutPropertiesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceOutPropertiesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceOutPropertiesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceOutPropertiesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/resource-out-properties",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceOutPropertiesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceOutPropertiesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceOutPropertiesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceOverrideObjectUsingGET gets resource override object
*/
func (a *Client) GetResourceOverrideObjectUsingGET(params *GetResourceOverrideObjectUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceOverrideObjectUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceOverrideObjectUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceOverrideObjectUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/overrides",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceOverrideObjectUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceOverrideObjectUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceOverrideObjectUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetValidationsUsingGET gets validations
*/
func (a *Client) GetValidationsUsingGET(params *GetValidationsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetValidationsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValidationsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getValidationsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/validation-errors",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetValidationsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValidationsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidationsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPodsUsingGET lists pods
*/
func (a *Client) ListPodsUsingGET(params *ListPodsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPodsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPodsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPodsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceName/{applicationName}/pods",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPodsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPodsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPodsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LogsUsingGET logs
*/
func (a *Client) LogsUsingGET(params *LogsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LogsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "logsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/pods/{podName}/logs",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for logsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostResourceOverrideObjectUsingPOST posts resource override object
*/
func (a *Client) PostResourceOverrideObjectUsingPOST(params *PostResourceOverrideObjectUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostResourceOverrideObjectUsingPOSTOK, *PostResourceOverrideObjectUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostResourceOverrideObjectUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postResourceOverrideObjectUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/overrides",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostResourceOverrideObjectUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostResourceOverrideObjectUsingPOSTOK:
		return value, nil, nil
	case *PostResourceOverrideObjectUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_application_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PromoteUsingPUT promotes
*/
func (a *Client) PromoteUsingPUT(params *PromoteUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PromoteUsingPUTOK, *PromoteUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPromoteUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "promoteUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/promote",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PromoteUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PromoteUsingPUTOK:
		return value, nil, nil
	case *PromoteUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_application_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RollingRestartUsingPOST rollings restart
*/
func (a *Client) RollingRestartUsingPOST(params *RollingRestartUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RollingRestartUsingPOSTOK, *RollingRestartUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRollingRestartUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rollingRestartUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/restart/{applicationName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RollingRestartUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RollingRestartUsingPOSTOK:
		return value, nil, nil
	case *RollingRestartUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_application_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RunValidationUsingPOST runs validation
*/
func (a *Client) RunValidationUsingPOST(params *RunValidationUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RunValidationUsingPOSTOK, *RunValidationUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunValidationUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "runValidationUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/validate",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RunValidationUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunValidationUsingPOSTOK:
		return value, nil, nil
	case *RunValidationUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_application_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
