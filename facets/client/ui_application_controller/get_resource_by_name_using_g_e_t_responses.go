// Code generated by go-swagger; DO NOT EDIT.

package ui_application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetResourceByNameUsingGETReader is a Reader for the GetResourceByNameUsingGET structure.
type GetResourceByNameUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetResourceByNameUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetResourceByNameUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetResourceByNameUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetResourceByNameUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetResourceByNameUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/{resourceType}/{appName}] getResourceByNameUsingGET", response, response.Code())
	}
}

// NewGetResourceByNameUsingGETOK creates a GetResourceByNameUsingGETOK with default headers values
func NewGetResourceByNameUsingGETOK() *GetResourceByNameUsingGETOK {
	return &GetResourceByNameUsingGETOK{}
}

/*
GetResourceByNameUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetResourceByNameUsingGETOK struct {
	Payload interface{}
}

// IsSuccess returns true when this get resource by name using g e t o k response has a 2xx status code
func (o *GetResourceByNameUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get resource by name using g e t o k response has a 3xx status code
func (o *GetResourceByNameUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get resource by name using g e t o k response has a 4xx status code
func (o *GetResourceByNameUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get resource by name using g e t o k response has a 5xx status code
func (o *GetResourceByNameUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get resource by name using g e t o k response a status code equal to that given
func (o *GetResourceByNameUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get resource by name using g e t o k response
func (o *GetResourceByNameUsingGETOK) Code() int {
	return 200
}

func (o *GetResourceByNameUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/{resourceType}/{appName}][%d] getResourceByNameUsingGETOK %s", 200, payload)
}

func (o *GetResourceByNameUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/{resourceType}/{appName}][%d] getResourceByNameUsingGETOK %s", 200, payload)
}

func (o *GetResourceByNameUsingGETOK) GetPayload() interface{} {
	return o.Payload
}

func (o *GetResourceByNameUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetResourceByNameUsingGETUnauthorized creates a GetResourceByNameUsingGETUnauthorized with default headers values
func NewGetResourceByNameUsingGETUnauthorized() *GetResourceByNameUsingGETUnauthorized {
	return &GetResourceByNameUsingGETUnauthorized{}
}

/*
GetResourceByNameUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetResourceByNameUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get resource by name using g e t unauthorized response has a 2xx status code
func (o *GetResourceByNameUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get resource by name using g e t unauthorized response has a 3xx status code
func (o *GetResourceByNameUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get resource by name using g e t unauthorized response has a 4xx status code
func (o *GetResourceByNameUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get resource by name using g e t unauthorized response has a 5xx status code
func (o *GetResourceByNameUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get resource by name using g e t unauthorized response a status code equal to that given
func (o *GetResourceByNameUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get resource by name using g e t unauthorized response
func (o *GetResourceByNameUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetResourceByNameUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/{resourceType}/{appName}][%d] getResourceByNameUsingGETUnauthorized", 401)
}

func (o *GetResourceByNameUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/{resourceType}/{appName}][%d] getResourceByNameUsingGETUnauthorized", 401)
}

func (o *GetResourceByNameUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetResourceByNameUsingGETForbidden creates a GetResourceByNameUsingGETForbidden with default headers values
func NewGetResourceByNameUsingGETForbidden() *GetResourceByNameUsingGETForbidden {
	return &GetResourceByNameUsingGETForbidden{}
}

/*
GetResourceByNameUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetResourceByNameUsingGETForbidden struct {
}

// IsSuccess returns true when this get resource by name using g e t forbidden response has a 2xx status code
func (o *GetResourceByNameUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get resource by name using g e t forbidden response has a 3xx status code
func (o *GetResourceByNameUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get resource by name using g e t forbidden response has a 4xx status code
func (o *GetResourceByNameUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get resource by name using g e t forbidden response has a 5xx status code
func (o *GetResourceByNameUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get resource by name using g e t forbidden response a status code equal to that given
func (o *GetResourceByNameUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get resource by name using g e t forbidden response
func (o *GetResourceByNameUsingGETForbidden) Code() int {
	return 403
}

func (o *GetResourceByNameUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/{resourceType}/{appName}][%d] getResourceByNameUsingGETForbidden", 403)
}

func (o *GetResourceByNameUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/{resourceType}/{appName}][%d] getResourceByNameUsingGETForbidden", 403)
}

func (o *GetResourceByNameUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetResourceByNameUsingGETNotFound creates a GetResourceByNameUsingGETNotFound with default headers values
func NewGetResourceByNameUsingGETNotFound() *GetResourceByNameUsingGETNotFound {
	return &GetResourceByNameUsingGETNotFound{}
}

/*
GetResourceByNameUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetResourceByNameUsingGETNotFound struct {
}

// IsSuccess returns true when this get resource by name using g e t not found response has a 2xx status code
func (o *GetResourceByNameUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get resource by name using g e t not found response has a 3xx status code
func (o *GetResourceByNameUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get resource by name using g e t not found response has a 4xx status code
func (o *GetResourceByNameUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get resource by name using g e t not found response has a 5xx status code
func (o *GetResourceByNameUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get resource by name using g e t not found response a status code equal to that given
func (o *GetResourceByNameUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get resource by name using g e t not found response
func (o *GetResourceByNameUsingGETNotFound) Code() int {
	return 404
}

func (o *GetResourceByNameUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/{resourceType}/{appName}][%d] getResourceByNameUsingGETNotFound", 404)
}

func (o *GetResourceByNameUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/{resourceType}/{appName}][%d] getResourceByNameUsingGETNotFound", 404)
}

func (o *GetResourceByNameUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
