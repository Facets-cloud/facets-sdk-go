// Code generated by go-swagger; DO NOT EDIT.

package ui_application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RollingRestartReader is a Reader for the RollingRestart structure.
type RollingRestartReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RollingRestartReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRollingRestartOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRollingRestartBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRollingRestartNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRollingRestartMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRollingRestartInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}] rollingRestart", response, response.Code())
	}
}

// NewRollingRestartOK creates a RollingRestartOK with default headers values
func NewRollingRestartOK() *RollingRestartOK {
	return &RollingRestartOK{}
}

/*
RollingRestartOK describes a response with status code 200, with default header values.

OK
*/
type RollingRestartOK struct {
}

// IsSuccess returns true when this rolling restart o k response has a 2xx status code
func (o *RollingRestartOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rolling restart o k response has a 3xx status code
func (o *RollingRestartOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rolling restart o k response has a 4xx status code
func (o *RollingRestartOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this rolling restart o k response has a 5xx status code
func (o *RollingRestartOK) IsServerError() bool {
	return false
}

// IsCode returns true when this rolling restart o k response a status code equal to that given
func (o *RollingRestartOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the rolling restart o k response
func (o *RollingRestartOK) Code() int {
	return 200
}

func (o *RollingRestartOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartOK", 200)
}

func (o *RollingRestartOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartOK", 200)
}

func (o *RollingRestartOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRollingRestartBadRequest creates a RollingRestartBadRequest with default headers values
func NewRollingRestartBadRequest() *RollingRestartBadRequest {
	return &RollingRestartBadRequest{}
}

/*
RollingRestartBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RollingRestartBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this rolling restart bad request response has a 2xx status code
func (o *RollingRestartBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rolling restart bad request response has a 3xx status code
func (o *RollingRestartBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rolling restart bad request response has a 4xx status code
func (o *RollingRestartBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this rolling restart bad request response has a 5xx status code
func (o *RollingRestartBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this rolling restart bad request response a status code equal to that given
func (o *RollingRestartBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the rolling restart bad request response
func (o *RollingRestartBadRequest) Code() int {
	return 400
}

func (o *RollingRestartBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartBadRequest %s", 400, payload)
}

func (o *RollingRestartBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartBadRequest %s", 400, payload)
}

func (o *RollingRestartBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RollingRestartBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRollingRestartNotFound creates a RollingRestartNotFound with default headers values
func NewRollingRestartNotFound() *RollingRestartNotFound {
	return &RollingRestartNotFound{}
}

/*
RollingRestartNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RollingRestartNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this rolling restart not found response has a 2xx status code
func (o *RollingRestartNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rolling restart not found response has a 3xx status code
func (o *RollingRestartNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rolling restart not found response has a 4xx status code
func (o *RollingRestartNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this rolling restart not found response has a 5xx status code
func (o *RollingRestartNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this rolling restart not found response a status code equal to that given
func (o *RollingRestartNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the rolling restart not found response
func (o *RollingRestartNotFound) Code() int {
	return 404
}

func (o *RollingRestartNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartNotFound %s", 404, payload)
}

func (o *RollingRestartNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartNotFound %s", 404, payload)
}

func (o *RollingRestartNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RollingRestartNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRollingRestartMethodNotAllowed creates a RollingRestartMethodNotAllowed with default headers values
func NewRollingRestartMethodNotAllowed() *RollingRestartMethodNotAllowed {
	return &RollingRestartMethodNotAllowed{}
}

/*
RollingRestartMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RollingRestartMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this rolling restart method not allowed response has a 2xx status code
func (o *RollingRestartMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rolling restart method not allowed response has a 3xx status code
func (o *RollingRestartMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rolling restart method not allowed response has a 4xx status code
func (o *RollingRestartMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this rolling restart method not allowed response has a 5xx status code
func (o *RollingRestartMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this rolling restart method not allowed response a status code equal to that given
func (o *RollingRestartMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the rolling restart method not allowed response
func (o *RollingRestartMethodNotAllowed) Code() int {
	return 405
}

func (o *RollingRestartMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartMethodNotAllowed %s", 405, payload)
}

func (o *RollingRestartMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartMethodNotAllowed %s", 405, payload)
}

func (o *RollingRestartMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RollingRestartMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRollingRestartInternalServerError creates a RollingRestartInternalServerError with default headers values
func NewRollingRestartInternalServerError() *RollingRestartInternalServerError {
	return &RollingRestartInternalServerError{}
}

/*
RollingRestartInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RollingRestartInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this rolling restart internal server error response has a 2xx status code
func (o *RollingRestartInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rolling restart internal server error response has a 3xx status code
func (o *RollingRestartInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rolling restart internal server error response has a 4xx status code
func (o *RollingRestartInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this rolling restart internal server error response has a 5xx status code
func (o *RollingRestartInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this rolling restart internal server error response a status code equal to that given
func (o *RollingRestartInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the rolling restart internal server error response
func (o *RollingRestartInternalServerError) Code() int {
	return 500
}

func (o *RollingRestartInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartInternalServerError %s", 500, payload)
}

func (o *RollingRestartInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartInternalServerError %s", 500, payload)
}

func (o *RollingRestartInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RollingRestartInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
