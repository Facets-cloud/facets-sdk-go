// Code generated by go-swagger; DO NOT EDIT.

package ui_application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ClusterSyncWithGitReader is a Reader for the ClusterSyncWithGit structure.
type ClusterSyncWithGitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ClusterSyncWithGitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewClusterSyncWithGitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewClusterSyncWithGitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewClusterSyncWithGitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewClusterSyncWithGitMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewClusterSyncWithGitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/sync-with-git] clusterSyncWithGit", response, response.Code())
	}
}

// NewClusterSyncWithGitOK creates a ClusterSyncWithGitOK with default headers values
func NewClusterSyncWithGitOK() *ClusterSyncWithGitOK {
	return &ClusterSyncWithGitOK{}
}

/*
ClusterSyncWithGitOK describes a response with status code 200, with default header values.

OK
*/
type ClusterSyncWithGitOK struct {
}

// IsSuccess returns true when this cluster sync with git o k response has a 2xx status code
func (o *ClusterSyncWithGitOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cluster sync with git o k response has a 3xx status code
func (o *ClusterSyncWithGitOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cluster sync with git o k response has a 4xx status code
func (o *ClusterSyncWithGitOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cluster sync with git o k response has a 5xx status code
func (o *ClusterSyncWithGitOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cluster sync with git o k response a status code equal to that given
func (o *ClusterSyncWithGitOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cluster sync with git o k response
func (o *ClusterSyncWithGitOK) Code() int {
	return 200
}

func (o *ClusterSyncWithGitOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/sync-with-git][%d] clusterSyncWithGitOK", 200)
}

func (o *ClusterSyncWithGitOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/sync-with-git][%d] clusterSyncWithGitOK", 200)
}

func (o *ClusterSyncWithGitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewClusterSyncWithGitBadRequest creates a ClusterSyncWithGitBadRequest with default headers values
func NewClusterSyncWithGitBadRequest() *ClusterSyncWithGitBadRequest {
	return &ClusterSyncWithGitBadRequest{}
}

/*
ClusterSyncWithGitBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ClusterSyncWithGitBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this cluster sync with git bad request response has a 2xx status code
func (o *ClusterSyncWithGitBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cluster sync with git bad request response has a 3xx status code
func (o *ClusterSyncWithGitBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cluster sync with git bad request response has a 4xx status code
func (o *ClusterSyncWithGitBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cluster sync with git bad request response has a 5xx status code
func (o *ClusterSyncWithGitBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cluster sync with git bad request response a status code equal to that given
func (o *ClusterSyncWithGitBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cluster sync with git bad request response
func (o *ClusterSyncWithGitBadRequest) Code() int {
	return 400
}

func (o *ClusterSyncWithGitBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/sync-with-git][%d] clusterSyncWithGitBadRequest %s", 400, payload)
}

func (o *ClusterSyncWithGitBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/sync-with-git][%d] clusterSyncWithGitBadRequest %s", 400, payload)
}

func (o *ClusterSyncWithGitBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ClusterSyncWithGitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewClusterSyncWithGitNotFound creates a ClusterSyncWithGitNotFound with default headers values
func NewClusterSyncWithGitNotFound() *ClusterSyncWithGitNotFound {
	return &ClusterSyncWithGitNotFound{}
}

/*
ClusterSyncWithGitNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ClusterSyncWithGitNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this cluster sync with git not found response has a 2xx status code
func (o *ClusterSyncWithGitNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cluster sync with git not found response has a 3xx status code
func (o *ClusterSyncWithGitNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cluster sync with git not found response has a 4xx status code
func (o *ClusterSyncWithGitNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cluster sync with git not found response has a 5xx status code
func (o *ClusterSyncWithGitNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cluster sync with git not found response a status code equal to that given
func (o *ClusterSyncWithGitNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the cluster sync with git not found response
func (o *ClusterSyncWithGitNotFound) Code() int {
	return 404
}

func (o *ClusterSyncWithGitNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/sync-with-git][%d] clusterSyncWithGitNotFound %s", 404, payload)
}

func (o *ClusterSyncWithGitNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/sync-with-git][%d] clusterSyncWithGitNotFound %s", 404, payload)
}

func (o *ClusterSyncWithGitNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ClusterSyncWithGitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewClusterSyncWithGitMethodNotAllowed creates a ClusterSyncWithGitMethodNotAllowed with default headers values
func NewClusterSyncWithGitMethodNotAllowed() *ClusterSyncWithGitMethodNotAllowed {
	return &ClusterSyncWithGitMethodNotAllowed{}
}

/*
ClusterSyncWithGitMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ClusterSyncWithGitMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this cluster sync with git method not allowed response has a 2xx status code
func (o *ClusterSyncWithGitMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cluster sync with git method not allowed response has a 3xx status code
func (o *ClusterSyncWithGitMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cluster sync with git method not allowed response has a 4xx status code
func (o *ClusterSyncWithGitMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this cluster sync with git method not allowed response has a 5xx status code
func (o *ClusterSyncWithGitMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this cluster sync with git method not allowed response a status code equal to that given
func (o *ClusterSyncWithGitMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the cluster sync with git method not allowed response
func (o *ClusterSyncWithGitMethodNotAllowed) Code() int {
	return 405
}

func (o *ClusterSyncWithGitMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/sync-with-git][%d] clusterSyncWithGitMethodNotAllowed %s", 405, payload)
}

func (o *ClusterSyncWithGitMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/sync-with-git][%d] clusterSyncWithGitMethodNotAllowed %s", 405, payload)
}

func (o *ClusterSyncWithGitMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ClusterSyncWithGitMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewClusterSyncWithGitInternalServerError creates a ClusterSyncWithGitInternalServerError with default headers values
func NewClusterSyncWithGitInternalServerError() *ClusterSyncWithGitInternalServerError {
	return &ClusterSyncWithGitInternalServerError{}
}

/*
ClusterSyncWithGitInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ClusterSyncWithGitInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this cluster sync with git internal server error response has a 2xx status code
func (o *ClusterSyncWithGitInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cluster sync with git internal server error response has a 3xx status code
func (o *ClusterSyncWithGitInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cluster sync with git internal server error response has a 4xx status code
func (o *ClusterSyncWithGitInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cluster sync with git internal server error response has a 5xx status code
func (o *ClusterSyncWithGitInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cluster sync with git internal server error response a status code equal to that given
func (o *ClusterSyncWithGitInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cluster sync with git internal server error response
func (o *ClusterSyncWithGitInternalServerError) Code() int {
	return 500
}

func (o *ClusterSyncWithGitInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/sync-with-git][%d] clusterSyncWithGitInternalServerError %s", 500, payload)
}

func (o *ClusterSyncWithGitInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/sync-with-git][%d] clusterSyncWithGitInternalServerError %s", 500, payload)
}

func (o *ClusterSyncWithGitInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ClusterSyncWithGitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
