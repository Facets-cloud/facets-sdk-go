// Code generated by go-swagger; DO NOT EDIT.

package ui_application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetDeployedCommitIDForResourceReader is a Reader for the GetDeployedCommitIDForResource structure.
type GetDeployedCommitIDForResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeployedCommitIDForResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeployedCommitIDForResourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDeployedCommitIDForResourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDeployedCommitIDForResourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetDeployedCommitIDForResourceMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDeployedCommitIDForResourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id] getDeployedCommitIdForResource", response, response.Code())
	}
}

// NewGetDeployedCommitIDForResourceOK creates a GetDeployedCommitIDForResourceOK with default headers values
func NewGetDeployedCommitIDForResourceOK() *GetDeployedCommitIDForResourceOK {
	return &GetDeployedCommitIDForResourceOK{}
}

/*
GetDeployedCommitIDForResourceOK describes a response with status code 200, with default header values.

OK
*/
type GetDeployedCommitIDForResourceOK struct {
	Payload string
}

// IsSuccess returns true when this get deployed commit Id for resource o k response has a 2xx status code
func (o *GetDeployedCommitIDForResourceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get deployed commit Id for resource o k response has a 3xx status code
func (o *GetDeployedCommitIDForResourceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployed commit Id for resource o k response has a 4xx status code
func (o *GetDeployedCommitIDForResourceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get deployed commit Id for resource o k response has a 5xx status code
func (o *GetDeployedCommitIDForResourceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get deployed commit Id for resource o k response a status code equal to that given
func (o *GetDeployedCommitIDForResourceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get deployed commit Id for resource o k response
func (o *GetDeployedCommitIDForResourceOK) Code() int {
	return 200
}

func (o *GetDeployedCommitIDForResourceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceOK %s", 200, payload)
}

func (o *GetDeployedCommitIDForResourceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceOK %s", 200, payload)
}

func (o *GetDeployedCommitIDForResourceOK) GetPayload() string {
	return o.Payload
}

func (o *GetDeployedCommitIDForResourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeployedCommitIDForResourceBadRequest creates a GetDeployedCommitIDForResourceBadRequest with default headers values
func NewGetDeployedCommitIDForResourceBadRequest() *GetDeployedCommitIDForResourceBadRequest {
	return &GetDeployedCommitIDForResourceBadRequest{}
}

/*
GetDeployedCommitIDForResourceBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetDeployedCommitIDForResourceBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get deployed commit Id for resource bad request response has a 2xx status code
func (o *GetDeployedCommitIDForResourceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get deployed commit Id for resource bad request response has a 3xx status code
func (o *GetDeployedCommitIDForResourceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployed commit Id for resource bad request response has a 4xx status code
func (o *GetDeployedCommitIDForResourceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get deployed commit Id for resource bad request response has a 5xx status code
func (o *GetDeployedCommitIDForResourceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get deployed commit Id for resource bad request response a status code equal to that given
func (o *GetDeployedCommitIDForResourceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get deployed commit Id for resource bad request response
func (o *GetDeployedCommitIDForResourceBadRequest) Code() int {
	return 400
}

func (o *GetDeployedCommitIDForResourceBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceBadRequest %s", 400, payload)
}

func (o *GetDeployedCommitIDForResourceBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceBadRequest %s", 400, payload)
}

func (o *GetDeployedCommitIDForResourceBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetDeployedCommitIDForResourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeployedCommitIDForResourceNotFound creates a GetDeployedCommitIDForResourceNotFound with default headers values
func NewGetDeployedCommitIDForResourceNotFound() *GetDeployedCommitIDForResourceNotFound {
	return &GetDeployedCommitIDForResourceNotFound{}
}

/*
GetDeployedCommitIDForResourceNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetDeployedCommitIDForResourceNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get deployed commit Id for resource not found response has a 2xx status code
func (o *GetDeployedCommitIDForResourceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get deployed commit Id for resource not found response has a 3xx status code
func (o *GetDeployedCommitIDForResourceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployed commit Id for resource not found response has a 4xx status code
func (o *GetDeployedCommitIDForResourceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get deployed commit Id for resource not found response has a 5xx status code
func (o *GetDeployedCommitIDForResourceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get deployed commit Id for resource not found response a status code equal to that given
func (o *GetDeployedCommitIDForResourceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get deployed commit Id for resource not found response
func (o *GetDeployedCommitIDForResourceNotFound) Code() int {
	return 404
}

func (o *GetDeployedCommitIDForResourceNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceNotFound %s", 404, payload)
}

func (o *GetDeployedCommitIDForResourceNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceNotFound %s", 404, payload)
}

func (o *GetDeployedCommitIDForResourceNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetDeployedCommitIDForResourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeployedCommitIDForResourceMethodNotAllowed creates a GetDeployedCommitIDForResourceMethodNotAllowed with default headers values
func NewGetDeployedCommitIDForResourceMethodNotAllowed() *GetDeployedCommitIDForResourceMethodNotAllowed {
	return &GetDeployedCommitIDForResourceMethodNotAllowed{}
}

/*
GetDeployedCommitIDForResourceMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetDeployedCommitIDForResourceMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get deployed commit Id for resource method not allowed response has a 2xx status code
func (o *GetDeployedCommitIDForResourceMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get deployed commit Id for resource method not allowed response has a 3xx status code
func (o *GetDeployedCommitIDForResourceMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployed commit Id for resource method not allowed response has a 4xx status code
func (o *GetDeployedCommitIDForResourceMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get deployed commit Id for resource method not allowed response has a 5xx status code
func (o *GetDeployedCommitIDForResourceMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get deployed commit Id for resource method not allowed response a status code equal to that given
func (o *GetDeployedCommitIDForResourceMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get deployed commit Id for resource method not allowed response
func (o *GetDeployedCommitIDForResourceMethodNotAllowed) Code() int {
	return 405
}

func (o *GetDeployedCommitIDForResourceMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceMethodNotAllowed %s", 405, payload)
}

func (o *GetDeployedCommitIDForResourceMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceMethodNotAllowed %s", 405, payload)
}

func (o *GetDeployedCommitIDForResourceMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetDeployedCommitIDForResourceMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeployedCommitIDForResourceInternalServerError creates a GetDeployedCommitIDForResourceInternalServerError with default headers values
func NewGetDeployedCommitIDForResourceInternalServerError() *GetDeployedCommitIDForResourceInternalServerError {
	return &GetDeployedCommitIDForResourceInternalServerError{}
}

/*
GetDeployedCommitIDForResourceInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetDeployedCommitIDForResourceInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get deployed commit Id for resource internal server error response has a 2xx status code
func (o *GetDeployedCommitIDForResourceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get deployed commit Id for resource internal server error response has a 3xx status code
func (o *GetDeployedCommitIDForResourceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployed commit Id for resource internal server error response has a 4xx status code
func (o *GetDeployedCommitIDForResourceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get deployed commit Id for resource internal server error response has a 5xx status code
func (o *GetDeployedCommitIDForResourceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get deployed commit Id for resource internal server error response a status code equal to that given
func (o *GetDeployedCommitIDForResourceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get deployed commit Id for resource internal server error response
func (o *GetDeployedCommitIDForResourceInternalServerError) Code() int {
	return 500
}

func (o *GetDeployedCommitIDForResourceInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceInternalServerError %s", 500, payload)
}

func (o *GetDeployedCommitIDForResourceInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/deployed-commit-id][%d] getDeployedCommitIdForResourceInternalServerError %s", 500, payload)
}

func (o *GetDeployedCommitIDForResourceInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetDeployedCommitIDForResourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
