// Code generated by go-swagger; DO NOT EDIT.

package ui_application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RunValidationReader is a Reader for the RunValidation structure.
type RunValidationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunValidationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunValidationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRunValidationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRunValidationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRunValidationMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRunValidationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/validate] runValidation", response, response.Code())
	}
}

// NewRunValidationOK creates a RunValidationOK with default headers values
func NewRunValidationOK() *RunValidationOK {
	return &RunValidationOK{}
}

/*
RunValidationOK describes a response with status code 200, with default header values.

OK
*/
type RunValidationOK struct {
}

// IsSuccess returns true when this run validation o k response has a 2xx status code
func (o *RunValidationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this run validation o k response has a 3xx status code
func (o *RunValidationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run validation o k response has a 4xx status code
func (o *RunValidationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this run validation o k response has a 5xx status code
func (o *RunValidationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this run validation o k response a status code equal to that given
func (o *RunValidationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the run validation o k response
func (o *RunValidationOK) Code() int {
	return 200
}

func (o *RunValidationOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationOK", 200)
}

func (o *RunValidationOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationOK", 200)
}

func (o *RunValidationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunValidationBadRequest creates a RunValidationBadRequest with default headers values
func NewRunValidationBadRequest() *RunValidationBadRequest {
	return &RunValidationBadRequest{}
}

/*
RunValidationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RunValidationBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this run validation bad request response has a 2xx status code
func (o *RunValidationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run validation bad request response has a 3xx status code
func (o *RunValidationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run validation bad request response has a 4xx status code
func (o *RunValidationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this run validation bad request response has a 5xx status code
func (o *RunValidationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this run validation bad request response a status code equal to that given
func (o *RunValidationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the run validation bad request response
func (o *RunValidationBadRequest) Code() int {
	return 400
}

func (o *RunValidationBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationBadRequest %s", 400, payload)
}

func (o *RunValidationBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationBadRequest %s", 400, payload)
}

func (o *RunValidationBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RunValidationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunValidationNotFound creates a RunValidationNotFound with default headers values
func NewRunValidationNotFound() *RunValidationNotFound {
	return &RunValidationNotFound{}
}

/*
RunValidationNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RunValidationNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this run validation not found response has a 2xx status code
func (o *RunValidationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run validation not found response has a 3xx status code
func (o *RunValidationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run validation not found response has a 4xx status code
func (o *RunValidationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this run validation not found response has a 5xx status code
func (o *RunValidationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this run validation not found response a status code equal to that given
func (o *RunValidationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the run validation not found response
func (o *RunValidationNotFound) Code() int {
	return 404
}

func (o *RunValidationNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationNotFound %s", 404, payload)
}

func (o *RunValidationNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationNotFound %s", 404, payload)
}

func (o *RunValidationNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RunValidationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunValidationMethodNotAllowed creates a RunValidationMethodNotAllowed with default headers values
func NewRunValidationMethodNotAllowed() *RunValidationMethodNotAllowed {
	return &RunValidationMethodNotAllowed{}
}

/*
RunValidationMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RunValidationMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this run validation method not allowed response has a 2xx status code
func (o *RunValidationMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run validation method not allowed response has a 3xx status code
func (o *RunValidationMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run validation method not allowed response has a 4xx status code
func (o *RunValidationMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this run validation method not allowed response has a 5xx status code
func (o *RunValidationMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this run validation method not allowed response a status code equal to that given
func (o *RunValidationMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the run validation method not allowed response
func (o *RunValidationMethodNotAllowed) Code() int {
	return 405
}

func (o *RunValidationMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationMethodNotAllowed %s", 405, payload)
}

func (o *RunValidationMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationMethodNotAllowed %s", 405, payload)
}

func (o *RunValidationMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RunValidationMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunValidationInternalServerError creates a RunValidationInternalServerError with default headers values
func NewRunValidationInternalServerError() *RunValidationInternalServerError {
	return &RunValidationInternalServerError{}
}

/*
RunValidationInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RunValidationInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this run validation internal server error response has a 2xx status code
func (o *RunValidationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run validation internal server error response has a 3xx status code
func (o *RunValidationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run validation internal server error response has a 4xx status code
func (o *RunValidationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this run validation internal server error response has a 5xx status code
func (o *RunValidationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this run validation internal server error response a status code equal to that given
func (o *RunValidationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the run validation internal server error response
func (o *RunValidationInternalServerError) Code() int {
	return 500
}

func (o *RunValidationInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationInternalServerError %s", 500, payload)
}

func (o *RunValidationInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/validate][%d] runValidationInternalServerError %s", 500, payload)
}

func (o *RunValidationInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RunValidationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
