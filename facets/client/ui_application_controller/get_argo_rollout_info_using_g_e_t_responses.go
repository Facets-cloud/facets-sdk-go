// Code generated by go-swagger; DO NOT EDIT.

package ui_application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetArgoRolloutInfoUsingGETReader is a Reader for the GetArgoRolloutInfoUsingGET structure.
type GetArgoRolloutInfoUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetArgoRolloutInfoUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetArgoRolloutInfoUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetArgoRolloutInfoUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetArgoRolloutInfoUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetArgoRolloutInfoUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/argo-info] getArgoRolloutInfoUsingGET", response, response.Code())
	}
}

// NewGetArgoRolloutInfoUsingGETOK creates a GetArgoRolloutInfoUsingGETOK with default headers values
func NewGetArgoRolloutInfoUsingGETOK() *GetArgoRolloutInfoUsingGETOK {
	return &GetArgoRolloutInfoUsingGETOK{}
}

/*
GetArgoRolloutInfoUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetArgoRolloutInfoUsingGETOK struct {
	Payload interface{}
}

// IsSuccess returns true when this get argo rollout info using g e t o k response has a 2xx status code
func (o *GetArgoRolloutInfoUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get argo rollout info using g e t o k response has a 3xx status code
func (o *GetArgoRolloutInfoUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get argo rollout info using g e t o k response has a 4xx status code
func (o *GetArgoRolloutInfoUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get argo rollout info using g e t o k response has a 5xx status code
func (o *GetArgoRolloutInfoUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get argo rollout info using g e t o k response a status code equal to that given
func (o *GetArgoRolloutInfoUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get argo rollout info using g e t o k response
func (o *GetArgoRolloutInfoUsingGETOK) Code() int {
	return 200
}

func (o *GetArgoRolloutInfoUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/argo-info][%d] getArgoRolloutInfoUsingGETOK %s", 200, payload)
}

func (o *GetArgoRolloutInfoUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/argo-info][%d] getArgoRolloutInfoUsingGETOK %s", 200, payload)
}

func (o *GetArgoRolloutInfoUsingGETOK) GetPayload() interface{} {
	return o.Payload
}

func (o *GetArgoRolloutInfoUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArgoRolloutInfoUsingGETUnauthorized creates a GetArgoRolloutInfoUsingGETUnauthorized with default headers values
func NewGetArgoRolloutInfoUsingGETUnauthorized() *GetArgoRolloutInfoUsingGETUnauthorized {
	return &GetArgoRolloutInfoUsingGETUnauthorized{}
}

/*
GetArgoRolloutInfoUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetArgoRolloutInfoUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get argo rollout info using g e t unauthorized response has a 2xx status code
func (o *GetArgoRolloutInfoUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get argo rollout info using g e t unauthorized response has a 3xx status code
func (o *GetArgoRolloutInfoUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get argo rollout info using g e t unauthorized response has a 4xx status code
func (o *GetArgoRolloutInfoUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get argo rollout info using g e t unauthorized response has a 5xx status code
func (o *GetArgoRolloutInfoUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get argo rollout info using g e t unauthorized response a status code equal to that given
func (o *GetArgoRolloutInfoUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get argo rollout info using g e t unauthorized response
func (o *GetArgoRolloutInfoUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetArgoRolloutInfoUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/argo-info][%d] getArgoRolloutInfoUsingGETUnauthorized", 401)
}

func (o *GetArgoRolloutInfoUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/argo-info][%d] getArgoRolloutInfoUsingGETUnauthorized", 401)
}

func (o *GetArgoRolloutInfoUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetArgoRolloutInfoUsingGETForbidden creates a GetArgoRolloutInfoUsingGETForbidden with default headers values
func NewGetArgoRolloutInfoUsingGETForbidden() *GetArgoRolloutInfoUsingGETForbidden {
	return &GetArgoRolloutInfoUsingGETForbidden{}
}

/*
GetArgoRolloutInfoUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetArgoRolloutInfoUsingGETForbidden struct {
}

// IsSuccess returns true when this get argo rollout info using g e t forbidden response has a 2xx status code
func (o *GetArgoRolloutInfoUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get argo rollout info using g e t forbidden response has a 3xx status code
func (o *GetArgoRolloutInfoUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get argo rollout info using g e t forbidden response has a 4xx status code
func (o *GetArgoRolloutInfoUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get argo rollout info using g e t forbidden response has a 5xx status code
func (o *GetArgoRolloutInfoUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get argo rollout info using g e t forbidden response a status code equal to that given
func (o *GetArgoRolloutInfoUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get argo rollout info using g e t forbidden response
func (o *GetArgoRolloutInfoUsingGETForbidden) Code() int {
	return 403
}

func (o *GetArgoRolloutInfoUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/argo-info][%d] getArgoRolloutInfoUsingGETForbidden", 403)
}

func (o *GetArgoRolloutInfoUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/argo-info][%d] getArgoRolloutInfoUsingGETForbidden", 403)
}

func (o *GetArgoRolloutInfoUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetArgoRolloutInfoUsingGETNotFound creates a GetArgoRolloutInfoUsingGETNotFound with default headers values
func NewGetArgoRolloutInfoUsingGETNotFound() *GetArgoRolloutInfoUsingGETNotFound {
	return &GetArgoRolloutInfoUsingGETNotFound{}
}

/*
GetArgoRolloutInfoUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetArgoRolloutInfoUsingGETNotFound struct {
}

// IsSuccess returns true when this get argo rollout info using g e t not found response has a 2xx status code
func (o *GetArgoRolloutInfoUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get argo rollout info using g e t not found response has a 3xx status code
func (o *GetArgoRolloutInfoUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get argo rollout info using g e t not found response has a 4xx status code
func (o *GetArgoRolloutInfoUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get argo rollout info using g e t not found response has a 5xx status code
func (o *GetArgoRolloutInfoUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get argo rollout info using g e t not found response a status code equal to that given
func (o *GetArgoRolloutInfoUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get argo rollout info using g e t not found response
func (o *GetArgoRolloutInfoUsingGETNotFound) Code() int {
	return 404
}

func (o *GetArgoRolloutInfoUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/argo-info][%d] getArgoRolloutInfoUsingGETNotFound", 404)
}

func (o *GetArgoRolloutInfoUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/argo-info][%d] getArgoRolloutInfoUsingGETNotFound", 404)
}

func (o *GetArgoRolloutInfoUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
