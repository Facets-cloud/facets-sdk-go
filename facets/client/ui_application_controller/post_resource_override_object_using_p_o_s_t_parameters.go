// Code generated by go-swagger; DO NOT EDIT.

package ui_application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// NewPostResourceOverrideObjectUsingPOSTParams creates a new PostResourceOverrideObjectUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostResourceOverrideObjectUsingPOSTParams() *PostResourceOverrideObjectUsingPOSTParams {
	return &PostResourceOverrideObjectUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostResourceOverrideObjectUsingPOSTParamsWithTimeout creates a new PostResourceOverrideObjectUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewPostResourceOverrideObjectUsingPOSTParamsWithTimeout(timeout time.Duration) *PostResourceOverrideObjectUsingPOSTParams {
	return &PostResourceOverrideObjectUsingPOSTParams{
		timeout: timeout,
	}
}

// NewPostResourceOverrideObjectUsingPOSTParamsWithContext creates a new PostResourceOverrideObjectUsingPOSTParams object
// with the ability to set a context for a request.
func NewPostResourceOverrideObjectUsingPOSTParamsWithContext(ctx context.Context) *PostResourceOverrideObjectUsingPOSTParams {
	return &PostResourceOverrideObjectUsingPOSTParams{
		Context: ctx,
	}
}

// NewPostResourceOverrideObjectUsingPOSTParamsWithHTTPClient creates a new PostResourceOverrideObjectUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostResourceOverrideObjectUsingPOSTParamsWithHTTPClient(client *http.Client) *PostResourceOverrideObjectUsingPOSTParams {
	return &PostResourceOverrideObjectUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
PostResourceOverrideObjectUsingPOSTParams contains all the parameters to send to the API endpoint

	for the post resource override object using p o s t operation.

	Typically these are written to a http.Request.
*/
type PostResourceOverrideObjectUsingPOSTParams struct {

	/* ClusterID.

	   clusterId
	*/
	ClusterID string

	/* DoSync.

	   doSync

	   Default: true
	*/
	DoSync *bool

	/* OverrideRequest.

	   overrideRequest
	*/
	OverrideRequest *models.OverrideRequest

	/* ResourceName.

	   resourceName
	*/
	ResourceName string

	/* ResourceType.

	   resourceType
	*/
	ResourceType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post resource override object using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostResourceOverrideObjectUsingPOSTParams) WithDefaults() *PostResourceOverrideObjectUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post resource override object using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostResourceOverrideObjectUsingPOSTParams) SetDefaults() {
	var (
		doSyncDefault = bool(true)
	)

	val := PostResourceOverrideObjectUsingPOSTParams{
		DoSync: &doSyncDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the post resource override object using p o s t params
func (o *PostResourceOverrideObjectUsingPOSTParams) WithTimeout(timeout time.Duration) *PostResourceOverrideObjectUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post resource override object using p o s t params
func (o *PostResourceOverrideObjectUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post resource override object using p o s t params
func (o *PostResourceOverrideObjectUsingPOSTParams) WithContext(ctx context.Context) *PostResourceOverrideObjectUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post resource override object using p o s t params
func (o *PostResourceOverrideObjectUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post resource override object using p o s t params
func (o *PostResourceOverrideObjectUsingPOSTParams) WithHTTPClient(client *http.Client) *PostResourceOverrideObjectUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post resource override object using p o s t params
func (o *PostResourceOverrideObjectUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the post resource override object using p o s t params
func (o *PostResourceOverrideObjectUsingPOSTParams) WithClusterID(clusterID string) *PostResourceOverrideObjectUsingPOSTParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the post resource override object using p o s t params
func (o *PostResourceOverrideObjectUsingPOSTParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithDoSync adds the doSync to the post resource override object using p o s t params
func (o *PostResourceOverrideObjectUsingPOSTParams) WithDoSync(doSync *bool) *PostResourceOverrideObjectUsingPOSTParams {
	o.SetDoSync(doSync)
	return o
}

// SetDoSync adds the doSync to the post resource override object using p o s t params
func (o *PostResourceOverrideObjectUsingPOSTParams) SetDoSync(doSync *bool) {
	o.DoSync = doSync
}

// WithOverrideRequest adds the overrideRequest to the post resource override object using p o s t params
func (o *PostResourceOverrideObjectUsingPOSTParams) WithOverrideRequest(overrideRequest *models.OverrideRequest) *PostResourceOverrideObjectUsingPOSTParams {
	o.SetOverrideRequest(overrideRequest)
	return o
}

// SetOverrideRequest adds the overrideRequest to the post resource override object using p o s t params
func (o *PostResourceOverrideObjectUsingPOSTParams) SetOverrideRequest(overrideRequest *models.OverrideRequest) {
	o.OverrideRequest = overrideRequest
}

// WithResourceName adds the resourceName to the post resource override object using p o s t params
func (o *PostResourceOverrideObjectUsingPOSTParams) WithResourceName(resourceName string) *PostResourceOverrideObjectUsingPOSTParams {
	o.SetResourceName(resourceName)
	return o
}

// SetResourceName adds the resourceName to the post resource override object using p o s t params
func (o *PostResourceOverrideObjectUsingPOSTParams) SetResourceName(resourceName string) {
	o.ResourceName = resourceName
}

// WithResourceType adds the resourceType to the post resource override object using p o s t params
func (o *PostResourceOverrideObjectUsingPOSTParams) WithResourceType(resourceType string) *PostResourceOverrideObjectUsingPOSTParams {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the post resource override object using p o s t params
func (o *PostResourceOverrideObjectUsingPOSTParams) SetResourceType(resourceType string) {
	o.ResourceType = resourceType
}

// WriteToRequest writes these params to a swagger request
func (o *PostResourceOverrideObjectUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID); err != nil {
		return err
	}

	if o.DoSync != nil {

		// query param doSync
		var qrDoSync bool

		if o.DoSync != nil {
			qrDoSync = *o.DoSync
		}
		qDoSync := swag.FormatBool(qrDoSync)
		if qDoSync != "" {

			if err := r.SetQueryParam("doSync", qDoSync); err != nil {
				return err
			}
		}
	}
	if o.OverrideRequest != nil {
		if err := r.SetBodyParam(o.OverrideRequest); err != nil {
			return err
		}
	}

	// path param resourceName
	if err := r.SetPathParam("resourceName", o.ResourceName); err != nil {
		return err
	}

	// path param resourceType
	if err := r.SetPathParam("resourceType", o.ResourceType); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
