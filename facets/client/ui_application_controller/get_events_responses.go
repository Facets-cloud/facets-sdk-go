// Code generated by go-swagger; DO NOT EDIT.

package ui_application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetEventsReader is a Reader for the GetEvents structure.
type GetEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetEventsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetEventsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetEventsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetEventsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/pods/{podName}/events] getEvents", response, response.Code())
	}
}

// NewGetEventsOK creates a GetEventsOK with default headers values
func NewGetEventsOK() *GetEventsOK {
	return &GetEventsOK{}
}

/*
GetEventsOK describes a response with status code 200, with default header values.

OK
*/
type GetEventsOK struct {
	Payload []*models.Event
}

// IsSuccess returns true when this get events o k response has a 2xx status code
func (o *GetEventsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get events o k response has a 3xx status code
func (o *GetEventsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get events o k response has a 4xx status code
func (o *GetEventsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get events o k response has a 5xx status code
func (o *GetEventsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get events o k response a status code equal to that given
func (o *GetEventsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get events o k response
func (o *GetEventsOK) Code() int {
	return 200
}

func (o *GetEventsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/pods/{podName}/events][%d] getEventsOK %s", 200, payload)
}

func (o *GetEventsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/pods/{podName}/events][%d] getEventsOK %s", 200, payload)
}

func (o *GetEventsOK) GetPayload() []*models.Event {
	return o.Payload
}

func (o *GetEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventsBadRequest creates a GetEventsBadRequest with default headers values
func NewGetEventsBadRequest() *GetEventsBadRequest {
	return &GetEventsBadRequest{}
}

/*
GetEventsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetEventsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get events bad request response has a 2xx status code
func (o *GetEventsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get events bad request response has a 3xx status code
func (o *GetEventsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get events bad request response has a 4xx status code
func (o *GetEventsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get events bad request response has a 5xx status code
func (o *GetEventsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get events bad request response a status code equal to that given
func (o *GetEventsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get events bad request response
func (o *GetEventsBadRequest) Code() int {
	return 400
}

func (o *GetEventsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/pods/{podName}/events][%d] getEventsBadRequest %s", 400, payload)
}

func (o *GetEventsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/pods/{podName}/events][%d] getEventsBadRequest %s", 400, payload)
}

func (o *GetEventsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetEventsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventsNotFound creates a GetEventsNotFound with default headers values
func NewGetEventsNotFound() *GetEventsNotFound {
	return &GetEventsNotFound{}
}

/*
GetEventsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetEventsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get events not found response has a 2xx status code
func (o *GetEventsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get events not found response has a 3xx status code
func (o *GetEventsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get events not found response has a 4xx status code
func (o *GetEventsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get events not found response has a 5xx status code
func (o *GetEventsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get events not found response a status code equal to that given
func (o *GetEventsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get events not found response
func (o *GetEventsNotFound) Code() int {
	return 404
}

func (o *GetEventsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/pods/{podName}/events][%d] getEventsNotFound %s", 404, payload)
}

func (o *GetEventsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/pods/{podName}/events][%d] getEventsNotFound %s", 404, payload)
}

func (o *GetEventsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetEventsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventsMethodNotAllowed creates a GetEventsMethodNotAllowed with default headers values
func NewGetEventsMethodNotAllowed() *GetEventsMethodNotAllowed {
	return &GetEventsMethodNotAllowed{}
}

/*
GetEventsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetEventsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get events method not allowed response has a 2xx status code
func (o *GetEventsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get events method not allowed response has a 3xx status code
func (o *GetEventsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get events method not allowed response has a 4xx status code
func (o *GetEventsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get events method not allowed response has a 5xx status code
func (o *GetEventsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get events method not allowed response a status code equal to that given
func (o *GetEventsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get events method not allowed response
func (o *GetEventsMethodNotAllowed) Code() int {
	return 405
}

func (o *GetEventsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/pods/{podName}/events][%d] getEventsMethodNotAllowed %s", 405, payload)
}

func (o *GetEventsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/pods/{podName}/events][%d] getEventsMethodNotAllowed %s", 405, payload)
}

func (o *GetEventsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetEventsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventsInternalServerError creates a GetEventsInternalServerError with default headers values
func NewGetEventsInternalServerError() *GetEventsInternalServerError {
	return &GetEventsInternalServerError{}
}

/*
GetEventsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetEventsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get events internal server error response has a 2xx status code
func (o *GetEventsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get events internal server error response has a 3xx status code
func (o *GetEventsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get events internal server error response has a 4xx status code
func (o *GetEventsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get events internal server error response has a 5xx status code
func (o *GetEventsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get events internal server error response a status code equal to that given
func (o *GetEventsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get events internal server error response
func (o *GetEventsInternalServerError) Code() int {
	return 500
}

func (o *GetEventsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/pods/{podName}/events][%d] getEventsInternalServerError %s", 500, payload)
}

func (o *GetEventsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/pods/{podName}/events][%d] getEventsInternalServerError %s", 500, payload)
}

func (o *GetEventsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetEventsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
