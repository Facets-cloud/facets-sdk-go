// Code generated by go-swagger; DO NOT EDIT.

package ui_application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AbortUsingPUTReader is a Reader for the AbortUsingPUT structure.
type AbortUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AbortUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAbortUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewAbortUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAbortUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAbortUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAbortUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/clusters/{clusterId}/abort] abortUsingPUT", response, response.Code())
	}
}

// NewAbortUsingPUTOK creates a AbortUsingPUTOK with default headers values
func NewAbortUsingPUTOK() *AbortUsingPUTOK {
	return &AbortUsingPUTOK{}
}

/*
AbortUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type AbortUsingPUTOK struct {
}

// IsSuccess returns true when this abort using p u t o k response has a 2xx status code
func (o *AbortUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this abort using p u t o k response has a 3xx status code
func (o *AbortUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this abort using p u t o k response has a 4xx status code
func (o *AbortUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this abort using p u t o k response has a 5xx status code
func (o *AbortUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this abort using p u t o k response a status code equal to that given
func (o *AbortUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the abort using p u t o k response
func (o *AbortUsingPUTOK) Code() int {
	return 200
}

func (o *AbortUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/abort][%d] abortUsingPUTOK", 200)
}

func (o *AbortUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/abort][%d] abortUsingPUTOK", 200)
}

func (o *AbortUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAbortUsingPUTCreated creates a AbortUsingPUTCreated with default headers values
func NewAbortUsingPUTCreated() *AbortUsingPUTCreated {
	return &AbortUsingPUTCreated{}
}

/*
AbortUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type AbortUsingPUTCreated struct {
}

// IsSuccess returns true when this abort using p u t created response has a 2xx status code
func (o *AbortUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this abort using p u t created response has a 3xx status code
func (o *AbortUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this abort using p u t created response has a 4xx status code
func (o *AbortUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this abort using p u t created response has a 5xx status code
func (o *AbortUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this abort using p u t created response a status code equal to that given
func (o *AbortUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the abort using p u t created response
func (o *AbortUsingPUTCreated) Code() int {
	return 201
}

func (o *AbortUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/abort][%d] abortUsingPUTCreated", 201)
}

func (o *AbortUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/abort][%d] abortUsingPUTCreated", 201)
}

func (o *AbortUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAbortUsingPUTUnauthorized creates a AbortUsingPUTUnauthorized with default headers values
func NewAbortUsingPUTUnauthorized() *AbortUsingPUTUnauthorized {
	return &AbortUsingPUTUnauthorized{}
}

/*
AbortUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AbortUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this abort using p u t unauthorized response has a 2xx status code
func (o *AbortUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this abort using p u t unauthorized response has a 3xx status code
func (o *AbortUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this abort using p u t unauthorized response has a 4xx status code
func (o *AbortUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this abort using p u t unauthorized response has a 5xx status code
func (o *AbortUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this abort using p u t unauthorized response a status code equal to that given
func (o *AbortUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the abort using p u t unauthorized response
func (o *AbortUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *AbortUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/abort][%d] abortUsingPUTUnauthorized", 401)
}

func (o *AbortUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/abort][%d] abortUsingPUTUnauthorized", 401)
}

func (o *AbortUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAbortUsingPUTForbidden creates a AbortUsingPUTForbidden with default headers values
func NewAbortUsingPUTForbidden() *AbortUsingPUTForbidden {
	return &AbortUsingPUTForbidden{}
}

/*
AbortUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AbortUsingPUTForbidden struct {
}

// IsSuccess returns true when this abort using p u t forbidden response has a 2xx status code
func (o *AbortUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this abort using p u t forbidden response has a 3xx status code
func (o *AbortUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this abort using p u t forbidden response has a 4xx status code
func (o *AbortUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this abort using p u t forbidden response has a 5xx status code
func (o *AbortUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this abort using p u t forbidden response a status code equal to that given
func (o *AbortUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the abort using p u t forbidden response
func (o *AbortUsingPUTForbidden) Code() int {
	return 403
}

func (o *AbortUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/abort][%d] abortUsingPUTForbidden", 403)
}

func (o *AbortUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/abort][%d] abortUsingPUTForbidden", 403)
}

func (o *AbortUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAbortUsingPUTNotFound creates a AbortUsingPUTNotFound with default headers values
func NewAbortUsingPUTNotFound() *AbortUsingPUTNotFound {
	return &AbortUsingPUTNotFound{}
}

/*
AbortUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AbortUsingPUTNotFound struct {
}

// IsSuccess returns true when this abort using p u t not found response has a 2xx status code
func (o *AbortUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this abort using p u t not found response has a 3xx status code
func (o *AbortUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this abort using p u t not found response has a 4xx status code
func (o *AbortUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this abort using p u t not found response has a 5xx status code
func (o *AbortUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this abort using p u t not found response a status code equal to that given
func (o *AbortUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the abort using p u t not found response
func (o *AbortUsingPUTNotFound) Code() int {
	return 404
}

func (o *AbortUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/abort][%d] abortUsingPUTNotFound", 404)
}

func (o *AbortUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/abort][%d] abortUsingPUTNotFound", 404)
}

func (o *AbortUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
