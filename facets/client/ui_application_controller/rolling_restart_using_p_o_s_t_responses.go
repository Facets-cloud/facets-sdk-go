// Code generated by go-swagger; DO NOT EDIT.

package ui_application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RollingRestartUsingPOSTReader is a Reader for the RollingRestartUsingPOST structure.
type RollingRestartUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RollingRestartUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRollingRestartUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewRollingRestartUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRollingRestartUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRollingRestartUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRollingRestartUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}] rollingRestartUsingPOST", response, response.Code())
	}
}

// NewRollingRestartUsingPOSTOK creates a RollingRestartUsingPOSTOK with default headers values
func NewRollingRestartUsingPOSTOK() *RollingRestartUsingPOSTOK {
	return &RollingRestartUsingPOSTOK{}
}

/*
RollingRestartUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type RollingRestartUsingPOSTOK struct {
}

// IsSuccess returns true when this rolling restart using p o s t o k response has a 2xx status code
func (o *RollingRestartUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rolling restart using p o s t o k response has a 3xx status code
func (o *RollingRestartUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rolling restart using p o s t o k response has a 4xx status code
func (o *RollingRestartUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this rolling restart using p o s t o k response has a 5xx status code
func (o *RollingRestartUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this rolling restart using p o s t o k response a status code equal to that given
func (o *RollingRestartUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the rolling restart using p o s t o k response
func (o *RollingRestartUsingPOSTOK) Code() int {
	return 200
}

func (o *RollingRestartUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartUsingPOSTOK", 200)
}

func (o *RollingRestartUsingPOSTOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartUsingPOSTOK", 200)
}

func (o *RollingRestartUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRollingRestartUsingPOSTCreated creates a RollingRestartUsingPOSTCreated with default headers values
func NewRollingRestartUsingPOSTCreated() *RollingRestartUsingPOSTCreated {
	return &RollingRestartUsingPOSTCreated{}
}

/*
RollingRestartUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type RollingRestartUsingPOSTCreated struct {
}

// IsSuccess returns true when this rolling restart using p o s t created response has a 2xx status code
func (o *RollingRestartUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rolling restart using p o s t created response has a 3xx status code
func (o *RollingRestartUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rolling restart using p o s t created response has a 4xx status code
func (o *RollingRestartUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this rolling restart using p o s t created response has a 5xx status code
func (o *RollingRestartUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this rolling restart using p o s t created response a status code equal to that given
func (o *RollingRestartUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the rolling restart using p o s t created response
func (o *RollingRestartUsingPOSTCreated) Code() int {
	return 201
}

func (o *RollingRestartUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartUsingPOSTCreated", 201)
}

func (o *RollingRestartUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartUsingPOSTCreated", 201)
}

func (o *RollingRestartUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRollingRestartUsingPOSTUnauthorized creates a RollingRestartUsingPOSTUnauthorized with default headers values
func NewRollingRestartUsingPOSTUnauthorized() *RollingRestartUsingPOSTUnauthorized {
	return &RollingRestartUsingPOSTUnauthorized{}
}

/*
RollingRestartUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RollingRestartUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this rolling restart using p o s t unauthorized response has a 2xx status code
func (o *RollingRestartUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rolling restart using p o s t unauthorized response has a 3xx status code
func (o *RollingRestartUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rolling restart using p o s t unauthorized response has a 4xx status code
func (o *RollingRestartUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this rolling restart using p o s t unauthorized response has a 5xx status code
func (o *RollingRestartUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this rolling restart using p o s t unauthorized response a status code equal to that given
func (o *RollingRestartUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the rolling restart using p o s t unauthorized response
func (o *RollingRestartUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *RollingRestartUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartUsingPOSTUnauthorized", 401)
}

func (o *RollingRestartUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartUsingPOSTUnauthorized", 401)
}

func (o *RollingRestartUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRollingRestartUsingPOSTForbidden creates a RollingRestartUsingPOSTForbidden with default headers values
func NewRollingRestartUsingPOSTForbidden() *RollingRestartUsingPOSTForbidden {
	return &RollingRestartUsingPOSTForbidden{}
}

/*
RollingRestartUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RollingRestartUsingPOSTForbidden struct {
}

// IsSuccess returns true when this rolling restart using p o s t forbidden response has a 2xx status code
func (o *RollingRestartUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rolling restart using p o s t forbidden response has a 3xx status code
func (o *RollingRestartUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rolling restart using p o s t forbidden response has a 4xx status code
func (o *RollingRestartUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this rolling restart using p o s t forbidden response has a 5xx status code
func (o *RollingRestartUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this rolling restart using p o s t forbidden response a status code equal to that given
func (o *RollingRestartUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the rolling restart using p o s t forbidden response
func (o *RollingRestartUsingPOSTForbidden) Code() int {
	return 403
}

func (o *RollingRestartUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartUsingPOSTForbidden", 403)
}

func (o *RollingRestartUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartUsingPOSTForbidden", 403)
}

func (o *RollingRestartUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRollingRestartUsingPOSTNotFound creates a RollingRestartUsingPOSTNotFound with default headers values
func NewRollingRestartUsingPOSTNotFound() *RollingRestartUsingPOSTNotFound {
	return &RollingRestartUsingPOSTNotFound{}
}

/*
RollingRestartUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RollingRestartUsingPOSTNotFound struct {
}

// IsSuccess returns true when this rolling restart using p o s t not found response has a 2xx status code
func (o *RollingRestartUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rolling restart using p o s t not found response has a 3xx status code
func (o *RollingRestartUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rolling restart using p o s t not found response has a 4xx status code
func (o *RollingRestartUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this rolling restart using p o s t not found response has a 5xx status code
func (o *RollingRestartUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this rolling restart using p o s t not found response a status code equal to that given
func (o *RollingRestartUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the rolling restart using p o s t not found response
func (o *RollingRestartUsingPOSTNotFound) Code() int {
	return 404
}

func (o *RollingRestartUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartUsingPOSTNotFound", 404)
}

func (o *RollingRestartUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/restart/{applicationName}][%d] rollingRestartUsingPOSTNotFound", 404)
}

func (o *RollingRestartUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
