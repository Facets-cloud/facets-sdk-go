// Code generated by go-swagger; DO NOT EDIT.

package ui_local_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateClusterUsingPUT3Reader is a Reader for the UpdateClusterUsingPUT3 structure.
type UpdateClusterUsingPUT3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateClusterUsingPUT3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateClusterUsingPUT3OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateClusterUsingPUT3Created()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateClusterUsingPUT3Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateClusterUsingPUT3Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateClusterUsingPUT3NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/local/clusters/{clusterId}] updateClusterUsingPUT3", response, response.Code())
	}
}

// NewUpdateClusterUsingPUT3OK creates a UpdateClusterUsingPUT3OK with default headers values
func NewUpdateClusterUsingPUT3OK() *UpdateClusterUsingPUT3OK {
	return &UpdateClusterUsingPUT3OK{}
}

/*
UpdateClusterUsingPUT3OK describes a response with status code 200, with default header values.

OK
*/
type UpdateClusterUsingPUT3OK struct {
	Payload *models.LocalCluster
}

// IsSuccess returns true when this update cluster using p u t3 o k response has a 2xx status code
func (o *UpdateClusterUsingPUT3OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update cluster using p u t3 o k response has a 3xx status code
func (o *UpdateClusterUsingPUT3OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster using p u t3 o k response has a 4xx status code
func (o *UpdateClusterUsingPUT3OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update cluster using p u t3 o k response has a 5xx status code
func (o *UpdateClusterUsingPUT3OK) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster using p u t3 o k response a status code equal to that given
func (o *UpdateClusterUsingPUT3OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update cluster using p u t3 o k response
func (o *UpdateClusterUsingPUT3OK) Code() int {
	return 200
}

func (o *UpdateClusterUsingPUT3OK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/local/clusters/{clusterId}][%d] updateClusterUsingPUT3OK %s", 200, payload)
}

func (o *UpdateClusterUsingPUT3OK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/local/clusters/{clusterId}][%d] updateClusterUsingPUT3OK %s", 200, payload)
}

func (o *UpdateClusterUsingPUT3OK) GetPayload() *models.LocalCluster {
	return o.Payload
}

func (o *UpdateClusterUsingPUT3OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LocalCluster)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClusterUsingPUT3Created creates a UpdateClusterUsingPUT3Created with default headers values
func NewUpdateClusterUsingPUT3Created() *UpdateClusterUsingPUT3Created {
	return &UpdateClusterUsingPUT3Created{}
}

/*
UpdateClusterUsingPUT3Created describes a response with status code 201, with default header values.

Created
*/
type UpdateClusterUsingPUT3Created struct {
}

// IsSuccess returns true when this update cluster using p u t3 created response has a 2xx status code
func (o *UpdateClusterUsingPUT3Created) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update cluster using p u t3 created response has a 3xx status code
func (o *UpdateClusterUsingPUT3Created) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster using p u t3 created response has a 4xx status code
func (o *UpdateClusterUsingPUT3Created) IsClientError() bool {
	return false
}

// IsServerError returns true when this update cluster using p u t3 created response has a 5xx status code
func (o *UpdateClusterUsingPUT3Created) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster using p u t3 created response a status code equal to that given
func (o *UpdateClusterUsingPUT3Created) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update cluster using p u t3 created response
func (o *UpdateClusterUsingPUT3Created) Code() int {
	return 201
}

func (o *UpdateClusterUsingPUT3Created) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/local/clusters/{clusterId}][%d] updateClusterUsingPUT3Created", 201)
}

func (o *UpdateClusterUsingPUT3Created) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/local/clusters/{clusterId}][%d] updateClusterUsingPUT3Created", 201)
}

func (o *UpdateClusterUsingPUT3Created) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateClusterUsingPUT3Unauthorized creates a UpdateClusterUsingPUT3Unauthorized with default headers values
func NewUpdateClusterUsingPUT3Unauthorized() *UpdateClusterUsingPUT3Unauthorized {
	return &UpdateClusterUsingPUT3Unauthorized{}
}

/*
UpdateClusterUsingPUT3Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateClusterUsingPUT3Unauthorized struct {
}

// IsSuccess returns true when this update cluster using p u t3 unauthorized response has a 2xx status code
func (o *UpdateClusterUsingPUT3Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cluster using p u t3 unauthorized response has a 3xx status code
func (o *UpdateClusterUsingPUT3Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster using p u t3 unauthorized response has a 4xx status code
func (o *UpdateClusterUsingPUT3Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cluster using p u t3 unauthorized response has a 5xx status code
func (o *UpdateClusterUsingPUT3Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster using p u t3 unauthorized response a status code equal to that given
func (o *UpdateClusterUsingPUT3Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update cluster using p u t3 unauthorized response
func (o *UpdateClusterUsingPUT3Unauthorized) Code() int {
	return 401
}

func (o *UpdateClusterUsingPUT3Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/local/clusters/{clusterId}][%d] updateClusterUsingPUT3Unauthorized", 401)
}

func (o *UpdateClusterUsingPUT3Unauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/local/clusters/{clusterId}][%d] updateClusterUsingPUT3Unauthorized", 401)
}

func (o *UpdateClusterUsingPUT3Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateClusterUsingPUT3Forbidden creates a UpdateClusterUsingPUT3Forbidden with default headers values
func NewUpdateClusterUsingPUT3Forbidden() *UpdateClusterUsingPUT3Forbidden {
	return &UpdateClusterUsingPUT3Forbidden{}
}

/*
UpdateClusterUsingPUT3Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateClusterUsingPUT3Forbidden struct {
}

// IsSuccess returns true when this update cluster using p u t3 forbidden response has a 2xx status code
func (o *UpdateClusterUsingPUT3Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cluster using p u t3 forbidden response has a 3xx status code
func (o *UpdateClusterUsingPUT3Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster using p u t3 forbidden response has a 4xx status code
func (o *UpdateClusterUsingPUT3Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cluster using p u t3 forbidden response has a 5xx status code
func (o *UpdateClusterUsingPUT3Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster using p u t3 forbidden response a status code equal to that given
func (o *UpdateClusterUsingPUT3Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update cluster using p u t3 forbidden response
func (o *UpdateClusterUsingPUT3Forbidden) Code() int {
	return 403
}

func (o *UpdateClusterUsingPUT3Forbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/local/clusters/{clusterId}][%d] updateClusterUsingPUT3Forbidden", 403)
}

func (o *UpdateClusterUsingPUT3Forbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/local/clusters/{clusterId}][%d] updateClusterUsingPUT3Forbidden", 403)
}

func (o *UpdateClusterUsingPUT3Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateClusterUsingPUT3NotFound creates a UpdateClusterUsingPUT3NotFound with default headers values
func NewUpdateClusterUsingPUT3NotFound() *UpdateClusterUsingPUT3NotFound {
	return &UpdateClusterUsingPUT3NotFound{}
}

/*
UpdateClusterUsingPUT3NotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateClusterUsingPUT3NotFound struct {
}

// IsSuccess returns true when this update cluster using p u t3 not found response has a 2xx status code
func (o *UpdateClusterUsingPUT3NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cluster using p u t3 not found response has a 3xx status code
func (o *UpdateClusterUsingPUT3NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster using p u t3 not found response has a 4xx status code
func (o *UpdateClusterUsingPUT3NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cluster using p u t3 not found response has a 5xx status code
func (o *UpdateClusterUsingPUT3NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster using p u t3 not found response a status code equal to that given
func (o *UpdateClusterUsingPUT3NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update cluster using p u t3 not found response
func (o *UpdateClusterUsingPUT3NotFound) Code() int {
	return 404
}

func (o *UpdateClusterUsingPUT3NotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/local/clusters/{clusterId}][%d] updateClusterUsingPUT3NotFound", 404)
}

func (o *UpdateClusterUsingPUT3NotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/local/clusters/{clusterId}][%d] updateClusterUsingPUT3NotFound", 404)
}

func (o *UpdateClusterUsingPUT3NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
