// Code generated by go-swagger; DO NOT EDIT.

package ui_local_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui local cluster controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui local cluster controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui local cluster controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui local cluster controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateClusterUsingPOST3(params *CreateClusterUsingPOST3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateClusterUsingPOST3OK, *CreateClusterUsingPOST3Created, error)

	GetClusterUsingGET3(params *GetClusterUsingGET3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterUsingGET3OK, error)

	GetVagrantUsingGET(params *GetVagrantUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVagrantUsingGETOK, error)

	UpdateClusterUsingPUT3(params *UpdateClusterUsingPUT3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClusterUsingPUT3OK, *UpdateClusterUsingPUT3Created, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateClusterUsingPOST3 creates a new environment for a blueprint
*/
func (a *Client) CreateClusterUsingPOST3(params *CreateClusterUsingPOST3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateClusterUsingPOST3OK, *CreateClusterUsingPOST3Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterUsingPOST3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createClusterUsingPOST3",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/local/clusters",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateClusterUsingPOST3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateClusterUsingPOST3OK:
		return value, nil, nil
	case *CreateClusterUsingPOST3Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_local_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterUsingGET3 gets cluster
*/
func (a *Client) GetClusterUsingGET3(params *GetClusterUsingGET3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterUsingGET3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterUsingGET3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterUsingGET3",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/local/clusters/{clusterId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterUsingGET3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterUsingGET3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterUsingGET3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVagrantUsingGET gets vagrant
*/
func (a *Client) GetVagrantUsingGET(params *GetVagrantUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVagrantUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVagrantUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVagrantUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/local/clusters/{clusterId}/vagrant",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVagrantUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVagrantUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVagrantUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateClusterUsingPUT3 updates cluster
*/
func (a *Client) UpdateClusterUsingPUT3(params *UpdateClusterUsingPUT3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClusterUsingPUT3OK, *UpdateClusterUsingPUT3Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterUsingPUT3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateClusterUsingPUT3",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/local/clusters/{clusterId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterUsingPUT3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateClusterUsingPUT3OK:
		return value, nil, nil
	case *UpdateClusterUsingPUT3Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_local_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
