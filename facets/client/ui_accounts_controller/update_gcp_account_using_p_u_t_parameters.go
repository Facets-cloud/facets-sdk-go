// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// NewUpdateGcpAccountUsingPUTParams creates a new UpdateGcpAccountUsingPUTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateGcpAccountUsingPUTParams() *UpdateGcpAccountUsingPUTParams {
	return &UpdateGcpAccountUsingPUTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateGcpAccountUsingPUTParamsWithTimeout creates a new UpdateGcpAccountUsingPUTParams object
// with the ability to set a timeout on a request.
func NewUpdateGcpAccountUsingPUTParamsWithTimeout(timeout time.Duration) *UpdateGcpAccountUsingPUTParams {
	return &UpdateGcpAccountUsingPUTParams{
		timeout: timeout,
	}
}

// NewUpdateGcpAccountUsingPUTParamsWithContext creates a new UpdateGcpAccountUsingPUTParams object
// with the ability to set a context for a request.
func NewUpdateGcpAccountUsingPUTParamsWithContext(ctx context.Context) *UpdateGcpAccountUsingPUTParams {
	return &UpdateGcpAccountUsingPUTParams{
		Context: ctx,
	}
}

// NewUpdateGcpAccountUsingPUTParamsWithHTTPClient creates a new UpdateGcpAccountUsingPUTParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateGcpAccountUsingPUTParamsWithHTTPClient(client *http.Client) *UpdateGcpAccountUsingPUTParams {
	return &UpdateGcpAccountUsingPUTParams{
		HTTPClient: client,
	}
}

/*
UpdateGcpAccountUsingPUTParams contains all the parameters to send to the API endpoint

	for the update gcp account using p u t operation.

	Typically these are written to a http.Request.
*/
type UpdateGcpAccountUsingPUTParams struct {

	/* GcpAccountRequest.

	   gcpAccountRequest
	*/
	GcpAccountRequest *models.GcpAccount

	/* ID.

	   id
	*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update gcp account using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateGcpAccountUsingPUTParams) WithDefaults() *UpdateGcpAccountUsingPUTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update gcp account using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateGcpAccountUsingPUTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update gcp account using p u t params
func (o *UpdateGcpAccountUsingPUTParams) WithTimeout(timeout time.Duration) *UpdateGcpAccountUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update gcp account using p u t params
func (o *UpdateGcpAccountUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update gcp account using p u t params
func (o *UpdateGcpAccountUsingPUTParams) WithContext(ctx context.Context) *UpdateGcpAccountUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update gcp account using p u t params
func (o *UpdateGcpAccountUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update gcp account using p u t params
func (o *UpdateGcpAccountUsingPUTParams) WithHTTPClient(client *http.Client) *UpdateGcpAccountUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update gcp account using p u t params
func (o *UpdateGcpAccountUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGcpAccountRequest adds the gcpAccountRequest to the update gcp account using p u t params
func (o *UpdateGcpAccountUsingPUTParams) WithGcpAccountRequest(gcpAccountRequest *models.GcpAccount) *UpdateGcpAccountUsingPUTParams {
	o.SetGcpAccountRequest(gcpAccountRequest)
	return o
}

// SetGcpAccountRequest adds the gcpAccountRequest to the update gcp account using p u t params
func (o *UpdateGcpAccountUsingPUTParams) SetGcpAccountRequest(gcpAccountRequest *models.GcpAccount) {
	o.GcpAccountRequest = gcpAccountRequest
}

// WithID adds the id to the update gcp account using p u t params
func (o *UpdateGcpAccountUsingPUTParams) WithID(id string) *UpdateGcpAccountUsingPUTParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update gcp account using p u t params
func (o *UpdateGcpAccountUsingPUTParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateGcpAccountUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.GcpAccountRequest != nil {
		if err := r.SetBodyParam(o.GcpAccountRequest); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
