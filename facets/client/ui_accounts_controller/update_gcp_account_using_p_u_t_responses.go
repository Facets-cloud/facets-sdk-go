// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateGcpAccountUsingPUTReader is a Reader for the UpdateGcpAccountUsingPUT structure.
type UpdateGcpAccountUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGcpAccountUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGcpAccountUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateGcpAccountUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateGcpAccountUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateGcpAccountUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGcpAccountUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/accounts/gcp/{id}] updateGcpAccountUsingPUT", response, response.Code())
	}
}

// NewUpdateGcpAccountUsingPUTOK creates a UpdateGcpAccountUsingPUTOK with default headers values
func NewUpdateGcpAccountUsingPUTOK() *UpdateGcpAccountUsingPUTOK {
	return &UpdateGcpAccountUsingPUTOK{}
}

/*
UpdateGcpAccountUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateGcpAccountUsingPUTOK struct {
	Payload *models.GcpAccount
}

// IsSuccess returns true when this update gcp account using p u t o k response has a 2xx status code
func (o *UpdateGcpAccountUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update gcp account using p u t o k response has a 3xx status code
func (o *UpdateGcpAccountUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gcp account using p u t o k response has a 4xx status code
func (o *UpdateGcpAccountUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update gcp account using p u t o k response has a 5xx status code
func (o *UpdateGcpAccountUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update gcp account using p u t o k response a status code equal to that given
func (o *UpdateGcpAccountUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update gcp account using p u t o k response
func (o *UpdateGcpAccountUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateGcpAccountUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountUsingPUTOK %s", 200, payload)
}

func (o *UpdateGcpAccountUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountUsingPUTOK %s", 200, payload)
}

func (o *UpdateGcpAccountUsingPUTOK) GetPayload() *models.GcpAccount {
	return o.Payload
}

func (o *UpdateGcpAccountUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GcpAccount)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGcpAccountUsingPUTCreated creates a UpdateGcpAccountUsingPUTCreated with default headers values
func NewUpdateGcpAccountUsingPUTCreated() *UpdateGcpAccountUsingPUTCreated {
	return &UpdateGcpAccountUsingPUTCreated{}
}

/*
UpdateGcpAccountUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateGcpAccountUsingPUTCreated struct {
}

// IsSuccess returns true when this update gcp account using p u t created response has a 2xx status code
func (o *UpdateGcpAccountUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update gcp account using p u t created response has a 3xx status code
func (o *UpdateGcpAccountUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gcp account using p u t created response has a 4xx status code
func (o *UpdateGcpAccountUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update gcp account using p u t created response has a 5xx status code
func (o *UpdateGcpAccountUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update gcp account using p u t created response a status code equal to that given
func (o *UpdateGcpAccountUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update gcp account using p u t created response
func (o *UpdateGcpAccountUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateGcpAccountUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountUsingPUTCreated", 201)
}

func (o *UpdateGcpAccountUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountUsingPUTCreated", 201)
}

func (o *UpdateGcpAccountUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGcpAccountUsingPUTUnauthorized creates a UpdateGcpAccountUsingPUTUnauthorized with default headers values
func NewUpdateGcpAccountUsingPUTUnauthorized() *UpdateGcpAccountUsingPUTUnauthorized {
	return &UpdateGcpAccountUsingPUTUnauthorized{}
}

/*
UpdateGcpAccountUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateGcpAccountUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update gcp account using p u t unauthorized response has a 2xx status code
func (o *UpdateGcpAccountUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gcp account using p u t unauthorized response has a 3xx status code
func (o *UpdateGcpAccountUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gcp account using p u t unauthorized response has a 4xx status code
func (o *UpdateGcpAccountUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gcp account using p u t unauthorized response has a 5xx status code
func (o *UpdateGcpAccountUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update gcp account using p u t unauthorized response a status code equal to that given
func (o *UpdateGcpAccountUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update gcp account using p u t unauthorized response
func (o *UpdateGcpAccountUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateGcpAccountUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountUsingPUTUnauthorized", 401)
}

func (o *UpdateGcpAccountUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountUsingPUTUnauthorized", 401)
}

func (o *UpdateGcpAccountUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGcpAccountUsingPUTForbidden creates a UpdateGcpAccountUsingPUTForbidden with default headers values
func NewUpdateGcpAccountUsingPUTForbidden() *UpdateGcpAccountUsingPUTForbidden {
	return &UpdateGcpAccountUsingPUTForbidden{}
}

/*
UpdateGcpAccountUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateGcpAccountUsingPUTForbidden struct {
}

// IsSuccess returns true when this update gcp account using p u t forbidden response has a 2xx status code
func (o *UpdateGcpAccountUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gcp account using p u t forbidden response has a 3xx status code
func (o *UpdateGcpAccountUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gcp account using p u t forbidden response has a 4xx status code
func (o *UpdateGcpAccountUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gcp account using p u t forbidden response has a 5xx status code
func (o *UpdateGcpAccountUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update gcp account using p u t forbidden response a status code equal to that given
func (o *UpdateGcpAccountUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update gcp account using p u t forbidden response
func (o *UpdateGcpAccountUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateGcpAccountUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountUsingPUTForbidden", 403)
}

func (o *UpdateGcpAccountUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountUsingPUTForbidden", 403)
}

func (o *UpdateGcpAccountUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGcpAccountUsingPUTNotFound creates a UpdateGcpAccountUsingPUTNotFound with default headers values
func NewUpdateGcpAccountUsingPUTNotFound() *UpdateGcpAccountUsingPUTNotFound {
	return &UpdateGcpAccountUsingPUTNotFound{}
}

/*
UpdateGcpAccountUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateGcpAccountUsingPUTNotFound struct {
}

// IsSuccess returns true when this update gcp account using p u t not found response has a 2xx status code
func (o *UpdateGcpAccountUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gcp account using p u t not found response has a 3xx status code
func (o *UpdateGcpAccountUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gcp account using p u t not found response has a 4xx status code
func (o *UpdateGcpAccountUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gcp account using p u t not found response has a 5xx status code
func (o *UpdateGcpAccountUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update gcp account using p u t not found response a status code equal to that given
func (o *UpdateGcpAccountUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update gcp account using p u t not found response
func (o *UpdateGcpAccountUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateGcpAccountUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountUsingPUTNotFound", 404)
}

func (o *UpdateGcpAccountUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountUsingPUTNotFound", 404)
}

func (o *UpdateGcpAccountUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
