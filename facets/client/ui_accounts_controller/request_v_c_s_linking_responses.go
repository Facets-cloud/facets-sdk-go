// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RequestVCSLinkingReader is a Reader for the RequestVCSLinking structure.
type RequestVCSLinkingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RequestVCSLinkingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRequestVCSLinkingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRequestVCSLinkingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRequestVCSLinkingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRequestVCSLinkingMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRequestVCSLinkingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/accounts/link-vcs] requestVCSLinking", response, response.Code())
	}
}

// NewRequestVCSLinkingOK creates a RequestVCSLinkingOK with default headers values
func NewRequestVCSLinkingOK() *RequestVCSLinkingOK {
	return &RequestVCSLinkingOK{}
}

/*
RequestVCSLinkingOK describes a response with status code 200, with default header values.

OK
*/
type RequestVCSLinkingOK struct {
	Payload *models.VCSLinkingResponse
}

// IsSuccess returns true when this request v c s linking o k response has a 2xx status code
func (o *RequestVCSLinkingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this request v c s linking o k response has a 3xx status code
func (o *RequestVCSLinkingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request v c s linking o k response has a 4xx status code
func (o *RequestVCSLinkingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this request v c s linking o k response has a 5xx status code
func (o *RequestVCSLinkingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this request v c s linking o k response a status code equal to that given
func (o *RequestVCSLinkingOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the request v c s linking o k response
func (o *RequestVCSLinkingOK) Code() int {
	return 200
}

func (o *RequestVCSLinkingOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingOK %s", 200, payload)
}

func (o *RequestVCSLinkingOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingOK %s", 200, payload)
}

func (o *RequestVCSLinkingOK) GetPayload() *models.VCSLinkingResponse {
	return o.Payload
}

func (o *RequestVCSLinkingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VCSLinkingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestVCSLinkingBadRequest creates a RequestVCSLinkingBadRequest with default headers values
func NewRequestVCSLinkingBadRequest() *RequestVCSLinkingBadRequest {
	return &RequestVCSLinkingBadRequest{}
}

/*
RequestVCSLinkingBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RequestVCSLinkingBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this request v c s linking bad request response has a 2xx status code
func (o *RequestVCSLinkingBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request v c s linking bad request response has a 3xx status code
func (o *RequestVCSLinkingBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request v c s linking bad request response has a 4xx status code
func (o *RequestVCSLinkingBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this request v c s linking bad request response has a 5xx status code
func (o *RequestVCSLinkingBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this request v c s linking bad request response a status code equal to that given
func (o *RequestVCSLinkingBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the request v c s linking bad request response
func (o *RequestVCSLinkingBadRequest) Code() int {
	return 400
}

func (o *RequestVCSLinkingBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingBadRequest %s", 400, payload)
}

func (o *RequestVCSLinkingBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingBadRequest %s", 400, payload)
}

func (o *RequestVCSLinkingBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RequestVCSLinkingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestVCSLinkingNotFound creates a RequestVCSLinkingNotFound with default headers values
func NewRequestVCSLinkingNotFound() *RequestVCSLinkingNotFound {
	return &RequestVCSLinkingNotFound{}
}

/*
RequestVCSLinkingNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RequestVCSLinkingNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this request v c s linking not found response has a 2xx status code
func (o *RequestVCSLinkingNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request v c s linking not found response has a 3xx status code
func (o *RequestVCSLinkingNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request v c s linking not found response has a 4xx status code
func (o *RequestVCSLinkingNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this request v c s linking not found response has a 5xx status code
func (o *RequestVCSLinkingNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this request v c s linking not found response a status code equal to that given
func (o *RequestVCSLinkingNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the request v c s linking not found response
func (o *RequestVCSLinkingNotFound) Code() int {
	return 404
}

func (o *RequestVCSLinkingNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingNotFound %s", 404, payload)
}

func (o *RequestVCSLinkingNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingNotFound %s", 404, payload)
}

func (o *RequestVCSLinkingNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RequestVCSLinkingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestVCSLinkingMethodNotAllowed creates a RequestVCSLinkingMethodNotAllowed with default headers values
func NewRequestVCSLinkingMethodNotAllowed() *RequestVCSLinkingMethodNotAllowed {
	return &RequestVCSLinkingMethodNotAllowed{}
}

/*
RequestVCSLinkingMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RequestVCSLinkingMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this request v c s linking method not allowed response has a 2xx status code
func (o *RequestVCSLinkingMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request v c s linking method not allowed response has a 3xx status code
func (o *RequestVCSLinkingMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request v c s linking method not allowed response has a 4xx status code
func (o *RequestVCSLinkingMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this request v c s linking method not allowed response has a 5xx status code
func (o *RequestVCSLinkingMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this request v c s linking method not allowed response a status code equal to that given
func (o *RequestVCSLinkingMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the request v c s linking method not allowed response
func (o *RequestVCSLinkingMethodNotAllowed) Code() int {
	return 405
}

func (o *RequestVCSLinkingMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingMethodNotAllowed %s", 405, payload)
}

func (o *RequestVCSLinkingMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingMethodNotAllowed %s", 405, payload)
}

func (o *RequestVCSLinkingMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RequestVCSLinkingMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestVCSLinkingInternalServerError creates a RequestVCSLinkingInternalServerError with default headers values
func NewRequestVCSLinkingInternalServerError() *RequestVCSLinkingInternalServerError {
	return &RequestVCSLinkingInternalServerError{}
}

/*
RequestVCSLinkingInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RequestVCSLinkingInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this request v c s linking internal server error response has a 2xx status code
func (o *RequestVCSLinkingInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request v c s linking internal server error response has a 3xx status code
func (o *RequestVCSLinkingInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request v c s linking internal server error response has a 4xx status code
func (o *RequestVCSLinkingInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this request v c s linking internal server error response has a 5xx status code
func (o *RequestVCSLinkingInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this request v c s linking internal server error response a status code equal to that given
func (o *RequestVCSLinkingInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the request v c s linking internal server error response
func (o *RequestVCSLinkingInternalServerError) Code() int {
	return 500
}

func (o *RequestVCSLinkingInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingInternalServerError %s", 500, payload)
}

func (o *RequestVCSLinkingInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingInternalServerError %s", 500, payload)
}

func (o *RequestVCSLinkingInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RequestVCSLinkingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
