// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ValidateGitlabAccountReader is a Reader for the ValidateGitlabAccount structure.
type ValidateGitlabAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateGitlabAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateGitlabAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateGitlabAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewValidateGitlabAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewValidateGitlabAccountMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewValidateGitlabAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/accounts/gitlab/validate] validateGitlabAccount", response, response.Code())
	}
}

// NewValidateGitlabAccountOK creates a ValidateGitlabAccountOK with default headers values
func NewValidateGitlabAccountOK() *ValidateGitlabAccountOK {
	return &ValidateGitlabAccountOK{}
}

/*
ValidateGitlabAccountOK describes a response with status code 200, with default header values.

OK
*/
type ValidateGitlabAccountOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this validate gitlab account o k response has a 2xx status code
func (o *ValidateGitlabAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate gitlab account o k response has a 3xx status code
func (o *ValidateGitlabAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gitlab account o k response has a 4xx status code
func (o *ValidateGitlabAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate gitlab account o k response has a 5xx status code
func (o *ValidateGitlabAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gitlab account o k response a status code equal to that given
func (o *ValidateGitlabAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate gitlab account o k response
func (o *ValidateGitlabAccountOK) Code() int {
	return 200
}

func (o *ValidateGitlabAccountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountOK %s", 200, payload)
}

func (o *ValidateGitlabAccountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountOK %s", 200, payload)
}

func (o *ValidateGitlabAccountOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *ValidateGitlabAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateGitlabAccountBadRequest creates a ValidateGitlabAccountBadRequest with default headers values
func NewValidateGitlabAccountBadRequest() *ValidateGitlabAccountBadRequest {
	return &ValidateGitlabAccountBadRequest{}
}

/*
ValidateGitlabAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ValidateGitlabAccountBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate gitlab account bad request response has a 2xx status code
func (o *ValidateGitlabAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate gitlab account bad request response has a 3xx status code
func (o *ValidateGitlabAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gitlab account bad request response has a 4xx status code
func (o *ValidateGitlabAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate gitlab account bad request response has a 5xx status code
func (o *ValidateGitlabAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gitlab account bad request response a status code equal to that given
func (o *ValidateGitlabAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the validate gitlab account bad request response
func (o *ValidateGitlabAccountBadRequest) Code() int {
	return 400
}

func (o *ValidateGitlabAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountBadRequest %s", 400, payload)
}

func (o *ValidateGitlabAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountBadRequest %s", 400, payload)
}

func (o *ValidateGitlabAccountBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateGitlabAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateGitlabAccountNotFound creates a ValidateGitlabAccountNotFound with default headers values
func NewValidateGitlabAccountNotFound() *ValidateGitlabAccountNotFound {
	return &ValidateGitlabAccountNotFound{}
}

/*
ValidateGitlabAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ValidateGitlabAccountNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate gitlab account not found response has a 2xx status code
func (o *ValidateGitlabAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate gitlab account not found response has a 3xx status code
func (o *ValidateGitlabAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gitlab account not found response has a 4xx status code
func (o *ValidateGitlabAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate gitlab account not found response has a 5xx status code
func (o *ValidateGitlabAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gitlab account not found response a status code equal to that given
func (o *ValidateGitlabAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the validate gitlab account not found response
func (o *ValidateGitlabAccountNotFound) Code() int {
	return 404
}

func (o *ValidateGitlabAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountNotFound %s", 404, payload)
}

func (o *ValidateGitlabAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountNotFound %s", 404, payload)
}

func (o *ValidateGitlabAccountNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateGitlabAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateGitlabAccountMethodNotAllowed creates a ValidateGitlabAccountMethodNotAllowed with default headers values
func NewValidateGitlabAccountMethodNotAllowed() *ValidateGitlabAccountMethodNotAllowed {
	return &ValidateGitlabAccountMethodNotAllowed{}
}

/*
ValidateGitlabAccountMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ValidateGitlabAccountMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate gitlab account method not allowed response has a 2xx status code
func (o *ValidateGitlabAccountMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate gitlab account method not allowed response has a 3xx status code
func (o *ValidateGitlabAccountMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gitlab account method not allowed response has a 4xx status code
func (o *ValidateGitlabAccountMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate gitlab account method not allowed response has a 5xx status code
func (o *ValidateGitlabAccountMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gitlab account method not allowed response a status code equal to that given
func (o *ValidateGitlabAccountMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the validate gitlab account method not allowed response
func (o *ValidateGitlabAccountMethodNotAllowed) Code() int {
	return 405
}

func (o *ValidateGitlabAccountMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountMethodNotAllowed %s", 405, payload)
}

func (o *ValidateGitlabAccountMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountMethodNotAllowed %s", 405, payload)
}

func (o *ValidateGitlabAccountMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateGitlabAccountMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateGitlabAccountInternalServerError creates a ValidateGitlabAccountInternalServerError with default headers values
func NewValidateGitlabAccountInternalServerError() *ValidateGitlabAccountInternalServerError {
	return &ValidateGitlabAccountInternalServerError{}
}

/*
ValidateGitlabAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ValidateGitlabAccountInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate gitlab account internal server error response has a 2xx status code
func (o *ValidateGitlabAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate gitlab account internal server error response has a 3xx status code
func (o *ValidateGitlabAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gitlab account internal server error response has a 4xx status code
func (o *ValidateGitlabAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate gitlab account internal server error response has a 5xx status code
func (o *ValidateGitlabAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this validate gitlab account internal server error response a status code equal to that given
func (o *ValidateGitlabAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the validate gitlab account internal server error response
func (o *ValidateGitlabAccountInternalServerError) Code() int {
	return 500
}

func (o *ValidateGitlabAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountInternalServerError %s", 500, payload)
}

func (o *ValidateGitlabAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountInternalServerError %s", 500, payload)
}

func (o *ValidateGitlabAccountInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateGitlabAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
