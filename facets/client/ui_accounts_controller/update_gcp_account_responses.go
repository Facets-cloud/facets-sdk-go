// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateGcpAccountReader is a Reader for the UpdateGcpAccount structure.
type UpdateGcpAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGcpAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGcpAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateGcpAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGcpAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateGcpAccountMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateGcpAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/accounts/gcp/{id}] updateGcpAccount", response, response.Code())
	}
}

// NewUpdateGcpAccountOK creates a UpdateGcpAccountOK with default headers values
func NewUpdateGcpAccountOK() *UpdateGcpAccountOK {
	return &UpdateGcpAccountOK{}
}

/*
UpdateGcpAccountOK describes a response with status code 200, with default header values.

OK
*/
type UpdateGcpAccountOK struct {
	Payload *models.GcpAccount
}

// IsSuccess returns true when this update gcp account o k response has a 2xx status code
func (o *UpdateGcpAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update gcp account o k response has a 3xx status code
func (o *UpdateGcpAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gcp account o k response has a 4xx status code
func (o *UpdateGcpAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update gcp account o k response has a 5xx status code
func (o *UpdateGcpAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update gcp account o k response a status code equal to that given
func (o *UpdateGcpAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update gcp account o k response
func (o *UpdateGcpAccountOK) Code() int {
	return 200
}

func (o *UpdateGcpAccountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountOK %s", 200, payload)
}

func (o *UpdateGcpAccountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountOK %s", 200, payload)
}

func (o *UpdateGcpAccountOK) GetPayload() *models.GcpAccount {
	return o.Payload
}

func (o *UpdateGcpAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GcpAccount)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGcpAccountBadRequest creates a UpdateGcpAccountBadRequest with default headers values
func NewUpdateGcpAccountBadRequest() *UpdateGcpAccountBadRequest {
	return &UpdateGcpAccountBadRequest{}
}

/*
UpdateGcpAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateGcpAccountBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update gcp account bad request response has a 2xx status code
func (o *UpdateGcpAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gcp account bad request response has a 3xx status code
func (o *UpdateGcpAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gcp account bad request response has a 4xx status code
func (o *UpdateGcpAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gcp account bad request response has a 5xx status code
func (o *UpdateGcpAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update gcp account bad request response a status code equal to that given
func (o *UpdateGcpAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update gcp account bad request response
func (o *UpdateGcpAccountBadRequest) Code() int {
	return 400
}

func (o *UpdateGcpAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountBadRequest %s", 400, payload)
}

func (o *UpdateGcpAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountBadRequest %s", 400, payload)
}

func (o *UpdateGcpAccountBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateGcpAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGcpAccountNotFound creates a UpdateGcpAccountNotFound with default headers values
func NewUpdateGcpAccountNotFound() *UpdateGcpAccountNotFound {
	return &UpdateGcpAccountNotFound{}
}

/*
UpdateGcpAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateGcpAccountNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update gcp account not found response has a 2xx status code
func (o *UpdateGcpAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gcp account not found response has a 3xx status code
func (o *UpdateGcpAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gcp account not found response has a 4xx status code
func (o *UpdateGcpAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gcp account not found response has a 5xx status code
func (o *UpdateGcpAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update gcp account not found response a status code equal to that given
func (o *UpdateGcpAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update gcp account not found response
func (o *UpdateGcpAccountNotFound) Code() int {
	return 404
}

func (o *UpdateGcpAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountNotFound %s", 404, payload)
}

func (o *UpdateGcpAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountNotFound %s", 404, payload)
}

func (o *UpdateGcpAccountNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateGcpAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGcpAccountMethodNotAllowed creates a UpdateGcpAccountMethodNotAllowed with default headers values
func NewUpdateGcpAccountMethodNotAllowed() *UpdateGcpAccountMethodNotAllowed {
	return &UpdateGcpAccountMethodNotAllowed{}
}

/*
UpdateGcpAccountMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateGcpAccountMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update gcp account method not allowed response has a 2xx status code
func (o *UpdateGcpAccountMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gcp account method not allowed response has a 3xx status code
func (o *UpdateGcpAccountMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gcp account method not allowed response has a 4xx status code
func (o *UpdateGcpAccountMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gcp account method not allowed response has a 5xx status code
func (o *UpdateGcpAccountMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update gcp account method not allowed response a status code equal to that given
func (o *UpdateGcpAccountMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update gcp account method not allowed response
func (o *UpdateGcpAccountMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateGcpAccountMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountMethodNotAllowed %s", 405, payload)
}

func (o *UpdateGcpAccountMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountMethodNotAllowed %s", 405, payload)
}

func (o *UpdateGcpAccountMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateGcpAccountMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGcpAccountInternalServerError creates a UpdateGcpAccountInternalServerError with default headers values
func NewUpdateGcpAccountInternalServerError() *UpdateGcpAccountInternalServerError {
	return &UpdateGcpAccountInternalServerError{}
}

/*
UpdateGcpAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateGcpAccountInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update gcp account internal server error response has a 2xx status code
func (o *UpdateGcpAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gcp account internal server error response has a 3xx status code
func (o *UpdateGcpAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gcp account internal server error response has a 4xx status code
func (o *UpdateGcpAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update gcp account internal server error response has a 5xx status code
func (o *UpdateGcpAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update gcp account internal server error response a status code equal to that given
func (o *UpdateGcpAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update gcp account internal server error response
func (o *UpdateGcpAccountInternalServerError) Code() int {
	return 500
}

func (o *UpdateGcpAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountInternalServerError %s", 500, payload)
}

func (o *UpdateGcpAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gcp/{id}][%d] updateGcpAccountInternalServerError %s", 500, payload)
}

func (o *UpdateGcpAccountInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateGcpAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
