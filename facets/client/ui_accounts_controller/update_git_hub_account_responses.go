// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateGitHubAccountReader is a Reader for the UpdateGitHubAccount structure.
type UpdateGitHubAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGitHubAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGitHubAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateGitHubAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGitHubAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateGitHubAccountMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateGitHubAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/accounts/github/{id}] updateGitHubAccount", response, response.Code())
	}
}

// NewUpdateGitHubAccountOK creates a UpdateGitHubAccountOK with default headers values
func NewUpdateGitHubAccountOK() *UpdateGitHubAccountOK {
	return &UpdateGitHubAccountOK{}
}

/*
UpdateGitHubAccountOK describes a response with status code 200, with default header values.

OK
*/
type UpdateGitHubAccountOK struct {
	Payload *models.GitHubAccount
}

// IsSuccess returns true when this update git hub account o k response has a 2xx status code
func (o *UpdateGitHubAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update git hub account o k response has a 3xx status code
func (o *UpdateGitHubAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git hub account o k response has a 4xx status code
func (o *UpdateGitHubAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update git hub account o k response has a 5xx status code
func (o *UpdateGitHubAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update git hub account o k response a status code equal to that given
func (o *UpdateGitHubAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update git hub account o k response
func (o *UpdateGitHubAccountOK) Code() int {
	return 200
}

func (o *UpdateGitHubAccountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountOK %s", 200, payload)
}

func (o *UpdateGitHubAccountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountOK %s", 200, payload)
}

func (o *UpdateGitHubAccountOK) GetPayload() *models.GitHubAccount {
	return o.Payload
}

func (o *UpdateGitHubAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GitHubAccount)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGitHubAccountBadRequest creates a UpdateGitHubAccountBadRequest with default headers values
func NewUpdateGitHubAccountBadRequest() *UpdateGitHubAccountBadRequest {
	return &UpdateGitHubAccountBadRequest{}
}

/*
UpdateGitHubAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateGitHubAccountBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update git hub account bad request response has a 2xx status code
func (o *UpdateGitHubAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git hub account bad request response has a 3xx status code
func (o *UpdateGitHubAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git hub account bad request response has a 4xx status code
func (o *UpdateGitHubAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git hub account bad request response has a 5xx status code
func (o *UpdateGitHubAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update git hub account bad request response a status code equal to that given
func (o *UpdateGitHubAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update git hub account bad request response
func (o *UpdateGitHubAccountBadRequest) Code() int {
	return 400
}

func (o *UpdateGitHubAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountBadRequest %s", 400, payload)
}

func (o *UpdateGitHubAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountBadRequest %s", 400, payload)
}

func (o *UpdateGitHubAccountBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateGitHubAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGitHubAccountNotFound creates a UpdateGitHubAccountNotFound with default headers values
func NewUpdateGitHubAccountNotFound() *UpdateGitHubAccountNotFound {
	return &UpdateGitHubAccountNotFound{}
}

/*
UpdateGitHubAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateGitHubAccountNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update git hub account not found response has a 2xx status code
func (o *UpdateGitHubAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git hub account not found response has a 3xx status code
func (o *UpdateGitHubAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git hub account not found response has a 4xx status code
func (o *UpdateGitHubAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git hub account not found response has a 5xx status code
func (o *UpdateGitHubAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update git hub account not found response a status code equal to that given
func (o *UpdateGitHubAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update git hub account not found response
func (o *UpdateGitHubAccountNotFound) Code() int {
	return 404
}

func (o *UpdateGitHubAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountNotFound %s", 404, payload)
}

func (o *UpdateGitHubAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountNotFound %s", 404, payload)
}

func (o *UpdateGitHubAccountNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateGitHubAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGitHubAccountMethodNotAllowed creates a UpdateGitHubAccountMethodNotAllowed with default headers values
func NewUpdateGitHubAccountMethodNotAllowed() *UpdateGitHubAccountMethodNotAllowed {
	return &UpdateGitHubAccountMethodNotAllowed{}
}

/*
UpdateGitHubAccountMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateGitHubAccountMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update git hub account method not allowed response has a 2xx status code
func (o *UpdateGitHubAccountMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git hub account method not allowed response has a 3xx status code
func (o *UpdateGitHubAccountMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git hub account method not allowed response has a 4xx status code
func (o *UpdateGitHubAccountMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git hub account method not allowed response has a 5xx status code
func (o *UpdateGitHubAccountMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update git hub account method not allowed response a status code equal to that given
func (o *UpdateGitHubAccountMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update git hub account method not allowed response
func (o *UpdateGitHubAccountMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateGitHubAccountMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountMethodNotAllowed %s", 405, payload)
}

func (o *UpdateGitHubAccountMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountMethodNotAllowed %s", 405, payload)
}

func (o *UpdateGitHubAccountMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateGitHubAccountMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGitHubAccountInternalServerError creates a UpdateGitHubAccountInternalServerError with default headers values
func NewUpdateGitHubAccountInternalServerError() *UpdateGitHubAccountInternalServerError {
	return &UpdateGitHubAccountInternalServerError{}
}

/*
UpdateGitHubAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateGitHubAccountInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update git hub account internal server error response has a 2xx status code
func (o *UpdateGitHubAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git hub account internal server error response has a 3xx status code
func (o *UpdateGitHubAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git hub account internal server error response has a 4xx status code
func (o *UpdateGitHubAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update git hub account internal server error response has a 5xx status code
func (o *UpdateGitHubAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update git hub account internal server error response a status code equal to that given
func (o *UpdateGitHubAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update git hub account internal server error response
func (o *UpdateGitHubAccountInternalServerError) Code() int {
	return 500
}

func (o *UpdateGitHubAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountInternalServerError %s", 500, payload)
}

func (o *UpdateGitHubAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountInternalServerError %s", 500, payload)
}

func (o *UpdateGitHubAccountInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateGitHubAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
