// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateGitHubAccountReader is a Reader for the CreateGitHubAccount structure.
type CreateGitHubAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateGitHubAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateGitHubAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateGitHubAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateGitHubAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreateGitHubAccountMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateGitHubAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/accounts/github/] createGitHubAccount", response, response.Code())
	}
}

// NewCreateGitHubAccountOK creates a CreateGitHubAccountOK with default headers values
func NewCreateGitHubAccountOK() *CreateGitHubAccountOK {
	return &CreateGitHubAccountOK{}
}

/*
CreateGitHubAccountOK describes a response with status code 200, with default header values.

OK
*/
type CreateGitHubAccountOK struct {
	Payload *models.GitHubAccount
}

// IsSuccess returns true when this create git hub account o k response has a 2xx status code
func (o *CreateGitHubAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create git hub account o k response has a 3xx status code
func (o *CreateGitHubAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create git hub account o k response has a 4xx status code
func (o *CreateGitHubAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create git hub account o k response has a 5xx status code
func (o *CreateGitHubAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create git hub account o k response a status code equal to that given
func (o *CreateGitHubAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create git hub account o k response
func (o *CreateGitHubAccountOK) Code() int {
	return 200
}

func (o *CreateGitHubAccountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/][%d] createGitHubAccountOK %s", 200, payload)
}

func (o *CreateGitHubAccountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/][%d] createGitHubAccountOK %s", 200, payload)
}

func (o *CreateGitHubAccountOK) GetPayload() *models.GitHubAccount {
	return o.Payload
}

func (o *CreateGitHubAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GitHubAccount)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGitHubAccountBadRequest creates a CreateGitHubAccountBadRequest with default headers values
func NewCreateGitHubAccountBadRequest() *CreateGitHubAccountBadRequest {
	return &CreateGitHubAccountBadRequest{}
}

/*
CreateGitHubAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateGitHubAccountBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create git hub account bad request response has a 2xx status code
func (o *CreateGitHubAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create git hub account bad request response has a 3xx status code
func (o *CreateGitHubAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create git hub account bad request response has a 4xx status code
func (o *CreateGitHubAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create git hub account bad request response has a 5xx status code
func (o *CreateGitHubAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create git hub account bad request response a status code equal to that given
func (o *CreateGitHubAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create git hub account bad request response
func (o *CreateGitHubAccountBadRequest) Code() int {
	return 400
}

func (o *CreateGitHubAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/][%d] createGitHubAccountBadRequest %s", 400, payload)
}

func (o *CreateGitHubAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/][%d] createGitHubAccountBadRequest %s", 400, payload)
}

func (o *CreateGitHubAccountBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateGitHubAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGitHubAccountNotFound creates a CreateGitHubAccountNotFound with default headers values
func NewCreateGitHubAccountNotFound() *CreateGitHubAccountNotFound {
	return &CreateGitHubAccountNotFound{}
}

/*
CreateGitHubAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateGitHubAccountNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create git hub account not found response has a 2xx status code
func (o *CreateGitHubAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create git hub account not found response has a 3xx status code
func (o *CreateGitHubAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create git hub account not found response has a 4xx status code
func (o *CreateGitHubAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create git hub account not found response has a 5xx status code
func (o *CreateGitHubAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create git hub account not found response a status code equal to that given
func (o *CreateGitHubAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create git hub account not found response
func (o *CreateGitHubAccountNotFound) Code() int {
	return 404
}

func (o *CreateGitHubAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/][%d] createGitHubAccountNotFound %s", 404, payload)
}

func (o *CreateGitHubAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/][%d] createGitHubAccountNotFound %s", 404, payload)
}

func (o *CreateGitHubAccountNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateGitHubAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGitHubAccountMethodNotAllowed creates a CreateGitHubAccountMethodNotAllowed with default headers values
func NewCreateGitHubAccountMethodNotAllowed() *CreateGitHubAccountMethodNotAllowed {
	return &CreateGitHubAccountMethodNotAllowed{}
}

/*
CreateGitHubAccountMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type CreateGitHubAccountMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create git hub account method not allowed response has a 2xx status code
func (o *CreateGitHubAccountMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create git hub account method not allowed response has a 3xx status code
func (o *CreateGitHubAccountMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create git hub account method not allowed response has a 4xx status code
func (o *CreateGitHubAccountMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create git hub account method not allowed response has a 5xx status code
func (o *CreateGitHubAccountMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this create git hub account method not allowed response a status code equal to that given
func (o *CreateGitHubAccountMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the create git hub account method not allowed response
func (o *CreateGitHubAccountMethodNotAllowed) Code() int {
	return 405
}

func (o *CreateGitHubAccountMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/][%d] createGitHubAccountMethodNotAllowed %s", 405, payload)
}

func (o *CreateGitHubAccountMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/][%d] createGitHubAccountMethodNotAllowed %s", 405, payload)
}

func (o *CreateGitHubAccountMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateGitHubAccountMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGitHubAccountInternalServerError creates a CreateGitHubAccountInternalServerError with default headers values
func NewCreateGitHubAccountInternalServerError() *CreateGitHubAccountInternalServerError {
	return &CreateGitHubAccountInternalServerError{}
}

/*
CreateGitHubAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateGitHubAccountInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create git hub account internal server error response has a 2xx status code
func (o *CreateGitHubAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create git hub account internal server error response has a 3xx status code
func (o *CreateGitHubAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create git hub account internal server error response has a 4xx status code
func (o *CreateGitHubAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create git hub account internal server error response has a 5xx status code
func (o *CreateGitHubAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create git hub account internal server error response a status code equal to that given
func (o *CreateGitHubAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create git hub account internal server error response
func (o *CreateGitHubAccountInternalServerError) Code() int {
	return 500
}

func (o *CreateGitHubAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/][%d] createGitHubAccountInternalServerError %s", 500, payload)
}

func (o *CreateGitHubAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/][%d] createGitHubAccountInternalServerError %s", 500, payload)
}

func (o *CreateGitHubAccountInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateGitHubAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
