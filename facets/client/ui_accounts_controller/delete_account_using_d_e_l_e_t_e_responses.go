// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteAccountUsingDELETEReader is a Reader for the DeleteAccountUsingDELETE structure.
type DeleteAccountUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAccountUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteAccountUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteAccountUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteAccountUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteAccountUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/accounts/{id}] deleteAccountUsingDELETE", response, response.Code())
	}
}

// NewDeleteAccountUsingDELETEOK creates a DeleteAccountUsingDELETEOK with default headers values
func NewDeleteAccountUsingDELETEOK() *DeleteAccountUsingDELETEOK {
	return &DeleteAccountUsingDELETEOK{}
}

/*
DeleteAccountUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteAccountUsingDELETEOK struct {
	Payload bool
}

// IsSuccess returns true when this delete account using d e l e t e o k response has a 2xx status code
func (o *DeleteAccountUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete account using d e l e t e o k response has a 3xx status code
func (o *DeleteAccountUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete account using d e l e t e o k response has a 4xx status code
func (o *DeleteAccountUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete account using d e l e t e o k response has a 5xx status code
func (o *DeleteAccountUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete account using d e l e t e o k response a status code equal to that given
func (o *DeleteAccountUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete account using d e l e t e o k response
func (o *DeleteAccountUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteAccountUsingDELETEOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountUsingDELETEOK %s", 200, payload)
}

func (o *DeleteAccountUsingDELETEOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountUsingDELETEOK %s", 200, payload)
}

func (o *DeleteAccountUsingDELETEOK) GetPayload() bool {
	return o.Payload
}

func (o *DeleteAccountUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAccountUsingDELETENoContent creates a DeleteAccountUsingDELETENoContent with default headers values
func NewDeleteAccountUsingDELETENoContent() *DeleteAccountUsingDELETENoContent {
	return &DeleteAccountUsingDELETENoContent{}
}

/*
DeleteAccountUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteAccountUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete account using d e l e t e no content response has a 2xx status code
func (o *DeleteAccountUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete account using d e l e t e no content response has a 3xx status code
func (o *DeleteAccountUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete account using d e l e t e no content response has a 4xx status code
func (o *DeleteAccountUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete account using d e l e t e no content response has a 5xx status code
func (o *DeleteAccountUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete account using d e l e t e no content response a status code equal to that given
func (o *DeleteAccountUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete account using d e l e t e no content response
func (o *DeleteAccountUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteAccountUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountUsingDELETENoContent", 204)
}

func (o *DeleteAccountUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountUsingDELETENoContent", 204)
}

func (o *DeleteAccountUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAccountUsingDELETEUnauthorized creates a DeleteAccountUsingDELETEUnauthorized with default headers values
func NewDeleteAccountUsingDELETEUnauthorized() *DeleteAccountUsingDELETEUnauthorized {
	return &DeleteAccountUsingDELETEUnauthorized{}
}

/*
DeleteAccountUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteAccountUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete account using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteAccountUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete account using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteAccountUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete account using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteAccountUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete account using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteAccountUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete account using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteAccountUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete account using d e l e t e unauthorized response
func (o *DeleteAccountUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteAccountUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountUsingDELETEUnauthorized", 401)
}

func (o *DeleteAccountUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountUsingDELETEUnauthorized", 401)
}

func (o *DeleteAccountUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAccountUsingDELETEForbidden creates a DeleteAccountUsingDELETEForbidden with default headers values
func NewDeleteAccountUsingDELETEForbidden() *DeleteAccountUsingDELETEForbidden {
	return &DeleteAccountUsingDELETEForbidden{}
}

/*
DeleteAccountUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteAccountUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete account using d e l e t e forbidden response has a 2xx status code
func (o *DeleteAccountUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete account using d e l e t e forbidden response has a 3xx status code
func (o *DeleteAccountUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete account using d e l e t e forbidden response has a 4xx status code
func (o *DeleteAccountUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete account using d e l e t e forbidden response has a 5xx status code
func (o *DeleteAccountUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete account using d e l e t e forbidden response a status code equal to that given
func (o *DeleteAccountUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete account using d e l e t e forbidden response
func (o *DeleteAccountUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteAccountUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountUsingDELETEForbidden", 403)
}

func (o *DeleteAccountUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountUsingDELETEForbidden", 403)
}

func (o *DeleteAccountUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
