// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RequestVCSLinkingUsingPOSTReader is a Reader for the RequestVCSLinkingUsingPOST structure.
type RequestVCSLinkingUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RequestVCSLinkingUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRequestVCSLinkingUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewRequestVCSLinkingUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRequestVCSLinkingUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRequestVCSLinkingUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRequestVCSLinkingUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/accounts/link-vcs] requestVCSLinkingUsingPOST", response, response.Code())
	}
}

// NewRequestVCSLinkingUsingPOSTOK creates a RequestVCSLinkingUsingPOSTOK with default headers values
func NewRequestVCSLinkingUsingPOSTOK() *RequestVCSLinkingUsingPOSTOK {
	return &RequestVCSLinkingUsingPOSTOK{}
}

/*
RequestVCSLinkingUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type RequestVCSLinkingUsingPOSTOK struct {
	Payload *models.VCSLinkingResponse
}

// IsSuccess returns true when this request v c s linking using p o s t o k response has a 2xx status code
func (o *RequestVCSLinkingUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this request v c s linking using p o s t o k response has a 3xx status code
func (o *RequestVCSLinkingUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request v c s linking using p o s t o k response has a 4xx status code
func (o *RequestVCSLinkingUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this request v c s linking using p o s t o k response has a 5xx status code
func (o *RequestVCSLinkingUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this request v c s linking using p o s t o k response a status code equal to that given
func (o *RequestVCSLinkingUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the request v c s linking using p o s t o k response
func (o *RequestVCSLinkingUsingPOSTOK) Code() int {
	return 200
}

func (o *RequestVCSLinkingUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingUsingPOSTOK %s", 200, payload)
}

func (o *RequestVCSLinkingUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingUsingPOSTOK %s", 200, payload)
}

func (o *RequestVCSLinkingUsingPOSTOK) GetPayload() *models.VCSLinkingResponse {
	return o.Payload
}

func (o *RequestVCSLinkingUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VCSLinkingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestVCSLinkingUsingPOSTCreated creates a RequestVCSLinkingUsingPOSTCreated with default headers values
func NewRequestVCSLinkingUsingPOSTCreated() *RequestVCSLinkingUsingPOSTCreated {
	return &RequestVCSLinkingUsingPOSTCreated{}
}

/*
RequestVCSLinkingUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type RequestVCSLinkingUsingPOSTCreated struct {
}

// IsSuccess returns true when this request v c s linking using p o s t created response has a 2xx status code
func (o *RequestVCSLinkingUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this request v c s linking using p o s t created response has a 3xx status code
func (o *RequestVCSLinkingUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request v c s linking using p o s t created response has a 4xx status code
func (o *RequestVCSLinkingUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this request v c s linking using p o s t created response has a 5xx status code
func (o *RequestVCSLinkingUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this request v c s linking using p o s t created response a status code equal to that given
func (o *RequestVCSLinkingUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the request v c s linking using p o s t created response
func (o *RequestVCSLinkingUsingPOSTCreated) Code() int {
	return 201
}

func (o *RequestVCSLinkingUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingUsingPOSTCreated", 201)
}

func (o *RequestVCSLinkingUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingUsingPOSTCreated", 201)
}

func (o *RequestVCSLinkingUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRequestVCSLinkingUsingPOSTUnauthorized creates a RequestVCSLinkingUsingPOSTUnauthorized with default headers values
func NewRequestVCSLinkingUsingPOSTUnauthorized() *RequestVCSLinkingUsingPOSTUnauthorized {
	return &RequestVCSLinkingUsingPOSTUnauthorized{}
}

/*
RequestVCSLinkingUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RequestVCSLinkingUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this request v c s linking using p o s t unauthorized response has a 2xx status code
func (o *RequestVCSLinkingUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request v c s linking using p o s t unauthorized response has a 3xx status code
func (o *RequestVCSLinkingUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request v c s linking using p o s t unauthorized response has a 4xx status code
func (o *RequestVCSLinkingUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this request v c s linking using p o s t unauthorized response has a 5xx status code
func (o *RequestVCSLinkingUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this request v c s linking using p o s t unauthorized response a status code equal to that given
func (o *RequestVCSLinkingUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the request v c s linking using p o s t unauthorized response
func (o *RequestVCSLinkingUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *RequestVCSLinkingUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingUsingPOSTUnauthorized", 401)
}

func (o *RequestVCSLinkingUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingUsingPOSTUnauthorized", 401)
}

func (o *RequestVCSLinkingUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRequestVCSLinkingUsingPOSTForbidden creates a RequestVCSLinkingUsingPOSTForbidden with default headers values
func NewRequestVCSLinkingUsingPOSTForbidden() *RequestVCSLinkingUsingPOSTForbidden {
	return &RequestVCSLinkingUsingPOSTForbidden{}
}

/*
RequestVCSLinkingUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RequestVCSLinkingUsingPOSTForbidden struct {
}

// IsSuccess returns true when this request v c s linking using p o s t forbidden response has a 2xx status code
func (o *RequestVCSLinkingUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request v c s linking using p o s t forbidden response has a 3xx status code
func (o *RequestVCSLinkingUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request v c s linking using p o s t forbidden response has a 4xx status code
func (o *RequestVCSLinkingUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this request v c s linking using p o s t forbidden response has a 5xx status code
func (o *RequestVCSLinkingUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this request v c s linking using p o s t forbidden response a status code equal to that given
func (o *RequestVCSLinkingUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the request v c s linking using p o s t forbidden response
func (o *RequestVCSLinkingUsingPOSTForbidden) Code() int {
	return 403
}

func (o *RequestVCSLinkingUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingUsingPOSTForbidden", 403)
}

func (o *RequestVCSLinkingUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingUsingPOSTForbidden", 403)
}

func (o *RequestVCSLinkingUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRequestVCSLinkingUsingPOSTNotFound creates a RequestVCSLinkingUsingPOSTNotFound with default headers values
func NewRequestVCSLinkingUsingPOSTNotFound() *RequestVCSLinkingUsingPOSTNotFound {
	return &RequestVCSLinkingUsingPOSTNotFound{}
}

/*
RequestVCSLinkingUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RequestVCSLinkingUsingPOSTNotFound struct {
}

// IsSuccess returns true when this request v c s linking using p o s t not found response has a 2xx status code
func (o *RequestVCSLinkingUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request v c s linking using p o s t not found response has a 3xx status code
func (o *RequestVCSLinkingUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request v c s linking using p o s t not found response has a 4xx status code
func (o *RequestVCSLinkingUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this request v c s linking using p o s t not found response has a 5xx status code
func (o *RequestVCSLinkingUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this request v c s linking using p o s t not found response a status code equal to that given
func (o *RequestVCSLinkingUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the request v c s linking using p o s t not found response
func (o *RequestVCSLinkingUsingPOSTNotFound) Code() int {
	return 404
}

func (o *RequestVCSLinkingUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingUsingPOSTNotFound", 404)
}

func (o *RequestVCSLinkingUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-vcs][%d] requestVCSLinkingUsingPOSTNotFound", 404)
}

func (o *RequestVCSLinkingUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
