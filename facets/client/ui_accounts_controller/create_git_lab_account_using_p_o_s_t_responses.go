// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateGitLabAccountUsingPOSTReader is a Reader for the CreateGitLabAccountUsingPOST structure.
type CreateGitLabAccountUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateGitLabAccountUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateGitLabAccountUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewCreateGitLabAccountUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateGitLabAccountUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateGitLabAccountUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateGitLabAccountUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/accounts/gitlab/] createGitLabAccountUsingPOST", response, response.Code())
	}
}

// NewCreateGitLabAccountUsingPOSTOK creates a CreateGitLabAccountUsingPOSTOK with default headers values
func NewCreateGitLabAccountUsingPOSTOK() *CreateGitLabAccountUsingPOSTOK {
	return &CreateGitLabAccountUsingPOSTOK{}
}

/*
CreateGitLabAccountUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type CreateGitLabAccountUsingPOSTOK struct {
	Payload *models.GitLabAccount
}

// IsSuccess returns true when this create git lab account using p o s t o k response has a 2xx status code
func (o *CreateGitLabAccountUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create git lab account using p o s t o k response has a 3xx status code
func (o *CreateGitLabAccountUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create git lab account using p o s t o k response has a 4xx status code
func (o *CreateGitLabAccountUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create git lab account using p o s t o k response has a 5xx status code
func (o *CreateGitLabAccountUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create git lab account using p o s t o k response a status code equal to that given
func (o *CreateGitLabAccountUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create git lab account using p o s t o k response
func (o *CreateGitLabAccountUsingPOSTOK) Code() int {
	return 200
}

func (o *CreateGitLabAccountUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountUsingPOSTOK %s", 200, payload)
}

func (o *CreateGitLabAccountUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountUsingPOSTOK %s", 200, payload)
}

func (o *CreateGitLabAccountUsingPOSTOK) GetPayload() *models.GitLabAccount {
	return o.Payload
}

func (o *CreateGitLabAccountUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GitLabAccount)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGitLabAccountUsingPOSTCreated creates a CreateGitLabAccountUsingPOSTCreated with default headers values
func NewCreateGitLabAccountUsingPOSTCreated() *CreateGitLabAccountUsingPOSTCreated {
	return &CreateGitLabAccountUsingPOSTCreated{}
}

/*
CreateGitLabAccountUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type CreateGitLabAccountUsingPOSTCreated struct {
}

// IsSuccess returns true when this create git lab account using p o s t created response has a 2xx status code
func (o *CreateGitLabAccountUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create git lab account using p o s t created response has a 3xx status code
func (o *CreateGitLabAccountUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create git lab account using p o s t created response has a 4xx status code
func (o *CreateGitLabAccountUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create git lab account using p o s t created response has a 5xx status code
func (o *CreateGitLabAccountUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create git lab account using p o s t created response a status code equal to that given
func (o *CreateGitLabAccountUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create git lab account using p o s t created response
func (o *CreateGitLabAccountUsingPOSTCreated) Code() int {
	return 201
}

func (o *CreateGitLabAccountUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountUsingPOSTCreated", 201)
}

func (o *CreateGitLabAccountUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountUsingPOSTCreated", 201)
}

func (o *CreateGitLabAccountUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateGitLabAccountUsingPOSTUnauthorized creates a CreateGitLabAccountUsingPOSTUnauthorized with default headers values
func NewCreateGitLabAccountUsingPOSTUnauthorized() *CreateGitLabAccountUsingPOSTUnauthorized {
	return &CreateGitLabAccountUsingPOSTUnauthorized{}
}

/*
CreateGitLabAccountUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateGitLabAccountUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this create git lab account using p o s t unauthorized response has a 2xx status code
func (o *CreateGitLabAccountUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create git lab account using p o s t unauthorized response has a 3xx status code
func (o *CreateGitLabAccountUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create git lab account using p o s t unauthorized response has a 4xx status code
func (o *CreateGitLabAccountUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create git lab account using p o s t unauthorized response has a 5xx status code
func (o *CreateGitLabAccountUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create git lab account using p o s t unauthorized response a status code equal to that given
func (o *CreateGitLabAccountUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create git lab account using p o s t unauthorized response
func (o *CreateGitLabAccountUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *CreateGitLabAccountUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountUsingPOSTUnauthorized", 401)
}

func (o *CreateGitLabAccountUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountUsingPOSTUnauthorized", 401)
}

func (o *CreateGitLabAccountUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateGitLabAccountUsingPOSTForbidden creates a CreateGitLabAccountUsingPOSTForbidden with default headers values
func NewCreateGitLabAccountUsingPOSTForbidden() *CreateGitLabAccountUsingPOSTForbidden {
	return &CreateGitLabAccountUsingPOSTForbidden{}
}

/*
CreateGitLabAccountUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateGitLabAccountUsingPOSTForbidden struct {
}

// IsSuccess returns true when this create git lab account using p o s t forbidden response has a 2xx status code
func (o *CreateGitLabAccountUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create git lab account using p o s t forbidden response has a 3xx status code
func (o *CreateGitLabAccountUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create git lab account using p o s t forbidden response has a 4xx status code
func (o *CreateGitLabAccountUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create git lab account using p o s t forbidden response has a 5xx status code
func (o *CreateGitLabAccountUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create git lab account using p o s t forbidden response a status code equal to that given
func (o *CreateGitLabAccountUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create git lab account using p o s t forbidden response
func (o *CreateGitLabAccountUsingPOSTForbidden) Code() int {
	return 403
}

func (o *CreateGitLabAccountUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountUsingPOSTForbidden", 403)
}

func (o *CreateGitLabAccountUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountUsingPOSTForbidden", 403)
}

func (o *CreateGitLabAccountUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateGitLabAccountUsingPOSTNotFound creates a CreateGitLabAccountUsingPOSTNotFound with default headers values
func NewCreateGitLabAccountUsingPOSTNotFound() *CreateGitLabAccountUsingPOSTNotFound {
	return &CreateGitLabAccountUsingPOSTNotFound{}
}

/*
CreateGitLabAccountUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateGitLabAccountUsingPOSTNotFound struct {
}

// IsSuccess returns true when this create git lab account using p o s t not found response has a 2xx status code
func (o *CreateGitLabAccountUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create git lab account using p o s t not found response has a 3xx status code
func (o *CreateGitLabAccountUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create git lab account using p o s t not found response has a 4xx status code
func (o *CreateGitLabAccountUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create git lab account using p o s t not found response has a 5xx status code
func (o *CreateGitLabAccountUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create git lab account using p o s t not found response a status code equal to that given
func (o *CreateGitLabAccountUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create git lab account using p o s t not found response
func (o *CreateGitLabAccountUsingPOSTNotFound) Code() int {
	return 404
}

func (o *CreateGitLabAccountUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountUsingPOSTNotFound", 404)
}

func (o *CreateGitLabAccountUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountUsingPOSTNotFound", 404)
}

func (o *CreateGitLabAccountUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
