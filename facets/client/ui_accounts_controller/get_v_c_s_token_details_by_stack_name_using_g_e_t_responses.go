// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetVCSTokenDetailsByStackNameUsingGETReader is a Reader for the GetVCSTokenDetailsByStackNameUsingGET structure.
type GetVCSTokenDetailsByStackNameUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVCSTokenDetailsByStackNameUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVCSTokenDetailsByStackNameUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetVCSTokenDetailsByStackNameUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetVCSTokenDetailsByStackNameUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVCSTokenDetailsByStackNameUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/accounts/stack/{stackName}/token-details] getVCSTokenDetailsByStackNameUsingGET", response, response.Code())
	}
}

// NewGetVCSTokenDetailsByStackNameUsingGETOK creates a GetVCSTokenDetailsByStackNameUsingGETOK with default headers values
func NewGetVCSTokenDetailsByStackNameUsingGETOK() *GetVCSTokenDetailsByStackNameUsingGETOK {
	return &GetVCSTokenDetailsByStackNameUsingGETOK{}
}

/*
GetVCSTokenDetailsByStackNameUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetVCSTokenDetailsByStackNameUsingGETOK struct {
	Payload *models.VCSTokenDetailsResponse
}

// IsSuccess returns true when this get v c s token details by stack name using g e t o k response has a 2xx status code
func (o *GetVCSTokenDetailsByStackNameUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v c s token details by stack name using g e t o k response has a 3xx status code
func (o *GetVCSTokenDetailsByStackNameUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v c s token details by stack name using g e t o k response has a 4xx status code
func (o *GetVCSTokenDetailsByStackNameUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v c s token details by stack name using g e t o k response has a 5xx status code
func (o *GetVCSTokenDetailsByStackNameUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v c s token details by stack name using g e t o k response a status code equal to that given
func (o *GetVCSTokenDetailsByStackNameUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v c s token details by stack name using g e t o k response
func (o *GetVCSTokenDetailsByStackNameUsingGETOK) Code() int {
	return 200
}

func (o *GetVCSTokenDetailsByStackNameUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/stack/{stackName}/token-details][%d] getVCSTokenDetailsByStackNameUsingGETOK %s", 200, payload)
}

func (o *GetVCSTokenDetailsByStackNameUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/stack/{stackName}/token-details][%d] getVCSTokenDetailsByStackNameUsingGETOK %s", 200, payload)
}

func (o *GetVCSTokenDetailsByStackNameUsingGETOK) GetPayload() *models.VCSTokenDetailsResponse {
	return o.Payload
}

func (o *GetVCSTokenDetailsByStackNameUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VCSTokenDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVCSTokenDetailsByStackNameUsingGETUnauthorized creates a GetVCSTokenDetailsByStackNameUsingGETUnauthorized with default headers values
func NewGetVCSTokenDetailsByStackNameUsingGETUnauthorized() *GetVCSTokenDetailsByStackNameUsingGETUnauthorized {
	return &GetVCSTokenDetailsByStackNameUsingGETUnauthorized{}
}

/*
GetVCSTokenDetailsByStackNameUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetVCSTokenDetailsByStackNameUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get v c s token details by stack name using g e t unauthorized response has a 2xx status code
func (o *GetVCSTokenDetailsByStackNameUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v c s token details by stack name using g e t unauthorized response has a 3xx status code
func (o *GetVCSTokenDetailsByStackNameUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v c s token details by stack name using g e t unauthorized response has a 4xx status code
func (o *GetVCSTokenDetailsByStackNameUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v c s token details by stack name using g e t unauthorized response has a 5xx status code
func (o *GetVCSTokenDetailsByStackNameUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get v c s token details by stack name using g e t unauthorized response a status code equal to that given
func (o *GetVCSTokenDetailsByStackNameUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get v c s token details by stack name using g e t unauthorized response
func (o *GetVCSTokenDetailsByStackNameUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetVCSTokenDetailsByStackNameUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/stack/{stackName}/token-details][%d] getVCSTokenDetailsByStackNameUsingGETUnauthorized", 401)
}

func (o *GetVCSTokenDetailsByStackNameUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/stack/{stackName}/token-details][%d] getVCSTokenDetailsByStackNameUsingGETUnauthorized", 401)
}

func (o *GetVCSTokenDetailsByStackNameUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVCSTokenDetailsByStackNameUsingGETForbidden creates a GetVCSTokenDetailsByStackNameUsingGETForbidden with default headers values
func NewGetVCSTokenDetailsByStackNameUsingGETForbidden() *GetVCSTokenDetailsByStackNameUsingGETForbidden {
	return &GetVCSTokenDetailsByStackNameUsingGETForbidden{}
}

/*
GetVCSTokenDetailsByStackNameUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetVCSTokenDetailsByStackNameUsingGETForbidden struct {
}

// IsSuccess returns true when this get v c s token details by stack name using g e t forbidden response has a 2xx status code
func (o *GetVCSTokenDetailsByStackNameUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v c s token details by stack name using g e t forbidden response has a 3xx status code
func (o *GetVCSTokenDetailsByStackNameUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v c s token details by stack name using g e t forbidden response has a 4xx status code
func (o *GetVCSTokenDetailsByStackNameUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v c s token details by stack name using g e t forbidden response has a 5xx status code
func (o *GetVCSTokenDetailsByStackNameUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get v c s token details by stack name using g e t forbidden response a status code equal to that given
func (o *GetVCSTokenDetailsByStackNameUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get v c s token details by stack name using g e t forbidden response
func (o *GetVCSTokenDetailsByStackNameUsingGETForbidden) Code() int {
	return 403
}

func (o *GetVCSTokenDetailsByStackNameUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/stack/{stackName}/token-details][%d] getVCSTokenDetailsByStackNameUsingGETForbidden", 403)
}

func (o *GetVCSTokenDetailsByStackNameUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/stack/{stackName}/token-details][%d] getVCSTokenDetailsByStackNameUsingGETForbidden", 403)
}

func (o *GetVCSTokenDetailsByStackNameUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVCSTokenDetailsByStackNameUsingGETNotFound creates a GetVCSTokenDetailsByStackNameUsingGETNotFound with default headers values
func NewGetVCSTokenDetailsByStackNameUsingGETNotFound() *GetVCSTokenDetailsByStackNameUsingGETNotFound {
	return &GetVCSTokenDetailsByStackNameUsingGETNotFound{}
}

/*
GetVCSTokenDetailsByStackNameUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetVCSTokenDetailsByStackNameUsingGETNotFound struct {
}

// IsSuccess returns true when this get v c s token details by stack name using g e t not found response has a 2xx status code
func (o *GetVCSTokenDetailsByStackNameUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v c s token details by stack name using g e t not found response has a 3xx status code
func (o *GetVCSTokenDetailsByStackNameUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v c s token details by stack name using g e t not found response has a 4xx status code
func (o *GetVCSTokenDetailsByStackNameUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v c s token details by stack name using g e t not found response has a 5xx status code
func (o *GetVCSTokenDetailsByStackNameUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get v c s token details by stack name using g e t not found response a status code equal to that given
func (o *GetVCSTokenDetailsByStackNameUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get v c s token details by stack name using g e t not found response
func (o *GetVCSTokenDetailsByStackNameUsingGETNotFound) Code() int {
	return 404
}

func (o *GetVCSTokenDetailsByStackNameUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/stack/{stackName}/token-details][%d] getVCSTokenDetailsByStackNameUsingGETNotFound", 404)
}

func (o *GetVCSTokenDetailsByStackNameUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/stack/{stackName}/token-details][%d] getVCSTokenDetailsByStackNameUsingGETNotFound", 404)
}

func (o *GetVCSTokenDetailsByStackNameUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
