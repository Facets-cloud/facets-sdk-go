// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateGitLabAccountReader is a Reader for the CreateGitLabAccount structure.
type CreateGitLabAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateGitLabAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateGitLabAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateGitLabAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateGitLabAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreateGitLabAccountMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateGitLabAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/accounts/gitlab/] createGitLabAccount", response, response.Code())
	}
}

// NewCreateGitLabAccountOK creates a CreateGitLabAccountOK with default headers values
func NewCreateGitLabAccountOK() *CreateGitLabAccountOK {
	return &CreateGitLabAccountOK{}
}

/*
CreateGitLabAccountOK describes a response with status code 200, with default header values.

OK
*/
type CreateGitLabAccountOK struct {
	Payload *models.GitLabAccount
}

// IsSuccess returns true when this create git lab account o k response has a 2xx status code
func (o *CreateGitLabAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create git lab account o k response has a 3xx status code
func (o *CreateGitLabAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create git lab account o k response has a 4xx status code
func (o *CreateGitLabAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create git lab account o k response has a 5xx status code
func (o *CreateGitLabAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create git lab account o k response a status code equal to that given
func (o *CreateGitLabAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create git lab account o k response
func (o *CreateGitLabAccountOK) Code() int {
	return 200
}

func (o *CreateGitLabAccountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountOK %s", 200, payload)
}

func (o *CreateGitLabAccountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountOK %s", 200, payload)
}

func (o *CreateGitLabAccountOK) GetPayload() *models.GitLabAccount {
	return o.Payload
}

func (o *CreateGitLabAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GitLabAccount)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGitLabAccountBadRequest creates a CreateGitLabAccountBadRequest with default headers values
func NewCreateGitLabAccountBadRequest() *CreateGitLabAccountBadRequest {
	return &CreateGitLabAccountBadRequest{}
}

/*
CreateGitLabAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateGitLabAccountBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create git lab account bad request response has a 2xx status code
func (o *CreateGitLabAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create git lab account bad request response has a 3xx status code
func (o *CreateGitLabAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create git lab account bad request response has a 4xx status code
func (o *CreateGitLabAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create git lab account bad request response has a 5xx status code
func (o *CreateGitLabAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create git lab account bad request response a status code equal to that given
func (o *CreateGitLabAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create git lab account bad request response
func (o *CreateGitLabAccountBadRequest) Code() int {
	return 400
}

func (o *CreateGitLabAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountBadRequest %s", 400, payload)
}

func (o *CreateGitLabAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountBadRequest %s", 400, payload)
}

func (o *CreateGitLabAccountBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateGitLabAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGitLabAccountNotFound creates a CreateGitLabAccountNotFound with default headers values
func NewCreateGitLabAccountNotFound() *CreateGitLabAccountNotFound {
	return &CreateGitLabAccountNotFound{}
}

/*
CreateGitLabAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateGitLabAccountNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create git lab account not found response has a 2xx status code
func (o *CreateGitLabAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create git lab account not found response has a 3xx status code
func (o *CreateGitLabAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create git lab account not found response has a 4xx status code
func (o *CreateGitLabAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create git lab account not found response has a 5xx status code
func (o *CreateGitLabAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create git lab account not found response a status code equal to that given
func (o *CreateGitLabAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create git lab account not found response
func (o *CreateGitLabAccountNotFound) Code() int {
	return 404
}

func (o *CreateGitLabAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountNotFound %s", 404, payload)
}

func (o *CreateGitLabAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountNotFound %s", 404, payload)
}

func (o *CreateGitLabAccountNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateGitLabAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGitLabAccountMethodNotAllowed creates a CreateGitLabAccountMethodNotAllowed with default headers values
func NewCreateGitLabAccountMethodNotAllowed() *CreateGitLabAccountMethodNotAllowed {
	return &CreateGitLabAccountMethodNotAllowed{}
}

/*
CreateGitLabAccountMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type CreateGitLabAccountMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create git lab account method not allowed response has a 2xx status code
func (o *CreateGitLabAccountMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create git lab account method not allowed response has a 3xx status code
func (o *CreateGitLabAccountMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create git lab account method not allowed response has a 4xx status code
func (o *CreateGitLabAccountMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create git lab account method not allowed response has a 5xx status code
func (o *CreateGitLabAccountMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this create git lab account method not allowed response a status code equal to that given
func (o *CreateGitLabAccountMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the create git lab account method not allowed response
func (o *CreateGitLabAccountMethodNotAllowed) Code() int {
	return 405
}

func (o *CreateGitLabAccountMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountMethodNotAllowed %s", 405, payload)
}

func (o *CreateGitLabAccountMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountMethodNotAllowed %s", 405, payload)
}

func (o *CreateGitLabAccountMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateGitLabAccountMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGitLabAccountInternalServerError creates a CreateGitLabAccountInternalServerError with default headers values
func NewCreateGitLabAccountInternalServerError() *CreateGitLabAccountInternalServerError {
	return &CreateGitLabAccountInternalServerError{}
}

/*
CreateGitLabAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateGitLabAccountInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create git lab account internal server error response has a 2xx status code
func (o *CreateGitLabAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create git lab account internal server error response has a 3xx status code
func (o *CreateGitLabAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create git lab account internal server error response has a 4xx status code
func (o *CreateGitLabAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create git lab account internal server error response has a 5xx status code
func (o *CreateGitLabAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create git lab account internal server error response a status code equal to that given
func (o *CreateGitLabAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create git lab account internal server error response
func (o *CreateGitLabAccountInternalServerError) Code() int {
	return 500
}

func (o *CreateGitLabAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountInternalServerError %s", 500, payload)
}

func (o *CreateGitLabAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/][%d] createGitLabAccountInternalServerError %s", 500, payload)
}

func (o *CreateGitLabAccountInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateGitLabAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
