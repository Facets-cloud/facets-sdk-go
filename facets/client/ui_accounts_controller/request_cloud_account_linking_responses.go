// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RequestCloudAccountLinkingReader is a Reader for the RequestCloudAccountLinking structure.
type RequestCloudAccountLinkingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RequestCloudAccountLinkingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRequestCloudAccountLinkingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRequestCloudAccountLinkingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRequestCloudAccountLinkingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRequestCloudAccountLinkingMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRequestCloudAccountLinkingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/accounts/link-cloud] requestCloudAccountLinking", response, response.Code())
	}
}

// NewRequestCloudAccountLinkingOK creates a RequestCloudAccountLinkingOK with default headers values
func NewRequestCloudAccountLinkingOK() *RequestCloudAccountLinkingOK {
	return &RequestCloudAccountLinkingOK{}
}

/*
RequestCloudAccountLinkingOK describes a response with status code 200, with default header values.

OK
*/
type RequestCloudAccountLinkingOK struct {
	Payload *models.OneTimeWebhook
}

// IsSuccess returns true when this request cloud account linking o k response has a 2xx status code
func (o *RequestCloudAccountLinkingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this request cloud account linking o k response has a 3xx status code
func (o *RequestCloudAccountLinkingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request cloud account linking o k response has a 4xx status code
func (o *RequestCloudAccountLinkingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this request cloud account linking o k response has a 5xx status code
func (o *RequestCloudAccountLinkingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this request cloud account linking o k response a status code equal to that given
func (o *RequestCloudAccountLinkingOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the request cloud account linking o k response
func (o *RequestCloudAccountLinkingOK) Code() int {
	return 200
}

func (o *RequestCloudAccountLinkingOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-cloud][%d] requestCloudAccountLinkingOK %s", 200, payload)
}

func (o *RequestCloudAccountLinkingOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-cloud][%d] requestCloudAccountLinkingOK %s", 200, payload)
}

func (o *RequestCloudAccountLinkingOK) GetPayload() *models.OneTimeWebhook {
	return o.Payload
}

func (o *RequestCloudAccountLinkingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OneTimeWebhook)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestCloudAccountLinkingBadRequest creates a RequestCloudAccountLinkingBadRequest with default headers values
func NewRequestCloudAccountLinkingBadRequest() *RequestCloudAccountLinkingBadRequest {
	return &RequestCloudAccountLinkingBadRequest{}
}

/*
RequestCloudAccountLinkingBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RequestCloudAccountLinkingBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this request cloud account linking bad request response has a 2xx status code
func (o *RequestCloudAccountLinkingBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request cloud account linking bad request response has a 3xx status code
func (o *RequestCloudAccountLinkingBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request cloud account linking bad request response has a 4xx status code
func (o *RequestCloudAccountLinkingBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this request cloud account linking bad request response has a 5xx status code
func (o *RequestCloudAccountLinkingBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this request cloud account linking bad request response a status code equal to that given
func (o *RequestCloudAccountLinkingBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the request cloud account linking bad request response
func (o *RequestCloudAccountLinkingBadRequest) Code() int {
	return 400
}

func (o *RequestCloudAccountLinkingBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-cloud][%d] requestCloudAccountLinkingBadRequest %s", 400, payload)
}

func (o *RequestCloudAccountLinkingBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-cloud][%d] requestCloudAccountLinkingBadRequest %s", 400, payload)
}

func (o *RequestCloudAccountLinkingBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RequestCloudAccountLinkingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestCloudAccountLinkingNotFound creates a RequestCloudAccountLinkingNotFound with default headers values
func NewRequestCloudAccountLinkingNotFound() *RequestCloudAccountLinkingNotFound {
	return &RequestCloudAccountLinkingNotFound{}
}

/*
RequestCloudAccountLinkingNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RequestCloudAccountLinkingNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this request cloud account linking not found response has a 2xx status code
func (o *RequestCloudAccountLinkingNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request cloud account linking not found response has a 3xx status code
func (o *RequestCloudAccountLinkingNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request cloud account linking not found response has a 4xx status code
func (o *RequestCloudAccountLinkingNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this request cloud account linking not found response has a 5xx status code
func (o *RequestCloudAccountLinkingNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this request cloud account linking not found response a status code equal to that given
func (o *RequestCloudAccountLinkingNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the request cloud account linking not found response
func (o *RequestCloudAccountLinkingNotFound) Code() int {
	return 404
}

func (o *RequestCloudAccountLinkingNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-cloud][%d] requestCloudAccountLinkingNotFound %s", 404, payload)
}

func (o *RequestCloudAccountLinkingNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-cloud][%d] requestCloudAccountLinkingNotFound %s", 404, payload)
}

func (o *RequestCloudAccountLinkingNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RequestCloudAccountLinkingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestCloudAccountLinkingMethodNotAllowed creates a RequestCloudAccountLinkingMethodNotAllowed with default headers values
func NewRequestCloudAccountLinkingMethodNotAllowed() *RequestCloudAccountLinkingMethodNotAllowed {
	return &RequestCloudAccountLinkingMethodNotAllowed{}
}

/*
RequestCloudAccountLinkingMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RequestCloudAccountLinkingMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this request cloud account linking method not allowed response has a 2xx status code
func (o *RequestCloudAccountLinkingMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request cloud account linking method not allowed response has a 3xx status code
func (o *RequestCloudAccountLinkingMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request cloud account linking method not allowed response has a 4xx status code
func (o *RequestCloudAccountLinkingMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this request cloud account linking method not allowed response has a 5xx status code
func (o *RequestCloudAccountLinkingMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this request cloud account linking method not allowed response a status code equal to that given
func (o *RequestCloudAccountLinkingMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the request cloud account linking method not allowed response
func (o *RequestCloudAccountLinkingMethodNotAllowed) Code() int {
	return 405
}

func (o *RequestCloudAccountLinkingMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-cloud][%d] requestCloudAccountLinkingMethodNotAllowed %s", 405, payload)
}

func (o *RequestCloudAccountLinkingMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-cloud][%d] requestCloudAccountLinkingMethodNotAllowed %s", 405, payload)
}

func (o *RequestCloudAccountLinkingMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RequestCloudAccountLinkingMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestCloudAccountLinkingInternalServerError creates a RequestCloudAccountLinkingInternalServerError with default headers values
func NewRequestCloudAccountLinkingInternalServerError() *RequestCloudAccountLinkingInternalServerError {
	return &RequestCloudAccountLinkingInternalServerError{}
}

/*
RequestCloudAccountLinkingInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RequestCloudAccountLinkingInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this request cloud account linking internal server error response has a 2xx status code
func (o *RequestCloudAccountLinkingInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request cloud account linking internal server error response has a 3xx status code
func (o *RequestCloudAccountLinkingInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request cloud account linking internal server error response has a 4xx status code
func (o *RequestCloudAccountLinkingInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this request cloud account linking internal server error response has a 5xx status code
func (o *RequestCloudAccountLinkingInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this request cloud account linking internal server error response a status code equal to that given
func (o *RequestCloudAccountLinkingInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the request cloud account linking internal server error response
func (o *RequestCloudAccountLinkingInternalServerError) Code() int {
	return 500
}

func (o *RequestCloudAccountLinkingInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-cloud][%d] requestCloudAccountLinkingInternalServerError %s", 500, payload)
}

func (o *RequestCloudAccountLinkingInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/link-cloud][%d] requestCloudAccountLinkingInternalServerError %s", 500, payload)
}

func (o *RequestCloudAccountLinkingInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RequestCloudAccountLinkingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
