// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ValidateGitlabAccountUsingPOSTReader is a Reader for the ValidateGitlabAccountUsingPOST structure.
type ValidateGitlabAccountUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateGitlabAccountUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateGitlabAccountUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewValidateGitlabAccountUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewValidateGitlabAccountUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewValidateGitlabAccountUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewValidateGitlabAccountUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/accounts/gitlab/validate] validateGitlabAccountUsingPOST", response, response.Code())
	}
}

// NewValidateGitlabAccountUsingPOSTOK creates a ValidateGitlabAccountUsingPOSTOK with default headers values
func NewValidateGitlabAccountUsingPOSTOK() *ValidateGitlabAccountUsingPOSTOK {
	return &ValidateGitlabAccountUsingPOSTOK{}
}

/*
ValidateGitlabAccountUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type ValidateGitlabAccountUsingPOSTOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this validate gitlab account using p o s t o k response has a 2xx status code
func (o *ValidateGitlabAccountUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate gitlab account using p o s t o k response has a 3xx status code
func (o *ValidateGitlabAccountUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gitlab account using p o s t o k response has a 4xx status code
func (o *ValidateGitlabAccountUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate gitlab account using p o s t o k response has a 5xx status code
func (o *ValidateGitlabAccountUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gitlab account using p o s t o k response a status code equal to that given
func (o *ValidateGitlabAccountUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate gitlab account using p o s t o k response
func (o *ValidateGitlabAccountUsingPOSTOK) Code() int {
	return 200
}

func (o *ValidateGitlabAccountUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountUsingPOSTOK %s", 200, payload)
}

func (o *ValidateGitlabAccountUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountUsingPOSTOK %s", 200, payload)
}

func (o *ValidateGitlabAccountUsingPOSTOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *ValidateGitlabAccountUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateGitlabAccountUsingPOSTCreated creates a ValidateGitlabAccountUsingPOSTCreated with default headers values
func NewValidateGitlabAccountUsingPOSTCreated() *ValidateGitlabAccountUsingPOSTCreated {
	return &ValidateGitlabAccountUsingPOSTCreated{}
}

/*
ValidateGitlabAccountUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type ValidateGitlabAccountUsingPOSTCreated struct {
}

// IsSuccess returns true when this validate gitlab account using p o s t created response has a 2xx status code
func (o *ValidateGitlabAccountUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate gitlab account using p o s t created response has a 3xx status code
func (o *ValidateGitlabAccountUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gitlab account using p o s t created response has a 4xx status code
func (o *ValidateGitlabAccountUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate gitlab account using p o s t created response has a 5xx status code
func (o *ValidateGitlabAccountUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gitlab account using p o s t created response a status code equal to that given
func (o *ValidateGitlabAccountUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the validate gitlab account using p o s t created response
func (o *ValidateGitlabAccountUsingPOSTCreated) Code() int {
	return 201
}

func (o *ValidateGitlabAccountUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountUsingPOSTCreated", 201)
}

func (o *ValidateGitlabAccountUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountUsingPOSTCreated", 201)
}

func (o *ValidateGitlabAccountUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateGitlabAccountUsingPOSTUnauthorized creates a ValidateGitlabAccountUsingPOSTUnauthorized with default headers values
func NewValidateGitlabAccountUsingPOSTUnauthorized() *ValidateGitlabAccountUsingPOSTUnauthorized {
	return &ValidateGitlabAccountUsingPOSTUnauthorized{}
}

/*
ValidateGitlabAccountUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ValidateGitlabAccountUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this validate gitlab account using p o s t unauthorized response has a 2xx status code
func (o *ValidateGitlabAccountUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate gitlab account using p o s t unauthorized response has a 3xx status code
func (o *ValidateGitlabAccountUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gitlab account using p o s t unauthorized response has a 4xx status code
func (o *ValidateGitlabAccountUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate gitlab account using p o s t unauthorized response has a 5xx status code
func (o *ValidateGitlabAccountUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gitlab account using p o s t unauthorized response a status code equal to that given
func (o *ValidateGitlabAccountUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the validate gitlab account using p o s t unauthorized response
func (o *ValidateGitlabAccountUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *ValidateGitlabAccountUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountUsingPOSTUnauthorized", 401)
}

func (o *ValidateGitlabAccountUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountUsingPOSTUnauthorized", 401)
}

func (o *ValidateGitlabAccountUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateGitlabAccountUsingPOSTForbidden creates a ValidateGitlabAccountUsingPOSTForbidden with default headers values
func NewValidateGitlabAccountUsingPOSTForbidden() *ValidateGitlabAccountUsingPOSTForbidden {
	return &ValidateGitlabAccountUsingPOSTForbidden{}
}

/*
ValidateGitlabAccountUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ValidateGitlabAccountUsingPOSTForbidden struct {
}

// IsSuccess returns true when this validate gitlab account using p o s t forbidden response has a 2xx status code
func (o *ValidateGitlabAccountUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate gitlab account using p o s t forbidden response has a 3xx status code
func (o *ValidateGitlabAccountUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gitlab account using p o s t forbidden response has a 4xx status code
func (o *ValidateGitlabAccountUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate gitlab account using p o s t forbidden response has a 5xx status code
func (o *ValidateGitlabAccountUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gitlab account using p o s t forbidden response a status code equal to that given
func (o *ValidateGitlabAccountUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the validate gitlab account using p o s t forbidden response
func (o *ValidateGitlabAccountUsingPOSTForbidden) Code() int {
	return 403
}

func (o *ValidateGitlabAccountUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountUsingPOSTForbidden", 403)
}

func (o *ValidateGitlabAccountUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountUsingPOSTForbidden", 403)
}

func (o *ValidateGitlabAccountUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateGitlabAccountUsingPOSTNotFound creates a ValidateGitlabAccountUsingPOSTNotFound with default headers values
func NewValidateGitlabAccountUsingPOSTNotFound() *ValidateGitlabAccountUsingPOSTNotFound {
	return &ValidateGitlabAccountUsingPOSTNotFound{}
}

/*
ValidateGitlabAccountUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ValidateGitlabAccountUsingPOSTNotFound struct {
}

// IsSuccess returns true when this validate gitlab account using p o s t not found response has a 2xx status code
func (o *ValidateGitlabAccountUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate gitlab account using p o s t not found response has a 3xx status code
func (o *ValidateGitlabAccountUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gitlab account using p o s t not found response has a 4xx status code
func (o *ValidateGitlabAccountUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate gitlab account using p o s t not found response has a 5xx status code
func (o *ValidateGitlabAccountUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gitlab account using p o s t not found response a status code equal to that given
func (o *ValidateGitlabAccountUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the validate gitlab account using p o s t not found response
func (o *ValidateGitlabAccountUsingPOSTNotFound) Code() int {
	return 404
}

func (o *ValidateGitlabAccountUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountUsingPOSTNotFound", 404)
}

func (o *ValidateGitlabAccountUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gitlab/validate][%d] validateGitlabAccountUsingPOSTNotFound", 404)
}

func (o *ValidateGitlabAccountUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
