// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RefreshAllVCSTokenDetailsUsingPOSTReader is a Reader for the RefreshAllVCSTokenDetailsUsingPOST structure.
type RefreshAllVCSTokenDetailsUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RefreshAllVCSTokenDetailsUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRefreshAllVCSTokenDetailsUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewRefreshAllVCSTokenDetailsUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRefreshAllVCSTokenDetailsUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRefreshAllVCSTokenDetailsUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRefreshAllVCSTokenDetailsUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/accounts/token-details/refresh] refreshAllVCSTokenDetailsUsingPOST", response, response.Code())
	}
}

// NewRefreshAllVCSTokenDetailsUsingPOSTOK creates a RefreshAllVCSTokenDetailsUsingPOSTOK with default headers values
func NewRefreshAllVCSTokenDetailsUsingPOSTOK() *RefreshAllVCSTokenDetailsUsingPOSTOK {
	return &RefreshAllVCSTokenDetailsUsingPOSTOK{}
}

/*
RefreshAllVCSTokenDetailsUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type RefreshAllVCSTokenDetailsUsingPOSTOK struct {
}

// IsSuccess returns true when this refresh all v c s token details using p o s t o k response has a 2xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this refresh all v c s token details using p o s t o k response has a 3xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh all v c s token details using p o s t o k response has a 4xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh all v c s token details using p o s t o k response has a 5xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh all v c s token details using p o s t o k response a status code equal to that given
func (o *RefreshAllVCSTokenDetailsUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the refresh all v c s token details using p o s t o k response
func (o *RefreshAllVCSTokenDetailsUsingPOSTOK) Code() int {
	return 200
}

func (o *RefreshAllVCSTokenDetailsUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsUsingPOSTOK", 200)
}

func (o *RefreshAllVCSTokenDetailsUsingPOSTOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsUsingPOSTOK", 200)
}

func (o *RefreshAllVCSTokenDetailsUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefreshAllVCSTokenDetailsUsingPOSTCreated creates a RefreshAllVCSTokenDetailsUsingPOSTCreated with default headers values
func NewRefreshAllVCSTokenDetailsUsingPOSTCreated() *RefreshAllVCSTokenDetailsUsingPOSTCreated {
	return &RefreshAllVCSTokenDetailsUsingPOSTCreated{}
}

/*
RefreshAllVCSTokenDetailsUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type RefreshAllVCSTokenDetailsUsingPOSTCreated struct {
}

// IsSuccess returns true when this refresh all v c s token details using p o s t created response has a 2xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this refresh all v c s token details using p o s t created response has a 3xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh all v c s token details using p o s t created response has a 4xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh all v c s token details using p o s t created response has a 5xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh all v c s token details using p o s t created response a status code equal to that given
func (o *RefreshAllVCSTokenDetailsUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the refresh all v c s token details using p o s t created response
func (o *RefreshAllVCSTokenDetailsUsingPOSTCreated) Code() int {
	return 201
}

func (o *RefreshAllVCSTokenDetailsUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsUsingPOSTCreated", 201)
}

func (o *RefreshAllVCSTokenDetailsUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsUsingPOSTCreated", 201)
}

func (o *RefreshAllVCSTokenDetailsUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefreshAllVCSTokenDetailsUsingPOSTUnauthorized creates a RefreshAllVCSTokenDetailsUsingPOSTUnauthorized with default headers values
func NewRefreshAllVCSTokenDetailsUsingPOSTUnauthorized() *RefreshAllVCSTokenDetailsUsingPOSTUnauthorized {
	return &RefreshAllVCSTokenDetailsUsingPOSTUnauthorized{}
}

/*
RefreshAllVCSTokenDetailsUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RefreshAllVCSTokenDetailsUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this refresh all v c s token details using p o s t unauthorized response has a 2xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh all v c s token details using p o s t unauthorized response has a 3xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh all v c s token details using p o s t unauthorized response has a 4xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh all v c s token details using p o s t unauthorized response has a 5xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh all v c s token details using p o s t unauthorized response a status code equal to that given
func (o *RefreshAllVCSTokenDetailsUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the refresh all v c s token details using p o s t unauthorized response
func (o *RefreshAllVCSTokenDetailsUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *RefreshAllVCSTokenDetailsUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsUsingPOSTUnauthorized", 401)
}

func (o *RefreshAllVCSTokenDetailsUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsUsingPOSTUnauthorized", 401)
}

func (o *RefreshAllVCSTokenDetailsUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefreshAllVCSTokenDetailsUsingPOSTForbidden creates a RefreshAllVCSTokenDetailsUsingPOSTForbidden with default headers values
func NewRefreshAllVCSTokenDetailsUsingPOSTForbidden() *RefreshAllVCSTokenDetailsUsingPOSTForbidden {
	return &RefreshAllVCSTokenDetailsUsingPOSTForbidden{}
}

/*
RefreshAllVCSTokenDetailsUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RefreshAllVCSTokenDetailsUsingPOSTForbidden struct {
}

// IsSuccess returns true when this refresh all v c s token details using p o s t forbidden response has a 2xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh all v c s token details using p o s t forbidden response has a 3xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh all v c s token details using p o s t forbidden response has a 4xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh all v c s token details using p o s t forbidden response has a 5xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh all v c s token details using p o s t forbidden response a status code equal to that given
func (o *RefreshAllVCSTokenDetailsUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the refresh all v c s token details using p o s t forbidden response
func (o *RefreshAllVCSTokenDetailsUsingPOSTForbidden) Code() int {
	return 403
}

func (o *RefreshAllVCSTokenDetailsUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsUsingPOSTForbidden", 403)
}

func (o *RefreshAllVCSTokenDetailsUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsUsingPOSTForbidden", 403)
}

func (o *RefreshAllVCSTokenDetailsUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefreshAllVCSTokenDetailsUsingPOSTNotFound creates a RefreshAllVCSTokenDetailsUsingPOSTNotFound with default headers values
func NewRefreshAllVCSTokenDetailsUsingPOSTNotFound() *RefreshAllVCSTokenDetailsUsingPOSTNotFound {
	return &RefreshAllVCSTokenDetailsUsingPOSTNotFound{}
}

/*
RefreshAllVCSTokenDetailsUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RefreshAllVCSTokenDetailsUsingPOSTNotFound struct {
}

// IsSuccess returns true when this refresh all v c s token details using p o s t not found response has a 2xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh all v c s token details using p o s t not found response has a 3xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh all v c s token details using p o s t not found response has a 4xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh all v c s token details using p o s t not found response has a 5xx status code
func (o *RefreshAllVCSTokenDetailsUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh all v c s token details using p o s t not found response a status code equal to that given
func (o *RefreshAllVCSTokenDetailsUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the refresh all v c s token details using p o s t not found response
func (o *RefreshAllVCSTokenDetailsUsingPOSTNotFound) Code() int {
	return 404
}

func (o *RefreshAllVCSTokenDetailsUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsUsingPOSTNotFound", 404)
}

func (o *RefreshAllVCSTokenDetailsUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsUsingPOSTNotFound", 404)
}

func (o *RefreshAllVCSTokenDetailsUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
