// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RefreshAllVCSTokenDetailsReader is a Reader for the RefreshAllVCSTokenDetails structure.
type RefreshAllVCSTokenDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RefreshAllVCSTokenDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRefreshAllVCSTokenDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRefreshAllVCSTokenDetailsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRefreshAllVCSTokenDetailsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRefreshAllVCSTokenDetailsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRefreshAllVCSTokenDetailsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/accounts/token-details/refresh] refreshAllVCSTokenDetails", response, response.Code())
	}
}

// NewRefreshAllVCSTokenDetailsOK creates a RefreshAllVCSTokenDetailsOK with default headers values
func NewRefreshAllVCSTokenDetailsOK() *RefreshAllVCSTokenDetailsOK {
	return &RefreshAllVCSTokenDetailsOK{}
}

/*
RefreshAllVCSTokenDetailsOK describes a response with status code 200, with default header values.

OK
*/
type RefreshAllVCSTokenDetailsOK struct {
}

// IsSuccess returns true when this refresh all v c s token details o k response has a 2xx status code
func (o *RefreshAllVCSTokenDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this refresh all v c s token details o k response has a 3xx status code
func (o *RefreshAllVCSTokenDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh all v c s token details o k response has a 4xx status code
func (o *RefreshAllVCSTokenDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh all v c s token details o k response has a 5xx status code
func (o *RefreshAllVCSTokenDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh all v c s token details o k response a status code equal to that given
func (o *RefreshAllVCSTokenDetailsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the refresh all v c s token details o k response
func (o *RefreshAllVCSTokenDetailsOK) Code() int {
	return 200
}

func (o *RefreshAllVCSTokenDetailsOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsOK", 200)
}

func (o *RefreshAllVCSTokenDetailsOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsOK", 200)
}

func (o *RefreshAllVCSTokenDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefreshAllVCSTokenDetailsBadRequest creates a RefreshAllVCSTokenDetailsBadRequest with default headers values
func NewRefreshAllVCSTokenDetailsBadRequest() *RefreshAllVCSTokenDetailsBadRequest {
	return &RefreshAllVCSTokenDetailsBadRequest{}
}

/*
RefreshAllVCSTokenDetailsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RefreshAllVCSTokenDetailsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this refresh all v c s token details bad request response has a 2xx status code
func (o *RefreshAllVCSTokenDetailsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh all v c s token details bad request response has a 3xx status code
func (o *RefreshAllVCSTokenDetailsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh all v c s token details bad request response has a 4xx status code
func (o *RefreshAllVCSTokenDetailsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh all v c s token details bad request response has a 5xx status code
func (o *RefreshAllVCSTokenDetailsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh all v c s token details bad request response a status code equal to that given
func (o *RefreshAllVCSTokenDetailsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the refresh all v c s token details bad request response
func (o *RefreshAllVCSTokenDetailsBadRequest) Code() int {
	return 400
}

func (o *RefreshAllVCSTokenDetailsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsBadRequest %s", 400, payload)
}

func (o *RefreshAllVCSTokenDetailsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsBadRequest %s", 400, payload)
}

func (o *RefreshAllVCSTokenDetailsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RefreshAllVCSTokenDetailsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshAllVCSTokenDetailsNotFound creates a RefreshAllVCSTokenDetailsNotFound with default headers values
func NewRefreshAllVCSTokenDetailsNotFound() *RefreshAllVCSTokenDetailsNotFound {
	return &RefreshAllVCSTokenDetailsNotFound{}
}

/*
RefreshAllVCSTokenDetailsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RefreshAllVCSTokenDetailsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this refresh all v c s token details not found response has a 2xx status code
func (o *RefreshAllVCSTokenDetailsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh all v c s token details not found response has a 3xx status code
func (o *RefreshAllVCSTokenDetailsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh all v c s token details not found response has a 4xx status code
func (o *RefreshAllVCSTokenDetailsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh all v c s token details not found response has a 5xx status code
func (o *RefreshAllVCSTokenDetailsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh all v c s token details not found response a status code equal to that given
func (o *RefreshAllVCSTokenDetailsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the refresh all v c s token details not found response
func (o *RefreshAllVCSTokenDetailsNotFound) Code() int {
	return 404
}

func (o *RefreshAllVCSTokenDetailsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsNotFound %s", 404, payload)
}

func (o *RefreshAllVCSTokenDetailsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsNotFound %s", 404, payload)
}

func (o *RefreshAllVCSTokenDetailsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RefreshAllVCSTokenDetailsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshAllVCSTokenDetailsMethodNotAllowed creates a RefreshAllVCSTokenDetailsMethodNotAllowed with default headers values
func NewRefreshAllVCSTokenDetailsMethodNotAllowed() *RefreshAllVCSTokenDetailsMethodNotAllowed {
	return &RefreshAllVCSTokenDetailsMethodNotAllowed{}
}

/*
RefreshAllVCSTokenDetailsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RefreshAllVCSTokenDetailsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this refresh all v c s token details method not allowed response has a 2xx status code
func (o *RefreshAllVCSTokenDetailsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh all v c s token details method not allowed response has a 3xx status code
func (o *RefreshAllVCSTokenDetailsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh all v c s token details method not allowed response has a 4xx status code
func (o *RefreshAllVCSTokenDetailsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh all v c s token details method not allowed response has a 5xx status code
func (o *RefreshAllVCSTokenDetailsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh all v c s token details method not allowed response a status code equal to that given
func (o *RefreshAllVCSTokenDetailsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the refresh all v c s token details method not allowed response
func (o *RefreshAllVCSTokenDetailsMethodNotAllowed) Code() int {
	return 405
}

func (o *RefreshAllVCSTokenDetailsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsMethodNotAllowed %s", 405, payload)
}

func (o *RefreshAllVCSTokenDetailsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsMethodNotAllowed %s", 405, payload)
}

func (o *RefreshAllVCSTokenDetailsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RefreshAllVCSTokenDetailsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshAllVCSTokenDetailsInternalServerError creates a RefreshAllVCSTokenDetailsInternalServerError with default headers values
func NewRefreshAllVCSTokenDetailsInternalServerError() *RefreshAllVCSTokenDetailsInternalServerError {
	return &RefreshAllVCSTokenDetailsInternalServerError{}
}

/*
RefreshAllVCSTokenDetailsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RefreshAllVCSTokenDetailsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this refresh all v c s token details internal server error response has a 2xx status code
func (o *RefreshAllVCSTokenDetailsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh all v c s token details internal server error response has a 3xx status code
func (o *RefreshAllVCSTokenDetailsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh all v c s token details internal server error response has a 4xx status code
func (o *RefreshAllVCSTokenDetailsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh all v c s token details internal server error response has a 5xx status code
func (o *RefreshAllVCSTokenDetailsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this refresh all v c s token details internal server error response a status code equal to that given
func (o *RefreshAllVCSTokenDetailsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the refresh all v c s token details internal server error response
func (o *RefreshAllVCSTokenDetailsInternalServerError) Code() int {
	return 500
}

func (o *RefreshAllVCSTokenDetailsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsInternalServerError %s", 500, payload)
}

func (o *RefreshAllVCSTokenDetailsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/token-details/refresh][%d] refreshAllVCSTokenDetailsInternalServerError %s", 500, payload)
}

func (o *RefreshAllVCSTokenDetailsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RefreshAllVCSTokenDetailsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
