// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ValidateGithubAccountReader is a Reader for the ValidateGithubAccount structure.
type ValidateGithubAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateGithubAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateGithubAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateGithubAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewValidateGithubAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewValidateGithubAccountMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewValidateGithubAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/accounts/github/validate] validateGithubAccount", response, response.Code())
	}
}

// NewValidateGithubAccountOK creates a ValidateGithubAccountOK with default headers values
func NewValidateGithubAccountOK() *ValidateGithubAccountOK {
	return &ValidateGithubAccountOK{}
}

/*
ValidateGithubAccountOK describes a response with status code 200, with default header values.

OK
*/
type ValidateGithubAccountOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this validate github account o k response has a 2xx status code
func (o *ValidateGithubAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate github account o k response has a 3xx status code
func (o *ValidateGithubAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate github account o k response has a 4xx status code
func (o *ValidateGithubAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate github account o k response has a 5xx status code
func (o *ValidateGithubAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate github account o k response a status code equal to that given
func (o *ValidateGithubAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate github account o k response
func (o *ValidateGithubAccountOK) Code() int {
	return 200
}

func (o *ValidateGithubAccountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountOK %s", 200, payload)
}

func (o *ValidateGithubAccountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountOK %s", 200, payload)
}

func (o *ValidateGithubAccountOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *ValidateGithubAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateGithubAccountBadRequest creates a ValidateGithubAccountBadRequest with default headers values
func NewValidateGithubAccountBadRequest() *ValidateGithubAccountBadRequest {
	return &ValidateGithubAccountBadRequest{}
}

/*
ValidateGithubAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ValidateGithubAccountBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate github account bad request response has a 2xx status code
func (o *ValidateGithubAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate github account bad request response has a 3xx status code
func (o *ValidateGithubAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate github account bad request response has a 4xx status code
func (o *ValidateGithubAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate github account bad request response has a 5xx status code
func (o *ValidateGithubAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this validate github account bad request response a status code equal to that given
func (o *ValidateGithubAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the validate github account bad request response
func (o *ValidateGithubAccountBadRequest) Code() int {
	return 400
}

func (o *ValidateGithubAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountBadRequest %s", 400, payload)
}

func (o *ValidateGithubAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountBadRequest %s", 400, payload)
}

func (o *ValidateGithubAccountBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateGithubAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateGithubAccountNotFound creates a ValidateGithubAccountNotFound with default headers values
func NewValidateGithubAccountNotFound() *ValidateGithubAccountNotFound {
	return &ValidateGithubAccountNotFound{}
}

/*
ValidateGithubAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ValidateGithubAccountNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate github account not found response has a 2xx status code
func (o *ValidateGithubAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate github account not found response has a 3xx status code
func (o *ValidateGithubAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate github account not found response has a 4xx status code
func (o *ValidateGithubAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate github account not found response has a 5xx status code
func (o *ValidateGithubAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this validate github account not found response a status code equal to that given
func (o *ValidateGithubAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the validate github account not found response
func (o *ValidateGithubAccountNotFound) Code() int {
	return 404
}

func (o *ValidateGithubAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountNotFound %s", 404, payload)
}

func (o *ValidateGithubAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountNotFound %s", 404, payload)
}

func (o *ValidateGithubAccountNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateGithubAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateGithubAccountMethodNotAllowed creates a ValidateGithubAccountMethodNotAllowed with default headers values
func NewValidateGithubAccountMethodNotAllowed() *ValidateGithubAccountMethodNotAllowed {
	return &ValidateGithubAccountMethodNotAllowed{}
}

/*
ValidateGithubAccountMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ValidateGithubAccountMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate github account method not allowed response has a 2xx status code
func (o *ValidateGithubAccountMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate github account method not allowed response has a 3xx status code
func (o *ValidateGithubAccountMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate github account method not allowed response has a 4xx status code
func (o *ValidateGithubAccountMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate github account method not allowed response has a 5xx status code
func (o *ValidateGithubAccountMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this validate github account method not allowed response a status code equal to that given
func (o *ValidateGithubAccountMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the validate github account method not allowed response
func (o *ValidateGithubAccountMethodNotAllowed) Code() int {
	return 405
}

func (o *ValidateGithubAccountMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountMethodNotAllowed %s", 405, payload)
}

func (o *ValidateGithubAccountMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountMethodNotAllowed %s", 405, payload)
}

func (o *ValidateGithubAccountMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateGithubAccountMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateGithubAccountInternalServerError creates a ValidateGithubAccountInternalServerError with default headers values
func NewValidateGithubAccountInternalServerError() *ValidateGithubAccountInternalServerError {
	return &ValidateGithubAccountInternalServerError{}
}

/*
ValidateGithubAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ValidateGithubAccountInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate github account internal server error response has a 2xx status code
func (o *ValidateGithubAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate github account internal server error response has a 3xx status code
func (o *ValidateGithubAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate github account internal server error response has a 4xx status code
func (o *ValidateGithubAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate github account internal server error response has a 5xx status code
func (o *ValidateGithubAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this validate github account internal server error response a status code equal to that given
func (o *ValidateGithubAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the validate github account internal server error response
func (o *ValidateGithubAccountInternalServerError) Code() int {
	return 500
}

func (o *ValidateGithubAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountInternalServerError %s", 500, payload)
}

func (o *ValidateGithubAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountInternalServerError %s", 500, payload)
}

func (o *ValidateGithubAccountInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateGithubAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
