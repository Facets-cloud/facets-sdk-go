// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateGitLabAccountUsingPUTReader is a Reader for the UpdateGitLabAccountUsingPUT structure.
type UpdateGitLabAccountUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGitLabAccountUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGitLabAccountUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateGitLabAccountUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateGitLabAccountUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateGitLabAccountUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGitLabAccountUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/accounts/gitlab/{id}] updateGitLabAccountUsingPUT", response, response.Code())
	}
}

// NewUpdateGitLabAccountUsingPUTOK creates a UpdateGitLabAccountUsingPUTOK with default headers values
func NewUpdateGitLabAccountUsingPUTOK() *UpdateGitLabAccountUsingPUTOK {
	return &UpdateGitLabAccountUsingPUTOK{}
}

/*
UpdateGitLabAccountUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateGitLabAccountUsingPUTOK struct {
	Payload *models.GitLabAccount
}

// IsSuccess returns true when this update git lab account using p u t o k response has a 2xx status code
func (o *UpdateGitLabAccountUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update git lab account using p u t o k response has a 3xx status code
func (o *UpdateGitLabAccountUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git lab account using p u t o k response has a 4xx status code
func (o *UpdateGitLabAccountUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update git lab account using p u t o k response has a 5xx status code
func (o *UpdateGitLabAccountUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update git lab account using p u t o k response a status code equal to that given
func (o *UpdateGitLabAccountUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update git lab account using p u t o k response
func (o *UpdateGitLabAccountUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateGitLabAccountUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountUsingPUTOK %s", 200, payload)
}

func (o *UpdateGitLabAccountUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountUsingPUTOK %s", 200, payload)
}

func (o *UpdateGitLabAccountUsingPUTOK) GetPayload() *models.GitLabAccount {
	return o.Payload
}

func (o *UpdateGitLabAccountUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GitLabAccount)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGitLabAccountUsingPUTCreated creates a UpdateGitLabAccountUsingPUTCreated with default headers values
func NewUpdateGitLabAccountUsingPUTCreated() *UpdateGitLabAccountUsingPUTCreated {
	return &UpdateGitLabAccountUsingPUTCreated{}
}

/*
UpdateGitLabAccountUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateGitLabAccountUsingPUTCreated struct {
}

// IsSuccess returns true when this update git lab account using p u t created response has a 2xx status code
func (o *UpdateGitLabAccountUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update git lab account using p u t created response has a 3xx status code
func (o *UpdateGitLabAccountUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git lab account using p u t created response has a 4xx status code
func (o *UpdateGitLabAccountUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update git lab account using p u t created response has a 5xx status code
func (o *UpdateGitLabAccountUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update git lab account using p u t created response a status code equal to that given
func (o *UpdateGitLabAccountUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update git lab account using p u t created response
func (o *UpdateGitLabAccountUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateGitLabAccountUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountUsingPUTCreated", 201)
}

func (o *UpdateGitLabAccountUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountUsingPUTCreated", 201)
}

func (o *UpdateGitLabAccountUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGitLabAccountUsingPUTUnauthorized creates a UpdateGitLabAccountUsingPUTUnauthorized with default headers values
func NewUpdateGitLabAccountUsingPUTUnauthorized() *UpdateGitLabAccountUsingPUTUnauthorized {
	return &UpdateGitLabAccountUsingPUTUnauthorized{}
}

/*
UpdateGitLabAccountUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateGitLabAccountUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update git lab account using p u t unauthorized response has a 2xx status code
func (o *UpdateGitLabAccountUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git lab account using p u t unauthorized response has a 3xx status code
func (o *UpdateGitLabAccountUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git lab account using p u t unauthorized response has a 4xx status code
func (o *UpdateGitLabAccountUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git lab account using p u t unauthorized response has a 5xx status code
func (o *UpdateGitLabAccountUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update git lab account using p u t unauthorized response a status code equal to that given
func (o *UpdateGitLabAccountUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update git lab account using p u t unauthorized response
func (o *UpdateGitLabAccountUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateGitLabAccountUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountUsingPUTUnauthorized", 401)
}

func (o *UpdateGitLabAccountUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountUsingPUTUnauthorized", 401)
}

func (o *UpdateGitLabAccountUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGitLabAccountUsingPUTForbidden creates a UpdateGitLabAccountUsingPUTForbidden with default headers values
func NewUpdateGitLabAccountUsingPUTForbidden() *UpdateGitLabAccountUsingPUTForbidden {
	return &UpdateGitLabAccountUsingPUTForbidden{}
}

/*
UpdateGitLabAccountUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateGitLabAccountUsingPUTForbidden struct {
}

// IsSuccess returns true when this update git lab account using p u t forbidden response has a 2xx status code
func (o *UpdateGitLabAccountUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git lab account using p u t forbidden response has a 3xx status code
func (o *UpdateGitLabAccountUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git lab account using p u t forbidden response has a 4xx status code
func (o *UpdateGitLabAccountUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git lab account using p u t forbidden response has a 5xx status code
func (o *UpdateGitLabAccountUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update git lab account using p u t forbidden response a status code equal to that given
func (o *UpdateGitLabAccountUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update git lab account using p u t forbidden response
func (o *UpdateGitLabAccountUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateGitLabAccountUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountUsingPUTForbidden", 403)
}

func (o *UpdateGitLabAccountUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountUsingPUTForbidden", 403)
}

func (o *UpdateGitLabAccountUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGitLabAccountUsingPUTNotFound creates a UpdateGitLabAccountUsingPUTNotFound with default headers values
func NewUpdateGitLabAccountUsingPUTNotFound() *UpdateGitLabAccountUsingPUTNotFound {
	return &UpdateGitLabAccountUsingPUTNotFound{}
}

/*
UpdateGitLabAccountUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateGitLabAccountUsingPUTNotFound struct {
}

// IsSuccess returns true when this update git lab account using p u t not found response has a 2xx status code
func (o *UpdateGitLabAccountUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git lab account using p u t not found response has a 3xx status code
func (o *UpdateGitLabAccountUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git lab account using p u t not found response has a 4xx status code
func (o *UpdateGitLabAccountUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git lab account using p u t not found response has a 5xx status code
func (o *UpdateGitLabAccountUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update git lab account using p u t not found response a status code equal to that given
func (o *UpdateGitLabAccountUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update git lab account using p u t not found response
func (o *UpdateGitLabAccountUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateGitLabAccountUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountUsingPUTNotFound", 404)
}

func (o *UpdateGitLabAccountUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountUsingPUTNotFound", 404)
}

func (o *UpdateGitLabAccountUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
