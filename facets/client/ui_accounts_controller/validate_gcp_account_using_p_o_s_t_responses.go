// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ValidateGcpAccountUsingPOSTReader is a Reader for the ValidateGcpAccountUsingPOST structure.
type ValidateGcpAccountUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateGcpAccountUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateGcpAccountUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewValidateGcpAccountUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewValidateGcpAccountUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewValidateGcpAccountUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewValidateGcpAccountUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/accounts/gcp/validate] validateGcpAccountUsingPOST", response, response.Code())
	}
}

// NewValidateGcpAccountUsingPOSTOK creates a ValidateGcpAccountUsingPOSTOK with default headers values
func NewValidateGcpAccountUsingPOSTOK() *ValidateGcpAccountUsingPOSTOK {
	return &ValidateGcpAccountUsingPOSTOK{}
}

/*
ValidateGcpAccountUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type ValidateGcpAccountUsingPOSTOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this validate gcp account using p o s t o k response has a 2xx status code
func (o *ValidateGcpAccountUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate gcp account using p o s t o k response has a 3xx status code
func (o *ValidateGcpAccountUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gcp account using p o s t o k response has a 4xx status code
func (o *ValidateGcpAccountUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate gcp account using p o s t o k response has a 5xx status code
func (o *ValidateGcpAccountUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gcp account using p o s t o k response a status code equal to that given
func (o *ValidateGcpAccountUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate gcp account using p o s t o k response
func (o *ValidateGcpAccountUsingPOSTOK) Code() int {
	return 200
}

func (o *ValidateGcpAccountUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountUsingPOSTOK %s", 200, payload)
}

func (o *ValidateGcpAccountUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountUsingPOSTOK %s", 200, payload)
}

func (o *ValidateGcpAccountUsingPOSTOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *ValidateGcpAccountUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateGcpAccountUsingPOSTCreated creates a ValidateGcpAccountUsingPOSTCreated with default headers values
func NewValidateGcpAccountUsingPOSTCreated() *ValidateGcpAccountUsingPOSTCreated {
	return &ValidateGcpAccountUsingPOSTCreated{}
}

/*
ValidateGcpAccountUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type ValidateGcpAccountUsingPOSTCreated struct {
}

// IsSuccess returns true when this validate gcp account using p o s t created response has a 2xx status code
func (o *ValidateGcpAccountUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate gcp account using p o s t created response has a 3xx status code
func (o *ValidateGcpAccountUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gcp account using p o s t created response has a 4xx status code
func (o *ValidateGcpAccountUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate gcp account using p o s t created response has a 5xx status code
func (o *ValidateGcpAccountUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gcp account using p o s t created response a status code equal to that given
func (o *ValidateGcpAccountUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the validate gcp account using p o s t created response
func (o *ValidateGcpAccountUsingPOSTCreated) Code() int {
	return 201
}

func (o *ValidateGcpAccountUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountUsingPOSTCreated", 201)
}

func (o *ValidateGcpAccountUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountUsingPOSTCreated", 201)
}

func (o *ValidateGcpAccountUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateGcpAccountUsingPOSTUnauthorized creates a ValidateGcpAccountUsingPOSTUnauthorized with default headers values
func NewValidateGcpAccountUsingPOSTUnauthorized() *ValidateGcpAccountUsingPOSTUnauthorized {
	return &ValidateGcpAccountUsingPOSTUnauthorized{}
}

/*
ValidateGcpAccountUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ValidateGcpAccountUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this validate gcp account using p o s t unauthorized response has a 2xx status code
func (o *ValidateGcpAccountUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate gcp account using p o s t unauthorized response has a 3xx status code
func (o *ValidateGcpAccountUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gcp account using p o s t unauthorized response has a 4xx status code
func (o *ValidateGcpAccountUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate gcp account using p o s t unauthorized response has a 5xx status code
func (o *ValidateGcpAccountUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gcp account using p o s t unauthorized response a status code equal to that given
func (o *ValidateGcpAccountUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the validate gcp account using p o s t unauthorized response
func (o *ValidateGcpAccountUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *ValidateGcpAccountUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountUsingPOSTUnauthorized", 401)
}

func (o *ValidateGcpAccountUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountUsingPOSTUnauthorized", 401)
}

func (o *ValidateGcpAccountUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateGcpAccountUsingPOSTForbidden creates a ValidateGcpAccountUsingPOSTForbidden with default headers values
func NewValidateGcpAccountUsingPOSTForbidden() *ValidateGcpAccountUsingPOSTForbidden {
	return &ValidateGcpAccountUsingPOSTForbidden{}
}

/*
ValidateGcpAccountUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ValidateGcpAccountUsingPOSTForbidden struct {
}

// IsSuccess returns true when this validate gcp account using p o s t forbidden response has a 2xx status code
func (o *ValidateGcpAccountUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate gcp account using p o s t forbidden response has a 3xx status code
func (o *ValidateGcpAccountUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gcp account using p o s t forbidden response has a 4xx status code
func (o *ValidateGcpAccountUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate gcp account using p o s t forbidden response has a 5xx status code
func (o *ValidateGcpAccountUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gcp account using p o s t forbidden response a status code equal to that given
func (o *ValidateGcpAccountUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the validate gcp account using p o s t forbidden response
func (o *ValidateGcpAccountUsingPOSTForbidden) Code() int {
	return 403
}

func (o *ValidateGcpAccountUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountUsingPOSTForbidden", 403)
}

func (o *ValidateGcpAccountUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountUsingPOSTForbidden", 403)
}

func (o *ValidateGcpAccountUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateGcpAccountUsingPOSTNotFound creates a ValidateGcpAccountUsingPOSTNotFound with default headers values
func NewValidateGcpAccountUsingPOSTNotFound() *ValidateGcpAccountUsingPOSTNotFound {
	return &ValidateGcpAccountUsingPOSTNotFound{}
}

/*
ValidateGcpAccountUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ValidateGcpAccountUsingPOSTNotFound struct {
}

// IsSuccess returns true when this validate gcp account using p o s t not found response has a 2xx status code
func (o *ValidateGcpAccountUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate gcp account using p o s t not found response has a 3xx status code
func (o *ValidateGcpAccountUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gcp account using p o s t not found response has a 4xx status code
func (o *ValidateGcpAccountUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate gcp account using p o s t not found response has a 5xx status code
func (o *ValidateGcpAccountUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gcp account using p o s t not found response a status code equal to that given
func (o *ValidateGcpAccountUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the validate gcp account using p o s t not found response
func (o *ValidateGcpAccountUsingPOSTNotFound) Code() int {
	return 404
}

func (o *ValidateGcpAccountUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountUsingPOSTNotFound", 404)
}

func (o *ValidateGcpAccountUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountUsingPOSTNotFound", 404)
}

func (o *ValidateGcpAccountUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
