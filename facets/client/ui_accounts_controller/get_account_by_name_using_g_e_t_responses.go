// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAccountByNameUsingGETReader is a Reader for the GetAccountByNameUsingGET structure.
type GetAccountByNameUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccountByNameUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccountByNameUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAccountByNameUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAccountByNameUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAccountByNameUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/accounts/name/{name}] getAccountByNameUsingGET", response, response.Code())
	}
}

// NewGetAccountByNameUsingGETOK creates a GetAccountByNameUsingGETOK with default headers values
func NewGetAccountByNameUsingGETOK() *GetAccountByNameUsingGETOK {
	return &GetAccountByNameUsingGETOK{}
}

/*
GetAccountByNameUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAccountByNameUsingGETOK struct {
	Payload *models.Account
}

// IsSuccess returns true when this get account by name using g e t o k response has a 2xx status code
func (o *GetAccountByNameUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get account by name using g e t o k response has a 3xx status code
func (o *GetAccountByNameUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get account by name using g e t o k response has a 4xx status code
func (o *GetAccountByNameUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get account by name using g e t o k response has a 5xx status code
func (o *GetAccountByNameUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get account by name using g e t o k response a status code equal to that given
func (o *GetAccountByNameUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get account by name using g e t o k response
func (o *GetAccountByNameUsingGETOK) Code() int {
	return 200
}

func (o *GetAccountByNameUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/name/{name}][%d] getAccountByNameUsingGETOK %s", 200, payload)
}

func (o *GetAccountByNameUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/name/{name}][%d] getAccountByNameUsingGETOK %s", 200, payload)
}

func (o *GetAccountByNameUsingGETOK) GetPayload() *models.Account {
	return o.Payload
}

func (o *GetAccountByNameUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Account)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountByNameUsingGETUnauthorized creates a GetAccountByNameUsingGETUnauthorized with default headers values
func NewGetAccountByNameUsingGETUnauthorized() *GetAccountByNameUsingGETUnauthorized {
	return &GetAccountByNameUsingGETUnauthorized{}
}

/*
GetAccountByNameUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAccountByNameUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get account by name using g e t unauthorized response has a 2xx status code
func (o *GetAccountByNameUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get account by name using g e t unauthorized response has a 3xx status code
func (o *GetAccountByNameUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get account by name using g e t unauthorized response has a 4xx status code
func (o *GetAccountByNameUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get account by name using g e t unauthorized response has a 5xx status code
func (o *GetAccountByNameUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get account by name using g e t unauthorized response a status code equal to that given
func (o *GetAccountByNameUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get account by name using g e t unauthorized response
func (o *GetAccountByNameUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAccountByNameUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/name/{name}][%d] getAccountByNameUsingGETUnauthorized", 401)
}

func (o *GetAccountByNameUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/name/{name}][%d] getAccountByNameUsingGETUnauthorized", 401)
}

func (o *GetAccountByNameUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccountByNameUsingGETForbidden creates a GetAccountByNameUsingGETForbidden with default headers values
func NewGetAccountByNameUsingGETForbidden() *GetAccountByNameUsingGETForbidden {
	return &GetAccountByNameUsingGETForbidden{}
}

/*
GetAccountByNameUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAccountByNameUsingGETForbidden struct {
}

// IsSuccess returns true when this get account by name using g e t forbidden response has a 2xx status code
func (o *GetAccountByNameUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get account by name using g e t forbidden response has a 3xx status code
func (o *GetAccountByNameUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get account by name using g e t forbidden response has a 4xx status code
func (o *GetAccountByNameUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get account by name using g e t forbidden response has a 5xx status code
func (o *GetAccountByNameUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get account by name using g e t forbidden response a status code equal to that given
func (o *GetAccountByNameUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get account by name using g e t forbidden response
func (o *GetAccountByNameUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAccountByNameUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/name/{name}][%d] getAccountByNameUsingGETForbidden", 403)
}

func (o *GetAccountByNameUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/name/{name}][%d] getAccountByNameUsingGETForbidden", 403)
}

func (o *GetAccountByNameUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccountByNameUsingGETNotFound creates a GetAccountByNameUsingGETNotFound with default headers values
func NewGetAccountByNameUsingGETNotFound() *GetAccountByNameUsingGETNotFound {
	return &GetAccountByNameUsingGETNotFound{}
}

/*
GetAccountByNameUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAccountByNameUsingGETNotFound struct {
}

// IsSuccess returns true when this get account by name using g e t not found response has a 2xx status code
func (o *GetAccountByNameUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get account by name using g e t not found response has a 3xx status code
func (o *GetAccountByNameUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get account by name using g e t not found response has a 4xx status code
func (o *GetAccountByNameUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get account by name using g e t not found response has a 5xx status code
func (o *GetAccountByNameUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get account by name using g e t not found response a status code equal to that given
func (o *GetAccountByNameUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get account by name using g e t not found response
func (o *GetAccountByNameUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAccountByNameUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/name/{name}][%d] getAccountByNameUsingGETNotFound", 404)
}

func (o *GetAccountByNameUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/name/{name}][%d] getAccountByNameUsingGETNotFound", 404)
}

func (o *GetAccountByNameUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
