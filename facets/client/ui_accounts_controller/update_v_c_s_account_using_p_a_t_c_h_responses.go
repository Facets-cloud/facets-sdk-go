// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateVCSAccountUsingPATCHReader is a Reader for the UpdateVCSAccountUsingPATCH structure.
type UpdateVCSAccountUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVCSAccountUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVCSAccountUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateVCSAccountUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateVCSAccountUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateVCSAccountUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /cc-ui/v1/accounts/vcs/{id}] updateVCSAccountUsingPATCH", response, response.Code())
	}
}

// NewUpdateVCSAccountUsingPATCHOK creates a UpdateVCSAccountUsingPATCHOK with default headers values
func NewUpdateVCSAccountUsingPATCHOK() *UpdateVCSAccountUsingPATCHOK {
	return &UpdateVCSAccountUsingPATCHOK{}
}

/*
UpdateVCSAccountUsingPATCHOK describes a response with status code 200, with default header values.

OK
*/
type UpdateVCSAccountUsingPATCHOK struct {
}

// IsSuccess returns true when this update v c s account using p a t c h o k response has a 2xx status code
func (o *UpdateVCSAccountUsingPATCHOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update v c s account using p a t c h o k response has a 3xx status code
func (o *UpdateVCSAccountUsingPATCHOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v c s account using p a t c h o k response has a 4xx status code
func (o *UpdateVCSAccountUsingPATCHOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update v c s account using p a t c h o k response has a 5xx status code
func (o *UpdateVCSAccountUsingPATCHOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update v c s account using p a t c h o k response a status code equal to that given
func (o *UpdateVCSAccountUsingPATCHOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update v c s account using p a t c h o k response
func (o *UpdateVCSAccountUsingPATCHOK) Code() int {
	return 200
}

func (o *UpdateVCSAccountUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountUsingPATCHOK", 200)
}

func (o *UpdateVCSAccountUsingPATCHOK) String() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountUsingPATCHOK", 200)
}

func (o *UpdateVCSAccountUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVCSAccountUsingPATCHNoContent creates a UpdateVCSAccountUsingPATCHNoContent with default headers values
func NewUpdateVCSAccountUsingPATCHNoContent() *UpdateVCSAccountUsingPATCHNoContent {
	return &UpdateVCSAccountUsingPATCHNoContent{}
}

/*
UpdateVCSAccountUsingPATCHNoContent describes a response with status code 204, with default header values.

No Content
*/
type UpdateVCSAccountUsingPATCHNoContent struct {
}

// IsSuccess returns true when this update v c s account using p a t c h no content response has a 2xx status code
func (o *UpdateVCSAccountUsingPATCHNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update v c s account using p a t c h no content response has a 3xx status code
func (o *UpdateVCSAccountUsingPATCHNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v c s account using p a t c h no content response has a 4xx status code
func (o *UpdateVCSAccountUsingPATCHNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update v c s account using p a t c h no content response has a 5xx status code
func (o *UpdateVCSAccountUsingPATCHNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update v c s account using p a t c h no content response a status code equal to that given
func (o *UpdateVCSAccountUsingPATCHNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update v c s account using p a t c h no content response
func (o *UpdateVCSAccountUsingPATCHNoContent) Code() int {
	return 204
}

func (o *UpdateVCSAccountUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountUsingPATCHNoContent", 204)
}

func (o *UpdateVCSAccountUsingPATCHNoContent) String() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountUsingPATCHNoContent", 204)
}

func (o *UpdateVCSAccountUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVCSAccountUsingPATCHUnauthorized creates a UpdateVCSAccountUsingPATCHUnauthorized with default headers values
func NewUpdateVCSAccountUsingPATCHUnauthorized() *UpdateVCSAccountUsingPATCHUnauthorized {
	return &UpdateVCSAccountUsingPATCHUnauthorized{}
}

/*
UpdateVCSAccountUsingPATCHUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateVCSAccountUsingPATCHUnauthorized struct {
}

// IsSuccess returns true when this update v c s account using p a t c h unauthorized response has a 2xx status code
func (o *UpdateVCSAccountUsingPATCHUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update v c s account using p a t c h unauthorized response has a 3xx status code
func (o *UpdateVCSAccountUsingPATCHUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v c s account using p a t c h unauthorized response has a 4xx status code
func (o *UpdateVCSAccountUsingPATCHUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update v c s account using p a t c h unauthorized response has a 5xx status code
func (o *UpdateVCSAccountUsingPATCHUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update v c s account using p a t c h unauthorized response a status code equal to that given
func (o *UpdateVCSAccountUsingPATCHUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update v c s account using p a t c h unauthorized response
func (o *UpdateVCSAccountUsingPATCHUnauthorized) Code() int {
	return 401
}

func (o *UpdateVCSAccountUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountUsingPATCHUnauthorized", 401)
}

func (o *UpdateVCSAccountUsingPATCHUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountUsingPATCHUnauthorized", 401)
}

func (o *UpdateVCSAccountUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVCSAccountUsingPATCHForbidden creates a UpdateVCSAccountUsingPATCHForbidden with default headers values
func NewUpdateVCSAccountUsingPATCHForbidden() *UpdateVCSAccountUsingPATCHForbidden {
	return &UpdateVCSAccountUsingPATCHForbidden{}
}

/*
UpdateVCSAccountUsingPATCHForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateVCSAccountUsingPATCHForbidden struct {
}

// IsSuccess returns true when this update v c s account using p a t c h forbidden response has a 2xx status code
func (o *UpdateVCSAccountUsingPATCHForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update v c s account using p a t c h forbidden response has a 3xx status code
func (o *UpdateVCSAccountUsingPATCHForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v c s account using p a t c h forbidden response has a 4xx status code
func (o *UpdateVCSAccountUsingPATCHForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update v c s account using p a t c h forbidden response has a 5xx status code
func (o *UpdateVCSAccountUsingPATCHForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update v c s account using p a t c h forbidden response a status code equal to that given
func (o *UpdateVCSAccountUsingPATCHForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update v c s account using p a t c h forbidden response
func (o *UpdateVCSAccountUsingPATCHForbidden) Code() int {
	return 403
}

func (o *UpdateVCSAccountUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountUsingPATCHForbidden", 403)
}

func (o *UpdateVCSAccountUsingPATCHForbidden) String() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountUsingPATCHForbidden", 403)
}

func (o *UpdateVCSAccountUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
