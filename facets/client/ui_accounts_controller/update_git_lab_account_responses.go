// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateGitLabAccountReader is a Reader for the UpdateGitLabAccount structure.
type UpdateGitLabAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGitLabAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGitLabAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateGitLabAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGitLabAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateGitLabAccountMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateGitLabAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/accounts/gitlab/{id}] updateGitLabAccount", response, response.Code())
	}
}

// NewUpdateGitLabAccountOK creates a UpdateGitLabAccountOK with default headers values
func NewUpdateGitLabAccountOK() *UpdateGitLabAccountOK {
	return &UpdateGitLabAccountOK{}
}

/*
UpdateGitLabAccountOK describes a response with status code 200, with default header values.

OK
*/
type UpdateGitLabAccountOK struct {
	Payload *models.GitLabAccount
}

// IsSuccess returns true when this update git lab account o k response has a 2xx status code
func (o *UpdateGitLabAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update git lab account o k response has a 3xx status code
func (o *UpdateGitLabAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git lab account o k response has a 4xx status code
func (o *UpdateGitLabAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update git lab account o k response has a 5xx status code
func (o *UpdateGitLabAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update git lab account o k response a status code equal to that given
func (o *UpdateGitLabAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update git lab account o k response
func (o *UpdateGitLabAccountOK) Code() int {
	return 200
}

func (o *UpdateGitLabAccountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountOK %s", 200, payload)
}

func (o *UpdateGitLabAccountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountOK %s", 200, payload)
}

func (o *UpdateGitLabAccountOK) GetPayload() *models.GitLabAccount {
	return o.Payload
}

func (o *UpdateGitLabAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GitLabAccount)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGitLabAccountBadRequest creates a UpdateGitLabAccountBadRequest with default headers values
func NewUpdateGitLabAccountBadRequest() *UpdateGitLabAccountBadRequest {
	return &UpdateGitLabAccountBadRequest{}
}

/*
UpdateGitLabAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateGitLabAccountBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update git lab account bad request response has a 2xx status code
func (o *UpdateGitLabAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git lab account bad request response has a 3xx status code
func (o *UpdateGitLabAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git lab account bad request response has a 4xx status code
func (o *UpdateGitLabAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git lab account bad request response has a 5xx status code
func (o *UpdateGitLabAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update git lab account bad request response a status code equal to that given
func (o *UpdateGitLabAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update git lab account bad request response
func (o *UpdateGitLabAccountBadRequest) Code() int {
	return 400
}

func (o *UpdateGitLabAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountBadRequest %s", 400, payload)
}

func (o *UpdateGitLabAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountBadRequest %s", 400, payload)
}

func (o *UpdateGitLabAccountBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateGitLabAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGitLabAccountNotFound creates a UpdateGitLabAccountNotFound with default headers values
func NewUpdateGitLabAccountNotFound() *UpdateGitLabAccountNotFound {
	return &UpdateGitLabAccountNotFound{}
}

/*
UpdateGitLabAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateGitLabAccountNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update git lab account not found response has a 2xx status code
func (o *UpdateGitLabAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git lab account not found response has a 3xx status code
func (o *UpdateGitLabAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git lab account not found response has a 4xx status code
func (o *UpdateGitLabAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git lab account not found response has a 5xx status code
func (o *UpdateGitLabAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update git lab account not found response a status code equal to that given
func (o *UpdateGitLabAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update git lab account not found response
func (o *UpdateGitLabAccountNotFound) Code() int {
	return 404
}

func (o *UpdateGitLabAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountNotFound %s", 404, payload)
}

func (o *UpdateGitLabAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountNotFound %s", 404, payload)
}

func (o *UpdateGitLabAccountNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateGitLabAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGitLabAccountMethodNotAllowed creates a UpdateGitLabAccountMethodNotAllowed with default headers values
func NewUpdateGitLabAccountMethodNotAllowed() *UpdateGitLabAccountMethodNotAllowed {
	return &UpdateGitLabAccountMethodNotAllowed{}
}

/*
UpdateGitLabAccountMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateGitLabAccountMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update git lab account method not allowed response has a 2xx status code
func (o *UpdateGitLabAccountMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git lab account method not allowed response has a 3xx status code
func (o *UpdateGitLabAccountMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git lab account method not allowed response has a 4xx status code
func (o *UpdateGitLabAccountMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git lab account method not allowed response has a 5xx status code
func (o *UpdateGitLabAccountMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update git lab account method not allowed response a status code equal to that given
func (o *UpdateGitLabAccountMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update git lab account method not allowed response
func (o *UpdateGitLabAccountMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateGitLabAccountMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountMethodNotAllowed %s", 405, payload)
}

func (o *UpdateGitLabAccountMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountMethodNotAllowed %s", 405, payload)
}

func (o *UpdateGitLabAccountMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateGitLabAccountMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGitLabAccountInternalServerError creates a UpdateGitLabAccountInternalServerError with default headers values
func NewUpdateGitLabAccountInternalServerError() *UpdateGitLabAccountInternalServerError {
	return &UpdateGitLabAccountInternalServerError{}
}

/*
UpdateGitLabAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateGitLabAccountInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update git lab account internal server error response has a 2xx status code
func (o *UpdateGitLabAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git lab account internal server error response has a 3xx status code
func (o *UpdateGitLabAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git lab account internal server error response has a 4xx status code
func (o *UpdateGitLabAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update git lab account internal server error response has a 5xx status code
func (o *UpdateGitLabAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update git lab account internal server error response a status code equal to that given
func (o *UpdateGitLabAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update git lab account internal server error response
func (o *UpdateGitLabAccountInternalServerError) Code() int {
	return 500
}

func (o *UpdateGitLabAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountInternalServerError %s", 500, payload)
}

func (o *UpdateGitLabAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/gitlab/{id}][%d] updateGitLabAccountInternalServerError %s", 500, payload)
}

func (o *UpdateGitLabAccountInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateGitLabAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
