// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteAccountReader is a Reader for the DeleteAccount structure.
type DeleteAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteAccountMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/accounts/{id}] deleteAccount", response, response.Code())
	}
}

// NewDeleteAccountOK creates a DeleteAccountOK with default headers values
func NewDeleteAccountOK() *DeleteAccountOK {
	return &DeleteAccountOK{}
}

/*
DeleteAccountOK describes a response with status code 200, with default header values.

OK
*/
type DeleteAccountOK struct {
	Payload bool
}

// IsSuccess returns true when this delete account o k response has a 2xx status code
func (o *DeleteAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete account o k response has a 3xx status code
func (o *DeleteAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete account o k response has a 4xx status code
func (o *DeleteAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete account o k response has a 5xx status code
func (o *DeleteAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete account o k response a status code equal to that given
func (o *DeleteAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete account o k response
func (o *DeleteAccountOK) Code() int {
	return 200
}

func (o *DeleteAccountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountOK %s", 200, payload)
}

func (o *DeleteAccountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountOK %s", 200, payload)
}

func (o *DeleteAccountOK) GetPayload() bool {
	return o.Payload
}

func (o *DeleteAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAccountBadRequest creates a DeleteAccountBadRequest with default headers values
func NewDeleteAccountBadRequest() *DeleteAccountBadRequest {
	return &DeleteAccountBadRequest{}
}

/*
DeleteAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteAccountBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete account bad request response has a 2xx status code
func (o *DeleteAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete account bad request response has a 3xx status code
func (o *DeleteAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete account bad request response has a 4xx status code
func (o *DeleteAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete account bad request response has a 5xx status code
func (o *DeleteAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete account bad request response a status code equal to that given
func (o *DeleteAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete account bad request response
func (o *DeleteAccountBadRequest) Code() int {
	return 400
}

func (o *DeleteAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountBadRequest %s", 400, payload)
}

func (o *DeleteAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountBadRequest %s", 400, payload)
}

func (o *DeleteAccountBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAccountNotFound creates a DeleteAccountNotFound with default headers values
func NewDeleteAccountNotFound() *DeleteAccountNotFound {
	return &DeleteAccountNotFound{}
}

/*
DeleteAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteAccountNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete account not found response has a 2xx status code
func (o *DeleteAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete account not found response has a 3xx status code
func (o *DeleteAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete account not found response has a 4xx status code
func (o *DeleteAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete account not found response has a 5xx status code
func (o *DeleteAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete account not found response a status code equal to that given
func (o *DeleteAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete account not found response
func (o *DeleteAccountNotFound) Code() int {
	return 404
}

func (o *DeleteAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountNotFound %s", 404, payload)
}

func (o *DeleteAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountNotFound %s", 404, payload)
}

func (o *DeleteAccountNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAccountMethodNotAllowed creates a DeleteAccountMethodNotAllowed with default headers values
func NewDeleteAccountMethodNotAllowed() *DeleteAccountMethodNotAllowed {
	return &DeleteAccountMethodNotAllowed{}
}

/*
DeleteAccountMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DeleteAccountMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete account method not allowed response has a 2xx status code
func (o *DeleteAccountMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete account method not allowed response has a 3xx status code
func (o *DeleteAccountMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete account method not allowed response has a 4xx status code
func (o *DeleteAccountMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete account method not allowed response has a 5xx status code
func (o *DeleteAccountMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete account method not allowed response a status code equal to that given
func (o *DeleteAccountMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the delete account method not allowed response
func (o *DeleteAccountMethodNotAllowed) Code() int {
	return 405
}

func (o *DeleteAccountMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountMethodNotAllowed %s", 405, payload)
}

func (o *DeleteAccountMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountMethodNotAllowed %s", 405, payload)
}

func (o *DeleteAccountMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteAccountMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAccountInternalServerError creates a DeleteAccountInternalServerError with default headers values
func NewDeleteAccountInternalServerError() *DeleteAccountInternalServerError {
	return &DeleteAccountInternalServerError{}
}

/*
DeleteAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteAccountInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete account internal server error response has a 2xx status code
func (o *DeleteAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete account internal server error response has a 3xx status code
func (o *DeleteAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete account internal server error response has a 4xx status code
func (o *DeleteAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete account internal server error response has a 5xx status code
func (o *DeleteAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete account internal server error response a status code equal to that given
func (o *DeleteAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete account internal server error response
func (o *DeleteAccountInternalServerError) Code() int {
	return 500
}

func (o *DeleteAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountInternalServerError %s", 500, payload)
}

func (o *DeleteAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/accounts/{id}][%d] deleteAccountInternalServerError %s", 500, payload)
}

func (o *DeleteAccountInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
