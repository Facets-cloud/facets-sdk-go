// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllAccountsUsingGETReader is a Reader for the GetAllAccountsUsingGET structure.
type GetAllAccountsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllAccountsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllAccountsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllAccountsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllAccountsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllAccountsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/accounts/] getAllAccountsUsingGET", response, response.Code())
	}
}

// NewGetAllAccountsUsingGETOK creates a GetAllAccountsUsingGETOK with default headers values
func NewGetAllAccountsUsingGETOK() *GetAllAccountsUsingGETOK {
	return &GetAllAccountsUsingGETOK{}
}

/*
GetAllAccountsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllAccountsUsingGETOK struct {
	Payload []*models.Account
}

// IsSuccess returns true when this get all accounts using g e t o k response has a 2xx status code
func (o *GetAllAccountsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all accounts using g e t o k response has a 3xx status code
func (o *GetAllAccountsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all accounts using g e t o k response has a 4xx status code
func (o *GetAllAccountsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all accounts using g e t o k response has a 5xx status code
func (o *GetAllAccountsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all accounts using g e t o k response a status code equal to that given
func (o *GetAllAccountsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all accounts using g e t o k response
func (o *GetAllAccountsUsingGETOK) Code() int {
	return 200
}

func (o *GetAllAccountsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/][%d] getAllAccountsUsingGETOK %s", 200, payload)
}

func (o *GetAllAccountsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/][%d] getAllAccountsUsingGETOK %s", 200, payload)
}

func (o *GetAllAccountsUsingGETOK) GetPayload() []*models.Account {
	return o.Payload
}

func (o *GetAllAccountsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllAccountsUsingGETUnauthorized creates a GetAllAccountsUsingGETUnauthorized with default headers values
func NewGetAllAccountsUsingGETUnauthorized() *GetAllAccountsUsingGETUnauthorized {
	return &GetAllAccountsUsingGETUnauthorized{}
}

/*
GetAllAccountsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllAccountsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all accounts using g e t unauthorized response has a 2xx status code
func (o *GetAllAccountsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all accounts using g e t unauthorized response has a 3xx status code
func (o *GetAllAccountsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all accounts using g e t unauthorized response has a 4xx status code
func (o *GetAllAccountsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all accounts using g e t unauthorized response has a 5xx status code
func (o *GetAllAccountsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all accounts using g e t unauthorized response a status code equal to that given
func (o *GetAllAccountsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all accounts using g e t unauthorized response
func (o *GetAllAccountsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllAccountsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/][%d] getAllAccountsUsingGETUnauthorized", 401)
}

func (o *GetAllAccountsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/][%d] getAllAccountsUsingGETUnauthorized", 401)
}

func (o *GetAllAccountsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllAccountsUsingGETForbidden creates a GetAllAccountsUsingGETForbidden with default headers values
func NewGetAllAccountsUsingGETForbidden() *GetAllAccountsUsingGETForbidden {
	return &GetAllAccountsUsingGETForbidden{}
}

/*
GetAllAccountsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllAccountsUsingGETForbidden struct {
}

// IsSuccess returns true when this get all accounts using g e t forbidden response has a 2xx status code
func (o *GetAllAccountsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all accounts using g e t forbidden response has a 3xx status code
func (o *GetAllAccountsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all accounts using g e t forbidden response has a 4xx status code
func (o *GetAllAccountsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all accounts using g e t forbidden response has a 5xx status code
func (o *GetAllAccountsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all accounts using g e t forbidden response a status code equal to that given
func (o *GetAllAccountsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all accounts using g e t forbidden response
func (o *GetAllAccountsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllAccountsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/][%d] getAllAccountsUsingGETForbidden", 403)
}

func (o *GetAllAccountsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/][%d] getAllAccountsUsingGETForbidden", 403)
}

func (o *GetAllAccountsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllAccountsUsingGETNotFound creates a GetAllAccountsUsingGETNotFound with default headers values
func NewGetAllAccountsUsingGETNotFound() *GetAllAccountsUsingGETNotFound {
	return &GetAllAccountsUsingGETNotFound{}
}

/*
GetAllAccountsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllAccountsUsingGETNotFound struct {
}

// IsSuccess returns true when this get all accounts using g e t not found response has a 2xx status code
func (o *GetAllAccountsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all accounts using g e t not found response has a 3xx status code
func (o *GetAllAccountsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all accounts using g e t not found response has a 4xx status code
func (o *GetAllAccountsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all accounts using g e t not found response has a 5xx status code
func (o *GetAllAccountsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all accounts using g e t not found response a status code equal to that given
func (o *GetAllAccountsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all accounts using g e t not found response
func (o *GetAllAccountsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllAccountsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/][%d] getAllAccountsUsingGETNotFound", 404)
}

func (o *GetAllAccountsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/accounts/][%d] getAllAccountsUsingGETNotFound", 404)
}

func (o *GetAllAccountsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
