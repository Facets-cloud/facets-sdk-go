// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateVCSAccountReader is a Reader for the UpdateVCSAccount structure.
type UpdateVCSAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVCSAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVCSAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVCSAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVCSAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateVCSAccountMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateVCSAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /cc-ui/v1/accounts/vcs/{id}] updateVCSAccount", response, response.Code())
	}
}

// NewUpdateVCSAccountOK creates a UpdateVCSAccountOK with default headers values
func NewUpdateVCSAccountOK() *UpdateVCSAccountOK {
	return &UpdateVCSAccountOK{}
}

/*
UpdateVCSAccountOK describes a response with status code 200, with default header values.

OK
*/
type UpdateVCSAccountOK struct {
}

// IsSuccess returns true when this update v c s account o k response has a 2xx status code
func (o *UpdateVCSAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update v c s account o k response has a 3xx status code
func (o *UpdateVCSAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v c s account o k response has a 4xx status code
func (o *UpdateVCSAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update v c s account o k response has a 5xx status code
func (o *UpdateVCSAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update v c s account o k response a status code equal to that given
func (o *UpdateVCSAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update v c s account o k response
func (o *UpdateVCSAccountOK) Code() int {
	return 200
}

func (o *UpdateVCSAccountOK) Error() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountOK", 200)
}

func (o *UpdateVCSAccountOK) String() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountOK", 200)
}

func (o *UpdateVCSAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVCSAccountBadRequest creates a UpdateVCSAccountBadRequest with default headers values
func NewUpdateVCSAccountBadRequest() *UpdateVCSAccountBadRequest {
	return &UpdateVCSAccountBadRequest{}
}

/*
UpdateVCSAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateVCSAccountBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update v c s account bad request response has a 2xx status code
func (o *UpdateVCSAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update v c s account bad request response has a 3xx status code
func (o *UpdateVCSAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v c s account bad request response has a 4xx status code
func (o *UpdateVCSAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update v c s account bad request response has a 5xx status code
func (o *UpdateVCSAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update v c s account bad request response a status code equal to that given
func (o *UpdateVCSAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update v c s account bad request response
func (o *UpdateVCSAccountBadRequest) Code() int {
	return 400
}

func (o *UpdateVCSAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountBadRequest %s", 400, payload)
}

func (o *UpdateVCSAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountBadRequest %s", 400, payload)
}

func (o *UpdateVCSAccountBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateVCSAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVCSAccountNotFound creates a UpdateVCSAccountNotFound with default headers values
func NewUpdateVCSAccountNotFound() *UpdateVCSAccountNotFound {
	return &UpdateVCSAccountNotFound{}
}

/*
UpdateVCSAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateVCSAccountNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update v c s account not found response has a 2xx status code
func (o *UpdateVCSAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update v c s account not found response has a 3xx status code
func (o *UpdateVCSAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v c s account not found response has a 4xx status code
func (o *UpdateVCSAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update v c s account not found response has a 5xx status code
func (o *UpdateVCSAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update v c s account not found response a status code equal to that given
func (o *UpdateVCSAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update v c s account not found response
func (o *UpdateVCSAccountNotFound) Code() int {
	return 404
}

func (o *UpdateVCSAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountNotFound %s", 404, payload)
}

func (o *UpdateVCSAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountNotFound %s", 404, payload)
}

func (o *UpdateVCSAccountNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateVCSAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVCSAccountMethodNotAllowed creates a UpdateVCSAccountMethodNotAllowed with default headers values
func NewUpdateVCSAccountMethodNotAllowed() *UpdateVCSAccountMethodNotAllowed {
	return &UpdateVCSAccountMethodNotAllowed{}
}

/*
UpdateVCSAccountMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateVCSAccountMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update v c s account method not allowed response has a 2xx status code
func (o *UpdateVCSAccountMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update v c s account method not allowed response has a 3xx status code
func (o *UpdateVCSAccountMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v c s account method not allowed response has a 4xx status code
func (o *UpdateVCSAccountMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update v c s account method not allowed response has a 5xx status code
func (o *UpdateVCSAccountMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update v c s account method not allowed response a status code equal to that given
func (o *UpdateVCSAccountMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update v c s account method not allowed response
func (o *UpdateVCSAccountMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateVCSAccountMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountMethodNotAllowed %s", 405, payload)
}

func (o *UpdateVCSAccountMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountMethodNotAllowed %s", 405, payload)
}

func (o *UpdateVCSAccountMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateVCSAccountMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVCSAccountInternalServerError creates a UpdateVCSAccountInternalServerError with default headers values
func NewUpdateVCSAccountInternalServerError() *UpdateVCSAccountInternalServerError {
	return &UpdateVCSAccountInternalServerError{}
}

/*
UpdateVCSAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateVCSAccountInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update v c s account internal server error response has a 2xx status code
func (o *UpdateVCSAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update v c s account internal server error response has a 3xx status code
func (o *UpdateVCSAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v c s account internal server error response has a 4xx status code
func (o *UpdateVCSAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update v c s account internal server error response has a 5xx status code
func (o *UpdateVCSAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update v c s account internal server error response a status code equal to that given
func (o *UpdateVCSAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update v c s account internal server error response
func (o *UpdateVCSAccountInternalServerError) Code() int {
	return 500
}

func (o *UpdateVCSAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountInternalServerError %s", 500, payload)
}

func (o *UpdateVCSAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/accounts/vcs/{id}][%d] updateVCSAccountInternalServerError %s", 500, payload)
}

func (o *UpdateVCSAccountInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateVCSAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
