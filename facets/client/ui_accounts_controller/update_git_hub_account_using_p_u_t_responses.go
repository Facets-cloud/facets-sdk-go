// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateGitHubAccountUsingPUTReader is a Reader for the UpdateGitHubAccountUsingPUT structure.
type UpdateGitHubAccountUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGitHubAccountUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGitHubAccountUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateGitHubAccountUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateGitHubAccountUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateGitHubAccountUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGitHubAccountUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/accounts/github/{id}] updateGitHubAccountUsingPUT", response, response.Code())
	}
}

// NewUpdateGitHubAccountUsingPUTOK creates a UpdateGitHubAccountUsingPUTOK with default headers values
func NewUpdateGitHubAccountUsingPUTOK() *UpdateGitHubAccountUsingPUTOK {
	return &UpdateGitHubAccountUsingPUTOK{}
}

/*
UpdateGitHubAccountUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateGitHubAccountUsingPUTOK struct {
	Payload *models.GitHubAccount
}

// IsSuccess returns true when this update git hub account using p u t o k response has a 2xx status code
func (o *UpdateGitHubAccountUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update git hub account using p u t o k response has a 3xx status code
func (o *UpdateGitHubAccountUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git hub account using p u t o k response has a 4xx status code
func (o *UpdateGitHubAccountUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update git hub account using p u t o k response has a 5xx status code
func (o *UpdateGitHubAccountUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update git hub account using p u t o k response a status code equal to that given
func (o *UpdateGitHubAccountUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update git hub account using p u t o k response
func (o *UpdateGitHubAccountUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateGitHubAccountUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountUsingPUTOK %s", 200, payload)
}

func (o *UpdateGitHubAccountUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountUsingPUTOK %s", 200, payload)
}

func (o *UpdateGitHubAccountUsingPUTOK) GetPayload() *models.GitHubAccount {
	return o.Payload
}

func (o *UpdateGitHubAccountUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GitHubAccount)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGitHubAccountUsingPUTCreated creates a UpdateGitHubAccountUsingPUTCreated with default headers values
func NewUpdateGitHubAccountUsingPUTCreated() *UpdateGitHubAccountUsingPUTCreated {
	return &UpdateGitHubAccountUsingPUTCreated{}
}

/*
UpdateGitHubAccountUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateGitHubAccountUsingPUTCreated struct {
}

// IsSuccess returns true when this update git hub account using p u t created response has a 2xx status code
func (o *UpdateGitHubAccountUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update git hub account using p u t created response has a 3xx status code
func (o *UpdateGitHubAccountUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git hub account using p u t created response has a 4xx status code
func (o *UpdateGitHubAccountUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update git hub account using p u t created response has a 5xx status code
func (o *UpdateGitHubAccountUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update git hub account using p u t created response a status code equal to that given
func (o *UpdateGitHubAccountUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update git hub account using p u t created response
func (o *UpdateGitHubAccountUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateGitHubAccountUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountUsingPUTCreated", 201)
}

func (o *UpdateGitHubAccountUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountUsingPUTCreated", 201)
}

func (o *UpdateGitHubAccountUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGitHubAccountUsingPUTUnauthorized creates a UpdateGitHubAccountUsingPUTUnauthorized with default headers values
func NewUpdateGitHubAccountUsingPUTUnauthorized() *UpdateGitHubAccountUsingPUTUnauthorized {
	return &UpdateGitHubAccountUsingPUTUnauthorized{}
}

/*
UpdateGitHubAccountUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateGitHubAccountUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update git hub account using p u t unauthorized response has a 2xx status code
func (o *UpdateGitHubAccountUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git hub account using p u t unauthorized response has a 3xx status code
func (o *UpdateGitHubAccountUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git hub account using p u t unauthorized response has a 4xx status code
func (o *UpdateGitHubAccountUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git hub account using p u t unauthorized response has a 5xx status code
func (o *UpdateGitHubAccountUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update git hub account using p u t unauthorized response a status code equal to that given
func (o *UpdateGitHubAccountUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update git hub account using p u t unauthorized response
func (o *UpdateGitHubAccountUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateGitHubAccountUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountUsingPUTUnauthorized", 401)
}

func (o *UpdateGitHubAccountUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountUsingPUTUnauthorized", 401)
}

func (o *UpdateGitHubAccountUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGitHubAccountUsingPUTForbidden creates a UpdateGitHubAccountUsingPUTForbidden with default headers values
func NewUpdateGitHubAccountUsingPUTForbidden() *UpdateGitHubAccountUsingPUTForbidden {
	return &UpdateGitHubAccountUsingPUTForbidden{}
}

/*
UpdateGitHubAccountUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateGitHubAccountUsingPUTForbidden struct {
}

// IsSuccess returns true when this update git hub account using p u t forbidden response has a 2xx status code
func (o *UpdateGitHubAccountUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git hub account using p u t forbidden response has a 3xx status code
func (o *UpdateGitHubAccountUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git hub account using p u t forbidden response has a 4xx status code
func (o *UpdateGitHubAccountUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git hub account using p u t forbidden response has a 5xx status code
func (o *UpdateGitHubAccountUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update git hub account using p u t forbidden response a status code equal to that given
func (o *UpdateGitHubAccountUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update git hub account using p u t forbidden response
func (o *UpdateGitHubAccountUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateGitHubAccountUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountUsingPUTForbidden", 403)
}

func (o *UpdateGitHubAccountUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountUsingPUTForbidden", 403)
}

func (o *UpdateGitHubAccountUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGitHubAccountUsingPUTNotFound creates a UpdateGitHubAccountUsingPUTNotFound with default headers values
func NewUpdateGitHubAccountUsingPUTNotFound() *UpdateGitHubAccountUsingPUTNotFound {
	return &UpdateGitHubAccountUsingPUTNotFound{}
}

/*
UpdateGitHubAccountUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateGitHubAccountUsingPUTNotFound struct {
}

// IsSuccess returns true when this update git hub account using p u t not found response has a 2xx status code
func (o *UpdateGitHubAccountUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git hub account using p u t not found response has a 3xx status code
func (o *UpdateGitHubAccountUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git hub account using p u t not found response has a 4xx status code
func (o *UpdateGitHubAccountUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git hub account using p u t not found response has a 5xx status code
func (o *UpdateGitHubAccountUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update git hub account using p u t not found response a status code equal to that given
func (o *UpdateGitHubAccountUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update git hub account using p u t not found response
func (o *UpdateGitHubAccountUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateGitHubAccountUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountUsingPUTNotFound", 404)
}

func (o *UpdateGitHubAccountUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/accounts/github/{id}][%d] updateGitHubAccountUsingPUTNotFound", 404)
}

func (o *UpdateGitHubAccountUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
