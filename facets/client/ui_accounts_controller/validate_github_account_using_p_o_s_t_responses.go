// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ValidateGithubAccountUsingPOSTReader is a Reader for the ValidateGithubAccountUsingPOST structure.
type ValidateGithubAccountUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateGithubAccountUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateGithubAccountUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewValidateGithubAccountUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewValidateGithubAccountUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewValidateGithubAccountUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewValidateGithubAccountUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/accounts/github/validate] validateGithubAccountUsingPOST", response, response.Code())
	}
}

// NewValidateGithubAccountUsingPOSTOK creates a ValidateGithubAccountUsingPOSTOK with default headers values
func NewValidateGithubAccountUsingPOSTOK() *ValidateGithubAccountUsingPOSTOK {
	return &ValidateGithubAccountUsingPOSTOK{}
}

/*
ValidateGithubAccountUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type ValidateGithubAccountUsingPOSTOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this validate github account using p o s t o k response has a 2xx status code
func (o *ValidateGithubAccountUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate github account using p o s t o k response has a 3xx status code
func (o *ValidateGithubAccountUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate github account using p o s t o k response has a 4xx status code
func (o *ValidateGithubAccountUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate github account using p o s t o k response has a 5xx status code
func (o *ValidateGithubAccountUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate github account using p o s t o k response a status code equal to that given
func (o *ValidateGithubAccountUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate github account using p o s t o k response
func (o *ValidateGithubAccountUsingPOSTOK) Code() int {
	return 200
}

func (o *ValidateGithubAccountUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountUsingPOSTOK %s", 200, payload)
}

func (o *ValidateGithubAccountUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountUsingPOSTOK %s", 200, payload)
}

func (o *ValidateGithubAccountUsingPOSTOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *ValidateGithubAccountUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateGithubAccountUsingPOSTCreated creates a ValidateGithubAccountUsingPOSTCreated with default headers values
func NewValidateGithubAccountUsingPOSTCreated() *ValidateGithubAccountUsingPOSTCreated {
	return &ValidateGithubAccountUsingPOSTCreated{}
}

/*
ValidateGithubAccountUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type ValidateGithubAccountUsingPOSTCreated struct {
}

// IsSuccess returns true when this validate github account using p o s t created response has a 2xx status code
func (o *ValidateGithubAccountUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate github account using p o s t created response has a 3xx status code
func (o *ValidateGithubAccountUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate github account using p o s t created response has a 4xx status code
func (o *ValidateGithubAccountUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate github account using p o s t created response has a 5xx status code
func (o *ValidateGithubAccountUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this validate github account using p o s t created response a status code equal to that given
func (o *ValidateGithubAccountUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the validate github account using p o s t created response
func (o *ValidateGithubAccountUsingPOSTCreated) Code() int {
	return 201
}

func (o *ValidateGithubAccountUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountUsingPOSTCreated", 201)
}

func (o *ValidateGithubAccountUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountUsingPOSTCreated", 201)
}

func (o *ValidateGithubAccountUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateGithubAccountUsingPOSTUnauthorized creates a ValidateGithubAccountUsingPOSTUnauthorized with default headers values
func NewValidateGithubAccountUsingPOSTUnauthorized() *ValidateGithubAccountUsingPOSTUnauthorized {
	return &ValidateGithubAccountUsingPOSTUnauthorized{}
}

/*
ValidateGithubAccountUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ValidateGithubAccountUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this validate github account using p o s t unauthorized response has a 2xx status code
func (o *ValidateGithubAccountUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate github account using p o s t unauthorized response has a 3xx status code
func (o *ValidateGithubAccountUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate github account using p o s t unauthorized response has a 4xx status code
func (o *ValidateGithubAccountUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate github account using p o s t unauthorized response has a 5xx status code
func (o *ValidateGithubAccountUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this validate github account using p o s t unauthorized response a status code equal to that given
func (o *ValidateGithubAccountUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the validate github account using p o s t unauthorized response
func (o *ValidateGithubAccountUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *ValidateGithubAccountUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountUsingPOSTUnauthorized", 401)
}

func (o *ValidateGithubAccountUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountUsingPOSTUnauthorized", 401)
}

func (o *ValidateGithubAccountUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateGithubAccountUsingPOSTForbidden creates a ValidateGithubAccountUsingPOSTForbidden with default headers values
func NewValidateGithubAccountUsingPOSTForbidden() *ValidateGithubAccountUsingPOSTForbidden {
	return &ValidateGithubAccountUsingPOSTForbidden{}
}

/*
ValidateGithubAccountUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ValidateGithubAccountUsingPOSTForbidden struct {
}

// IsSuccess returns true when this validate github account using p o s t forbidden response has a 2xx status code
func (o *ValidateGithubAccountUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate github account using p o s t forbidden response has a 3xx status code
func (o *ValidateGithubAccountUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate github account using p o s t forbidden response has a 4xx status code
func (o *ValidateGithubAccountUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate github account using p o s t forbidden response has a 5xx status code
func (o *ValidateGithubAccountUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this validate github account using p o s t forbidden response a status code equal to that given
func (o *ValidateGithubAccountUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the validate github account using p o s t forbidden response
func (o *ValidateGithubAccountUsingPOSTForbidden) Code() int {
	return 403
}

func (o *ValidateGithubAccountUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountUsingPOSTForbidden", 403)
}

func (o *ValidateGithubAccountUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountUsingPOSTForbidden", 403)
}

func (o *ValidateGithubAccountUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateGithubAccountUsingPOSTNotFound creates a ValidateGithubAccountUsingPOSTNotFound with default headers values
func NewValidateGithubAccountUsingPOSTNotFound() *ValidateGithubAccountUsingPOSTNotFound {
	return &ValidateGithubAccountUsingPOSTNotFound{}
}

/*
ValidateGithubAccountUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ValidateGithubAccountUsingPOSTNotFound struct {
}

// IsSuccess returns true when this validate github account using p o s t not found response has a 2xx status code
func (o *ValidateGithubAccountUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate github account using p o s t not found response has a 3xx status code
func (o *ValidateGithubAccountUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate github account using p o s t not found response has a 4xx status code
func (o *ValidateGithubAccountUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate github account using p o s t not found response has a 5xx status code
func (o *ValidateGithubAccountUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this validate github account using p o s t not found response a status code equal to that given
func (o *ValidateGithubAccountUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the validate github account using p o s t not found response
func (o *ValidateGithubAccountUsingPOSTNotFound) Code() int {
	return 404
}

func (o *ValidateGithubAccountUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountUsingPOSTNotFound", 404)
}

func (o *ValidateGithubAccountUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/github/validate][%d] validateGithubAccountUsingPOSTNotFound", 404)
}

func (o *ValidateGithubAccountUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
