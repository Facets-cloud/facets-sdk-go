// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ValidateGcpAccountReader is a Reader for the ValidateGcpAccount structure.
type ValidateGcpAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateGcpAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateGcpAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateGcpAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewValidateGcpAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewValidateGcpAccountMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewValidateGcpAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/accounts/gcp/validate] validateGcpAccount", response, response.Code())
	}
}

// NewValidateGcpAccountOK creates a ValidateGcpAccountOK with default headers values
func NewValidateGcpAccountOK() *ValidateGcpAccountOK {
	return &ValidateGcpAccountOK{}
}

/*
ValidateGcpAccountOK describes a response with status code 200, with default header values.

OK
*/
type ValidateGcpAccountOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this validate gcp account o k response has a 2xx status code
func (o *ValidateGcpAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate gcp account o k response has a 3xx status code
func (o *ValidateGcpAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gcp account o k response has a 4xx status code
func (o *ValidateGcpAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate gcp account o k response has a 5xx status code
func (o *ValidateGcpAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gcp account o k response a status code equal to that given
func (o *ValidateGcpAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate gcp account o k response
func (o *ValidateGcpAccountOK) Code() int {
	return 200
}

func (o *ValidateGcpAccountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountOK %s", 200, payload)
}

func (o *ValidateGcpAccountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountOK %s", 200, payload)
}

func (o *ValidateGcpAccountOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *ValidateGcpAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateGcpAccountBadRequest creates a ValidateGcpAccountBadRequest with default headers values
func NewValidateGcpAccountBadRequest() *ValidateGcpAccountBadRequest {
	return &ValidateGcpAccountBadRequest{}
}

/*
ValidateGcpAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ValidateGcpAccountBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate gcp account bad request response has a 2xx status code
func (o *ValidateGcpAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate gcp account bad request response has a 3xx status code
func (o *ValidateGcpAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gcp account bad request response has a 4xx status code
func (o *ValidateGcpAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate gcp account bad request response has a 5xx status code
func (o *ValidateGcpAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gcp account bad request response a status code equal to that given
func (o *ValidateGcpAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the validate gcp account bad request response
func (o *ValidateGcpAccountBadRequest) Code() int {
	return 400
}

func (o *ValidateGcpAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountBadRequest %s", 400, payload)
}

func (o *ValidateGcpAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountBadRequest %s", 400, payload)
}

func (o *ValidateGcpAccountBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateGcpAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateGcpAccountNotFound creates a ValidateGcpAccountNotFound with default headers values
func NewValidateGcpAccountNotFound() *ValidateGcpAccountNotFound {
	return &ValidateGcpAccountNotFound{}
}

/*
ValidateGcpAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ValidateGcpAccountNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate gcp account not found response has a 2xx status code
func (o *ValidateGcpAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate gcp account not found response has a 3xx status code
func (o *ValidateGcpAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gcp account not found response has a 4xx status code
func (o *ValidateGcpAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate gcp account not found response has a 5xx status code
func (o *ValidateGcpAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gcp account not found response a status code equal to that given
func (o *ValidateGcpAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the validate gcp account not found response
func (o *ValidateGcpAccountNotFound) Code() int {
	return 404
}

func (o *ValidateGcpAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountNotFound %s", 404, payload)
}

func (o *ValidateGcpAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountNotFound %s", 404, payload)
}

func (o *ValidateGcpAccountNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateGcpAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateGcpAccountMethodNotAllowed creates a ValidateGcpAccountMethodNotAllowed with default headers values
func NewValidateGcpAccountMethodNotAllowed() *ValidateGcpAccountMethodNotAllowed {
	return &ValidateGcpAccountMethodNotAllowed{}
}

/*
ValidateGcpAccountMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ValidateGcpAccountMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate gcp account method not allowed response has a 2xx status code
func (o *ValidateGcpAccountMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate gcp account method not allowed response has a 3xx status code
func (o *ValidateGcpAccountMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gcp account method not allowed response has a 4xx status code
func (o *ValidateGcpAccountMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate gcp account method not allowed response has a 5xx status code
func (o *ValidateGcpAccountMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this validate gcp account method not allowed response a status code equal to that given
func (o *ValidateGcpAccountMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the validate gcp account method not allowed response
func (o *ValidateGcpAccountMethodNotAllowed) Code() int {
	return 405
}

func (o *ValidateGcpAccountMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountMethodNotAllowed %s", 405, payload)
}

func (o *ValidateGcpAccountMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountMethodNotAllowed %s", 405, payload)
}

func (o *ValidateGcpAccountMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateGcpAccountMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateGcpAccountInternalServerError creates a ValidateGcpAccountInternalServerError with default headers values
func NewValidateGcpAccountInternalServerError() *ValidateGcpAccountInternalServerError {
	return &ValidateGcpAccountInternalServerError{}
}

/*
ValidateGcpAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ValidateGcpAccountInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate gcp account internal server error response has a 2xx status code
func (o *ValidateGcpAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate gcp account internal server error response has a 3xx status code
func (o *ValidateGcpAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate gcp account internal server error response has a 4xx status code
func (o *ValidateGcpAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate gcp account internal server error response has a 5xx status code
func (o *ValidateGcpAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this validate gcp account internal server error response a status code equal to that given
func (o *ValidateGcpAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the validate gcp account internal server error response
func (o *ValidateGcpAccountInternalServerError) Code() int {
	return 500
}

func (o *ValidateGcpAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountInternalServerError %s", 500, payload)
}

func (o *ValidateGcpAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/accounts/gcp/validate][%d] validateGcpAccountInternalServerError %s", 500, payload)
}

func (o *ValidateGcpAccountInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateGcpAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
