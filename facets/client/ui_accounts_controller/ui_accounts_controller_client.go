// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui accounts controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui accounts controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui accounts controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui accounts controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAwsAccountUsingPOST(params *CreateAwsAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAwsAccountUsingPOSTOK, *CreateAwsAccountUsingPOSTCreated, error)

	CreateAzureAccountUsingPOST(params *CreateAzureAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAzureAccountUsingPOSTOK, *CreateAzureAccountUsingPOSTCreated, error)

	CreateBitBucketAccountUsingPOST(params *CreateBitBucketAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBitBucketAccountUsingPOSTOK, *CreateBitBucketAccountUsingPOSTCreated, error)

	CreateCoderAccountUsingPOST(params *CreateCoderAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCoderAccountUsingPOSTOK, *CreateCoderAccountUsingPOSTCreated, error)

	CreateGcpAccountUsingPOST(params *CreateGcpAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGcpAccountUsingPOSTOK, *CreateGcpAccountUsingPOSTCreated, error)

	CreateGitHubAccountUsingPOST(params *CreateGitHubAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGitHubAccountUsingPOSTOK, *CreateGitHubAccountUsingPOSTCreated, error)

	CreateGitLabAccountUsingPOST(params *CreateGitLabAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGitLabAccountUsingPOSTOK, *CreateGitLabAccountUsingPOSTCreated, error)

	CreateKubernetesAccountUsingPOST(params *CreateKubernetesAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateKubernetesAccountUsingPOSTOK, *CreateKubernetesAccountUsingPOSTCreated, error)

	DeleteAccountUsingDELETE(params *DeleteAccountUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccountUsingDELETEOK, *DeleteAccountUsingDELETENoContent, error)

	GetAccountByNameUsingGET(params *GetAccountByNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountByNameUsingGETOK, error)

	GetAccountUsingGET(params *GetAccountUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountUsingGETOK, error)

	GetAccountsByTypeUsingGET(params *GetAccountsByTypeUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountsByTypeUsingGETOK, error)

	GetAllAccountsUsingGET(params *GetAllAccountsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllAccountsUsingGETOK, error)

	GetAllVCSTokenDetailsUsingGET(params *GetAllVCSTokenDetailsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllVCSTokenDetailsUsingGETOK, error)

	GetBitbucketProjectsForWorkspaceUsingGET(params *GetBitbucketProjectsForWorkspaceUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBitbucketProjectsForWorkspaceUsingGETOK, error)

	GetVCSOrganisationsUsingPOST(params *GetVCSOrganisationsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVCSOrganisationsUsingPOSTOK, *GetVCSOrganisationsUsingPOSTCreated, error)

	GetVCSTokenDetailsByStackNameUsingGET(params *GetVCSTokenDetailsByStackNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVCSTokenDetailsByStackNameUsingGETOK, error)

	GetVcsOrganizationsByAccountIDUsingGET(params *GetVcsOrganizationsByAccountIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVcsOrganizationsByAccountIDUsingGETOK, error)

	RefreshAllVCSTokenDetailsUsingPOST(params *RefreshAllVCSTokenDetailsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshAllVCSTokenDetailsUsingPOSTOK, *RefreshAllVCSTokenDetailsUsingPOSTCreated, error)

	RequestCloudAccountLinkingUsingPOST(params *RequestCloudAccountLinkingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestCloudAccountLinkingUsingPOSTOK, *RequestCloudAccountLinkingUsingPOSTCreated, error)

	RequestVCSLinkingUsingPOST(params *RequestVCSLinkingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestVCSLinkingUsingPOSTOK, *RequestVCSLinkingUsingPOSTCreated, error)

	UpdateAwsAccountUsingPUT(params *UpdateAwsAccountUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAwsAccountUsingPUTOK, *UpdateAwsAccountUsingPUTCreated, error)

	UpdateAzureAccountUsingPUT(params *UpdateAzureAccountUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAzureAccountUsingPUTOK, *UpdateAzureAccountUsingPUTCreated, error)

	UpdateBitBucketAccountUsingPUT(params *UpdateBitBucketAccountUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBitBucketAccountUsingPUTOK, *UpdateBitBucketAccountUsingPUTCreated, error)

	UpdateCoderAccountUsingPUT(params *UpdateCoderAccountUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCoderAccountUsingPUTOK, *UpdateCoderAccountUsingPUTCreated, error)

	UpdateGcpAccountUsingPUT(params *UpdateGcpAccountUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGcpAccountUsingPUTOK, *UpdateGcpAccountUsingPUTCreated, error)

	UpdateGitHubAccountUsingPUT(params *UpdateGitHubAccountUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGitHubAccountUsingPUTOK, *UpdateGitHubAccountUsingPUTCreated, error)

	UpdateGitLabAccountUsingPUT(params *UpdateGitLabAccountUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGitLabAccountUsingPUTOK, *UpdateGitLabAccountUsingPUTCreated, error)

	UpdateKubernetesAccountUsingPUT(params *UpdateKubernetesAccountUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKubernetesAccountUsingPUTOK, *UpdateKubernetesAccountUsingPUTCreated, error)

	UpdateVCSAccountUsingPATCH(params *UpdateVCSAccountUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVCSAccountUsingPATCHOK, *UpdateVCSAccountUsingPATCHNoContent, error)

	ValidateAwsAccountUsingPOST(params *ValidateAwsAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateAwsAccountUsingPOSTOK, *ValidateAwsAccountUsingPOSTCreated, error)

	ValidateAzureAccountUsingPOST(params *ValidateAzureAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateAzureAccountUsingPOSTOK, *ValidateAzureAccountUsingPOSTCreated, error)

	ValidateBitbucketAccountUsingPOST(params *ValidateBitbucketAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateBitbucketAccountUsingPOSTOK, *ValidateBitbucketAccountUsingPOSTCreated, error)

	ValidateGcpAccountUsingPOST(params *ValidateGcpAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateGcpAccountUsingPOSTOK, *ValidateGcpAccountUsingPOSTCreated, error)

	ValidateGithubAccountUsingPOST(params *ValidateGithubAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateGithubAccountUsingPOSTOK, *ValidateGithubAccountUsingPOSTCreated, error)

	ValidateGitlabAccountUsingPOST(params *ValidateGitlabAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateGitlabAccountUsingPOSTOK, *ValidateGitlabAccountUsingPOSTCreated, error)

	ValidateKubernetesAccountUsingPOST(params *ValidateKubernetesAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateKubernetesAccountUsingPOSTOK, *ValidateKubernetesAccountUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAwsAccountUsingPOST creates aws account
*/
func (a *Client) CreateAwsAccountUsingPOST(params *CreateAwsAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAwsAccountUsingPOSTOK, *CreateAwsAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAwsAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAwsAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/aws/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAwsAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAwsAccountUsingPOSTOK:
		return value, nil, nil
	case *CreateAwsAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAzureAccountUsingPOST creates azure account
*/
func (a *Client) CreateAzureAccountUsingPOST(params *CreateAzureAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAzureAccountUsingPOSTOK, *CreateAzureAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAzureAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/azure/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAzureAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAzureAccountUsingPOSTOK:
		return value, nil, nil
	case *CreateAzureAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBitBucketAccountUsingPOST creates bit bucket account
*/
func (a *Client) CreateBitBucketAccountUsingPOST(params *CreateBitBucketAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBitBucketAccountUsingPOSTOK, *CreateBitBucketAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBitBucketAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBitBucketAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/bitbucket/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBitBucketAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateBitBucketAccountUsingPOSTOK:
		return value, nil, nil
	case *CreateBitBucketAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCoderAccountUsingPOST creates coder account
*/
func (a *Client) CreateCoderAccountUsingPOST(params *CreateCoderAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCoderAccountUsingPOSTOK, *CreateCoderAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoderAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCoderAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/coder/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoderAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoderAccountUsingPOSTOK:
		return value, nil, nil
	case *CreateCoderAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGcpAccountUsingPOST creates gcp account
*/
func (a *Client) CreateGcpAccountUsingPOST(params *CreateGcpAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGcpAccountUsingPOSTOK, *CreateGcpAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGcpAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGcpAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/gcp/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGcpAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateGcpAccountUsingPOSTOK:
		return value, nil, nil
	case *CreateGcpAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGitHubAccountUsingPOST creates git hub account
*/
func (a *Client) CreateGitHubAccountUsingPOST(params *CreateGitHubAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGitHubAccountUsingPOSTOK, *CreateGitHubAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGitHubAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGitHubAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/github/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGitHubAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateGitHubAccountUsingPOSTOK:
		return value, nil, nil
	case *CreateGitHubAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGitLabAccountUsingPOST creates git lab account
*/
func (a *Client) CreateGitLabAccountUsingPOST(params *CreateGitLabAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGitLabAccountUsingPOSTOK, *CreateGitLabAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGitLabAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGitLabAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/gitlab/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGitLabAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateGitLabAccountUsingPOSTOK:
		return value, nil, nil
	case *CreateGitLabAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateKubernetesAccountUsingPOST creates kubernetes account
*/
func (a *Client) CreateKubernetesAccountUsingPOST(params *CreateKubernetesAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateKubernetesAccountUsingPOSTOK, *CreateKubernetesAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKubernetesAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createKubernetesAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/kubernetes/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateKubernetesAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateKubernetesAccountUsingPOSTOK:
		return value, nil, nil
	case *CreateKubernetesAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAccountUsingDELETE deletes account
*/
func (a *Client) DeleteAccountUsingDELETE(params *DeleteAccountUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccountUsingDELETEOK, *DeleteAccountUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAccountUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/accounts/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAccountUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAccountUsingDELETEOK:
		return value, nil, nil
	case *DeleteAccountUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAccountByNameUsingGET gets account by name
*/
func (a *Client) GetAccountByNameUsingGET(params *GetAccountByNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountByNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountByNameUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccountByNameUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/accounts/name/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountByNameUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountByNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountByNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAccountUsingGET gets account
*/
func (a *Client) GetAccountUsingGET(params *GetAccountUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccountUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/accounts/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAccountsByTypeUsingGET gets accounts by type
*/
func (a *Client) GetAccountsByTypeUsingGET(params *GetAccountsByTypeUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountsByTypeUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsByTypeUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccountsByTypeUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/accounts/type/{type}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountsByTypeUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsByTypeUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountsByTypeUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllAccountsUsingGET gets all accounts
*/
func (a *Client) GetAllAccountsUsingGET(params *GetAllAccountsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllAccountsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAccountsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllAccountsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/accounts/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllAccountsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAccountsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllAccountsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllVCSTokenDetailsUsingGET gets all v c s token details
*/
func (a *Client) GetAllVCSTokenDetailsUsingGET(params *GetAllVCSTokenDetailsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllVCSTokenDetailsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllVCSTokenDetailsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllVCSTokenDetailsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/accounts/token-details",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllVCSTokenDetailsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllVCSTokenDetailsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllVCSTokenDetailsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBitbucketProjectsForWorkspaceUsingGET gets bitbucket projects for workspace
*/
func (a *Client) GetBitbucketProjectsForWorkspaceUsingGET(params *GetBitbucketProjectsForWorkspaceUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBitbucketProjectsForWorkspaceUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBitbucketProjectsForWorkspaceUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBitbucketProjectsForWorkspaceUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/accounts/{accountId}/workspaces/{workspace}/projects",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBitbucketProjectsForWorkspaceUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBitbucketProjectsForWorkspaceUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBitbucketProjectsForWorkspaceUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVCSOrganisationsUsingPOST gets v c s organisations
*/
func (a *Client) GetVCSOrganisationsUsingPOST(params *GetVCSOrganisationsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVCSOrganisationsUsingPOSTOK, *GetVCSOrganisationsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVCSOrganisationsUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVCSOrganisationsUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/get-organisations",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVCSOrganisationsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetVCSOrganisationsUsingPOSTOK:
		return value, nil, nil
	case *GetVCSOrganisationsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVCSTokenDetailsByStackNameUsingGET gets v c s token details by stack name
*/
func (a *Client) GetVCSTokenDetailsByStackNameUsingGET(params *GetVCSTokenDetailsByStackNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVCSTokenDetailsByStackNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVCSTokenDetailsByStackNameUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVCSTokenDetailsByStackNameUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/accounts/stack/{stackName}/token-details",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVCSTokenDetailsByStackNameUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVCSTokenDetailsByStackNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVCSTokenDetailsByStackNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVcsOrganizationsByAccountIDUsingGET gets vcs organizations by account Id
*/
func (a *Client) GetVcsOrganizationsByAccountIDUsingGET(params *GetVcsOrganizationsByAccountIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVcsOrganizationsByAccountIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsOrganizationsByAccountIDUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVcsOrganizationsByAccountIdUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/accounts/vcs-orgs/{accountId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVcsOrganizationsByAccountIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsOrganizationsByAccountIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsOrganizationsByAccountIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RefreshAllVCSTokenDetailsUsingPOST refreshes all v c s token details
*/
func (a *Client) RefreshAllVCSTokenDetailsUsingPOST(params *RefreshAllVCSTokenDetailsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshAllVCSTokenDetailsUsingPOSTOK, *RefreshAllVCSTokenDetailsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshAllVCSTokenDetailsUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refreshAllVCSTokenDetailsUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/token-details/refresh",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RefreshAllVCSTokenDetailsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RefreshAllVCSTokenDetailsUsingPOSTOK:
		return value, nil, nil
	case *RefreshAllVCSTokenDetailsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RequestCloudAccountLinkingUsingPOST requests cloud account linking
*/
func (a *Client) RequestCloudAccountLinkingUsingPOST(params *RequestCloudAccountLinkingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestCloudAccountLinkingUsingPOSTOK, *RequestCloudAccountLinkingUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestCloudAccountLinkingUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "requestCloudAccountLinkingUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/link-cloud",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RequestCloudAccountLinkingUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RequestCloudAccountLinkingUsingPOSTOK:
		return value, nil, nil
	case *RequestCloudAccountLinkingUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RequestVCSLinkingUsingPOST requests v c s linking
*/
func (a *Client) RequestVCSLinkingUsingPOST(params *RequestVCSLinkingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestVCSLinkingUsingPOSTOK, *RequestVCSLinkingUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestVCSLinkingUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "requestVCSLinkingUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/link-vcs",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RequestVCSLinkingUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RequestVCSLinkingUsingPOSTOK:
		return value, nil, nil
	case *RequestVCSLinkingUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAwsAccountUsingPUT updates aws account
*/
func (a *Client) UpdateAwsAccountUsingPUT(params *UpdateAwsAccountUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAwsAccountUsingPUTOK, *UpdateAwsAccountUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAwsAccountUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAwsAccountUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/accounts/aws/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAwsAccountUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAwsAccountUsingPUTOK:
		return value, nil, nil
	case *UpdateAwsAccountUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAzureAccountUsingPUT updates azure account
*/
func (a *Client) UpdateAzureAccountUsingPUT(params *UpdateAzureAccountUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAzureAccountUsingPUTOK, *UpdateAzureAccountUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAzureAccountUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAzureAccountUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/accounts/azure/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAzureAccountUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAzureAccountUsingPUTOK:
		return value, nil, nil
	case *UpdateAzureAccountUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBitBucketAccountUsingPUT updates bit bucket account
*/
func (a *Client) UpdateBitBucketAccountUsingPUT(params *UpdateBitBucketAccountUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBitBucketAccountUsingPUTOK, *UpdateBitBucketAccountUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBitBucketAccountUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBitBucketAccountUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/accounts/bitbucket/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBitBucketAccountUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateBitBucketAccountUsingPUTOK:
		return value, nil, nil
	case *UpdateBitBucketAccountUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCoderAccountUsingPUT updates coder account
*/
func (a *Client) UpdateCoderAccountUsingPUT(params *UpdateCoderAccountUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCoderAccountUsingPUTOK, *UpdateCoderAccountUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCoderAccountUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCoderAccountUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/accounts/coder/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCoderAccountUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateCoderAccountUsingPUTOK:
		return value, nil, nil
	case *UpdateCoderAccountUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGcpAccountUsingPUT updates gcp account
*/
func (a *Client) UpdateGcpAccountUsingPUT(params *UpdateGcpAccountUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGcpAccountUsingPUTOK, *UpdateGcpAccountUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGcpAccountUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGcpAccountUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/accounts/gcp/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGcpAccountUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateGcpAccountUsingPUTOK:
		return value, nil, nil
	case *UpdateGcpAccountUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGitHubAccountUsingPUT updates git hub account
*/
func (a *Client) UpdateGitHubAccountUsingPUT(params *UpdateGitHubAccountUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGitHubAccountUsingPUTOK, *UpdateGitHubAccountUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGitHubAccountUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGitHubAccountUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/accounts/github/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGitHubAccountUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateGitHubAccountUsingPUTOK:
		return value, nil, nil
	case *UpdateGitHubAccountUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGitLabAccountUsingPUT updates git lab account
*/
func (a *Client) UpdateGitLabAccountUsingPUT(params *UpdateGitLabAccountUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGitLabAccountUsingPUTOK, *UpdateGitLabAccountUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGitLabAccountUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGitLabAccountUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/accounts/gitlab/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGitLabAccountUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateGitLabAccountUsingPUTOK:
		return value, nil, nil
	case *UpdateGitLabAccountUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateKubernetesAccountUsingPUT updates kubernetes account
*/
func (a *Client) UpdateKubernetesAccountUsingPUT(params *UpdateKubernetesAccountUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKubernetesAccountUsingPUTOK, *UpdateKubernetesAccountUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateKubernetesAccountUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateKubernetesAccountUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/accounts/kubernetes/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateKubernetesAccountUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateKubernetesAccountUsingPUTOK:
		return value, nil, nil
	case *UpdateKubernetesAccountUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVCSAccountUsingPATCH updates v c s account
*/
func (a *Client) UpdateVCSAccountUsingPATCH(params *UpdateVCSAccountUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVCSAccountUsingPATCHOK, *UpdateVCSAccountUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVCSAccountUsingPATCHParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVCSAccountUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/cc-ui/v1/accounts/vcs/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVCSAccountUsingPATCHReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateVCSAccountUsingPATCHOK:
		return value, nil, nil
	case *UpdateVCSAccountUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateAwsAccountUsingPOST validates aws account
*/
func (a *Client) ValidateAwsAccountUsingPOST(params *ValidateAwsAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateAwsAccountUsingPOSTOK, *ValidateAwsAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateAwsAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateAwsAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/aws/validate",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateAwsAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateAwsAccountUsingPOSTOK:
		return value, nil, nil
	case *ValidateAwsAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateAzureAccountUsingPOST validates azure account
*/
func (a *Client) ValidateAzureAccountUsingPOST(params *ValidateAzureAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateAzureAccountUsingPOSTOK, *ValidateAzureAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateAzureAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateAzureAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/azure/validate",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateAzureAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateAzureAccountUsingPOSTOK:
		return value, nil, nil
	case *ValidateAzureAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateBitbucketAccountUsingPOST validates bitbucket account
*/
func (a *Client) ValidateBitbucketAccountUsingPOST(params *ValidateBitbucketAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateBitbucketAccountUsingPOSTOK, *ValidateBitbucketAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateBitbucketAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateBitbucketAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/bitbucket/validate",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateBitbucketAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateBitbucketAccountUsingPOSTOK:
		return value, nil, nil
	case *ValidateBitbucketAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateGcpAccountUsingPOST validates gcp account
*/
func (a *Client) ValidateGcpAccountUsingPOST(params *ValidateGcpAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateGcpAccountUsingPOSTOK, *ValidateGcpAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateGcpAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateGcpAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/gcp/validate",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateGcpAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateGcpAccountUsingPOSTOK:
		return value, nil, nil
	case *ValidateGcpAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateGithubAccountUsingPOST validates github account
*/
func (a *Client) ValidateGithubAccountUsingPOST(params *ValidateGithubAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateGithubAccountUsingPOSTOK, *ValidateGithubAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateGithubAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateGithubAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/github/validate",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateGithubAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateGithubAccountUsingPOSTOK:
		return value, nil, nil
	case *ValidateGithubAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateGitlabAccountUsingPOST validates gitlab account
*/
func (a *Client) ValidateGitlabAccountUsingPOST(params *ValidateGitlabAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateGitlabAccountUsingPOSTOK, *ValidateGitlabAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateGitlabAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateGitlabAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/gitlab/validate",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateGitlabAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateGitlabAccountUsingPOSTOK:
		return value, nil, nil
	case *ValidateGitlabAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateKubernetesAccountUsingPOST validates kubernetes account
*/
func (a *Client) ValidateKubernetesAccountUsingPOST(params *ValidateKubernetesAccountUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateKubernetesAccountUsingPOSTOK, *ValidateKubernetesAccountUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateKubernetesAccountUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateKubernetesAccountUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/kubernetes/validate",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateKubernetesAccountUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateKubernetesAccountUsingPOSTOK:
		return value, nil, nil
	case *ValidateKubernetesAccountUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_accounts_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
