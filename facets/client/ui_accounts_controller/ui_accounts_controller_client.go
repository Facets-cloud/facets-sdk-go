// Code generated by go-swagger; DO NOT EDIT.

package ui_accounts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui accounts controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui accounts controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui accounts controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui accounts controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAwsAccount(params *CreateAwsAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAwsAccountOK, error)

	CreateAzureAccount(params *CreateAzureAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAzureAccountOK, error)

	CreateBitBucketAccount(params *CreateBitBucketAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBitBucketAccountOK, error)

	CreateCoderAccount(params *CreateCoderAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCoderAccountOK, error)

	CreateGcpAccount(params *CreateGcpAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGcpAccountOK, error)

	CreateGitHubAccount(params *CreateGitHubAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGitHubAccountOK, error)

	CreateGitLabAccount(params *CreateGitLabAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGitLabAccountOK, error)

	CreateKubernetesAccount(params *CreateKubernetesAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateKubernetesAccountOK, error)

	DeleteAccount(params *DeleteAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccountOK, error)

	GetAccount(params *GetAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountOK, error)

	GetAccountByName(params *GetAccountByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountByNameOK, error)

	GetAccountsByType(params *GetAccountsByTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountsByTypeOK, error)

	GetAllAccounts(params *GetAllAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllAccountsOK, error)

	GetAllVCSTokenDetails(params *GetAllVCSTokenDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllVCSTokenDetailsOK, error)

	GetBitbucketProjectsForWorkspace(params *GetBitbucketProjectsForWorkspaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBitbucketProjectsForWorkspaceOK, error)

	GetVCSOrganisations(params *GetVCSOrganisationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVCSOrganisationsOK, error)

	GetVCSTokenDetailsByStackName(params *GetVCSTokenDetailsByStackNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVCSTokenDetailsByStackNameOK, error)

	GetVcsOrganizationsByAccountID(params *GetVcsOrganizationsByAccountIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVcsOrganizationsByAccountIDOK, error)

	RefreshAllVCSTokenDetails(params *RefreshAllVCSTokenDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshAllVCSTokenDetailsOK, error)

	RequestCloudAccountLinking(params *RequestCloudAccountLinkingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestCloudAccountLinkingOK, error)

	RequestVCSLinking(params *RequestVCSLinkingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestVCSLinkingOK, error)

	UpdateAwsAccount(params *UpdateAwsAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAwsAccountOK, error)

	UpdateAzureAccount(params *UpdateAzureAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAzureAccountOK, error)

	UpdateBitBucketAccount(params *UpdateBitBucketAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBitBucketAccountOK, error)

	UpdateCoderAccount(params *UpdateCoderAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCoderAccountOK, error)

	UpdateGcpAccount(params *UpdateGcpAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGcpAccountOK, error)

	UpdateGitHubAccount(params *UpdateGitHubAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGitHubAccountOK, error)

	UpdateGitLabAccount(params *UpdateGitLabAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGitLabAccountOK, error)

	UpdateKubernetesAccount(params *UpdateKubernetesAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKubernetesAccountOK, error)

	UpdateVCSAccount(params *UpdateVCSAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVCSAccountOK, error)

	ValidateAwsAccount(params *ValidateAwsAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateAwsAccountOK, error)

	ValidateAzureAccount(params *ValidateAzureAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateAzureAccountOK, error)

	ValidateBitbucketAccount(params *ValidateBitbucketAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateBitbucketAccountOK, error)

	ValidateGcpAccount(params *ValidateGcpAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateGcpAccountOK, error)

	ValidateGithubAccount(params *ValidateGithubAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateGithubAccountOK, error)

	ValidateGitlabAccount(params *ValidateGitlabAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateGitlabAccountOK, error)

	ValidateKubernetesAccount(params *ValidateKubernetesAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateKubernetesAccountOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAwsAccount create aws account API
*/
func (a *Client) CreateAwsAccount(params *CreateAwsAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAwsAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAwsAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAwsAccount",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/aws/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAwsAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAwsAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAwsAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAzureAccount create azure account API
*/
func (a *Client) CreateAzureAccount(params *CreateAzureAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAzureAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAzureAccount",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/azure/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAzureAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAzureAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBitBucketAccount create bit bucket account API
*/
func (a *Client) CreateBitBucketAccount(params *CreateBitBucketAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBitBucketAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBitBucketAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBitBucketAccount",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/bitbucket/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBitBucketAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBitBucketAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBitBucketAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCoderAccount create coder account API
*/
func (a *Client) CreateCoderAccount(params *CreateCoderAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCoderAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoderAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCoderAccount",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/coder/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoderAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCoderAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCoderAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGcpAccount create gcp account API
*/
func (a *Client) CreateGcpAccount(params *CreateGcpAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGcpAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGcpAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGcpAccount",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/gcp/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGcpAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGcpAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGcpAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGitHubAccount create git hub account API
*/
func (a *Client) CreateGitHubAccount(params *CreateGitHubAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGitHubAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGitHubAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGitHubAccount",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/github/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGitHubAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGitHubAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGitHubAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGitLabAccount create git lab account API
*/
func (a *Client) CreateGitLabAccount(params *CreateGitLabAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGitLabAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGitLabAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGitLabAccount",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/gitlab/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGitLabAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGitLabAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGitLabAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateKubernetesAccount create kubernetes account API
*/
func (a *Client) CreateKubernetesAccount(params *CreateKubernetesAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateKubernetesAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKubernetesAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createKubernetesAccount",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/kubernetes/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateKubernetesAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateKubernetesAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createKubernetesAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAccount delete account API
*/
func (a *Client) DeleteAccount(params *DeleteAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAccount",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAccount get account API
*/
func (a *Client) GetAccount(params *GetAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccount",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAccountByName get account by name API
*/
func (a *Client) GetAccountByName(params *GetAccountByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccountByName",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/accounts/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAccountsByType get accounts by type API
*/
func (a *Client) GetAccountsByType(params *GetAccountsByTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountsByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsByTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccountsByType",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/accounts/type/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountsByTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsByTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountsByType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllAccounts get all accounts API
*/
func (a *Client) GetAllAccounts(params *GetAllAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllAccounts",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/accounts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllVCSTokenDetails get all v c s token details API
*/
func (a *Client) GetAllVCSTokenDetails(params *GetAllVCSTokenDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllVCSTokenDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllVCSTokenDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllVCSTokenDetails",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/accounts/token-details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllVCSTokenDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllVCSTokenDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllVCSTokenDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBitbucketProjectsForWorkspace get bitbucket projects for workspace API
*/
func (a *Client) GetBitbucketProjectsForWorkspace(params *GetBitbucketProjectsForWorkspaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBitbucketProjectsForWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBitbucketProjectsForWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBitbucketProjectsForWorkspace",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/accounts/{accountId}/workspaces/{workspace}/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBitbucketProjectsForWorkspaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBitbucketProjectsForWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBitbucketProjectsForWorkspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVCSOrganisations get v c s organisations API
*/
func (a *Client) GetVCSOrganisations(params *GetVCSOrganisationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVCSOrganisationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVCSOrganisationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVCSOrganisations",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/get-organisations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVCSOrganisationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVCSOrganisationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVCSOrganisations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVCSTokenDetailsByStackName get v c s token details by stack name API
*/
func (a *Client) GetVCSTokenDetailsByStackName(params *GetVCSTokenDetailsByStackNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVCSTokenDetailsByStackNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVCSTokenDetailsByStackNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVCSTokenDetailsByStackName",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/accounts/stack/{stackName}/token-details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVCSTokenDetailsByStackNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVCSTokenDetailsByStackNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVCSTokenDetailsByStackName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVcsOrganizationsByAccountID get vcs organizations by account Id API
*/
func (a *Client) GetVcsOrganizationsByAccountID(params *GetVcsOrganizationsByAccountIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVcsOrganizationsByAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsOrganizationsByAccountIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVcsOrganizationsByAccountId",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/accounts/vcs-orgs/{accountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVcsOrganizationsByAccountIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsOrganizationsByAccountIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsOrganizationsByAccountId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RefreshAllVCSTokenDetails refresh all v c s token details API
*/
func (a *Client) RefreshAllVCSTokenDetails(params *RefreshAllVCSTokenDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshAllVCSTokenDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshAllVCSTokenDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refreshAllVCSTokenDetails",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/token-details/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RefreshAllVCSTokenDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshAllVCSTokenDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refreshAllVCSTokenDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RequestCloudAccountLinking request cloud account linking API
*/
func (a *Client) RequestCloudAccountLinking(params *RequestCloudAccountLinkingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestCloudAccountLinkingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestCloudAccountLinkingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "requestCloudAccountLinking",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/link-cloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RequestCloudAccountLinkingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestCloudAccountLinkingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for requestCloudAccountLinking: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RequestVCSLinking request v c s linking API
*/
func (a *Client) RequestVCSLinking(params *RequestVCSLinkingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestVCSLinkingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestVCSLinkingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "requestVCSLinking",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/link-vcs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RequestVCSLinkingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestVCSLinkingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for requestVCSLinking: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAwsAccount update aws account API
*/
func (a *Client) UpdateAwsAccount(params *UpdateAwsAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAwsAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAwsAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAwsAccount",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/accounts/aws/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAwsAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAwsAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAwsAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAzureAccount update azure account API
*/
func (a *Client) UpdateAzureAccount(params *UpdateAzureAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAzureAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAzureAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAzureAccount",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/accounts/azure/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAzureAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAzureAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAzureAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBitBucketAccount update bit bucket account API
*/
func (a *Client) UpdateBitBucketAccount(params *UpdateBitBucketAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBitBucketAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBitBucketAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBitBucketAccount",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/accounts/bitbucket/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBitBucketAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBitBucketAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBitBucketAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCoderAccount update coder account API
*/
func (a *Client) UpdateCoderAccount(params *UpdateCoderAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCoderAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCoderAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCoderAccount",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/accounts/coder/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCoderAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCoderAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCoderAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGcpAccount update gcp account API
*/
func (a *Client) UpdateGcpAccount(params *UpdateGcpAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGcpAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGcpAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGcpAccount",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/accounts/gcp/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGcpAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGcpAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGcpAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGitHubAccount update git hub account API
*/
func (a *Client) UpdateGitHubAccount(params *UpdateGitHubAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGitHubAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGitHubAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGitHubAccount",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/accounts/github/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGitHubAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGitHubAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGitHubAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGitLabAccount update git lab account API
*/
func (a *Client) UpdateGitLabAccount(params *UpdateGitLabAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGitLabAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGitLabAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGitLabAccount",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/accounts/gitlab/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGitLabAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGitLabAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGitLabAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateKubernetesAccount update kubernetes account API
*/
func (a *Client) UpdateKubernetesAccount(params *UpdateKubernetesAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKubernetesAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateKubernetesAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateKubernetesAccount",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/accounts/kubernetes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateKubernetesAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateKubernetesAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateKubernetesAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVCSAccount update v c s account API
*/
func (a *Client) UpdateVCSAccount(params *UpdateVCSAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVCSAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVCSAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVCSAccount",
		Method:             "PATCH",
		PathPattern:        "/cc-ui/v1/accounts/vcs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVCSAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVCSAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVCSAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateAwsAccount validate aws account API
*/
func (a *Client) ValidateAwsAccount(params *ValidateAwsAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateAwsAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateAwsAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateAwsAccount",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/aws/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateAwsAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateAwsAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateAwsAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateAzureAccount validate azure account API
*/
func (a *Client) ValidateAzureAccount(params *ValidateAzureAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateAzureAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateAzureAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateAzureAccount",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/azure/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateAzureAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateAzureAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateAzureAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateBitbucketAccount validate bitbucket account API
*/
func (a *Client) ValidateBitbucketAccount(params *ValidateBitbucketAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateBitbucketAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateBitbucketAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateBitbucketAccount",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/bitbucket/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateBitbucketAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateBitbucketAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateBitbucketAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateGcpAccount validate gcp account API
*/
func (a *Client) ValidateGcpAccount(params *ValidateGcpAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateGcpAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateGcpAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateGcpAccount",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/gcp/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateGcpAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateGcpAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateGcpAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateGithubAccount validate github account API
*/
func (a *Client) ValidateGithubAccount(params *ValidateGithubAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateGithubAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateGithubAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateGithubAccount",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/github/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateGithubAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateGithubAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateGithubAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateGitlabAccount validate gitlab account API
*/
func (a *Client) ValidateGitlabAccount(params *ValidateGitlabAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateGitlabAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateGitlabAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateGitlabAccount",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/gitlab/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateGitlabAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateGitlabAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateGitlabAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateKubernetesAccount validate kubernetes account API
*/
func (a *Client) ValidateKubernetesAccount(params *ValidateKubernetesAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateKubernetesAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateKubernetesAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateKubernetesAccount",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/accounts/kubernetes/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateKubernetesAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateKubernetesAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateKubernetesAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
