// Code generated by go-swagger; DO NOT EDIT.

package ui_o_auth_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui o auth controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui o auth controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui o auth controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui o auth controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddGenericOAuthIntegration(params *AddGenericOAuthIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddGenericOAuthIntegrationOK, error)

	AddIntegrations(params *AddIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddIntegrationsOK, error)

	DeleteIntegrations(params *DeleteIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIntegrationsOK, error)

	EditGenericOAuthIntegration(params *EditGenericOAuthIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditGenericOAuthIntegrationOK, error)

	GetAllIntegrations(params *GetAllIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIntegrationsOK, error)

	UpdateIntegrations(params *UpdateIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIntegrationsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddGenericOAuthIntegration add generic o auth integration API
*/
func (a *Client) AddGenericOAuthIntegration(params *AddGenericOAuthIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddGenericOAuthIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddGenericOAuthIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addGenericOAuthIntegration",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/oauth/generic-oauth-integration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddGenericOAuthIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddGenericOAuthIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addGenericOAuthIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddIntegrations add integrations API
*/
func (a *Client) AddIntegrations(params *AddIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddIntegrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddIntegrationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addIntegrations",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/oauth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddIntegrationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddIntegrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addIntegrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIntegrations delete integrations API
*/
func (a *Client) DeleteIntegrations(params *DeleteIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIntegrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIntegrationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteIntegrations",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/oauth/{registrationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteIntegrationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIntegrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIntegrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EditGenericOAuthIntegration edit generic o auth integration API
*/
func (a *Client) EditGenericOAuthIntegration(params *EditGenericOAuthIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditGenericOAuthIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditGenericOAuthIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editGenericOAuthIntegration",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/oauth/generic-oauth-integration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditGenericOAuthIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditGenericOAuthIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for editGenericOAuthIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllIntegrations get all integrations API
*/
func (a *Client) GetAllIntegrations(params *GetAllIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIntegrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllIntegrationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllIntegrations",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/oauth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllIntegrationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllIntegrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllIntegrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIntegrations update integrations API
*/
func (a *Client) UpdateIntegrations(params *UpdateIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIntegrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIntegrationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateIntegrations",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/oauth/{registrationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateIntegrationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIntegrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateIntegrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
