// Code generated by go-swagger; DO NOT EDIT.

package ui_alerts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetAlertsCountUsingGETReader is a Reader for the GetAlertsCountUsingGET structure.
type GetAlertsCountUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAlertsCountUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAlertsCountUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAlertsCountUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAlertsCountUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAlertsCountUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/alerts/firing/count] getAlertsCountUsingGET", response, response.Code())
	}
}

// NewGetAlertsCountUsingGETOK creates a GetAlertsCountUsingGETOK with default headers values
func NewGetAlertsCountUsingGETOK() *GetAlertsCountUsingGETOK {
	return &GetAlertsCountUsingGETOK{}
}

/*
GetAlertsCountUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAlertsCountUsingGETOK struct {
	Payload map[string]int64
}

// IsSuccess returns true when this get alerts count using g e t o k response has a 2xx status code
func (o *GetAlertsCountUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get alerts count using g e t o k response has a 3xx status code
func (o *GetAlertsCountUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get alerts count using g e t o k response has a 4xx status code
func (o *GetAlertsCountUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get alerts count using g e t o k response has a 5xx status code
func (o *GetAlertsCountUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get alerts count using g e t o k response a status code equal to that given
func (o *GetAlertsCountUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get alerts count using g e t o k response
func (o *GetAlertsCountUsingGETOK) Code() int {
	return 200
}

func (o *GetAlertsCountUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/alerts/firing/count][%d] getAlertsCountUsingGETOK %s", 200, payload)
}

func (o *GetAlertsCountUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/alerts/firing/count][%d] getAlertsCountUsingGETOK %s", 200, payload)
}

func (o *GetAlertsCountUsingGETOK) GetPayload() map[string]int64 {
	return o.Payload
}

func (o *GetAlertsCountUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAlertsCountUsingGETUnauthorized creates a GetAlertsCountUsingGETUnauthorized with default headers values
func NewGetAlertsCountUsingGETUnauthorized() *GetAlertsCountUsingGETUnauthorized {
	return &GetAlertsCountUsingGETUnauthorized{}
}

/*
GetAlertsCountUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAlertsCountUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get alerts count using g e t unauthorized response has a 2xx status code
func (o *GetAlertsCountUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get alerts count using g e t unauthorized response has a 3xx status code
func (o *GetAlertsCountUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get alerts count using g e t unauthorized response has a 4xx status code
func (o *GetAlertsCountUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get alerts count using g e t unauthorized response has a 5xx status code
func (o *GetAlertsCountUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get alerts count using g e t unauthorized response a status code equal to that given
func (o *GetAlertsCountUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get alerts count using g e t unauthorized response
func (o *GetAlertsCountUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAlertsCountUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/alerts/firing/count][%d] getAlertsCountUsingGETUnauthorized", 401)
}

func (o *GetAlertsCountUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/alerts/firing/count][%d] getAlertsCountUsingGETUnauthorized", 401)
}

func (o *GetAlertsCountUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAlertsCountUsingGETForbidden creates a GetAlertsCountUsingGETForbidden with default headers values
func NewGetAlertsCountUsingGETForbidden() *GetAlertsCountUsingGETForbidden {
	return &GetAlertsCountUsingGETForbidden{}
}

/*
GetAlertsCountUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAlertsCountUsingGETForbidden struct {
}

// IsSuccess returns true when this get alerts count using g e t forbidden response has a 2xx status code
func (o *GetAlertsCountUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get alerts count using g e t forbidden response has a 3xx status code
func (o *GetAlertsCountUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get alerts count using g e t forbidden response has a 4xx status code
func (o *GetAlertsCountUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get alerts count using g e t forbidden response has a 5xx status code
func (o *GetAlertsCountUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get alerts count using g e t forbidden response a status code equal to that given
func (o *GetAlertsCountUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get alerts count using g e t forbidden response
func (o *GetAlertsCountUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAlertsCountUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/alerts/firing/count][%d] getAlertsCountUsingGETForbidden", 403)
}

func (o *GetAlertsCountUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/alerts/firing/count][%d] getAlertsCountUsingGETForbidden", 403)
}

func (o *GetAlertsCountUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAlertsCountUsingGETNotFound creates a GetAlertsCountUsingGETNotFound with default headers values
func NewGetAlertsCountUsingGETNotFound() *GetAlertsCountUsingGETNotFound {
	return &GetAlertsCountUsingGETNotFound{}
}

/*
GetAlertsCountUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAlertsCountUsingGETNotFound struct {
}

// IsSuccess returns true when this get alerts count using g e t not found response has a 2xx status code
func (o *GetAlertsCountUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get alerts count using g e t not found response has a 3xx status code
func (o *GetAlertsCountUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get alerts count using g e t not found response has a 4xx status code
func (o *GetAlertsCountUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get alerts count using g e t not found response has a 5xx status code
func (o *GetAlertsCountUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get alerts count using g e t not found response a status code equal to that given
func (o *GetAlertsCountUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get alerts count using g e t not found response
func (o *GetAlertsCountUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAlertsCountUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/alerts/firing/count][%d] getAlertsCountUsingGETNotFound", 404)
}

func (o *GetAlertsCountUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/alerts/firing/count][%d] getAlertsCountUsingGETNotFound", 404)
}

func (o *GetAlertsCountUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
