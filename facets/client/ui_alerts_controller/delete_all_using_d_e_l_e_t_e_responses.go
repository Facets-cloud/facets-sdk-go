// Code generated by go-swagger; DO NOT EDIT.

package ui_alerts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteAllUsingDELETEReader is a Reader for the DeleteAllUsingDELETE structure.
type DeleteAllUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAllUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteAllUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteAllUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteAllUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteAllUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/alerts] deleteAllUsingDELETE", response, response.Code())
	}
}

// NewDeleteAllUsingDELETEOK creates a DeleteAllUsingDELETEOK with default headers values
func NewDeleteAllUsingDELETEOK() *DeleteAllUsingDELETEOK {
	return &DeleteAllUsingDELETEOK{}
}

/*
DeleteAllUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteAllUsingDELETEOK struct {
}

// IsSuccess returns true when this delete all using d e l e t e o k response has a 2xx status code
func (o *DeleteAllUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete all using d e l e t e o k response has a 3xx status code
func (o *DeleteAllUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete all using d e l e t e o k response has a 4xx status code
func (o *DeleteAllUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete all using d e l e t e o k response has a 5xx status code
func (o *DeleteAllUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete all using d e l e t e o k response a status code equal to that given
func (o *DeleteAllUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete all using d e l e t e o k response
func (o *DeleteAllUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteAllUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/alerts][%d] deleteAllUsingDELETEOK", 200)
}

func (o *DeleteAllUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/alerts][%d] deleteAllUsingDELETEOK", 200)
}

func (o *DeleteAllUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAllUsingDELETENoContent creates a DeleteAllUsingDELETENoContent with default headers values
func NewDeleteAllUsingDELETENoContent() *DeleteAllUsingDELETENoContent {
	return &DeleteAllUsingDELETENoContent{}
}

/*
DeleteAllUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteAllUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete all using d e l e t e no content response has a 2xx status code
func (o *DeleteAllUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete all using d e l e t e no content response has a 3xx status code
func (o *DeleteAllUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete all using d e l e t e no content response has a 4xx status code
func (o *DeleteAllUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete all using d e l e t e no content response has a 5xx status code
func (o *DeleteAllUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete all using d e l e t e no content response a status code equal to that given
func (o *DeleteAllUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete all using d e l e t e no content response
func (o *DeleteAllUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteAllUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/alerts][%d] deleteAllUsingDELETENoContent", 204)
}

func (o *DeleteAllUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/alerts][%d] deleteAllUsingDELETENoContent", 204)
}

func (o *DeleteAllUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAllUsingDELETEUnauthorized creates a DeleteAllUsingDELETEUnauthorized with default headers values
func NewDeleteAllUsingDELETEUnauthorized() *DeleteAllUsingDELETEUnauthorized {
	return &DeleteAllUsingDELETEUnauthorized{}
}

/*
DeleteAllUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteAllUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete all using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteAllUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete all using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteAllUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete all using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteAllUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete all using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteAllUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete all using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteAllUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete all using d e l e t e unauthorized response
func (o *DeleteAllUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteAllUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/alerts][%d] deleteAllUsingDELETEUnauthorized", 401)
}

func (o *DeleteAllUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/alerts][%d] deleteAllUsingDELETEUnauthorized", 401)
}

func (o *DeleteAllUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAllUsingDELETEForbidden creates a DeleteAllUsingDELETEForbidden with default headers values
func NewDeleteAllUsingDELETEForbidden() *DeleteAllUsingDELETEForbidden {
	return &DeleteAllUsingDELETEForbidden{}
}

/*
DeleteAllUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteAllUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete all using d e l e t e forbidden response has a 2xx status code
func (o *DeleteAllUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete all using d e l e t e forbidden response has a 3xx status code
func (o *DeleteAllUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete all using d e l e t e forbidden response has a 4xx status code
func (o *DeleteAllUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete all using d e l e t e forbidden response has a 5xx status code
func (o *DeleteAllUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete all using d e l e t e forbidden response a status code equal to that given
func (o *DeleteAllUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete all using d e l e t e forbidden response
func (o *DeleteAllUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteAllUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/alerts][%d] deleteAllUsingDELETEForbidden", 403)
}

func (o *DeleteAllUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/alerts][%d] deleteAllUsingDELETEForbidden", 403)
}

func (o *DeleteAllUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
