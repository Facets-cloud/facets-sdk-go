// Code generated by go-swagger; DO NOT EDIT.

package ui_alerts_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetFiringAlertsUsingGETReader is a Reader for the GetFiringAlertsUsingGET structure.
type GetFiringAlertsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFiringAlertsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFiringAlertsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetFiringAlertsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetFiringAlertsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetFiringAlertsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/alerts/firing] getFiringAlertsUsingGET", response, response.Code())
	}
}

// NewGetFiringAlertsUsingGETOK creates a GetFiringAlertsUsingGETOK with default headers values
func NewGetFiringAlertsUsingGETOK() *GetFiringAlertsUsingGETOK {
	return &GetFiringAlertsUsingGETOK{}
}

/*
GetFiringAlertsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetFiringAlertsUsingGETOK struct {
	Payload []*models.AlertGroup
}

// IsSuccess returns true when this get firing alerts using g e t o k response has a 2xx status code
func (o *GetFiringAlertsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get firing alerts using g e t o k response has a 3xx status code
func (o *GetFiringAlertsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get firing alerts using g e t o k response has a 4xx status code
func (o *GetFiringAlertsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get firing alerts using g e t o k response has a 5xx status code
func (o *GetFiringAlertsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get firing alerts using g e t o k response a status code equal to that given
func (o *GetFiringAlertsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get firing alerts using g e t o k response
func (o *GetFiringAlertsUsingGETOK) Code() int {
	return 200
}

func (o *GetFiringAlertsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/alerts/firing][%d] getFiringAlertsUsingGETOK %s", 200, payload)
}

func (o *GetFiringAlertsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/alerts/firing][%d] getFiringAlertsUsingGETOK %s", 200, payload)
}

func (o *GetFiringAlertsUsingGETOK) GetPayload() []*models.AlertGroup {
	return o.Payload
}

func (o *GetFiringAlertsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFiringAlertsUsingGETUnauthorized creates a GetFiringAlertsUsingGETUnauthorized with default headers values
func NewGetFiringAlertsUsingGETUnauthorized() *GetFiringAlertsUsingGETUnauthorized {
	return &GetFiringAlertsUsingGETUnauthorized{}
}

/*
GetFiringAlertsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetFiringAlertsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get firing alerts using g e t unauthorized response has a 2xx status code
func (o *GetFiringAlertsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get firing alerts using g e t unauthorized response has a 3xx status code
func (o *GetFiringAlertsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get firing alerts using g e t unauthorized response has a 4xx status code
func (o *GetFiringAlertsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get firing alerts using g e t unauthorized response has a 5xx status code
func (o *GetFiringAlertsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get firing alerts using g e t unauthorized response a status code equal to that given
func (o *GetFiringAlertsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get firing alerts using g e t unauthorized response
func (o *GetFiringAlertsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetFiringAlertsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/alerts/firing][%d] getFiringAlertsUsingGETUnauthorized", 401)
}

func (o *GetFiringAlertsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/alerts/firing][%d] getFiringAlertsUsingGETUnauthorized", 401)
}

func (o *GetFiringAlertsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFiringAlertsUsingGETForbidden creates a GetFiringAlertsUsingGETForbidden with default headers values
func NewGetFiringAlertsUsingGETForbidden() *GetFiringAlertsUsingGETForbidden {
	return &GetFiringAlertsUsingGETForbidden{}
}

/*
GetFiringAlertsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetFiringAlertsUsingGETForbidden struct {
}

// IsSuccess returns true when this get firing alerts using g e t forbidden response has a 2xx status code
func (o *GetFiringAlertsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get firing alerts using g e t forbidden response has a 3xx status code
func (o *GetFiringAlertsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get firing alerts using g e t forbidden response has a 4xx status code
func (o *GetFiringAlertsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get firing alerts using g e t forbidden response has a 5xx status code
func (o *GetFiringAlertsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get firing alerts using g e t forbidden response a status code equal to that given
func (o *GetFiringAlertsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get firing alerts using g e t forbidden response
func (o *GetFiringAlertsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetFiringAlertsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/alerts/firing][%d] getFiringAlertsUsingGETForbidden", 403)
}

func (o *GetFiringAlertsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/alerts/firing][%d] getFiringAlertsUsingGETForbidden", 403)
}

func (o *GetFiringAlertsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFiringAlertsUsingGETNotFound creates a GetFiringAlertsUsingGETNotFound with default headers values
func NewGetFiringAlertsUsingGETNotFound() *GetFiringAlertsUsingGETNotFound {
	return &GetFiringAlertsUsingGETNotFound{}
}

/*
GetFiringAlertsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetFiringAlertsUsingGETNotFound struct {
}

// IsSuccess returns true when this get firing alerts using g e t not found response has a 2xx status code
func (o *GetFiringAlertsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get firing alerts using g e t not found response has a 3xx status code
func (o *GetFiringAlertsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get firing alerts using g e t not found response has a 4xx status code
func (o *GetFiringAlertsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get firing alerts using g e t not found response has a 5xx status code
func (o *GetFiringAlertsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get firing alerts using g e t not found response a status code equal to that given
func (o *GetFiringAlertsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get firing alerts using g e t not found response
func (o *GetFiringAlertsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetFiringAlertsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/alerts/firing][%d] getFiringAlertsUsingGETNotFound", 404)
}

func (o *GetFiringAlertsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/alerts/firing][%d] getFiringAlertsUsingGETNotFound", 404)
}

func (o *GetFiringAlertsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
