// Code generated by go-swagger; DO NOT EDIT.

package ui_theme_file_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// SaveThemeFileReader is a Reader for the SaveThemeFile structure.
type SaveThemeFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SaveThemeFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSaveThemeFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSaveThemeFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSaveThemeFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewSaveThemeFileMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSaveThemeFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/themeFile] saveThemeFile", response, response.Code())
	}
}

// NewSaveThemeFileOK creates a SaveThemeFileOK with default headers values
func NewSaveThemeFileOK() *SaveThemeFileOK {
	return &SaveThemeFileOK{}
}

/*
SaveThemeFileOK describes a response with status code 200, with default header values.

OK
*/
type SaveThemeFileOK struct {
	Payload bool
}

// IsSuccess returns true when this save theme file o k response has a 2xx status code
func (o *SaveThemeFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this save theme file o k response has a 3xx status code
func (o *SaveThemeFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save theme file o k response has a 4xx status code
func (o *SaveThemeFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this save theme file o k response has a 5xx status code
func (o *SaveThemeFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this save theme file o k response a status code equal to that given
func (o *SaveThemeFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the save theme file o k response
func (o *SaveThemeFileOK) Code() int {
	return 200
}

func (o *SaveThemeFileOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/themeFile][%d] saveThemeFileOK %s", 200, payload)
}

func (o *SaveThemeFileOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/themeFile][%d] saveThemeFileOK %s", 200, payload)
}

func (o *SaveThemeFileOK) GetPayload() bool {
	return o.Payload
}

func (o *SaveThemeFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveThemeFileBadRequest creates a SaveThemeFileBadRequest with default headers values
func NewSaveThemeFileBadRequest() *SaveThemeFileBadRequest {
	return &SaveThemeFileBadRequest{}
}

/*
SaveThemeFileBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SaveThemeFileBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this save theme file bad request response has a 2xx status code
func (o *SaveThemeFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save theme file bad request response has a 3xx status code
func (o *SaveThemeFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save theme file bad request response has a 4xx status code
func (o *SaveThemeFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this save theme file bad request response has a 5xx status code
func (o *SaveThemeFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this save theme file bad request response a status code equal to that given
func (o *SaveThemeFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the save theme file bad request response
func (o *SaveThemeFileBadRequest) Code() int {
	return 400
}

func (o *SaveThemeFileBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/themeFile][%d] saveThemeFileBadRequest %s", 400, payload)
}

func (o *SaveThemeFileBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/themeFile][%d] saveThemeFileBadRequest %s", 400, payload)
}

func (o *SaveThemeFileBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SaveThemeFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveThemeFileNotFound creates a SaveThemeFileNotFound with default headers values
func NewSaveThemeFileNotFound() *SaveThemeFileNotFound {
	return &SaveThemeFileNotFound{}
}

/*
SaveThemeFileNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SaveThemeFileNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this save theme file not found response has a 2xx status code
func (o *SaveThemeFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save theme file not found response has a 3xx status code
func (o *SaveThemeFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save theme file not found response has a 4xx status code
func (o *SaveThemeFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this save theme file not found response has a 5xx status code
func (o *SaveThemeFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this save theme file not found response a status code equal to that given
func (o *SaveThemeFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the save theme file not found response
func (o *SaveThemeFileNotFound) Code() int {
	return 404
}

func (o *SaveThemeFileNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/themeFile][%d] saveThemeFileNotFound %s", 404, payload)
}

func (o *SaveThemeFileNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/themeFile][%d] saveThemeFileNotFound %s", 404, payload)
}

func (o *SaveThemeFileNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SaveThemeFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveThemeFileMethodNotAllowed creates a SaveThemeFileMethodNotAllowed with default headers values
func NewSaveThemeFileMethodNotAllowed() *SaveThemeFileMethodNotAllowed {
	return &SaveThemeFileMethodNotAllowed{}
}

/*
SaveThemeFileMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type SaveThemeFileMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this save theme file method not allowed response has a 2xx status code
func (o *SaveThemeFileMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save theme file method not allowed response has a 3xx status code
func (o *SaveThemeFileMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save theme file method not allowed response has a 4xx status code
func (o *SaveThemeFileMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this save theme file method not allowed response has a 5xx status code
func (o *SaveThemeFileMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this save theme file method not allowed response a status code equal to that given
func (o *SaveThemeFileMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the save theme file method not allowed response
func (o *SaveThemeFileMethodNotAllowed) Code() int {
	return 405
}

func (o *SaveThemeFileMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/themeFile][%d] saveThemeFileMethodNotAllowed %s", 405, payload)
}

func (o *SaveThemeFileMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/themeFile][%d] saveThemeFileMethodNotAllowed %s", 405, payload)
}

func (o *SaveThemeFileMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SaveThemeFileMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveThemeFileInternalServerError creates a SaveThemeFileInternalServerError with default headers values
func NewSaveThemeFileInternalServerError() *SaveThemeFileInternalServerError {
	return &SaveThemeFileInternalServerError{}
}

/*
SaveThemeFileInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type SaveThemeFileInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this save theme file internal server error response has a 2xx status code
func (o *SaveThemeFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save theme file internal server error response has a 3xx status code
func (o *SaveThemeFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save theme file internal server error response has a 4xx status code
func (o *SaveThemeFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this save theme file internal server error response has a 5xx status code
func (o *SaveThemeFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this save theme file internal server error response a status code equal to that given
func (o *SaveThemeFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the save theme file internal server error response
func (o *SaveThemeFileInternalServerError) Code() int {
	return 500
}

func (o *SaveThemeFileInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/themeFile][%d] saveThemeFileInternalServerError %s", 500, payload)
}

func (o *SaveThemeFileInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/themeFile][%d] saveThemeFileInternalServerError %s", 500, payload)
}

func (o *SaveThemeFileInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SaveThemeFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
