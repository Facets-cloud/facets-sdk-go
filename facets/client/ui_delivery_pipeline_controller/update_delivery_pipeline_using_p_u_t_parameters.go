// Code generated by go-swagger; DO NOT EDIT.

package ui_delivery_pipeline_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// NewUpdateDeliveryPipelineUsingPUTParams creates a new UpdateDeliveryPipelineUsingPUTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateDeliveryPipelineUsingPUTParams() *UpdateDeliveryPipelineUsingPUTParams {
	return &UpdateDeliveryPipelineUsingPUTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateDeliveryPipelineUsingPUTParamsWithTimeout creates a new UpdateDeliveryPipelineUsingPUTParams object
// with the ability to set a timeout on a request.
func NewUpdateDeliveryPipelineUsingPUTParamsWithTimeout(timeout time.Duration) *UpdateDeliveryPipelineUsingPUTParams {
	return &UpdateDeliveryPipelineUsingPUTParams{
		timeout: timeout,
	}
}

// NewUpdateDeliveryPipelineUsingPUTParamsWithContext creates a new UpdateDeliveryPipelineUsingPUTParams object
// with the ability to set a context for a request.
func NewUpdateDeliveryPipelineUsingPUTParamsWithContext(ctx context.Context) *UpdateDeliveryPipelineUsingPUTParams {
	return &UpdateDeliveryPipelineUsingPUTParams{
		Context: ctx,
	}
}

// NewUpdateDeliveryPipelineUsingPUTParamsWithHTTPClient creates a new UpdateDeliveryPipelineUsingPUTParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateDeliveryPipelineUsingPUTParamsWithHTTPClient(client *http.Client) *UpdateDeliveryPipelineUsingPUTParams {
	return &UpdateDeliveryPipelineUsingPUTParams{
		HTTPClient: client,
	}
}

/*
UpdateDeliveryPipelineUsingPUTParams contains all the parameters to send to the API endpoint

	for the update delivery pipeline using p u t operation.

	Typically these are written to a http.Request.
*/
type UpdateDeliveryPipelineUsingPUTParams struct {

	/* PipelineNodes.

	   pipelineNodes
	*/
	PipelineNodes []*models.PipelineNode

	/* StackName.

	   stackName
	*/
	StackName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update delivery pipeline using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateDeliveryPipelineUsingPUTParams) WithDefaults() *UpdateDeliveryPipelineUsingPUTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update delivery pipeline using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateDeliveryPipelineUsingPUTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update delivery pipeline using p u t params
func (o *UpdateDeliveryPipelineUsingPUTParams) WithTimeout(timeout time.Duration) *UpdateDeliveryPipelineUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update delivery pipeline using p u t params
func (o *UpdateDeliveryPipelineUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update delivery pipeline using p u t params
func (o *UpdateDeliveryPipelineUsingPUTParams) WithContext(ctx context.Context) *UpdateDeliveryPipelineUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update delivery pipeline using p u t params
func (o *UpdateDeliveryPipelineUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update delivery pipeline using p u t params
func (o *UpdateDeliveryPipelineUsingPUTParams) WithHTTPClient(client *http.Client) *UpdateDeliveryPipelineUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update delivery pipeline using p u t params
func (o *UpdateDeliveryPipelineUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPipelineNodes adds the pipelineNodes to the update delivery pipeline using p u t params
func (o *UpdateDeliveryPipelineUsingPUTParams) WithPipelineNodes(pipelineNodes []*models.PipelineNode) *UpdateDeliveryPipelineUsingPUTParams {
	o.SetPipelineNodes(pipelineNodes)
	return o
}

// SetPipelineNodes adds the pipelineNodes to the update delivery pipeline using p u t params
func (o *UpdateDeliveryPipelineUsingPUTParams) SetPipelineNodes(pipelineNodes []*models.PipelineNode) {
	o.PipelineNodes = pipelineNodes
}

// WithStackName adds the stackName to the update delivery pipeline using p u t params
func (o *UpdateDeliveryPipelineUsingPUTParams) WithStackName(stackName string) *UpdateDeliveryPipelineUsingPUTParams {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the update delivery pipeline using p u t params
func (o *UpdateDeliveryPipelineUsingPUTParams) SetStackName(stackName string) {
	o.StackName = stackName
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateDeliveryPipelineUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.PipelineNodes != nil {
		if err := r.SetBodyParam(o.PipelineNodes); err != nil {
			return err
		}
	}

	// path param stackName
	if err := r.SetPathParam("stackName", o.StackName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
