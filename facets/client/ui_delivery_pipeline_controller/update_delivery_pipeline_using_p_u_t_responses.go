// Code generated by go-swagger; DO NOT EDIT.

package ui_delivery_pipeline_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateDeliveryPipelineUsingPUTReader is a Reader for the UpdateDeliveryPipelineUsingPUT structure.
type UpdateDeliveryPipelineUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDeliveryPipelineUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDeliveryPipelineUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateDeliveryPipelineUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateDeliveryPipelineUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateDeliveryPipelineUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDeliveryPipelineUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/delivery-pipeline/{stackName}] updateDeliveryPipelineUsingPUT", response, response.Code())
	}
}

// NewUpdateDeliveryPipelineUsingPUTOK creates a UpdateDeliveryPipelineUsingPUTOK with default headers values
func NewUpdateDeliveryPipelineUsingPUTOK() *UpdateDeliveryPipelineUsingPUTOK {
	return &UpdateDeliveryPipelineUsingPUTOK{}
}

/*
UpdateDeliveryPipelineUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateDeliveryPipelineUsingPUTOK struct {
	Payload []*models.PipelineNode
}

// IsSuccess returns true when this update delivery pipeline using p u t o k response has a 2xx status code
func (o *UpdateDeliveryPipelineUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update delivery pipeline using p u t o k response has a 3xx status code
func (o *UpdateDeliveryPipelineUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update delivery pipeline using p u t o k response has a 4xx status code
func (o *UpdateDeliveryPipelineUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update delivery pipeline using p u t o k response has a 5xx status code
func (o *UpdateDeliveryPipelineUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update delivery pipeline using p u t o k response a status code equal to that given
func (o *UpdateDeliveryPipelineUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update delivery pipeline using p u t o k response
func (o *UpdateDeliveryPipelineUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateDeliveryPipelineUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineUsingPUTOK %s", 200, payload)
}

func (o *UpdateDeliveryPipelineUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineUsingPUTOK %s", 200, payload)
}

func (o *UpdateDeliveryPipelineUsingPUTOK) GetPayload() []*models.PipelineNode {
	return o.Payload
}

func (o *UpdateDeliveryPipelineUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDeliveryPipelineUsingPUTCreated creates a UpdateDeliveryPipelineUsingPUTCreated with default headers values
func NewUpdateDeliveryPipelineUsingPUTCreated() *UpdateDeliveryPipelineUsingPUTCreated {
	return &UpdateDeliveryPipelineUsingPUTCreated{}
}

/*
UpdateDeliveryPipelineUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateDeliveryPipelineUsingPUTCreated struct {
}

// IsSuccess returns true when this update delivery pipeline using p u t created response has a 2xx status code
func (o *UpdateDeliveryPipelineUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update delivery pipeline using p u t created response has a 3xx status code
func (o *UpdateDeliveryPipelineUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update delivery pipeline using p u t created response has a 4xx status code
func (o *UpdateDeliveryPipelineUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update delivery pipeline using p u t created response has a 5xx status code
func (o *UpdateDeliveryPipelineUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update delivery pipeline using p u t created response a status code equal to that given
func (o *UpdateDeliveryPipelineUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update delivery pipeline using p u t created response
func (o *UpdateDeliveryPipelineUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateDeliveryPipelineUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineUsingPUTCreated", 201)
}

func (o *UpdateDeliveryPipelineUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineUsingPUTCreated", 201)
}

func (o *UpdateDeliveryPipelineUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDeliveryPipelineUsingPUTUnauthorized creates a UpdateDeliveryPipelineUsingPUTUnauthorized with default headers values
func NewUpdateDeliveryPipelineUsingPUTUnauthorized() *UpdateDeliveryPipelineUsingPUTUnauthorized {
	return &UpdateDeliveryPipelineUsingPUTUnauthorized{}
}

/*
UpdateDeliveryPipelineUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateDeliveryPipelineUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update delivery pipeline using p u t unauthorized response has a 2xx status code
func (o *UpdateDeliveryPipelineUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update delivery pipeline using p u t unauthorized response has a 3xx status code
func (o *UpdateDeliveryPipelineUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update delivery pipeline using p u t unauthorized response has a 4xx status code
func (o *UpdateDeliveryPipelineUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update delivery pipeline using p u t unauthorized response has a 5xx status code
func (o *UpdateDeliveryPipelineUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update delivery pipeline using p u t unauthorized response a status code equal to that given
func (o *UpdateDeliveryPipelineUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update delivery pipeline using p u t unauthorized response
func (o *UpdateDeliveryPipelineUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateDeliveryPipelineUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineUsingPUTUnauthorized", 401)
}

func (o *UpdateDeliveryPipelineUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineUsingPUTUnauthorized", 401)
}

func (o *UpdateDeliveryPipelineUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDeliveryPipelineUsingPUTForbidden creates a UpdateDeliveryPipelineUsingPUTForbidden with default headers values
func NewUpdateDeliveryPipelineUsingPUTForbidden() *UpdateDeliveryPipelineUsingPUTForbidden {
	return &UpdateDeliveryPipelineUsingPUTForbidden{}
}

/*
UpdateDeliveryPipelineUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateDeliveryPipelineUsingPUTForbidden struct {
}

// IsSuccess returns true when this update delivery pipeline using p u t forbidden response has a 2xx status code
func (o *UpdateDeliveryPipelineUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update delivery pipeline using p u t forbidden response has a 3xx status code
func (o *UpdateDeliveryPipelineUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update delivery pipeline using p u t forbidden response has a 4xx status code
func (o *UpdateDeliveryPipelineUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update delivery pipeline using p u t forbidden response has a 5xx status code
func (o *UpdateDeliveryPipelineUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update delivery pipeline using p u t forbidden response a status code equal to that given
func (o *UpdateDeliveryPipelineUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update delivery pipeline using p u t forbidden response
func (o *UpdateDeliveryPipelineUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateDeliveryPipelineUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineUsingPUTForbidden", 403)
}

func (o *UpdateDeliveryPipelineUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineUsingPUTForbidden", 403)
}

func (o *UpdateDeliveryPipelineUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDeliveryPipelineUsingPUTNotFound creates a UpdateDeliveryPipelineUsingPUTNotFound with default headers values
func NewUpdateDeliveryPipelineUsingPUTNotFound() *UpdateDeliveryPipelineUsingPUTNotFound {
	return &UpdateDeliveryPipelineUsingPUTNotFound{}
}

/*
UpdateDeliveryPipelineUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateDeliveryPipelineUsingPUTNotFound struct {
}

// IsSuccess returns true when this update delivery pipeline using p u t not found response has a 2xx status code
func (o *UpdateDeliveryPipelineUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update delivery pipeline using p u t not found response has a 3xx status code
func (o *UpdateDeliveryPipelineUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update delivery pipeline using p u t not found response has a 4xx status code
func (o *UpdateDeliveryPipelineUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update delivery pipeline using p u t not found response has a 5xx status code
func (o *UpdateDeliveryPipelineUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update delivery pipeline using p u t not found response a status code equal to that given
func (o *UpdateDeliveryPipelineUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update delivery pipeline using p u t not found response
func (o *UpdateDeliveryPipelineUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateDeliveryPipelineUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineUsingPUTNotFound", 404)
}

func (o *UpdateDeliveryPipelineUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineUsingPUTNotFound", 404)
}

func (o *UpdateDeliveryPipelineUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
