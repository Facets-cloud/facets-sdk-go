// Code generated by go-swagger; DO NOT EDIT.

package ui_delivery_pipeline_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateDeliveryPipelineReader is a Reader for the UpdateDeliveryPipeline structure.
type UpdateDeliveryPipelineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDeliveryPipelineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDeliveryPipelineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateDeliveryPipelineBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDeliveryPipelineNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateDeliveryPipelineMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateDeliveryPipelineInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/delivery-pipeline/{stackName}] updateDeliveryPipeline", response, response.Code())
	}
}

// NewUpdateDeliveryPipelineOK creates a UpdateDeliveryPipelineOK with default headers values
func NewUpdateDeliveryPipelineOK() *UpdateDeliveryPipelineOK {
	return &UpdateDeliveryPipelineOK{}
}

/*
UpdateDeliveryPipelineOK describes a response with status code 200, with default header values.

OK
*/
type UpdateDeliveryPipelineOK struct {
	Payload []*models.PipelineNode
}

// IsSuccess returns true when this update delivery pipeline o k response has a 2xx status code
func (o *UpdateDeliveryPipelineOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update delivery pipeline o k response has a 3xx status code
func (o *UpdateDeliveryPipelineOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update delivery pipeline o k response has a 4xx status code
func (o *UpdateDeliveryPipelineOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update delivery pipeline o k response has a 5xx status code
func (o *UpdateDeliveryPipelineOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update delivery pipeline o k response a status code equal to that given
func (o *UpdateDeliveryPipelineOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update delivery pipeline o k response
func (o *UpdateDeliveryPipelineOK) Code() int {
	return 200
}

func (o *UpdateDeliveryPipelineOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineOK %s", 200, payload)
}

func (o *UpdateDeliveryPipelineOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineOK %s", 200, payload)
}

func (o *UpdateDeliveryPipelineOK) GetPayload() []*models.PipelineNode {
	return o.Payload
}

func (o *UpdateDeliveryPipelineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDeliveryPipelineBadRequest creates a UpdateDeliveryPipelineBadRequest with default headers values
func NewUpdateDeliveryPipelineBadRequest() *UpdateDeliveryPipelineBadRequest {
	return &UpdateDeliveryPipelineBadRequest{}
}

/*
UpdateDeliveryPipelineBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateDeliveryPipelineBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update delivery pipeline bad request response has a 2xx status code
func (o *UpdateDeliveryPipelineBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update delivery pipeline bad request response has a 3xx status code
func (o *UpdateDeliveryPipelineBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update delivery pipeline bad request response has a 4xx status code
func (o *UpdateDeliveryPipelineBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update delivery pipeline bad request response has a 5xx status code
func (o *UpdateDeliveryPipelineBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update delivery pipeline bad request response a status code equal to that given
func (o *UpdateDeliveryPipelineBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update delivery pipeline bad request response
func (o *UpdateDeliveryPipelineBadRequest) Code() int {
	return 400
}

func (o *UpdateDeliveryPipelineBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineBadRequest %s", 400, payload)
}

func (o *UpdateDeliveryPipelineBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineBadRequest %s", 400, payload)
}

func (o *UpdateDeliveryPipelineBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateDeliveryPipelineBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDeliveryPipelineNotFound creates a UpdateDeliveryPipelineNotFound with default headers values
func NewUpdateDeliveryPipelineNotFound() *UpdateDeliveryPipelineNotFound {
	return &UpdateDeliveryPipelineNotFound{}
}

/*
UpdateDeliveryPipelineNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateDeliveryPipelineNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update delivery pipeline not found response has a 2xx status code
func (o *UpdateDeliveryPipelineNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update delivery pipeline not found response has a 3xx status code
func (o *UpdateDeliveryPipelineNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update delivery pipeline not found response has a 4xx status code
func (o *UpdateDeliveryPipelineNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update delivery pipeline not found response has a 5xx status code
func (o *UpdateDeliveryPipelineNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update delivery pipeline not found response a status code equal to that given
func (o *UpdateDeliveryPipelineNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update delivery pipeline not found response
func (o *UpdateDeliveryPipelineNotFound) Code() int {
	return 404
}

func (o *UpdateDeliveryPipelineNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineNotFound %s", 404, payload)
}

func (o *UpdateDeliveryPipelineNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineNotFound %s", 404, payload)
}

func (o *UpdateDeliveryPipelineNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateDeliveryPipelineNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDeliveryPipelineMethodNotAllowed creates a UpdateDeliveryPipelineMethodNotAllowed with default headers values
func NewUpdateDeliveryPipelineMethodNotAllowed() *UpdateDeliveryPipelineMethodNotAllowed {
	return &UpdateDeliveryPipelineMethodNotAllowed{}
}

/*
UpdateDeliveryPipelineMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateDeliveryPipelineMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update delivery pipeline method not allowed response has a 2xx status code
func (o *UpdateDeliveryPipelineMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update delivery pipeline method not allowed response has a 3xx status code
func (o *UpdateDeliveryPipelineMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update delivery pipeline method not allowed response has a 4xx status code
func (o *UpdateDeliveryPipelineMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update delivery pipeline method not allowed response has a 5xx status code
func (o *UpdateDeliveryPipelineMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update delivery pipeline method not allowed response a status code equal to that given
func (o *UpdateDeliveryPipelineMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update delivery pipeline method not allowed response
func (o *UpdateDeliveryPipelineMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateDeliveryPipelineMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineMethodNotAllowed %s", 405, payload)
}

func (o *UpdateDeliveryPipelineMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineMethodNotAllowed %s", 405, payload)
}

func (o *UpdateDeliveryPipelineMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateDeliveryPipelineMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDeliveryPipelineInternalServerError creates a UpdateDeliveryPipelineInternalServerError with default headers values
func NewUpdateDeliveryPipelineInternalServerError() *UpdateDeliveryPipelineInternalServerError {
	return &UpdateDeliveryPipelineInternalServerError{}
}

/*
UpdateDeliveryPipelineInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateDeliveryPipelineInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update delivery pipeline internal server error response has a 2xx status code
func (o *UpdateDeliveryPipelineInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update delivery pipeline internal server error response has a 3xx status code
func (o *UpdateDeliveryPipelineInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update delivery pipeline internal server error response has a 4xx status code
func (o *UpdateDeliveryPipelineInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update delivery pipeline internal server error response has a 5xx status code
func (o *UpdateDeliveryPipelineInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update delivery pipeline internal server error response a status code equal to that given
func (o *UpdateDeliveryPipelineInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update delivery pipeline internal server error response
func (o *UpdateDeliveryPipelineInternalServerError) Code() int {
	return 500
}

func (o *UpdateDeliveryPipelineInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineInternalServerError %s", 500, payload)
}

func (o *UpdateDeliveryPipelineInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/delivery-pipeline/{stackName}][%d] updateDeliveryPipelineInternalServerError %s", 500, payload)
}

func (o *UpdateDeliveryPipelineInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateDeliveryPipelineInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
