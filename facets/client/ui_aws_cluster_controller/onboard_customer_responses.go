// Code generated by go-swagger; DO NOT EDIT.

package ui_aws_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// OnboardCustomerReader is a Reader for the OnboardCustomer structure.
type OnboardCustomerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OnboardCustomerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOnboardCustomerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOnboardCustomerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewOnboardCustomerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewOnboardCustomerMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewOnboardCustomerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/aws/clusters/onboard-customer] onboardCustomer", response, response.Code())
	}
}

// NewOnboardCustomerOK creates a OnboardCustomerOK with default headers values
func NewOnboardCustomerOK() *OnboardCustomerOK {
	return &OnboardCustomerOK{}
}

/*
OnboardCustomerOK describes a response with status code 200, with default header values.

OK
*/
type OnboardCustomerOK struct {
}

// IsSuccess returns true when this onboard customer o k response has a 2xx status code
func (o *OnboardCustomerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this onboard customer o k response has a 3xx status code
func (o *OnboardCustomerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this onboard customer o k response has a 4xx status code
func (o *OnboardCustomerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this onboard customer o k response has a 5xx status code
func (o *OnboardCustomerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this onboard customer o k response a status code equal to that given
func (o *OnboardCustomerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the onboard customer o k response
func (o *OnboardCustomerOK) Code() int {
	return 200
}

func (o *OnboardCustomerOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/aws/clusters/onboard-customer][%d] onboardCustomerOK", 200)
}

func (o *OnboardCustomerOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/aws/clusters/onboard-customer][%d] onboardCustomerOK", 200)
}

func (o *OnboardCustomerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOnboardCustomerBadRequest creates a OnboardCustomerBadRequest with default headers values
func NewOnboardCustomerBadRequest() *OnboardCustomerBadRequest {
	return &OnboardCustomerBadRequest{}
}

/*
OnboardCustomerBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type OnboardCustomerBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this onboard customer bad request response has a 2xx status code
func (o *OnboardCustomerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this onboard customer bad request response has a 3xx status code
func (o *OnboardCustomerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this onboard customer bad request response has a 4xx status code
func (o *OnboardCustomerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this onboard customer bad request response has a 5xx status code
func (o *OnboardCustomerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this onboard customer bad request response a status code equal to that given
func (o *OnboardCustomerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the onboard customer bad request response
func (o *OnboardCustomerBadRequest) Code() int {
	return 400
}

func (o *OnboardCustomerBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/aws/clusters/onboard-customer][%d] onboardCustomerBadRequest %s", 400, payload)
}

func (o *OnboardCustomerBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/aws/clusters/onboard-customer][%d] onboardCustomerBadRequest %s", 400, payload)
}

func (o *OnboardCustomerBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *OnboardCustomerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOnboardCustomerNotFound creates a OnboardCustomerNotFound with default headers values
func NewOnboardCustomerNotFound() *OnboardCustomerNotFound {
	return &OnboardCustomerNotFound{}
}

/*
OnboardCustomerNotFound describes a response with status code 404, with default header values.

Not Found
*/
type OnboardCustomerNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this onboard customer not found response has a 2xx status code
func (o *OnboardCustomerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this onboard customer not found response has a 3xx status code
func (o *OnboardCustomerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this onboard customer not found response has a 4xx status code
func (o *OnboardCustomerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this onboard customer not found response has a 5xx status code
func (o *OnboardCustomerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this onboard customer not found response a status code equal to that given
func (o *OnboardCustomerNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the onboard customer not found response
func (o *OnboardCustomerNotFound) Code() int {
	return 404
}

func (o *OnboardCustomerNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/aws/clusters/onboard-customer][%d] onboardCustomerNotFound %s", 404, payload)
}

func (o *OnboardCustomerNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/aws/clusters/onboard-customer][%d] onboardCustomerNotFound %s", 404, payload)
}

func (o *OnboardCustomerNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *OnboardCustomerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOnboardCustomerMethodNotAllowed creates a OnboardCustomerMethodNotAllowed with default headers values
func NewOnboardCustomerMethodNotAllowed() *OnboardCustomerMethodNotAllowed {
	return &OnboardCustomerMethodNotAllowed{}
}

/*
OnboardCustomerMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type OnboardCustomerMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this onboard customer method not allowed response has a 2xx status code
func (o *OnboardCustomerMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this onboard customer method not allowed response has a 3xx status code
func (o *OnboardCustomerMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this onboard customer method not allowed response has a 4xx status code
func (o *OnboardCustomerMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this onboard customer method not allowed response has a 5xx status code
func (o *OnboardCustomerMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this onboard customer method not allowed response a status code equal to that given
func (o *OnboardCustomerMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the onboard customer method not allowed response
func (o *OnboardCustomerMethodNotAllowed) Code() int {
	return 405
}

func (o *OnboardCustomerMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/aws/clusters/onboard-customer][%d] onboardCustomerMethodNotAllowed %s", 405, payload)
}

func (o *OnboardCustomerMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/aws/clusters/onboard-customer][%d] onboardCustomerMethodNotAllowed %s", 405, payload)
}

func (o *OnboardCustomerMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *OnboardCustomerMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOnboardCustomerInternalServerError creates a OnboardCustomerInternalServerError with default headers values
func NewOnboardCustomerInternalServerError() *OnboardCustomerInternalServerError {
	return &OnboardCustomerInternalServerError{}
}

/*
OnboardCustomerInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type OnboardCustomerInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this onboard customer internal server error response has a 2xx status code
func (o *OnboardCustomerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this onboard customer internal server error response has a 3xx status code
func (o *OnboardCustomerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this onboard customer internal server error response has a 4xx status code
func (o *OnboardCustomerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this onboard customer internal server error response has a 5xx status code
func (o *OnboardCustomerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this onboard customer internal server error response a status code equal to that given
func (o *OnboardCustomerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the onboard customer internal server error response
func (o *OnboardCustomerInternalServerError) Code() int {
	return 500
}

func (o *OnboardCustomerInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/aws/clusters/onboard-customer][%d] onboardCustomerInternalServerError %s", 500, payload)
}

func (o *OnboardCustomerInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/aws/clusters/onboard-customer][%d] onboardCustomerInternalServerError %s", 500, payload)
}

func (o *OnboardCustomerInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *OnboardCustomerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
