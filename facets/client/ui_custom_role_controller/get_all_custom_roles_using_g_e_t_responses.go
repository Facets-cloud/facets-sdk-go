// Code generated by go-swagger; DO NOT EDIT.

package ui_custom_role_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllCustomRolesUsingGETReader is a Reader for the GetAllCustomRolesUsingGET structure.
type GetAllCustomRolesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllCustomRolesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllCustomRolesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllCustomRolesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllCustomRolesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllCustomRolesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/custom-role] getAllCustomRolesUsingGET", response, response.Code())
	}
}

// NewGetAllCustomRolesUsingGETOK creates a GetAllCustomRolesUsingGETOK with default headers values
func NewGetAllCustomRolesUsingGETOK() *GetAllCustomRolesUsingGETOK {
	return &GetAllCustomRolesUsingGETOK{}
}

/*
GetAllCustomRolesUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllCustomRolesUsingGETOK struct {
	Payload []*models.RoleMapping
}

// IsSuccess returns true when this get all custom roles using g e t o k response has a 2xx status code
func (o *GetAllCustomRolesUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all custom roles using g e t o k response has a 3xx status code
func (o *GetAllCustomRolesUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all custom roles using g e t o k response has a 4xx status code
func (o *GetAllCustomRolesUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all custom roles using g e t o k response has a 5xx status code
func (o *GetAllCustomRolesUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all custom roles using g e t o k response a status code equal to that given
func (o *GetAllCustomRolesUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all custom roles using g e t o k response
func (o *GetAllCustomRolesUsingGETOK) Code() int {
	return 200
}

func (o *GetAllCustomRolesUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role][%d] getAllCustomRolesUsingGETOK %s", 200, payload)
}

func (o *GetAllCustomRolesUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role][%d] getAllCustomRolesUsingGETOK %s", 200, payload)
}

func (o *GetAllCustomRolesUsingGETOK) GetPayload() []*models.RoleMapping {
	return o.Payload
}

func (o *GetAllCustomRolesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllCustomRolesUsingGETUnauthorized creates a GetAllCustomRolesUsingGETUnauthorized with default headers values
func NewGetAllCustomRolesUsingGETUnauthorized() *GetAllCustomRolesUsingGETUnauthorized {
	return &GetAllCustomRolesUsingGETUnauthorized{}
}

/*
GetAllCustomRolesUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllCustomRolesUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all custom roles using g e t unauthorized response has a 2xx status code
func (o *GetAllCustomRolesUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all custom roles using g e t unauthorized response has a 3xx status code
func (o *GetAllCustomRolesUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all custom roles using g e t unauthorized response has a 4xx status code
func (o *GetAllCustomRolesUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all custom roles using g e t unauthorized response has a 5xx status code
func (o *GetAllCustomRolesUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all custom roles using g e t unauthorized response a status code equal to that given
func (o *GetAllCustomRolesUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all custom roles using g e t unauthorized response
func (o *GetAllCustomRolesUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllCustomRolesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role][%d] getAllCustomRolesUsingGETUnauthorized", 401)
}

func (o *GetAllCustomRolesUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role][%d] getAllCustomRolesUsingGETUnauthorized", 401)
}

func (o *GetAllCustomRolesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllCustomRolesUsingGETForbidden creates a GetAllCustomRolesUsingGETForbidden with default headers values
func NewGetAllCustomRolesUsingGETForbidden() *GetAllCustomRolesUsingGETForbidden {
	return &GetAllCustomRolesUsingGETForbidden{}
}

/*
GetAllCustomRolesUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllCustomRolesUsingGETForbidden struct {
}

// IsSuccess returns true when this get all custom roles using g e t forbidden response has a 2xx status code
func (o *GetAllCustomRolesUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all custom roles using g e t forbidden response has a 3xx status code
func (o *GetAllCustomRolesUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all custom roles using g e t forbidden response has a 4xx status code
func (o *GetAllCustomRolesUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all custom roles using g e t forbidden response has a 5xx status code
func (o *GetAllCustomRolesUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all custom roles using g e t forbidden response a status code equal to that given
func (o *GetAllCustomRolesUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all custom roles using g e t forbidden response
func (o *GetAllCustomRolesUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllCustomRolesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role][%d] getAllCustomRolesUsingGETForbidden", 403)
}

func (o *GetAllCustomRolesUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role][%d] getAllCustomRolesUsingGETForbidden", 403)
}

func (o *GetAllCustomRolesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllCustomRolesUsingGETNotFound creates a GetAllCustomRolesUsingGETNotFound with default headers values
func NewGetAllCustomRolesUsingGETNotFound() *GetAllCustomRolesUsingGETNotFound {
	return &GetAllCustomRolesUsingGETNotFound{}
}

/*
GetAllCustomRolesUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllCustomRolesUsingGETNotFound struct {
}

// IsSuccess returns true when this get all custom roles using g e t not found response has a 2xx status code
func (o *GetAllCustomRolesUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all custom roles using g e t not found response has a 3xx status code
func (o *GetAllCustomRolesUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all custom roles using g e t not found response has a 4xx status code
func (o *GetAllCustomRolesUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all custom roles using g e t not found response has a 5xx status code
func (o *GetAllCustomRolesUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all custom roles using g e t not found response a status code equal to that given
func (o *GetAllCustomRolesUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all custom roles using g e t not found response
func (o *GetAllCustomRolesUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllCustomRolesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role][%d] getAllCustomRolesUsingGETNotFound", 404)
}

func (o *GetAllCustomRolesUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role][%d] getAllCustomRolesUsingGETNotFound", 404)
}

func (o *GetAllCustomRolesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
