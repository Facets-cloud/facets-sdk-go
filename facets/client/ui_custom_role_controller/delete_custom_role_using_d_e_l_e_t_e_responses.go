// Code generated by go-swagger; DO NOT EDIT.

package ui_custom_role_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteCustomRoleUsingDELETEReader is a Reader for the DeleteCustomRoleUsingDELETE structure.
type DeleteCustomRoleUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteCustomRoleUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteCustomRoleUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteCustomRoleUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteCustomRoleUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteCustomRoleUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/custom-role/{roleName}] deleteCustomRoleUsingDELETE", response, response.Code())
	}
}

// NewDeleteCustomRoleUsingDELETEOK creates a DeleteCustomRoleUsingDELETEOK with default headers values
func NewDeleteCustomRoleUsingDELETEOK() *DeleteCustomRoleUsingDELETEOK {
	return &DeleteCustomRoleUsingDELETEOK{}
}

/*
DeleteCustomRoleUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteCustomRoleUsingDELETEOK struct {
}

// IsSuccess returns true when this delete custom role using d e l e t e o k response has a 2xx status code
func (o *DeleteCustomRoleUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete custom role using d e l e t e o k response has a 3xx status code
func (o *DeleteCustomRoleUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete custom role using d e l e t e o k response has a 4xx status code
func (o *DeleteCustomRoleUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete custom role using d e l e t e o k response has a 5xx status code
func (o *DeleteCustomRoleUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete custom role using d e l e t e o k response a status code equal to that given
func (o *DeleteCustomRoleUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete custom role using d e l e t e o k response
func (o *DeleteCustomRoleUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteCustomRoleUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/custom-role/{roleName}][%d] deleteCustomRoleUsingDELETEOK", 200)
}

func (o *DeleteCustomRoleUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/custom-role/{roleName}][%d] deleteCustomRoleUsingDELETEOK", 200)
}

func (o *DeleteCustomRoleUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteCustomRoleUsingDELETENoContent creates a DeleteCustomRoleUsingDELETENoContent with default headers values
func NewDeleteCustomRoleUsingDELETENoContent() *DeleteCustomRoleUsingDELETENoContent {
	return &DeleteCustomRoleUsingDELETENoContent{}
}

/*
DeleteCustomRoleUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteCustomRoleUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete custom role using d e l e t e no content response has a 2xx status code
func (o *DeleteCustomRoleUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete custom role using d e l e t e no content response has a 3xx status code
func (o *DeleteCustomRoleUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete custom role using d e l e t e no content response has a 4xx status code
func (o *DeleteCustomRoleUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete custom role using d e l e t e no content response has a 5xx status code
func (o *DeleteCustomRoleUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete custom role using d e l e t e no content response a status code equal to that given
func (o *DeleteCustomRoleUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete custom role using d e l e t e no content response
func (o *DeleteCustomRoleUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteCustomRoleUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/custom-role/{roleName}][%d] deleteCustomRoleUsingDELETENoContent", 204)
}

func (o *DeleteCustomRoleUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/custom-role/{roleName}][%d] deleteCustomRoleUsingDELETENoContent", 204)
}

func (o *DeleteCustomRoleUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteCustomRoleUsingDELETEUnauthorized creates a DeleteCustomRoleUsingDELETEUnauthorized with default headers values
func NewDeleteCustomRoleUsingDELETEUnauthorized() *DeleteCustomRoleUsingDELETEUnauthorized {
	return &DeleteCustomRoleUsingDELETEUnauthorized{}
}

/*
DeleteCustomRoleUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteCustomRoleUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete custom role using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteCustomRoleUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete custom role using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteCustomRoleUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete custom role using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteCustomRoleUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete custom role using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteCustomRoleUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete custom role using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteCustomRoleUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete custom role using d e l e t e unauthorized response
func (o *DeleteCustomRoleUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteCustomRoleUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/custom-role/{roleName}][%d] deleteCustomRoleUsingDELETEUnauthorized", 401)
}

func (o *DeleteCustomRoleUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/custom-role/{roleName}][%d] deleteCustomRoleUsingDELETEUnauthorized", 401)
}

func (o *DeleteCustomRoleUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteCustomRoleUsingDELETEForbidden creates a DeleteCustomRoleUsingDELETEForbidden with default headers values
func NewDeleteCustomRoleUsingDELETEForbidden() *DeleteCustomRoleUsingDELETEForbidden {
	return &DeleteCustomRoleUsingDELETEForbidden{}
}

/*
DeleteCustomRoleUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteCustomRoleUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete custom role using d e l e t e forbidden response has a 2xx status code
func (o *DeleteCustomRoleUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete custom role using d e l e t e forbidden response has a 3xx status code
func (o *DeleteCustomRoleUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete custom role using d e l e t e forbidden response has a 4xx status code
func (o *DeleteCustomRoleUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete custom role using d e l e t e forbidden response has a 5xx status code
func (o *DeleteCustomRoleUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete custom role using d e l e t e forbidden response a status code equal to that given
func (o *DeleteCustomRoleUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete custom role using d e l e t e forbidden response
func (o *DeleteCustomRoleUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteCustomRoleUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/custom-role/{roleName}][%d] deleteCustomRoleUsingDELETEForbidden", 403)
}

func (o *DeleteCustomRoleUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/custom-role/{roleName}][%d] deleteCustomRoleUsingDELETEForbidden", 403)
}

func (o *DeleteCustomRoleUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
