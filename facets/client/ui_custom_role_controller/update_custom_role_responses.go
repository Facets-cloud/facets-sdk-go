// Code generated by go-swagger; DO NOT EDIT.

package ui_custom_role_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateCustomRoleReader is a Reader for the UpdateCustomRole structure.
type UpdateCustomRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCustomRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCustomRoleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCustomRoleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCustomRoleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateCustomRoleMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateCustomRoleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/custom-role/{roleName}] updateCustomRole", response, response.Code())
	}
}

// NewUpdateCustomRoleOK creates a UpdateCustomRoleOK with default headers values
func NewUpdateCustomRoleOK() *UpdateCustomRoleOK {
	return &UpdateCustomRoleOK{}
}

/*
UpdateCustomRoleOK describes a response with status code 200, with default header values.

OK
*/
type UpdateCustomRoleOK struct {
	Payload *models.RoleMapping
}

// IsSuccess returns true when this update custom role o k response has a 2xx status code
func (o *UpdateCustomRoleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update custom role o k response has a 3xx status code
func (o *UpdateCustomRoleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update custom role o k response has a 4xx status code
func (o *UpdateCustomRoleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update custom role o k response has a 5xx status code
func (o *UpdateCustomRoleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update custom role o k response a status code equal to that given
func (o *UpdateCustomRoleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update custom role o k response
func (o *UpdateCustomRoleOK) Code() int {
	return 200
}

func (o *UpdateCustomRoleOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleOK %s", 200, payload)
}

func (o *UpdateCustomRoleOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleOK %s", 200, payload)
}

func (o *UpdateCustomRoleOK) GetPayload() *models.RoleMapping {
	return o.Payload
}

func (o *UpdateCustomRoleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RoleMapping)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCustomRoleBadRequest creates a UpdateCustomRoleBadRequest with default headers values
func NewUpdateCustomRoleBadRequest() *UpdateCustomRoleBadRequest {
	return &UpdateCustomRoleBadRequest{}
}

/*
UpdateCustomRoleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateCustomRoleBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update custom role bad request response has a 2xx status code
func (o *UpdateCustomRoleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update custom role bad request response has a 3xx status code
func (o *UpdateCustomRoleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update custom role bad request response has a 4xx status code
func (o *UpdateCustomRoleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update custom role bad request response has a 5xx status code
func (o *UpdateCustomRoleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update custom role bad request response a status code equal to that given
func (o *UpdateCustomRoleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update custom role bad request response
func (o *UpdateCustomRoleBadRequest) Code() int {
	return 400
}

func (o *UpdateCustomRoleBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleBadRequest %s", 400, payload)
}

func (o *UpdateCustomRoleBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleBadRequest %s", 400, payload)
}

func (o *UpdateCustomRoleBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateCustomRoleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCustomRoleNotFound creates a UpdateCustomRoleNotFound with default headers values
func NewUpdateCustomRoleNotFound() *UpdateCustomRoleNotFound {
	return &UpdateCustomRoleNotFound{}
}

/*
UpdateCustomRoleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateCustomRoleNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update custom role not found response has a 2xx status code
func (o *UpdateCustomRoleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update custom role not found response has a 3xx status code
func (o *UpdateCustomRoleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update custom role not found response has a 4xx status code
func (o *UpdateCustomRoleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update custom role not found response has a 5xx status code
func (o *UpdateCustomRoleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update custom role not found response a status code equal to that given
func (o *UpdateCustomRoleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update custom role not found response
func (o *UpdateCustomRoleNotFound) Code() int {
	return 404
}

func (o *UpdateCustomRoleNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleNotFound %s", 404, payload)
}

func (o *UpdateCustomRoleNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleNotFound %s", 404, payload)
}

func (o *UpdateCustomRoleNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateCustomRoleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCustomRoleMethodNotAllowed creates a UpdateCustomRoleMethodNotAllowed with default headers values
func NewUpdateCustomRoleMethodNotAllowed() *UpdateCustomRoleMethodNotAllowed {
	return &UpdateCustomRoleMethodNotAllowed{}
}

/*
UpdateCustomRoleMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateCustomRoleMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update custom role method not allowed response has a 2xx status code
func (o *UpdateCustomRoleMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update custom role method not allowed response has a 3xx status code
func (o *UpdateCustomRoleMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update custom role method not allowed response has a 4xx status code
func (o *UpdateCustomRoleMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update custom role method not allowed response has a 5xx status code
func (o *UpdateCustomRoleMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update custom role method not allowed response a status code equal to that given
func (o *UpdateCustomRoleMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update custom role method not allowed response
func (o *UpdateCustomRoleMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateCustomRoleMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleMethodNotAllowed %s", 405, payload)
}

func (o *UpdateCustomRoleMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleMethodNotAllowed %s", 405, payload)
}

func (o *UpdateCustomRoleMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateCustomRoleMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCustomRoleInternalServerError creates a UpdateCustomRoleInternalServerError with default headers values
func NewUpdateCustomRoleInternalServerError() *UpdateCustomRoleInternalServerError {
	return &UpdateCustomRoleInternalServerError{}
}

/*
UpdateCustomRoleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateCustomRoleInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update custom role internal server error response has a 2xx status code
func (o *UpdateCustomRoleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update custom role internal server error response has a 3xx status code
func (o *UpdateCustomRoleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update custom role internal server error response has a 4xx status code
func (o *UpdateCustomRoleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update custom role internal server error response has a 5xx status code
func (o *UpdateCustomRoleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update custom role internal server error response a status code equal to that given
func (o *UpdateCustomRoleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update custom role internal server error response
func (o *UpdateCustomRoleInternalServerError) Code() int {
	return 500
}

func (o *UpdateCustomRoleInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleInternalServerError %s", 500, payload)
}

func (o *UpdateCustomRoleInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleInternalServerError %s", 500, payload)
}

func (o *UpdateCustomRoleInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateCustomRoleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
