// Code generated by go-swagger; DO NOT EDIT.

package ui_custom_role_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllRolesReader is a Reader for the GetAllRoles structure.
type GetAllRolesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllRolesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllRolesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllRolesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllRolesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAllRolesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllRolesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/custom-role/roles] getAllRoles", response, response.Code())
	}
}

// NewGetAllRolesOK creates a GetAllRolesOK with default headers values
func NewGetAllRolesOK() *GetAllRolesOK {
	return &GetAllRolesOK{}
}

/*
GetAllRolesOK describes a response with status code 200, with default header values.

OK
*/
type GetAllRolesOK struct {
	Payload []*models.RoleMapping
}

// IsSuccess returns true when this get all roles o k response has a 2xx status code
func (o *GetAllRolesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all roles o k response has a 3xx status code
func (o *GetAllRolesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all roles o k response has a 4xx status code
func (o *GetAllRolesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all roles o k response has a 5xx status code
func (o *GetAllRolesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all roles o k response a status code equal to that given
func (o *GetAllRolesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all roles o k response
func (o *GetAllRolesOK) Code() int {
	return 200
}

func (o *GetAllRolesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role/roles][%d] getAllRolesOK %s", 200, payload)
}

func (o *GetAllRolesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role/roles][%d] getAllRolesOK %s", 200, payload)
}

func (o *GetAllRolesOK) GetPayload() []*models.RoleMapping {
	return o.Payload
}

func (o *GetAllRolesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRolesBadRequest creates a GetAllRolesBadRequest with default headers values
func NewGetAllRolesBadRequest() *GetAllRolesBadRequest {
	return &GetAllRolesBadRequest{}
}

/*
GetAllRolesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAllRolesBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all roles bad request response has a 2xx status code
func (o *GetAllRolesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all roles bad request response has a 3xx status code
func (o *GetAllRolesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all roles bad request response has a 4xx status code
func (o *GetAllRolesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all roles bad request response has a 5xx status code
func (o *GetAllRolesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all roles bad request response a status code equal to that given
func (o *GetAllRolesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all roles bad request response
func (o *GetAllRolesBadRequest) Code() int {
	return 400
}

func (o *GetAllRolesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role/roles][%d] getAllRolesBadRequest %s", 400, payload)
}

func (o *GetAllRolesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role/roles][%d] getAllRolesBadRequest %s", 400, payload)
}

func (o *GetAllRolesBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllRolesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRolesNotFound creates a GetAllRolesNotFound with default headers values
func NewGetAllRolesNotFound() *GetAllRolesNotFound {
	return &GetAllRolesNotFound{}
}

/*
GetAllRolesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllRolesNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all roles not found response has a 2xx status code
func (o *GetAllRolesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all roles not found response has a 3xx status code
func (o *GetAllRolesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all roles not found response has a 4xx status code
func (o *GetAllRolesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all roles not found response has a 5xx status code
func (o *GetAllRolesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all roles not found response a status code equal to that given
func (o *GetAllRolesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all roles not found response
func (o *GetAllRolesNotFound) Code() int {
	return 404
}

func (o *GetAllRolesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role/roles][%d] getAllRolesNotFound %s", 404, payload)
}

func (o *GetAllRolesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role/roles][%d] getAllRolesNotFound %s", 404, payload)
}

func (o *GetAllRolesNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllRolesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRolesMethodNotAllowed creates a GetAllRolesMethodNotAllowed with default headers values
func NewGetAllRolesMethodNotAllowed() *GetAllRolesMethodNotAllowed {
	return &GetAllRolesMethodNotAllowed{}
}

/*
GetAllRolesMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAllRolesMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all roles method not allowed response has a 2xx status code
func (o *GetAllRolesMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all roles method not allowed response has a 3xx status code
func (o *GetAllRolesMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all roles method not allowed response has a 4xx status code
func (o *GetAllRolesMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all roles method not allowed response has a 5xx status code
func (o *GetAllRolesMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get all roles method not allowed response a status code equal to that given
func (o *GetAllRolesMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get all roles method not allowed response
func (o *GetAllRolesMethodNotAllowed) Code() int {
	return 405
}

func (o *GetAllRolesMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role/roles][%d] getAllRolesMethodNotAllowed %s", 405, payload)
}

func (o *GetAllRolesMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role/roles][%d] getAllRolesMethodNotAllowed %s", 405, payload)
}

func (o *GetAllRolesMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllRolesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRolesInternalServerError creates a GetAllRolesInternalServerError with default headers values
func NewGetAllRolesInternalServerError() *GetAllRolesInternalServerError {
	return &GetAllRolesInternalServerError{}
}

/*
GetAllRolesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAllRolesInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all roles internal server error response has a 2xx status code
func (o *GetAllRolesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all roles internal server error response has a 3xx status code
func (o *GetAllRolesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all roles internal server error response has a 4xx status code
func (o *GetAllRolesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all roles internal server error response has a 5xx status code
func (o *GetAllRolesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all roles internal server error response a status code equal to that given
func (o *GetAllRolesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all roles internal server error response
func (o *GetAllRolesInternalServerError) Code() int {
	return 500
}

func (o *GetAllRolesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role/roles][%d] getAllRolesInternalServerError %s", 500, payload)
}

func (o *GetAllRolesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/custom-role/roles][%d] getAllRolesInternalServerError %s", 500, payload)
}

func (o *GetAllRolesInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllRolesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
