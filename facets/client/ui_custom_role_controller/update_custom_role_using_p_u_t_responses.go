// Code generated by go-swagger; DO NOT EDIT.

package ui_custom_role_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateCustomRoleUsingPUTReader is a Reader for the UpdateCustomRoleUsingPUT structure.
type UpdateCustomRoleUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCustomRoleUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCustomRoleUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateCustomRoleUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateCustomRoleUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateCustomRoleUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCustomRoleUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/custom-role/{roleName}] updateCustomRoleUsingPUT", response, response.Code())
	}
}

// NewUpdateCustomRoleUsingPUTOK creates a UpdateCustomRoleUsingPUTOK with default headers values
func NewUpdateCustomRoleUsingPUTOK() *UpdateCustomRoleUsingPUTOK {
	return &UpdateCustomRoleUsingPUTOK{}
}

/*
UpdateCustomRoleUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateCustomRoleUsingPUTOK struct {
	Payload *models.RoleMapping
}

// IsSuccess returns true when this update custom role using p u t o k response has a 2xx status code
func (o *UpdateCustomRoleUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update custom role using p u t o k response has a 3xx status code
func (o *UpdateCustomRoleUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update custom role using p u t o k response has a 4xx status code
func (o *UpdateCustomRoleUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update custom role using p u t o k response has a 5xx status code
func (o *UpdateCustomRoleUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update custom role using p u t o k response a status code equal to that given
func (o *UpdateCustomRoleUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update custom role using p u t o k response
func (o *UpdateCustomRoleUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateCustomRoleUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleUsingPUTOK %s", 200, payload)
}

func (o *UpdateCustomRoleUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleUsingPUTOK %s", 200, payload)
}

func (o *UpdateCustomRoleUsingPUTOK) GetPayload() *models.RoleMapping {
	return o.Payload
}

func (o *UpdateCustomRoleUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RoleMapping)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCustomRoleUsingPUTCreated creates a UpdateCustomRoleUsingPUTCreated with default headers values
func NewUpdateCustomRoleUsingPUTCreated() *UpdateCustomRoleUsingPUTCreated {
	return &UpdateCustomRoleUsingPUTCreated{}
}

/*
UpdateCustomRoleUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateCustomRoleUsingPUTCreated struct {
}

// IsSuccess returns true when this update custom role using p u t created response has a 2xx status code
func (o *UpdateCustomRoleUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update custom role using p u t created response has a 3xx status code
func (o *UpdateCustomRoleUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update custom role using p u t created response has a 4xx status code
func (o *UpdateCustomRoleUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update custom role using p u t created response has a 5xx status code
func (o *UpdateCustomRoleUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update custom role using p u t created response a status code equal to that given
func (o *UpdateCustomRoleUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update custom role using p u t created response
func (o *UpdateCustomRoleUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateCustomRoleUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleUsingPUTCreated", 201)
}

func (o *UpdateCustomRoleUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleUsingPUTCreated", 201)
}

func (o *UpdateCustomRoleUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCustomRoleUsingPUTUnauthorized creates a UpdateCustomRoleUsingPUTUnauthorized with default headers values
func NewUpdateCustomRoleUsingPUTUnauthorized() *UpdateCustomRoleUsingPUTUnauthorized {
	return &UpdateCustomRoleUsingPUTUnauthorized{}
}

/*
UpdateCustomRoleUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateCustomRoleUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update custom role using p u t unauthorized response has a 2xx status code
func (o *UpdateCustomRoleUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update custom role using p u t unauthorized response has a 3xx status code
func (o *UpdateCustomRoleUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update custom role using p u t unauthorized response has a 4xx status code
func (o *UpdateCustomRoleUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update custom role using p u t unauthorized response has a 5xx status code
func (o *UpdateCustomRoleUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update custom role using p u t unauthorized response a status code equal to that given
func (o *UpdateCustomRoleUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update custom role using p u t unauthorized response
func (o *UpdateCustomRoleUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateCustomRoleUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleUsingPUTUnauthorized", 401)
}

func (o *UpdateCustomRoleUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleUsingPUTUnauthorized", 401)
}

func (o *UpdateCustomRoleUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCustomRoleUsingPUTForbidden creates a UpdateCustomRoleUsingPUTForbidden with default headers values
func NewUpdateCustomRoleUsingPUTForbidden() *UpdateCustomRoleUsingPUTForbidden {
	return &UpdateCustomRoleUsingPUTForbidden{}
}

/*
UpdateCustomRoleUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateCustomRoleUsingPUTForbidden struct {
}

// IsSuccess returns true when this update custom role using p u t forbidden response has a 2xx status code
func (o *UpdateCustomRoleUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update custom role using p u t forbidden response has a 3xx status code
func (o *UpdateCustomRoleUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update custom role using p u t forbidden response has a 4xx status code
func (o *UpdateCustomRoleUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update custom role using p u t forbidden response has a 5xx status code
func (o *UpdateCustomRoleUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update custom role using p u t forbidden response a status code equal to that given
func (o *UpdateCustomRoleUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update custom role using p u t forbidden response
func (o *UpdateCustomRoleUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateCustomRoleUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleUsingPUTForbidden", 403)
}

func (o *UpdateCustomRoleUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleUsingPUTForbidden", 403)
}

func (o *UpdateCustomRoleUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCustomRoleUsingPUTNotFound creates a UpdateCustomRoleUsingPUTNotFound with default headers values
func NewUpdateCustomRoleUsingPUTNotFound() *UpdateCustomRoleUsingPUTNotFound {
	return &UpdateCustomRoleUsingPUTNotFound{}
}

/*
UpdateCustomRoleUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateCustomRoleUsingPUTNotFound struct {
}

// IsSuccess returns true when this update custom role using p u t not found response has a 2xx status code
func (o *UpdateCustomRoleUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update custom role using p u t not found response has a 3xx status code
func (o *UpdateCustomRoleUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update custom role using p u t not found response has a 4xx status code
func (o *UpdateCustomRoleUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update custom role using p u t not found response has a 5xx status code
func (o *UpdateCustomRoleUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update custom role using p u t not found response a status code equal to that given
func (o *UpdateCustomRoleUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update custom role using p u t not found response
func (o *UpdateCustomRoleUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateCustomRoleUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleUsingPUTNotFound", 404)
}

func (o *UpdateCustomRoleUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/custom-role/{roleName}][%d] updateCustomRoleUsingPUTNotFound", 404)
}

func (o *UpdateCustomRoleUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
