// Code generated by go-swagger; DO NOT EDIT.

package ui_tf_module_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllModulesUsingGETReader is a Reader for the GetAllModulesUsingGET structure.
type GetAllModulesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllModulesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllModulesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllModulesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllModulesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllModulesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/modules] getAllModulesUsingGET", response, response.Code())
	}
}

// NewGetAllModulesUsingGETOK creates a GetAllModulesUsingGETOK with default headers values
func NewGetAllModulesUsingGETOK() *GetAllModulesUsingGETOK {
	return &GetAllModulesUsingGETOK{}
}

/*
GetAllModulesUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllModulesUsingGETOK struct {
	Payload []*models.TFModuleListResponseDTO
}

// IsSuccess returns true when this get all modules using g e t o k response has a 2xx status code
func (o *GetAllModulesUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all modules using g e t o k response has a 3xx status code
func (o *GetAllModulesUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all modules using g e t o k response has a 4xx status code
func (o *GetAllModulesUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all modules using g e t o k response has a 5xx status code
func (o *GetAllModulesUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all modules using g e t o k response a status code equal to that given
func (o *GetAllModulesUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all modules using g e t o k response
func (o *GetAllModulesUsingGETOK) Code() int {
	return 200
}

func (o *GetAllModulesUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesUsingGETOK %s", 200, payload)
}

func (o *GetAllModulesUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesUsingGETOK %s", 200, payload)
}

func (o *GetAllModulesUsingGETOK) GetPayload() []*models.TFModuleListResponseDTO {
	return o.Payload
}

func (o *GetAllModulesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllModulesUsingGETUnauthorized creates a GetAllModulesUsingGETUnauthorized with default headers values
func NewGetAllModulesUsingGETUnauthorized() *GetAllModulesUsingGETUnauthorized {
	return &GetAllModulesUsingGETUnauthorized{}
}

/*
GetAllModulesUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllModulesUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all modules using g e t unauthorized response has a 2xx status code
func (o *GetAllModulesUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all modules using g e t unauthorized response has a 3xx status code
func (o *GetAllModulesUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all modules using g e t unauthorized response has a 4xx status code
func (o *GetAllModulesUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all modules using g e t unauthorized response has a 5xx status code
func (o *GetAllModulesUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all modules using g e t unauthorized response a status code equal to that given
func (o *GetAllModulesUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all modules using g e t unauthorized response
func (o *GetAllModulesUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllModulesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesUsingGETUnauthorized", 401)
}

func (o *GetAllModulesUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesUsingGETUnauthorized", 401)
}

func (o *GetAllModulesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllModulesUsingGETForbidden creates a GetAllModulesUsingGETForbidden with default headers values
func NewGetAllModulesUsingGETForbidden() *GetAllModulesUsingGETForbidden {
	return &GetAllModulesUsingGETForbidden{}
}

/*
GetAllModulesUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllModulesUsingGETForbidden struct {
}

// IsSuccess returns true when this get all modules using g e t forbidden response has a 2xx status code
func (o *GetAllModulesUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all modules using g e t forbidden response has a 3xx status code
func (o *GetAllModulesUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all modules using g e t forbidden response has a 4xx status code
func (o *GetAllModulesUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all modules using g e t forbidden response has a 5xx status code
func (o *GetAllModulesUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all modules using g e t forbidden response a status code equal to that given
func (o *GetAllModulesUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all modules using g e t forbidden response
func (o *GetAllModulesUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllModulesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesUsingGETForbidden", 403)
}

func (o *GetAllModulesUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesUsingGETForbidden", 403)
}

func (o *GetAllModulesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllModulesUsingGETNotFound creates a GetAllModulesUsingGETNotFound with default headers values
func NewGetAllModulesUsingGETNotFound() *GetAllModulesUsingGETNotFound {
	return &GetAllModulesUsingGETNotFound{}
}

/*
GetAllModulesUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllModulesUsingGETNotFound struct {
}

// IsSuccess returns true when this get all modules using g e t not found response has a 2xx status code
func (o *GetAllModulesUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all modules using g e t not found response has a 3xx status code
func (o *GetAllModulesUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all modules using g e t not found response has a 4xx status code
func (o *GetAllModulesUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all modules using g e t not found response has a 5xx status code
func (o *GetAllModulesUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all modules using g e t not found response a status code equal to that given
func (o *GetAllModulesUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all modules using g e t not found response
func (o *GetAllModulesUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllModulesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesUsingGETNotFound", 404)
}

func (o *GetAllModulesUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesUsingGETNotFound", 404)
}

func (o *GetAllModulesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
