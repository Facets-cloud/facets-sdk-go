// Code generated by go-swagger; DO NOT EDIT.

package ui_tf_module_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetModuleForIFVAndStackUsingGETReader is a Reader for the GetModuleForIFVAndStackUsingGET structure.
type GetModuleForIFVAndStackUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetModuleForIFVAndStackUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetModuleForIFVAndStackUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetModuleForIFVAndStackUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetModuleForIFVAndStackUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetModuleForIFVAndStackUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module] getModuleForIFVAndStackUsingGET", response, response.Code())
	}
}

// NewGetModuleForIFVAndStackUsingGETOK creates a GetModuleForIFVAndStackUsingGETOK with default headers values
func NewGetModuleForIFVAndStackUsingGETOK() *GetModuleForIFVAndStackUsingGETOK {
	return &GetModuleForIFVAndStackUsingGETOK{}
}

/*
GetModuleForIFVAndStackUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetModuleForIFVAndStackUsingGETOK struct {
	Payload *models.TFModuleResponseDTO
}

// IsSuccess returns true when this get module for i f v and stack using g e t o k response has a 2xx status code
func (o *GetModuleForIFVAndStackUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get module for i f v and stack using g e t o k response has a 3xx status code
func (o *GetModuleForIFVAndStackUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get module for i f v and stack using g e t o k response has a 4xx status code
func (o *GetModuleForIFVAndStackUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get module for i f v and stack using g e t o k response has a 5xx status code
func (o *GetModuleForIFVAndStackUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get module for i f v and stack using g e t o k response a status code equal to that given
func (o *GetModuleForIFVAndStackUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get module for i f v and stack using g e t o k response
func (o *GetModuleForIFVAndStackUsingGETOK) Code() int {
	return 200
}

func (o *GetModuleForIFVAndStackUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackUsingGETOK %s", 200, payload)
}

func (o *GetModuleForIFVAndStackUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackUsingGETOK %s", 200, payload)
}

func (o *GetModuleForIFVAndStackUsingGETOK) GetPayload() *models.TFModuleResponseDTO {
	return o.Payload
}

func (o *GetModuleForIFVAndStackUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TFModuleResponseDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetModuleForIFVAndStackUsingGETUnauthorized creates a GetModuleForIFVAndStackUsingGETUnauthorized with default headers values
func NewGetModuleForIFVAndStackUsingGETUnauthorized() *GetModuleForIFVAndStackUsingGETUnauthorized {
	return &GetModuleForIFVAndStackUsingGETUnauthorized{}
}

/*
GetModuleForIFVAndStackUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetModuleForIFVAndStackUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get module for i f v and stack using g e t unauthorized response has a 2xx status code
func (o *GetModuleForIFVAndStackUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get module for i f v and stack using g e t unauthorized response has a 3xx status code
func (o *GetModuleForIFVAndStackUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get module for i f v and stack using g e t unauthorized response has a 4xx status code
func (o *GetModuleForIFVAndStackUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get module for i f v and stack using g e t unauthorized response has a 5xx status code
func (o *GetModuleForIFVAndStackUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get module for i f v and stack using g e t unauthorized response a status code equal to that given
func (o *GetModuleForIFVAndStackUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get module for i f v and stack using g e t unauthorized response
func (o *GetModuleForIFVAndStackUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetModuleForIFVAndStackUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackUsingGETUnauthorized", 401)
}

func (o *GetModuleForIFVAndStackUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackUsingGETUnauthorized", 401)
}

func (o *GetModuleForIFVAndStackUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetModuleForIFVAndStackUsingGETForbidden creates a GetModuleForIFVAndStackUsingGETForbidden with default headers values
func NewGetModuleForIFVAndStackUsingGETForbidden() *GetModuleForIFVAndStackUsingGETForbidden {
	return &GetModuleForIFVAndStackUsingGETForbidden{}
}

/*
GetModuleForIFVAndStackUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetModuleForIFVAndStackUsingGETForbidden struct {
}

// IsSuccess returns true when this get module for i f v and stack using g e t forbidden response has a 2xx status code
func (o *GetModuleForIFVAndStackUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get module for i f v and stack using g e t forbidden response has a 3xx status code
func (o *GetModuleForIFVAndStackUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get module for i f v and stack using g e t forbidden response has a 4xx status code
func (o *GetModuleForIFVAndStackUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get module for i f v and stack using g e t forbidden response has a 5xx status code
func (o *GetModuleForIFVAndStackUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get module for i f v and stack using g e t forbidden response a status code equal to that given
func (o *GetModuleForIFVAndStackUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get module for i f v and stack using g e t forbidden response
func (o *GetModuleForIFVAndStackUsingGETForbidden) Code() int {
	return 403
}

func (o *GetModuleForIFVAndStackUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackUsingGETForbidden", 403)
}

func (o *GetModuleForIFVAndStackUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackUsingGETForbidden", 403)
}

func (o *GetModuleForIFVAndStackUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetModuleForIFVAndStackUsingGETNotFound creates a GetModuleForIFVAndStackUsingGETNotFound with default headers values
func NewGetModuleForIFVAndStackUsingGETNotFound() *GetModuleForIFVAndStackUsingGETNotFound {
	return &GetModuleForIFVAndStackUsingGETNotFound{}
}

/*
GetModuleForIFVAndStackUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetModuleForIFVAndStackUsingGETNotFound struct {
}

// IsSuccess returns true when this get module for i f v and stack using g e t not found response has a 2xx status code
func (o *GetModuleForIFVAndStackUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get module for i f v and stack using g e t not found response has a 3xx status code
func (o *GetModuleForIFVAndStackUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get module for i f v and stack using g e t not found response has a 4xx status code
func (o *GetModuleForIFVAndStackUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get module for i f v and stack using g e t not found response has a 5xx status code
func (o *GetModuleForIFVAndStackUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get module for i f v and stack using g e t not found response a status code equal to that given
func (o *GetModuleForIFVAndStackUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get module for i f v and stack using g e t not found response
func (o *GetModuleForIFVAndStackUsingGETNotFound) Code() int {
	return 404
}

func (o *GetModuleForIFVAndStackUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackUsingGETNotFound", 404)
}

func (o *GetModuleForIFVAndStackUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackUsingGETNotFound", 404)
}

func (o *GetModuleForIFVAndStackUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
