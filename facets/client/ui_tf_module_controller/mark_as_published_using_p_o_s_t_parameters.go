// Code generated by go-swagger; DO NOT EDIT.

package ui_tf_module_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewMarkAsPublishedUsingPOSTParams creates a new MarkAsPublishedUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewMarkAsPublishedUsingPOSTParams() *MarkAsPublishedUsingPOSTParams {
	return &MarkAsPublishedUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewMarkAsPublishedUsingPOSTParamsWithTimeout creates a new MarkAsPublishedUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewMarkAsPublishedUsingPOSTParamsWithTimeout(timeout time.Duration) *MarkAsPublishedUsingPOSTParams {
	return &MarkAsPublishedUsingPOSTParams{
		timeout: timeout,
	}
}

// NewMarkAsPublishedUsingPOSTParamsWithContext creates a new MarkAsPublishedUsingPOSTParams object
// with the ability to set a context for a request.
func NewMarkAsPublishedUsingPOSTParamsWithContext(ctx context.Context) *MarkAsPublishedUsingPOSTParams {
	return &MarkAsPublishedUsingPOSTParams{
		Context: ctx,
	}
}

// NewMarkAsPublishedUsingPOSTParamsWithHTTPClient creates a new MarkAsPublishedUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewMarkAsPublishedUsingPOSTParamsWithHTTPClient(client *http.Client) *MarkAsPublishedUsingPOSTParams {
	return &MarkAsPublishedUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
MarkAsPublishedUsingPOSTParams contains all the parameters to send to the API endpoint

	for the mark as published using p o s t operation.

	Typically these are written to a http.Request.
*/
type MarkAsPublishedUsingPOSTParams struct {

	/* Flavor.

	   flavor
	*/
	Flavor string

	/* Intent.

	   intent
	*/
	Intent string

	/* Version.

	   version
	*/
	Version string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the mark as published using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MarkAsPublishedUsingPOSTParams) WithDefaults() *MarkAsPublishedUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the mark as published using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MarkAsPublishedUsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the mark as published using p o s t params
func (o *MarkAsPublishedUsingPOSTParams) WithTimeout(timeout time.Duration) *MarkAsPublishedUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the mark as published using p o s t params
func (o *MarkAsPublishedUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the mark as published using p o s t params
func (o *MarkAsPublishedUsingPOSTParams) WithContext(ctx context.Context) *MarkAsPublishedUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the mark as published using p o s t params
func (o *MarkAsPublishedUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the mark as published using p o s t params
func (o *MarkAsPublishedUsingPOSTParams) WithHTTPClient(client *http.Client) *MarkAsPublishedUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the mark as published using p o s t params
func (o *MarkAsPublishedUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFlavor adds the flavor to the mark as published using p o s t params
func (o *MarkAsPublishedUsingPOSTParams) WithFlavor(flavor string) *MarkAsPublishedUsingPOSTParams {
	o.SetFlavor(flavor)
	return o
}

// SetFlavor adds the flavor to the mark as published using p o s t params
func (o *MarkAsPublishedUsingPOSTParams) SetFlavor(flavor string) {
	o.Flavor = flavor
}

// WithIntent adds the intent to the mark as published using p o s t params
func (o *MarkAsPublishedUsingPOSTParams) WithIntent(intent string) *MarkAsPublishedUsingPOSTParams {
	o.SetIntent(intent)
	return o
}

// SetIntent adds the intent to the mark as published using p o s t params
func (o *MarkAsPublishedUsingPOSTParams) SetIntent(intent string) {
	o.Intent = intent
}

// WithVersion adds the version to the mark as published using p o s t params
func (o *MarkAsPublishedUsingPOSTParams) WithVersion(version string) *MarkAsPublishedUsingPOSTParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the mark as published using p o s t params
func (o *MarkAsPublishedUsingPOSTParams) SetVersion(version string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *MarkAsPublishedUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param flavor
	if err := r.SetPathParam("flavor", o.Flavor); err != nil {
		return err
	}

	// path param intent
	if err := r.SetPathParam("intent", o.Intent); err != nil {
		return err
	}

	// path param version
	if err := r.SetPathParam("version", o.Version); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
