// Code generated by go-swagger; DO NOT EDIT.

package ui_tf_module_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// MarkAsPublishedByIDUsingPOSTReader is a Reader for the MarkAsPublishedByIDUsingPOST structure.
type MarkAsPublishedByIDUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MarkAsPublishedByIDUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMarkAsPublishedByIDUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewMarkAsPublishedByIDUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewMarkAsPublishedByIDUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMarkAsPublishedByIDUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMarkAsPublishedByIDUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/modules/{id}/mark-published] markAsPublishedByIdUsingPOST", response, response.Code())
	}
}

// NewMarkAsPublishedByIDUsingPOSTOK creates a MarkAsPublishedByIDUsingPOSTOK with default headers values
func NewMarkAsPublishedByIDUsingPOSTOK() *MarkAsPublishedByIDUsingPOSTOK {
	return &MarkAsPublishedByIDUsingPOSTOK{}
}

/*
MarkAsPublishedByIDUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type MarkAsPublishedByIDUsingPOSTOK struct {
	Payload *models.TFModule
}

// IsSuccess returns true when this mark as published by Id using p o s t o k response has a 2xx status code
func (o *MarkAsPublishedByIDUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this mark as published by Id using p o s t o k response has a 3xx status code
func (o *MarkAsPublishedByIDUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published by Id using p o s t o k response has a 4xx status code
func (o *MarkAsPublishedByIDUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this mark as published by Id using p o s t o k response has a 5xx status code
func (o *MarkAsPublishedByIDUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published by Id using p o s t o k response a status code equal to that given
func (o *MarkAsPublishedByIDUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the mark as published by Id using p o s t o k response
func (o *MarkAsPublishedByIDUsingPOSTOK) Code() int {
	return 200
}

func (o *MarkAsPublishedByIDUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdUsingPOSTOK %s", 200, payload)
}

func (o *MarkAsPublishedByIDUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdUsingPOSTOK %s", 200, payload)
}

func (o *MarkAsPublishedByIDUsingPOSTOK) GetPayload() *models.TFModule {
	return o.Payload
}

func (o *MarkAsPublishedByIDUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TFModule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkAsPublishedByIDUsingPOSTCreated creates a MarkAsPublishedByIDUsingPOSTCreated with default headers values
func NewMarkAsPublishedByIDUsingPOSTCreated() *MarkAsPublishedByIDUsingPOSTCreated {
	return &MarkAsPublishedByIDUsingPOSTCreated{}
}

/*
MarkAsPublishedByIDUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type MarkAsPublishedByIDUsingPOSTCreated struct {
}

// IsSuccess returns true when this mark as published by Id using p o s t created response has a 2xx status code
func (o *MarkAsPublishedByIDUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this mark as published by Id using p o s t created response has a 3xx status code
func (o *MarkAsPublishedByIDUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published by Id using p o s t created response has a 4xx status code
func (o *MarkAsPublishedByIDUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this mark as published by Id using p o s t created response has a 5xx status code
func (o *MarkAsPublishedByIDUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published by Id using p o s t created response a status code equal to that given
func (o *MarkAsPublishedByIDUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the mark as published by Id using p o s t created response
func (o *MarkAsPublishedByIDUsingPOSTCreated) Code() int {
	return 201
}

func (o *MarkAsPublishedByIDUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdUsingPOSTCreated", 201)
}

func (o *MarkAsPublishedByIDUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdUsingPOSTCreated", 201)
}

func (o *MarkAsPublishedByIDUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMarkAsPublishedByIDUsingPOSTUnauthorized creates a MarkAsPublishedByIDUsingPOSTUnauthorized with default headers values
func NewMarkAsPublishedByIDUsingPOSTUnauthorized() *MarkAsPublishedByIDUsingPOSTUnauthorized {
	return &MarkAsPublishedByIDUsingPOSTUnauthorized{}
}

/*
MarkAsPublishedByIDUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type MarkAsPublishedByIDUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this mark as published by Id using p o s t unauthorized response has a 2xx status code
func (o *MarkAsPublishedByIDUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this mark as published by Id using p o s t unauthorized response has a 3xx status code
func (o *MarkAsPublishedByIDUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published by Id using p o s t unauthorized response has a 4xx status code
func (o *MarkAsPublishedByIDUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this mark as published by Id using p o s t unauthorized response has a 5xx status code
func (o *MarkAsPublishedByIDUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published by Id using p o s t unauthorized response a status code equal to that given
func (o *MarkAsPublishedByIDUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the mark as published by Id using p o s t unauthorized response
func (o *MarkAsPublishedByIDUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *MarkAsPublishedByIDUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdUsingPOSTUnauthorized", 401)
}

func (o *MarkAsPublishedByIDUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdUsingPOSTUnauthorized", 401)
}

func (o *MarkAsPublishedByIDUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMarkAsPublishedByIDUsingPOSTForbidden creates a MarkAsPublishedByIDUsingPOSTForbidden with default headers values
func NewMarkAsPublishedByIDUsingPOSTForbidden() *MarkAsPublishedByIDUsingPOSTForbidden {
	return &MarkAsPublishedByIDUsingPOSTForbidden{}
}

/*
MarkAsPublishedByIDUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type MarkAsPublishedByIDUsingPOSTForbidden struct {
}

// IsSuccess returns true when this mark as published by Id using p o s t forbidden response has a 2xx status code
func (o *MarkAsPublishedByIDUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this mark as published by Id using p o s t forbidden response has a 3xx status code
func (o *MarkAsPublishedByIDUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published by Id using p o s t forbidden response has a 4xx status code
func (o *MarkAsPublishedByIDUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this mark as published by Id using p o s t forbidden response has a 5xx status code
func (o *MarkAsPublishedByIDUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published by Id using p o s t forbidden response a status code equal to that given
func (o *MarkAsPublishedByIDUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the mark as published by Id using p o s t forbidden response
func (o *MarkAsPublishedByIDUsingPOSTForbidden) Code() int {
	return 403
}

func (o *MarkAsPublishedByIDUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdUsingPOSTForbidden", 403)
}

func (o *MarkAsPublishedByIDUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdUsingPOSTForbidden", 403)
}

func (o *MarkAsPublishedByIDUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMarkAsPublishedByIDUsingPOSTNotFound creates a MarkAsPublishedByIDUsingPOSTNotFound with default headers values
func NewMarkAsPublishedByIDUsingPOSTNotFound() *MarkAsPublishedByIDUsingPOSTNotFound {
	return &MarkAsPublishedByIDUsingPOSTNotFound{}
}

/*
MarkAsPublishedByIDUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type MarkAsPublishedByIDUsingPOSTNotFound struct {
}

// IsSuccess returns true when this mark as published by Id using p o s t not found response has a 2xx status code
func (o *MarkAsPublishedByIDUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this mark as published by Id using p o s t not found response has a 3xx status code
func (o *MarkAsPublishedByIDUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published by Id using p o s t not found response has a 4xx status code
func (o *MarkAsPublishedByIDUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this mark as published by Id using p o s t not found response has a 5xx status code
func (o *MarkAsPublishedByIDUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published by Id using p o s t not found response a status code equal to that given
func (o *MarkAsPublishedByIDUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the mark as published by Id using p o s t not found response
func (o *MarkAsPublishedByIDUsingPOSTNotFound) Code() int {
	return 404
}

func (o *MarkAsPublishedByIDUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdUsingPOSTNotFound", 404)
}

func (o *MarkAsPublishedByIDUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdUsingPOSTNotFound", 404)
}

func (o *MarkAsPublishedByIDUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
