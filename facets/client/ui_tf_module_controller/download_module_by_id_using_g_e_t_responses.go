// Code generated by go-swagger; DO NOT EDIT.

package ui_tf_module_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DownloadModuleByIDUsingGETReader is a Reader for the DownloadModuleByIDUsingGET structure.
type DownloadModuleByIDUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DownloadModuleByIDUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadModuleByIDUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDownloadModuleByIDUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDownloadModuleByIDUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDownloadModuleByIDUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/modules/{id}/download] downloadModuleByIdUsingGET", response, response.Code())
	}
}

// NewDownloadModuleByIDUsingGETOK creates a DownloadModuleByIDUsingGETOK with default headers values
func NewDownloadModuleByIDUsingGETOK() *DownloadModuleByIDUsingGETOK {
	return &DownloadModuleByIDUsingGETOK{}
}

/*
DownloadModuleByIDUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type DownloadModuleByIDUsingGETOK struct {
	Payload *models.Resource
}

// IsSuccess returns true when this download module by Id using g e t o k response has a 2xx status code
func (o *DownloadModuleByIDUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this download module by Id using g e t o k response has a 3xx status code
func (o *DownloadModuleByIDUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by Id using g e t o k response has a 4xx status code
func (o *DownloadModuleByIDUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this download module by Id using g e t o k response has a 5xx status code
func (o *DownloadModuleByIDUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this download module by Id using g e t o k response a status code equal to that given
func (o *DownloadModuleByIDUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the download module by Id using g e t o k response
func (o *DownloadModuleByIDUsingGETOK) Code() int {
	return 200
}

func (o *DownloadModuleByIDUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdUsingGETOK %s", 200, payload)
}

func (o *DownloadModuleByIDUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdUsingGETOK %s", 200, payload)
}

func (o *DownloadModuleByIDUsingGETOK) GetPayload() *models.Resource {
	return o.Payload
}

func (o *DownloadModuleByIDUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Resource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadModuleByIDUsingGETUnauthorized creates a DownloadModuleByIDUsingGETUnauthorized with default headers values
func NewDownloadModuleByIDUsingGETUnauthorized() *DownloadModuleByIDUsingGETUnauthorized {
	return &DownloadModuleByIDUsingGETUnauthorized{}
}

/*
DownloadModuleByIDUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DownloadModuleByIDUsingGETUnauthorized struct {
}

// IsSuccess returns true when this download module by Id using g e t unauthorized response has a 2xx status code
func (o *DownloadModuleByIDUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download module by Id using g e t unauthorized response has a 3xx status code
func (o *DownloadModuleByIDUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by Id using g e t unauthorized response has a 4xx status code
func (o *DownloadModuleByIDUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this download module by Id using g e t unauthorized response has a 5xx status code
func (o *DownloadModuleByIDUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this download module by Id using g e t unauthorized response a status code equal to that given
func (o *DownloadModuleByIDUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the download module by Id using g e t unauthorized response
func (o *DownloadModuleByIDUsingGETUnauthorized) Code() int {
	return 401
}

func (o *DownloadModuleByIDUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdUsingGETUnauthorized", 401)
}

func (o *DownloadModuleByIDUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdUsingGETUnauthorized", 401)
}

func (o *DownloadModuleByIDUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadModuleByIDUsingGETForbidden creates a DownloadModuleByIDUsingGETForbidden with default headers values
func NewDownloadModuleByIDUsingGETForbidden() *DownloadModuleByIDUsingGETForbidden {
	return &DownloadModuleByIDUsingGETForbidden{}
}

/*
DownloadModuleByIDUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DownloadModuleByIDUsingGETForbidden struct {
}

// IsSuccess returns true when this download module by Id using g e t forbidden response has a 2xx status code
func (o *DownloadModuleByIDUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download module by Id using g e t forbidden response has a 3xx status code
func (o *DownloadModuleByIDUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by Id using g e t forbidden response has a 4xx status code
func (o *DownloadModuleByIDUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this download module by Id using g e t forbidden response has a 5xx status code
func (o *DownloadModuleByIDUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this download module by Id using g e t forbidden response a status code equal to that given
func (o *DownloadModuleByIDUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the download module by Id using g e t forbidden response
func (o *DownloadModuleByIDUsingGETForbidden) Code() int {
	return 403
}

func (o *DownloadModuleByIDUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdUsingGETForbidden", 403)
}

func (o *DownloadModuleByIDUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdUsingGETForbidden", 403)
}

func (o *DownloadModuleByIDUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadModuleByIDUsingGETNotFound creates a DownloadModuleByIDUsingGETNotFound with default headers values
func NewDownloadModuleByIDUsingGETNotFound() *DownloadModuleByIDUsingGETNotFound {
	return &DownloadModuleByIDUsingGETNotFound{}
}

/*
DownloadModuleByIDUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DownloadModuleByIDUsingGETNotFound struct {
}

// IsSuccess returns true when this download module by Id using g e t not found response has a 2xx status code
func (o *DownloadModuleByIDUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download module by Id using g e t not found response has a 3xx status code
func (o *DownloadModuleByIDUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by Id using g e t not found response has a 4xx status code
func (o *DownloadModuleByIDUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this download module by Id using g e t not found response has a 5xx status code
func (o *DownloadModuleByIDUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this download module by Id using g e t not found response a status code equal to that given
func (o *DownloadModuleByIDUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the download module by Id using g e t not found response
func (o *DownloadModuleByIDUsingGETNotFound) Code() int {
	return 404
}

func (o *DownloadModuleByIDUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdUsingGETNotFound", 404)
}

func (o *DownloadModuleByIDUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdUsingGETNotFound", 404)
}

func (o *DownloadModuleByIDUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
