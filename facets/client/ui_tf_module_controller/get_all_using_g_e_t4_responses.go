// Code generated by go-swagger; DO NOT EDIT.

package ui_tf_module_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllUsingGET4Reader is a Reader for the GetAllUsingGET4 structure.
type GetAllUsingGET4Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllUsingGET4Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllUsingGET4OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllUsingGET4BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAllUsingGET4Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllUsingGET4Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllUsingGET4NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllUsingGET4InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/modules/all] getAllUsingGET_4", response, response.Code())
	}
}

// NewGetAllUsingGET4OK creates a GetAllUsingGET4OK with default headers values
func NewGetAllUsingGET4OK() *GetAllUsingGET4OK {
	return &GetAllUsingGET4OK{}
}

/*
GetAllUsingGET4OK describes a response with status code 200, with default header values.

Operation successful
*/
type GetAllUsingGET4OK struct {
	Payload []*models.TFModule
}

// IsSuccess returns true when this get all using g e t4 o k response has a 2xx status code
func (o *GetAllUsingGET4OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all using g e t4 o k response has a 3xx status code
func (o *GetAllUsingGET4OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all using g e t4 o k response has a 4xx status code
func (o *GetAllUsingGET4OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all using g e t4 o k response has a 5xx status code
func (o *GetAllUsingGET4OK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all using g e t4 o k response a status code equal to that given
func (o *GetAllUsingGET4OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all using g e t4 o k response
func (o *GetAllUsingGET4OK) Code() int {
	return 200
}

func (o *GetAllUsingGET4OK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/all][%d] getAllUsingGET4OK %s", 200, payload)
}

func (o *GetAllUsingGET4OK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/all][%d] getAllUsingGET4OK %s", 200, payload)
}

func (o *GetAllUsingGET4OK) GetPayload() []*models.TFModule {
	return o.Payload
}

func (o *GetAllUsingGET4OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllUsingGET4BadRequest creates a GetAllUsingGET4BadRequest with default headers values
func NewGetAllUsingGET4BadRequest() *GetAllUsingGET4BadRequest {
	return &GetAllUsingGET4BadRequest{}
}

/*
GetAllUsingGET4BadRequest describes a response with status code 400, with default header values.

Invalid input parameters
*/
type GetAllUsingGET4BadRequest struct {
}

// IsSuccess returns true when this get all using g e t4 bad request response has a 2xx status code
func (o *GetAllUsingGET4BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all using g e t4 bad request response has a 3xx status code
func (o *GetAllUsingGET4BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all using g e t4 bad request response has a 4xx status code
func (o *GetAllUsingGET4BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all using g e t4 bad request response has a 5xx status code
func (o *GetAllUsingGET4BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all using g e t4 bad request response a status code equal to that given
func (o *GetAllUsingGET4BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all using g e t4 bad request response
func (o *GetAllUsingGET4BadRequest) Code() int {
	return 400
}

func (o *GetAllUsingGET4BadRequest) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/all][%d] getAllUsingGET4BadRequest", 400)
}

func (o *GetAllUsingGET4BadRequest) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/all][%d] getAllUsingGET4BadRequest", 400)
}

func (o *GetAllUsingGET4BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllUsingGET4Unauthorized creates a GetAllUsingGET4Unauthorized with default headers values
func NewGetAllUsingGET4Unauthorized() *GetAllUsingGET4Unauthorized {
	return &GetAllUsingGET4Unauthorized{}
}

/*
GetAllUsingGET4Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllUsingGET4Unauthorized struct {
}

// IsSuccess returns true when this get all using g e t4 unauthorized response has a 2xx status code
func (o *GetAllUsingGET4Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all using g e t4 unauthorized response has a 3xx status code
func (o *GetAllUsingGET4Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all using g e t4 unauthorized response has a 4xx status code
func (o *GetAllUsingGET4Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all using g e t4 unauthorized response has a 5xx status code
func (o *GetAllUsingGET4Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all using g e t4 unauthorized response a status code equal to that given
func (o *GetAllUsingGET4Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all using g e t4 unauthorized response
func (o *GetAllUsingGET4Unauthorized) Code() int {
	return 401
}

func (o *GetAllUsingGET4Unauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/all][%d] getAllUsingGET4Unauthorized", 401)
}

func (o *GetAllUsingGET4Unauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/all][%d] getAllUsingGET4Unauthorized", 401)
}

func (o *GetAllUsingGET4Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllUsingGET4Forbidden creates a GetAllUsingGET4Forbidden with default headers values
func NewGetAllUsingGET4Forbidden() *GetAllUsingGET4Forbidden {
	return &GetAllUsingGET4Forbidden{}
}

/*
GetAllUsingGET4Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllUsingGET4Forbidden struct {
}

// IsSuccess returns true when this get all using g e t4 forbidden response has a 2xx status code
func (o *GetAllUsingGET4Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all using g e t4 forbidden response has a 3xx status code
func (o *GetAllUsingGET4Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all using g e t4 forbidden response has a 4xx status code
func (o *GetAllUsingGET4Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all using g e t4 forbidden response has a 5xx status code
func (o *GetAllUsingGET4Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all using g e t4 forbidden response a status code equal to that given
func (o *GetAllUsingGET4Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all using g e t4 forbidden response
func (o *GetAllUsingGET4Forbidden) Code() int {
	return 403
}

func (o *GetAllUsingGET4Forbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/all][%d] getAllUsingGET4Forbidden", 403)
}

func (o *GetAllUsingGET4Forbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/all][%d] getAllUsingGET4Forbidden", 403)
}

func (o *GetAllUsingGET4Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllUsingGET4NotFound creates a GetAllUsingGET4NotFound with default headers values
func NewGetAllUsingGET4NotFound() *GetAllUsingGET4NotFound {
	return &GetAllUsingGET4NotFound{}
}

/*
GetAllUsingGET4NotFound describes a response with status code 404, with default header values.

Entity not found
*/
type GetAllUsingGET4NotFound struct {
}

// IsSuccess returns true when this get all using g e t4 not found response has a 2xx status code
func (o *GetAllUsingGET4NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all using g e t4 not found response has a 3xx status code
func (o *GetAllUsingGET4NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all using g e t4 not found response has a 4xx status code
func (o *GetAllUsingGET4NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all using g e t4 not found response has a 5xx status code
func (o *GetAllUsingGET4NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all using g e t4 not found response a status code equal to that given
func (o *GetAllUsingGET4NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all using g e t4 not found response
func (o *GetAllUsingGET4NotFound) Code() int {
	return 404
}

func (o *GetAllUsingGET4NotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/all][%d] getAllUsingGET4NotFound", 404)
}

func (o *GetAllUsingGET4NotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/all][%d] getAllUsingGET4NotFound", 404)
}

func (o *GetAllUsingGET4NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllUsingGET4InternalServerError creates a GetAllUsingGET4InternalServerError with default headers values
func NewGetAllUsingGET4InternalServerError() *GetAllUsingGET4InternalServerError {
	return &GetAllUsingGET4InternalServerError{}
}

/*
GetAllUsingGET4InternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetAllUsingGET4InternalServerError struct {
}

// IsSuccess returns true when this get all using g e t4 internal server error response has a 2xx status code
func (o *GetAllUsingGET4InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all using g e t4 internal server error response has a 3xx status code
func (o *GetAllUsingGET4InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all using g e t4 internal server error response has a 4xx status code
func (o *GetAllUsingGET4InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all using g e t4 internal server error response has a 5xx status code
func (o *GetAllUsingGET4InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all using g e t4 internal server error response a status code equal to that given
func (o *GetAllUsingGET4InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all using g e t4 internal server error response
func (o *GetAllUsingGET4InternalServerError) Code() int {
	return 500
}

func (o *GetAllUsingGET4InternalServerError) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/all][%d] getAllUsingGET4InternalServerError", 500)
}

func (o *GetAllUsingGET4InternalServerError) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/all][%d] getAllUsingGET4InternalServerError", 500)
}

func (o *GetAllUsingGET4InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
