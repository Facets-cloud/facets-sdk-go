// Code generated by go-swagger; DO NOT EDIT.

package ui_tf_module_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UploadModuleUsingPOSTReader is a Reader for the UploadModuleUsingPOST structure.
type UploadModuleUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadModuleUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadModuleUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUploadModuleUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUploadModuleUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUploadModuleUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUploadModuleUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/modules/upload] uploadModuleUsingPOST", response, response.Code())
	}
}

// NewUploadModuleUsingPOSTOK creates a UploadModuleUsingPOSTOK with default headers values
func NewUploadModuleUsingPOSTOK() *UploadModuleUsingPOSTOK {
	return &UploadModuleUsingPOSTOK{}
}

/*
UploadModuleUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type UploadModuleUsingPOSTOK struct {
	Payload *models.TFModule
}

// IsSuccess returns true when this upload module using p o s t o k response has a 2xx status code
func (o *UploadModuleUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upload module using p o s t o k response has a 3xx status code
func (o *UploadModuleUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload module using p o s t o k response has a 4xx status code
func (o *UploadModuleUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload module using p o s t o k response has a 5xx status code
func (o *UploadModuleUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upload module using p o s t o k response a status code equal to that given
func (o *UploadModuleUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upload module using p o s t o k response
func (o *UploadModuleUsingPOSTOK) Code() int {
	return 200
}

func (o *UploadModuleUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleUsingPOSTOK %s", 200, payload)
}

func (o *UploadModuleUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleUsingPOSTOK %s", 200, payload)
}

func (o *UploadModuleUsingPOSTOK) GetPayload() *models.TFModule {
	return o.Payload
}

func (o *UploadModuleUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TFModule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadModuleUsingPOSTCreated creates a UploadModuleUsingPOSTCreated with default headers values
func NewUploadModuleUsingPOSTCreated() *UploadModuleUsingPOSTCreated {
	return &UploadModuleUsingPOSTCreated{}
}

/*
UploadModuleUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type UploadModuleUsingPOSTCreated struct {
}

// IsSuccess returns true when this upload module using p o s t created response has a 2xx status code
func (o *UploadModuleUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upload module using p o s t created response has a 3xx status code
func (o *UploadModuleUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload module using p o s t created response has a 4xx status code
func (o *UploadModuleUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload module using p o s t created response has a 5xx status code
func (o *UploadModuleUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this upload module using p o s t created response a status code equal to that given
func (o *UploadModuleUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the upload module using p o s t created response
func (o *UploadModuleUsingPOSTCreated) Code() int {
	return 201
}

func (o *UploadModuleUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleUsingPOSTCreated", 201)
}

func (o *UploadModuleUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleUsingPOSTCreated", 201)
}

func (o *UploadModuleUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadModuleUsingPOSTUnauthorized creates a UploadModuleUsingPOSTUnauthorized with default headers values
func NewUploadModuleUsingPOSTUnauthorized() *UploadModuleUsingPOSTUnauthorized {
	return &UploadModuleUsingPOSTUnauthorized{}
}

/*
UploadModuleUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UploadModuleUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this upload module using p o s t unauthorized response has a 2xx status code
func (o *UploadModuleUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload module using p o s t unauthorized response has a 3xx status code
func (o *UploadModuleUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload module using p o s t unauthorized response has a 4xx status code
func (o *UploadModuleUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload module using p o s t unauthorized response has a 5xx status code
func (o *UploadModuleUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this upload module using p o s t unauthorized response a status code equal to that given
func (o *UploadModuleUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the upload module using p o s t unauthorized response
func (o *UploadModuleUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *UploadModuleUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleUsingPOSTUnauthorized", 401)
}

func (o *UploadModuleUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleUsingPOSTUnauthorized", 401)
}

func (o *UploadModuleUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadModuleUsingPOSTForbidden creates a UploadModuleUsingPOSTForbidden with default headers values
func NewUploadModuleUsingPOSTForbidden() *UploadModuleUsingPOSTForbidden {
	return &UploadModuleUsingPOSTForbidden{}
}

/*
UploadModuleUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UploadModuleUsingPOSTForbidden struct {
}

// IsSuccess returns true when this upload module using p o s t forbidden response has a 2xx status code
func (o *UploadModuleUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload module using p o s t forbidden response has a 3xx status code
func (o *UploadModuleUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload module using p o s t forbidden response has a 4xx status code
func (o *UploadModuleUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload module using p o s t forbidden response has a 5xx status code
func (o *UploadModuleUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this upload module using p o s t forbidden response a status code equal to that given
func (o *UploadModuleUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the upload module using p o s t forbidden response
func (o *UploadModuleUsingPOSTForbidden) Code() int {
	return 403
}

func (o *UploadModuleUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleUsingPOSTForbidden", 403)
}

func (o *UploadModuleUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleUsingPOSTForbidden", 403)
}

func (o *UploadModuleUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadModuleUsingPOSTNotFound creates a UploadModuleUsingPOSTNotFound with default headers values
func NewUploadModuleUsingPOSTNotFound() *UploadModuleUsingPOSTNotFound {
	return &UploadModuleUsingPOSTNotFound{}
}

/*
UploadModuleUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UploadModuleUsingPOSTNotFound struct {
}

// IsSuccess returns true when this upload module using p o s t not found response has a 2xx status code
func (o *UploadModuleUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload module using p o s t not found response has a 3xx status code
func (o *UploadModuleUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload module using p o s t not found response has a 4xx status code
func (o *UploadModuleUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload module using p o s t not found response has a 5xx status code
func (o *UploadModuleUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this upload module using p o s t not found response a status code equal to that given
func (o *UploadModuleUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the upload module using p o s t not found response
func (o *UploadModuleUsingPOSTNotFound) Code() int {
	return 404
}

func (o *UploadModuleUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleUsingPOSTNotFound", 404)
}

func (o *UploadModuleUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleUsingPOSTNotFound", 404)
}

func (o *UploadModuleUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
