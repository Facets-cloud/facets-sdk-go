// Code generated by go-swagger; DO NOT EDIT.

package ui_tf_module_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllUsingGET4Params creates a new GetAllUsingGET4Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllUsingGET4Params() *GetAllUsingGET4Params {
	return &GetAllUsingGET4Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllUsingGET4ParamsWithTimeout creates a new GetAllUsingGET4Params object
// with the ability to set a timeout on a request.
func NewGetAllUsingGET4ParamsWithTimeout(timeout time.Duration) *GetAllUsingGET4Params {
	return &GetAllUsingGET4Params{
		timeout: timeout,
	}
}

// NewGetAllUsingGET4ParamsWithContext creates a new GetAllUsingGET4Params object
// with the ability to set a context for a request.
func NewGetAllUsingGET4ParamsWithContext(ctx context.Context) *GetAllUsingGET4Params {
	return &GetAllUsingGET4Params{
		Context: ctx,
	}
}

// NewGetAllUsingGET4ParamsWithHTTPClient creates a new GetAllUsingGET4Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllUsingGET4ParamsWithHTTPClient(client *http.Client) *GetAllUsingGET4Params {
	return &GetAllUsingGET4Params{
		HTTPClient: client,
	}
}

/*
GetAllUsingGET4Params contains all the parameters to send to the API endpoint

	for the get all using g e t 4 operation.

	Typically these are written to a http.Request.
*/
type GetAllUsingGET4Params struct {

	/* AllowPreviewModules.

	   allowPreviewModules
	*/
	AllowPreviewModules *bool

	/* IncludeFacetsYaml.

	   includeFacetsYaml
	*/
	IncludeFacetsYaml *bool

	/* WithPathOnly.

	   withPathOnly
	*/
	WithPathOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all using g e t 4 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllUsingGET4Params) WithDefaults() *GetAllUsingGET4Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all using g e t 4 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllUsingGET4Params) SetDefaults() {
	var (
		allowPreviewModulesDefault = bool(false)

		includeFacetsYamlDefault = bool(false)

		withPathOnlyDefault = bool(false)
	)

	val := GetAllUsingGET4Params{
		AllowPreviewModules: &allowPreviewModulesDefault,
		IncludeFacetsYaml:   &includeFacetsYamlDefault,
		WithPathOnly:        &withPathOnlyDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get all using g e t 4 params
func (o *GetAllUsingGET4Params) WithTimeout(timeout time.Duration) *GetAllUsingGET4Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all using g e t 4 params
func (o *GetAllUsingGET4Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all using g e t 4 params
func (o *GetAllUsingGET4Params) WithContext(ctx context.Context) *GetAllUsingGET4Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all using g e t 4 params
func (o *GetAllUsingGET4Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all using g e t 4 params
func (o *GetAllUsingGET4Params) WithHTTPClient(client *http.Client) *GetAllUsingGET4Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all using g e t 4 params
func (o *GetAllUsingGET4Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowPreviewModules adds the allowPreviewModules to the get all using g e t 4 params
func (o *GetAllUsingGET4Params) WithAllowPreviewModules(allowPreviewModules *bool) *GetAllUsingGET4Params {
	o.SetAllowPreviewModules(allowPreviewModules)
	return o
}

// SetAllowPreviewModules adds the allowPreviewModules to the get all using g e t 4 params
func (o *GetAllUsingGET4Params) SetAllowPreviewModules(allowPreviewModules *bool) {
	o.AllowPreviewModules = allowPreviewModules
}

// WithIncludeFacetsYaml adds the includeFacetsYaml to the get all using g e t 4 params
func (o *GetAllUsingGET4Params) WithIncludeFacetsYaml(includeFacetsYaml *bool) *GetAllUsingGET4Params {
	o.SetIncludeFacetsYaml(includeFacetsYaml)
	return o
}

// SetIncludeFacetsYaml adds the includeFacetsYaml to the get all using g e t 4 params
func (o *GetAllUsingGET4Params) SetIncludeFacetsYaml(includeFacetsYaml *bool) {
	o.IncludeFacetsYaml = includeFacetsYaml
}

// WithWithPathOnly adds the withPathOnly to the get all using g e t 4 params
func (o *GetAllUsingGET4Params) WithWithPathOnly(withPathOnly *bool) *GetAllUsingGET4Params {
	o.SetWithPathOnly(withPathOnly)
	return o
}

// SetWithPathOnly adds the withPathOnly to the get all using g e t 4 params
func (o *GetAllUsingGET4Params) SetWithPathOnly(withPathOnly *bool) {
	o.WithPathOnly = withPathOnly
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllUsingGET4Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllowPreviewModules != nil {

		// query param allowPreviewModules
		var qrAllowPreviewModules bool

		if o.AllowPreviewModules != nil {
			qrAllowPreviewModules = *o.AllowPreviewModules
		}
		qAllowPreviewModules := swag.FormatBool(qrAllowPreviewModules)
		if qAllowPreviewModules != "" {

			if err := r.SetQueryParam("allowPreviewModules", qAllowPreviewModules); err != nil {
				return err
			}
		}
	}

	if o.IncludeFacetsYaml != nil {

		// query param includeFacetsYaml
		var qrIncludeFacetsYaml bool

		if o.IncludeFacetsYaml != nil {
			qrIncludeFacetsYaml = *o.IncludeFacetsYaml
		}
		qIncludeFacetsYaml := swag.FormatBool(qrIncludeFacetsYaml)
		if qIncludeFacetsYaml != "" {

			if err := r.SetQueryParam("includeFacetsYaml", qIncludeFacetsYaml); err != nil {
				return err
			}
		}
	}

	if o.WithPathOnly != nil {

		// query param withPathOnly
		var qrWithPathOnly bool

		if o.WithPathOnly != nil {
			qrWithPathOnly = *o.WithPathOnly
		}
		qWithPathOnly := swag.FormatBool(qrWithPathOnly)
		if qWithPathOnly != "" {

			if err := r.SetQueryParam("withPathOnly", qWithPathOnly); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
