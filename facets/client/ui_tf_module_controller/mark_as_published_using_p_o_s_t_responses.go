// Code generated by go-swagger; DO NOT EDIT.

package ui_tf_module_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// MarkAsPublishedUsingPOSTReader is a Reader for the MarkAsPublishedUsingPOST structure.
type MarkAsPublishedUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MarkAsPublishedUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMarkAsPublishedUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewMarkAsPublishedUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewMarkAsPublishedUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMarkAsPublishedUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMarkAsPublishedUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published] markAsPublishedUsingPOST", response, response.Code())
	}
}

// NewMarkAsPublishedUsingPOSTOK creates a MarkAsPublishedUsingPOSTOK with default headers values
func NewMarkAsPublishedUsingPOSTOK() *MarkAsPublishedUsingPOSTOK {
	return &MarkAsPublishedUsingPOSTOK{}
}

/*
MarkAsPublishedUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type MarkAsPublishedUsingPOSTOK struct {
	Payload *models.TFModule
}

// IsSuccess returns true when this mark as published using p o s t o k response has a 2xx status code
func (o *MarkAsPublishedUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this mark as published using p o s t o k response has a 3xx status code
func (o *MarkAsPublishedUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published using p o s t o k response has a 4xx status code
func (o *MarkAsPublishedUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this mark as published using p o s t o k response has a 5xx status code
func (o *MarkAsPublishedUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published using p o s t o k response a status code equal to that given
func (o *MarkAsPublishedUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the mark as published using p o s t o k response
func (o *MarkAsPublishedUsingPOSTOK) Code() int {
	return 200
}

func (o *MarkAsPublishedUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedUsingPOSTOK %s", 200, payload)
}

func (o *MarkAsPublishedUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedUsingPOSTOK %s", 200, payload)
}

func (o *MarkAsPublishedUsingPOSTOK) GetPayload() *models.TFModule {
	return o.Payload
}

func (o *MarkAsPublishedUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TFModule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkAsPublishedUsingPOSTCreated creates a MarkAsPublishedUsingPOSTCreated with default headers values
func NewMarkAsPublishedUsingPOSTCreated() *MarkAsPublishedUsingPOSTCreated {
	return &MarkAsPublishedUsingPOSTCreated{}
}

/*
MarkAsPublishedUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type MarkAsPublishedUsingPOSTCreated struct {
}

// IsSuccess returns true when this mark as published using p o s t created response has a 2xx status code
func (o *MarkAsPublishedUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this mark as published using p o s t created response has a 3xx status code
func (o *MarkAsPublishedUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published using p o s t created response has a 4xx status code
func (o *MarkAsPublishedUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this mark as published using p o s t created response has a 5xx status code
func (o *MarkAsPublishedUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published using p o s t created response a status code equal to that given
func (o *MarkAsPublishedUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the mark as published using p o s t created response
func (o *MarkAsPublishedUsingPOSTCreated) Code() int {
	return 201
}

func (o *MarkAsPublishedUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedUsingPOSTCreated", 201)
}

func (o *MarkAsPublishedUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedUsingPOSTCreated", 201)
}

func (o *MarkAsPublishedUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMarkAsPublishedUsingPOSTUnauthorized creates a MarkAsPublishedUsingPOSTUnauthorized with default headers values
func NewMarkAsPublishedUsingPOSTUnauthorized() *MarkAsPublishedUsingPOSTUnauthorized {
	return &MarkAsPublishedUsingPOSTUnauthorized{}
}

/*
MarkAsPublishedUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type MarkAsPublishedUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this mark as published using p o s t unauthorized response has a 2xx status code
func (o *MarkAsPublishedUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this mark as published using p o s t unauthorized response has a 3xx status code
func (o *MarkAsPublishedUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published using p o s t unauthorized response has a 4xx status code
func (o *MarkAsPublishedUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this mark as published using p o s t unauthorized response has a 5xx status code
func (o *MarkAsPublishedUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published using p o s t unauthorized response a status code equal to that given
func (o *MarkAsPublishedUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the mark as published using p o s t unauthorized response
func (o *MarkAsPublishedUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *MarkAsPublishedUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedUsingPOSTUnauthorized", 401)
}

func (o *MarkAsPublishedUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedUsingPOSTUnauthorized", 401)
}

func (o *MarkAsPublishedUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMarkAsPublishedUsingPOSTForbidden creates a MarkAsPublishedUsingPOSTForbidden with default headers values
func NewMarkAsPublishedUsingPOSTForbidden() *MarkAsPublishedUsingPOSTForbidden {
	return &MarkAsPublishedUsingPOSTForbidden{}
}

/*
MarkAsPublishedUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type MarkAsPublishedUsingPOSTForbidden struct {
}

// IsSuccess returns true when this mark as published using p o s t forbidden response has a 2xx status code
func (o *MarkAsPublishedUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this mark as published using p o s t forbidden response has a 3xx status code
func (o *MarkAsPublishedUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published using p o s t forbidden response has a 4xx status code
func (o *MarkAsPublishedUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this mark as published using p o s t forbidden response has a 5xx status code
func (o *MarkAsPublishedUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published using p o s t forbidden response a status code equal to that given
func (o *MarkAsPublishedUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the mark as published using p o s t forbidden response
func (o *MarkAsPublishedUsingPOSTForbidden) Code() int {
	return 403
}

func (o *MarkAsPublishedUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedUsingPOSTForbidden", 403)
}

func (o *MarkAsPublishedUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedUsingPOSTForbidden", 403)
}

func (o *MarkAsPublishedUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMarkAsPublishedUsingPOSTNotFound creates a MarkAsPublishedUsingPOSTNotFound with default headers values
func NewMarkAsPublishedUsingPOSTNotFound() *MarkAsPublishedUsingPOSTNotFound {
	return &MarkAsPublishedUsingPOSTNotFound{}
}

/*
MarkAsPublishedUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type MarkAsPublishedUsingPOSTNotFound struct {
}

// IsSuccess returns true when this mark as published using p o s t not found response has a 2xx status code
func (o *MarkAsPublishedUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this mark as published using p o s t not found response has a 3xx status code
func (o *MarkAsPublishedUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published using p o s t not found response has a 4xx status code
func (o *MarkAsPublishedUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this mark as published using p o s t not found response has a 5xx status code
func (o *MarkAsPublishedUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published using p o s t not found response a status code equal to that given
func (o *MarkAsPublishedUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the mark as published using p o s t not found response
func (o *MarkAsPublishedUsingPOSTNotFound) Code() int {
	return 404
}

func (o *MarkAsPublishedUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedUsingPOSTNotFound", 404)
}

func (o *MarkAsPublishedUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedUsingPOSTNotFound", 404)
}

func (o *MarkAsPublishedUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
