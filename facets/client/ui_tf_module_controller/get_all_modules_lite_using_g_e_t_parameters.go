// Code generated by go-swagger; DO NOT EDIT.

package ui_tf_module_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllModulesLiteUsingGETParams creates a new GetAllModulesLiteUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllModulesLiteUsingGETParams() *GetAllModulesLiteUsingGETParams {
	return &GetAllModulesLiteUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllModulesLiteUsingGETParamsWithTimeout creates a new GetAllModulesLiteUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetAllModulesLiteUsingGETParamsWithTimeout(timeout time.Duration) *GetAllModulesLiteUsingGETParams {
	return &GetAllModulesLiteUsingGETParams{
		timeout: timeout,
	}
}

// NewGetAllModulesLiteUsingGETParamsWithContext creates a new GetAllModulesLiteUsingGETParams object
// with the ability to set a context for a request.
func NewGetAllModulesLiteUsingGETParamsWithContext(ctx context.Context) *GetAllModulesLiteUsingGETParams {
	return &GetAllModulesLiteUsingGETParams{
		Context: ctx,
	}
}

// NewGetAllModulesLiteUsingGETParamsWithHTTPClient creates a new GetAllModulesLiteUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllModulesLiteUsingGETParamsWithHTTPClient(client *http.Client) *GetAllModulesLiteUsingGETParams {
	return &GetAllModulesLiteUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetAllModulesLiteUsingGETParams contains all the parameters to send to the API endpoint

	for the get all modules lite using g e t operation.

	Typically these are written to a http.Request.
*/
type GetAllModulesLiteUsingGETParams struct {

	/* AllowPreviewModules.

	   allowPreviewModules
	*/
	AllowPreviewModules *bool

	/* Clouds.

	   clouds
	*/
	Clouds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all modules lite using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllModulesLiteUsingGETParams) WithDefaults() *GetAllModulesLiteUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all modules lite using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllModulesLiteUsingGETParams) SetDefaults() {
	var (
		allowPreviewModulesDefault = bool(false)
	)

	val := GetAllModulesLiteUsingGETParams{
		AllowPreviewModules: &allowPreviewModulesDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get all modules lite using g e t params
func (o *GetAllModulesLiteUsingGETParams) WithTimeout(timeout time.Duration) *GetAllModulesLiteUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all modules lite using g e t params
func (o *GetAllModulesLiteUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all modules lite using g e t params
func (o *GetAllModulesLiteUsingGETParams) WithContext(ctx context.Context) *GetAllModulesLiteUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all modules lite using g e t params
func (o *GetAllModulesLiteUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all modules lite using g e t params
func (o *GetAllModulesLiteUsingGETParams) WithHTTPClient(client *http.Client) *GetAllModulesLiteUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all modules lite using g e t params
func (o *GetAllModulesLiteUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowPreviewModules adds the allowPreviewModules to the get all modules lite using g e t params
func (o *GetAllModulesLiteUsingGETParams) WithAllowPreviewModules(allowPreviewModules *bool) *GetAllModulesLiteUsingGETParams {
	o.SetAllowPreviewModules(allowPreviewModules)
	return o
}

// SetAllowPreviewModules adds the allowPreviewModules to the get all modules lite using g e t params
func (o *GetAllModulesLiteUsingGETParams) SetAllowPreviewModules(allowPreviewModules *bool) {
	o.AllowPreviewModules = allowPreviewModules
}

// WithClouds adds the clouds to the get all modules lite using g e t params
func (o *GetAllModulesLiteUsingGETParams) WithClouds(clouds []string) *GetAllModulesLiteUsingGETParams {
	o.SetClouds(clouds)
	return o
}

// SetClouds adds the clouds to the get all modules lite using g e t params
func (o *GetAllModulesLiteUsingGETParams) SetClouds(clouds []string) {
	o.Clouds = clouds
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllModulesLiteUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllowPreviewModules != nil {

		// query param allowPreviewModules
		var qrAllowPreviewModules bool

		if o.AllowPreviewModules != nil {
			qrAllowPreviewModules = *o.AllowPreviewModules
		}
		qAllowPreviewModules := swag.FormatBool(qrAllowPreviewModules)
		if qAllowPreviewModules != "" {

			if err := r.SetQueryParam("allowPreviewModules", qAllowPreviewModules); err != nil {
				return err
			}
		}
	}

	if o.Clouds != nil {

		// binding items for clouds
		joinedClouds := o.bindParamClouds(reg)

		// query array param clouds
		if err := r.SetQueryParam("clouds", joinedClouds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetAllModulesLiteUsingGET binds the parameter clouds
func (o *GetAllModulesLiteUsingGETParams) bindParamClouds(formats strfmt.Registry) []string {
	cloudsIR := o.Clouds

	var cloudsIC []string
	for _, cloudsIIR := range cloudsIR { // explode []string

		cloudsIIV := cloudsIIR // string as string
		cloudsIC = append(cloudsIC, cloudsIIV)
	}

	// items.CollectionFormat: "multi"
	cloudsIS := swag.JoinByFormat(cloudsIC, "multi")

	return cloudsIS
}
