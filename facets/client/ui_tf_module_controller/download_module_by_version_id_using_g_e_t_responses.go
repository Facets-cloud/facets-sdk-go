// Code generated by go-swagger; DO NOT EDIT.

package ui_tf_module_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DownloadModuleByVersionIDUsingGETReader is a Reader for the DownloadModuleByVersionIDUsingGET structure.
type DownloadModuleByVersionIDUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DownloadModuleByVersionIDUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadModuleByVersionIDUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDownloadModuleByVersionIDUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDownloadModuleByVersionIDUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDownloadModuleByVersionIDUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/modules/version/{versionId}/download] downloadModuleByVersionIdUsingGET", response, response.Code())
	}
}

// NewDownloadModuleByVersionIDUsingGETOK creates a DownloadModuleByVersionIDUsingGETOK with default headers values
func NewDownloadModuleByVersionIDUsingGETOK() *DownloadModuleByVersionIDUsingGETOK {
	return &DownloadModuleByVersionIDUsingGETOK{}
}

/*
DownloadModuleByVersionIDUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type DownloadModuleByVersionIDUsingGETOK struct {
	Payload *models.Resource
}

// IsSuccess returns true when this download module by version Id using g e t o k response has a 2xx status code
func (o *DownloadModuleByVersionIDUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this download module by version Id using g e t o k response has a 3xx status code
func (o *DownloadModuleByVersionIDUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by version Id using g e t o k response has a 4xx status code
func (o *DownloadModuleByVersionIDUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this download module by version Id using g e t o k response has a 5xx status code
func (o *DownloadModuleByVersionIDUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this download module by version Id using g e t o k response a status code equal to that given
func (o *DownloadModuleByVersionIDUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the download module by version Id using g e t o k response
func (o *DownloadModuleByVersionIDUsingGETOK) Code() int {
	return 200
}

func (o *DownloadModuleByVersionIDUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdUsingGETOK %s", 200, payload)
}

func (o *DownloadModuleByVersionIDUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdUsingGETOK %s", 200, payload)
}

func (o *DownloadModuleByVersionIDUsingGETOK) GetPayload() *models.Resource {
	return o.Payload
}

func (o *DownloadModuleByVersionIDUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Resource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadModuleByVersionIDUsingGETUnauthorized creates a DownloadModuleByVersionIDUsingGETUnauthorized with default headers values
func NewDownloadModuleByVersionIDUsingGETUnauthorized() *DownloadModuleByVersionIDUsingGETUnauthorized {
	return &DownloadModuleByVersionIDUsingGETUnauthorized{}
}

/*
DownloadModuleByVersionIDUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DownloadModuleByVersionIDUsingGETUnauthorized struct {
}

// IsSuccess returns true when this download module by version Id using g e t unauthorized response has a 2xx status code
func (o *DownloadModuleByVersionIDUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download module by version Id using g e t unauthorized response has a 3xx status code
func (o *DownloadModuleByVersionIDUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by version Id using g e t unauthorized response has a 4xx status code
func (o *DownloadModuleByVersionIDUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this download module by version Id using g e t unauthorized response has a 5xx status code
func (o *DownloadModuleByVersionIDUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this download module by version Id using g e t unauthorized response a status code equal to that given
func (o *DownloadModuleByVersionIDUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the download module by version Id using g e t unauthorized response
func (o *DownloadModuleByVersionIDUsingGETUnauthorized) Code() int {
	return 401
}

func (o *DownloadModuleByVersionIDUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdUsingGETUnauthorized", 401)
}

func (o *DownloadModuleByVersionIDUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdUsingGETUnauthorized", 401)
}

func (o *DownloadModuleByVersionIDUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadModuleByVersionIDUsingGETForbidden creates a DownloadModuleByVersionIDUsingGETForbidden with default headers values
func NewDownloadModuleByVersionIDUsingGETForbidden() *DownloadModuleByVersionIDUsingGETForbidden {
	return &DownloadModuleByVersionIDUsingGETForbidden{}
}

/*
DownloadModuleByVersionIDUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DownloadModuleByVersionIDUsingGETForbidden struct {
}

// IsSuccess returns true when this download module by version Id using g e t forbidden response has a 2xx status code
func (o *DownloadModuleByVersionIDUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download module by version Id using g e t forbidden response has a 3xx status code
func (o *DownloadModuleByVersionIDUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by version Id using g e t forbidden response has a 4xx status code
func (o *DownloadModuleByVersionIDUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this download module by version Id using g e t forbidden response has a 5xx status code
func (o *DownloadModuleByVersionIDUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this download module by version Id using g e t forbidden response a status code equal to that given
func (o *DownloadModuleByVersionIDUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the download module by version Id using g e t forbidden response
func (o *DownloadModuleByVersionIDUsingGETForbidden) Code() int {
	return 403
}

func (o *DownloadModuleByVersionIDUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdUsingGETForbidden", 403)
}

func (o *DownloadModuleByVersionIDUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdUsingGETForbidden", 403)
}

func (o *DownloadModuleByVersionIDUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadModuleByVersionIDUsingGETNotFound creates a DownloadModuleByVersionIDUsingGETNotFound with default headers values
func NewDownloadModuleByVersionIDUsingGETNotFound() *DownloadModuleByVersionIDUsingGETNotFound {
	return &DownloadModuleByVersionIDUsingGETNotFound{}
}

/*
DownloadModuleByVersionIDUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DownloadModuleByVersionIDUsingGETNotFound struct {
}

// IsSuccess returns true when this download module by version Id using g e t not found response has a 2xx status code
func (o *DownloadModuleByVersionIDUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download module by version Id using g e t not found response has a 3xx status code
func (o *DownloadModuleByVersionIDUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by version Id using g e t not found response has a 4xx status code
func (o *DownloadModuleByVersionIDUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this download module by version Id using g e t not found response has a 5xx status code
func (o *DownloadModuleByVersionIDUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this download module by version Id using g e t not found response a status code equal to that given
func (o *DownloadModuleByVersionIDUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the download module by version Id using g e t not found response
func (o *DownloadModuleByVersionIDUsingGETNotFound) Code() int {
	return 404
}

func (o *DownloadModuleByVersionIDUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdUsingGETNotFound", 404)
}

func (o *DownloadModuleByVersionIDUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdUsingGETNotFound", 404)
}

func (o *DownloadModuleByVersionIDUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
