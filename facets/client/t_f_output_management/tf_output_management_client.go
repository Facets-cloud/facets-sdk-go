// Code generated by go-swagger; DO NOT EDIT.

package t_f_output_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new t f output management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new t f output management API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new t f output management API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for t f output management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateOrUpdateOutput(params *CreateOrUpdateOutputParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrUpdateOutputOK, error)

	DeleteOutput(params *DeleteOutputParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOutputOK, error)

	GetAllOutputs(params *GetAllOutputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllOutputsOK, error)

	GetOutputByName(params *GetOutputByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOutputByNameOK, error)

	GetOutputsByProviderSource(params *GetOutputsByProviderSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOutputsByProviderSourceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateOrUpdateOutput create or update output API
*/
func (a *Client) CreateOrUpdateOutput(params *CreateOrUpdateOutputParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrUpdateOutputOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrUpdateOutputParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrUpdateOutput",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/tf-outputs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOrUpdateOutputReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrUpdateOutputOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrUpdateOutput: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteOutput delete output API
*/
func (a *Client) DeleteOutput(params *DeleteOutputParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOutputOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOutputParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOutput",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/tf-outputs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOutputReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOutputOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOutput: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllOutputs get all outputs API
*/
func (a *Client) GetAllOutputs(params *GetAllOutputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllOutputsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllOutputsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllOutputs",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/tf-outputs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllOutputsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllOutputsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllOutputs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOutputByName get output by name API
*/
func (a *Client) GetOutputByName(params *GetOutputByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOutputByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOutputByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOutputByName",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/tf-outputs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOutputByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOutputByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOutputByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOutputsByProviderSource gets all outputs that use a specific provider source
*/
func (a *Client) GetOutputsByProviderSource(params *GetOutputsByProviderSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOutputsByProviderSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOutputsByProviderSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOutputsByProviderSource",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/tf-outputs/provider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOutputsByProviderSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOutputsByProviderSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOutputsByProviderSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
