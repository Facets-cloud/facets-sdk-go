// Code generated by go-swagger; DO NOT EDIT.

package ui_web_component_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// NewUpdateComponentUsingPUTParams creates a new UpdateComponentUsingPUTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateComponentUsingPUTParams() *UpdateComponentUsingPUTParams {
	return &UpdateComponentUsingPUTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateComponentUsingPUTParamsWithTimeout creates a new UpdateComponentUsingPUTParams object
// with the ability to set a timeout on a request.
func NewUpdateComponentUsingPUTParamsWithTimeout(timeout time.Duration) *UpdateComponentUsingPUTParams {
	return &UpdateComponentUsingPUTParams{
		timeout: timeout,
	}
}

// NewUpdateComponentUsingPUTParamsWithContext creates a new UpdateComponentUsingPUTParams object
// with the ability to set a context for a request.
func NewUpdateComponentUsingPUTParamsWithContext(ctx context.Context) *UpdateComponentUsingPUTParams {
	return &UpdateComponentUsingPUTParams{
		Context: ctx,
	}
}

// NewUpdateComponentUsingPUTParamsWithHTTPClient creates a new UpdateComponentUsingPUTParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateComponentUsingPUTParamsWithHTTPClient(client *http.Client) *UpdateComponentUsingPUTParams {
	return &UpdateComponentUsingPUTParams{
		HTTPClient: client,
	}
}

/*
UpdateComponentUsingPUTParams contains all the parameters to send to the API endpoint

	for the update component using p u t operation.

	Typically these are written to a http.Request.
*/
type UpdateComponentUsingPUTParams struct {

	/* Component.

	   component
	*/
	Component *models.WebComponentDTO

	/* WebComponentID.

	   webComponentId
	*/
	WebComponentID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update component using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateComponentUsingPUTParams) WithDefaults() *UpdateComponentUsingPUTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update component using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateComponentUsingPUTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update component using p u t params
func (o *UpdateComponentUsingPUTParams) WithTimeout(timeout time.Duration) *UpdateComponentUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update component using p u t params
func (o *UpdateComponentUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update component using p u t params
func (o *UpdateComponentUsingPUTParams) WithContext(ctx context.Context) *UpdateComponentUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update component using p u t params
func (o *UpdateComponentUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update component using p u t params
func (o *UpdateComponentUsingPUTParams) WithHTTPClient(client *http.Client) *UpdateComponentUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update component using p u t params
func (o *UpdateComponentUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithComponent adds the component to the update component using p u t params
func (o *UpdateComponentUsingPUTParams) WithComponent(component *models.WebComponentDTO) *UpdateComponentUsingPUTParams {
	o.SetComponent(component)
	return o
}

// SetComponent adds the component to the update component using p u t params
func (o *UpdateComponentUsingPUTParams) SetComponent(component *models.WebComponentDTO) {
	o.Component = component
}

// WithWebComponentID adds the webComponentID to the update component using p u t params
func (o *UpdateComponentUsingPUTParams) WithWebComponentID(webComponentID string) *UpdateComponentUsingPUTParams {
	o.SetWebComponentID(webComponentID)
	return o
}

// SetWebComponentID adds the webComponentId to the update component using p u t params
func (o *UpdateComponentUsingPUTParams) SetWebComponentID(webComponentID string) {
	o.WebComponentID = webComponentID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateComponentUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Component != nil {
		if err := r.SetBodyParam(o.Component); err != nil {
			return err
		}
	}

	// path param webComponentId
	if err := r.SetPathParam("webComponentId", o.WebComponentID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
