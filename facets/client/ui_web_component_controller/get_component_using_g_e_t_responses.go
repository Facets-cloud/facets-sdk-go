// Code generated by go-swagger; DO NOT EDIT.

package ui_web_component_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetComponentUsingGETReader is a Reader for the GetComponentUsingGET structure.
type GetComponentUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetComponentUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetComponentUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetComponentUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetComponentUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetComponentUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/web-components/{webComponentId}] getComponentUsingGET", response, response.Code())
	}
}

// NewGetComponentUsingGETOK creates a GetComponentUsingGETOK with default headers values
func NewGetComponentUsingGETOK() *GetComponentUsingGETOK {
	return &GetComponentUsingGETOK{}
}

/*
GetComponentUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetComponentUsingGETOK struct {
	Payload *models.WebComponentDTO
}

// IsSuccess returns true when this get component using g e t o k response has a 2xx status code
func (o *GetComponentUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get component using g e t o k response has a 3xx status code
func (o *GetComponentUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component using g e t o k response has a 4xx status code
func (o *GetComponentUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get component using g e t o k response has a 5xx status code
func (o *GetComponentUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get component using g e t o k response a status code equal to that given
func (o *GetComponentUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get component using g e t o k response
func (o *GetComponentUsingGETOK) Code() int {
	return 200
}

func (o *GetComponentUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentUsingGETOK %s", 200, payload)
}

func (o *GetComponentUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentUsingGETOK %s", 200, payload)
}

func (o *GetComponentUsingGETOK) GetPayload() *models.WebComponentDTO {
	return o.Payload
}

func (o *GetComponentUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebComponentDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComponentUsingGETUnauthorized creates a GetComponentUsingGETUnauthorized with default headers values
func NewGetComponentUsingGETUnauthorized() *GetComponentUsingGETUnauthorized {
	return &GetComponentUsingGETUnauthorized{}
}

/*
GetComponentUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetComponentUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get component using g e t unauthorized response has a 2xx status code
func (o *GetComponentUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component using g e t unauthorized response has a 3xx status code
func (o *GetComponentUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component using g e t unauthorized response has a 4xx status code
func (o *GetComponentUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get component using g e t unauthorized response has a 5xx status code
func (o *GetComponentUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get component using g e t unauthorized response a status code equal to that given
func (o *GetComponentUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get component using g e t unauthorized response
func (o *GetComponentUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetComponentUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentUsingGETUnauthorized", 401)
}

func (o *GetComponentUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentUsingGETUnauthorized", 401)
}

func (o *GetComponentUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetComponentUsingGETForbidden creates a GetComponentUsingGETForbidden with default headers values
func NewGetComponentUsingGETForbidden() *GetComponentUsingGETForbidden {
	return &GetComponentUsingGETForbidden{}
}

/*
GetComponentUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetComponentUsingGETForbidden struct {
}

// IsSuccess returns true when this get component using g e t forbidden response has a 2xx status code
func (o *GetComponentUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component using g e t forbidden response has a 3xx status code
func (o *GetComponentUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component using g e t forbidden response has a 4xx status code
func (o *GetComponentUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get component using g e t forbidden response has a 5xx status code
func (o *GetComponentUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get component using g e t forbidden response a status code equal to that given
func (o *GetComponentUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get component using g e t forbidden response
func (o *GetComponentUsingGETForbidden) Code() int {
	return 403
}

func (o *GetComponentUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentUsingGETForbidden", 403)
}

func (o *GetComponentUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentUsingGETForbidden", 403)
}

func (o *GetComponentUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetComponentUsingGETNotFound creates a GetComponentUsingGETNotFound with default headers values
func NewGetComponentUsingGETNotFound() *GetComponentUsingGETNotFound {
	return &GetComponentUsingGETNotFound{}
}

/*
GetComponentUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetComponentUsingGETNotFound struct {
}

// IsSuccess returns true when this get component using g e t not found response has a 2xx status code
func (o *GetComponentUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component using g e t not found response has a 3xx status code
func (o *GetComponentUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component using g e t not found response has a 4xx status code
func (o *GetComponentUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get component using g e t not found response has a 5xx status code
func (o *GetComponentUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get component using g e t not found response a status code equal to that given
func (o *GetComponentUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get component using g e t not found response
func (o *GetComponentUsingGETNotFound) Code() int {
	return 404
}

func (o *GetComponentUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentUsingGETNotFound", 404)
}

func (o *GetComponentUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentUsingGETNotFound", 404)
}

func (o *GetComponentUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
