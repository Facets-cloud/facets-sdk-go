// Code generated by go-swagger; DO NOT EDIT.

package ui_web_component_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteComponentUsingDELETEReader is a Reader for the DeleteComponentUsingDELETE structure.
type DeleteComponentUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteComponentUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteComponentUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteComponentUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteComponentUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteComponentUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/web-components/{webComponentId}] deleteComponentUsingDELETE", response, response.Code())
	}
}

// NewDeleteComponentUsingDELETEOK creates a DeleteComponentUsingDELETEOK with default headers values
func NewDeleteComponentUsingDELETEOK() *DeleteComponentUsingDELETEOK {
	return &DeleteComponentUsingDELETEOK{}
}

/*
DeleteComponentUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteComponentUsingDELETEOK struct {
}

// IsSuccess returns true when this delete component using d e l e t e o k response has a 2xx status code
func (o *DeleteComponentUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete component using d e l e t e o k response has a 3xx status code
func (o *DeleteComponentUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete component using d e l e t e o k response has a 4xx status code
func (o *DeleteComponentUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete component using d e l e t e o k response has a 5xx status code
func (o *DeleteComponentUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete component using d e l e t e o k response a status code equal to that given
func (o *DeleteComponentUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete component using d e l e t e o k response
func (o *DeleteComponentUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteComponentUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/web-components/{webComponentId}][%d] deleteComponentUsingDELETEOK", 200)
}

func (o *DeleteComponentUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/web-components/{webComponentId}][%d] deleteComponentUsingDELETEOK", 200)
}

func (o *DeleteComponentUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteComponentUsingDELETENoContent creates a DeleteComponentUsingDELETENoContent with default headers values
func NewDeleteComponentUsingDELETENoContent() *DeleteComponentUsingDELETENoContent {
	return &DeleteComponentUsingDELETENoContent{}
}

/*
DeleteComponentUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteComponentUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete component using d e l e t e no content response has a 2xx status code
func (o *DeleteComponentUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete component using d e l e t e no content response has a 3xx status code
func (o *DeleteComponentUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete component using d e l e t e no content response has a 4xx status code
func (o *DeleteComponentUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete component using d e l e t e no content response has a 5xx status code
func (o *DeleteComponentUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete component using d e l e t e no content response a status code equal to that given
func (o *DeleteComponentUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete component using d e l e t e no content response
func (o *DeleteComponentUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteComponentUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/web-components/{webComponentId}][%d] deleteComponentUsingDELETENoContent", 204)
}

func (o *DeleteComponentUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/web-components/{webComponentId}][%d] deleteComponentUsingDELETENoContent", 204)
}

func (o *DeleteComponentUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteComponentUsingDELETEUnauthorized creates a DeleteComponentUsingDELETEUnauthorized with default headers values
func NewDeleteComponentUsingDELETEUnauthorized() *DeleteComponentUsingDELETEUnauthorized {
	return &DeleteComponentUsingDELETEUnauthorized{}
}

/*
DeleteComponentUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteComponentUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete component using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteComponentUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete component using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteComponentUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete component using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteComponentUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete component using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteComponentUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete component using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteComponentUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete component using d e l e t e unauthorized response
func (o *DeleteComponentUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteComponentUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/web-components/{webComponentId}][%d] deleteComponentUsingDELETEUnauthorized", 401)
}

func (o *DeleteComponentUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/web-components/{webComponentId}][%d] deleteComponentUsingDELETEUnauthorized", 401)
}

func (o *DeleteComponentUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteComponentUsingDELETEForbidden creates a DeleteComponentUsingDELETEForbidden with default headers values
func NewDeleteComponentUsingDELETEForbidden() *DeleteComponentUsingDELETEForbidden {
	return &DeleteComponentUsingDELETEForbidden{}
}

/*
DeleteComponentUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteComponentUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete component using d e l e t e forbidden response has a 2xx status code
func (o *DeleteComponentUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete component using d e l e t e forbidden response has a 3xx status code
func (o *DeleteComponentUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete component using d e l e t e forbidden response has a 4xx status code
func (o *DeleteComponentUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete component using d e l e t e forbidden response has a 5xx status code
func (o *DeleteComponentUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete component using d e l e t e forbidden response a status code equal to that given
func (o *DeleteComponentUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete component using d e l e t e forbidden response
func (o *DeleteComponentUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteComponentUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/web-components/{webComponentId}][%d] deleteComponentUsingDELETEForbidden", 403)
}

func (o *DeleteComponentUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/web-components/{webComponentId}][%d] deleteComponentUsingDELETEForbidden", 403)
}

func (o *DeleteComponentUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
