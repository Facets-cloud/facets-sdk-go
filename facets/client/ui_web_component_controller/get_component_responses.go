// Code generated by go-swagger; DO NOT EDIT.

package ui_web_component_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetComponentReader is a Reader for the GetComponent structure.
type GetComponentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetComponentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetComponentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetComponentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetComponentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetComponentMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetComponentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/web-components/{webComponentId}] getComponent", response, response.Code())
	}
}

// NewGetComponentOK creates a GetComponentOK with default headers values
func NewGetComponentOK() *GetComponentOK {
	return &GetComponentOK{}
}

/*
GetComponentOK describes a response with status code 200, with default header values.

OK
*/
type GetComponentOK struct {
	Payload *models.WebComponentDTO
}

// IsSuccess returns true when this get component o k response has a 2xx status code
func (o *GetComponentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get component o k response has a 3xx status code
func (o *GetComponentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component o k response has a 4xx status code
func (o *GetComponentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get component o k response has a 5xx status code
func (o *GetComponentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get component o k response a status code equal to that given
func (o *GetComponentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get component o k response
func (o *GetComponentOK) Code() int {
	return 200
}

func (o *GetComponentOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentOK %s", 200, payload)
}

func (o *GetComponentOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentOK %s", 200, payload)
}

func (o *GetComponentOK) GetPayload() *models.WebComponentDTO {
	return o.Payload
}

func (o *GetComponentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebComponentDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComponentBadRequest creates a GetComponentBadRequest with default headers values
func NewGetComponentBadRequest() *GetComponentBadRequest {
	return &GetComponentBadRequest{}
}

/*
GetComponentBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetComponentBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get component bad request response has a 2xx status code
func (o *GetComponentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component bad request response has a 3xx status code
func (o *GetComponentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component bad request response has a 4xx status code
func (o *GetComponentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get component bad request response has a 5xx status code
func (o *GetComponentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get component bad request response a status code equal to that given
func (o *GetComponentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get component bad request response
func (o *GetComponentBadRequest) Code() int {
	return 400
}

func (o *GetComponentBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentBadRequest %s", 400, payload)
}

func (o *GetComponentBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentBadRequest %s", 400, payload)
}

func (o *GetComponentBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetComponentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComponentNotFound creates a GetComponentNotFound with default headers values
func NewGetComponentNotFound() *GetComponentNotFound {
	return &GetComponentNotFound{}
}

/*
GetComponentNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetComponentNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get component not found response has a 2xx status code
func (o *GetComponentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component not found response has a 3xx status code
func (o *GetComponentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component not found response has a 4xx status code
func (o *GetComponentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get component not found response has a 5xx status code
func (o *GetComponentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get component not found response a status code equal to that given
func (o *GetComponentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get component not found response
func (o *GetComponentNotFound) Code() int {
	return 404
}

func (o *GetComponentNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentNotFound %s", 404, payload)
}

func (o *GetComponentNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentNotFound %s", 404, payload)
}

func (o *GetComponentNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetComponentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComponentMethodNotAllowed creates a GetComponentMethodNotAllowed with default headers values
func NewGetComponentMethodNotAllowed() *GetComponentMethodNotAllowed {
	return &GetComponentMethodNotAllowed{}
}

/*
GetComponentMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetComponentMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get component method not allowed response has a 2xx status code
func (o *GetComponentMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component method not allowed response has a 3xx status code
func (o *GetComponentMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component method not allowed response has a 4xx status code
func (o *GetComponentMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get component method not allowed response has a 5xx status code
func (o *GetComponentMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get component method not allowed response a status code equal to that given
func (o *GetComponentMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get component method not allowed response
func (o *GetComponentMethodNotAllowed) Code() int {
	return 405
}

func (o *GetComponentMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentMethodNotAllowed %s", 405, payload)
}

func (o *GetComponentMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentMethodNotAllowed %s", 405, payload)
}

func (o *GetComponentMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetComponentMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComponentInternalServerError creates a GetComponentInternalServerError with default headers values
func NewGetComponentInternalServerError() *GetComponentInternalServerError {
	return &GetComponentInternalServerError{}
}

/*
GetComponentInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetComponentInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get component internal server error response has a 2xx status code
func (o *GetComponentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component internal server error response has a 3xx status code
func (o *GetComponentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component internal server error response has a 4xx status code
func (o *GetComponentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get component internal server error response has a 5xx status code
func (o *GetComponentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get component internal server error response a status code equal to that given
func (o *GetComponentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get component internal server error response
func (o *GetComponentInternalServerError) Code() int {
	return 500
}

func (o *GetComponentInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentInternalServerError %s", 500, payload)
}

func (o *GetComponentInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/web-components/{webComponentId}][%d] getComponentInternalServerError %s", 500, payload)
}

func (o *GetComponentInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetComponentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
