// Code generated by go-swagger; DO NOT EDIT.

package meta_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetSupportedComponentVersionUsingGETReader is a Reader for the GetSupportedComponentVersionUsingGET structure.
type GetSupportedComponentVersionUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSupportedComponentVersionUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSupportedComponentVersionUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSupportedComponentVersionUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSupportedComponentVersionUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSupportedComponentVersionUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc/v1/meta/components/{componentType}/supportedVersion] getSupportedComponentVersionUsingGET", response, response.Code())
	}
}

// NewGetSupportedComponentVersionUsingGETOK creates a GetSupportedComponentVersionUsingGETOK with default headers values
func NewGetSupportedComponentVersionUsingGETOK() *GetSupportedComponentVersionUsingGETOK {
	return &GetSupportedComponentVersionUsingGETOK{}
}

/*
GetSupportedComponentVersionUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetSupportedComponentVersionUsingGETOK struct {
	Payload *models.SupportedVersions
}

// IsSuccess returns true when this get supported component version using g e t o k response has a 2xx status code
func (o *GetSupportedComponentVersionUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get supported component version using g e t o k response has a 3xx status code
func (o *GetSupportedComponentVersionUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get supported component version using g e t o k response has a 4xx status code
func (o *GetSupportedComponentVersionUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get supported component version using g e t o k response has a 5xx status code
func (o *GetSupportedComponentVersionUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get supported component version using g e t o k response a status code equal to that given
func (o *GetSupportedComponentVersionUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get supported component version using g e t o k response
func (o *GetSupportedComponentVersionUsingGETOK) Code() int {
	return 200
}

func (o *GetSupportedComponentVersionUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc/v1/meta/components/{componentType}/supportedVersion][%d] getSupportedComponentVersionUsingGETOK %s", 200, payload)
}

func (o *GetSupportedComponentVersionUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc/v1/meta/components/{componentType}/supportedVersion][%d] getSupportedComponentVersionUsingGETOK %s", 200, payload)
}

func (o *GetSupportedComponentVersionUsingGETOK) GetPayload() *models.SupportedVersions {
	return o.Payload
}

func (o *GetSupportedComponentVersionUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SupportedVersions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSupportedComponentVersionUsingGETUnauthorized creates a GetSupportedComponentVersionUsingGETUnauthorized with default headers values
func NewGetSupportedComponentVersionUsingGETUnauthorized() *GetSupportedComponentVersionUsingGETUnauthorized {
	return &GetSupportedComponentVersionUsingGETUnauthorized{}
}

/*
GetSupportedComponentVersionUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetSupportedComponentVersionUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get supported component version using g e t unauthorized response has a 2xx status code
func (o *GetSupportedComponentVersionUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get supported component version using g e t unauthorized response has a 3xx status code
func (o *GetSupportedComponentVersionUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get supported component version using g e t unauthorized response has a 4xx status code
func (o *GetSupportedComponentVersionUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get supported component version using g e t unauthorized response has a 5xx status code
func (o *GetSupportedComponentVersionUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get supported component version using g e t unauthorized response a status code equal to that given
func (o *GetSupportedComponentVersionUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get supported component version using g e t unauthorized response
func (o *GetSupportedComponentVersionUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetSupportedComponentVersionUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc/v1/meta/components/{componentType}/supportedVersion][%d] getSupportedComponentVersionUsingGETUnauthorized", 401)
}

func (o *GetSupportedComponentVersionUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc/v1/meta/components/{componentType}/supportedVersion][%d] getSupportedComponentVersionUsingGETUnauthorized", 401)
}

func (o *GetSupportedComponentVersionUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSupportedComponentVersionUsingGETForbidden creates a GetSupportedComponentVersionUsingGETForbidden with default headers values
func NewGetSupportedComponentVersionUsingGETForbidden() *GetSupportedComponentVersionUsingGETForbidden {
	return &GetSupportedComponentVersionUsingGETForbidden{}
}

/*
GetSupportedComponentVersionUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetSupportedComponentVersionUsingGETForbidden struct {
}

// IsSuccess returns true when this get supported component version using g e t forbidden response has a 2xx status code
func (o *GetSupportedComponentVersionUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get supported component version using g e t forbidden response has a 3xx status code
func (o *GetSupportedComponentVersionUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get supported component version using g e t forbidden response has a 4xx status code
func (o *GetSupportedComponentVersionUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get supported component version using g e t forbidden response has a 5xx status code
func (o *GetSupportedComponentVersionUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get supported component version using g e t forbidden response a status code equal to that given
func (o *GetSupportedComponentVersionUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get supported component version using g e t forbidden response
func (o *GetSupportedComponentVersionUsingGETForbidden) Code() int {
	return 403
}

func (o *GetSupportedComponentVersionUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc/v1/meta/components/{componentType}/supportedVersion][%d] getSupportedComponentVersionUsingGETForbidden", 403)
}

func (o *GetSupportedComponentVersionUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc/v1/meta/components/{componentType}/supportedVersion][%d] getSupportedComponentVersionUsingGETForbidden", 403)
}

func (o *GetSupportedComponentVersionUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSupportedComponentVersionUsingGETNotFound creates a GetSupportedComponentVersionUsingGETNotFound with default headers values
func NewGetSupportedComponentVersionUsingGETNotFound() *GetSupportedComponentVersionUsingGETNotFound {
	return &GetSupportedComponentVersionUsingGETNotFound{}
}

/*
GetSupportedComponentVersionUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetSupportedComponentVersionUsingGETNotFound struct {
}

// IsSuccess returns true when this get supported component version using g e t not found response has a 2xx status code
func (o *GetSupportedComponentVersionUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get supported component version using g e t not found response has a 3xx status code
func (o *GetSupportedComponentVersionUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get supported component version using g e t not found response has a 4xx status code
func (o *GetSupportedComponentVersionUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get supported component version using g e t not found response has a 5xx status code
func (o *GetSupportedComponentVersionUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get supported component version using g e t not found response a status code equal to that given
func (o *GetSupportedComponentVersionUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get supported component version using g e t not found response
func (o *GetSupportedComponentVersionUsingGETNotFound) Code() int {
	return 404
}

func (o *GetSupportedComponentVersionUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc/v1/meta/components/{componentType}/supportedVersion][%d] getSupportedComponentVersionUsingGETNotFound", 404)
}

func (o *GetSupportedComponentVersionUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc/v1/meta/components/{componentType}/supportedVersion][%d] getSupportedComponentVersionUsingGETNotFound", 404)
}

func (o *GetSupportedComponentVersionUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
