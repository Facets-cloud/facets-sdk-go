// Code generated by go-swagger; DO NOT EDIT.

package ui_maintenance_window_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// EnableDisableReader is a Reader for the EnableDisable structure.
type EnableDisableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnableDisableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnableDisableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnableDisableBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEnableDisableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewEnableDisableMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEnableDisableInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/maintenance-window/{clusterId}/enable-disable] enableDisable", response, response.Code())
	}
}

// NewEnableDisableOK creates a EnableDisableOK with default headers values
func NewEnableDisableOK() *EnableDisableOK {
	return &EnableDisableOK{}
}

/*
EnableDisableOK describes a response with status code 200, with default header values.

OK
*/
type EnableDisableOK struct {
	Payload *models.MaintenanceWindowDTO
}

// IsSuccess returns true when this enable disable o k response has a 2xx status code
func (o *EnableDisableOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enable disable o k response has a 3xx status code
func (o *EnableDisableOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable disable o k response has a 4xx status code
func (o *EnableDisableOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable disable o k response has a 5xx status code
func (o *EnableDisableOK) IsServerError() bool {
	return false
}

// IsCode returns true when this enable disable o k response a status code equal to that given
func (o *EnableDisableOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the enable disable o k response
func (o *EnableDisableOK) Code() int {
	return 200
}

func (o *EnableDisableOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window/{clusterId}/enable-disable][%d] enableDisableOK %s", 200, payload)
}

func (o *EnableDisableOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window/{clusterId}/enable-disable][%d] enableDisableOK %s", 200, payload)
}

func (o *EnableDisableOK) GetPayload() *models.MaintenanceWindowDTO {
	return o.Payload
}

func (o *EnableDisableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MaintenanceWindowDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableDisableBadRequest creates a EnableDisableBadRequest with default headers values
func NewEnableDisableBadRequest() *EnableDisableBadRequest {
	return &EnableDisableBadRequest{}
}

/*
EnableDisableBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type EnableDisableBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this enable disable bad request response has a 2xx status code
func (o *EnableDisableBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable disable bad request response has a 3xx status code
func (o *EnableDisableBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable disable bad request response has a 4xx status code
func (o *EnableDisableBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable disable bad request response has a 5xx status code
func (o *EnableDisableBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this enable disable bad request response a status code equal to that given
func (o *EnableDisableBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the enable disable bad request response
func (o *EnableDisableBadRequest) Code() int {
	return 400
}

func (o *EnableDisableBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window/{clusterId}/enable-disable][%d] enableDisableBadRequest %s", 400, payload)
}

func (o *EnableDisableBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window/{clusterId}/enable-disable][%d] enableDisableBadRequest %s", 400, payload)
}

func (o *EnableDisableBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *EnableDisableBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableDisableNotFound creates a EnableDisableNotFound with default headers values
func NewEnableDisableNotFound() *EnableDisableNotFound {
	return &EnableDisableNotFound{}
}

/*
EnableDisableNotFound describes a response with status code 404, with default header values.

Not Found
*/
type EnableDisableNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this enable disable not found response has a 2xx status code
func (o *EnableDisableNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable disable not found response has a 3xx status code
func (o *EnableDisableNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable disable not found response has a 4xx status code
func (o *EnableDisableNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable disable not found response has a 5xx status code
func (o *EnableDisableNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this enable disable not found response a status code equal to that given
func (o *EnableDisableNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the enable disable not found response
func (o *EnableDisableNotFound) Code() int {
	return 404
}

func (o *EnableDisableNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window/{clusterId}/enable-disable][%d] enableDisableNotFound %s", 404, payload)
}

func (o *EnableDisableNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window/{clusterId}/enable-disable][%d] enableDisableNotFound %s", 404, payload)
}

func (o *EnableDisableNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *EnableDisableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableDisableMethodNotAllowed creates a EnableDisableMethodNotAllowed with default headers values
func NewEnableDisableMethodNotAllowed() *EnableDisableMethodNotAllowed {
	return &EnableDisableMethodNotAllowed{}
}

/*
EnableDisableMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type EnableDisableMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this enable disable method not allowed response has a 2xx status code
func (o *EnableDisableMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable disable method not allowed response has a 3xx status code
func (o *EnableDisableMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable disable method not allowed response has a 4xx status code
func (o *EnableDisableMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable disable method not allowed response has a 5xx status code
func (o *EnableDisableMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this enable disable method not allowed response a status code equal to that given
func (o *EnableDisableMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the enable disable method not allowed response
func (o *EnableDisableMethodNotAllowed) Code() int {
	return 405
}

func (o *EnableDisableMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window/{clusterId}/enable-disable][%d] enableDisableMethodNotAllowed %s", 405, payload)
}

func (o *EnableDisableMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window/{clusterId}/enable-disable][%d] enableDisableMethodNotAllowed %s", 405, payload)
}

func (o *EnableDisableMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *EnableDisableMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableDisableInternalServerError creates a EnableDisableInternalServerError with default headers values
func NewEnableDisableInternalServerError() *EnableDisableInternalServerError {
	return &EnableDisableInternalServerError{}
}

/*
EnableDisableInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type EnableDisableInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this enable disable internal server error response has a 2xx status code
func (o *EnableDisableInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable disable internal server error response has a 3xx status code
func (o *EnableDisableInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable disable internal server error response has a 4xx status code
func (o *EnableDisableInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable disable internal server error response has a 5xx status code
func (o *EnableDisableInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this enable disable internal server error response a status code equal to that given
func (o *EnableDisableInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the enable disable internal server error response
func (o *EnableDisableInternalServerError) Code() int {
	return 500
}

func (o *EnableDisableInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window/{clusterId}/enable-disable][%d] enableDisableInternalServerError %s", 500, payload)
}

func (o *EnableDisableInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window/{clusterId}/enable-disable][%d] enableDisableInternalServerError %s", 500, payload)
}

func (o *EnableDisableInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *EnableDisableInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
