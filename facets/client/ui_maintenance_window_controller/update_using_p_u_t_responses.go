// Code generated by go-swagger; DO NOT EDIT.

package ui_maintenance_window_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateUsingPUTReader is a Reader for the UpdateUsingPUT structure.
type UpdateUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/maintenance-window] updateUsingPUT", response, response.Code())
	}
}

// NewUpdateUsingPUTOK creates a UpdateUsingPUTOK with default headers values
func NewUpdateUsingPUTOK() *UpdateUsingPUTOK {
	return &UpdateUsingPUTOK{}
}

/*
UpdateUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateUsingPUTOK struct {
	Payload *models.MaintenanceWindowDTO
}

// IsSuccess returns true when this update using p u t o k response has a 2xx status code
func (o *UpdateUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update using p u t o k response has a 3xx status code
func (o *UpdateUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update using p u t o k response has a 4xx status code
func (o *UpdateUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update using p u t o k response has a 5xx status code
func (o *UpdateUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update using p u t o k response a status code equal to that given
func (o *UpdateUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update using p u t o k response
func (o *UpdateUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window][%d] updateUsingPUTOK %s", 200, payload)
}

func (o *UpdateUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window][%d] updateUsingPUTOK %s", 200, payload)
}

func (o *UpdateUsingPUTOK) GetPayload() *models.MaintenanceWindowDTO {
	return o.Payload
}

func (o *UpdateUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MaintenanceWindowDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUsingPUTCreated creates a UpdateUsingPUTCreated with default headers values
func NewUpdateUsingPUTCreated() *UpdateUsingPUTCreated {
	return &UpdateUsingPUTCreated{}
}

/*
UpdateUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateUsingPUTCreated struct {
}

// IsSuccess returns true when this update using p u t created response has a 2xx status code
func (o *UpdateUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update using p u t created response has a 3xx status code
func (o *UpdateUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update using p u t created response has a 4xx status code
func (o *UpdateUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update using p u t created response has a 5xx status code
func (o *UpdateUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update using p u t created response a status code equal to that given
func (o *UpdateUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update using p u t created response
func (o *UpdateUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window][%d] updateUsingPUTCreated", 201)
}

func (o *UpdateUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window][%d] updateUsingPUTCreated", 201)
}

func (o *UpdateUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUsingPUTUnauthorized creates a UpdateUsingPUTUnauthorized with default headers values
func NewUpdateUsingPUTUnauthorized() *UpdateUsingPUTUnauthorized {
	return &UpdateUsingPUTUnauthorized{}
}

/*
UpdateUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update using p u t unauthorized response has a 2xx status code
func (o *UpdateUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update using p u t unauthorized response has a 3xx status code
func (o *UpdateUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update using p u t unauthorized response has a 4xx status code
func (o *UpdateUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update using p u t unauthorized response has a 5xx status code
func (o *UpdateUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update using p u t unauthorized response a status code equal to that given
func (o *UpdateUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update using p u t unauthorized response
func (o *UpdateUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window][%d] updateUsingPUTUnauthorized", 401)
}

func (o *UpdateUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window][%d] updateUsingPUTUnauthorized", 401)
}

func (o *UpdateUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUsingPUTForbidden creates a UpdateUsingPUTForbidden with default headers values
func NewUpdateUsingPUTForbidden() *UpdateUsingPUTForbidden {
	return &UpdateUsingPUTForbidden{}
}

/*
UpdateUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateUsingPUTForbidden struct {
}

// IsSuccess returns true when this update using p u t forbidden response has a 2xx status code
func (o *UpdateUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update using p u t forbidden response has a 3xx status code
func (o *UpdateUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update using p u t forbidden response has a 4xx status code
func (o *UpdateUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update using p u t forbidden response has a 5xx status code
func (o *UpdateUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update using p u t forbidden response a status code equal to that given
func (o *UpdateUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update using p u t forbidden response
func (o *UpdateUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window][%d] updateUsingPUTForbidden", 403)
}

func (o *UpdateUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window][%d] updateUsingPUTForbidden", 403)
}

func (o *UpdateUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUsingPUTNotFound creates a UpdateUsingPUTNotFound with default headers values
func NewUpdateUsingPUTNotFound() *UpdateUsingPUTNotFound {
	return &UpdateUsingPUTNotFound{}
}

/*
UpdateUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateUsingPUTNotFound struct {
}

// IsSuccess returns true when this update using p u t not found response has a 2xx status code
func (o *UpdateUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update using p u t not found response has a 3xx status code
func (o *UpdateUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update using p u t not found response has a 4xx status code
func (o *UpdateUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update using p u t not found response has a 5xx status code
func (o *UpdateUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update using p u t not found response a status code equal to that given
func (o *UpdateUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update using p u t not found response
func (o *UpdateUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window][%d] updateUsingPUTNotFound", 404)
}

func (o *UpdateUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/maintenance-window][%d] updateUsingPUTNotFound", 404)
}

func (o *UpdateUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
