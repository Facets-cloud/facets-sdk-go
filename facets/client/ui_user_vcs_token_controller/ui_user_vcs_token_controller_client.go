// Code generated by go-swagger; DO NOT EDIT.

package ui_user_vcs_token_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui user vcs token controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui user vcs token controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui user vcs token controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui user vcs token controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddUsingPOST1(params *AddUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUsingPOST1OK, *AddUsingPOST1Created, error)

	DeleteUsingDELETE2(params *DeleteUsingDELETE2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUsingDELETE2OK, *DeleteUsingDELETE2NoContent, error)

	GetAllUsingGET5(params *GetAllUsingGET5Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUsingGET5OK, error)

	UpdateUsingPUT2(params *UpdateUsingPUT2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUsingPUT2OK, *UpdateUsingPUT2Created, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddUsingPOST1 adds
*/
func (a *Client) AddUsingPOST1(params *AddUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUsingPOST1OK, *AddUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "addUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/user-token",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddUsingPOST1OK:
		return value, nil, nil
	case *AddUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_user_vcs_token_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUsingDELETE2 deletes
*/
func (a *Client) DeleteUsingDELETE2(params *DeleteUsingDELETE2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUsingDELETE2OK, *DeleteUsingDELETE2NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_2",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/user-token/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUsingDELETE2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteUsingDELETE2OK:
		return value, nil, nil
	case *DeleteUsingDELETE2NoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_user_vcs_token_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllUsingGET5 gets all
*/
func (a *Client) GetAllUsingGET5(params *GetAllUsingGET5Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUsingGET5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGET5Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUsingGET_5",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/user-token",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllUsingGET5Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGET5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET_5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUsingPUT2 updates
*/
func (a *Client) UpdateUsingPUT2(params *UpdateUsingPUT2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUsingPUT2OK, *UpdateUsingPUT2Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUT2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUsingPUT_2",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/user-token",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUsingPUT2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateUsingPUT2OK:
		return value, nil, nil
	case *UpdateUsingPUT2Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_user_vcs_token_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
