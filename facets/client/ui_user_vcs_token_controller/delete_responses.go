// Code generated by go-swagger; DO NOT EDIT.

package ui_user_vcs_token_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteReader is a Reader for the Delete structure.
type DeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/user-token/{id}] delete", response, response.Code())
	}
}

// NewDeleteOK creates a DeleteOK with default headers values
func NewDeleteOK() *DeleteOK {
	return &DeleteOK{}
}

/*
DeleteOK describes a response with status code 200, with default header values.

OK
*/
type DeleteOK struct {
}

// IsSuccess returns true when this delete o k response has a 2xx status code
func (o *DeleteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete o k response has a 3xx status code
func (o *DeleteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete o k response has a 4xx status code
func (o *DeleteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete o k response has a 5xx status code
func (o *DeleteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete o k response a status code equal to that given
func (o *DeleteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete o k response
func (o *DeleteOK) Code() int {
	return 200
}

func (o *DeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-token/{id}][%d] deleteOK", 200)
}

func (o *DeleteOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-token/{id}][%d] deleteOK", 200)
}

func (o *DeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteBadRequest creates a DeleteBadRequest with default headers values
func NewDeleteBadRequest() *DeleteBadRequest {
	return &DeleteBadRequest{}
}

/*
DeleteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete bad request response has a 2xx status code
func (o *DeleteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete bad request response has a 3xx status code
func (o *DeleteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete bad request response has a 4xx status code
func (o *DeleteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete bad request response has a 5xx status code
func (o *DeleteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete bad request response a status code equal to that given
func (o *DeleteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete bad request response
func (o *DeleteBadRequest) Code() int {
	return 400
}

func (o *DeleteBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-token/{id}][%d] deleteBadRequest %s", 400, payload)
}

func (o *DeleteBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-token/{id}][%d] deleteBadRequest %s", 400, payload)
}

func (o *DeleteBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotFound creates a DeleteNotFound with default headers values
func NewDeleteNotFound() *DeleteNotFound {
	return &DeleteNotFound{}
}

/*
DeleteNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete not found response has a 2xx status code
func (o *DeleteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete not found response has a 3xx status code
func (o *DeleteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete not found response has a 4xx status code
func (o *DeleteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete not found response has a 5xx status code
func (o *DeleteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete not found response a status code equal to that given
func (o *DeleteNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete not found response
func (o *DeleteNotFound) Code() int {
	return 404
}

func (o *DeleteNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-token/{id}][%d] deleteNotFound %s", 404, payload)
}

func (o *DeleteNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-token/{id}][%d] deleteNotFound %s", 404, payload)
}

func (o *DeleteNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMethodNotAllowed creates a DeleteMethodNotAllowed with default headers values
func NewDeleteMethodNotAllowed() *DeleteMethodNotAllowed {
	return &DeleteMethodNotAllowed{}
}

/*
DeleteMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DeleteMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete method not allowed response has a 2xx status code
func (o *DeleteMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete method not allowed response has a 3xx status code
func (o *DeleteMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete method not allowed response has a 4xx status code
func (o *DeleteMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete method not allowed response has a 5xx status code
func (o *DeleteMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete method not allowed response a status code equal to that given
func (o *DeleteMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the delete method not allowed response
func (o *DeleteMethodNotAllowed) Code() int {
	return 405
}

func (o *DeleteMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-token/{id}][%d] deleteMethodNotAllowed %s", 405, payload)
}

func (o *DeleteMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-token/{id}][%d] deleteMethodNotAllowed %s", 405, payload)
}

func (o *DeleteMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInternalServerError creates a DeleteInternalServerError with default headers values
func NewDeleteInternalServerError() *DeleteInternalServerError {
	return &DeleteInternalServerError{}
}

/*
DeleteInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete internal server error response has a 2xx status code
func (o *DeleteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete internal server error response has a 3xx status code
func (o *DeleteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete internal server error response has a 4xx status code
func (o *DeleteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete internal server error response has a 5xx status code
func (o *DeleteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete internal server error response a status code equal to that given
func (o *DeleteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete internal server error response
func (o *DeleteInternalServerError) Code() int {
	return 500
}

func (o *DeleteInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-token/{id}][%d] deleteInternalServerError %s", 500, payload)
}

func (o *DeleteInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-token/{id}][%d] deleteInternalServerError %s", 500, payload)
}

func (o *DeleteInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
