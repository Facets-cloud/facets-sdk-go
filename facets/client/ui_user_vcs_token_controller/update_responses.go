// Code generated by go-swagger; DO NOT EDIT.

package ui_user_vcs_token_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateReader is a Reader for the Update structure.
type UpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/user-token] update", response, response.Code())
	}
}

// NewUpdateOK creates a UpdateOK with default headers values
func NewUpdateOK() *UpdateOK {
	return &UpdateOK{}
}

/*
UpdateOK describes a response with status code 200, with default header values.

OK
*/
type UpdateOK struct {
	Payload *models.UserVCSTokenResponse
}

// IsSuccess returns true when this update o k response has a 2xx status code
func (o *UpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update o k response has a 3xx status code
func (o *UpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update o k response has a 4xx status code
func (o *UpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update o k response has a 5xx status code
func (o *UpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update o k response a status code equal to that given
func (o *UpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update o k response
func (o *UpdateOK) Code() int {
	return 200
}

func (o *UpdateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-token][%d] updateOK %s", 200, payload)
}

func (o *UpdateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-token][%d] updateOK %s", 200, payload)
}

func (o *UpdateOK) GetPayload() *models.UserVCSTokenResponse {
	return o.Payload
}

func (o *UpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserVCSTokenResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBadRequest creates a UpdateBadRequest with default headers values
func NewUpdateBadRequest() *UpdateBadRequest {
	return &UpdateBadRequest{}
}

/*
UpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update bad request response has a 2xx status code
func (o *UpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update bad request response has a 3xx status code
func (o *UpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update bad request response has a 4xx status code
func (o *UpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update bad request response has a 5xx status code
func (o *UpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update bad request response a status code equal to that given
func (o *UpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update bad request response
func (o *UpdateBadRequest) Code() int {
	return 400
}

func (o *UpdateBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-token][%d] updateBadRequest %s", 400, payload)
}

func (o *UpdateBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-token][%d] updateBadRequest %s", 400, payload)
}

func (o *UpdateBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNotFound creates a UpdateNotFound with default headers values
func NewUpdateNotFound() *UpdateNotFound {
	return &UpdateNotFound{}
}

/*
UpdateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update not found response has a 2xx status code
func (o *UpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update not found response has a 3xx status code
func (o *UpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update not found response has a 4xx status code
func (o *UpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update not found response has a 5xx status code
func (o *UpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update not found response a status code equal to that given
func (o *UpdateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update not found response
func (o *UpdateNotFound) Code() int {
	return 404
}

func (o *UpdateNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-token][%d] updateNotFound %s", 404, payload)
}

func (o *UpdateNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-token][%d] updateNotFound %s", 404, payload)
}

func (o *UpdateNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMethodNotAllowed creates a UpdateMethodNotAllowed with default headers values
func NewUpdateMethodNotAllowed() *UpdateMethodNotAllowed {
	return &UpdateMethodNotAllowed{}
}

/*
UpdateMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update method not allowed response has a 2xx status code
func (o *UpdateMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update method not allowed response has a 3xx status code
func (o *UpdateMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update method not allowed response has a 4xx status code
func (o *UpdateMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update method not allowed response has a 5xx status code
func (o *UpdateMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update method not allowed response a status code equal to that given
func (o *UpdateMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update method not allowed response
func (o *UpdateMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-token][%d] updateMethodNotAllowed %s", 405, payload)
}

func (o *UpdateMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-token][%d] updateMethodNotAllowed %s", 405, payload)
}

func (o *UpdateMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInternalServerError creates a UpdateInternalServerError with default headers values
func NewUpdateInternalServerError() *UpdateInternalServerError {
	return &UpdateInternalServerError{}
}

/*
UpdateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update internal server error response has a 2xx status code
func (o *UpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update internal server error response has a 3xx status code
func (o *UpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update internal server error response has a 4xx status code
func (o *UpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update internal server error response has a 5xx status code
func (o *UpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update internal server error response a status code equal to that given
func (o *UpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update internal server error response
func (o *UpdateInternalServerError) Code() int {
	return 500
}

func (o *UpdateInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-token][%d] updateInternalServerError %s", 500, payload)
}

func (o *UpdateInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-token][%d] updateInternalServerError %s", 500, payload)
}

func (o *UpdateInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
