// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// StackSyncWithGitReader is a Reader for the StackSyncWithGit structure.
type StackSyncWithGitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StackSyncWithGitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStackSyncWithGitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStackSyncWithGitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStackSyncWithGitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewStackSyncWithGitMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStackSyncWithGitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2] stackSyncWithGit", response, response.Code())
	}
}

// NewStackSyncWithGitOK creates a StackSyncWithGitOK with default headers values
func NewStackSyncWithGitOK() *StackSyncWithGitOK {
	return &StackSyncWithGitOK{}
}

/*
StackSyncWithGitOK describes a response with status code 200, with default header values.

OK
*/
type StackSyncWithGitOK struct {
}

// IsSuccess returns true when this stack sync with git o k response has a 2xx status code
func (o *StackSyncWithGitOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stack sync with git o k response has a 3xx status code
func (o *StackSyncWithGitOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack sync with git o k response has a 4xx status code
func (o *StackSyncWithGitOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stack sync with git o k response has a 5xx status code
func (o *StackSyncWithGitOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stack sync with git o k response a status code equal to that given
func (o *StackSyncWithGitOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stack sync with git o k response
func (o *StackSyncWithGitOK) Code() int {
	return 200
}

func (o *StackSyncWithGitOK) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitOK", 200)
}

func (o *StackSyncWithGitOK) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitOK", 200)
}

func (o *StackSyncWithGitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStackSyncWithGitBadRequest creates a StackSyncWithGitBadRequest with default headers values
func NewStackSyncWithGitBadRequest() *StackSyncWithGitBadRequest {
	return &StackSyncWithGitBadRequest{}
}

/*
StackSyncWithGitBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StackSyncWithGitBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this stack sync with git bad request response has a 2xx status code
func (o *StackSyncWithGitBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack sync with git bad request response has a 3xx status code
func (o *StackSyncWithGitBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack sync with git bad request response has a 4xx status code
func (o *StackSyncWithGitBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stack sync with git bad request response has a 5xx status code
func (o *StackSyncWithGitBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stack sync with git bad request response a status code equal to that given
func (o *StackSyncWithGitBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the stack sync with git bad request response
func (o *StackSyncWithGitBadRequest) Code() int {
	return 400
}

func (o *StackSyncWithGitBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitBadRequest %s", 400, payload)
}

func (o *StackSyncWithGitBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitBadRequest %s", 400, payload)
}

func (o *StackSyncWithGitBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *StackSyncWithGitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackSyncWithGitNotFound creates a StackSyncWithGitNotFound with default headers values
func NewStackSyncWithGitNotFound() *StackSyncWithGitNotFound {
	return &StackSyncWithGitNotFound{}
}

/*
StackSyncWithGitNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StackSyncWithGitNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this stack sync with git not found response has a 2xx status code
func (o *StackSyncWithGitNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack sync with git not found response has a 3xx status code
func (o *StackSyncWithGitNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack sync with git not found response has a 4xx status code
func (o *StackSyncWithGitNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stack sync with git not found response has a 5xx status code
func (o *StackSyncWithGitNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stack sync with git not found response a status code equal to that given
func (o *StackSyncWithGitNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stack sync with git not found response
func (o *StackSyncWithGitNotFound) Code() int {
	return 404
}

func (o *StackSyncWithGitNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitNotFound %s", 404, payload)
}

func (o *StackSyncWithGitNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitNotFound %s", 404, payload)
}

func (o *StackSyncWithGitNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *StackSyncWithGitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackSyncWithGitMethodNotAllowed creates a StackSyncWithGitMethodNotAllowed with default headers values
func NewStackSyncWithGitMethodNotAllowed() *StackSyncWithGitMethodNotAllowed {
	return &StackSyncWithGitMethodNotAllowed{}
}

/*
StackSyncWithGitMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type StackSyncWithGitMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this stack sync with git method not allowed response has a 2xx status code
func (o *StackSyncWithGitMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack sync with git method not allowed response has a 3xx status code
func (o *StackSyncWithGitMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack sync with git method not allowed response has a 4xx status code
func (o *StackSyncWithGitMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this stack sync with git method not allowed response has a 5xx status code
func (o *StackSyncWithGitMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this stack sync with git method not allowed response a status code equal to that given
func (o *StackSyncWithGitMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the stack sync with git method not allowed response
func (o *StackSyncWithGitMethodNotAllowed) Code() int {
	return 405
}

func (o *StackSyncWithGitMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitMethodNotAllowed %s", 405, payload)
}

func (o *StackSyncWithGitMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitMethodNotAllowed %s", 405, payload)
}

func (o *StackSyncWithGitMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *StackSyncWithGitMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStackSyncWithGitInternalServerError creates a StackSyncWithGitInternalServerError with default headers values
func NewStackSyncWithGitInternalServerError() *StackSyncWithGitInternalServerError {
	return &StackSyncWithGitInternalServerError{}
}

/*
StackSyncWithGitInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type StackSyncWithGitInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this stack sync with git internal server error response has a 2xx status code
func (o *StackSyncWithGitInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack sync with git internal server error response has a 3xx status code
func (o *StackSyncWithGitInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack sync with git internal server error response has a 4xx status code
func (o *StackSyncWithGitInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stack sync with git internal server error response has a 5xx status code
func (o *StackSyncWithGitInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stack sync with git internal server error response a status code equal to that given
func (o *StackSyncWithGitInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the stack sync with git internal server error response
func (o *StackSyncWithGitInternalServerError) Code() int {
	return 500
}

func (o *StackSyncWithGitInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitInternalServerError %s", 500, payload)
}

func (o *StackSyncWithGitInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitInternalServerError %s", 500, payload)
}

func (o *StackSyncWithGitInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *StackSyncWithGitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
