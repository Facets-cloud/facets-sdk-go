// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// NewCreateSubStackUsingPOSTParams creates a new CreateSubStackUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateSubStackUsingPOSTParams() *CreateSubStackUsingPOSTParams {
	return &CreateSubStackUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateSubStackUsingPOSTParamsWithTimeout creates a new CreateSubStackUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewCreateSubStackUsingPOSTParamsWithTimeout(timeout time.Duration) *CreateSubStackUsingPOSTParams {
	return &CreateSubStackUsingPOSTParams{
		timeout: timeout,
	}
}

// NewCreateSubStackUsingPOSTParamsWithContext creates a new CreateSubStackUsingPOSTParams object
// with the ability to set a context for a request.
func NewCreateSubStackUsingPOSTParamsWithContext(ctx context.Context) *CreateSubStackUsingPOSTParams {
	return &CreateSubStackUsingPOSTParams{
		Context: ctx,
	}
}

// NewCreateSubStackUsingPOSTParamsWithHTTPClient creates a new CreateSubStackUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateSubStackUsingPOSTParamsWithHTTPClient(client *http.Client) *CreateSubStackUsingPOSTParams {
	return &CreateSubStackUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
CreateSubStackUsingPOSTParams contains all the parameters to send to the API endpoint

	for the create sub stack using p o s t operation.

	Typically these are written to a http.Request.
*/
type CreateSubStackUsingPOSTParams struct {

	/* SubStack.

	   subStack
	*/
	SubStack *models.SubstackRequest

	/* SubstackName.

	   substackName
	*/
	SubstackName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create sub stack using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateSubStackUsingPOSTParams) WithDefaults() *CreateSubStackUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create sub stack using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateSubStackUsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create sub stack using p o s t params
func (o *CreateSubStackUsingPOSTParams) WithTimeout(timeout time.Duration) *CreateSubStackUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create sub stack using p o s t params
func (o *CreateSubStackUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create sub stack using p o s t params
func (o *CreateSubStackUsingPOSTParams) WithContext(ctx context.Context) *CreateSubStackUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create sub stack using p o s t params
func (o *CreateSubStackUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create sub stack using p o s t params
func (o *CreateSubStackUsingPOSTParams) WithHTTPClient(client *http.Client) *CreateSubStackUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create sub stack using p o s t params
func (o *CreateSubStackUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSubStack adds the subStack to the create sub stack using p o s t params
func (o *CreateSubStackUsingPOSTParams) WithSubStack(subStack *models.SubstackRequest) *CreateSubStackUsingPOSTParams {
	o.SetSubStack(subStack)
	return o
}

// SetSubStack adds the subStack to the create sub stack using p o s t params
func (o *CreateSubStackUsingPOSTParams) SetSubStack(subStack *models.SubstackRequest) {
	o.SubStack = subStack
}

// WithSubstackName adds the substackName to the create sub stack using p o s t params
func (o *CreateSubStackUsingPOSTParams) WithSubstackName(substackName string) *CreateSubStackUsingPOSTParams {
	o.SetSubstackName(substackName)
	return o
}

// SetSubstackName adds the substackName to the create sub stack using p o s t params
func (o *CreateSubStackUsingPOSTParams) SetSubstackName(substackName string) {
	o.SubstackName = substackName
}

// WriteToRequest writes these params to a swagger request
func (o *CreateSubStackUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.SubStack != nil {
		if err := r.SetBodyParam(o.SubStack); err != nil {
			return err
		}
	}

	// path param substackName
	if err := r.SetPathParam("substackName", o.SubstackName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
