// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// MigrateOverridesToGitReader is a Reader for the MigrateOverridesToGit structure.
type MigrateOverridesToGitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MigrateOverridesToGitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMigrateOverridesToGitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMigrateOverridesToGitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMigrateOverridesToGitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewMigrateOverridesToGitMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMigrateOverridesToGitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/stacks/migrate-overrides] migrateOverridesToGit", response, response.Code())
	}
}

// NewMigrateOverridesToGitOK creates a MigrateOverridesToGitOK with default headers values
func NewMigrateOverridesToGitOK() *MigrateOverridesToGitOK {
	return &MigrateOverridesToGitOK{}
}

/*
MigrateOverridesToGitOK describes a response with status code 200, with default header values.

OK
*/
type MigrateOverridesToGitOK struct {
}

// IsSuccess returns true when this migrate overrides to git o k response has a 2xx status code
func (o *MigrateOverridesToGitOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this migrate overrides to git o k response has a 3xx status code
func (o *MigrateOverridesToGitOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this migrate overrides to git o k response has a 4xx status code
func (o *MigrateOverridesToGitOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this migrate overrides to git o k response has a 5xx status code
func (o *MigrateOverridesToGitOK) IsServerError() bool {
	return false
}

// IsCode returns true when this migrate overrides to git o k response a status code equal to that given
func (o *MigrateOverridesToGitOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the migrate overrides to git o k response
func (o *MigrateOverridesToGitOK) Code() int {
	return 200
}

func (o *MigrateOverridesToGitOK) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/migrate-overrides][%d] migrateOverridesToGitOK", 200)
}

func (o *MigrateOverridesToGitOK) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/migrate-overrides][%d] migrateOverridesToGitOK", 200)
}

func (o *MigrateOverridesToGitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMigrateOverridesToGitBadRequest creates a MigrateOverridesToGitBadRequest with default headers values
func NewMigrateOverridesToGitBadRequest() *MigrateOverridesToGitBadRequest {
	return &MigrateOverridesToGitBadRequest{}
}

/*
MigrateOverridesToGitBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type MigrateOverridesToGitBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this migrate overrides to git bad request response has a 2xx status code
func (o *MigrateOverridesToGitBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this migrate overrides to git bad request response has a 3xx status code
func (o *MigrateOverridesToGitBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this migrate overrides to git bad request response has a 4xx status code
func (o *MigrateOverridesToGitBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this migrate overrides to git bad request response has a 5xx status code
func (o *MigrateOverridesToGitBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this migrate overrides to git bad request response a status code equal to that given
func (o *MigrateOverridesToGitBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the migrate overrides to git bad request response
func (o *MigrateOverridesToGitBadRequest) Code() int {
	return 400
}

func (o *MigrateOverridesToGitBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/migrate-overrides][%d] migrateOverridesToGitBadRequest %s", 400, payload)
}

func (o *MigrateOverridesToGitBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/migrate-overrides][%d] migrateOverridesToGitBadRequest %s", 400, payload)
}

func (o *MigrateOverridesToGitBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MigrateOverridesToGitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMigrateOverridesToGitNotFound creates a MigrateOverridesToGitNotFound with default headers values
func NewMigrateOverridesToGitNotFound() *MigrateOverridesToGitNotFound {
	return &MigrateOverridesToGitNotFound{}
}

/*
MigrateOverridesToGitNotFound describes a response with status code 404, with default header values.

Not Found
*/
type MigrateOverridesToGitNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this migrate overrides to git not found response has a 2xx status code
func (o *MigrateOverridesToGitNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this migrate overrides to git not found response has a 3xx status code
func (o *MigrateOverridesToGitNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this migrate overrides to git not found response has a 4xx status code
func (o *MigrateOverridesToGitNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this migrate overrides to git not found response has a 5xx status code
func (o *MigrateOverridesToGitNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this migrate overrides to git not found response a status code equal to that given
func (o *MigrateOverridesToGitNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the migrate overrides to git not found response
func (o *MigrateOverridesToGitNotFound) Code() int {
	return 404
}

func (o *MigrateOverridesToGitNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/migrate-overrides][%d] migrateOverridesToGitNotFound %s", 404, payload)
}

func (o *MigrateOverridesToGitNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/migrate-overrides][%d] migrateOverridesToGitNotFound %s", 404, payload)
}

func (o *MigrateOverridesToGitNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MigrateOverridesToGitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMigrateOverridesToGitMethodNotAllowed creates a MigrateOverridesToGitMethodNotAllowed with default headers values
func NewMigrateOverridesToGitMethodNotAllowed() *MigrateOverridesToGitMethodNotAllowed {
	return &MigrateOverridesToGitMethodNotAllowed{}
}

/*
MigrateOverridesToGitMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type MigrateOverridesToGitMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this migrate overrides to git method not allowed response has a 2xx status code
func (o *MigrateOverridesToGitMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this migrate overrides to git method not allowed response has a 3xx status code
func (o *MigrateOverridesToGitMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this migrate overrides to git method not allowed response has a 4xx status code
func (o *MigrateOverridesToGitMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this migrate overrides to git method not allowed response has a 5xx status code
func (o *MigrateOverridesToGitMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this migrate overrides to git method not allowed response a status code equal to that given
func (o *MigrateOverridesToGitMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the migrate overrides to git method not allowed response
func (o *MigrateOverridesToGitMethodNotAllowed) Code() int {
	return 405
}

func (o *MigrateOverridesToGitMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/migrate-overrides][%d] migrateOverridesToGitMethodNotAllowed %s", 405, payload)
}

func (o *MigrateOverridesToGitMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/migrate-overrides][%d] migrateOverridesToGitMethodNotAllowed %s", 405, payload)
}

func (o *MigrateOverridesToGitMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MigrateOverridesToGitMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMigrateOverridesToGitInternalServerError creates a MigrateOverridesToGitInternalServerError with default headers values
func NewMigrateOverridesToGitInternalServerError() *MigrateOverridesToGitInternalServerError {
	return &MigrateOverridesToGitInternalServerError{}
}

/*
MigrateOverridesToGitInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type MigrateOverridesToGitInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this migrate overrides to git internal server error response has a 2xx status code
func (o *MigrateOverridesToGitInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this migrate overrides to git internal server error response has a 3xx status code
func (o *MigrateOverridesToGitInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this migrate overrides to git internal server error response has a 4xx status code
func (o *MigrateOverridesToGitInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this migrate overrides to git internal server error response has a 5xx status code
func (o *MigrateOverridesToGitInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this migrate overrides to git internal server error response a status code equal to that given
func (o *MigrateOverridesToGitInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the migrate overrides to git internal server error response
func (o *MigrateOverridesToGitInternalServerError) Code() int {
	return 500
}

func (o *MigrateOverridesToGitInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/migrate-overrides][%d] migrateOverridesToGitInternalServerError %s", 500, payload)
}

func (o *MigrateOverridesToGitInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/migrate-overrides][%d] migrateOverridesToGitInternalServerError %s", 500, payload)
}

func (o *MigrateOverridesToGitInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MigrateOverridesToGitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
