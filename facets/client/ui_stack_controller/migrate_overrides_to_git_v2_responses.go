// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// MigrateOverridesToGitV2Reader is a Reader for the MigrateOverridesToGitV2 structure.
type MigrateOverridesToGitV2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MigrateOverridesToGitV2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMigrateOverridesToGitV2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMigrateOverridesToGitV2BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMigrateOverridesToGitV2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewMigrateOverridesToGitV2MethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMigrateOverridesToGitV2InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/stacks/migrate-overrides-v2] migrateOverridesToGitV2", response, response.Code())
	}
}

// NewMigrateOverridesToGitV2OK creates a MigrateOverridesToGitV2OK with default headers values
func NewMigrateOverridesToGitV2OK() *MigrateOverridesToGitV2OK {
	return &MigrateOverridesToGitV2OK{}
}

/*
MigrateOverridesToGitV2OK describes a response with status code 200, with default header values.

OK
*/
type MigrateOverridesToGitV2OK struct {
}

// IsSuccess returns true when this migrate overrides to git v2 o k response has a 2xx status code
func (o *MigrateOverridesToGitV2OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this migrate overrides to git v2 o k response has a 3xx status code
func (o *MigrateOverridesToGitV2OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this migrate overrides to git v2 o k response has a 4xx status code
func (o *MigrateOverridesToGitV2OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this migrate overrides to git v2 o k response has a 5xx status code
func (o *MigrateOverridesToGitV2OK) IsServerError() bool {
	return false
}

// IsCode returns true when this migrate overrides to git v2 o k response a status code equal to that given
func (o *MigrateOverridesToGitV2OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the migrate overrides to git v2 o k response
func (o *MigrateOverridesToGitV2OK) Code() int {
	return 200
}

func (o *MigrateOverridesToGitV2OK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/migrate-overrides-v2][%d] migrateOverridesToGitV2OK", 200)
}

func (o *MigrateOverridesToGitV2OK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/migrate-overrides-v2][%d] migrateOverridesToGitV2OK", 200)
}

func (o *MigrateOverridesToGitV2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMigrateOverridesToGitV2BadRequest creates a MigrateOverridesToGitV2BadRequest with default headers values
func NewMigrateOverridesToGitV2BadRequest() *MigrateOverridesToGitV2BadRequest {
	return &MigrateOverridesToGitV2BadRequest{}
}

/*
MigrateOverridesToGitV2BadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type MigrateOverridesToGitV2BadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this migrate overrides to git v2 bad request response has a 2xx status code
func (o *MigrateOverridesToGitV2BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this migrate overrides to git v2 bad request response has a 3xx status code
func (o *MigrateOverridesToGitV2BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this migrate overrides to git v2 bad request response has a 4xx status code
func (o *MigrateOverridesToGitV2BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this migrate overrides to git v2 bad request response has a 5xx status code
func (o *MigrateOverridesToGitV2BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this migrate overrides to git v2 bad request response a status code equal to that given
func (o *MigrateOverridesToGitV2BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the migrate overrides to git v2 bad request response
func (o *MigrateOverridesToGitV2BadRequest) Code() int {
	return 400
}

func (o *MigrateOverridesToGitV2BadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/migrate-overrides-v2][%d] migrateOverridesToGitV2BadRequest %s", 400, payload)
}

func (o *MigrateOverridesToGitV2BadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/migrate-overrides-v2][%d] migrateOverridesToGitV2BadRequest %s", 400, payload)
}

func (o *MigrateOverridesToGitV2BadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MigrateOverridesToGitV2BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMigrateOverridesToGitV2NotFound creates a MigrateOverridesToGitV2NotFound with default headers values
func NewMigrateOverridesToGitV2NotFound() *MigrateOverridesToGitV2NotFound {
	return &MigrateOverridesToGitV2NotFound{}
}

/*
MigrateOverridesToGitV2NotFound describes a response with status code 404, with default header values.

Not Found
*/
type MigrateOverridesToGitV2NotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this migrate overrides to git v2 not found response has a 2xx status code
func (o *MigrateOverridesToGitV2NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this migrate overrides to git v2 not found response has a 3xx status code
func (o *MigrateOverridesToGitV2NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this migrate overrides to git v2 not found response has a 4xx status code
func (o *MigrateOverridesToGitV2NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this migrate overrides to git v2 not found response has a 5xx status code
func (o *MigrateOverridesToGitV2NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this migrate overrides to git v2 not found response a status code equal to that given
func (o *MigrateOverridesToGitV2NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the migrate overrides to git v2 not found response
func (o *MigrateOverridesToGitV2NotFound) Code() int {
	return 404
}

func (o *MigrateOverridesToGitV2NotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/migrate-overrides-v2][%d] migrateOverridesToGitV2NotFound %s", 404, payload)
}

func (o *MigrateOverridesToGitV2NotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/migrate-overrides-v2][%d] migrateOverridesToGitV2NotFound %s", 404, payload)
}

func (o *MigrateOverridesToGitV2NotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MigrateOverridesToGitV2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMigrateOverridesToGitV2MethodNotAllowed creates a MigrateOverridesToGitV2MethodNotAllowed with default headers values
func NewMigrateOverridesToGitV2MethodNotAllowed() *MigrateOverridesToGitV2MethodNotAllowed {
	return &MigrateOverridesToGitV2MethodNotAllowed{}
}

/*
MigrateOverridesToGitV2MethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type MigrateOverridesToGitV2MethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this migrate overrides to git v2 method not allowed response has a 2xx status code
func (o *MigrateOverridesToGitV2MethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this migrate overrides to git v2 method not allowed response has a 3xx status code
func (o *MigrateOverridesToGitV2MethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this migrate overrides to git v2 method not allowed response has a 4xx status code
func (o *MigrateOverridesToGitV2MethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this migrate overrides to git v2 method not allowed response has a 5xx status code
func (o *MigrateOverridesToGitV2MethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this migrate overrides to git v2 method not allowed response a status code equal to that given
func (o *MigrateOverridesToGitV2MethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the migrate overrides to git v2 method not allowed response
func (o *MigrateOverridesToGitV2MethodNotAllowed) Code() int {
	return 405
}

func (o *MigrateOverridesToGitV2MethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/migrate-overrides-v2][%d] migrateOverridesToGitV2MethodNotAllowed %s", 405, payload)
}

func (o *MigrateOverridesToGitV2MethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/migrate-overrides-v2][%d] migrateOverridesToGitV2MethodNotAllowed %s", 405, payload)
}

func (o *MigrateOverridesToGitV2MethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MigrateOverridesToGitV2MethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMigrateOverridesToGitV2InternalServerError creates a MigrateOverridesToGitV2InternalServerError with default headers values
func NewMigrateOverridesToGitV2InternalServerError() *MigrateOverridesToGitV2InternalServerError {
	return &MigrateOverridesToGitV2InternalServerError{}
}

/*
MigrateOverridesToGitV2InternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type MigrateOverridesToGitV2InternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this migrate overrides to git v2 internal server error response has a 2xx status code
func (o *MigrateOverridesToGitV2InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this migrate overrides to git v2 internal server error response has a 3xx status code
func (o *MigrateOverridesToGitV2InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this migrate overrides to git v2 internal server error response has a 4xx status code
func (o *MigrateOverridesToGitV2InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this migrate overrides to git v2 internal server error response has a 5xx status code
func (o *MigrateOverridesToGitV2InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this migrate overrides to git v2 internal server error response a status code equal to that given
func (o *MigrateOverridesToGitV2InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the migrate overrides to git v2 internal server error response
func (o *MigrateOverridesToGitV2InternalServerError) Code() int {
	return 500
}

func (o *MigrateOverridesToGitV2InternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/migrate-overrides-v2][%d] migrateOverridesToGitV2InternalServerError %s", 500, payload)
}

func (o *MigrateOverridesToGitV2InternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/migrate-overrides-v2][%d] migrateOverridesToGitV2InternalServerError %s", 500, payload)
}

func (o *MigrateOverridesToGitV2InternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MigrateOverridesToGitV2InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
