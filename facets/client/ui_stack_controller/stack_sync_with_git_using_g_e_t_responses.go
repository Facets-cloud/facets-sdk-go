// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// StackSyncWithGitUsingGETReader is a Reader for the StackSyncWithGitUsingGET structure.
type StackSyncWithGitUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StackSyncWithGitUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStackSyncWithGitUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewStackSyncWithGitUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStackSyncWithGitUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStackSyncWithGitUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2] stackSyncWithGitUsingGET", response, response.Code())
	}
}

// NewStackSyncWithGitUsingGETOK creates a StackSyncWithGitUsingGETOK with default headers values
func NewStackSyncWithGitUsingGETOK() *StackSyncWithGitUsingGETOK {
	return &StackSyncWithGitUsingGETOK{}
}

/*
StackSyncWithGitUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type StackSyncWithGitUsingGETOK struct {
}

// IsSuccess returns true when this stack sync with git using g e t o k response has a 2xx status code
func (o *StackSyncWithGitUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stack sync with git using g e t o k response has a 3xx status code
func (o *StackSyncWithGitUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack sync with git using g e t o k response has a 4xx status code
func (o *StackSyncWithGitUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stack sync with git using g e t o k response has a 5xx status code
func (o *StackSyncWithGitUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stack sync with git using g e t o k response a status code equal to that given
func (o *StackSyncWithGitUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stack sync with git using g e t o k response
func (o *StackSyncWithGitUsingGETOK) Code() int {
	return 200
}

func (o *StackSyncWithGitUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitUsingGETOK", 200)
}

func (o *StackSyncWithGitUsingGETOK) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitUsingGETOK", 200)
}

func (o *StackSyncWithGitUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStackSyncWithGitUsingGETUnauthorized creates a StackSyncWithGitUsingGETUnauthorized with default headers values
func NewStackSyncWithGitUsingGETUnauthorized() *StackSyncWithGitUsingGETUnauthorized {
	return &StackSyncWithGitUsingGETUnauthorized{}
}

/*
StackSyncWithGitUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StackSyncWithGitUsingGETUnauthorized struct {
}

// IsSuccess returns true when this stack sync with git using g e t unauthorized response has a 2xx status code
func (o *StackSyncWithGitUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack sync with git using g e t unauthorized response has a 3xx status code
func (o *StackSyncWithGitUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack sync with git using g e t unauthorized response has a 4xx status code
func (o *StackSyncWithGitUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stack sync with git using g e t unauthorized response has a 5xx status code
func (o *StackSyncWithGitUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stack sync with git using g e t unauthorized response a status code equal to that given
func (o *StackSyncWithGitUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the stack sync with git using g e t unauthorized response
func (o *StackSyncWithGitUsingGETUnauthorized) Code() int {
	return 401
}

func (o *StackSyncWithGitUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitUsingGETUnauthorized", 401)
}

func (o *StackSyncWithGitUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitUsingGETUnauthorized", 401)
}

func (o *StackSyncWithGitUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStackSyncWithGitUsingGETForbidden creates a StackSyncWithGitUsingGETForbidden with default headers values
func NewStackSyncWithGitUsingGETForbidden() *StackSyncWithGitUsingGETForbidden {
	return &StackSyncWithGitUsingGETForbidden{}
}

/*
StackSyncWithGitUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StackSyncWithGitUsingGETForbidden struct {
}

// IsSuccess returns true when this stack sync with git using g e t forbidden response has a 2xx status code
func (o *StackSyncWithGitUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack sync with git using g e t forbidden response has a 3xx status code
func (o *StackSyncWithGitUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack sync with git using g e t forbidden response has a 4xx status code
func (o *StackSyncWithGitUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stack sync with git using g e t forbidden response has a 5xx status code
func (o *StackSyncWithGitUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stack sync with git using g e t forbidden response a status code equal to that given
func (o *StackSyncWithGitUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the stack sync with git using g e t forbidden response
func (o *StackSyncWithGitUsingGETForbidden) Code() int {
	return 403
}

func (o *StackSyncWithGitUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitUsingGETForbidden", 403)
}

func (o *StackSyncWithGitUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitUsingGETForbidden", 403)
}

func (o *StackSyncWithGitUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStackSyncWithGitUsingGETNotFound creates a StackSyncWithGitUsingGETNotFound with default headers values
func NewStackSyncWithGitUsingGETNotFound() *StackSyncWithGitUsingGETNotFound {
	return &StackSyncWithGitUsingGETNotFound{}
}

/*
StackSyncWithGitUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StackSyncWithGitUsingGETNotFound struct {
}

// IsSuccess returns true when this stack sync with git using g e t not found response has a 2xx status code
func (o *StackSyncWithGitUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stack sync with git using g e t not found response has a 3xx status code
func (o *StackSyncWithGitUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stack sync with git using g e t not found response has a 4xx status code
func (o *StackSyncWithGitUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stack sync with git using g e t not found response has a 5xx status code
func (o *StackSyncWithGitUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stack sync with git using g e t not found response a status code equal to that given
func (o *StackSyncWithGitUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stack sync with git using g e t not found response
func (o *StackSyncWithGitUsingGETNotFound) Code() int {
	return 404
}

func (o *StackSyncWithGitUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitUsingGETNotFound", 404)
}

func (o *StackSyncWithGitUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git/v2][%d] stackSyncWithGitUsingGETNotFound", 404)
}

func (o *StackSyncWithGitUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
