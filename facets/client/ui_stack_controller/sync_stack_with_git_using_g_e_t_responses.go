// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// SyncStackWithGitUsingGETReader is a Reader for the SyncStackWithGitUsingGET structure.
type SyncStackWithGitUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SyncStackWithGitUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSyncStackWithGitUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSyncStackWithGitUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSyncStackWithGitUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSyncStackWithGitUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git] syncStackWithGitUsingGET", response, response.Code())
	}
}

// NewSyncStackWithGitUsingGETOK creates a SyncStackWithGitUsingGETOK with default headers values
func NewSyncStackWithGitUsingGETOK() *SyncStackWithGitUsingGETOK {
	return &SyncStackWithGitUsingGETOK{}
}

/*
SyncStackWithGitUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type SyncStackWithGitUsingGETOK struct {
}

// IsSuccess returns true when this sync stack with git using g e t o k response has a 2xx status code
func (o *SyncStackWithGitUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this sync stack with git using g e t o k response has a 3xx status code
func (o *SyncStackWithGitUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync stack with git using g e t o k response has a 4xx status code
func (o *SyncStackWithGitUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this sync stack with git using g e t o k response has a 5xx status code
func (o *SyncStackWithGitUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this sync stack with git using g e t o k response a status code equal to that given
func (o *SyncStackWithGitUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the sync stack with git using g e t o k response
func (o *SyncStackWithGitUsingGETOK) Code() int {
	return 200
}

func (o *SyncStackWithGitUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitUsingGETOK", 200)
}

func (o *SyncStackWithGitUsingGETOK) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitUsingGETOK", 200)
}

func (o *SyncStackWithGitUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncStackWithGitUsingGETUnauthorized creates a SyncStackWithGitUsingGETUnauthorized with default headers values
func NewSyncStackWithGitUsingGETUnauthorized() *SyncStackWithGitUsingGETUnauthorized {
	return &SyncStackWithGitUsingGETUnauthorized{}
}

/*
SyncStackWithGitUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SyncStackWithGitUsingGETUnauthorized struct {
}

// IsSuccess returns true when this sync stack with git using g e t unauthorized response has a 2xx status code
func (o *SyncStackWithGitUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync stack with git using g e t unauthorized response has a 3xx status code
func (o *SyncStackWithGitUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync stack with git using g e t unauthorized response has a 4xx status code
func (o *SyncStackWithGitUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync stack with git using g e t unauthorized response has a 5xx status code
func (o *SyncStackWithGitUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this sync stack with git using g e t unauthorized response a status code equal to that given
func (o *SyncStackWithGitUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the sync stack with git using g e t unauthorized response
func (o *SyncStackWithGitUsingGETUnauthorized) Code() int {
	return 401
}

func (o *SyncStackWithGitUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitUsingGETUnauthorized", 401)
}

func (o *SyncStackWithGitUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitUsingGETUnauthorized", 401)
}

func (o *SyncStackWithGitUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncStackWithGitUsingGETForbidden creates a SyncStackWithGitUsingGETForbidden with default headers values
func NewSyncStackWithGitUsingGETForbidden() *SyncStackWithGitUsingGETForbidden {
	return &SyncStackWithGitUsingGETForbidden{}
}

/*
SyncStackWithGitUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SyncStackWithGitUsingGETForbidden struct {
}

// IsSuccess returns true when this sync stack with git using g e t forbidden response has a 2xx status code
func (o *SyncStackWithGitUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync stack with git using g e t forbidden response has a 3xx status code
func (o *SyncStackWithGitUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync stack with git using g e t forbidden response has a 4xx status code
func (o *SyncStackWithGitUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync stack with git using g e t forbidden response has a 5xx status code
func (o *SyncStackWithGitUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this sync stack with git using g e t forbidden response a status code equal to that given
func (o *SyncStackWithGitUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the sync stack with git using g e t forbidden response
func (o *SyncStackWithGitUsingGETForbidden) Code() int {
	return 403
}

func (o *SyncStackWithGitUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitUsingGETForbidden", 403)
}

func (o *SyncStackWithGitUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitUsingGETForbidden", 403)
}

func (o *SyncStackWithGitUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncStackWithGitUsingGETNotFound creates a SyncStackWithGitUsingGETNotFound with default headers values
func NewSyncStackWithGitUsingGETNotFound() *SyncStackWithGitUsingGETNotFound {
	return &SyncStackWithGitUsingGETNotFound{}
}

/*
SyncStackWithGitUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SyncStackWithGitUsingGETNotFound struct {
}

// IsSuccess returns true when this sync stack with git using g e t not found response has a 2xx status code
func (o *SyncStackWithGitUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync stack with git using g e t not found response has a 3xx status code
func (o *SyncStackWithGitUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync stack with git using g e t not found response has a 4xx status code
func (o *SyncStackWithGitUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync stack with git using g e t not found response has a 5xx status code
func (o *SyncStackWithGitUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this sync stack with git using g e t not found response a status code equal to that given
func (o *SyncStackWithGitUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the sync stack with git using g e t not found response
func (o *SyncStackWithGitUsingGETNotFound) Code() int {
	return 404
}

func (o *SyncStackWithGitUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitUsingGETNotFound", 404)
}

func (o *SyncStackWithGitUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitUsingGETNotFound", 404)
}

func (o *SyncStackWithGitUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
