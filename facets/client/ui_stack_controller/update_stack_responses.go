// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateStackReader is a Reader for the UpdateStack structure.
type UpdateStackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateStackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateStackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateStackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateStackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateStackMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateStackInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/stacks/{stackName}] updateStack", response, response.Code())
	}
}

// NewUpdateStackOK creates a UpdateStackOK with default headers values
func NewUpdateStackOK() *UpdateStackOK {
	return &UpdateStackOK{}
}

/*
UpdateStackOK describes a response with status code 200, with default header values.

OK
*/
type UpdateStackOK struct {
	Payload *models.Stack
}

// IsSuccess returns true when this update stack o k response has a 2xx status code
func (o *UpdateStackOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update stack o k response has a 3xx status code
func (o *UpdateStackOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update stack o k response has a 4xx status code
func (o *UpdateStackOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update stack o k response has a 5xx status code
func (o *UpdateStackOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update stack o k response a status code equal to that given
func (o *UpdateStackOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update stack o k response
func (o *UpdateStackOK) Code() int {
	return 200
}

func (o *UpdateStackOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}][%d] updateStackOK %s", 200, payload)
}

func (o *UpdateStackOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}][%d] updateStackOK %s", 200, payload)
}

func (o *UpdateStackOK) GetPayload() *models.Stack {
	return o.Payload
}

func (o *UpdateStackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Stack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStackBadRequest creates a UpdateStackBadRequest with default headers values
func NewUpdateStackBadRequest() *UpdateStackBadRequest {
	return &UpdateStackBadRequest{}
}

/*
UpdateStackBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateStackBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update stack bad request response has a 2xx status code
func (o *UpdateStackBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update stack bad request response has a 3xx status code
func (o *UpdateStackBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update stack bad request response has a 4xx status code
func (o *UpdateStackBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update stack bad request response has a 5xx status code
func (o *UpdateStackBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update stack bad request response a status code equal to that given
func (o *UpdateStackBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update stack bad request response
func (o *UpdateStackBadRequest) Code() int {
	return 400
}

func (o *UpdateStackBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}][%d] updateStackBadRequest %s", 400, payload)
}

func (o *UpdateStackBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}][%d] updateStackBadRequest %s", 400, payload)
}

func (o *UpdateStackBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateStackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStackNotFound creates a UpdateStackNotFound with default headers values
func NewUpdateStackNotFound() *UpdateStackNotFound {
	return &UpdateStackNotFound{}
}

/*
UpdateStackNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateStackNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update stack not found response has a 2xx status code
func (o *UpdateStackNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update stack not found response has a 3xx status code
func (o *UpdateStackNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update stack not found response has a 4xx status code
func (o *UpdateStackNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update stack not found response has a 5xx status code
func (o *UpdateStackNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update stack not found response a status code equal to that given
func (o *UpdateStackNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update stack not found response
func (o *UpdateStackNotFound) Code() int {
	return 404
}

func (o *UpdateStackNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}][%d] updateStackNotFound %s", 404, payload)
}

func (o *UpdateStackNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}][%d] updateStackNotFound %s", 404, payload)
}

func (o *UpdateStackNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateStackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStackMethodNotAllowed creates a UpdateStackMethodNotAllowed with default headers values
func NewUpdateStackMethodNotAllowed() *UpdateStackMethodNotAllowed {
	return &UpdateStackMethodNotAllowed{}
}

/*
UpdateStackMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateStackMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update stack method not allowed response has a 2xx status code
func (o *UpdateStackMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update stack method not allowed response has a 3xx status code
func (o *UpdateStackMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update stack method not allowed response has a 4xx status code
func (o *UpdateStackMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update stack method not allowed response has a 5xx status code
func (o *UpdateStackMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update stack method not allowed response a status code equal to that given
func (o *UpdateStackMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update stack method not allowed response
func (o *UpdateStackMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateStackMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}][%d] updateStackMethodNotAllowed %s", 405, payload)
}

func (o *UpdateStackMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}][%d] updateStackMethodNotAllowed %s", 405, payload)
}

func (o *UpdateStackMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateStackMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStackInternalServerError creates a UpdateStackInternalServerError with default headers values
func NewUpdateStackInternalServerError() *UpdateStackInternalServerError {
	return &UpdateStackInternalServerError{}
}

/*
UpdateStackInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateStackInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update stack internal server error response has a 2xx status code
func (o *UpdateStackInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update stack internal server error response has a 3xx status code
func (o *UpdateStackInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update stack internal server error response has a 4xx status code
func (o *UpdateStackInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update stack internal server error response has a 5xx status code
func (o *UpdateStackInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update stack internal server error response a status code equal to that given
func (o *UpdateStackInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update stack internal server error response
func (o *UpdateStackInternalServerError) Code() int {
	return 500
}

func (o *UpdateStackInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}][%d] updateStackInternalServerError %s", 500, payload)
}

func (o *UpdateStackInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}][%d] updateStackInternalServerError %s", 500, payload)
}

func (o *UpdateStackInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateStackInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
