// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// EnableGitOpsReader is a Reader for the EnableGitOps structure.
type EnableGitOpsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnableGitOpsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnableGitOpsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnableGitOpsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEnableGitOpsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewEnableGitOpsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEnableGitOpsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops] enableGitOps", response, response.Code())
	}
}

// NewEnableGitOpsOK creates a EnableGitOpsOK with default headers values
func NewEnableGitOpsOK() *EnableGitOpsOK {
	return &EnableGitOpsOK{}
}

/*
EnableGitOpsOK describes a response with status code 200, with default header values.

OK
*/
type EnableGitOpsOK struct {
	Payload *models.Stack
}

// IsSuccess returns true when this enable git ops o k response has a 2xx status code
func (o *EnableGitOpsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enable git ops o k response has a 3xx status code
func (o *EnableGitOpsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable git ops o k response has a 4xx status code
func (o *EnableGitOpsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable git ops o k response has a 5xx status code
func (o *EnableGitOpsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this enable git ops o k response a status code equal to that given
func (o *EnableGitOpsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the enable git ops o k response
func (o *EnableGitOpsOK) Code() int {
	return 200
}

func (o *EnableGitOpsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsOK %s", 200, payload)
}

func (o *EnableGitOpsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsOK %s", 200, payload)
}

func (o *EnableGitOpsOK) GetPayload() *models.Stack {
	return o.Payload
}

func (o *EnableGitOpsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Stack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableGitOpsBadRequest creates a EnableGitOpsBadRequest with default headers values
func NewEnableGitOpsBadRequest() *EnableGitOpsBadRequest {
	return &EnableGitOpsBadRequest{}
}

/*
EnableGitOpsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type EnableGitOpsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this enable git ops bad request response has a 2xx status code
func (o *EnableGitOpsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable git ops bad request response has a 3xx status code
func (o *EnableGitOpsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable git ops bad request response has a 4xx status code
func (o *EnableGitOpsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable git ops bad request response has a 5xx status code
func (o *EnableGitOpsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this enable git ops bad request response a status code equal to that given
func (o *EnableGitOpsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the enable git ops bad request response
func (o *EnableGitOpsBadRequest) Code() int {
	return 400
}

func (o *EnableGitOpsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsBadRequest %s", 400, payload)
}

func (o *EnableGitOpsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsBadRequest %s", 400, payload)
}

func (o *EnableGitOpsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *EnableGitOpsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableGitOpsNotFound creates a EnableGitOpsNotFound with default headers values
func NewEnableGitOpsNotFound() *EnableGitOpsNotFound {
	return &EnableGitOpsNotFound{}
}

/*
EnableGitOpsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type EnableGitOpsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this enable git ops not found response has a 2xx status code
func (o *EnableGitOpsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable git ops not found response has a 3xx status code
func (o *EnableGitOpsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable git ops not found response has a 4xx status code
func (o *EnableGitOpsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable git ops not found response has a 5xx status code
func (o *EnableGitOpsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this enable git ops not found response a status code equal to that given
func (o *EnableGitOpsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the enable git ops not found response
func (o *EnableGitOpsNotFound) Code() int {
	return 404
}

func (o *EnableGitOpsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsNotFound %s", 404, payload)
}

func (o *EnableGitOpsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsNotFound %s", 404, payload)
}

func (o *EnableGitOpsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *EnableGitOpsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableGitOpsMethodNotAllowed creates a EnableGitOpsMethodNotAllowed with default headers values
func NewEnableGitOpsMethodNotAllowed() *EnableGitOpsMethodNotAllowed {
	return &EnableGitOpsMethodNotAllowed{}
}

/*
EnableGitOpsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type EnableGitOpsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this enable git ops method not allowed response has a 2xx status code
func (o *EnableGitOpsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable git ops method not allowed response has a 3xx status code
func (o *EnableGitOpsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable git ops method not allowed response has a 4xx status code
func (o *EnableGitOpsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable git ops method not allowed response has a 5xx status code
func (o *EnableGitOpsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this enable git ops method not allowed response a status code equal to that given
func (o *EnableGitOpsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the enable git ops method not allowed response
func (o *EnableGitOpsMethodNotAllowed) Code() int {
	return 405
}

func (o *EnableGitOpsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsMethodNotAllowed %s", 405, payload)
}

func (o *EnableGitOpsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsMethodNotAllowed %s", 405, payload)
}

func (o *EnableGitOpsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *EnableGitOpsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableGitOpsInternalServerError creates a EnableGitOpsInternalServerError with default headers values
func NewEnableGitOpsInternalServerError() *EnableGitOpsInternalServerError {
	return &EnableGitOpsInternalServerError{}
}

/*
EnableGitOpsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type EnableGitOpsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this enable git ops internal server error response has a 2xx status code
func (o *EnableGitOpsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable git ops internal server error response has a 3xx status code
func (o *EnableGitOpsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable git ops internal server error response has a 4xx status code
func (o *EnableGitOpsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable git ops internal server error response has a 5xx status code
func (o *EnableGitOpsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this enable git ops internal server error response a status code equal to that given
func (o *EnableGitOpsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the enable git ops internal server error response
func (o *EnableGitOpsInternalServerError) Code() int {
	return 500
}

func (o *EnableGitOpsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsInternalServerError %s", 500, payload)
}

func (o *EnableGitOpsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsInternalServerError %s", 500, payload)
}

func (o *EnableGitOpsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *EnableGitOpsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
