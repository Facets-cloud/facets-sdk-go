// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetStackWithAccountUsingGETReader is a Reader for the GetStackWithAccountUsingGET structure.
type GetStackWithAccountUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStackWithAccountUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStackWithAccountUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetStackWithAccountUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetStackWithAccountUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetStackWithAccountUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/stacks/{stackName}/withAccount] getStackWithAccountUsingGET", response, response.Code())
	}
}

// NewGetStackWithAccountUsingGETOK creates a GetStackWithAccountUsingGETOK with default headers values
func NewGetStackWithAccountUsingGETOK() *GetStackWithAccountUsingGETOK {
	return &GetStackWithAccountUsingGETOK{}
}

/*
GetStackWithAccountUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetStackWithAccountUsingGETOK struct {
	Payload *models.Stack
}

// IsSuccess returns true when this get stack with account using g e t o k response has a 2xx status code
func (o *GetStackWithAccountUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get stack with account using g e t o k response has a 3xx status code
func (o *GetStackWithAccountUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get stack with account using g e t o k response has a 4xx status code
func (o *GetStackWithAccountUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get stack with account using g e t o k response has a 5xx status code
func (o *GetStackWithAccountUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get stack with account using g e t o k response a status code equal to that given
func (o *GetStackWithAccountUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get stack with account using g e t o k response
func (o *GetStackWithAccountUsingGETOK) Code() int {
	return 200
}

func (o *GetStackWithAccountUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/withAccount][%d] getStackWithAccountUsingGETOK %s", 200, payload)
}

func (o *GetStackWithAccountUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/withAccount][%d] getStackWithAccountUsingGETOK %s", 200, payload)
}

func (o *GetStackWithAccountUsingGETOK) GetPayload() *models.Stack {
	return o.Payload
}

func (o *GetStackWithAccountUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Stack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStackWithAccountUsingGETUnauthorized creates a GetStackWithAccountUsingGETUnauthorized with default headers values
func NewGetStackWithAccountUsingGETUnauthorized() *GetStackWithAccountUsingGETUnauthorized {
	return &GetStackWithAccountUsingGETUnauthorized{}
}

/*
GetStackWithAccountUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetStackWithAccountUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get stack with account using g e t unauthorized response has a 2xx status code
func (o *GetStackWithAccountUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get stack with account using g e t unauthorized response has a 3xx status code
func (o *GetStackWithAccountUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get stack with account using g e t unauthorized response has a 4xx status code
func (o *GetStackWithAccountUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get stack with account using g e t unauthorized response has a 5xx status code
func (o *GetStackWithAccountUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get stack with account using g e t unauthorized response a status code equal to that given
func (o *GetStackWithAccountUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get stack with account using g e t unauthorized response
func (o *GetStackWithAccountUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetStackWithAccountUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/withAccount][%d] getStackWithAccountUsingGETUnauthorized", 401)
}

func (o *GetStackWithAccountUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/withAccount][%d] getStackWithAccountUsingGETUnauthorized", 401)
}

func (o *GetStackWithAccountUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStackWithAccountUsingGETForbidden creates a GetStackWithAccountUsingGETForbidden with default headers values
func NewGetStackWithAccountUsingGETForbidden() *GetStackWithAccountUsingGETForbidden {
	return &GetStackWithAccountUsingGETForbidden{}
}

/*
GetStackWithAccountUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetStackWithAccountUsingGETForbidden struct {
}

// IsSuccess returns true when this get stack with account using g e t forbidden response has a 2xx status code
func (o *GetStackWithAccountUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get stack with account using g e t forbidden response has a 3xx status code
func (o *GetStackWithAccountUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get stack with account using g e t forbidden response has a 4xx status code
func (o *GetStackWithAccountUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get stack with account using g e t forbidden response has a 5xx status code
func (o *GetStackWithAccountUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get stack with account using g e t forbidden response a status code equal to that given
func (o *GetStackWithAccountUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get stack with account using g e t forbidden response
func (o *GetStackWithAccountUsingGETForbidden) Code() int {
	return 403
}

func (o *GetStackWithAccountUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/withAccount][%d] getStackWithAccountUsingGETForbidden", 403)
}

func (o *GetStackWithAccountUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/withAccount][%d] getStackWithAccountUsingGETForbidden", 403)
}

func (o *GetStackWithAccountUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStackWithAccountUsingGETNotFound creates a GetStackWithAccountUsingGETNotFound with default headers values
func NewGetStackWithAccountUsingGETNotFound() *GetStackWithAccountUsingGETNotFound {
	return &GetStackWithAccountUsingGETNotFound{}
}

/*
GetStackWithAccountUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetStackWithAccountUsingGETNotFound struct {
}

// IsSuccess returns true when this get stack with account using g e t not found response has a 2xx status code
func (o *GetStackWithAccountUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get stack with account using g e t not found response has a 3xx status code
func (o *GetStackWithAccountUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get stack with account using g e t not found response has a 4xx status code
func (o *GetStackWithAccountUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get stack with account using g e t not found response has a 5xx status code
func (o *GetStackWithAccountUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get stack with account using g e t not found response a status code equal to that given
func (o *GetStackWithAccountUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get stack with account using g e t not found response
func (o *GetStackWithAccountUsingGETNotFound) Code() int {
	return 404
}

func (o *GetStackWithAccountUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/withAccount][%d] getStackWithAccountUsingGETNotFound", 404)
}

func (o *GetStackWithAccountUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/withAccount][%d] getStackWithAccountUsingGETNotFound", 404)
}

func (o *GetStackWithAccountUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
