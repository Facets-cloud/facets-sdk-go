// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateSubStackReader is a Reader for the CreateSubStack structure.
type CreateSubStackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSubStackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateSubStackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateSubStackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateSubStackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreateSubStackMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateSubStackInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/stacks/substack/{substackName}] createSubStack", response, response.Code())
	}
}

// NewCreateSubStackOK creates a CreateSubStackOK with default headers values
func NewCreateSubStackOK() *CreateSubStackOK {
	return &CreateSubStackOK{}
}

/*
CreateSubStackOK describes a response with status code 200, with default header values.

OK
*/
type CreateSubStackOK struct {
	Payload *models.Substack
}

// IsSuccess returns true when this create sub stack o k response has a 2xx status code
func (o *CreateSubStackOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create sub stack o k response has a 3xx status code
func (o *CreateSubStackOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create sub stack o k response has a 4xx status code
func (o *CreateSubStackOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create sub stack o k response has a 5xx status code
func (o *CreateSubStackOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create sub stack o k response a status code equal to that given
func (o *CreateSubStackOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create sub stack o k response
func (o *CreateSubStackOK) Code() int {
	return 200
}

func (o *CreateSubStackOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/substack/{substackName}][%d] createSubStackOK %s", 200, payload)
}

func (o *CreateSubStackOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/substack/{substackName}][%d] createSubStackOK %s", 200, payload)
}

func (o *CreateSubStackOK) GetPayload() *models.Substack {
	return o.Payload
}

func (o *CreateSubStackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Substack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubStackBadRequest creates a CreateSubStackBadRequest with default headers values
func NewCreateSubStackBadRequest() *CreateSubStackBadRequest {
	return &CreateSubStackBadRequest{}
}

/*
CreateSubStackBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateSubStackBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create sub stack bad request response has a 2xx status code
func (o *CreateSubStackBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create sub stack bad request response has a 3xx status code
func (o *CreateSubStackBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create sub stack bad request response has a 4xx status code
func (o *CreateSubStackBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create sub stack bad request response has a 5xx status code
func (o *CreateSubStackBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create sub stack bad request response a status code equal to that given
func (o *CreateSubStackBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create sub stack bad request response
func (o *CreateSubStackBadRequest) Code() int {
	return 400
}

func (o *CreateSubStackBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/substack/{substackName}][%d] createSubStackBadRequest %s", 400, payload)
}

func (o *CreateSubStackBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/substack/{substackName}][%d] createSubStackBadRequest %s", 400, payload)
}

func (o *CreateSubStackBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateSubStackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubStackNotFound creates a CreateSubStackNotFound with default headers values
func NewCreateSubStackNotFound() *CreateSubStackNotFound {
	return &CreateSubStackNotFound{}
}

/*
CreateSubStackNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateSubStackNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create sub stack not found response has a 2xx status code
func (o *CreateSubStackNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create sub stack not found response has a 3xx status code
func (o *CreateSubStackNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create sub stack not found response has a 4xx status code
func (o *CreateSubStackNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create sub stack not found response has a 5xx status code
func (o *CreateSubStackNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create sub stack not found response a status code equal to that given
func (o *CreateSubStackNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create sub stack not found response
func (o *CreateSubStackNotFound) Code() int {
	return 404
}

func (o *CreateSubStackNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/substack/{substackName}][%d] createSubStackNotFound %s", 404, payload)
}

func (o *CreateSubStackNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/substack/{substackName}][%d] createSubStackNotFound %s", 404, payload)
}

func (o *CreateSubStackNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateSubStackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubStackMethodNotAllowed creates a CreateSubStackMethodNotAllowed with default headers values
func NewCreateSubStackMethodNotAllowed() *CreateSubStackMethodNotAllowed {
	return &CreateSubStackMethodNotAllowed{}
}

/*
CreateSubStackMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type CreateSubStackMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create sub stack method not allowed response has a 2xx status code
func (o *CreateSubStackMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create sub stack method not allowed response has a 3xx status code
func (o *CreateSubStackMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create sub stack method not allowed response has a 4xx status code
func (o *CreateSubStackMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create sub stack method not allowed response has a 5xx status code
func (o *CreateSubStackMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this create sub stack method not allowed response a status code equal to that given
func (o *CreateSubStackMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the create sub stack method not allowed response
func (o *CreateSubStackMethodNotAllowed) Code() int {
	return 405
}

func (o *CreateSubStackMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/substack/{substackName}][%d] createSubStackMethodNotAllowed %s", 405, payload)
}

func (o *CreateSubStackMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/substack/{substackName}][%d] createSubStackMethodNotAllowed %s", 405, payload)
}

func (o *CreateSubStackMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateSubStackMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubStackInternalServerError creates a CreateSubStackInternalServerError with default headers values
func NewCreateSubStackInternalServerError() *CreateSubStackInternalServerError {
	return &CreateSubStackInternalServerError{}
}

/*
CreateSubStackInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateSubStackInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create sub stack internal server error response has a 2xx status code
func (o *CreateSubStackInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create sub stack internal server error response has a 3xx status code
func (o *CreateSubStackInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create sub stack internal server error response has a 4xx status code
func (o *CreateSubStackInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create sub stack internal server error response has a 5xx status code
func (o *CreateSubStackInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create sub stack internal server error response a status code equal to that given
func (o *CreateSubStackInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create sub stack internal server error response
func (o *CreateSubStackInternalServerError) Code() int {
	return 500
}

func (o *CreateSubStackInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/substack/{substackName}][%d] createSubStackInternalServerError %s", 500, payload)
}

func (o *CreateSubStackInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/substack/{substackName}][%d] createSubStackInternalServerError %s", 500, payload)
}

func (o *CreateSubStackInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateSubStackInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
