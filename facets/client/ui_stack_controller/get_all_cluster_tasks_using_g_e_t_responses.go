// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllClusterTasksUsingGETReader is a Reader for the GetAllClusterTasksUsingGET structure.
type GetAllClusterTasksUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllClusterTasksUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllClusterTasksUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllClusterTasksUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllClusterTasksUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllClusterTasksUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/stacks/clusterTask/{stackName}] getAllClusterTasksUsingGET", response, response.Code())
	}
}

// NewGetAllClusterTasksUsingGETOK creates a GetAllClusterTasksUsingGETOK with default headers values
func NewGetAllClusterTasksUsingGETOK() *GetAllClusterTasksUsingGETOK {
	return &GetAllClusterTasksUsingGETOK{}
}

/*
GetAllClusterTasksUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllClusterTasksUsingGETOK struct {
	Payload []*models.ClusterTask
}

// IsSuccess returns true when this get all cluster tasks using g e t o k response has a 2xx status code
func (o *GetAllClusterTasksUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all cluster tasks using g e t o k response has a 3xx status code
func (o *GetAllClusterTasksUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all cluster tasks using g e t o k response has a 4xx status code
func (o *GetAllClusterTasksUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all cluster tasks using g e t o k response has a 5xx status code
func (o *GetAllClusterTasksUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all cluster tasks using g e t o k response a status code equal to that given
func (o *GetAllClusterTasksUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all cluster tasks using g e t o k response
func (o *GetAllClusterTasksUsingGETOK) Code() int {
	return 200
}

func (o *GetAllClusterTasksUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/clusterTask/{stackName}][%d] getAllClusterTasksUsingGETOK %s", 200, payload)
}

func (o *GetAllClusterTasksUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/clusterTask/{stackName}][%d] getAllClusterTasksUsingGETOK %s", 200, payload)
}

func (o *GetAllClusterTasksUsingGETOK) GetPayload() []*models.ClusterTask {
	return o.Payload
}

func (o *GetAllClusterTasksUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllClusterTasksUsingGETUnauthorized creates a GetAllClusterTasksUsingGETUnauthorized with default headers values
func NewGetAllClusterTasksUsingGETUnauthorized() *GetAllClusterTasksUsingGETUnauthorized {
	return &GetAllClusterTasksUsingGETUnauthorized{}
}

/*
GetAllClusterTasksUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllClusterTasksUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all cluster tasks using g e t unauthorized response has a 2xx status code
func (o *GetAllClusterTasksUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all cluster tasks using g e t unauthorized response has a 3xx status code
func (o *GetAllClusterTasksUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all cluster tasks using g e t unauthorized response has a 4xx status code
func (o *GetAllClusterTasksUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all cluster tasks using g e t unauthorized response has a 5xx status code
func (o *GetAllClusterTasksUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all cluster tasks using g e t unauthorized response a status code equal to that given
func (o *GetAllClusterTasksUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all cluster tasks using g e t unauthorized response
func (o *GetAllClusterTasksUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllClusterTasksUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/clusterTask/{stackName}][%d] getAllClusterTasksUsingGETUnauthorized", 401)
}

func (o *GetAllClusterTasksUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/clusterTask/{stackName}][%d] getAllClusterTasksUsingGETUnauthorized", 401)
}

func (o *GetAllClusterTasksUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllClusterTasksUsingGETForbidden creates a GetAllClusterTasksUsingGETForbidden with default headers values
func NewGetAllClusterTasksUsingGETForbidden() *GetAllClusterTasksUsingGETForbidden {
	return &GetAllClusterTasksUsingGETForbidden{}
}

/*
GetAllClusterTasksUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllClusterTasksUsingGETForbidden struct {
}

// IsSuccess returns true when this get all cluster tasks using g e t forbidden response has a 2xx status code
func (o *GetAllClusterTasksUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all cluster tasks using g e t forbidden response has a 3xx status code
func (o *GetAllClusterTasksUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all cluster tasks using g e t forbidden response has a 4xx status code
func (o *GetAllClusterTasksUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all cluster tasks using g e t forbidden response has a 5xx status code
func (o *GetAllClusterTasksUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all cluster tasks using g e t forbidden response a status code equal to that given
func (o *GetAllClusterTasksUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all cluster tasks using g e t forbidden response
func (o *GetAllClusterTasksUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllClusterTasksUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/clusterTask/{stackName}][%d] getAllClusterTasksUsingGETForbidden", 403)
}

func (o *GetAllClusterTasksUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/clusterTask/{stackName}][%d] getAllClusterTasksUsingGETForbidden", 403)
}

func (o *GetAllClusterTasksUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllClusterTasksUsingGETNotFound creates a GetAllClusterTasksUsingGETNotFound with default headers values
func NewGetAllClusterTasksUsingGETNotFound() *GetAllClusterTasksUsingGETNotFound {
	return &GetAllClusterTasksUsingGETNotFound{}
}

/*
GetAllClusterTasksUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllClusterTasksUsingGETNotFound struct {
}

// IsSuccess returns true when this get all cluster tasks using g e t not found response has a 2xx status code
func (o *GetAllClusterTasksUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all cluster tasks using g e t not found response has a 3xx status code
func (o *GetAllClusterTasksUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all cluster tasks using g e t not found response has a 4xx status code
func (o *GetAllClusterTasksUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all cluster tasks using g e t not found response has a 5xx status code
func (o *GetAllClusterTasksUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all cluster tasks using g e t not found response a status code equal to that given
func (o *GetAllClusterTasksUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all cluster tasks using g e t not found response
func (o *GetAllClusterTasksUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllClusterTasksUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/clusterTask/{stackName}][%d] getAllClusterTasksUsingGETNotFound", 404)
}

func (o *GetAllClusterTasksUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/clusterTask/{stackName}][%d] getAllClusterTasksUsingGETNotFound", 404)
}

func (o *GetAllClusterTasksUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
