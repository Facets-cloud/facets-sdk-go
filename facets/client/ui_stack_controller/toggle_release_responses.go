// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ToggleReleaseReader is a Reader for the ToggleRelease structure.
type ToggleReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ToggleReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewToggleReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewToggleReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewToggleReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewToggleReleaseMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewToggleReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/stacks/{stackName}/toggleRelease] toggleRelease", response, response.Code())
	}
}

// NewToggleReleaseOK creates a ToggleReleaseOK with default headers values
func NewToggleReleaseOK() *ToggleReleaseOK {
	return &ToggleReleaseOK{}
}

/*
ToggleReleaseOK describes a response with status code 200, with default header values.

OK
*/
type ToggleReleaseOK struct {
	Payload *models.ToggleRelease
}

// IsSuccess returns true when this toggle release o k response has a 2xx status code
func (o *ToggleReleaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this toggle release o k response has a 3xx status code
func (o *ToggleReleaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this toggle release o k response has a 4xx status code
func (o *ToggleReleaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this toggle release o k response has a 5xx status code
func (o *ToggleReleaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this toggle release o k response a status code equal to that given
func (o *ToggleReleaseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the toggle release o k response
func (o *ToggleReleaseOK) Code() int {
	return 200
}

func (o *ToggleReleaseOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseOK %s", 200, payload)
}

func (o *ToggleReleaseOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseOK %s", 200, payload)
}

func (o *ToggleReleaseOK) GetPayload() *models.ToggleRelease {
	return o.Payload
}

func (o *ToggleReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ToggleRelease)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewToggleReleaseBadRequest creates a ToggleReleaseBadRequest with default headers values
func NewToggleReleaseBadRequest() *ToggleReleaseBadRequest {
	return &ToggleReleaseBadRequest{}
}

/*
ToggleReleaseBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ToggleReleaseBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this toggle release bad request response has a 2xx status code
func (o *ToggleReleaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this toggle release bad request response has a 3xx status code
func (o *ToggleReleaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this toggle release bad request response has a 4xx status code
func (o *ToggleReleaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this toggle release bad request response has a 5xx status code
func (o *ToggleReleaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this toggle release bad request response a status code equal to that given
func (o *ToggleReleaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the toggle release bad request response
func (o *ToggleReleaseBadRequest) Code() int {
	return 400
}

func (o *ToggleReleaseBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseBadRequest %s", 400, payload)
}

func (o *ToggleReleaseBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseBadRequest %s", 400, payload)
}

func (o *ToggleReleaseBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ToggleReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewToggleReleaseNotFound creates a ToggleReleaseNotFound with default headers values
func NewToggleReleaseNotFound() *ToggleReleaseNotFound {
	return &ToggleReleaseNotFound{}
}

/*
ToggleReleaseNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ToggleReleaseNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this toggle release not found response has a 2xx status code
func (o *ToggleReleaseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this toggle release not found response has a 3xx status code
func (o *ToggleReleaseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this toggle release not found response has a 4xx status code
func (o *ToggleReleaseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this toggle release not found response has a 5xx status code
func (o *ToggleReleaseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this toggle release not found response a status code equal to that given
func (o *ToggleReleaseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the toggle release not found response
func (o *ToggleReleaseNotFound) Code() int {
	return 404
}

func (o *ToggleReleaseNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseNotFound %s", 404, payload)
}

func (o *ToggleReleaseNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseNotFound %s", 404, payload)
}

func (o *ToggleReleaseNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ToggleReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewToggleReleaseMethodNotAllowed creates a ToggleReleaseMethodNotAllowed with default headers values
func NewToggleReleaseMethodNotAllowed() *ToggleReleaseMethodNotAllowed {
	return &ToggleReleaseMethodNotAllowed{}
}

/*
ToggleReleaseMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ToggleReleaseMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this toggle release method not allowed response has a 2xx status code
func (o *ToggleReleaseMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this toggle release method not allowed response has a 3xx status code
func (o *ToggleReleaseMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this toggle release method not allowed response has a 4xx status code
func (o *ToggleReleaseMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this toggle release method not allowed response has a 5xx status code
func (o *ToggleReleaseMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this toggle release method not allowed response a status code equal to that given
func (o *ToggleReleaseMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the toggle release method not allowed response
func (o *ToggleReleaseMethodNotAllowed) Code() int {
	return 405
}

func (o *ToggleReleaseMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseMethodNotAllowed %s", 405, payload)
}

func (o *ToggleReleaseMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseMethodNotAllowed %s", 405, payload)
}

func (o *ToggleReleaseMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ToggleReleaseMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewToggleReleaseInternalServerError creates a ToggleReleaseInternalServerError with default headers values
func NewToggleReleaseInternalServerError() *ToggleReleaseInternalServerError {
	return &ToggleReleaseInternalServerError{}
}

/*
ToggleReleaseInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ToggleReleaseInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this toggle release internal server error response has a 2xx status code
func (o *ToggleReleaseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this toggle release internal server error response has a 3xx status code
func (o *ToggleReleaseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this toggle release internal server error response has a 4xx status code
func (o *ToggleReleaseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this toggle release internal server error response has a 5xx status code
func (o *ToggleReleaseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this toggle release internal server error response a status code equal to that given
func (o *ToggleReleaseInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the toggle release internal server error response
func (o *ToggleReleaseInternalServerError) Code() int {
	return 500
}

func (o *ToggleReleaseInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseInternalServerError %s", 500, payload)
}

func (o *ToggleReleaseInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseInternalServerError %s", 500, payload)
}

func (o *ToggleReleaseInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ToggleReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
