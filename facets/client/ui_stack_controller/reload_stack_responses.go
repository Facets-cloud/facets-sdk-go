// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ReloadStackReader is a Reader for the ReloadStack structure.
type ReloadStackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReloadStackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReloadStackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReloadStackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReloadStackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewReloadStackMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReloadStackInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/stacks/{stackName}/reload] reloadStack", response, response.Code())
	}
}

// NewReloadStackOK creates a ReloadStackOK with default headers values
func NewReloadStackOK() *ReloadStackOK {
	return &ReloadStackOK{}
}

/*
ReloadStackOK describes a response with status code 200, with default header values.

OK
*/
type ReloadStackOK struct {
	Payload *models.Stack
}

// IsSuccess returns true when this reload stack o k response has a 2xx status code
func (o *ReloadStackOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reload stack o k response has a 3xx status code
func (o *ReloadStackOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reload stack o k response has a 4xx status code
func (o *ReloadStackOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this reload stack o k response has a 5xx status code
func (o *ReloadStackOK) IsServerError() bool {
	return false
}

// IsCode returns true when this reload stack o k response a status code equal to that given
func (o *ReloadStackOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the reload stack o k response
func (o *ReloadStackOK) Code() int {
	return 200
}

func (o *ReloadStackOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/reload][%d] reloadStackOK %s", 200, payload)
}

func (o *ReloadStackOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/reload][%d] reloadStackOK %s", 200, payload)
}

func (o *ReloadStackOK) GetPayload() *models.Stack {
	return o.Payload
}

func (o *ReloadStackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Stack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReloadStackBadRequest creates a ReloadStackBadRequest with default headers values
func NewReloadStackBadRequest() *ReloadStackBadRequest {
	return &ReloadStackBadRequest{}
}

/*
ReloadStackBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ReloadStackBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this reload stack bad request response has a 2xx status code
func (o *ReloadStackBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reload stack bad request response has a 3xx status code
func (o *ReloadStackBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reload stack bad request response has a 4xx status code
func (o *ReloadStackBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this reload stack bad request response has a 5xx status code
func (o *ReloadStackBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this reload stack bad request response a status code equal to that given
func (o *ReloadStackBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the reload stack bad request response
func (o *ReloadStackBadRequest) Code() int {
	return 400
}

func (o *ReloadStackBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/reload][%d] reloadStackBadRequest %s", 400, payload)
}

func (o *ReloadStackBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/reload][%d] reloadStackBadRequest %s", 400, payload)
}

func (o *ReloadStackBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ReloadStackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReloadStackNotFound creates a ReloadStackNotFound with default headers values
func NewReloadStackNotFound() *ReloadStackNotFound {
	return &ReloadStackNotFound{}
}

/*
ReloadStackNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ReloadStackNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this reload stack not found response has a 2xx status code
func (o *ReloadStackNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reload stack not found response has a 3xx status code
func (o *ReloadStackNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reload stack not found response has a 4xx status code
func (o *ReloadStackNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this reload stack not found response has a 5xx status code
func (o *ReloadStackNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this reload stack not found response a status code equal to that given
func (o *ReloadStackNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the reload stack not found response
func (o *ReloadStackNotFound) Code() int {
	return 404
}

func (o *ReloadStackNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/reload][%d] reloadStackNotFound %s", 404, payload)
}

func (o *ReloadStackNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/reload][%d] reloadStackNotFound %s", 404, payload)
}

func (o *ReloadStackNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ReloadStackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReloadStackMethodNotAllowed creates a ReloadStackMethodNotAllowed with default headers values
func NewReloadStackMethodNotAllowed() *ReloadStackMethodNotAllowed {
	return &ReloadStackMethodNotAllowed{}
}

/*
ReloadStackMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ReloadStackMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this reload stack method not allowed response has a 2xx status code
func (o *ReloadStackMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reload stack method not allowed response has a 3xx status code
func (o *ReloadStackMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reload stack method not allowed response has a 4xx status code
func (o *ReloadStackMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this reload stack method not allowed response has a 5xx status code
func (o *ReloadStackMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this reload stack method not allowed response a status code equal to that given
func (o *ReloadStackMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the reload stack method not allowed response
func (o *ReloadStackMethodNotAllowed) Code() int {
	return 405
}

func (o *ReloadStackMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/reload][%d] reloadStackMethodNotAllowed %s", 405, payload)
}

func (o *ReloadStackMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/reload][%d] reloadStackMethodNotAllowed %s", 405, payload)
}

func (o *ReloadStackMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ReloadStackMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReloadStackInternalServerError creates a ReloadStackInternalServerError with default headers values
func NewReloadStackInternalServerError() *ReloadStackInternalServerError {
	return &ReloadStackInternalServerError{}
}

/*
ReloadStackInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ReloadStackInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this reload stack internal server error response has a 2xx status code
func (o *ReloadStackInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reload stack internal server error response has a 3xx status code
func (o *ReloadStackInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reload stack internal server error response has a 4xx status code
func (o *ReloadStackInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this reload stack internal server error response has a 5xx status code
func (o *ReloadStackInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this reload stack internal server error response a status code equal to that given
func (o *ReloadStackInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the reload stack internal server error response
func (o *ReloadStackInternalServerError) Code() int {
	return 500
}

func (o *ReloadStackInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/reload][%d] reloadStackInternalServerError %s", 500, payload)
}

func (o *ReloadStackInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/reload][%d] reloadStackInternalServerError %s", 500, payload)
}

func (o *ReloadStackInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ReloadStackInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
