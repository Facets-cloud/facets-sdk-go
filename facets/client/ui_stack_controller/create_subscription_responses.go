// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateSubscriptionReader is a Reader for the CreateSubscription structure.
type CreateSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreateSubscriptionMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateSubscriptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/stacks/{stackName}/notification/subscriptions] createSubscription", response, response.Code())
	}
}

// NewCreateSubscriptionOK creates a CreateSubscriptionOK with default headers values
func NewCreateSubscriptionOK() *CreateSubscriptionOK {
	return &CreateSubscriptionOK{}
}

/*
CreateSubscriptionOK describes a response with status code 200, with default header values.

OK
*/
type CreateSubscriptionOK struct {
	Payload *models.Subscription
}

// IsSuccess returns true when this create subscription o k response has a 2xx status code
func (o *CreateSubscriptionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create subscription o k response has a 3xx status code
func (o *CreateSubscriptionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription o k response has a 4xx status code
func (o *CreateSubscriptionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create subscription o k response has a 5xx status code
func (o *CreateSubscriptionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create subscription o k response a status code equal to that given
func (o *CreateSubscriptionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create subscription o k response
func (o *CreateSubscriptionOK) Code() int {
	return 200
}

func (o *CreateSubscriptionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] createSubscriptionOK %s", 200, payload)
}

func (o *CreateSubscriptionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] createSubscriptionOK %s", 200, payload)
}

func (o *CreateSubscriptionOK) GetPayload() *models.Subscription {
	return o.Payload
}

func (o *CreateSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Subscription)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionBadRequest creates a CreateSubscriptionBadRequest with default headers values
func NewCreateSubscriptionBadRequest() *CreateSubscriptionBadRequest {
	return &CreateSubscriptionBadRequest{}
}

/*
CreateSubscriptionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateSubscriptionBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create subscription bad request response has a 2xx status code
func (o *CreateSubscriptionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create subscription bad request response has a 3xx status code
func (o *CreateSubscriptionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription bad request response has a 4xx status code
func (o *CreateSubscriptionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create subscription bad request response has a 5xx status code
func (o *CreateSubscriptionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create subscription bad request response a status code equal to that given
func (o *CreateSubscriptionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create subscription bad request response
func (o *CreateSubscriptionBadRequest) Code() int {
	return 400
}

func (o *CreateSubscriptionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] createSubscriptionBadRequest %s", 400, payload)
}

func (o *CreateSubscriptionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] createSubscriptionBadRequest %s", 400, payload)
}

func (o *CreateSubscriptionBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionNotFound creates a CreateSubscriptionNotFound with default headers values
func NewCreateSubscriptionNotFound() *CreateSubscriptionNotFound {
	return &CreateSubscriptionNotFound{}
}

/*
CreateSubscriptionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateSubscriptionNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create subscription not found response has a 2xx status code
func (o *CreateSubscriptionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create subscription not found response has a 3xx status code
func (o *CreateSubscriptionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription not found response has a 4xx status code
func (o *CreateSubscriptionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create subscription not found response has a 5xx status code
func (o *CreateSubscriptionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create subscription not found response a status code equal to that given
func (o *CreateSubscriptionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create subscription not found response
func (o *CreateSubscriptionNotFound) Code() int {
	return 404
}

func (o *CreateSubscriptionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] createSubscriptionNotFound %s", 404, payload)
}

func (o *CreateSubscriptionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] createSubscriptionNotFound %s", 404, payload)
}

func (o *CreateSubscriptionNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionMethodNotAllowed creates a CreateSubscriptionMethodNotAllowed with default headers values
func NewCreateSubscriptionMethodNotAllowed() *CreateSubscriptionMethodNotAllowed {
	return &CreateSubscriptionMethodNotAllowed{}
}

/*
CreateSubscriptionMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type CreateSubscriptionMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create subscription method not allowed response has a 2xx status code
func (o *CreateSubscriptionMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create subscription method not allowed response has a 3xx status code
func (o *CreateSubscriptionMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription method not allowed response has a 4xx status code
func (o *CreateSubscriptionMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create subscription method not allowed response has a 5xx status code
func (o *CreateSubscriptionMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this create subscription method not allowed response a status code equal to that given
func (o *CreateSubscriptionMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the create subscription method not allowed response
func (o *CreateSubscriptionMethodNotAllowed) Code() int {
	return 405
}

func (o *CreateSubscriptionMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] createSubscriptionMethodNotAllowed %s", 405, payload)
}

func (o *CreateSubscriptionMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] createSubscriptionMethodNotAllowed %s", 405, payload)
}

func (o *CreateSubscriptionMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateSubscriptionMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionInternalServerError creates a CreateSubscriptionInternalServerError with default headers values
func NewCreateSubscriptionInternalServerError() *CreateSubscriptionInternalServerError {
	return &CreateSubscriptionInternalServerError{}
}

/*
CreateSubscriptionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateSubscriptionInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create subscription internal server error response has a 2xx status code
func (o *CreateSubscriptionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create subscription internal server error response has a 3xx status code
func (o *CreateSubscriptionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription internal server error response has a 4xx status code
func (o *CreateSubscriptionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create subscription internal server error response has a 5xx status code
func (o *CreateSubscriptionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create subscription internal server error response a status code equal to that given
func (o *CreateSubscriptionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create subscription internal server error response
func (o *CreateSubscriptionInternalServerError) Code() int {
	return 500
}

func (o *CreateSubscriptionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] createSubscriptionInternalServerError %s", 500, payload)
}

func (o *CreateSubscriptionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] createSubscriptionInternalServerError %s", 500, payload)
}

func (o *CreateSubscriptionInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateSubscriptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
