// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui stack controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui stack controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui stack controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui stack controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateClusterTasksUsingPOST1(params *CreateClusterTasksUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateClusterTasksUsingPOST1OK, *CreateClusterTasksUsingPOST1Created, error)

	CreateProjectUsingPOST(params *CreateProjectUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectUsingPOSTOK, *CreateProjectUsingPOSTCreated, error)

	CreateStackUsingPOST1(params *CreateStackUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStackUsingPOST1OK, *CreateStackUsingPOST1Created, error)

	CreateStackV2UsingPOST(params *CreateStackV2UsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStackV2UsingPOSTOK, *CreateStackV2UsingPOSTCreated, error)

	CreateStarterProjectUsingPOST(params *CreateStarterProjectUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStarterProjectUsingPOSTOK, *CreateStarterProjectUsingPOSTCreated, error)

	CreateSubStackUsingPOST(params *CreateSubStackUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubStackUsingPOSTOK, *CreateSubStackUsingPOSTCreated, error)

	CreateSubscriptionUsingPOST1(params *CreateSubscriptionUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscriptionUsingPOST1OK, *CreateSubscriptionUsingPOST1Created, error)

	DeleteStackUsingDELETE(params *DeleteStackUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStackUsingDELETEOK, *DeleteStackUsingDELETENoContent, error)

	EnableGitOpsUsingPUT(params *EnableGitOpsUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableGitOpsUsingPUTOK, *EnableGitOpsUsingPUTCreated, error)

	GetAllClusterTasksUsingGET(params *GetAllClusterTasksUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllClusterTasksUsingGETOK, error)

	GetAllClustersUsingGET(params *GetAllClustersUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllClustersUsingGETOK, error)

	GetAllSubscriptionsUsingGET1(params *GetAllSubscriptionsUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSubscriptionsUsingGET1OK, error)

	GetAllTemplateInputsMetaUsingGET(params *GetAllTemplateInputsMetaUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllTemplateInputsMetaUsingGETOK, error)

	GetApplicationListUsingGET(params *GetApplicationListUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationListUsingGETOK, error)

	GetApplicationUsingGET1(params *GetApplicationUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationUsingGET1OK, error)

	GetClusterMetadataByStackUsingGET(params *GetClusterMetadataByStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterMetadataByStackUsingGETOK, error)

	GetClustersOverviewUsingGET(params *GetClustersOverviewUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClustersOverviewUsingGETOK, error)

	GetClustersUsingGET1(params *GetClustersUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClustersUsingGET1OK, error)

	GetClustersWithStatusUsingGET(params *GetClustersWithStatusUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClustersWithStatusUsingGETOK, error)

	GetLocalDeploymentContextUsingGET(params *GetLocalDeploymentContextUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLocalDeploymentContextUsingGETOK, error)

	GetOverridesUsingGET2(params *GetOverridesUsingGET2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOverridesUsingGET2OK, error)

	GetResourceTypesUsingGET(params *GetResourceTypesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceTypesUsingGETOK, error)

	GetResourcesByTypesUsingGET(params *GetResourcesByTypesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourcesByTypesUsingGETOK, error)

	GetRunningBaseClustersUsingGET(params *GetRunningBaseClustersUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningBaseClustersUsingGETOK, error)

	GetStackTemplatesUsingGET(params *GetStackTemplatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStackTemplatesUsingGETOK, error)

	GetStackUsingGET(params *GetStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStackUsingGETOK, error)

	GetStackWithAccountUsingGET(params *GetStackWithAccountUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStackWithAccountUsingGETOK, error)

	GetStacksUsingGET1(params *GetStacksUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStacksUsingGET1OK, error)

	MigrateOverridesToGitUsingGET(params *MigrateOverridesToGitUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MigrateOverridesToGitUsingGETOK, error)

	MigrateOverridesToGitV2UsingPOST(params *MigrateOverridesToGitV2UsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MigrateOverridesToGitV2UsingPOSTOK, *MigrateOverridesToGitV2UsingPOSTCreated, error)

	ReloadStackUsingGET1(params *ReloadStackUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadStackUsingGET1OK, error)

	SaveAsTemplateUsingPOST(params *SaveAsTemplateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveAsTemplateUsingPOSTOK, *SaveAsTemplateUsingPOSTCreated, error)

	SaveAsTemplateV2UsingPOST(params *SaveAsTemplateV2UsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveAsTemplateV2UsingPOSTOK, *SaveAsTemplateV2UsingPOSTCreated, error)

	StackSyncWithGitUsingGET(params *StackSyncWithGitUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackSyncWithGitUsingGETOK, error)

	SyncResourcesUsingGET(params *SyncResourcesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncResourcesUsingGETOK, error)

	SyncStackWithGitUsingGET(params *SyncStackWithGitUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncStackWithGitUsingGETOK, error)

	ToggleReleaseUsingPOST1(params *ToggleReleaseUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ToggleReleaseUsingPOST1OK, *ToggleReleaseUsingPOST1Created, error)

	UpdateStackUsingPUT1(params *UpdateStackUsingPUT1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStackUsingPUT1OK, *UpdateStackUsingPUT1Created, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateClusterTasksUsingPOST1 creates cluster tasks
*/
func (a *Client) CreateClusterTasksUsingPOST1(params *CreateClusterTasksUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateClusterTasksUsingPOST1OK, *CreateClusterTasksUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterTasksUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createClusterTasksUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/clusterTask",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateClusterTasksUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateClusterTasksUsingPOST1OK:
		return value, nil, nil
	case *CreateClusterTasksUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateProjectUsingPOST creates project
*/
func (a *Client) CreateProjectUsingPOST(params *CreateProjectUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectUsingPOSTOK, *CreateProjectUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createProjectUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/project",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateProjectUsingPOSTOK:
		return value, nil, nil
	case *CreateProjectUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateStackUsingPOST1 creates stack
*/
func (a *Client) CreateStackUsingPOST1(params *CreateStackUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStackUsingPOST1OK, *CreateStackUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStackUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createStackUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStackUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateStackUsingPOST1OK:
		return value, nil, nil
	case *CreateStackUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateStackV2UsingPOST creates stack v2
*/
func (a *Client) CreateStackV2UsingPOST(params *CreateStackV2UsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStackV2UsingPOSTOK, *CreateStackV2UsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStackV2UsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createStackV2UsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/v2",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStackV2UsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateStackV2UsingPOSTOK:
		return value, nil, nil
	case *CreateStackV2UsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateStarterProjectUsingPOST creates starter project
*/
func (a *Client) CreateStarterProjectUsingPOST(params *CreateStarterProjectUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStarterProjectUsingPOSTOK, *CreateStarterProjectUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStarterProjectUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createStarterProjectUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/starter-project",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStarterProjectUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateStarterProjectUsingPOSTOK:
		return value, nil, nil
	case *CreateStarterProjectUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSubStackUsingPOST creates sub stack
*/
func (a *Client) CreateSubStackUsingPOST(params *CreateSubStackUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubStackUsingPOSTOK, *CreateSubStackUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubStackUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSubStackUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/substack/{substackName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubStackUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateSubStackUsingPOSTOK:
		return value, nil, nil
	case *CreateSubStackUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSubscriptionUsingPOST1 creates subscription
*/
func (a *Client) CreateSubscriptionUsingPOST1(params *CreateSubscriptionUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscriptionUsingPOST1OK, *CreateSubscriptionUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubscriptionUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSubscriptionUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/notification/subscriptions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubscriptionUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateSubscriptionUsingPOST1OK:
		return value, nil, nil
	case *CreateSubscriptionUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteStackUsingDELETE deletes stack
*/
func (a *Client) DeleteStackUsingDELETE(params *DeleteStackUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStackUsingDELETEOK, *DeleteStackUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStackUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteStackUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStackUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteStackUsingDELETEOK:
		return value, nil, nil
	case *DeleteStackUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EnableGitOpsUsingPUT enables git ops
*/
func (a *Client) EnableGitOpsUsingPUT(params *EnableGitOpsUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableGitOpsUsingPUTOK, *EnableGitOpsUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableGitOpsUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enableGitOpsUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/enable-git-ops",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableGitOpsUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *EnableGitOpsUsingPUTOK:
		return value, nil, nil
	case *EnableGitOpsUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllClusterTasksUsingGET gets all cluster tasks
*/
func (a *Client) GetAllClusterTasksUsingGET(params *GetAllClusterTasksUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllClusterTasksUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllClusterTasksUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllClusterTasksUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/clusterTask/{stackName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllClusterTasksUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllClusterTasksUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllClusterTasksUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllClustersUsingGET gets all clusters
*/
func (a *Client) GetAllClustersUsingGET(params *GetAllClustersUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllClustersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllClustersUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllClustersUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/clusters",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllClustersUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllClustersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllClustersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSubscriptionsUsingGET1 gets all subscriptions
*/
func (a *Client) GetAllSubscriptionsUsingGET1(params *GetAllSubscriptionsUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSubscriptionsUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSubscriptionsUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSubscriptionsUsingGET_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/notification/subscriptions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllSubscriptionsUsingGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSubscriptionsUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSubscriptionsUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllTemplateInputsMetaUsingGET gets all template inputs meta
*/
func (a *Client) GetAllTemplateInputsMetaUsingGET(params *GetAllTemplateInputsMetaUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllTemplateInputsMetaUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTemplateInputsMetaUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllTemplateInputsMetaUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/templateInputs/meta",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllTemplateInputsMetaUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllTemplateInputsMetaUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllTemplateInputsMetaUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApplicationListUsingGET gets application list
*/
func (a *Client) GetApplicationListUsingGET(params *GetApplicationListUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationListUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApplicationListUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/{resourceType}/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationListUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApplicationUsingGET1 gets application
*/
func (a *Client) GetApplicationUsingGET1(params *GetApplicationUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApplicationUsingGET_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/{resourceType}/{appName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationUsingGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterMetadataByStackUsingGET gets cluster metadata by stack
*/
func (a *Client) GetClusterMetadataByStackUsingGET(params *GetClusterMetadataByStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterMetadataByStackUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterMetadataByStackUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterMetadataByStackUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/clusters-metadata",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterMetadataByStackUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterMetadataByStackUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterMetadataByStackUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClustersOverviewUsingGET gets clusters overview
*/
func (a *Client) GetClustersOverviewUsingGET(params *GetClustersOverviewUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClustersOverviewUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersOverviewUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClustersOverviewUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/clusters-overview",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClustersOverviewUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClustersOverviewUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClustersOverviewUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClustersUsingGET1 gets clusters
*/
func (a *Client) GetClustersUsingGET1(params *GetClustersUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClustersUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClustersUsingGET_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/clusters",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClustersUsingGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClustersUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClustersUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClustersWithStatusUsingGET gets clusters with status
*/
func (a *Client) GetClustersWithStatusUsingGET(params *GetClustersWithStatusUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClustersWithStatusUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersWithStatusUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClustersWithStatusUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/clustersWithStatus",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClustersWithStatusUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClustersWithStatusUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClustersWithStatusUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLocalDeploymentContextUsingGET gets local deployment context
*/
func (a *Client) GetLocalDeploymentContextUsingGET(params *GetLocalDeploymentContextUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLocalDeploymentContextUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLocalDeploymentContextUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLocalDeploymentContextUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/localDeploymentContext",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLocalDeploymentContextUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLocalDeploymentContextUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLocalDeploymentContextUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOverridesUsingGET2 gets overrides
*/
func (a *Client) GetOverridesUsingGET2(params *GetOverridesUsingGET2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOverridesUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOverridesUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOverridesUsingGET_2",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/overrides",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOverridesUsingGET2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOverridesUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOverridesUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceTypesUsingGET gets resource types
*/
func (a *Client) GetResourceTypesUsingGET(params *GetResourceTypesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceTypesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceTypesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceTypesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/suggestions/resourceType",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceTypesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceTypesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceTypesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourcesByTypesUsingGET gets resources by types
*/
func (a *Client) GetResourcesByTypesUsingGET(params *GetResourcesByTypesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourcesByTypesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcesByTypesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourcesByTypesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/suggestions/resourceType/{resourceType}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourcesByTypesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourcesByTypesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourcesByTypesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRunningBaseClustersUsingGET gets running base clusters
*/
func (a *Client) GetRunningBaseClustersUsingGET(params *GetRunningBaseClustersUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningBaseClustersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunningBaseClustersUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRunningBaseClustersUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/running-base-clusters",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunningBaseClustersUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunningBaseClustersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunningBaseClustersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStackTemplatesUsingGET gets stack templates
*/
func (a *Client) GetStackTemplatesUsingGET(params *GetStackTemplatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStackTemplatesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackTemplatesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStackTemplatesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/templates",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStackTemplatesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackTemplatesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStackTemplatesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStackUsingGET gets stack
*/
func (a *Client) GetStackUsingGET(params *GetStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStackUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStackUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStackUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStackUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStackWithAccountUsingGET gets stack with account
*/
func (a *Client) GetStackWithAccountUsingGET(params *GetStackWithAccountUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStackWithAccountUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackWithAccountUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStackWithAccountUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/withAccount",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStackWithAccountUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackWithAccountUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStackWithAccountUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStacksUsingGET1 gets stacks
*/
func (a *Client) GetStacksUsingGET1(params *GetStacksUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStacksUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStacksUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStacksUsingGET_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStacksUsingGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStacksUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStacksUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MigrateOverridesToGitUsingGET migrates overrides to git
*/
func (a *Client) MigrateOverridesToGitUsingGET(params *MigrateOverridesToGitUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MigrateOverridesToGitUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMigrateOverridesToGitUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "migrateOverridesToGitUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/migrate-overrides",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MigrateOverridesToGitUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MigrateOverridesToGitUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for migrateOverridesToGitUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MigrateOverridesToGitV2UsingPOST migrates overrides to git v2
*/
func (a *Client) MigrateOverridesToGitV2UsingPOST(params *MigrateOverridesToGitV2UsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MigrateOverridesToGitV2UsingPOSTOK, *MigrateOverridesToGitV2UsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMigrateOverridesToGitV2UsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "migrateOverridesToGitV2UsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/migrate-overrides-v2",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MigrateOverridesToGitV2UsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MigrateOverridesToGitV2UsingPOSTOK:
		return value, nil, nil
	case *MigrateOverridesToGitV2UsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReloadStackUsingGET1 reloads stack
*/
func (a *Client) ReloadStackUsingGET1(params *ReloadStackUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadStackUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadStackUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "reloadStackUsingGET_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/reload",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReloadStackUsingGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadStackUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadStackUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SaveAsTemplateUsingPOST saves as template
*/
func (a *Client) SaveAsTemplateUsingPOST(params *SaveAsTemplateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveAsTemplateUsingPOSTOK, *SaveAsTemplateUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveAsTemplateUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "saveAsTemplateUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/template",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveAsTemplateUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SaveAsTemplateUsingPOSTOK:
		return value, nil, nil
	case *SaveAsTemplateUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SaveAsTemplateV2UsingPOST saves as template v2
*/
func (a *Client) SaveAsTemplateV2UsingPOST(params *SaveAsTemplateV2UsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveAsTemplateV2UsingPOSTOK, *SaveAsTemplateV2UsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveAsTemplateV2UsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "saveAsTemplateV2UsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/template-v2",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveAsTemplateV2UsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SaveAsTemplateV2UsingPOSTOK:
		return value, nil, nil
	case *SaveAsTemplateV2UsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StackSyncWithGitUsingGET syncs stack with git

Use this to sync stack with git. Runs synchronously for the stack, and then does a non-force sync of all clusters in async
*/
func (a *Client) StackSyncWithGitUsingGET(params *StackSyncWithGitUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackSyncWithGitUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackSyncWithGitUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stackSyncWithGitUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/sync-with-git/v2",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StackSyncWithGitUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackSyncWithGitUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stackSyncWithGitUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SyncResourcesUsingGET syncs resources
*/
func (a *Client) SyncResourcesUsingGET(params *SyncResourcesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncResourcesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncResourcesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncResourcesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/sync-resources",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncResourcesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncResourcesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for syncResourcesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SyncStackWithGitUsingGET syncs stack with git
*/
func (a *Client) SyncStackWithGitUsingGET(params *SyncStackWithGitUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncStackWithGitUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncStackWithGitUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncStackWithGitUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/sync-with-git",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncStackWithGitUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncStackWithGitUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for syncStackWithGitUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ToggleReleaseUsingPOST1 toggles release
*/
func (a *Client) ToggleReleaseUsingPOST1(params *ToggleReleaseUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ToggleReleaseUsingPOST1OK, *ToggleReleaseUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewToggleReleaseUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "toggleReleaseUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/toggleRelease",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ToggleReleaseUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ToggleReleaseUsingPOST1OK:
		return value, nil, nil
	case *ToggleReleaseUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateStackUsingPUT1 updates stack
*/
func (a *Client) UpdateStackUsingPUT1(params *UpdateStackUsingPUT1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStackUsingPUT1OK, *UpdateStackUsingPUT1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStackUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateStackUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateStackUsingPUT1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateStackUsingPUT1OK:
		return value, nil, nil
	case *UpdateStackUsingPUT1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
