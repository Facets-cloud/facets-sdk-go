// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui stack controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui stack controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui stack controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui stack controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateProject(params *CreateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectOK, error)

	CreateStack(params *CreateStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStackOK, error)

	CreateStackV2(params *CreateStackV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStackV2OK, error)

	CreateStarterProject(params *CreateStarterProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStarterProjectOK, error)

	CreateSubStack(params *CreateSubStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubStackOK, error)

	CreateSubscription(params *CreateSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscriptionOK, error)

	DeleteOverridesFields(params *DeleteOverridesFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOverridesFieldsOK, error)

	DeleteStack(params *DeleteStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStackOK, error)

	EnableGitOps(params *EnableGitOpsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableGitOpsOK, error)

	GetAllClusters(params *GetAllClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllClustersOK, error)

	GetAllSubscriptions(params *GetAllSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSubscriptionsOK, error)

	GetAllTemplateInputsMeta(params *GetAllTemplateInputsMetaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllTemplateInputsMetaOK, error)

	GetApplication(params *GetApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationOK, error)

	GetApplicationList(params *GetApplicationListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationListOK, error)

	GetClusterMetadataByStack(params *GetClusterMetadataByStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterMetadataByStackOK, error)

	GetClusters(params *GetClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClustersOK, error)

	GetClustersOverview(params *GetClustersOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClustersOverviewOK, error)

	GetClustersWithStatus(params *GetClustersWithStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClustersWithStatusOK, error)

	GetLocalDeploymentContext(params *GetLocalDeploymentContextParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLocalDeploymentContextOK, error)

	GetOverrides(params *GetOverridesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOverridesOK, error)

	GetResourceTypes(params *GetResourceTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceTypesOK, error)

	GetResourcesByTypes(params *GetResourcesByTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourcesByTypesOK, error)

	GetRunningBaseClusters(params *GetRunningBaseClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningBaseClustersOK, error)

	GetStack(params *GetStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStackOK, error)

	GetStackTemplates(params *GetStackTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStackTemplatesOK, error)

	GetStackWithAccount(params *GetStackWithAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStackWithAccountOK, error)

	GetStacks(params *GetStacksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStacksOK, error)

	MigrateOverridesToGit(params *MigrateOverridesToGitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MigrateOverridesToGitOK, error)

	MigrateOverridesToGitV2(params *MigrateOverridesToGitV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MigrateOverridesToGitV2OK, error)

	ReloadStack(params *ReloadStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadStackOK, error)

	SaveAsTemplate(params *SaveAsTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveAsTemplateOK, error)

	SaveAsTemplateV2(params *SaveAsTemplateV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveAsTemplateV2OK, error)

	StackSyncWithGit(params *StackSyncWithGitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackSyncWithGitOK, error)

	SyncResources(params *SyncResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncResourcesOK, error)

	SyncStackWithGit(params *SyncStackWithGitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncStackWithGitOK, error)

	ToggleRelease(params *ToggleReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ToggleReleaseOK, error)

	UpdateStack(params *UpdateStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStackOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateProject create project API
*/
func (a *Client) CreateProject(params *CreateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createProject",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/project",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateStack create stack API
*/
func (a *Client) CreateStack(params *CreateStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createStack",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateStackV2 create stack v2 API
*/
func (a *Client) CreateStackV2(params *CreateStackV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStackV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStackV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createStackV2",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStackV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStackV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createStackV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateStarterProject create starter project API
*/
func (a *Client) CreateStarterProject(params *CreateStarterProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStarterProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStarterProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createStarterProject",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/starter-project",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStarterProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStarterProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createStarterProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSubStack create sub stack API
*/
func (a *Client) CreateSubStack(params *CreateSubStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSubStack",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/substack/{substackName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSubStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSubStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSubscription create subscription API
*/
func (a *Client) CreateSubscription(params *CreateSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSubscription",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/notification/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteOverridesFields delete overrides fields API
*/
func (a *Client) DeleteOverridesFields(params *DeleteOverridesFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOverridesFieldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOverridesFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOverridesFields",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/overrides-fields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOverridesFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOverridesFieldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOverridesFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteStack delete stack API
*/
func (a *Client) DeleteStack(params *DeleteStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteStack",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EnableGitOps enable git ops API
*/
func (a *Client) EnableGitOps(params *EnableGitOpsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableGitOpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableGitOpsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enableGitOps",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/enable-git-ops",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableGitOpsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableGitOpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enableGitOps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllClusters get all clusters API
*/
func (a *Client) GetAllClusters(params *GetAllClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllClusters",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSubscriptions get all subscriptions API
*/
func (a *Client) GetAllSubscriptions(params *GetAllSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSubscriptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSubscriptions",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/notification/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllSubscriptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSubscriptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSubscriptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllTemplateInputsMeta get all template inputs meta API
*/
func (a *Client) GetAllTemplateInputsMeta(params *GetAllTemplateInputsMetaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllTemplateInputsMetaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTemplateInputsMetaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllTemplateInputsMeta",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/templateInputs/meta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllTemplateInputsMetaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllTemplateInputsMetaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllTemplateInputsMeta: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApplication get application API
*/
func (a *Client) GetApplication(params *GetApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApplication",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/{resourceType}/{appName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetApplicationList get application list API
*/
func (a *Client) GetApplicationList(params *GetApplicationListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApplicationListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApplicationList",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/{resourceType}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterMetadataByStack get cluster metadata by stack API
*/
func (a *Client) GetClusterMetadataByStack(params *GetClusterMetadataByStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterMetadataByStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterMetadataByStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterMetadataByStack",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/clusters-metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterMetadataByStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterMetadataByStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterMetadataByStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusters get clusters API
*/
func (a *Client) GetClusters(params *GetClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusters",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClustersOverview get clusters overview API
*/
func (a *Client) GetClustersOverview(params *GetClustersOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClustersOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersOverviewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClustersOverview",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/clusters-overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClustersOverviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClustersOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClustersOverview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClustersWithStatus get clusters with status API
*/
func (a *Client) GetClustersWithStatus(params *GetClustersWithStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClustersWithStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersWithStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClustersWithStatus",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/clustersWithStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClustersWithStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClustersWithStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClustersWithStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLocalDeploymentContext get local deployment context API
*/
func (a *Client) GetLocalDeploymentContext(params *GetLocalDeploymentContextParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLocalDeploymentContextOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLocalDeploymentContextParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLocalDeploymentContext",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/localDeploymentContext",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLocalDeploymentContextReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLocalDeploymentContextOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLocalDeploymentContext: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOverrides get overrides API
*/
func (a *Client) GetOverrides(params *GetOverridesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOverridesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOverridesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOverrides",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/overrides",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOverridesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOverridesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOverrides: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceTypes get resource types API
*/
func (a *Client) GetResourceTypes(params *GetResourceTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceTypes",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/suggestions/resourceType",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourcesByTypes get resources by types API
*/
func (a *Client) GetResourcesByTypes(params *GetResourcesByTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourcesByTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcesByTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourcesByTypes",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/suggestions/resourceType/{resourceType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourcesByTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourcesByTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourcesByTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRunningBaseClusters get running base clusters API
*/
func (a *Client) GetRunningBaseClusters(params *GetRunningBaseClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningBaseClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunningBaseClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRunningBaseClusters",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/running-base-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunningBaseClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunningBaseClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunningBaseClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStack get stack API
*/
func (a *Client) GetStack(params *GetStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStack",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStackTemplates get stack templates API
*/
func (a *Client) GetStackTemplates(params *GetStackTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStackTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStackTemplates",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStackTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStackTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStackWithAccount get stack with account API
*/
func (a *Client) GetStackWithAccount(params *GetStackWithAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStackWithAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackWithAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStackWithAccount",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/withAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStackWithAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackWithAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStackWithAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStacks get stacks API
*/
func (a *Client) GetStacks(params *GetStacksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStacksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStacks",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStacksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStacksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStacks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MigrateOverridesToGit migrate overrides to git API
*/
func (a *Client) MigrateOverridesToGit(params *MigrateOverridesToGitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MigrateOverridesToGitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMigrateOverridesToGitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "migrateOverridesToGit",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/migrate-overrides",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MigrateOverridesToGitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MigrateOverridesToGitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for migrateOverridesToGit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MigrateOverridesToGitV2 migrate overrides to git v2 API
*/
func (a *Client) MigrateOverridesToGitV2(params *MigrateOverridesToGitV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MigrateOverridesToGitV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMigrateOverridesToGitV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "migrateOverridesToGitV2",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/migrate-overrides-v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MigrateOverridesToGitV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MigrateOverridesToGitV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for migrateOverridesToGitV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReloadStack reload stack API
*/
func (a *Client) ReloadStack(params *ReloadStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reloadStack",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/reload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReloadStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SaveAsTemplate save as template API
*/
func (a *Client) SaveAsTemplate(params *SaveAsTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveAsTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveAsTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "saveAsTemplate",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveAsTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveAsTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveAsTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SaveAsTemplateV2 save as template v2 API
*/
func (a *Client) SaveAsTemplateV2(params *SaveAsTemplateV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveAsTemplateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveAsTemplateV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "saveAsTemplateV2",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/template-v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveAsTemplateV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveAsTemplateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveAsTemplateV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StackSyncWithGit syncs stack with git

Use this to sync stack with git. Runs synchronously for the stack, and then does a non-force sync of all clusters in async
*/
func (a *Client) StackSyncWithGit(params *StackSyncWithGitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StackSyncWithGitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackSyncWithGitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stackSyncWithGit",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/sync-with-git/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StackSyncWithGitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StackSyncWithGitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stackSyncWithGit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SyncResources sync resources API
*/
func (a *Client) SyncResources(params *SyncResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncResources",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/sync-resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for syncResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SyncStackWithGit sync stack with git API
*/
func (a *Client) SyncStackWithGit(params *SyncStackWithGitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncStackWithGitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncStackWithGitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncStackWithGit",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/sync-with-git",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncStackWithGitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncStackWithGitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for syncStackWithGit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ToggleRelease toggle release API
*/
func (a *Client) ToggleRelease(params *ToggleReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ToggleReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewToggleReleaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "toggleRelease",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}/toggleRelease",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ToggleReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ToggleReleaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for toggleRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateStack update stack API
*/
func (a *Client) UpdateStack(params *UpdateStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateStack",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/stacks/{stackName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
