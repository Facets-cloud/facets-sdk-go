// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetStackUsingGETReader is a Reader for the GetStackUsingGET structure.
type GetStackUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStackUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStackUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetStackUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetStackUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetStackUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/stacks/{stackName}] getStackUsingGET", response, response.Code())
	}
}

// NewGetStackUsingGETOK creates a GetStackUsingGETOK with default headers values
func NewGetStackUsingGETOK() *GetStackUsingGETOK {
	return &GetStackUsingGETOK{}
}

/*
GetStackUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetStackUsingGETOK struct {
	Payload *models.Stack
}

// IsSuccess returns true when this get stack using g e t o k response has a 2xx status code
func (o *GetStackUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get stack using g e t o k response has a 3xx status code
func (o *GetStackUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get stack using g e t o k response has a 4xx status code
func (o *GetStackUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get stack using g e t o k response has a 5xx status code
func (o *GetStackUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get stack using g e t o k response a status code equal to that given
func (o *GetStackUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get stack using g e t o k response
func (o *GetStackUsingGETOK) Code() int {
	return 200
}

func (o *GetStackUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}][%d] getStackUsingGETOK %s", 200, payload)
}

func (o *GetStackUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}][%d] getStackUsingGETOK %s", 200, payload)
}

func (o *GetStackUsingGETOK) GetPayload() *models.Stack {
	return o.Payload
}

func (o *GetStackUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Stack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStackUsingGETUnauthorized creates a GetStackUsingGETUnauthorized with default headers values
func NewGetStackUsingGETUnauthorized() *GetStackUsingGETUnauthorized {
	return &GetStackUsingGETUnauthorized{}
}

/*
GetStackUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetStackUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get stack using g e t unauthorized response has a 2xx status code
func (o *GetStackUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get stack using g e t unauthorized response has a 3xx status code
func (o *GetStackUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get stack using g e t unauthorized response has a 4xx status code
func (o *GetStackUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get stack using g e t unauthorized response has a 5xx status code
func (o *GetStackUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get stack using g e t unauthorized response a status code equal to that given
func (o *GetStackUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get stack using g e t unauthorized response
func (o *GetStackUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetStackUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}][%d] getStackUsingGETUnauthorized", 401)
}

func (o *GetStackUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}][%d] getStackUsingGETUnauthorized", 401)
}

func (o *GetStackUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStackUsingGETForbidden creates a GetStackUsingGETForbidden with default headers values
func NewGetStackUsingGETForbidden() *GetStackUsingGETForbidden {
	return &GetStackUsingGETForbidden{}
}

/*
GetStackUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetStackUsingGETForbidden struct {
}

// IsSuccess returns true when this get stack using g e t forbidden response has a 2xx status code
func (o *GetStackUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get stack using g e t forbidden response has a 3xx status code
func (o *GetStackUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get stack using g e t forbidden response has a 4xx status code
func (o *GetStackUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get stack using g e t forbidden response has a 5xx status code
func (o *GetStackUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get stack using g e t forbidden response a status code equal to that given
func (o *GetStackUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get stack using g e t forbidden response
func (o *GetStackUsingGETForbidden) Code() int {
	return 403
}

func (o *GetStackUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}][%d] getStackUsingGETForbidden", 403)
}

func (o *GetStackUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}][%d] getStackUsingGETForbidden", 403)
}

func (o *GetStackUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStackUsingGETNotFound creates a GetStackUsingGETNotFound with default headers values
func NewGetStackUsingGETNotFound() *GetStackUsingGETNotFound {
	return &GetStackUsingGETNotFound{}
}

/*
GetStackUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetStackUsingGETNotFound struct {
}

// IsSuccess returns true when this get stack using g e t not found response has a 2xx status code
func (o *GetStackUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get stack using g e t not found response has a 3xx status code
func (o *GetStackUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get stack using g e t not found response has a 4xx status code
func (o *GetStackUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get stack using g e t not found response has a 5xx status code
func (o *GetStackUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get stack using g e t not found response a status code equal to that given
func (o *GetStackUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get stack using g e t not found response
func (o *GetStackUsingGETNotFound) Code() int {
	return 404
}

func (o *GetStackUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}][%d] getStackUsingGETNotFound", 404)
}

func (o *GetStackUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}][%d] getStackUsingGETNotFound", 404)
}

func (o *GetStackUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
