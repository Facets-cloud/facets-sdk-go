// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllSubscriptionsReader is a Reader for the GetAllSubscriptions structure.
type GetAllSubscriptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllSubscriptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllSubscriptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllSubscriptionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllSubscriptionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAllSubscriptionsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllSubscriptionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/stacks/{stackName}/notification/subscriptions] getAllSubscriptions", response, response.Code())
	}
}

// NewGetAllSubscriptionsOK creates a GetAllSubscriptionsOK with default headers values
func NewGetAllSubscriptionsOK() *GetAllSubscriptionsOK {
	return &GetAllSubscriptionsOK{}
}

/*
GetAllSubscriptionsOK describes a response with status code 200, with default header values.

OK
*/
type GetAllSubscriptionsOK struct {
	Payload []*models.Subscription
}

// IsSuccess returns true when this get all subscriptions o k response has a 2xx status code
func (o *GetAllSubscriptionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all subscriptions o k response has a 3xx status code
func (o *GetAllSubscriptionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all subscriptions o k response has a 4xx status code
func (o *GetAllSubscriptionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all subscriptions o k response has a 5xx status code
func (o *GetAllSubscriptionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all subscriptions o k response a status code equal to that given
func (o *GetAllSubscriptionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all subscriptions o k response
func (o *GetAllSubscriptionsOK) Code() int {
	return 200
}

func (o *GetAllSubscriptionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] getAllSubscriptionsOK %s", 200, payload)
}

func (o *GetAllSubscriptionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] getAllSubscriptionsOK %s", 200, payload)
}

func (o *GetAllSubscriptionsOK) GetPayload() []*models.Subscription {
	return o.Payload
}

func (o *GetAllSubscriptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllSubscriptionsBadRequest creates a GetAllSubscriptionsBadRequest with default headers values
func NewGetAllSubscriptionsBadRequest() *GetAllSubscriptionsBadRequest {
	return &GetAllSubscriptionsBadRequest{}
}

/*
GetAllSubscriptionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAllSubscriptionsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all subscriptions bad request response has a 2xx status code
func (o *GetAllSubscriptionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all subscriptions bad request response has a 3xx status code
func (o *GetAllSubscriptionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all subscriptions bad request response has a 4xx status code
func (o *GetAllSubscriptionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all subscriptions bad request response has a 5xx status code
func (o *GetAllSubscriptionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all subscriptions bad request response a status code equal to that given
func (o *GetAllSubscriptionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all subscriptions bad request response
func (o *GetAllSubscriptionsBadRequest) Code() int {
	return 400
}

func (o *GetAllSubscriptionsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] getAllSubscriptionsBadRequest %s", 400, payload)
}

func (o *GetAllSubscriptionsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] getAllSubscriptionsBadRequest %s", 400, payload)
}

func (o *GetAllSubscriptionsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllSubscriptionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllSubscriptionsNotFound creates a GetAllSubscriptionsNotFound with default headers values
func NewGetAllSubscriptionsNotFound() *GetAllSubscriptionsNotFound {
	return &GetAllSubscriptionsNotFound{}
}

/*
GetAllSubscriptionsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllSubscriptionsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all subscriptions not found response has a 2xx status code
func (o *GetAllSubscriptionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all subscriptions not found response has a 3xx status code
func (o *GetAllSubscriptionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all subscriptions not found response has a 4xx status code
func (o *GetAllSubscriptionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all subscriptions not found response has a 5xx status code
func (o *GetAllSubscriptionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all subscriptions not found response a status code equal to that given
func (o *GetAllSubscriptionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all subscriptions not found response
func (o *GetAllSubscriptionsNotFound) Code() int {
	return 404
}

func (o *GetAllSubscriptionsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] getAllSubscriptionsNotFound %s", 404, payload)
}

func (o *GetAllSubscriptionsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] getAllSubscriptionsNotFound %s", 404, payload)
}

func (o *GetAllSubscriptionsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllSubscriptionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllSubscriptionsMethodNotAllowed creates a GetAllSubscriptionsMethodNotAllowed with default headers values
func NewGetAllSubscriptionsMethodNotAllowed() *GetAllSubscriptionsMethodNotAllowed {
	return &GetAllSubscriptionsMethodNotAllowed{}
}

/*
GetAllSubscriptionsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAllSubscriptionsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all subscriptions method not allowed response has a 2xx status code
func (o *GetAllSubscriptionsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all subscriptions method not allowed response has a 3xx status code
func (o *GetAllSubscriptionsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all subscriptions method not allowed response has a 4xx status code
func (o *GetAllSubscriptionsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all subscriptions method not allowed response has a 5xx status code
func (o *GetAllSubscriptionsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get all subscriptions method not allowed response a status code equal to that given
func (o *GetAllSubscriptionsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get all subscriptions method not allowed response
func (o *GetAllSubscriptionsMethodNotAllowed) Code() int {
	return 405
}

func (o *GetAllSubscriptionsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] getAllSubscriptionsMethodNotAllowed %s", 405, payload)
}

func (o *GetAllSubscriptionsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] getAllSubscriptionsMethodNotAllowed %s", 405, payload)
}

func (o *GetAllSubscriptionsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllSubscriptionsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllSubscriptionsInternalServerError creates a GetAllSubscriptionsInternalServerError with default headers values
func NewGetAllSubscriptionsInternalServerError() *GetAllSubscriptionsInternalServerError {
	return &GetAllSubscriptionsInternalServerError{}
}

/*
GetAllSubscriptionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAllSubscriptionsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all subscriptions internal server error response has a 2xx status code
func (o *GetAllSubscriptionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all subscriptions internal server error response has a 3xx status code
func (o *GetAllSubscriptionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all subscriptions internal server error response has a 4xx status code
func (o *GetAllSubscriptionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all subscriptions internal server error response has a 5xx status code
func (o *GetAllSubscriptionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all subscriptions internal server error response a status code equal to that given
func (o *GetAllSubscriptionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all subscriptions internal server error response
func (o *GetAllSubscriptionsInternalServerError) Code() int {
	return 500
}

func (o *GetAllSubscriptionsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] getAllSubscriptionsInternalServerError %s", 500, payload)
}

func (o *GetAllSubscriptionsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/notification/subscriptions][%d] getAllSubscriptionsInternalServerError %s", 500, payload)
}

func (o *GetAllSubscriptionsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllSubscriptionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
