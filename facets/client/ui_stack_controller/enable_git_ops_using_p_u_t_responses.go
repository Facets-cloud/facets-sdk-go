// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// EnableGitOpsUsingPUTReader is a Reader for the EnableGitOpsUsingPUT structure.
type EnableGitOpsUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnableGitOpsUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnableGitOpsUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewEnableGitOpsUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewEnableGitOpsUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEnableGitOpsUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEnableGitOpsUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops] enableGitOpsUsingPUT", response, response.Code())
	}
}

// NewEnableGitOpsUsingPUTOK creates a EnableGitOpsUsingPUTOK with default headers values
func NewEnableGitOpsUsingPUTOK() *EnableGitOpsUsingPUTOK {
	return &EnableGitOpsUsingPUTOK{}
}

/*
EnableGitOpsUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type EnableGitOpsUsingPUTOK struct {
	Payload *models.Stack
}

// IsSuccess returns true when this enable git ops using p u t o k response has a 2xx status code
func (o *EnableGitOpsUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enable git ops using p u t o k response has a 3xx status code
func (o *EnableGitOpsUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable git ops using p u t o k response has a 4xx status code
func (o *EnableGitOpsUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable git ops using p u t o k response has a 5xx status code
func (o *EnableGitOpsUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this enable git ops using p u t o k response a status code equal to that given
func (o *EnableGitOpsUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the enable git ops using p u t o k response
func (o *EnableGitOpsUsingPUTOK) Code() int {
	return 200
}

func (o *EnableGitOpsUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsUsingPUTOK %s", 200, payload)
}

func (o *EnableGitOpsUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsUsingPUTOK %s", 200, payload)
}

func (o *EnableGitOpsUsingPUTOK) GetPayload() *models.Stack {
	return o.Payload
}

func (o *EnableGitOpsUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Stack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableGitOpsUsingPUTCreated creates a EnableGitOpsUsingPUTCreated with default headers values
func NewEnableGitOpsUsingPUTCreated() *EnableGitOpsUsingPUTCreated {
	return &EnableGitOpsUsingPUTCreated{}
}

/*
EnableGitOpsUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type EnableGitOpsUsingPUTCreated struct {
}

// IsSuccess returns true when this enable git ops using p u t created response has a 2xx status code
func (o *EnableGitOpsUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enable git ops using p u t created response has a 3xx status code
func (o *EnableGitOpsUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable git ops using p u t created response has a 4xx status code
func (o *EnableGitOpsUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable git ops using p u t created response has a 5xx status code
func (o *EnableGitOpsUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this enable git ops using p u t created response a status code equal to that given
func (o *EnableGitOpsUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the enable git ops using p u t created response
func (o *EnableGitOpsUsingPUTCreated) Code() int {
	return 201
}

func (o *EnableGitOpsUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsUsingPUTCreated", 201)
}

func (o *EnableGitOpsUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsUsingPUTCreated", 201)
}

func (o *EnableGitOpsUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableGitOpsUsingPUTUnauthorized creates a EnableGitOpsUsingPUTUnauthorized with default headers values
func NewEnableGitOpsUsingPUTUnauthorized() *EnableGitOpsUsingPUTUnauthorized {
	return &EnableGitOpsUsingPUTUnauthorized{}
}

/*
EnableGitOpsUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type EnableGitOpsUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this enable git ops using p u t unauthorized response has a 2xx status code
func (o *EnableGitOpsUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable git ops using p u t unauthorized response has a 3xx status code
func (o *EnableGitOpsUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable git ops using p u t unauthorized response has a 4xx status code
func (o *EnableGitOpsUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable git ops using p u t unauthorized response has a 5xx status code
func (o *EnableGitOpsUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this enable git ops using p u t unauthorized response a status code equal to that given
func (o *EnableGitOpsUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the enable git ops using p u t unauthorized response
func (o *EnableGitOpsUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *EnableGitOpsUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsUsingPUTUnauthorized", 401)
}

func (o *EnableGitOpsUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsUsingPUTUnauthorized", 401)
}

func (o *EnableGitOpsUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableGitOpsUsingPUTForbidden creates a EnableGitOpsUsingPUTForbidden with default headers values
func NewEnableGitOpsUsingPUTForbidden() *EnableGitOpsUsingPUTForbidden {
	return &EnableGitOpsUsingPUTForbidden{}
}

/*
EnableGitOpsUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EnableGitOpsUsingPUTForbidden struct {
}

// IsSuccess returns true when this enable git ops using p u t forbidden response has a 2xx status code
func (o *EnableGitOpsUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable git ops using p u t forbidden response has a 3xx status code
func (o *EnableGitOpsUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable git ops using p u t forbidden response has a 4xx status code
func (o *EnableGitOpsUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable git ops using p u t forbidden response has a 5xx status code
func (o *EnableGitOpsUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this enable git ops using p u t forbidden response a status code equal to that given
func (o *EnableGitOpsUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the enable git ops using p u t forbidden response
func (o *EnableGitOpsUsingPUTForbidden) Code() int {
	return 403
}

func (o *EnableGitOpsUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsUsingPUTForbidden", 403)
}

func (o *EnableGitOpsUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsUsingPUTForbidden", 403)
}

func (o *EnableGitOpsUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableGitOpsUsingPUTNotFound creates a EnableGitOpsUsingPUTNotFound with default headers values
func NewEnableGitOpsUsingPUTNotFound() *EnableGitOpsUsingPUTNotFound {
	return &EnableGitOpsUsingPUTNotFound{}
}

/*
EnableGitOpsUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type EnableGitOpsUsingPUTNotFound struct {
}

// IsSuccess returns true when this enable git ops using p u t not found response has a 2xx status code
func (o *EnableGitOpsUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable git ops using p u t not found response has a 3xx status code
func (o *EnableGitOpsUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable git ops using p u t not found response has a 4xx status code
func (o *EnableGitOpsUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable git ops using p u t not found response has a 5xx status code
func (o *EnableGitOpsUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this enable git ops using p u t not found response a status code equal to that given
func (o *EnableGitOpsUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the enable git ops using p u t not found response
func (o *EnableGitOpsUsingPUTNotFound) Code() int {
	return 404
}

func (o *EnableGitOpsUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsUsingPUTNotFound", 404)
}

func (o *EnableGitOpsUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/stacks/{stackName}/enable-git-ops][%d] enableGitOpsUsingPUTNotFound", 404)
}

func (o *EnableGitOpsUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
