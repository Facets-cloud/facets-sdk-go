// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// SyncStackWithGitReader is a Reader for the SyncStackWithGit structure.
type SyncStackWithGitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SyncStackWithGitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSyncStackWithGitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSyncStackWithGitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSyncStackWithGitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewSyncStackWithGitMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSyncStackWithGitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git] syncStackWithGit", response, response.Code())
	}
}

// NewSyncStackWithGitOK creates a SyncStackWithGitOK with default headers values
func NewSyncStackWithGitOK() *SyncStackWithGitOK {
	return &SyncStackWithGitOK{}
}

/*
SyncStackWithGitOK describes a response with status code 200, with default header values.

OK
*/
type SyncStackWithGitOK struct {
}

// IsSuccess returns true when this sync stack with git o k response has a 2xx status code
func (o *SyncStackWithGitOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this sync stack with git o k response has a 3xx status code
func (o *SyncStackWithGitOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync stack with git o k response has a 4xx status code
func (o *SyncStackWithGitOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this sync stack with git o k response has a 5xx status code
func (o *SyncStackWithGitOK) IsServerError() bool {
	return false
}

// IsCode returns true when this sync stack with git o k response a status code equal to that given
func (o *SyncStackWithGitOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the sync stack with git o k response
func (o *SyncStackWithGitOK) Code() int {
	return 200
}

func (o *SyncStackWithGitOK) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitOK", 200)
}

func (o *SyncStackWithGitOK) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitOK", 200)
}

func (o *SyncStackWithGitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncStackWithGitBadRequest creates a SyncStackWithGitBadRequest with default headers values
func NewSyncStackWithGitBadRequest() *SyncStackWithGitBadRequest {
	return &SyncStackWithGitBadRequest{}
}

/*
SyncStackWithGitBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SyncStackWithGitBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this sync stack with git bad request response has a 2xx status code
func (o *SyncStackWithGitBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync stack with git bad request response has a 3xx status code
func (o *SyncStackWithGitBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync stack with git bad request response has a 4xx status code
func (o *SyncStackWithGitBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync stack with git bad request response has a 5xx status code
func (o *SyncStackWithGitBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this sync stack with git bad request response a status code equal to that given
func (o *SyncStackWithGitBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the sync stack with git bad request response
func (o *SyncStackWithGitBadRequest) Code() int {
	return 400
}

func (o *SyncStackWithGitBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitBadRequest %s", 400, payload)
}

func (o *SyncStackWithGitBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitBadRequest %s", 400, payload)
}

func (o *SyncStackWithGitBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SyncStackWithGitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncStackWithGitNotFound creates a SyncStackWithGitNotFound with default headers values
func NewSyncStackWithGitNotFound() *SyncStackWithGitNotFound {
	return &SyncStackWithGitNotFound{}
}

/*
SyncStackWithGitNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SyncStackWithGitNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this sync stack with git not found response has a 2xx status code
func (o *SyncStackWithGitNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync stack with git not found response has a 3xx status code
func (o *SyncStackWithGitNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync stack with git not found response has a 4xx status code
func (o *SyncStackWithGitNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync stack with git not found response has a 5xx status code
func (o *SyncStackWithGitNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this sync stack with git not found response a status code equal to that given
func (o *SyncStackWithGitNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the sync stack with git not found response
func (o *SyncStackWithGitNotFound) Code() int {
	return 404
}

func (o *SyncStackWithGitNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitNotFound %s", 404, payload)
}

func (o *SyncStackWithGitNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitNotFound %s", 404, payload)
}

func (o *SyncStackWithGitNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SyncStackWithGitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncStackWithGitMethodNotAllowed creates a SyncStackWithGitMethodNotAllowed with default headers values
func NewSyncStackWithGitMethodNotAllowed() *SyncStackWithGitMethodNotAllowed {
	return &SyncStackWithGitMethodNotAllowed{}
}

/*
SyncStackWithGitMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type SyncStackWithGitMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this sync stack with git method not allowed response has a 2xx status code
func (o *SyncStackWithGitMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync stack with git method not allowed response has a 3xx status code
func (o *SyncStackWithGitMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync stack with git method not allowed response has a 4xx status code
func (o *SyncStackWithGitMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync stack with git method not allowed response has a 5xx status code
func (o *SyncStackWithGitMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this sync stack with git method not allowed response a status code equal to that given
func (o *SyncStackWithGitMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the sync stack with git method not allowed response
func (o *SyncStackWithGitMethodNotAllowed) Code() int {
	return 405
}

func (o *SyncStackWithGitMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitMethodNotAllowed %s", 405, payload)
}

func (o *SyncStackWithGitMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitMethodNotAllowed %s", 405, payload)
}

func (o *SyncStackWithGitMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SyncStackWithGitMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncStackWithGitInternalServerError creates a SyncStackWithGitInternalServerError with default headers values
func NewSyncStackWithGitInternalServerError() *SyncStackWithGitInternalServerError {
	return &SyncStackWithGitInternalServerError{}
}

/*
SyncStackWithGitInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type SyncStackWithGitInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this sync stack with git internal server error response has a 2xx status code
func (o *SyncStackWithGitInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync stack with git internal server error response has a 3xx status code
func (o *SyncStackWithGitInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync stack with git internal server error response has a 4xx status code
func (o *SyncStackWithGitInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this sync stack with git internal server error response has a 5xx status code
func (o *SyncStackWithGitInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this sync stack with git internal server error response a status code equal to that given
func (o *SyncStackWithGitInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the sync stack with git internal server error response
func (o *SyncStackWithGitInternalServerError) Code() int {
	return 500
}

func (o *SyncStackWithGitInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitInternalServerError %s", 500, payload)
}

func (o *SyncStackWithGitInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/sync-with-git][%d] syncStackWithGitInternalServerError %s", 500, payload)
}

func (o *SyncStackWithGitInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SyncStackWithGitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
