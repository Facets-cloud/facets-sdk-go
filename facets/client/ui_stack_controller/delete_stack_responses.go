// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteStackReader is a Reader for the DeleteStack structure.
type DeleteStackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteStackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteStackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteStackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteStackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteStackMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteStackInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/stacks/{stackName}] deleteStack", response, response.Code())
	}
}

// NewDeleteStackOK creates a DeleteStackOK with default headers values
func NewDeleteStackOK() *DeleteStackOK {
	return &DeleteStackOK{}
}

/*
DeleteStackOK describes a response with status code 200, with default header values.

OK
*/
type DeleteStackOK struct {
	Payload *models.Stack
}

// IsSuccess returns true when this delete stack o k response has a 2xx status code
func (o *DeleteStackOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete stack o k response has a 3xx status code
func (o *DeleteStackOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete stack o k response has a 4xx status code
func (o *DeleteStackOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete stack o k response has a 5xx status code
func (o *DeleteStackOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete stack o k response a status code equal to that given
func (o *DeleteStackOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete stack o k response
func (o *DeleteStackOK) Code() int {
	return 200
}

func (o *DeleteStackOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackOK %s", 200, payload)
}

func (o *DeleteStackOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackOK %s", 200, payload)
}

func (o *DeleteStackOK) GetPayload() *models.Stack {
	return o.Payload
}

func (o *DeleteStackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Stack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteStackBadRequest creates a DeleteStackBadRequest with default headers values
func NewDeleteStackBadRequest() *DeleteStackBadRequest {
	return &DeleteStackBadRequest{}
}

/*
DeleteStackBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteStackBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete stack bad request response has a 2xx status code
func (o *DeleteStackBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete stack bad request response has a 3xx status code
func (o *DeleteStackBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete stack bad request response has a 4xx status code
func (o *DeleteStackBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete stack bad request response has a 5xx status code
func (o *DeleteStackBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete stack bad request response a status code equal to that given
func (o *DeleteStackBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete stack bad request response
func (o *DeleteStackBadRequest) Code() int {
	return 400
}

func (o *DeleteStackBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackBadRequest %s", 400, payload)
}

func (o *DeleteStackBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackBadRequest %s", 400, payload)
}

func (o *DeleteStackBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteStackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteStackNotFound creates a DeleteStackNotFound with default headers values
func NewDeleteStackNotFound() *DeleteStackNotFound {
	return &DeleteStackNotFound{}
}

/*
DeleteStackNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteStackNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete stack not found response has a 2xx status code
func (o *DeleteStackNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete stack not found response has a 3xx status code
func (o *DeleteStackNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete stack not found response has a 4xx status code
func (o *DeleteStackNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete stack not found response has a 5xx status code
func (o *DeleteStackNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete stack not found response a status code equal to that given
func (o *DeleteStackNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete stack not found response
func (o *DeleteStackNotFound) Code() int {
	return 404
}

func (o *DeleteStackNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackNotFound %s", 404, payload)
}

func (o *DeleteStackNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackNotFound %s", 404, payload)
}

func (o *DeleteStackNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteStackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteStackMethodNotAllowed creates a DeleteStackMethodNotAllowed with default headers values
func NewDeleteStackMethodNotAllowed() *DeleteStackMethodNotAllowed {
	return &DeleteStackMethodNotAllowed{}
}

/*
DeleteStackMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DeleteStackMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete stack method not allowed response has a 2xx status code
func (o *DeleteStackMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete stack method not allowed response has a 3xx status code
func (o *DeleteStackMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete stack method not allowed response has a 4xx status code
func (o *DeleteStackMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete stack method not allowed response has a 5xx status code
func (o *DeleteStackMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete stack method not allowed response a status code equal to that given
func (o *DeleteStackMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the delete stack method not allowed response
func (o *DeleteStackMethodNotAllowed) Code() int {
	return 405
}

func (o *DeleteStackMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackMethodNotAllowed %s", 405, payload)
}

func (o *DeleteStackMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackMethodNotAllowed %s", 405, payload)
}

func (o *DeleteStackMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteStackMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteStackInternalServerError creates a DeleteStackInternalServerError with default headers values
func NewDeleteStackInternalServerError() *DeleteStackInternalServerError {
	return &DeleteStackInternalServerError{}
}

/*
DeleteStackInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteStackInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete stack internal server error response has a 2xx status code
func (o *DeleteStackInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete stack internal server error response has a 3xx status code
func (o *DeleteStackInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete stack internal server error response has a 4xx status code
func (o *DeleteStackInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete stack internal server error response has a 5xx status code
func (o *DeleteStackInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete stack internal server error response a status code equal to that given
func (o *DeleteStackInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete stack internal server error response
func (o *DeleteStackInternalServerError) Code() int {
	return 500
}

func (o *DeleteStackInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackInternalServerError %s", 500, payload)
}

func (o *DeleteStackInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackInternalServerError %s", 500, payload)
}

func (o *DeleteStackInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteStackInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
