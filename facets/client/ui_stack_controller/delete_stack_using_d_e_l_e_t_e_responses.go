// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteStackUsingDELETEReader is a Reader for the DeleteStackUsingDELETE structure.
type DeleteStackUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteStackUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteStackUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteStackUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteStackUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteStackUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/stacks/{stackName}] deleteStackUsingDELETE", response, response.Code())
	}
}

// NewDeleteStackUsingDELETEOK creates a DeleteStackUsingDELETEOK with default headers values
func NewDeleteStackUsingDELETEOK() *DeleteStackUsingDELETEOK {
	return &DeleteStackUsingDELETEOK{}
}

/*
DeleteStackUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteStackUsingDELETEOK struct {
	Payload *models.Stack
}

// IsSuccess returns true when this delete stack using d e l e t e o k response has a 2xx status code
func (o *DeleteStackUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete stack using d e l e t e o k response has a 3xx status code
func (o *DeleteStackUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete stack using d e l e t e o k response has a 4xx status code
func (o *DeleteStackUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete stack using d e l e t e o k response has a 5xx status code
func (o *DeleteStackUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete stack using d e l e t e o k response a status code equal to that given
func (o *DeleteStackUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete stack using d e l e t e o k response
func (o *DeleteStackUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteStackUsingDELETEOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackUsingDELETEOK %s", 200, payload)
}

func (o *DeleteStackUsingDELETEOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackUsingDELETEOK %s", 200, payload)
}

func (o *DeleteStackUsingDELETEOK) GetPayload() *models.Stack {
	return o.Payload
}

func (o *DeleteStackUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Stack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteStackUsingDELETENoContent creates a DeleteStackUsingDELETENoContent with default headers values
func NewDeleteStackUsingDELETENoContent() *DeleteStackUsingDELETENoContent {
	return &DeleteStackUsingDELETENoContent{}
}

/*
DeleteStackUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteStackUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete stack using d e l e t e no content response has a 2xx status code
func (o *DeleteStackUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete stack using d e l e t e no content response has a 3xx status code
func (o *DeleteStackUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete stack using d e l e t e no content response has a 4xx status code
func (o *DeleteStackUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete stack using d e l e t e no content response has a 5xx status code
func (o *DeleteStackUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete stack using d e l e t e no content response a status code equal to that given
func (o *DeleteStackUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete stack using d e l e t e no content response
func (o *DeleteStackUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteStackUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackUsingDELETENoContent", 204)
}

func (o *DeleteStackUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackUsingDELETENoContent", 204)
}

func (o *DeleteStackUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteStackUsingDELETEUnauthorized creates a DeleteStackUsingDELETEUnauthorized with default headers values
func NewDeleteStackUsingDELETEUnauthorized() *DeleteStackUsingDELETEUnauthorized {
	return &DeleteStackUsingDELETEUnauthorized{}
}

/*
DeleteStackUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteStackUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete stack using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteStackUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete stack using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteStackUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete stack using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteStackUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete stack using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteStackUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete stack using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteStackUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete stack using d e l e t e unauthorized response
func (o *DeleteStackUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteStackUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackUsingDELETEUnauthorized", 401)
}

func (o *DeleteStackUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackUsingDELETEUnauthorized", 401)
}

func (o *DeleteStackUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteStackUsingDELETEForbidden creates a DeleteStackUsingDELETEForbidden with default headers values
func NewDeleteStackUsingDELETEForbidden() *DeleteStackUsingDELETEForbidden {
	return &DeleteStackUsingDELETEForbidden{}
}

/*
DeleteStackUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteStackUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete stack using d e l e t e forbidden response has a 2xx status code
func (o *DeleteStackUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete stack using d e l e t e forbidden response has a 3xx status code
func (o *DeleteStackUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete stack using d e l e t e forbidden response has a 4xx status code
func (o *DeleteStackUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete stack using d e l e t e forbidden response has a 5xx status code
func (o *DeleteStackUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete stack using d e l e t e forbidden response a status code equal to that given
func (o *DeleteStackUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete stack using d e l e t e forbidden response
func (o *DeleteStackUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteStackUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackUsingDELETEForbidden", 403)
}

func (o *DeleteStackUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/stacks/{stackName}][%d] deleteStackUsingDELETEForbidden", 403)
}

func (o *DeleteStackUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
