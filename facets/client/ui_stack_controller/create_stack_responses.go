// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateStackReader is a Reader for the CreateStack structure.
type CreateStackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateStackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateStackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateStackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateStackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreateStackMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateStackInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/stacks/] createStack", response, response.Code())
	}
}

// NewCreateStackOK creates a CreateStackOK with default headers values
func NewCreateStackOK() *CreateStackOK {
	return &CreateStackOK{}
}

/*
CreateStackOK describes a response with status code 200, with default header values.

OK
*/
type CreateStackOK struct {
	Payload *models.Stack
}

// IsSuccess returns true when this create stack o k response has a 2xx status code
func (o *CreateStackOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create stack o k response has a 3xx status code
func (o *CreateStackOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create stack o k response has a 4xx status code
func (o *CreateStackOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create stack o k response has a 5xx status code
func (o *CreateStackOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create stack o k response a status code equal to that given
func (o *CreateStackOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create stack o k response
func (o *CreateStackOK) Code() int {
	return 200
}

func (o *CreateStackOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/][%d] createStackOK %s", 200, payload)
}

func (o *CreateStackOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/][%d] createStackOK %s", 200, payload)
}

func (o *CreateStackOK) GetPayload() *models.Stack {
	return o.Payload
}

func (o *CreateStackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Stack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateStackBadRequest creates a CreateStackBadRequest with default headers values
func NewCreateStackBadRequest() *CreateStackBadRequest {
	return &CreateStackBadRequest{}
}

/*
CreateStackBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateStackBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create stack bad request response has a 2xx status code
func (o *CreateStackBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create stack bad request response has a 3xx status code
func (o *CreateStackBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create stack bad request response has a 4xx status code
func (o *CreateStackBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create stack bad request response has a 5xx status code
func (o *CreateStackBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create stack bad request response a status code equal to that given
func (o *CreateStackBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create stack bad request response
func (o *CreateStackBadRequest) Code() int {
	return 400
}

func (o *CreateStackBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/][%d] createStackBadRequest %s", 400, payload)
}

func (o *CreateStackBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/][%d] createStackBadRequest %s", 400, payload)
}

func (o *CreateStackBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateStackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateStackNotFound creates a CreateStackNotFound with default headers values
func NewCreateStackNotFound() *CreateStackNotFound {
	return &CreateStackNotFound{}
}

/*
CreateStackNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateStackNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create stack not found response has a 2xx status code
func (o *CreateStackNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create stack not found response has a 3xx status code
func (o *CreateStackNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create stack not found response has a 4xx status code
func (o *CreateStackNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create stack not found response has a 5xx status code
func (o *CreateStackNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create stack not found response a status code equal to that given
func (o *CreateStackNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create stack not found response
func (o *CreateStackNotFound) Code() int {
	return 404
}

func (o *CreateStackNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/][%d] createStackNotFound %s", 404, payload)
}

func (o *CreateStackNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/][%d] createStackNotFound %s", 404, payload)
}

func (o *CreateStackNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateStackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateStackMethodNotAllowed creates a CreateStackMethodNotAllowed with default headers values
func NewCreateStackMethodNotAllowed() *CreateStackMethodNotAllowed {
	return &CreateStackMethodNotAllowed{}
}

/*
CreateStackMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type CreateStackMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create stack method not allowed response has a 2xx status code
func (o *CreateStackMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create stack method not allowed response has a 3xx status code
func (o *CreateStackMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create stack method not allowed response has a 4xx status code
func (o *CreateStackMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create stack method not allowed response has a 5xx status code
func (o *CreateStackMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this create stack method not allowed response a status code equal to that given
func (o *CreateStackMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the create stack method not allowed response
func (o *CreateStackMethodNotAllowed) Code() int {
	return 405
}

func (o *CreateStackMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/][%d] createStackMethodNotAllowed %s", 405, payload)
}

func (o *CreateStackMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/][%d] createStackMethodNotAllowed %s", 405, payload)
}

func (o *CreateStackMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateStackMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateStackInternalServerError creates a CreateStackInternalServerError with default headers values
func NewCreateStackInternalServerError() *CreateStackInternalServerError {
	return &CreateStackInternalServerError{}
}

/*
CreateStackInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateStackInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create stack internal server error response has a 2xx status code
func (o *CreateStackInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create stack internal server error response has a 3xx status code
func (o *CreateStackInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create stack internal server error response has a 4xx status code
func (o *CreateStackInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create stack internal server error response has a 5xx status code
func (o *CreateStackInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create stack internal server error response a status code equal to that given
func (o *CreateStackInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create stack internal server error response
func (o *CreateStackInternalServerError) Code() int {
	return 500
}

func (o *CreateStackInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/][%d] createStackInternalServerError %s", 500, payload)
}

func (o *CreateStackInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/stacks/][%d] createStackInternalServerError %s", 500, payload)
}

func (o *CreateStackInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateStackInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
