// Code generated by go-swagger; DO NOT EDIT.

package ui_stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetApplicationListUsingGETReader is a Reader for the GetApplicationListUsingGET structure.
type GetApplicationListUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetApplicationListUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetApplicationListUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetApplicationListUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetApplicationListUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetApplicationListUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/stacks/{stackName}/{resourceType}/] getApplicationListUsingGET", response, response.Code())
	}
}

// NewGetApplicationListUsingGETOK creates a GetApplicationListUsingGETOK with default headers values
func NewGetApplicationListUsingGETOK() *GetApplicationListUsingGETOK {
	return &GetApplicationListUsingGETOK{}
}

/*
GetApplicationListUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetApplicationListUsingGETOK struct {
	Payload []string
}

// IsSuccess returns true when this get application list using g e t o k response has a 2xx status code
func (o *GetApplicationListUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get application list using g e t o k response has a 3xx status code
func (o *GetApplicationListUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get application list using g e t o k response has a 4xx status code
func (o *GetApplicationListUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get application list using g e t o k response has a 5xx status code
func (o *GetApplicationListUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get application list using g e t o k response a status code equal to that given
func (o *GetApplicationListUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get application list using g e t o k response
func (o *GetApplicationListUsingGETOK) Code() int {
	return 200
}

func (o *GetApplicationListUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/{resourceType}/][%d] getApplicationListUsingGETOK %s", 200, payload)
}

func (o *GetApplicationListUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/{resourceType}/][%d] getApplicationListUsingGETOK %s", 200, payload)
}

func (o *GetApplicationListUsingGETOK) GetPayload() []string {
	return o.Payload
}

func (o *GetApplicationListUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApplicationListUsingGETUnauthorized creates a GetApplicationListUsingGETUnauthorized with default headers values
func NewGetApplicationListUsingGETUnauthorized() *GetApplicationListUsingGETUnauthorized {
	return &GetApplicationListUsingGETUnauthorized{}
}

/*
GetApplicationListUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetApplicationListUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get application list using g e t unauthorized response has a 2xx status code
func (o *GetApplicationListUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get application list using g e t unauthorized response has a 3xx status code
func (o *GetApplicationListUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get application list using g e t unauthorized response has a 4xx status code
func (o *GetApplicationListUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get application list using g e t unauthorized response has a 5xx status code
func (o *GetApplicationListUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get application list using g e t unauthorized response a status code equal to that given
func (o *GetApplicationListUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get application list using g e t unauthorized response
func (o *GetApplicationListUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetApplicationListUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/{resourceType}/][%d] getApplicationListUsingGETUnauthorized", 401)
}

func (o *GetApplicationListUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/{resourceType}/][%d] getApplicationListUsingGETUnauthorized", 401)
}

func (o *GetApplicationListUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetApplicationListUsingGETForbidden creates a GetApplicationListUsingGETForbidden with default headers values
func NewGetApplicationListUsingGETForbidden() *GetApplicationListUsingGETForbidden {
	return &GetApplicationListUsingGETForbidden{}
}

/*
GetApplicationListUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetApplicationListUsingGETForbidden struct {
}

// IsSuccess returns true when this get application list using g e t forbidden response has a 2xx status code
func (o *GetApplicationListUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get application list using g e t forbidden response has a 3xx status code
func (o *GetApplicationListUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get application list using g e t forbidden response has a 4xx status code
func (o *GetApplicationListUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get application list using g e t forbidden response has a 5xx status code
func (o *GetApplicationListUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get application list using g e t forbidden response a status code equal to that given
func (o *GetApplicationListUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get application list using g e t forbidden response
func (o *GetApplicationListUsingGETForbidden) Code() int {
	return 403
}

func (o *GetApplicationListUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/{resourceType}/][%d] getApplicationListUsingGETForbidden", 403)
}

func (o *GetApplicationListUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/{resourceType}/][%d] getApplicationListUsingGETForbidden", 403)
}

func (o *GetApplicationListUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetApplicationListUsingGETNotFound creates a GetApplicationListUsingGETNotFound with default headers values
func NewGetApplicationListUsingGETNotFound() *GetApplicationListUsingGETNotFound {
	return &GetApplicationListUsingGETNotFound{}
}

/*
GetApplicationListUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetApplicationListUsingGETNotFound struct {
}

// IsSuccess returns true when this get application list using g e t not found response has a 2xx status code
func (o *GetApplicationListUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get application list using g e t not found response has a 3xx status code
func (o *GetApplicationListUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get application list using g e t not found response has a 4xx status code
func (o *GetApplicationListUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get application list using g e t not found response has a 5xx status code
func (o *GetApplicationListUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get application list using g e t not found response a status code equal to that given
func (o *GetApplicationListUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get application list using g e t not found response
func (o *GetApplicationListUsingGETNotFound) Code() int {
	return 404
}

func (o *GetApplicationListUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/{resourceType}/][%d] getApplicationListUsingGETNotFound", 404)
}

func (o *GetApplicationListUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/stacks/{stackName}/{resourceType}/][%d] getApplicationListUsingGETNotFound", 404)
}

func (o *GetApplicationListUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
