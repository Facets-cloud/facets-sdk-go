// Code generated by go-swagger; DO NOT EDIT.

package common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpsertVarsUsingPOSTReader is a Reader for the UpsertVarsUsingPOST structure.
type UpsertVarsUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpsertVarsUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpsertVarsUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpsertVarsUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpsertVarsUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpsertVarsUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpsertVarsUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc/v1/clusters/{clusterId}/vars/upsert] upsertVarsUsingPOST", response, response.Code())
	}
}

// NewUpsertVarsUsingPOSTOK creates a UpsertVarsUsingPOSTOK with default headers values
func NewUpsertVarsUsingPOSTOK() *UpsertVarsUsingPOSTOK {
	return &UpsertVarsUsingPOSTOK{}
}

/*
UpsertVarsUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type UpsertVarsUsingPOSTOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this upsert vars using p o s t o k response has a 2xx status code
func (o *UpsertVarsUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upsert vars using p o s t o k response has a 3xx status code
func (o *UpsertVarsUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert vars using p o s t o k response has a 4xx status code
func (o *UpsertVarsUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert vars using p o s t o k response has a 5xx status code
func (o *UpsertVarsUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert vars using p o s t o k response a status code equal to that given
func (o *UpsertVarsUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upsert vars using p o s t o k response
func (o *UpsertVarsUsingPOSTOK) Code() int {
	return 200
}

func (o *UpsertVarsUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsUsingPOSTOK %s", 200, payload)
}

func (o *UpsertVarsUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsUsingPOSTOK %s", 200, payload)
}

func (o *UpsertVarsUsingPOSTOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *UpsertVarsUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertVarsUsingPOSTCreated creates a UpsertVarsUsingPOSTCreated with default headers values
func NewUpsertVarsUsingPOSTCreated() *UpsertVarsUsingPOSTCreated {
	return &UpsertVarsUsingPOSTCreated{}
}

/*
UpsertVarsUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type UpsertVarsUsingPOSTCreated struct {
}

// IsSuccess returns true when this upsert vars using p o s t created response has a 2xx status code
func (o *UpsertVarsUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upsert vars using p o s t created response has a 3xx status code
func (o *UpsertVarsUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert vars using p o s t created response has a 4xx status code
func (o *UpsertVarsUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert vars using p o s t created response has a 5xx status code
func (o *UpsertVarsUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert vars using p o s t created response a status code equal to that given
func (o *UpsertVarsUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the upsert vars using p o s t created response
func (o *UpsertVarsUsingPOSTCreated) Code() int {
	return 201
}

func (o *UpsertVarsUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsUsingPOSTCreated", 201)
}

func (o *UpsertVarsUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsUsingPOSTCreated", 201)
}

func (o *UpsertVarsUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpsertVarsUsingPOSTUnauthorized creates a UpsertVarsUsingPOSTUnauthorized with default headers values
func NewUpsertVarsUsingPOSTUnauthorized() *UpsertVarsUsingPOSTUnauthorized {
	return &UpsertVarsUsingPOSTUnauthorized{}
}

/*
UpsertVarsUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpsertVarsUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this upsert vars using p o s t unauthorized response has a 2xx status code
func (o *UpsertVarsUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert vars using p o s t unauthorized response has a 3xx status code
func (o *UpsertVarsUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert vars using p o s t unauthorized response has a 4xx status code
func (o *UpsertVarsUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert vars using p o s t unauthorized response has a 5xx status code
func (o *UpsertVarsUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert vars using p o s t unauthorized response a status code equal to that given
func (o *UpsertVarsUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the upsert vars using p o s t unauthorized response
func (o *UpsertVarsUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *UpsertVarsUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsUsingPOSTUnauthorized", 401)
}

func (o *UpsertVarsUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsUsingPOSTUnauthorized", 401)
}

func (o *UpsertVarsUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpsertVarsUsingPOSTForbidden creates a UpsertVarsUsingPOSTForbidden with default headers values
func NewUpsertVarsUsingPOSTForbidden() *UpsertVarsUsingPOSTForbidden {
	return &UpsertVarsUsingPOSTForbidden{}
}

/*
UpsertVarsUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpsertVarsUsingPOSTForbidden struct {
}

// IsSuccess returns true when this upsert vars using p o s t forbidden response has a 2xx status code
func (o *UpsertVarsUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert vars using p o s t forbidden response has a 3xx status code
func (o *UpsertVarsUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert vars using p o s t forbidden response has a 4xx status code
func (o *UpsertVarsUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert vars using p o s t forbidden response has a 5xx status code
func (o *UpsertVarsUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert vars using p o s t forbidden response a status code equal to that given
func (o *UpsertVarsUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the upsert vars using p o s t forbidden response
func (o *UpsertVarsUsingPOSTForbidden) Code() int {
	return 403
}

func (o *UpsertVarsUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsUsingPOSTForbidden", 403)
}

func (o *UpsertVarsUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsUsingPOSTForbidden", 403)
}

func (o *UpsertVarsUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpsertVarsUsingPOSTNotFound creates a UpsertVarsUsingPOSTNotFound with default headers values
func NewUpsertVarsUsingPOSTNotFound() *UpsertVarsUsingPOSTNotFound {
	return &UpsertVarsUsingPOSTNotFound{}
}

/*
UpsertVarsUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpsertVarsUsingPOSTNotFound struct {
}

// IsSuccess returns true when this upsert vars using p o s t not found response has a 2xx status code
func (o *UpsertVarsUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert vars using p o s t not found response has a 3xx status code
func (o *UpsertVarsUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert vars using p o s t not found response has a 4xx status code
func (o *UpsertVarsUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert vars using p o s t not found response has a 5xx status code
func (o *UpsertVarsUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert vars using p o s t not found response a status code equal to that given
func (o *UpsertVarsUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the upsert vars using p o s t not found response
func (o *UpsertVarsUsingPOSTNotFound) Code() int {
	return 404
}

func (o *UpsertVarsUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsUsingPOSTNotFound", 404)
}

func (o *UpsertVarsUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsUsingPOSTNotFound", 404)
}

func (o *UpsertVarsUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
