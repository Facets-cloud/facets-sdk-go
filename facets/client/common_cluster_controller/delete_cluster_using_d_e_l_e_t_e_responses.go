// Code generated by go-swagger; DO NOT EDIT.

package common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteClusterUsingDELETEReader is a Reader for the DeleteClusterUsingDELETE structure.
type DeleteClusterUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteClusterUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteClusterUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteClusterUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteClusterUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteClusterUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc/v1/clusters/{clusterId}] deleteClusterUsingDELETE", response, response.Code())
	}
}

// NewDeleteClusterUsingDELETEOK creates a DeleteClusterUsingDELETEOK with default headers values
func NewDeleteClusterUsingDELETEOK() *DeleteClusterUsingDELETEOK {
	return &DeleteClusterUsingDELETEOK{}
}

/*
DeleteClusterUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteClusterUsingDELETEOK struct {
	Payload bool
}

// IsSuccess returns true when this delete cluster using d e l e t e o k response has a 2xx status code
func (o *DeleteClusterUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete cluster using d e l e t e o k response has a 3xx status code
func (o *DeleteClusterUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cluster using d e l e t e o k response has a 4xx status code
func (o *DeleteClusterUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete cluster using d e l e t e o k response has a 5xx status code
func (o *DeleteClusterUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cluster using d e l e t e o k response a status code equal to that given
func (o *DeleteClusterUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete cluster using d e l e t e o k response
func (o *DeleteClusterUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteClusterUsingDELETEOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc/v1/clusters/{clusterId}][%d] deleteClusterUsingDELETEOK %s", 200, payload)
}

func (o *DeleteClusterUsingDELETEOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc/v1/clusters/{clusterId}][%d] deleteClusterUsingDELETEOK %s", 200, payload)
}

func (o *DeleteClusterUsingDELETEOK) GetPayload() bool {
	return o.Payload
}

func (o *DeleteClusterUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteClusterUsingDELETENoContent creates a DeleteClusterUsingDELETENoContent with default headers values
func NewDeleteClusterUsingDELETENoContent() *DeleteClusterUsingDELETENoContent {
	return &DeleteClusterUsingDELETENoContent{}
}

/*
DeleteClusterUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteClusterUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete cluster using d e l e t e no content response has a 2xx status code
func (o *DeleteClusterUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete cluster using d e l e t e no content response has a 3xx status code
func (o *DeleteClusterUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cluster using d e l e t e no content response has a 4xx status code
func (o *DeleteClusterUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete cluster using d e l e t e no content response has a 5xx status code
func (o *DeleteClusterUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cluster using d e l e t e no content response a status code equal to that given
func (o *DeleteClusterUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete cluster using d e l e t e no content response
func (o *DeleteClusterUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteClusterUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc/v1/clusters/{clusterId}][%d] deleteClusterUsingDELETENoContent", 204)
}

func (o *DeleteClusterUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc/v1/clusters/{clusterId}][%d] deleteClusterUsingDELETENoContent", 204)
}

func (o *DeleteClusterUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteClusterUsingDELETEUnauthorized creates a DeleteClusterUsingDELETEUnauthorized with default headers values
func NewDeleteClusterUsingDELETEUnauthorized() *DeleteClusterUsingDELETEUnauthorized {
	return &DeleteClusterUsingDELETEUnauthorized{}
}

/*
DeleteClusterUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteClusterUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete cluster using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteClusterUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete cluster using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteClusterUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cluster using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteClusterUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete cluster using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteClusterUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cluster using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteClusterUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete cluster using d e l e t e unauthorized response
func (o *DeleteClusterUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteClusterUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc/v1/clusters/{clusterId}][%d] deleteClusterUsingDELETEUnauthorized", 401)
}

func (o *DeleteClusterUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc/v1/clusters/{clusterId}][%d] deleteClusterUsingDELETEUnauthorized", 401)
}

func (o *DeleteClusterUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteClusterUsingDELETEForbidden creates a DeleteClusterUsingDELETEForbidden with default headers values
func NewDeleteClusterUsingDELETEForbidden() *DeleteClusterUsingDELETEForbidden {
	return &DeleteClusterUsingDELETEForbidden{}
}

/*
DeleteClusterUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteClusterUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete cluster using d e l e t e forbidden response has a 2xx status code
func (o *DeleteClusterUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete cluster using d e l e t e forbidden response has a 3xx status code
func (o *DeleteClusterUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cluster using d e l e t e forbidden response has a 4xx status code
func (o *DeleteClusterUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete cluster using d e l e t e forbidden response has a 5xx status code
func (o *DeleteClusterUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cluster using d e l e t e forbidden response a status code equal to that given
func (o *DeleteClusterUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete cluster using d e l e t e forbidden response
func (o *DeleteClusterUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteClusterUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc/v1/clusters/{clusterId}][%d] deleteClusterUsingDELETEForbidden", 403)
}

func (o *DeleteClusterUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc/v1/clusters/{clusterId}][%d] deleteClusterUsingDELETEForbidden", 403)
}

func (o *DeleteClusterUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
