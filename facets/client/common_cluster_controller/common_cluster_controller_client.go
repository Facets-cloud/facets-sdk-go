// Code generated by go-swagger; DO NOT EDIT.

package common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new common cluster controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new common cluster controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new common cluster controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for common cluster controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddClusterK8sCredentialsUsingPOST(params *AddClusterK8sCredentialsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddClusterK8sCredentialsUsingPOSTOK, *AddClusterK8sCredentialsUsingPOSTCreated, error)

	DeleteClusterUsingDELETE(params *DeleteClusterUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterUsingDELETEOK, *DeleteClusterUsingDELETENoContent, error)

	GetOverridesUsingGET(params *GetOverridesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOverridesUsingGETOK, error)

	GetPinnedSnapshotUsingGET(params *GetPinnedSnapshotUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPinnedSnapshotUsingGETOK, error)

	ListSnapshotsUsingGET(params *ListSnapshotsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSnapshotsUsingGETOK, error)

	NotifyAlertsUsingPOST(params *NotifyAlertsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifyAlertsUsingPOSTOK, *NotifyAlertsUsingPOSTCreated, error)

	NotifyApplicationDeploymentCompleteUsingPOST(params *NotifyApplicationDeploymentCompleteUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifyApplicationDeploymentCompleteUsingPOSTOK, *NotifyApplicationDeploymentCompleteUsingPOSTCreated, error)

	NotifyResourceDeploymentCompleteUsingPOST(params *NotifyResourceDeploymentCompleteUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifyResourceDeploymentCompleteUsingPOSTOK, *NotifyResourceDeploymentCompleteUsingPOSTCreated, error)

	OverrideSizingUsingPOST(params *OverrideSizingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideSizingUsingPOSTOK, *OverrideSizingUsingPOSTCreated, error)

	PinSnapshotUsingPOST(params *PinSnapshotUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PinSnapshotUsingPOSTOK, *PinSnapshotUsingPOSTCreated, error)

	UpsertVarsUsingPOST(params *UpsertVarsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpsertVarsUsingPOSTOK, *UpsertVarsUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddClusterK8sCredentialsUsingPOST adds cluster k8s credentials
*/
func (a *Client) AddClusterK8sCredentialsUsingPOST(params *AddClusterK8sCredentialsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddClusterK8sCredentialsUsingPOSTOK, *AddClusterK8sCredentialsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddClusterK8sCredentialsUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addClusterK8sCredentialsUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc/v1/clusters/{clusterId}/credentials",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddClusterK8sCredentialsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddClusterK8sCredentialsUsingPOSTOK:
		return value, nil, nil
	case *AddClusterK8sCredentialsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteClusterUsingDELETE deletes cluster
*/
func (a *Client) DeleteClusterUsingDELETE(params *DeleteClusterUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterUsingDELETEOK, *DeleteClusterUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteClusterUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc/v1/clusters/{clusterId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteClusterUsingDELETEOK:
		return value, nil, nil
	case *DeleteClusterUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOverridesUsingGET gets overrides
*/
func (a *Client) GetOverridesUsingGET(params *GetOverridesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOverridesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOverridesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOverridesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc/v1/clusters/{clusterId}/overrides",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOverridesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOverridesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOverridesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPinnedSnapshotUsingGET gets pinned snapshot
*/
func (a *Client) GetPinnedSnapshotUsingGET(params *GetPinnedSnapshotUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPinnedSnapshotUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPinnedSnapshotUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPinnedSnapshotUsingGET",
		Method:             "GET",
		PathPattern:        "/cc/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPinnedSnapshotUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPinnedSnapshotUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPinnedSnapshotUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSnapshotsUsingGET lists snapshots
*/
func (a *Client) ListSnapshotsUsingGET(params *ListSnapshotsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSnapshotsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSnapshotsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSnapshotsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSnapshotsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSnapshotsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSnapshotsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NotifyAlertsUsingPOST notifies alerts
*/
func (a *Client) NotifyAlertsUsingPOST(params *NotifyAlertsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifyAlertsUsingPOSTOK, *NotifyAlertsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotifyAlertsUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "notifyAlertsUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc/v1/clusters/{clusterId}/alerts",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NotifyAlertsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *NotifyAlertsUsingPOSTOK:
		return value, nil, nil
	case *NotifyAlertsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NotifyApplicationDeploymentCompleteUsingPOST notifies application deployment complete
*/
func (a *Client) NotifyApplicationDeploymentCompleteUsingPOST(params *NotifyApplicationDeploymentCompleteUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifyApplicationDeploymentCompleteUsingPOSTOK, *NotifyApplicationDeploymentCompleteUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotifyApplicationDeploymentCompleteUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "notifyApplicationDeploymentCompleteUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc/v1/clusters/{clusterId}/app-name/{appName}/application-deployment-completed",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NotifyApplicationDeploymentCompleteUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *NotifyApplicationDeploymentCompleteUsingPOSTOK:
		return value, nil, nil
	case *NotifyApplicationDeploymentCompleteUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NotifyResourceDeploymentCompleteUsingPOST notifies resource deployment complete
*/
func (a *Client) NotifyResourceDeploymentCompleteUsingPOST(params *NotifyResourceDeploymentCompleteUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotifyResourceDeploymentCompleteUsingPOSTOK, *NotifyResourceDeploymentCompleteUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotifyResourceDeploymentCompleteUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "notifyResourceDeploymentCompleteUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc/v1/clusters/{clusterId}/resource-type/{resourceType}/resource-name/{resourceName}/resource-deployment-completed",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NotifyResourceDeploymentCompleteUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *NotifyResourceDeploymentCompleteUsingPOSTOK:
		return value, nil, nil
	case *NotifyResourceDeploymentCompleteUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OverrideSizingUsingPOST overrides sizing
*/
func (a *Client) OverrideSizingUsingPOST(params *OverrideSizingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideSizingUsingPOSTOK, *OverrideSizingUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOverrideSizingUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "overrideSizingUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc/v1/clusters/{clusterId}/overrides",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OverrideSizingUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *OverrideSizingUsingPOSTOK:
		return value, nil, nil
	case *OverrideSizingUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PinSnapshotUsingPOST pins snapshot
*/
func (a *Client) PinSnapshotUsingPOST(params *PinSnapshotUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PinSnapshotUsingPOSTOK, *PinSnapshotUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPinSnapshotUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pinSnapshotUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PinSnapshotUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PinSnapshotUsingPOSTOK:
		return value, nil, nil
	case *PinSnapshotUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpsertVarsUsingPOST upserts vars
*/
func (a *Client) UpsertVarsUsingPOST(params *UpsertVarsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpsertVarsUsingPOSTOK, *UpsertVarsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpsertVarsUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upsertVarsUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc/v1/clusters/{clusterId}/vars/upsert",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpsertVarsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpsertVarsUsingPOSTOK:
		return value, nil, nil
	case *UpsertVarsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
