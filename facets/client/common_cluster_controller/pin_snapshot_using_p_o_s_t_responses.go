// Code generated by go-swagger; DO NOT EDIT.

package common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// PinSnapshotUsingPOSTReader is a Reader for the PinSnapshotUsingPOST structure.
type PinSnapshotUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PinSnapshotUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPinSnapshotUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewPinSnapshotUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPinSnapshotUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPinSnapshotUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPinSnapshotUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot] pinSnapshotUsingPOST", response, response.Code())
	}
}

// NewPinSnapshotUsingPOSTOK creates a PinSnapshotUsingPOSTOK with default headers values
func NewPinSnapshotUsingPOSTOK() *PinSnapshotUsingPOSTOK {
	return &PinSnapshotUsingPOSTOK{}
}

/*
PinSnapshotUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type PinSnapshotUsingPOSTOK struct {
	Payload *models.SnapshotInfo
}

// IsSuccess returns true when this pin snapshot using p o s t o k response has a 2xx status code
func (o *PinSnapshotUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pin snapshot using p o s t o k response has a 3xx status code
func (o *PinSnapshotUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pin snapshot using p o s t o k response has a 4xx status code
func (o *PinSnapshotUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this pin snapshot using p o s t o k response has a 5xx status code
func (o *PinSnapshotUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this pin snapshot using p o s t o k response a status code equal to that given
func (o *PinSnapshotUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the pin snapshot using p o s t o k response
func (o *PinSnapshotUsingPOSTOK) Code() int {
	return 200
}

func (o *PinSnapshotUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot][%d] pinSnapshotUsingPOSTOK %s", 200, payload)
}

func (o *PinSnapshotUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot][%d] pinSnapshotUsingPOSTOK %s", 200, payload)
}

func (o *PinSnapshotUsingPOSTOK) GetPayload() *models.SnapshotInfo {
	return o.Payload
}

func (o *PinSnapshotUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SnapshotInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPinSnapshotUsingPOSTCreated creates a PinSnapshotUsingPOSTCreated with default headers values
func NewPinSnapshotUsingPOSTCreated() *PinSnapshotUsingPOSTCreated {
	return &PinSnapshotUsingPOSTCreated{}
}

/*
PinSnapshotUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type PinSnapshotUsingPOSTCreated struct {
}

// IsSuccess returns true when this pin snapshot using p o s t created response has a 2xx status code
func (o *PinSnapshotUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pin snapshot using p o s t created response has a 3xx status code
func (o *PinSnapshotUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pin snapshot using p o s t created response has a 4xx status code
func (o *PinSnapshotUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this pin snapshot using p o s t created response has a 5xx status code
func (o *PinSnapshotUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this pin snapshot using p o s t created response a status code equal to that given
func (o *PinSnapshotUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the pin snapshot using p o s t created response
func (o *PinSnapshotUsingPOSTCreated) Code() int {
	return 201
}

func (o *PinSnapshotUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot][%d] pinSnapshotUsingPOSTCreated", 201)
}

func (o *PinSnapshotUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot][%d] pinSnapshotUsingPOSTCreated", 201)
}

func (o *PinSnapshotUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPinSnapshotUsingPOSTUnauthorized creates a PinSnapshotUsingPOSTUnauthorized with default headers values
func NewPinSnapshotUsingPOSTUnauthorized() *PinSnapshotUsingPOSTUnauthorized {
	return &PinSnapshotUsingPOSTUnauthorized{}
}

/*
PinSnapshotUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PinSnapshotUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this pin snapshot using p o s t unauthorized response has a 2xx status code
func (o *PinSnapshotUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pin snapshot using p o s t unauthorized response has a 3xx status code
func (o *PinSnapshotUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pin snapshot using p o s t unauthorized response has a 4xx status code
func (o *PinSnapshotUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this pin snapshot using p o s t unauthorized response has a 5xx status code
func (o *PinSnapshotUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this pin snapshot using p o s t unauthorized response a status code equal to that given
func (o *PinSnapshotUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the pin snapshot using p o s t unauthorized response
func (o *PinSnapshotUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *PinSnapshotUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot][%d] pinSnapshotUsingPOSTUnauthorized", 401)
}

func (o *PinSnapshotUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot][%d] pinSnapshotUsingPOSTUnauthorized", 401)
}

func (o *PinSnapshotUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPinSnapshotUsingPOSTForbidden creates a PinSnapshotUsingPOSTForbidden with default headers values
func NewPinSnapshotUsingPOSTForbidden() *PinSnapshotUsingPOSTForbidden {
	return &PinSnapshotUsingPOSTForbidden{}
}

/*
PinSnapshotUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PinSnapshotUsingPOSTForbidden struct {
}

// IsSuccess returns true when this pin snapshot using p o s t forbidden response has a 2xx status code
func (o *PinSnapshotUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pin snapshot using p o s t forbidden response has a 3xx status code
func (o *PinSnapshotUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pin snapshot using p o s t forbidden response has a 4xx status code
func (o *PinSnapshotUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this pin snapshot using p o s t forbidden response has a 5xx status code
func (o *PinSnapshotUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this pin snapshot using p o s t forbidden response a status code equal to that given
func (o *PinSnapshotUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the pin snapshot using p o s t forbidden response
func (o *PinSnapshotUsingPOSTForbidden) Code() int {
	return 403
}

func (o *PinSnapshotUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot][%d] pinSnapshotUsingPOSTForbidden", 403)
}

func (o *PinSnapshotUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot][%d] pinSnapshotUsingPOSTForbidden", 403)
}

func (o *PinSnapshotUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPinSnapshotUsingPOSTNotFound creates a PinSnapshotUsingPOSTNotFound with default headers values
func NewPinSnapshotUsingPOSTNotFound() *PinSnapshotUsingPOSTNotFound {
	return &PinSnapshotUsingPOSTNotFound{}
}

/*
PinSnapshotUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PinSnapshotUsingPOSTNotFound struct {
}

// IsSuccess returns true when this pin snapshot using p o s t not found response has a 2xx status code
func (o *PinSnapshotUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pin snapshot using p o s t not found response has a 3xx status code
func (o *PinSnapshotUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pin snapshot using p o s t not found response has a 4xx status code
func (o *PinSnapshotUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this pin snapshot using p o s t not found response has a 5xx status code
func (o *PinSnapshotUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this pin snapshot using p o s t not found response a status code equal to that given
func (o *PinSnapshotUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the pin snapshot using p o s t not found response
func (o *PinSnapshotUsingPOSTNotFound) Code() int {
	return 404
}

func (o *PinSnapshotUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot][%d] pinSnapshotUsingPOSTNotFound", 404)
}

func (o *PinSnapshotUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot][%d] pinSnapshotUsingPOSTNotFound", 404)
}

func (o *PinSnapshotUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
