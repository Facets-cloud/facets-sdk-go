// Code generated by go-swagger; DO NOT EDIT.

package ui_no_auth_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ValidateTokenReader is a Reader for the ValidateToken structure.
type ValidateTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewValidateTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewValidateTokenMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewValidateTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /public-ui/v1/user/token/validate] validateToken", response, response.Code())
	}
}

// NewValidateTokenOK creates a ValidateTokenOK with default headers values
func NewValidateTokenOK() *ValidateTokenOK {
	return &ValidateTokenOK{}
}

/*
ValidateTokenOK describes a response with status code 200, with default header values.

OK
*/
type ValidateTokenOK struct {
	Payload *models.TokenValidity
}

// IsSuccess returns true when this validate token o k response has a 2xx status code
func (o *ValidateTokenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate token o k response has a 3xx status code
func (o *ValidateTokenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate token o k response has a 4xx status code
func (o *ValidateTokenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate token o k response has a 5xx status code
func (o *ValidateTokenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate token o k response a status code equal to that given
func (o *ValidateTokenOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate token o k response
func (o *ValidateTokenOK) Code() int {
	return 200
}

func (o *ValidateTokenOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenOK %s", 200, payload)
}

func (o *ValidateTokenOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenOK %s", 200, payload)
}

func (o *ValidateTokenOK) GetPayload() *models.TokenValidity {
	return o.Payload
}

func (o *ValidateTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokenValidity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateTokenBadRequest creates a ValidateTokenBadRequest with default headers values
func NewValidateTokenBadRequest() *ValidateTokenBadRequest {
	return &ValidateTokenBadRequest{}
}

/*
ValidateTokenBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ValidateTokenBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate token bad request response has a 2xx status code
func (o *ValidateTokenBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate token bad request response has a 3xx status code
func (o *ValidateTokenBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate token bad request response has a 4xx status code
func (o *ValidateTokenBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate token bad request response has a 5xx status code
func (o *ValidateTokenBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this validate token bad request response a status code equal to that given
func (o *ValidateTokenBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the validate token bad request response
func (o *ValidateTokenBadRequest) Code() int {
	return 400
}

func (o *ValidateTokenBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenBadRequest %s", 400, payload)
}

func (o *ValidateTokenBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenBadRequest %s", 400, payload)
}

func (o *ValidateTokenBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateTokenNotFound creates a ValidateTokenNotFound with default headers values
func NewValidateTokenNotFound() *ValidateTokenNotFound {
	return &ValidateTokenNotFound{}
}

/*
ValidateTokenNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ValidateTokenNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate token not found response has a 2xx status code
func (o *ValidateTokenNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate token not found response has a 3xx status code
func (o *ValidateTokenNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate token not found response has a 4xx status code
func (o *ValidateTokenNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate token not found response has a 5xx status code
func (o *ValidateTokenNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this validate token not found response a status code equal to that given
func (o *ValidateTokenNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the validate token not found response
func (o *ValidateTokenNotFound) Code() int {
	return 404
}

func (o *ValidateTokenNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenNotFound %s", 404, payload)
}

func (o *ValidateTokenNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenNotFound %s", 404, payload)
}

func (o *ValidateTokenNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateTokenMethodNotAllowed creates a ValidateTokenMethodNotAllowed with default headers values
func NewValidateTokenMethodNotAllowed() *ValidateTokenMethodNotAllowed {
	return &ValidateTokenMethodNotAllowed{}
}

/*
ValidateTokenMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ValidateTokenMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate token method not allowed response has a 2xx status code
func (o *ValidateTokenMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate token method not allowed response has a 3xx status code
func (o *ValidateTokenMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate token method not allowed response has a 4xx status code
func (o *ValidateTokenMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate token method not allowed response has a 5xx status code
func (o *ValidateTokenMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this validate token method not allowed response a status code equal to that given
func (o *ValidateTokenMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the validate token method not allowed response
func (o *ValidateTokenMethodNotAllowed) Code() int {
	return 405
}

func (o *ValidateTokenMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenMethodNotAllowed %s", 405, payload)
}

func (o *ValidateTokenMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenMethodNotAllowed %s", 405, payload)
}

func (o *ValidateTokenMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateTokenMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateTokenInternalServerError creates a ValidateTokenInternalServerError with default headers values
func NewValidateTokenInternalServerError() *ValidateTokenInternalServerError {
	return &ValidateTokenInternalServerError{}
}

/*
ValidateTokenInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ValidateTokenInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this validate token internal server error response has a 2xx status code
func (o *ValidateTokenInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate token internal server error response has a 3xx status code
func (o *ValidateTokenInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate token internal server error response has a 4xx status code
func (o *ValidateTokenInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate token internal server error response has a 5xx status code
func (o *ValidateTokenInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this validate token internal server error response a status code equal to that given
func (o *ValidateTokenInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the validate token internal server error response
func (o *ValidateTokenInternalServerError) Code() int {
	return 500
}

func (o *ValidateTokenInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenInternalServerError %s", 500, payload)
}

func (o *ValidateTokenInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenInternalServerError %s", 500, payload)
}

func (o *ValidateTokenInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ValidateTokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
