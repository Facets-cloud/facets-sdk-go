// Code generated by go-swagger; DO NOT EDIT.

package ui_no_auth_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// SavePasswordUsingPOSTReader is a Reader for the SavePasswordUsingPOST structure.
type SavePasswordUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SavePasswordUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSavePasswordUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewSavePasswordUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSavePasswordUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSavePasswordUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSavePasswordUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /public-ui/v1/user/savePassword] savePasswordUsingPOST", response, response.Code())
	}
}

// NewSavePasswordUsingPOSTOK creates a SavePasswordUsingPOSTOK with default headers values
func NewSavePasswordUsingPOSTOK() *SavePasswordUsingPOSTOK {
	return &SavePasswordUsingPOSTOK{}
}

/*
SavePasswordUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type SavePasswordUsingPOSTOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this save password using p o s t o k response has a 2xx status code
func (o *SavePasswordUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this save password using p o s t o k response has a 3xx status code
func (o *SavePasswordUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save password using p o s t o k response has a 4xx status code
func (o *SavePasswordUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this save password using p o s t o k response has a 5xx status code
func (o *SavePasswordUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this save password using p o s t o k response a status code equal to that given
func (o *SavePasswordUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the save password using p o s t o k response
func (o *SavePasswordUsingPOSTOK) Code() int {
	return 200
}

func (o *SavePasswordUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public-ui/v1/user/savePassword][%d] savePasswordUsingPOSTOK %s", 200, payload)
}

func (o *SavePasswordUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public-ui/v1/user/savePassword][%d] savePasswordUsingPOSTOK %s", 200, payload)
}

func (o *SavePasswordUsingPOSTOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *SavePasswordUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSavePasswordUsingPOSTCreated creates a SavePasswordUsingPOSTCreated with default headers values
func NewSavePasswordUsingPOSTCreated() *SavePasswordUsingPOSTCreated {
	return &SavePasswordUsingPOSTCreated{}
}

/*
SavePasswordUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type SavePasswordUsingPOSTCreated struct {
}

// IsSuccess returns true when this save password using p o s t created response has a 2xx status code
func (o *SavePasswordUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this save password using p o s t created response has a 3xx status code
func (o *SavePasswordUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save password using p o s t created response has a 4xx status code
func (o *SavePasswordUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this save password using p o s t created response has a 5xx status code
func (o *SavePasswordUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this save password using p o s t created response a status code equal to that given
func (o *SavePasswordUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the save password using p o s t created response
func (o *SavePasswordUsingPOSTCreated) Code() int {
	return 201
}

func (o *SavePasswordUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /public-ui/v1/user/savePassword][%d] savePasswordUsingPOSTCreated", 201)
}

func (o *SavePasswordUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /public-ui/v1/user/savePassword][%d] savePasswordUsingPOSTCreated", 201)
}

func (o *SavePasswordUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSavePasswordUsingPOSTUnauthorized creates a SavePasswordUsingPOSTUnauthorized with default headers values
func NewSavePasswordUsingPOSTUnauthorized() *SavePasswordUsingPOSTUnauthorized {
	return &SavePasswordUsingPOSTUnauthorized{}
}

/*
SavePasswordUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SavePasswordUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this save password using p o s t unauthorized response has a 2xx status code
func (o *SavePasswordUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save password using p o s t unauthorized response has a 3xx status code
func (o *SavePasswordUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save password using p o s t unauthorized response has a 4xx status code
func (o *SavePasswordUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this save password using p o s t unauthorized response has a 5xx status code
func (o *SavePasswordUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this save password using p o s t unauthorized response a status code equal to that given
func (o *SavePasswordUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the save password using p o s t unauthorized response
func (o *SavePasswordUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *SavePasswordUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /public-ui/v1/user/savePassword][%d] savePasswordUsingPOSTUnauthorized", 401)
}

func (o *SavePasswordUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /public-ui/v1/user/savePassword][%d] savePasswordUsingPOSTUnauthorized", 401)
}

func (o *SavePasswordUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSavePasswordUsingPOSTForbidden creates a SavePasswordUsingPOSTForbidden with default headers values
func NewSavePasswordUsingPOSTForbidden() *SavePasswordUsingPOSTForbidden {
	return &SavePasswordUsingPOSTForbidden{}
}

/*
SavePasswordUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SavePasswordUsingPOSTForbidden struct {
}

// IsSuccess returns true when this save password using p o s t forbidden response has a 2xx status code
func (o *SavePasswordUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save password using p o s t forbidden response has a 3xx status code
func (o *SavePasswordUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save password using p o s t forbidden response has a 4xx status code
func (o *SavePasswordUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this save password using p o s t forbidden response has a 5xx status code
func (o *SavePasswordUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this save password using p o s t forbidden response a status code equal to that given
func (o *SavePasswordUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the save password using p o s t forbidden response
func (o *SavePasswordUsingPOSTForbidden) Code() int {
	return 403
}

func (o *SavePasswordUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /public-ui/v1/user/savePassword][%d] savePasswordUsingPOSTForbidden", 403)
}

func (o *SavePasswordUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /public-ui/v1/user/savePassword][%d] savePasswordUsingPOSTForbidden", 403)
}

func (o *SavePasswordUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSavePasswordUsingPOSTNotFound creates a SavePasswordUsingPOSTNotFound with default headers values
func NewSavePasswordUsingPOSTNotFound() *SavePasswordUsingPOSTNotFound {
	return &SavePasswordUsingPOSTNotFound{}
}

/*
SavePasswordUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SavePasswordUsingPOSTNotFound struct {
}

// IsSuccess returns true when this save password using p o s t not found response has a 2xx status code
func (o *SavePasswordUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save password using p o s t not found response has a 3xx status code
func (o *SavePasswordUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save password using p o s t not found response has a 4xx status code
func (o *SavePasswordUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this save password using p o s t not found response has a 5xx status code
func (o *SavePasswordUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this save password using p o s t not found response a status code equal to that given
func (o *SavePasswordUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the save password using p o s t not found response
func (o *SavePasswordUsingPOSTNotFound) Code() int {
	return 404
}

func (o *SavePasswordUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /public-ui/v1/user/savePassword][%d] savePasswordUsingPOSTNotFound", 404)
}

func (o *SavePasswordUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /public-ui/v1/user/savePassword][%d] savePasswordUsingPOSTNotFound", 404)
}

func (o *SavePasswordUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
