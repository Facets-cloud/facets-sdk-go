// Code generated by go-swagger; DO NOT EDIT.

package ui_no_auth_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ValidateTokenUsingPOSTReader is a Reader for the ValidateTokenUsingPOST structure.
type ValidateTokenUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateTokenUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateTokenUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewValidateTokenUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewValidateTokenUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewValidateTokenUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewValidateTokenUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /public-ui/v1/user/token/validate] validateTokenUsingPOST", response, response.Code())
	}
}

// NewValidateTokenUsingPOSTOK creates a ValidateTokenUsingPOSTOK with default headers values
func NewValidateTokenUsingPOSTOK() *ValidateTokenUsingPOSTOK {
	return &ValidateTokenUsingPOSTOK{}
}

/*
ValidateTokenUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type ValidateTokenUsingPOSTOK struct {
	Payload *models.TokenValidity
}

// IsSuccess returns true when this validate token using p o s t o k response has a 2xx status code
func (o *ValidateTokenUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate token using p o s t o k response has a 3xx status code
func (o *ValidateTokenUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate token using p o s t o k response has a 4xx status code
func (o *ValidateTokenUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate token using p o s t o k response has a 5xx status code
func (o *ValidateTokenUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate token using p o s t o k response a status code equal to that given
func (o *ValidateTokenUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate token using p o s t o k response
func (o *ValidateTokenUsingPOSTOK) Code() int {
	return 200
}

func (o *ValidateTokenUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenUsingPOSTOK %s", 200, payload)
}

func (o *ValidateTokenUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenUsingPOSTOK %s", 200, payload)
}

func (o *ValidateTokenUsingPOSTOK) GetPayload() *models.TokenValidity {
	return o.Payload
}

func (o *ValidateTokenUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokenValidity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateTokenUsingPOSTCreated creates a ValidateTokenUsingPOSTCreated with default headers values
func NewValidateTokenUsingPOSTCreated() *ValidateTokenUsingPOSTCreated {
	return &ValidateTokenUsingPOSTCreated{}
}

/*
ValidateTokenUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type ValidateTokenUsingPOSTCreated struct {
}

// IsSuccess returns true when this validate token using p o s t created response has a 2xx status code
func (o *ValidateTokenUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate token using p o s t created response has a 3xx status code
func (o *ValidateTokenUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate token using p o s t created response has a 4xx status code
func (o *ValidateTokenUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate token using p o s t created response has a 5xx status code
func (o *ValidateTokenUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this validate token using p o s t created response a status code equal to that given
func (o *ValidateTokenUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the validate token using p o s t created response
func (o *ValidateTokenUsingPOSTCreated) Code() int {
	return 201
}

func (o *ValidateTokenUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenUsingPOSTCreated", 201)
}

func (o *ValidateTokenUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenUsingPOSTCreated", 201)
}

func (o *ValidateTokenUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateTokenUsingPOSTUnauthorized creates a ValidateTokenUsingPOSTUnauthorized with default headers values
func NewValidateTokenUsingPOSTUnauthorized() *ValidateTokenUsingPOSTUnauthorized {
	return &ValidateTokenUsingPOSTUnauthorized{}
}

/*
ValidateTokenUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ValidateTokenUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this validate token using p o s t unauthorized response has a 2xx status code
func (o *ValidateTokenUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate token using p o s t unauthorized response has a 3xx status code
func (o *ValidateTokenUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate token using p o s t unauthorized response has a 4xx status code
func (o *ValidateTokenUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate token using p o s t unauthorized response has a 5xx status code
func (o *ValidateTokenUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this validate token using p o s t unauthorized response a status code equal to that given
func (o *ValidateTokenUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the validate token using p o s t unauthorized response
func (o *ValidateTokenUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *ValidateTokenUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenUsingPOSTUnauthorized", 401)
}

func (o *ValidateTokenUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenUsingPOSTUnauthorized", 401)
}

func (o *ValidateTokenUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateTokenUsingPOSTForbidden creates a ValidateTokenUsingPOSTForbidden with default headers values
func NewValidateTokenUsingPOSTForbidden() *ValidateTokenUsingPOSTForbidden {
	return &ValidateTokenUsingPOSTForbidden{}
}

/*
ValidateTokenUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ValidateTokenUsingPOSTForbidden struct {
}

// IsSuccess returns true when this validate token using p o s t forbidden response has a 2xx status code
func (o *ValidateTokenUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate token using p o s t forbidden response has a 3xx status code
func (o *ValidateTokenUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate token using p o s t forbidden response has a 4xx status code
func (o *ValidateTokenUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate token using p o s t forbidden response has a 5xx status code
func (o *ValidateTokenUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this validate token using p o s t forbidden response a status code equal to that given
func (o *ValidateTokenUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the validate token using p o s t forbidden response
func (o *ValidateTokenUsingPOSTForbidden) Code() int {
	return 403
}

func (o *ValidateTokenUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenUsingPOSTForbidden", 403)
}

func (o *ValidateTokenUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenUsingPOSTForbidden", 403)
}

func (o *ValidateTokenUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateTokenUsingPOSTNotFound creates a ValidateTokenUsingPOSTNotFound with default headers values
func NewValidateTokenUsingPOSTNotFound() *ValidateTokenUsingPOSTNotFound {
	return &ValidateTokenUsingPOSTNotFound{}
}

/*
ValidateTokenUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ValidateTokenUsingPOSTNotFound struct {
}

// IsSuccess returns true when this validate token using p o s t not found response has a 2xx status code
func (o *ValidateTokenUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate token using p o s t not found response has a 3xx status code
func (o *ValidateTokenUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate token using p o s t not found response has a 4xx status code
func (o *ValidateTokenUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate token using p o s t not found response has a 5xx status code
func (o *ValidateTokenUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this validate token using p o s t not found response a status code equal to that given
func (o *ValidateTokenUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the validate token using p o s t not found response
func (o *ValidateTokenUsingPOSTNotFound) Code() int {
	return 404
}

func (o *ValidateTokenUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenUsingPOSTNotFound", 404)
}

func (o *ValidateTokenUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /public-ui/v1/user/token/validate][%d] validateTokenUsingPOSTNotFound", 404)
}

func (o *ValidateTokenUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
