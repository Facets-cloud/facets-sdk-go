// Code generated by go-swagger; DO NOT EDIT.

package ui_tf_output_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteOutputUsingDELETEReader is a Reader for the DeleteOutputUsingDELETE structure.
type DeleteOutputUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteOutputUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteOutputUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteOutputUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteOutputUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteOutputUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/tf-outputs/{name}] deleteOutputUsingDELETE", response, response.Code())
	}
}

// NewDeleteOutputUsingDELETEOK creates a DeleteOutputUsingDELETEOK with default headers values
func NewDeleteOutputUsingDELETEOK() *DeleteOutputUsingDELETEOK {
	return &DeleteOutputUsingDELETEOK{}
}

/*
DeleteOutputUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteOutputUsingDELETEOK struct {
}

// IsSuccess returns true when this delete output using d e l e t e o k response has a 2xx status code
func (o *DeleteOutputUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete output using d e l e t e o k response has a 3xx status code
func (o *DeleteOutputUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete output using d e l e t e o k response has a 4xx status code
func (o *DeleteOutputUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete output using d e l e t e o k response has a 5xx status code
func (o *DeleteOutputUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete output using d e l e t e o k response a status code equal to that given
func (o *DeleteOutputUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete output using d e l e t e o k response
func (o *DeleteOutputUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteOutputUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/tf-outputs/{name}][%d] deleteOutputUsingDELETEOK", 200)
}

func (o *DeleteOutputUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/tf-outputs/{name}][%d] deleteOutputUsingDELETEOK", 200)
}

func (o *DeleteOutputUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteOutputUsingDELETENoContent creates a DeleteOutputUsingDELETENoContent with default headers values
func NewDeleteOutputUsingDELETENoContent() *DeleteOutputUsingDELETENoContent {
	return &DeleteOutputUsingDELETENoContent{}
}

/*
DeleteOutputUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteOutputUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete output using d e l e t e no content response has a 2xx status code
func (o *DeleteOutputUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete output using d e l e t e no content response has a 3xx status code
func (o *DeleteOutputUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete output using d e l e t e no content response has a 4xx status code
func (o *DeleteOutputUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete output using d e l e t e no content response has a 5xx status code
func (o *DeleteOutputUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete output using d e l e t e no content response a status code equal to that given
func (o *DeleteOutputUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete output using d e l e t e no content response
func (o *DeleteOutputUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteOutputUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/tf-outputs/{name}][%d] deleteOutputUsingDELETENoContent", 204)
}

func (o *DeleteOutputUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/tf-outputs/{name}][%d] deleteOutputUsingDELETENoContent", 204)
}

func (o *DeleteOutputUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteOutputUsingDELETEUnauthorized creates a DeleteOutputUsingDELETEUnauthorized with default headers values
func NewDeleteOutputUsingDELETEUnauthorized() *DeleteOutputUsingDELETEUnauthorized {
	return &DeleteOutputUsingDELETEUnauthorized{}
}

/*
DeleteOutputUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteOutputUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete output using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteOutputUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete output using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteOutputUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete output using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteOutputUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete output using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteOutputUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete output using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteOutputUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete output using d e l e t e unauthorized response
func (o *DeleteOutputUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteOutputUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/tf-outputs/{name}][%d] deleteOutputUsingDELETEUnauthorized", 401)
}

func (o *DeleteOutputUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/tf-outputs/{name}][%d] deleteOutputUsingDELETEUnauthorized", 401)
}

func (o *DeleteOutputUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteOutputUsingDELETEForbidden creates a DeleteOutputUsingDELETEForbidden with default headers values
func NewDeleteOutputUsingDELETEForbidden() *DeleteOutputUsingDELETEForbidden {
	return &DeleteOutputUsingDELETEForbidden{}
}

/*
DeleteOutputUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteOutputUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete output using d e l e t e forbidden response has a 2xx status code
func (o *DeleteOutputUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete output using d e l e t e forbidden response has a 3xx status code
func (o *DeleteOutputUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete output using d e l e t e forbidden response has a 4xx status code
func (o *DeleteOutputUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete output using d e l e t e forbidden response has a 5xx status code
func (o *DeleteOutputUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete output using d e l e t e forbidden response a status code equal to that given
func (o *DeleteOutputUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete output using d e l e t e forbidden response
func (o *DeleteOutputUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteOutputUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/tf-outputs/{name}][%d] deleteOutputUsingDELETEForbidden", 403)
}

func (o *DeleteOutputUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/tf-outputs/{name}][%d] deleteOutputUsingDELETEForbidden", 403)
}

func (o *DeleteOutputUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
