// Code generated by go-swagger; DO NOT EDIT.

package ui_tf_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui tf version controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui tf version controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui tf version controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui tf version controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteTfStreamForCluster(params *DeleteTfStreamForClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTfStreamForClusterOK, error)

	GetAllVersions(params *GetAllVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllVersionsOK, error)

	GetPendingMigrationScriptsByClusterID(params *GetPendingMigrationScriptsByClusterIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPendingMigrationScriptsByClusterIDOK, error)

	GetTfStreamForCluster(params *GetTfStreamForClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTfStreamForClusterOK, error)

	GetTfVersionsForStream(params *GetTfVersionsForStreamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTfVersionsForStreamOK, error)

	PopulateReleaseStreamTfVersionMapping(params *PopulateReleaseStreamTfVersionMappingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PopulateReleaseStreamTfVersionMappingOK, error)

	SetTfVersionForCluster(params *SetTfVersionForClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetTfVersionForClusterOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteTfStreamForCluster delete tf stream for cluster API
*/
func (a *Client) DeleteTfStreamForCluster(params *DeleteTfStreamForClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTfStreamForClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTfStreamForClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTfStreamForCluster",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/terraform/cluster/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTfStreamForClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTfStreamForClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTfStreamForCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllVersions get all versions API
*/
func (a *Client) GetAllVersions(params *GetAllVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllVersions",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/terraform/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllVersions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPendingMigrationScriptsByClusterID get pending migration scripts by cluster Id API
*/
func (a *Client) GetPendingMigrationScriptsByClusterID(params *GetPendingMigrationScriptsByClusterIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPendingMigrationScriptsByClusterIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPendingMigrationScriptsByClusterIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPendingMigrationScriptsByClusterId",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/terraform/cluster/{clusterId}/pending-migration-scripts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPendingMigrationScriptsByClusterIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPendingMigrationScriptsByClusterIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPendingMigrationScriptsByClusterId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTfStreamForCluster get tf stream for cluster API
*/
func (a *Client) GetTfStreamForCluster(params *GetTfStreamForClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTfStreamForClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTfStreamForClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTfStreamForCluster",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/terraform/cluster/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTfStreamForClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTfStreamForClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTfStreamForCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTfVersionsForStream get tf versions for stream API
*/
func (a *Client) GetTfVersionsForStream(params *GetTfVersionsForStreamParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTfVersionsForStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTfVersionsForStreamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTfVersionsForStream",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/terraform/stream/{tfStream}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTfVersionsForStreamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTfVersionsForStreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTfVersionsForStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PopulateReleaseStreamTfVersionMapping populate release stream tf version mapping API
*/
func (a *Client) PopulateReleaseStreamTfVersionMapping(params *PopulateReleaseStreamTfVersionMappingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PopulateReleaseStreamTfVersionMappingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPopulateReleaseStreamTfVersionMappingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "populateReleaseStreamTfVersionMapping",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/terraform/sync-release-stream-mapping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PopulateReleaseStreamTfVersionMappingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PopulateReleaseStreamTfVersionMappingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for populateReleaseStreamTfVersionMapping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetTfVersionForCluster set tf version for cluster API
*/
func (a *Client) SetTfVersionForCluster(params *SetTfVersionForClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetTfVersionForClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetTfVersionForClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setTfVersionForCluster",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/terraform/cluster/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetTfVersionForClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetTfVersionForClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setTfVersionForCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
