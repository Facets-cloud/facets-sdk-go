// Code generated by go-swagger; DO NOT EDIT.

package ui_tf_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui tf version controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui tf version controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui tf version controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui tf version controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteTfStreamForClusterUsingDELETE(params *DeleteTfStreamForClusterUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTfStreamForClusterUsingDELETEOK, *DeleteTfStreamForClusterUsingDELETENoContent, error)

	GetAllVersionsUsingGET(params *GetAllVersionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllVersionsUsingGETOK, error)

	GetPendingMigrationScriptsByClusterIDUsingGET(params *GetPendingMigrationScriptsByClusterIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPendingMigrationScriptsByClusterIDUsingGETOK, error)

	GetTfStreamForClusterUsingGET(params *GetTfStreamForClusterUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTfStreamForClusterUsingGETOK, error)

	GetTfVersionsForStreamUsingGET(params *GetTfVersionsForStreamUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTfVersionsForStreamUsingGETOK, error)

	PopulateReleaseStreamTfVersionMappingUsingPOST(params *PopulateReleaseStreamTfVersionMappingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PopulateReleaseStreamTfVersionMappingUsingPOSTOK, *PopulateReleaseStreamTfVersionMappingUsingPOSTCreated, error)

	SetTfVersionForClusterUsingPUT(params *SetTfVersionForClusterUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetTfVersionForClusterUsingPUTOK, *SetTfVersionForClusterUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteTfStreamForClusterUsingDELETE deletes tf stream for cluster
*/
func (a *Client) DeleteTfStreamForClusterUsingDELETE(params *DeleteTfStreamForClusterUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTfStreamForClusterUsingDELETEOK, *DeleteTfStreamForClusterUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTfStreamForClusterUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTfStreamForClusterUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/terraform/cluster/{clusterId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTfStreamForClusterUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteTfStreamForClusterUsingDELETEOK:
		return value, nil, nil
	case *DeleteTfStreamForClusterUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_tf_version_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllVersionsUsingGET gets all versions
*/
func (a *Client) GetAllVersionsUsingGET(params *GetAllVersionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllVersionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllVersionsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllVersionsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/terraform/versions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllVersionsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllVersionsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllVersionsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPendingMigrationScriptsByClusterIDUsingGET gets pending migration scripts by cluster Id
*/
func (a *Client) GetPendingMigrationScriptsByClusterIDUsingGET(params *GetPendingMigrationScriptsByClusterIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPendingMigrationScriptsByClusterIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPendingMigrationScriptsByClusterIDUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPendingMigrationScriptsByClusterIdUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/terraform/cluster/{clusterId}/pending-migration-scripts",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPendingMigrationScriptsByClusterIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPendingMigrationScriptsByClusterIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPendingMigrationScriptsByClusterIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTfStreamForClusterUsingGET gets tf stream for cluster
*/
func (a *Client) GetTfStreamForClusterUsingGET(params *GetTfStreamForClusterUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTfStreamForClusterUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTfStreamForClusterUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTfStreamForClusterUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/terraform/cluster/{clusterId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTfStreamForClusterUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTfStreamForClusterUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTfStreamForClusterUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTfVersionsForStreamUsingGET gets tf versions for stream
*/
func (a *Client) GetTfVersionsForStreamUsingGET(params *GetTfVersionsForStreamUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTfVersionsForStreamUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTfVersionsForStreamUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTfVersionsForStreamUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/terraform/stream/{tfStream}/versions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTfVersionsForStreamUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTfVersionsForStreamUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTfVersionsForStreamUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PopulateReleaseStreamTfVersionMappingUsingPOST populates release stream tf version mapping
*/
func (a *Client) PopulateReleaseStreamTfVersionMappingUsingPOST(params *PopulateReleaseStreamTfVersionMappingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PopulateReleaseStreamTfVersionMappingUsingPOSTOK, *PopulateReleaseStreamTfVersionMappingUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPopulateReleaseStreamTfVersionMappingUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "populateReleaseStreamTfVersionMappingUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/terraform/sync-release-stream-mapping",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PopulateReleaseStreamTfVersionMappingUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PopulateReleaseStreamTfVersionMappingUsingPOSTOK:
		return value, nil, nil
	case *PopulateReleaseStreamTfVersionMappingUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_tf_version_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetTfVersionForClusterUsingPUT sets tf version for cluster
*/
func (a *Client) SetTfVersionForClusterUsingPUT(params *SetTfVersionForClusterUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetTfVersionForClusterUsingPUTOK, *SetTfVersionForClusterUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetTfVersionForClusterUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setTfVersionForClusterUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/terraform/cluster/{clusterId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetTfVersionForClusterUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SetTfVersionForClusterUsingPUTOK:
		return value, nil, nil
	case *SetTfVersionForClusterUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_tf_version_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
