// Code generated by go-swagger; DO NOT EDIT.

package ui_cloud_cost_explorer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetDailyCloudCostUsingGETReader is a Reader for the GetDailyCloudCostUsingGET structure.
type GetDailyCloudCostUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDailyCloudCostUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDailyCloudCostUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDailyCloudCostUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDailyCloudCostUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDailyCloudCostUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost] getDailyCloudCostUsingGET", response, response.Code())
	}
}

// NewGetDailyCloudCostUsingGETOK creates a GetDailyCloudCostUsingGETOK with default headers values
func NewGetDailyCloudCostUsingGETOK() *GetDailyCloudCostUsingGETOK {
	return &GetDailyCloudCostUsingGETOK{}
}

/*
GetDailyCloudCostUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetDailyCloudCostUsingGETOK struct {
	Payload *models.DailyCloudCostDTO
}

// IsSuccess returns true when this get daily cloud cost using g e t o k response has a 2xx status code
func (o *GetDailyCloudCostUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get daily cloud cost using g e t o k response has a 3xx status code
func (o *GetDailyCloudCostUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get daily cloud cost using g e t o k response has a 4xx status code
func (o *GetDailyCloudCostUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get daily cloud cost using g e t o k response has a 5xx status code
func (o *GetDailyCloudCostUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get daily cloud cost using g e t o k response a status code equal to that given
func (o *GetDailyCloudCostUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get daily cloud cost using g e t o k response
func (o *GetDailyCloudCostUsingGETOK) Code() int {
	return 200
}

func (o *GetDailyCloudCostUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostUsingGETOK %s", 200, payload)
}

func (o *GetDailyCloudCostUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostUsingGETOK %s", 200, payload)
}

func (o *GetDailyCloudCostUsingGETOK) GetPayload() *models.DailyCloudCostDTO {
	return o.Payload
}

func (o *GetDailyCloudCostUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DailyCloudCostDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDailyCloudCostUsingGETUnauthorized creates a GetDailyCloudCostUsingGETUnauthorized with default headers values
func NewGetDailyCloudCostUsingGETUnauthorized() *GetDailyCloudCostUsingGETUnauthorized {
	return &GetDailyCloudCostUsingGETUnauthorized{}
}

/*
GetDailyCloudCostUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetDailyCloudCostUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get daily cloud cost using g e t unauthorized response has a 2xx status code
func (o *GetDailyCloudCostUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get daily cloud cost using g e t unauthorized response has a 3xx status code
func (o *GetDailyCloudCostUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get daily cloud cost using g e t unauthorized response has a 4xx status code
func (o *GetDailyCloudCostUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get daily cloud cost using g e t unauthorized response has a 5xx status code
func (o *GetDailyCloudCostUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get daily cloud cost using g e t unauthorized response a status code equal to that given
func (o *GetDailyCloudCostUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get daily cloud cost using g e t unauthorized response
func (o *GetDailyCloudCostUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetDailyCloudCostUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostUsingGETUnauthorized", 401)
}

func (o *GetDailyCloudCostUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostUsingGETUnauthorized", 401)
}

func (o *GetDailyCloudCostUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDailyCloudCostUsingGETForbidden creates a GetDailyCloudCostUsingGETForbidden with default headers values
func NewGetDailyCloudCostUsingGETForbidden() *GetDailyCloudCostUsingGETForbidden {
	return &GetDailyCloudCostUsingGETForbidden{}
}

/*
GetDailyCloudCostUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetDailyCloudCostUsingGETForbidden struct {
}

// IsSuccess returns true when this get daily cloud cost using g e t forbidden response has a 2xx status code
func (o *GetDailyCloudCostUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get daily cloud cost using g e t forbidden response has a 3xx status code
func (o *GetDailyCloudCostUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get daily cloud cost using g e t forbidden response has a 4xx status code
func (o *GetDailyCloudCostUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get daily cloud cost using g e t forbidden response has a 5xx status code
func (o *GetDailyCloudCostUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get daily cloud cost using g e t forbidden response a status code equal to that given
func (o *GetDailyCloudCostUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get daily cloud cost using g e t forbidden response
func (o *GetDailyCloudCostUsingGETForbidden) Code() int {
	return 403
}

func (o *GetDailyCloudCostUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostUsingGETForbidden", 403)
}

func (o *GetDailyCloudCostUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostUsingGETForbidden", 403)
}

func (o *GetDailyCloudCostUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDailyCloudCostUsingGETNotFound creates a GetDailyCloudCostUsingGETNotFound with default headers values
func NewGetDailyCloudCostUsingGETNotFound() *GetDailyCloudCostUsingGETNotFound {
	return &GetDailyCloudCostUsingGETNotFound{}
}

/*
GetDailyCloudCostUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetDailyCloudCostUsingGETNotFound struct {
}

// IsSuccess returns true when this get daily cloud cost using g e t not found response has a 2xx status code
func (o *GetDailyCloudCostUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get daily cloud cost using g e t not found response has a 3xx status code
func (o *GetDailyCloudCostUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get daily cloud cost using g e t not found response has a 4xx status code
func (o *GetDailyCloudCostUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get daily cloud cost using g e t not found response has a 5xx status code
func (o *GetDailyCloudCostUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get daily cloud cost using g e t not found response a status code equal to that given
func (o *GetDailyCloudCostUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get daily cloud cost using g e t not found response
func (o *GetDailyCloudCostUsingGETNotFound) Code() int {
	return 404
}

func (o *GetDailyCloudCostUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostUsingGETNotFound", 404)
}

func (o *GetDailyCloudCostUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostUsingGETNotFound", 404)
}

func (o *GetDailyCloudCostUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
