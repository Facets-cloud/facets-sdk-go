// Code generated by go-swagger; DO NOT EDIT.

package ui_cloud_cost_explorer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDailyCloudCostUsingGETParams creates a new GetDailyCloudCostUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDailyCloudCostUsingGETParams() *GetDailyCloudCostUsingGETParams {
	return &GetDailyCloudCostUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDailyCloudCostUsingGETParamsWithTimeout creates a new GetDailyCloudCostUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetDailyCloudCostUsingGETParamsWithTimeout(timeout time.Duration) *GetDailyCloudCostUsingGETParams {
	return &GetDailyCloudCostUsingGETParams{
		timeout: timeout,
	}
}

// NewGetDailyCloudCostUsingGETParamsWithContext creates a new GetDailyCloudCostUsingGETParams object
// with the ability to set a context for a request.
func NewGetDailyCloudCostUsingGETParamsWithContext(ctx context.Context) *GetDailyCloudCostUsingGETParams {
	return &GetDailyCloudCostUsingGETParams{
		Context: ctx,
	}
}

// NewGetDailyCloudCostUsingGETParamsWithHTTPClient creates a new GetDailyCloudCostUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetDailyCloudCostUsingGETParamsWithHTTPClient(client *http.Client) *GetDailyCloudCostUsingGETParams {
	return &GetDailyCloudCostUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetDailyCloudCostUsingGETParams contains all the parameters to send to the API endpoint

	for the get daily cloud cost using g e t operation.

	Typically these are written to a http.Request.
*/
type GetDailyCloudCostUsingGETParams struct {

	/* ClusterIds.

	   clusterIds
	*/
	ClusterIds []string

	/* End.

	   end

	   Format: date
	*/
	End strfmt.Date

	/* StackName.

	   stackName
	*/
	StackName string

	/* Start.

	   start

	   Format: date
	*/
	Start strfmt.Date

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get daily cloud cost using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDailyCloudCostUsingGETParams) WithDefaults() *GetDailyCloudCostUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get daily cloud cost using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDailyCloudCostUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get daily cloud cost using g e t params
func (o *GetDailyCloudCostUsingGETParams) WithTimeout(timeout time.Duration) *GetDailyCloudCostUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get daily cloud cost using g e t params
func (o *GetDailyCloudCostUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get daily cloud cost using g e t params
func (o *GetDailyCloudCostUsingGETParams) WithContext(ctx context.Context) *GetDailyCloudCostUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get daily cloud cost using g e t params
func (o *GetDailyCloudCostUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get daily cloud cost using g e t params
func (o *GetDailyCloudCostUsingGETParams) WithHTTPClient(client *http.Client) *GetDailyCloudCostUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get daily cloud cost using g e t params
func (o *GetDailyCloudCostUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterIds adds the clusterIds to the get daily cloud cost using g e t params
func (o *GetDailyCloudCostUsingGETParams) WithClusterIds(clusterIds []string) *GetDailyCloudCostUsingGETParams {
	o.SetClusterIds(clusterIds)
	return o
}

// SetClusterIds adds the clusterIds to the get daily cloud cost using g e t params
func (o *GetDailyCloudCostUsingGETParams) SetClusterIds(clusterIds []string) {
	o.ClusterIds = clusterIds
}

// WithEnd adds the end to the get daily cloud cost using g e t params
func (o *GetDailyCloudCostUsingGETParams) WithEnd(end strfmt.Date) *GetDailyCloudCostUsingGETParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get daily cloud cost using g e t params
func (o *GetDailyCloudCostUsingGETParams) SetEnd(end strfmt.Date) {
	o.End = end
}

// WithStackName adds the stackName to the get daily cloud cost using g e t params
func (o *GetDailyCloudCostUsingGETParams) WithStackName(stackName string) *GetDailyCloudCostUsingGETParams {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the get daily cloud cost using g e t params
func (o *GetDailyCloudCostUsingGETParams) SetStackName(stackName string) {
	o.StackName = stackName
}

// WithStart adds the start to the get daily cloud cost using g e t params
func (o *GetDailyCloudCostUsingGETParams) WithStart(start strfmt.Date) *GetDailyCloudCostUsingGETParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get daily cloud cost using g e t params
func (o *GetDailyCloudCostUsingGETParams) SetStart(start strfmt.Date) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *GetDailyCloudCostUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterIds != nil {

		// binding items for clusterIds
		joinedClusterIds := o.bindParamClusterIds(reg)

		// query array param clusterIds
		if err := r.SetQueryParam("clusterIds", joinedClusterIds...); err != nil {
			return err
		}
	}

	// query param end
	qrEnd := o.End
	qEnd := qrEnd.String()
	if qEnd != "" {

		if err := r.SetQueryParam("end", qEnd); err != nil {
			return err
		}
	}

	// path param stackName
	if err := r.SetPathParam("stackName", o.StackName); err != nil {
		return err
	}

	// query param start
	qrStart := o.Start
	qStart := qrStart.String()
	if qStart != "" {

		if err := r.SetQueryParam("start", qStart); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetDailyCloudCostUsingGET binds the parameter clusterIds
func (o *GetDailyCloudCostUsingGETParams) bindParamClusterIds(formats strfmt.Registry) []string {
	clusterIdsIR := o.ClusterIds

	var clusterIdsIC []string
	for _, clusterIdsIIR := range clusterIdsIR { // explode []string

		clusterIdsIIV := clusterIdsIIR // string as string
		clusterIdsIC = append(clusterIdsIC, clusterIdsIIV)
	}

	// items.CollectionFormat: "multi"
	clusterIdsIS := swag.JoinByFormat(clusterIdsIC, "multi")

	return clusterIdsIS
}
