// Code generated by go-swagger; DO NOT EDIT.

package ui_cloud_cost_explorer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetDailyCloudCostReader is a Reader for the GetDailyCloudCost structure.
type GetDailyCloudCostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDailyCloudCostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDailyCloudCostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDailyCloudCostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDailyCloudCostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetDailyCloudCostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDailyCloudCostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost] getDailyCloudCost", response, response.Code())
	}
}

// NewGetDailyCloudCostOK creates a GetDailyCloudCostOK with default headers values
func NewGetDailyCloudCostOK() *GetDailyCloudCostOK {
	return &GetDailyCloudCostOK{}
}

/*
GetDailyCloudCostOK describes a response with status code 200, with default header values.

OK
*/
type GetDailyCloudCostOK struct {
	Payload *models.DailyCloudCostDTO
}

// IsSuccess returns true when this get daily cloud cost o k response has a 2xx status code
func (o *GetDailyCloudCostOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get daily cloud cost o k response has a 3xx status code
func (o *GetDailyCloudCostOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get daily cloud cost o k response has a 4xx status code
func (o *GetDailyCloudCostOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get daily cloud cost o k response has a 5xx status code
func (o *GetDailyCloudCostOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get daily cloud cost o k response a status code equal to that given
func (o *GetDailyCloudCostOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get daily cloud cost o k response
func (o *GetDailyCloudCostOK) Code() int {
	return 200
}

func (o *GetDailyCloudCostOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostOK %s", 200, payload)
}

func (o *GetDailyCloudCostOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostOK %s", 200, payload)
}

func (o *GetDailyCloudCostOK) GetPayload() *models.DailyCloudCostDTO {
	return o.Payload
}

func (o *GetDailyCloudCostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DailyCloudCostDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDailyCloudCostBadRequest creates a GetDailyCloudCostBadRequest with default headers values
func NewGetDailyCloudCostBadRequest() *GetDailyCloudCostBadRequest {
	return &GetDailyCloudCostBadRequest{}
}

/*
GetDailyCloudCostBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetDailyCloudCostBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get daily cloud cost bad request response has a 2xx status code
func (o *GetDailyCloudCostBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get daily cloud cost bad request response has a 3xx status code
func (o *GetDailyCloudCostBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get daily cloud cost bad request response has a 4xx status code
func (o *GetDailyCloudCostBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get daily cloud cost bad request response has a 5xx status code
func (o *GetDailyCloudCostBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get daily cloud cost bad request response a status code equal to that given
func (o *GetDailyCloudCostBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get daily cloud cost bad request response
func (o *GetDailyCloudCostBadRequest) Code() int {
	return 400
}

func (o *GetDailyCloudCostBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostBadRequest %s", 400, payload)
}

func (o *GetDailyCloudCostBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostBadRequest %s", 400, payload)
}

func (o *GetDailyCloudCostBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetDailyCloudCostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDailyCloudCostNotFound creates a GetDailyCloudCostNotFound with default headers values
func NewGetDailyCloudCostNotFound() *GetDailyCloudCostNotFound {
	return &GetDailyCloudCostNotFound{}
}

/*
GetDailyCloudCostNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetDailyCloudCostNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get daily cloud cost not found response has a 2xx status code
func (o *GetDailyCloudCostNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get daily cloud cost not found response has a 3xx status code
func (o *GetDailyCloudCostNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get daily cloud cost not found response has a 4xx status code
func (o *GetDailyCloudCostNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get daily cloud cost not found response has a 5xx status code
func (o *GetDailyCloudCostNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get daily cloud cost not found response a status code equal to that given
func (o *GetDailyCloudCostNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get daily cloud cost not found response
func (o *GetDailyCloudCostNotFound) Code() int {
	return 404
}

func (o *GetDailyCloudCostNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostNotFound %s", 404, payload)
}

func (o *GetDailyCloudCostNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostNotFound %s", 404, payload)
}

func (o *GetDailyCloudCostNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetDailyCloudCostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDailyCloudCostMethodNotAllowed creates a GetDailyCloudCostMethodNotAllowed with default headers values
func NewGetDailyCloudCostMethodNotAllowed() *GetDailyCloudCostMethodNotAllowed {
	return &GetDailyCloudCostMethodNotAllowed{}
}

/*
GetDailyCloudCostMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetDailyCloudCostMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get daily cloud cost method not allowed response has a 2xx status code
func (o *GetDailyCloudCostMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get daily cloud cost method not allowed response has a 3xx status code
func (o *GetDailyCloudCostMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get daily cloud cost method not allowed response has a 4xx status code
func (o *GetDailyCloudCostMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get daily cloud cost method not allowed response has a 5xx status code
func (o *GetDailyCloudCostMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get daily cloud cost method not allowed response a status code equal to that given
func (o *GetDailyCloudCostMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get daily cloud cost method not allowed response
func (o *GetDailyCloudCostMethodNotAllowed) Code() int {
	return 405
}

func (o *GetDailyCloudCostMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostMethodNotAllowed %s", 405, payload)
}

func (o *GetDailyCloudCostMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostMethodNotAllowed %s", 405, payload)
}

func (o *GetDailyCloudCostMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetDailyCloudCostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDailyCloudCostInternalServerError creates a GetDailyCloudCostInternalServerError with default headers values
func NewGetDailyCloudCostInternalServerError() *GetDailyCloudCostInternalServerError {
	return &GetDailyCloudCostInternalServerError{}
}

/*
GetDailyCloudCostInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetDailyCloudCostInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get daily cloud cost internal server error response has a 2xx status code
func (o *GetDailyCloudCostInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get daily cloud cost internal server error response has a 3xx status code
func (o *GetDailyCloudCostInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get daily cloud cost internal server error response has a 4xx status code
func (o *GetDailyCloudCostInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get daily cloud cost internal server error response has a 5xx status code
func (o *GetDailyCloudCostInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get daily cloud cost internal server error response a status code equal to that given
func (o *GetDailyCloudCostInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get daily cloud cost internal server error response
func (o *GetDailyCloudCostInternalServerError) Code() int {
	return 500
}

func (o *GetDailyCloudCostInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostInternalServerError %s", 500, payload)
}

func (o *GetDailyCloudCostInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/stack/{stackName}/daily-cost][%d] getDailyCloudCostInternalServerError %s", 500, payload)
}

func (o *GetDailyCloudCostInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetDailyCloudCostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
