// Code generated by go-swagger; DO NOT EDIT.

package ui_cloud_cost_explorer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// IsAwsCostExplorerEnabledReader is a Reader for the IsAwsCostExplorerEnabled structure.
type IsAwsCostExplorerEnabledReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IsAwsCostExplorerEnabledReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIsAwsCostExplorerEnabledOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewIsAwsCostExplorerEnabledBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewIsAwsCostExplorerEnabledNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewIsAwsCostExplorerEnabledMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewIsAwsCostExplorerEnabledInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/cost-explorer/aws/enabled] isAwsCostExplorerEnabled", response, response.Code())
	}
}

// NewIsAwsCostExplorerEnabledOK creates a IsAwsCostExplorerEnabledOK with default headers values
func NewIsAwsCostExplorerEnabledOK() *IsAwsCostExplorerEnabledOK {
	return &IsAwsCostExplorerEnabledOK{}
}

/*
IsAwsCostExplorerEnabledOK describes a response with status code 200, with default header values.

OK
*/
type IsAwsCostExplorerEnabledOK struct {
	Payload bool
}

// IsSuccess returns true when this is aws cost explorer enabled o k response has a 2xx status code
func (o *IsAwsCostExplorerEnabledOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this is aws cost explorer enabled o k response has a 3xx status code
func (o *IsAwsCostExplorerEnabledOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this is aws cost explorer enabled o k response has a 4xx status code
func (o *IsAwsCostExplorerEnabledOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this is aws cost explorer enabled o k response has a 5xx status code
func (o *IsAwsCostExplorerEnabledOK) IsServerError() bool {
	return false
}

// IsCode returns true when this is aws cost explorer enabled o k response a status code equal to that given
func (o *IsAwsCostExplorerEnabledOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the is aws cost explorer enabled o k response
func (o *IsAwsCostExplorerEnabledOK) Code() int {
	return 200
}

func (o *IsAwsCostExplorerEnabledOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledOK %s", 200, payload)
}

func (o *IsAwsCostExplorerEnabledOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledOK %s", 200, payload)
}

func (o *IsAwsCostExplorerEnabledOK) GetPayload() bool {
	return o.Payload
}

func (o *IsAwsCostExplorerEnabledOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIsAwsCostExplorerEnabledBadRequest creates a IsAwsCostExplorerEnabledBadRequest with default headers values
func NewIsAwsCostExplorerEnabledBadRequest() *IsAwsCostExplorerEnabledBadRequest {
	return &IsAwsCostExplorerEnabledBadRequest{}
}

/*
IsAwsCostExplorerEnabledBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type IsAwsCostExplorerEnabledBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this is aws cost explorer enabled bad request response has a 2xx status code
func (o *IsAwsCostExplorerEnabledBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this is aws cost explorer enabled bad request response has a 3xx status code
func (o *IsAwsCostExplorerEnabledBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this is aws cost explorer enabled bad request response has a 4xx status code
func (o *IsAwsCostExplorerEnabledBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this is aws cost explorer enabled bad request response has a 5xx status code
func (o *IsAwsCostExplorerEnabledBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this is aws cost explorer enabled bad request response a status code equal to that given
func (o *IsAwsCostExplorerEnabledBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the is aws cost explorer enabled bad request response
func (o *IsAwsCostExplorerEnabledBadRequest) Code() int {
	return 400
}

func (o *IsAwsCostExplorerEnabledBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledBadRequest %s", 400, payload)
}

func (o *IsAwsCostExplorerEnabledBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledBadRequest %s", 400, payload)
}

func (o *IsAwsCostExplorerEnabledBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *IsAwsCostExplorerEnabledBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIsAwsCostExplorerEnabledNotFound creates a IsAwsCostExplorerEnabledNotFound with default headers values
func NewIsAwsCostExplorerEnabledNotFound() *IsAwsCostExplorerEnabledNotFound {
	return &IsAwsCostExplorerEnabledNotFound{}
}

/*
IsAwsCostExplorerEnabledNotFound describes a response with status code 404, with default header values.

Not Found
*/
type IsAwsCostExplorerEnabledNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this is aws cost explorer enabled not found response has a 2xx status code
func (o *IsAwsCostExplorerEnabledNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this is aws cost explorer enabled not found response has a 3xx status code
func (o *IsAwsCostExplorerEnabledNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this is aws cost explorer enabled not found response has a 4xx status code
func (o *IsAwsCostExplorerEnabledNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this is aws cost explorer enabled not found response has a 5xx status code
func (o *IsAwsCostExplorerEnabledNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this is aws cost explorer enabled not found response a status code equal to that given
func (o *IsAwsCostExplorerEnabledNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the is aws cost explorer enabled not found response
func (o *IsAwsCostExplorerEnabledNotFound) Code() int {
	return 404
}

func (o *IsAwsCostExplorerEnabledNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledNotFound %s", 404, payload)
}

func (o *IsAwsCostExplorerEnabledNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledNotFound %s", 404, payload)
}

func (o *IsAwsCostExplorerEnabledNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *IsAwsCostExplorerEnabledNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIsAwsCostExplorerEnabledMethodNotAllowed creates a IsAwsCostExplorerEnabledMethodNotAllowed with default headers values
func NewIsAwsCostExplorerEnabledMethodNotAllowed() *IsAwsCostExplorerEnabledMethodNotAllowed {
	return &IsAwsCostExplorerEnabledMethodNotAllowed{}
}

/*
IsAwsCostExplorerEnabledMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type IsAwsCostExplorerEnabledMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this is aws cost explorer enabled method not allowed response has a 2xx status code
func (o *IsAwsCostExplorerEnabledMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this is aws cost explorer enabled method not allowed response has a 3xx status code
func (o *IsAwsCostExplorerEnabledMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this is aws cost explorer enabled method not allowed response has a 4xx status code
func (o *IsAwsCostExplorerEnabledMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this is aws cost explorer enabled method not allowed response has a 5xx status code
func (o *IsAwsCostExplorerEnabledMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this is aws cost explorer enabled method not allowed response a status code equal to that given
func (o *IsAwsCostExplorerEnabledMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the is aws cost explorer enabled method not allowed response
func (o *IsAwsCostExplorerEnabledMethodNotAllowed) Code() int {
	return 405
}

func (o *IsAwsCostExplorerEnabledMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledMethodNotAllowed %s", 405, payload)
}

func (o *IsAwsCostExplorerEnabledMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledMethodNotAllowed %s", 405, payload)
}

func (o *IsAwsCostExplorerEnabledMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *IsAwsCostExplorerEnabledMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIsAwsCostExplorerEnabledInternalServerError creates a IsAwsCostExplorerEnabledInternalServerError with default headers values
func NewIsAwsCostExplorerEnabledInternalServerError() *IsAwsCostExplorerEnabledInternalServerError {
	return &IsAwsCostExplorerEnabledInternalServerError{}
}

/*
IsAwsCostExplorerEnabledInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type IsAwsCostExplorerEnabledInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this is aws cost explorer enabled internal server error response has a 2xx status code
func (o *IsAwsCostExplorerEnabledInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this is aws cost explorer enabled internal server error response has a 3xx status code
func (o *IsAwsCostExplorerEnabledInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this is aws cost explorer enabled internal server error response has a 4xx status code
func (o *IsAwsCostExplorerEnabledInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this is aws cost explorer enabled internal server error response has a 5xx status code
func (o *IsAwsCostExplorerEnabledInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this is aws cost explorer enabled internal server error response a status code equal to that given
func (o *IsAwsCostExplorerEnabledInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the is aws cost explorer enabled internal server error response
func (o *IsAwsCostExplorerEnabledInternalServerError) Code() int {
	return 500
}

func (o *IsAwsCostExplorerEnabledInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledInternalServerError %s", 500, payload)
}

func (o *IsAwsCostExplorerEnabledInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledInternalServerError %s", 500, payload)
}

func (o *IsAwsCostExplorerEnabledInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *IsAwsCostExplorerEnabledInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
