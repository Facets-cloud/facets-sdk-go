// Code generated by go-swagger; DO NOT EDIT.

package ui_cloud_cost_explorer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// SyncCloudCostReader is a Reader for the SyncCloudCost structure.
type SyncCloudCostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SyncCloudCostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSyncCloudCostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSyncCloudCostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSyncCloudCostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewSyncCloudCostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSyncCloudCostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/cost-explorer/sync-cost] syncCloudCost", response, response.Code())
	}
}

// NewSyncCloudCostOK creates a SyncCloudCostOK with default headers values
func NewSyncCloudCostOK() *SyncCloudCostOK {
	return &SyncCloudCostOK{}
}

/*
SyncCloudCostOK describes a response with status code 200, with default header values.

OK
*/
type SyncCloudCostOK struct {
}

// IsSuccess returns true when this sync cloud cost o k response has a 2xx status code
func (o *SyncCloudCostOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this sync cloud cost o k response has a 3xx status code
func (o *SyncCloudCostOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync cloud cost o k response has a 4xx status code
func (o *SyncCloudCostOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this sync cloud cost o k response has a 5xx status code
func (o *SyncCloudCostOK) IsServerError() bool {
	return false
}

// IsCode returns true when this sync cloud cost o k response a status code equal to that given
func (o *SyncCloudCostOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the sync cloud cost o k response
func (o *SyncCloudCostOK) Code() int {
	return 200
}

func (o *SyncCloudCostOK) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/sync-cost][%d] syncCloudCostOK", 200)
}

func (o *SyncCloudCostOK) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/sync-cost][%d] syncCloudCostOK", 200)
}

func (o *SyncCloudCostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncCloudCostBadRequest creates a SyncCloudCostBadRequest with default headers values
func NewSyncCloudCostBadRequest() *SyncCloudCostBadRequest {
	return &SyncCloudCostBadRequest{}
}

/*
SyncCloudCostBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SyncCloudCostBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this sync cloud cost bad request response has a 2xx status code
func (o *SyncCloudCostBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync cloud cost bad request response has a 3xx status code
func (o *SyncCloudCostBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync cloud cost bad request response has a 4xx status code
func (o *SyncCloudCostBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync cloud cost bad request response has a 5xx status code
func (o *SyncCloudCostBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this sync cloud cost bad request response a status code equal to that given
func (o *SyncCloudCostBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the sync cloud cost bad request response
func (o *SyncCloudCostBadRequest) Code() int {
	return 400
}

func (o *SyncCloudCostBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/sync-cost][%d] syncCloudCostBadRequest %s", 400, payload)
}

func (o *SyncCloudCostBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/sync-cost][%d] syncCloudCostBadRequest %s", 400, payload)
}

func (o *SyncCloudCostBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SyncCloudCostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncCloudCostNotFound creates a SyncCloudCostNotFound with default headers values
func NewSyncCloudCostNotFound() *SyncCloudCostNotFound {
	return &SyncCloudCostNotFound{}
}

/*
SyncCloudCostNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SyncCloudCostNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this sync cloud cost not found response has a 2xx status code
func (o *SyncCloudCostNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync cloud cost not found response has a 3xx status code
func (o *SyncCloudCostNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync cloud cost not found response has a 4xx status code
func (o *SyncCloudCostNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync cloud cost not found response has a 5xx status code
func (o *SyncCloudCostNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this sync cloud cost not found response a status code equal to that given
func (o *SyncCloudCostNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the sync cloud cost not found response
func (o *SyncCloudCostNotFound) Code() int {
	return 404
}

func (o *SyncCloudCostNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/sync-cost][%d] syncCloudCostNotFound %s", 404, payload)
}

func (o *SyncCloudCostNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/sync-cost][%d] syncCloudCostNotFound %s", 404, payload)
}

func (o *SyncCloudCostNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SyncCloudCostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncCloudCostMethodNotAllowed creates a SyncCloudCostMethodNotAllowed with default headers values
func NewSyncCloudCostMethodNotAllowed() *SyncCloudCostMethodNotAllowed {
	return &SyncCloudCostMethodNotAllowed{}
}

/*
SyncCloudCostMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type SyncCloudCostMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this sync cloud cost method not allowed response has a 2xx status code
func (o *SyncCloudCostMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync cloud cost method not allowed response has a 3xx status code
func (o *SyncCloudCostMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync cloud cost method not allowed response has a 4xx status code
func (o *SyncCloudCostMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync cloud cost method not allowed response has a 5xx status code
func (o *SyncCloudCostMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this sync cloud cost method not allowed response a status code equal to that given
func (o *SyncCloudCostMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the sync cloud cost method not allowed response
func (o *SyncCloudCostMethodNotAllowed) Code() int {
	return 405
}

func (o *SyncCloudCostMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/sync-cost][%d] syncCloudCostMethodNotAllowed %s", 405, payload)
}

func (o *SyncCloudCostMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/sync-cost][%d] syncCloudCostMethodNotAllowed %s", 405, payload)
}

func (o *SyncCloudCostMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SyncCloudCostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncCloudCostInternalServerError creates a SyncCloudCostInternalServerError with default headers values
func NewSyncCloudCostInternalServerError() *SyncCloudCostInternalServerError {
	return &SyncCloudCostInternalServerError{}
}

/*
SyncCloudCostInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type SyncCloudCostInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this sync cloud cost internal server error response has a 2xx status code
func (o *SyncCloudCostInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync cloud cost internal server error response has a 3xx status code
func (o *SyncCloudCostInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync cloud cost internal server error response has a 4xx status code
func (o *SyncCloudCostInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this sync cloud cost internal server error response has a 5xx status code
func (o *SyncCloudCostInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this sync cloud cost internal server error response a status code equal to that given
func (o *SyncCloudCostInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the sync cloud cost internal server error response
func (o *SyncCloudCostInternalServerError) Code() int {
	return 500
}

func (o *SyncCloudCostInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/sync-cost][%d] syncCloudCostInternalServerError %s", 500, payload)
}

func (o *SyncCloudCostInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/sync-cost][%d] syncCloudCostInternalServerError %s", 500, payload)
}

func (o *SyncCloudCostInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SyncCloudCostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
