// Code generated by go-swagger; DO NOT EDIT.

package ui_cloud_cost_explorer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetDailyCloudCostParams creates a new GetDailyCloudCostParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDailyCloudCostParams() *GetDailyCloudCostParams {
	return &GetDailyCloudCostParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDailyCloudCostParamsWithTimeout creates a new GetDailyCloudCostParams object
// with the ability to set a timeout on a request.
func NewGetDailyCloudCostParamsWithTimeout(timeout time.Duration) *GetDailyCloudCostParams {
	return &GetDailyCloudCostParams{
		timeout: timeout,
	}
}

// NewGetDailyCloudCostParamsWithContext creates a new GetDailyCloudCostParams object
// with the ability to set a context for a request.
func NewGetDailyCloudCostParamsWithContext(ctx context.Context) *GetDailyCloudCostParams {
	return &GetDailyCloudCostParams{
		Context: ctx,
	}
}

// NewGetDailyCloudCostParamsWithHTTPClient creates a new GetDailyCloudCostParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetDailyCloudCostParamsWithHTTPClient(client *http.Client) *GetDailyCloudCostParams {
	return &GetDailyCloudCostParams{
		HTTPClient: client,
	}
}

/*
GetDailyCloudCostParams contains all the parameters to send to the API endpoint

	for the get daily cloud cost operation.

	Typically these are written to a http.Request.
*/
type GetDailyCloudCostParams struct {

	// ClusterIds.
	ClusterIds *string

	// End.
	End string

	// StackName.
	StackName string

	// Start.
	Start string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get daily cloud cost params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDailyCloudCostParams) WithDefaults() *GetDailyCloudCostParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get daily cloud cost params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDailyCloudCostParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get daily cloud cost params
func (o *GetDailyCloudCostParams) WithTimeout(timeout time.Duration) *GetDailyCloudCostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get daily cloud cost params
func (o *GetDailyCloudCostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get daily cloud cost params
func (o *GetDailyCloudCostParams) WithContext(ctx context.Context) *GetDailyCloudCostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get daily cloud cost params
func (o *GetDailyCloudCostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get daily cloud cost params
func (o *GetDailyCloudCostParams) WithHTTPClient(client *http.Client) *GetDailyCloudCostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get daily cloud cost params
func (o *GetDailyCloudCostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterIds adds the clusterIds to the get daily cloud cost params
func (o *GetDailyCloudCostParams) WithClusterIds(clusterIds *string) *GetDailyCloudCostParams {
	o.SetClusterIds(clusterIds)
	return o
}

// SetClusterIds adds the clusterIds to the get daily cloud cost params
func (o *GetDailyCloudCostParams) SetClusterIds(clusterIds *string) {
	o.ClusterIds = clusterIds
}

// WithEnd adds the end to the get daily cloud cost params
func (o *GetDailyCloudCostParams) WithEnd(end string) *GetDailyCloudCostParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get daily cloud cost params
func (o *GetDailyCloudCostParams) SetEnd(end string) {
	o.End = end
}

// WithStackName adds the stackName to the get daily cloud cost params
func (o *GetDailyCloudCostParams) WithStackName(stackName string) *GetDailyCloudCostParams {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the get daily cloud cost params
func (o *GetDailyCloudCostParams) SetStackName(stackName string) {
	o.StackName = stackName
}

// WithStart adds the start to the get daily cloud cost params
func (o *GetDailyCloudCostParams) WithStart(start string) *GetDailyCloudCostParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get daily cloud cost params
func (o *GetDailyCloudCostParams) SetStart(start string) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *GetDailyCloudCostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterIds != nil {

		// query param clusterIds
		var qrClusterIds string

		if o.ClusterIds != nil {
			qrClusterIds = *o.ClusterIds
		}
		qClusterIds := qrClusterIds
		if qClusterIds != "" {

			if err := r.SetQueryParam("clusterIds", qClusterIds); err != nil {
				return err
			}
		}
	}

	// query param end
	qrEnd := o.End
	qEnd := qrEnd
	if qEnd != "" {

		if err := r.SetQueryParam("end", qEnd); err != nil {
			return err
		}
	}

	// path param stackName
	if err := r.SetPathParam("stackName", o.StackName); err != nil {
		return err
	}

	// query param start
	qrStart := o.Start
	qStart := qrStart
	if qStart != "" {

		if err := r.SetQueryParam("start", qStart); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
