// Code generated by go-swagger; DO NOT EDIT.

package ui_cloud_cost_explorer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// IsAwsCostExplorerEnabledUsingGETReader is a Reader for the IsAwsCostExplorerEnabledUsingGET structure.
type IsAwsCostExplorerEnabledUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IsAwsCostExplorerEnabledUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIsAwsCostExplorerEnabledUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewIsAwsCostExplorerEnabledUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewIsAwsCostExplorerEnabledUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewIsAwsCostExplorerEnabledUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/cost-explorer/aws/enabled] isAwsCostExplorerEnabledUsingGET", response, response.Code())
	}
}

// NewIsAwsCostExplorerEnabledUsingGETOK creates a IsAwsCostExplorerEnabledUsingGETOK with default headers values
func NewIsAwsCostExplorerEnabledUsingGETOK() *IsAwsCostExplorerEnabledUsingGETOK {
	return &IsAwsCostExplorerEnabledUsingGETOK{}
}

/*
IsAwsCostExplorerEnabledUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type IsAwsCostExplorerEnabledUsingGETOK struct {
	Payload bool
}

// IsSuccess returns true when this is aws cost explorer enabled using g e t o k response has a 2xx status code
func (o *IsAwsCostExplorerEnabledUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this is aws cost explorer enabled using g e t o k response has a 3xx status code
func (o *IsAwsCostExplorerEnabledUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this is aws cost explorer enabled using g e t o k response has a 4xx status code
func (o *IsAwsCostExplorerEnabledUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this is aws cost explorer enabled using g e t o k response has a 5xx status code
func (o *IsAwsCostExplorerEnabledUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this is aws cost explorer enabled using g e t o k response a status code equal to that given
func (o *IsAwsCostExplorerEnabledUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the is aws cost explorer enabled using g e t o k response
func (o *IsAwsCostExplorerEnabledUsingGETOK) Code() int {
	return 200
}

func (o *IsAwsCostExplorerEnabledUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledUsingGETOK %s", 200, payload)
}

func (o *IsAwsCostExplorerEnabledUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledUsingGETOK %s", 200, payload)
}

func (o *IsAwsCostExplorerEnabledUsingGETOK) GetPayload() bool {
	return o.Payload
}

func (o *IsAwsCostExplorerEnabledUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIsAwsCostExplorerEnabledUsingGETUnauthorized creates a IsAwsCostExplorerEnabledUsingGETUnauthorized with default headers values
func NewIsAwsCostExplorerEnabledUsingGETUnauthorized() *IsAwsCostExplorerEnabledUsingGETUnauthorized {
	return &IsAwsCostExplorerEnabledUsingGETUnauthorized{}
}

/*
IsAwsCostExplorerEnabledUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type IsAwsCostExplorerEnabledUsingGETUnauthorized struct {
}

// IsSuccess returns true when this is aws cost explorer enabled using g e t unauthorized response has a 2xx status code
func (o *IsAwsCostExplorerEnabledUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this is aws cost explorer enabled using g e t unauthorized response has a 3xx status code
func (o *IsAwsCostExplorerEnabledUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this is aws cost explorer enabled using g e t unauthorized response has a 4xx status code
func (o *IsAwsCostExplorerEnabledUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this is aws cost explorer enabled using g e t unauthorized response has a 5xx status code
func (o *IsAwsCostExplorerEnabledUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this is aws cost explorer enabled using g e t unauthorized response a status code equal to that given
func (o *IsAwsCostExplorerEnabledUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the is aws cost explorer enabled using g e t unauthorized response
func (o *IsAwsCostExplorerEnabledUsingGETUnauthorized) Code() int {
	return 401
}

func (o *IsAwsCostExplorerEnabledUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledUsingGETUnauthorized", 401)
}

func (o *IsAwsCostExplorerEnabledUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledUsingGETUnauthorized", 401)
}

func (o *IsAwsCostExplorerEnabledUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIsAwsCostExplorerEnabledUsingGETForbidden creates a IsAwsCostExplorerEnabledUsingGETForbidden with default headers values
func NewIsAwsCostExplorerEnabledUsingGETForbidden() *IsAwsCostExplorerEnabledUsingGETForbidden {
	return &IsAwsCostExplorerEnabledUsingGETForbidden{}
}

/*
IsAwsCostExplorerEnabledUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type IsAwsCostExplorerEnabledUsingGETForbidden struct {
}

// IsSuccess returns true when this is aws cost explorer enabled using g e t forbidden response has a 2xx status code
func (o *IsAwsCostExplorerEnabledUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this is aws cost explorer enabled using g e t forbidden response has a 3xx status code
func (o *IsAwsCostExplorerEnabledUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this is aws cost explorer enabled using g e t forbidden response has a 4xx status code
func (o *IsAwsCostExplorerEnabledUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this is aws cost explorer enabled using g e t forbidden response has a 5xx status code
func (o *IsAwsCostExplorerEnabledUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this is aws cost explorer enabled using g e t forbidden response a status code equal to that given
func (o *IsAwsCostExplorerEnabledUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the is aws cost explorer enabled using g e t forbidden response
func (o *IsAwsCostExplorerEnabledUsingGETForbidden) Code() int {
	return 403
}

func (o *IsAwsCostExplorerEnabledUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledUsingGETForbidden", 403)
}

func (o *IsAwsCostExplorerEnabledUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledUsingGETForbidden", 403)
}

func (o *IsAwsCostExplorerEnabledUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIsAwsCostExplorerEnabledUsingGETNotFound creates a IsAwsCostExplorerEnabledUsingGETNotFound with default headers values
func NewIsAwsCostExplorerEnabledUsingGETNotFound() *IsAwsCostExplorerEnabledUsingGETNotFound {
	return &IsAwsCostExplorerEnabledUsingGETNotFound{}
}

/*
IsAwsCostExplorerEnabledUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type IsAwsCostExplorerEnabledUsingGETNotFound struct {
}

// IsSuccess returns true when this is aws cost explorer enabled using g e t not found response has a 2xx status code
func (o *IsAwsCostExplorerEnabledUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this is aws cost explorer enabled using g e t not found response has a 3xx status code
func (o *IsAwsCostExplorerEnabledUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this is aws cost explorer enabled using g e t not found response has a 4xx status code
func (o *IsAwsCostExplorerEnabledUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this is aws cost explorer enabled using g e t not found response has a 5xx status code
func (o *IsAwsCostExplorerEnabledUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this is aws cost explorer enabled using g e t not found response a status code equal to that given
func (o *IsAwsCostExplorerEnabledUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the is aws cost explorer enabled using g e t not found response
func (o *IsAwsCostExplorerEnabledUsingGETNotFound) Code() int {
	return 404
}

func (o *IsAwsCostExplorerEnabledUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledUsingGETNotFound", 404)
}

func (o *IsAwsCostExplorerEnabledUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/cost-explorer/aws/enabled][%d] isAwsCostExplorerEnabledUsingGETNotFound", 404)
}

func (o *IsAwsCostExplorerEnabledUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
