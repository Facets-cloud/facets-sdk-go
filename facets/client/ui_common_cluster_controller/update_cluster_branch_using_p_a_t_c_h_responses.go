// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateClusterBranchUsingPATCHReader is a Reader for the UpdateClusterBranchUsingPATCH structure.
type UpdateClusterBranchUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateClusterBranchUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateClusterBranchUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateClusterBranchUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateClusterBranchUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateClusterBranchUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /cc-ui/v1/clusters/{clusterId}/branch] updateClusterBranchUsingPATCH", response, response.Code())
	}
}

// NewUpdateClusterBranchUsingPATCHOK creates a UpdateClusterBranchUsingPATCHOK with default headers values
func NewUpdateClusterBranchUsingPATCHOK() *UpdateClusterBranchUsingPATCHOK {
	return &UpdateClusterBranchUsingPATCHOK{}
}

/*
UpdateClusterBranchUsingPATCHOK describes a response with status code 200, with default header values.

OK
*/
type UpdateClusterBranchUsingPATCHOK struct {
	Payload *models.AbstractCluster
}

// IsSuccess returns true when this update cluster branch using p a t c h o k response has a 2xx status code
func (o *UpdateClusterBranchUsingPATCHOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update cluster branch using p a t c h o k response has a 3xx status code
func (o *UpdateClusterBranchUsingPATCHOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster branch using p a t c h o k response has a 4xx status code
func (o *UpdateClusterBranchUsingPATCHOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update cluster branch using p a t c h o k response has a 5xx status code
func (o *UpdateClusterBranchUsingPATCHOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster branch using p a t c h o k response a status code equal to that given
func (o *UpdateClusterBranchUsingPATCHOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update cluster branch using p a t c h o k response
func (o *UpdateClusterBranchUsingPATCHOK) Code() int {
	return 200
}

func (o *UpdateClusterBranchUsingPATCHOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/clusters/{clusterId}/branch][%d] updateClusterBranchUsingPATCHOK %s", 200, payload)
}

func (o *UpdateClusterBranchUsingPATCHOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /cc-ui/v1/clusters/{clusterId}/branch][%d] updateClusterBranchUsingPATCHOK %s", 200, payload)
}

func (o *UpdateClusterBranchUsingPATCHOK) GetPayload() *models.AbstractCluster {
	return o.Payload
}

func (o *UpdateClusterBranchUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AbstractCluster)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClusterBranchUsingPATCHNoContent creates a UpdateClusterBranchUsingPATCHNoContent with default headers values
func NewUpdateClusterBranchUsingPATCHNoContent() *UpdateClusterBranchUsingPATCHNoContent {
	return &UpdateClusterBranchUsingPATCHNoContent{}
}

/*
UpdateClusterBranchUsingPATCHNoContent describes a response with status code 204, with default header values.

No Content
*/
type UpdateClusterBranchUsingPATCHNoContent struct {
}

// IsSuccess returns true when this update cluster branch using p a t c h no content response has a 2xx status code
func (o *UpdateClusterBranchUsingPATCHNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update cluster branch using p a t c h no content response has a 3xx status code
func (o *UpdateClusterBranchUsingPATCHNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster branch using p a t c h no content response has a 4xx status code
func (o *UpdateClusterBranchUsingPATCHNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update cluster branch using p a t c h no content response has a 5xx status code
func (o *UpdateClusterBranchUsingPATCHNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster branch using p a t c h no content response a status code equal to that given
func (o *UpdateClusterBranchUsingPATCHNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update cluster branch using p a t c h no content response
func (o *UpdateClusterBranchUsingPATCHNoContent) Code() int {
	return 204
}

func (o *UpdateClusterBranchUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/clusters/{clusterId}/branch][%d] updateClusterBranchUsingPATCHNoContent", 204)
}

func (o *UpdateClusterBranchUsingPATCHNoContent) String() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/clusters/{clusterId}/branch][%d] updateClusterBranchUsingPATCHNoContent", 204)
}

func (o *UpdateClusterBranchUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateClusterBranchUsingPATCHUnauthorized creates a UpdateClusterBranchUsingPATCHUnauthorized with default headers values
func NewUpdateClusterBranchUsingPATCHUnauthorized() *UpdateClusterBranchUsingPATCHUnauthorized {
	return &UpdateClusterBranchUsingPATCHUnauthorized{}
}

/*
UpdateClusterBranchUsingPATCHUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateClusterBranchUsingPATCHUnauthorized struct {
}

// IsSuccess returns true when this update cluster branch using p a t c h unauthorized response has a 2xx status code
func (o *UpdateClusterBranchUsingPATCHUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cluster branch using p a t c h unauthorized response has a 3xx status code
func (o *UpdateClusterBranchUsingPATCHUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster branch using p a t c h unauthorized response has a 4xx status code
func (o *UpdateClusterBranchUsingPATCHUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cluster branch using p a t c h unauthorized response has a 5xx status code
func (o *UpdateClusterBranchUsingPATCHUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster branch using p a t c h unauthorized response a status code equal to that given
func (o *UpdateClusterBranchUsingPATCHUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update cluster branch using p a t c h unauthorized response
func (o *UpdateClusterBranchUsingPATCHUnauthorized) Code() int {
	return 401
}

func (o *UpdateClusterBranchUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/clusters/{clusterId}/branch][%d] updateClusterBranchUsingPATCHUnauthorized", 401)
}

func (o *UpdateClusterBranchUsingPATCHUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/clusters/{clusterId}/branch][%d] updateClusterBranchUsingPATCHUnauthorized", 401)
}

func (o *UpdateClusterBranchUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateClusterBranchUsingPATCHForbidden creates a UpdateClusterBranchUsingPATCHForbidden with default headers values
func NewUpdateClusterBranchUsingPATCHForbidden() *UpdateClusterBranchUsingPATCHForbidden {
	return &UpdateClusterBranchUsingPATCHForbidden{}
}

/*
UpdateClusterBranchUsingPATCHForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateClusterBranchUsingPATCHForbidden struct {
}

// IsSuccess returns true when this update cluster branch using p a t c h forbidden response has a 2xx status code
func (o *UpdateClusterBranchUsingPATCHForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cluster branch using p a t c h forbidden response has a 3xx status code
func (o *UpdateClusterBranchUsingPATCHForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster branch using p a t c h forbidden response has a 4xx status code
func (o *UpdateClusterBranchUsingPATCHForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cluster branch using p a t c h forbidden response has a 5xx status code
func (o *UpdateClusterBranchUsingPATCHForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster branch using p a t c h forbidden response a status code equal to that given
func (o *UpdateClusterBranchUsingPATCHForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update cluster branch using p a t c h forbidden response
func (o *UpdateClusterBranchUsingPATCHForbidden) Code() int {
	return 403
}

func (o *UpdateClusterBranchUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/clusters/{clusterId}/branch][%d] updateClusterBranchUsingPATCHForbidden", 403)
}

func (o *UpdateClusterBranchUsingPATCHForbidden) String() string {
	return fmt.Sprintf("[PATCH /cc-ui/v1/clusters/{clusterId}/branch][%d] updateClusterBranchUsingPATCHForbidden", 403)
}

func (o *UpdateClusterBranchUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
