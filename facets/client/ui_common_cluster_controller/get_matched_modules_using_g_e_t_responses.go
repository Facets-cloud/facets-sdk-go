// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetMatchedModulesUsingGETReader is a Reader for the GetMatchedModulesUsingGET structure.
type GetMatchedModulesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMatchedModulesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMatchedModulesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetMatchedModulesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetMatchedModulesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetMatchedModulesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/match-modules] getMatchedModulesUsingGET", response, response.Code())
	}
}

// NewGetMatchedModulesUsingGETOK creates a GetMatchedModulesUsingGETOK with default headers values
func NewGetMatchedModulesUsingGETOK() *GetMatchedModulesUsingGETOK {
	return &GetMatchedModulesUsingGETOK{}
}

/*
GetMatchedModulesUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetMatchedModulesUsingGETOK struct {
	Payload *models.MatchedModuleDTO
}

// IsSuccess returns true when this get matched modules using g e t o k response has a 2xx status code
func (o *GetMatchedModulesUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get matched modules using g e t o k response has a 3xx status code
func (o *GetMatchedModulesUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get matched modules using g e t o k response has a 4xx status code
func (o *GetMatchedModulesUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get matched modules using g e t o k response has a 5xx status code
func (o *GetMatchedModulesUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get matched modules using g e t o k response a status code equal to that given
func (o *GetMatchedModulesUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get matched modules using g e t o k response
func (o *GetMatchedModulesUsingGETOK) Code() int {
	return 200
}

func (o *GetMatchedModulesUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/match-modules][%d] getMatchedModulesUsingGETOK %s", 200, payload)
}

func (o *GetMatchedModulesUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/match-modules][%d] getMatchedModulesUsingGETOK %s", 200, payload)
}

func (o *GetMatchedModulesUsingGETOK) GetPayload() *models.MatchedModuleDTO {
	return o.Payload
}

func (o *GetMatchedModulesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MatchedModuleDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMatchedModulesUsingGETUnauthorized creates a GetMatchedModulesUsingGETUnauthorized with default headers values
func NewGetMatchedModulesUsingGETUnauthorized() *GetMatchedModulesUsingGETUnauthorized {
	return &GetMatchedModulesUsingGETUnauthorized{}
}

/*
GetMatchedModulesUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetMatchedModulesUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get matched modules using g e t unauthorized response has a 2xx status code
func (o *GetMatchedModulesUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get matched modules using g e t unauthorized response has a 3xx status code
func (o *GetMatchedModulesUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get matched modules using g e t unauthorized response has a 4xx status code
func (o *GetMatchedModulesUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get matched modules using g e t unauthorized response has a 5xx status code
func (o *GetMatchedModulesUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get matched modules using g e t unauthorized response a status code equal to that given
func (o *GetMatchedModulesUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get matched modules using g e t unauthorized response
func (o *GetMatchedModulesUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetMatchedModulesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/match-modules][%d] getMatchedModulesUsingGETUnauthorized", 401)
}

func (o *GetMatchedModulesUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/match-modules][%d] getMatchedModulesUsingGETUnauthorized", 401)
}

func (o *GetMatchedModulesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetMatchedModulesUsingGETForbidden creates a GetMatchedModulesUsingGETForbidden with default headers values
func NewGetMatchedModulesUsingGETForbidden() *GetMatchedModulesUsingGETForbidden {
	return &GetMatchedModulesUsingGETForbidden{}
}

/*
GetMatchedModulesUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetMatchedModulesUsingGETForbidden struct {
}

// IsSuccess returns true when this get matched modules using g e t forbidden response has a 2xx status code
func (o *GetMatchedModulesUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get matched modules using g e t forbidden response has a 3xx status code
func (o *GetMatchedModulesUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get matched modules using g e t forbidden response has a 4xx status code
func (o *GetMatchedModulesUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get matched modules using g e t forbidden response has a 5xx status code
func (o *GetMatchedModulesUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get matched modules using g e t forbidden response a status code equal to that given
func (o *GetMatchedModulesUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get matched modules using g e t forbidden response
func (o *GetMatchedModulesUsingGETForbidden) Code() int {
	return 403
}

func (o *GetMatchedModulesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/match-modules][%d] getMatchedModulesUsingGETForbidden", 403)
}

func (o *GetMatchedModulesUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/match-modules][%d] getMatchedModulesUsingGETForbidden", 403)
}

func (o *GetMatchedModulesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetMatchedModulesUsingGETNotFound creates a GetMatchedModulesUsingGETNotFound with default headers values
func NewGetMatchedModulesUsingGETNotFound() *GetMatchedModulesUsingGETNotFound {
	return &GetMatchedModulesUsingGETNotFound{}
}

/*
GetMatchedModulesUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetMatchedModulesUsingGETNotFound struct {
}

// IsSuccess returns true when this get matched modules using g e t not found response has a 2xx status code
func (o *GetMatchedModulesUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get matched modules using g e t not found response has a 3xx status code
func (o *GetMatchedModulesUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get matched modules using g e t not found response has a 4xx status code
func (o *GetMatchedModulesUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get matched modules using g e t not found response has a 5xx status code
func (o *GetMatchedModulesUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get matched modules using g e t not found response a status code equal to that given
func (o *GetMatchedModulesUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get matched modules using g e t not found response
func (o *GetMatchedModulesUsingGETNotFound) Code() int {
	return 404
}

func (o *GetMatchedModulesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/match-modules][%d] getMatchedModulesUsingGETNotFound", 404)
}

func (o *GetMatchedModulesUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/match-modules][%d] getMatchedModulesUsingGETNotFound", 404)
}

func (o *GetMatchedModulesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
