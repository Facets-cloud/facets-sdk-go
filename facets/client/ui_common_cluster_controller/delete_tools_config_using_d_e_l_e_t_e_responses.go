// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteToolsConfigUsingDELETEReader is a Reader for the DeleteToolsConfigUsingDELETE structure.
type DeleteToolsConfigUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteToolsConfigUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteToolsConfigUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteToolsConfigUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteToolsConfigUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteToolsConfigUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/clusters/{clusterId}/tools-config] deleteToolsConfigUsingDELETE", response, response.Code())
	}
}

// NewDeleteToolsConfigUsingDELETEOK creates a DeleteToolsConfigUsingDELETEOK with default headers values
func NewDeleteToolsConfigUsingDELETEOK() *DeleteToolsConfigUsingDELETEOK {
	return &DeleteToolsConfigUsingDELETEOK{}
}

/*
DeleteToolsConfigUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteToolsConfigUsingDELETEOK struct {
}

// IsSuccess returns true when this delete tools config using d e l e t e o k response has a 2xx status code
func (o *DeleteToolsConfigUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete tools config using d e l e t e o k response has a 3xx status code
func (o *DeleteToolsConfigUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete tools config using d e l e t e o k response has a 4xx status code
func (o *DeleteToolsConfigUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete tools config using d e l e t e o k response has a 5xx status code
func (o *DeleteToolsConfigUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete tools config using d e l e t e o k response a status code equal to that given
func (o *DeleteToolsConfigUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete tools config using d e l e t e o k response
func (o *DeleteToolsConfigUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteToolsConfigUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/tools-config][%d] deleteToolsConfigUsingDELETEOK", 200)
}

func (o *DeleteToolsConfigUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/tools-config][%d] deleteToolsConfigUsingDELETEOK", 200)
}

func (o *DeleteToolsConfigUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteToolsConfigUsingDELETENoContent creates a DeleteToolsConfigUsingDELETENoContent with default headers values
func NewDeleteToolsConfigUsingDELETENoContent() *DeleteToolsConfigUsingDELETENoContent {
	return &DeleteToolsConfigUsingDELETENoContent{}
}

/*
DeleteToolsConfigUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteToolsConfigUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete tools config using d e l e t e no content response has a 2xx status code
func (o *DeleteToolsConfigUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete tools config using d e l e t e no content response has a 3xx status code
func (o *DeleteToolsConfigUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete tools config using d e l e t e no content response has a 4xx status code
func (o *DeleteToolsConfigUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete tools config using d e l e t e no content response has a 5xx status code
func (o *DeleteToolsConfigUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete tools config using d e l e t e no content response a status code equal to that given
func (o *DeleteToolsConfigUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete tools config using d e l e t e no content response
func (o *DeleteToolsConfigUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteToolsConfigUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/tools-config][%d] deleteToolsConfigUsingDELETENoContent", 204)
}

func (o *DeleteToolsConfigUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/tools-config][%d] deleteToolsConfigUsingDELETENoContent", 204)
}

func (o *DeleteToolsConfigUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteToolsConfigUsingDELETEUnauthorized creates a DeleteToolsConfigUsingDELETEUnauthorized with default headers values
func NewDeleteToolsConfigUsingDELETEUnauthorized() *DeleteToolsConfigUsingDELETEUnauthorized {
	return &DeleteToolsConfigUsingDELETEUnauthorized{}
}

/*
DeleteToolsConfigUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteToolsConfigUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete tools config using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteToolsConfigUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete tools config using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteToolsConfigUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete tools config using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteToolsConfigUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete tools config using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteToolsConfigUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete tools config using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteToolsConfigUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete tools config using d e l e t e unauthorized response
func (o *DeleteToolsConfigUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteToolsConfigUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/tools-config][%d] deleteToolsConfigUsingDELETEUnauthorized", 401)
}

func (o *DeleteToolsConfigUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/tools-config][%d] deleteToolsConfigUsingDELETEUnauthorized", 401)
}

func (o *DeleteToolsConfigUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteToolsConfigUsingDELETEForbidden creates a DeleteToolsConfigUsingDELETEForbidden with default headers values
func NewDeleteToolsConfigUsingDELETEForbidden() *DeleteToolsConfigUsingDELETEForbidden {
	return &DeleteToolsConfigUsingDELETEForbidden{}
}

/*
DeleteToolsConfigUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteToolsConfigUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete tools config using d e l e t e forbidden response has a 2xx status code
func (o *DeleteToolsConfigUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete tools config using d e l e t e forbidden response has a 3xx status code
func (o *DeleteToolsConfigUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete tools config using d e l e t e forbidden response has a 4xx status code
func (o *DeleteToolsConfigUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete tools config using d e l e t e forbidden response has a 5xx status code
func (o *DeleteToolsConfigUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete tools config using d e l e t e forbidden response a status code equal to that given
func (o *DeleteToolsConfigUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete tools config using d e l e t e forbidden response
func (o *DeleteToolsConfigUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteToolsConfigUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/tools-config][%d] deleteToolsConfigUsingDELETEForbidden", 403)
}

func (o *DeleteToolsConfigUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/tools-config][%d] deleteToolsConfigUsingDELETEForbidden", 403)
}

func (o *DeleteToolsConfigUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
