// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui common cluster controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui common cluster controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui common cluster controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui common cluster controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddClusterSchedules(params *AddClusterSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddClusterSchedulesOK, error)

	AddToolsConfig(params *AddToolsConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddToolsConfigOK, error)

	AttachImage(params *AttachImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AttachImageOK, error)

	BulkEnableDisableResources(params *BulkEnableDisableResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEnableDisableResourcesOK, error)

	CopyConfigurationsSelective(params *CopyConfigurationsSelectiveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CopyConfigurationsSelectiveOK, error)

	CreateAvailabilitySchedule(params *CreateAvailabilityScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAvailabilityScheduleOK, error)

	CreateDraftCluster1(params *CreateDraftCluster1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDraftCluster1OK, error)

	CreateTemplateInputs(params *CreateTemplateInputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTemplateInputsOK, error)

	DeleteAvailabilitySchedule(params *DeleteAvailabilityScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAvailabilityScheduleOK, error)

	DeleteCluster(params *DeleteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterOK, error)

	DeleteClusterForce(params *DeleteClusterForceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterForceOK, error)

	DeleteClusterSchedule(params *DeleteClusterScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterScheduleOK, error)

	DeleteOverrides(params *DeleteOverridesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOverridesOK, error)

	DeleteTemplateInputs(params *DeleteTemplateInputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTemplateInputsOK, error)

	DeleteToolsConfig(params *DeleteToolsConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteToolsConfigOK, error)

	DetachImage(params *DetachImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetachImageOK, error)

	EditToolsConfig(params *EditToolsConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditToolsConfigOK, error)

	GetAlerts(params *GetAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertsOK, error)

	GetAllTemplateInputs(params *GetAllTemplateInputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllTemplateInputsOK, error)

	GetAvailabilitySchedules(params *GetAvailabilitySchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAvailabilitySchedulesOK, error)

	GetClusterCommon(params *GetClusterCommonParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterCommonOK, error)

	GetClusterInfo(params *GetClusterInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterInfoOK, error)

	GetClusterMetadata(params *GetClusterMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterMetadataOK, error)

	GetClusterSchedules(params *GetClusterSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterSchedulesOK, error)

	GetK8sCredentials(params *GetK8sCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetK8sCredentialsOK, error)

	GetKubeConfig(params *GetKubeConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubeConfigOK, error)

	GetMatchedModules(params *GetMatchedModulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMatchedModulesOK, error)

	GetNamespacesInUseByDependentClusters1(params *GetNamespacesInUseByDependentClusters1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespacesInUseByDependentClusters1OK, error)

	GetOpenAlerts(params *GetOpenAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOpenAlertsOK, error)

	GetOverrides1(params *GetOverrides1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOverrides1OK, error)

	GetProvidedResources(params *GetProvidedResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProvidedResourcesOK, error)

	GetReleaseImpacts(params *GetReleaseImpactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReleaseImpactsOK, error)

	GetResourceStats(params *GetResourceStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceStatsOK, error)

	GetTemplateInputByUID(params *GetTemplateInputByUIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTemplateInputByUIDOK, error)

	GetTemplateInputs(params *GetTemplateInputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTemplateInputsOK, error)

	GetToolsConfig(params *GetToolsConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetToolsConfigOK, error)

	GetVPNProfile(params *GetVPNProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVPNProfileOK, error)

	GetVariableCounts(params *GetVariableCountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVariableCountsOK, error)

	GetVars(params *GetVarsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVarsOK, error)

	GetVarsWithSecrets(params *GetVarsWithSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVarsWithSecretsOK, error)

	GetVarsWithStatus(params *GetVarsWithStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVarsWithStatusOK, error)

	OverrideSizing(params *OverrideSizingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideSizingOK, error)

	PauseRelease(params *PauseReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PauseReleaseOK, error)

	RefreshKubeConfig(params *RefreshKubeConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshKubeConfigOK, error)

	RemoveSilence(params *RemoveSilenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveSilenceOK, error)

	ResourceDetails(params *ResourceDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceDetailsOK, error)

	SetClusterCode(params *SetClusterCodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetClusterCodeOK, error)

	SilenceAlerts(params *SilenceAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SilenceAlertsOK, error)

	UpdateAvailabilitySchedules(params *UpdateAvailabilitySchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAvailabilitySchedulesOK, error)

	UpdateClusterBranch(params *UpdateClusterBranchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClusterBranchOK, error)

	UpdateClusterSchedules(params *UpdateClusterSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClusterSchedulesOK, error)

	UpdateDraftCluster(params *UpdateDraftClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDraftClusterOK, error)

	UpdateTemplateInput(params *UpdateTemplateInputParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTemplateInputOK, error)

	UpsertProvidedResources(params *UpsertProvidedResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpsertProvidedResourcesOK, error)

	UpsertVars(params *UpsertVarsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpsertVarsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddClusterSchedules add cluster schedules API
*/
func (a *Client) AddClusterSchedules(params *AddClusterSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddClusterSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddClusterSchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addClusterSchedules",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddClusterSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddClusterSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addClusterSchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddToolsConfig add tools config API
*/
func (a *Client) AddToolsConfig(params *AddToolsConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddToolsConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddToolsConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addToolsConfig",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/tools-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddToolsConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddToolsConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addToolsConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AttachImage attach image API
*/
func (a *Client) AttachImage(params *AttachImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AttachImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "attachImage",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/attach-image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AttachImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttachImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for attachImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkEnableDisableResources bulk enable disable resources API
*/
func (a *Client) BulkEnableDisableResources(params *BulkEnableDisableResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEnableDisableResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkEnableDisableResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "bulkEnableDisableResources",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resource-enable-disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BulkEnableDisableResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkEnableDisableResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bulkEnableDisableResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CopyConfigurationsSelective copies configurations from one cluster to another selectively

Copies configurations from the source cluster to the target cluster. When mode is INCLUDE: Only specified configuration types are copied. When mode is EXCLUDE: All configuration types are copied except the specified ones.
*/
func (a *Client) CopyConfigurationsSelective(params *CopyConfigurationsSelectiveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CopyConfigurationsSelectiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCopyConfigurationsSelectiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "copyConfigurationsSelective",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/copy-configurations-selective",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CopyConfigurationsSelectiveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CopyConfigurationsSelectiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for copyConfigurationsSelective: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAvailabilitySchedule create availability schedule API
*/
func (a *Client) CreateAvailabilitySchedule(params *CreateAvailabilityScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAvailabilityScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAvailabilityScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAvailabilitySchedule",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/availability-schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAvailabilityScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAvailabilityScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAvailabilitySchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateDraftCluster1 create draft cluster 1 API
*/
func (a *Client) CreateDraftCluster1(params *CreateDraftCluster1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDraftCluster1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDraftCluster1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDraftCluster_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/draft-cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDraftCluster1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDraftCluster1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDraftCluster_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTemplateInputs create template inputs API
*/
func (a *Client) CreateTemplateInputs(params *CreateTemplateInputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTemplateInputsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTemplateInputsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTemplateInputs",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/templateInputs/{inputType}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTemplateInputsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTemplateInputsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTemplateInputs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAvailabilitySchedule delete availability schedule API
*/
func (a *Client) DeleteAvailabilitySchedule(params *DeleteAvailabilityScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAvailabilityScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAvailabilityScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAvailabilitySchedule",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/availability-schedule/{availabilityScheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAvailabilityScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAvailabilityScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAvailabilitySchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCluster delete cluster API
*/
func (a *Client) DeleteCluster(params *DeleteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCluster",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteClusterForce delete cluster force API
*/
func (a *Client) DeleteClusterForce(params *DeleteClusterForceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterForceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterForceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteClusterForce",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/force",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterForceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterForceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteClusterForce: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteClusterSchedule delete cluster schedule API
*/
func (a *Client) DeleteClusterSchedule(params *DeleteClusterScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteClusterSchedule",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/schedule/{clusterScheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteClusterSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteOverrides delete overrides API
*/
func (a *Client) DeleteOverrides(params *DeleteOverridesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOverridesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOverridesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOverrides",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/overrides/{resourceType}/{resourceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOverridesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOverridesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOverrides: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTemplateInputs delete template inputs API
*/
func (a *Client) DeleteTemplateInputs(params *DeleteTemplateInputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTemplateInputsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTemplateInputsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTemplateInputs",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/templateInputs/{inputType}/items/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTemplateInputsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTemplateInputsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTemplateInputs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteToolsConfig delete tools config API
*/
func (a *Client) DeleteToolsConfig(params *DeleteToolsConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteToolsConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteToolsConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteToolsConfig",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/tools-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteToolsConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteToolsConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteToolsConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DetachImage detach image API
*/
func (a *Client) DetachImage(params *DetachImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetachImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetachImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "detachImage",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/detachImage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DetachImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DetachImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for detachImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EditToolsConfig edit tools config API
*/
func (a *Client) EditToolsConfig(params *EditToolsConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditToolsConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditToolsConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editToolsConfig",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/tools-config/{toolsConfigId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditToolsConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditToolsConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for editToolsConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlerts get alerts API
*/
func (a *Client) GetAlerts(params *GetAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlerts",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllTemplateInputs get all template inputs API
*/
func (a *Client) GetAllTemplateInputs(params *GetAllTemplateInputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllTemplateInputsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTemplateInputsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllTemplateInputs",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/templateInputs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllTemplateInputsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllTemplateInputsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllTemplateInputs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAvailabilitySchedules get availability schedules API
*/
func (a *Client) GetAvailabilitySchedules(params *GetAvailabilitySchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAvailabilitySchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAvailabilitySchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAvailabilitySchedules",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/availability-schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAvailabilitySchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAvailabilitySchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAvailabilitySchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterCommon get cluster common API
*/
func (a *Client) GetClusterCommon(params *GetClusterCommonParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterCommonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterCommonParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterCommon",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterCommonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterCommonOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterCommon: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterInfo get cluster info API
*/
func (a *Client) GetClusterInfo(params *GetClusterInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterInfo",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterMetadata get cluster metadata API
*/
func (a *Client) GetClusterMetadata(params *GetClusterMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterMetadata",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/cluster-metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterSchedules get cluster schedules API
*/
func (a *Client) GetClusterSchedules(params *GetClusterSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterSchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterSchedules",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterSchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetK8sCredentials get k8s credentials API
*/
func (a *Client) GetK8sCredentials(params *GetK8sCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetK8sCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetK8sCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getK8sCredentials",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8sCredentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetK8sCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetK8sCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getK8sCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKubeConfig get kube config API
*/
func (a *Client) GetKubeConfig(params *GetKubeConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubeConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubeConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKubeConfig",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/kubeconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKubeConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubeConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKubeConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMatchedModules get matched modules API
*/
func (a *Client) GetMatchedModules(params *GetMatchedModulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMatchedModulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMatchedModulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMatchedModules",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/match-modules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMatchedModulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMatchedModulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMatchedModules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNamespacesInUseByDependentClusters1 get namespaces in use by dependent clusters 1 API
*/
func (a *Client) GetNamespacesInUseByDependentClusters1(params *GetNamespacesInUseByDependentClusters1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespacesInUseByDependentClusters1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNamespacesInUseByDependentClusters1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNamespacesInUseByDependentClusters_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{baseClusterId}/base-env-in-use-namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNamespacesInUseByDependentClusters1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNamespacesInUseByDependentClusters1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNamespacesInUseByDependentClusters_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOpenAlerts get open alerts API
*/
func (a *Client) GetOpenAlerts(params *GetOpenAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOpenAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOpenAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOpenAlerts",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/open-alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOpenAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOpenAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOpenAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOverrides1 get overrides 1 API
*/
func (a *Client) GetOverrides1(params *GetOverrides1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOverrides1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOverrides1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOverrides_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/overrides",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOverrides1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOverrides1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOverrides_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProvidedResources get provided resources API
*/
func (a *Client) GetProvidedResources(params *GetProvidedResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProvidedResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvidedResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProvidedResources",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/providedResources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvidedResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvidedResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProvidedResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReleaseImpacts get release impacts API
*/
func (a *Client) GetReleaseImpacts(params *GetReleaseImpactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReleaseImpactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseImpactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReleaseImpacts",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/release-impacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseImpactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleaseImpactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleaseImpacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceStats get resource stats API
*/
func (a *Client) GetResourceStats(params *GetResourceStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceStats",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resource-stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTemplateInputByUID get template input by Uid API
*/
func (a *Client) GetTemplateInputByUID(params *GetTemplateInputByUIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTemplateInputByUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplateInputByUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTemplateInputByUid",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/templateInputs/{inputType}/items/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTemplateInputByUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTemplateInputByUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTemplateInputByUid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTemplateInputs get template inputs API
*/
func (a *Client) GetTemplateInputs(params *GetTemplateInputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTemplateInputsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplateInputsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTemplateInputs",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/templateInputs/{inputType}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTemplateInputsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTemplateInputsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTemplateInputs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetToolsConfig get tools config API
*/
func (a *Client) GetToolsConfig(params *GetToolsConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetToolsConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetToolsConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getToolsConfig",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/tools-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetToolsConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetToolsConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getToolsConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVPNProfile get v p n profile API
*/
func (a *Client) GetVPNProfile(params *GetVPNProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVPNProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVPNProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVPNProfile",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/vpn-profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVPNProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVPNProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVPNProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVariableCounts get variable counts API
*/
func (a *Client) GetVariableCounts(params *GetVariableCountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVariableCountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVariableCountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVariableCounts",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/variable-counts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVariableCountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVariableCountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVariableCounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVars get vars API
*/
func (a *Client) GetVars(params *GetVarsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVarsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVarsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVars",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/vars",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVarsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVarsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVars: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVarsWithSecrets get vars with secrets API
*/
func (a *Client) GetVarsWithSecrets(params *GetVarsWithSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVarsWithSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVarsWithSecretsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVarsWithSecrets",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/vars-with-secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVarsWithSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVarsWithSecretsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVarsWithSecrets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVarsWithStatus get vars with status API
*/
func (a *Client) GetVarsWithStatus(params *GetVarsWithStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVarsWithStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVarsWithStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVarsWithStatus",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/varsWithStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVarsWithStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVarsWithStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVarsWithStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OverrideSizing override sizing API
*/
func (a *Client) OverrideSizing(params *OverrideSizingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideSizingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOverrideSizingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "overrideSizing",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/overrides",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OverrideSizingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OverrideSizingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for overrideSizing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PauseRelease pause release API
*/
func (a *Client) PauseRelease(params *PauseReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PauseReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPauseReleaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pauseRelease",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/pause-release",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PauseReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PauseReleaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pauseRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RefreshKubeConfig refresh kube config API
*/
func (a *Client) RefreshKubeConfig(params *RefreshKubeConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshKubeConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshKubeConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refreshKubeConfig",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RefreshKubeConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshKubeConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refreshKubeConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveSilence remove silence API
*/
func (a *Client) RemoveSilence(params *RemoveSilenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveSilenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveSilenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeSilence",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveSilenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveSilenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeSilence: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourceDetails resource details API
*/
func (a *Client) ResourceDetails(params *ResourceDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resourceDetails",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceDetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResourceDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resourceDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetClusterCode set cluster code API
*/
func (a *Client) SetClusterCode(params *SetClusterCodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetClusterCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetClusterCodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setClusterCode",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/setClusterCode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetClusterCodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetClusterCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setClusterCode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SilenceAlerts silence alerts API
*/
func (a *Client) SilenceAlerts(params *SilenceAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SilenceAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSilenceAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "silenceAlerts",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/silence-alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SilenceAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SilenceAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for silenceAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAvailabilitySchedules update availability schedules API
*/
func (a *Client) UpdateAvailabilitySchedules(params *UpdateAvailabilitySchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAvailabilitySchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAvailabilitySchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAvailabilitySchedules",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/availability-schedule/{scheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAvailabilitySchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAvailabilitySchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAvailabilitySchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateClusterBranch update cluster branch API
*/
func (a *Client) UpdateClusterBranch(params *UpdateClusterBranchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClusterBranchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterBranchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateClusterBranch",
		Method:             "PATCH",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/branch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterBranchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterBranchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateClusterBranch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateClusterSchedules update cluster schedules API
*/
func (a *Client) UpdateClusterSchedules(params *UpdateClusterSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClusterSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterSchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateClusterSchedules",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/schedule/{clusterScheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateClusterSchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDraftCluster update draft cluster API
*/
func (a *Client) UpdateDraftCluster(params *UpdateDraftClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDraftClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDraftClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDraftCluster",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/draft-cluster/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDraftClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDraftClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDraftCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTemplateInput update template input API
*/
func (a *Client) UpdateTemplateInput(params *UpdateTemplateInputParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTemplateInputOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTemplateInputParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTemplateInput",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/templateInputs/{inputType}/items/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTemplateInputReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTemplateInputOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTemplateInput: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpsertProvidedResources upsert provided resources API
*/
func (a *Client) UpsertProvidedResources(params *UpsertProvidedResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpsertProvidedResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpsertProvidedResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upsertProvidedResources",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/providedResources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpsertProvidedResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpsertProvidedResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upsertProvidedResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpsertVars upsert vars API
*/
func (a *Client) UpsertVars(params *UpsertVarsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpsertVarsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpsertVarsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upsertVars",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/vars/upsert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpsertVarsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpsertVarsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upsertVars: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
