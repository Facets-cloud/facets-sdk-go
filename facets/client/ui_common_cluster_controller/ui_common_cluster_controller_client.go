// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui common cluster controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui common cluster controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui common cluster controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui common cluster controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddClusterSchedulesUsingPOST(params *AddClusterSchedulesUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddClusterSchedulesUsingPOSTOK, *AddClusterSchedulesUsingPOSTCreated, error)

	AddToolsConfigUsingPOST(params *AddToolsConfigUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddToolsConfigUsingPOSTOK, *AddToolsConfigUsingPOSTCreated, error)

	AttachImageUsingPOST(params *AttachImageUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AttachImageUsingPOSTOK, *AttachImageUsingPOSTCreated, error)

	BulkEnableDisableResourcesUsingPUT(params *BulkEnableDisableResourcesUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEnableDisableResourcesUsingPUTOK, *BulkEnableDisableResourcesUsingPUTCreated, error)

	CopyConfigurationsSelectiveUsingPUT(params *CopyConfigurationsSelectiveUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CopyConfigurationsSelectiveUsingPUTOK, *CopyConfigurationsSelectiveUsingPUTCreated, error)

	CreateAvailabilityScheduleUsingPOST(params *CreateAvailabilityScheduleUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAvailabilityScheduleUsingPOSTOK, *CreateAvailabilityScheduleUsingPOSTCreated, error)

	CreateClusterTFDetailsUsingPOST(params *CreateClusterTFDetailsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateClusterTFDetailsUsingPOSTOK, *CreateClusterTFDetailsUsingPOSTCreated, error)

	CreateDraftClusterUsingPOST(params *CreateDraftClusterUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDraftClusterUsingPOSTOK, *CreateDraftClusterUsingPOSTCreated, error)

	CreateSnapshotUsingPOST(params *CreateSnapshotUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSnapshotUsingPOSTOK, *CreateSnapshotUsingPOSTCreated, error)

	CreateTemplateInputsUsingPOST(params *CreateTemplateInputsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTemplateInputsUsingPOSTOK, *CreateTemplateInputsUsingPOSTCreated, error)

	DeleteAvailabilityScheduleUsingDELETE(params *DeleteAvailabilityScheduleUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAvailabilityScheduleUsingDELETEOK, *DeleteAvailabilityScheduleUsingDELETENoContent, error)

	DeleteClusterForceUsingDELETE(params *DeleteClusterForceUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterForceUsingDELETEOK, *DeleteClusterForceUsingDELETENoContent, error)

	DeleteClusterScheduleUsingDELETE(params *DeleteClusterScheduleUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterScheduleUsingDELETEOK, *DeleteClusterScheduleUsingDELETENoContent, error)

	DeleteClusterTFDetailsUsingDELETE(params *DeleteClusterTFDetailsUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterTFDetailsUsingDELETEOK, *DeleteClusterTFDetailsUsingDELETENoContent, error)

	DeleteClusterUsingDELETE1(params *DeleteClusterUsingDELETE1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterUsingDELETE1OK, *DeleteClusterUsingDELETE1NoContent, error)

	DeleteOverridesUsingDELETE(params *DeleteOverridesUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOverridesUsingDELETEOK, *DeleteOverridesUsingDELETENoContent, error)

	DeleteTemplateInputsUsingDELETE(params *DeleteTemplateInputsUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTemplateInputsUsingDELETEOK, *DeleteTemplateInputsUsingDELETENoContent, error)

	DeleteToolsConfigUsingDELETE(params *DeleteToolsConfigUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteToolsConfigUsingDELETEOK, *DeleteToolsConfigUsingDELETENoContent, error)

	DetachImageUsingDELETE(params *DetachImageUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetachImageUsingDELETEOK, *DetachImageUsingDELETENoContent, error)

	DisableClusterTaskUsingPOST(params *DisableClusterTaskUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableClusterTaskUsingPOSTOK, *DisableClusterTaskUsingPOSTCreated, error)

	EditToolsConfigUsingPUT(params *EditToolsConfigUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditToolsConfigUsingPUTOK, *EditToolsConfigUsingPUTCreated, error)

	EnableClusterTaskUsingPOST(params *EnableClusterTaskUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableClusterTaskUsingPOSTOK, *EnableClusterTaskUsingPOSTCreated, error)

	GetAlertsUsingGET(params *GetAlertsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertsUsingGETOK, error)

	GetAllTemplateInputsUsingGET(params *GetAllTemplateInputsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllTemplateInputsUsingGETOK, error)

	GetAvailabilitySchedulesUsingGET(params *GetAvailabilitySchedulesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAvailabilitySchedulesUsingGETOK, error)

	GetClusterCommonUsingGET(params *GetClusterCommonUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterCommonUsingGETOK, error)

	GetClusterInfoUsingGET(params *GetClusterInfoUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterInfoUsingGETOK, error)

	GetClusterMetadataUsingGET(params *GetClusterMetadataUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterMetadataUsingGETOK, error)

	GetClusterSchedulesUsingGET(params *GetClusterSchedulesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterSchedulesUsingGETOK, error)

	GetClusterTFDetailsUsingGET(params *GetClusterTFDetailsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterTFDetailsUsingGETOK, error)

	GetClusterTaskUsingGET(params *GetClusterTaskUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterTaskUsingGETOK, error)

	GetK8sCredentialsUsingGET(params *GetK8sCredentialsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetK8sCredentialsUsingGETOK, error)

	GetKubeConfigUsingGET(params *GetKubeConfigUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubeConfigUsingGETOK, error)

	GetMatchedModulesUsingGET(params *GetMatchedModulesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMatchedModulesUsingGETOK, error)

	GetNamespacesInUseByDependentClustersUsingGET(params *GetNamespacesInUseByDependentClustersUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespacesInUseByDependentClustersUsingGETOK, error)

	GetOpenAlertsUsingGET(params *GetOpenAlertsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOpenAlertsUsingGETOK, error)

	GetOverridesUsingGET1(params *GetOverridesUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOverridesUsingGET1OK, error)

	GetPinnedSnapshotUsingGET1(params *GetPinnedSnapshotUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPinnedSnapshotUsingGET1OK, error)

	GetProvidedResourcesUsingGET(params *GetProvidedResourcesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProvidedResourcesUsingGETOK, error)

	GetReleaseImpactsUsingGET(params *GetReleaseImpactsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReleaseImpactsUsingGETOK, error)

	GetResourceStatsUsingGET(params *GetResourceStatsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceStatsUsingGETOK, error)

	GetTemplateInputByUIDUsingGET(params *GetTemplateInputByUIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTemplateInputByUIDUsingGETOK, error)

	GetTemplateInputsUsingGET(params *GetTemplateInputsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTemplateInputsUsingGETOK, error)

	GetToolsConfigUsingGET(params *GetToolsConfigUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetToolsConfigUsingGETOK, error)

	GetVPNProfileUsingGET(params *GetVPNProfileUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVPNProfileUsingGETOK, error)

	GetVariableCountsUsingGET(params *GetVariableCountsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVariableCountsUsingGETOK, error)

	GetVarsUsingGET(params *GetVarsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVarsUsingGETOK, error)

	GetVarsWithSecretsUsingGET(params *GetVarsWithSecretsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVarsWithSecretsUsingGETOK, error)

	GetVarsWithStatusUsingGET(params *GetVarsWithStatusUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVarsWithStatusUsingGETOK, error)

	ListSnapshotsUsingGET1(params *ListSnapshotsUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSnapshotsUsingGET1OK, error)

	OverrideSizingUsingPOST1(params *OverrideSizingUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideSizingUsingPOST1OK, *OverrideSizingUsingPOST1Created, error)

	PauseReleaseUsingPOST(params *PauseReleaseUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PauseReleaseUsingPOSTOK, *PauseReleaseUsingPOSTCreated, error)

	PinSnapshotUsingPOST1(params *PinSnapshotUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PinSnapshotUsingPOST1OK, *PinSnapshotUsingPOST1Created, error)

	RefreshKubeConfigUsingGET(params *RefreshKubeConfigUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshKubeConfigUsingGETOK, error)

	RemoveSilenceUsingDELETE(params *RemoveSilenceUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveSilenceUsingDELETEOK, *RemoveSilenceUsingDELETENoContent, error)

	ResourceDetailsUsingGET(params *ResourceDetailsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceDetailsUsingGETOK, error)

	SetClusterCodeUsingPOST(params *SetClusterCodeUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetClusterCodeUsingPOSTOK, *SetClusterCodeUsingPOSTCreated, error)

	SilenceAlertsUsingPOST(params *SilenceAlertsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SilenceAlertsUsingPOSTOK, *SilenceAlertsUsingPOSTCreated, error)

	UpdateAvailabilitySchedulesUsingPUT(params *UpdateAvailabilitySchedulesUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAvailabilitySchedulesUsingPUTOK, *UpdateAvailabilitySchedulesUsingPUTCreated, error)

	UpdateClusterBranchUsingPATCH(params *UpdateClusterBranchUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClusterBranchUsingPATCHOK, *UpdateClusterBranchUsingPATCHNoContent, error)

	UpdateClusterSchedulesUsingPUT(params *UpdateClusterSchedulesUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClusterSchedulesUsingPUTOK, *UpdateClusterSchedulesUsingPUTCreated, error)

	UpdateClusterTFDetailsUsingPUT(params *UpdateClusterTFDetailsUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClusterTFDetailsUsingPUTOK, *UpdateClusterTFDetailsUsingPUTCreated, error)

	UpdateDraftClusterUsingPUT(params *UpdateDraftClusterUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDraftClusterUsingPUTOK, *UpdateDraftClusterUsingPUTCreated, error)

	UpdateTemplateInputUsingPUT(params *UpdateTemplateInputUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTemplateInputUsingPUTOK, *UpdateTemplateInputUsingPUTCreated, error)

	UpsertProvidedResourcesUsingPOST(params *UpsertProvidedResourcesUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpsertProvidedResourcesUsingPOSTOK, *UpsertProvidedResourcesUsingPOSTCreated, error)

	UpsertVarsUsingPOST1(params *UpsertVarsUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpsertVarsUsingPOST1OK, *UpsertVarsUsingPOST1Created, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddClusterSchedulesUsingPOST adds cluster schedules
*/
func (a *Client) AddClusterSchedulesUsingPOST(params *AddClusterSchedulesUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddClusterSchedulesUsingPOSTOK, *AddClusterSchedulesUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddClusterSchedulesUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addClusterSchedulesUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/schedule",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddClusterSchedulesUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddClusterSchedulesUsingPOSTOK:
		return value, nil, nil
	case *AddClusterSchedulesUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddToolsConfigUsingPOST adds tools config
*/
func (a *Client) AddToolsConfigUsingPOST(params *AddToolsConfigUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddToolsConfigUsingPOSTOK, *AddToolsConfigUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddToolsConfigUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addToolsConfigUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/tools-config",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddToolsConfigUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddToolsConfigUsingPOSTOK:
		return value, nil, nil
	case *AddToolsConfigUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AttachImageUsingPOST attaches image
*/
func (a *Client) AttachImageUsingPOST(params *AttachImageUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AttachImageUsingPOSTOK, *AttachImageUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachImageUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "attachImageUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/attach-image",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AttachImageUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AttachImageUsingPOSTOK:
		return value, nil, nil
	case *AttachImageUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkEnableDisableResourcesUsingPUT bulks enable disable resources
*/
func (a *Client) BulkEnableDisableResourcesUsingPUT(params *BulkEnableDisableResourcesUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEnableDisableResourcesUsingPUTOK, *BulkEnableDisableResourcesUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkEnableDisableResourcesUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "bulkEnableDisableResourcesUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resource-enable-disable",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BulkEnableDisableResourcesUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BulkEnableDisableResourcesUsingPUTOK:
		return value, nil, nil
	case *BulkEnableDisableResourcesUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CopyConfigurationsSelectiveUsingPUT copies configurations from one cluster to another selectively

Copies configurations from the source cluster to the target cluster. When mode is INCLUDE: Only specified configuration types are copied. When mode is EXCLUDE: All configuration types are copied except the specified ones.
*/
func (a *Client) CopyConfigurationsSelectiveUsingPUT(params *CopyConfigurationsSelectiveUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CopyConfigurationsSelectiveUsingPUTOK, *CopyConfigurationsSelectiveUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCopyConfigurationsSelectiveUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "copyConfigurationsSelectiveUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/copy-configurations-selective",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CopyConfigurationsSelectiveUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CopyConfigurationsSelectiveUsingPUTOK:
		return value, nil, nil
	case *CopyConfigurationsSelectiveUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAvailabilityScheduleUsingPOST creates availability schedule
*/
func (a *Client) CreateAvailabilityScheduleUsingPOST(params *CreateAvailabilityScheduleUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAvailabilityScheduleUsingPOSTOK, *CreateAvailabilityScheduleUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAvailabilityScheduleUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAvailabilityScheduleUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/availability-schedule",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAvailabilityScheduleUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAvailabilityScheduleUsingPOSTOK:
		return value, nil, nil
	case *CreateAvailabilityScheduleUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateClusterTFDetailsUsingPOST creates cluster t f details
*/
func (a *Client) CreateClusterTFDetailsUsingPOST(params *CreateClusterTFDetailsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateClusterTFDetailsUsingPOSTOK, *CreateClusterTFDetailsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterTFDetailsUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createClusterTFDetailsUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/tfRunConfigurations",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateClusterTFDetailsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateClusterTFDetailsUsingPOSTOK:
		return value, nil, nil
	case *CreateClusterTFDetailsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateDraftClusterUsingPOST creates draft cluster
*/
func (a *Client) CreateDraftClusterUsingPOST(params *CreateDraftClusterUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDraftClusterUsingPOSTOK, *CreateDraftClusterUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDraftClusterUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDraftClusterUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/draft-cluster",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDraftClusterUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateDraftClusterUsingPOSTOK:
		return value, nil, nil
	case *CreateDraftClusterUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSnapshotUsingPOST creates snapshot
*/
func (a *Client) CreateSnapshotUsingPOST(params *CreateSnapshotUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSnapshotUsingPOSTOK, *CreateSnapshotUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSnapshotUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSnapshotUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSnapshotUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateSnapshotUsingPOSTOK:
		return value, nil, nil
	case *CreateSnapshotUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTemplateInputsUsingPOST creates template inputs
*/
func (a *Client) CreateTemplateInputsUsingPOST(params *CreateTemplateInputsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTemplateInputsUsingPOSTOK, *CreateTemplateInputsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTemplateInputsUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTemplateInputsUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/templateInputs/{inputType}/items",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTemplateInputsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateTemplateInputsUsingPOSTOK:
		return value, nil, nil
	case *CreateTemplateInputsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAvailabilityScheduleUsingDELETE deletes availability schedule
*/
func (a *Client) DeleteAvailabilityScheduleUsingDELETE(params *DeleteAvailabilityScheduleUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAvailabilityScheduleUsingDELETEOK, *DeleteAvailabilityScheduleUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAvailabilityScheduleUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAvailabilityScheduleUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/availability-schedule/{availabilityScheduleId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAvailabilityScheduleUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAvailabilityScheduleUsingDELETEOK:
		return value, nil, nil
	case *DeleteAvailabilityScheduleUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteClusterForceUsingDELETE deletes cluster force
*/
func (a *Client) DeleteClusterForceUsingDELETE(params *DeleteClusterForceUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterForceUsingDELETEOK, *DeleteClusterForceUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterForceUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteClusterForceUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/force",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterForceUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteClusterForceUsingDELETEOK:
		return value, nil, nil
	case *DeleteClusterForceUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteClusterScheduleUsingDELETE deletes cluster schedule
*/
func (a *Client) DeleteClusterScheduleUsingDELETE(params *DeleteClusterScheduleUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterScheduleUsingDELETEOK, *DeleteClusterScheduleUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterScheduleUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteClusterScheduleUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/schedule/{clusterScheduleId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterScheduleUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteClusterScheduleUsingDELETEOK:
		return value, nil, nil
	case *DeleteClusterScheduleUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteClusterTFDetailsUsingDELETE deletes cluster t f details
*/
func (a *Client) DeleteClusterTFDetailsUsingDELETE(params *DeleteClusterTFDetailsUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterTFDetailsUsingDELETEOK, *DeleteClusterTFDetailsUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterTFDetailsUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteClusterTFDetailsUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/tfRunConfigurations",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterTFDetailsUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteClusterTFDetailsUsingDELETEOK:
		return value, nil, nil
	case *DeleteClusterTFDetailsUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteClusterUsingDELETE1 deletes cluster
*/
func (a *Client) DeleteClusterUsingDELETE1(params *DeleteClusterUsingDELETE1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterUsingDELETE1OK, *DeleteClusterUsingDELETE1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterUsingDELETE1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteClusterUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterUsingDELETE1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteClusterUsingDELETE1OK:
		return value, nil, nil
	case *DeleteClusterUsingDELETE1NoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteOverridesUsingDELETE deletes overrides
*/
func (a *Client) DeleteOverridesUsingDELETE(params *DeleteOverridesUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOverridesUsingDELETEOK, *DeleteOverridesUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOverridesUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOverridesUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/overrides/{resourceType}/{resourceName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOverridesUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteOverridesUsingDELETEOK:
		return value, nil, nil
	case *DeleteOverridesUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTemplateInputsUsingDELETE deletes template inputs
*/
func (a *Client) DeleteTemplateInputsUsingDELETE(params *DeleteTemplateInputsUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTemplateInputsUsingDELETEOK, *DeleteTemplateInputsUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTemplateInputsUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTemplateInputsUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/templateInputs/{inputType}/items/{uid}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTemplateInputsUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteTemplateInputsUsingDELETEOK:
		return value, nil, nil
	case *DeleteTemplateInputsUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteToolsConfigUsingDELETE deletes tools config
*/
func (a *Client) DeleteToolsConfigUsingDELETE(params *DeleteToolsConfigUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteToolsConfigUsingDELETEOK, *DeleteToolsConfigUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteToolsConfigUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteToolsConfigUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/tools-config",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteToolsConfigUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteToolsConfigUsingDELETEOK:
		return value, nil, nil
	case *DeleteToolsConfigUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DetachImageUsingDELETE detaches image
*/
func (a *Client) DetachImageUsingDELETE(params *DetachImageUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetachImageUsingDELETEOK, *DetachImageUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetachImageUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "detachImageUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/detachImage",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DetachImageUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DetachImageUsingDELETEOK:
		return value, nil, nil
	case *DetachImageUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DisableClusterTaskUsingPOST disables cluster task
*/
func (a *Client) DisableClusterTaskUsingPOST(params *DisableClusterTaskUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableClusterTaskUsingPOSTOK, *DisableClusterTaskUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableClusterTaskUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "disableClusterTaskUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/clusterTask/disable",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DisableClusterTaskUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DisableClusterTaskUsingPOSTOK:
		return value, nil, nil
	case *DisableClusterTaskUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EditToolsConfigUsingPUT edits tools config
*/
func (a *Client) EditToolsConfigUsingPUT(params *EditToolsConfigUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditToolsConfigUsingPUTOK, *EditToolsConfigUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditToolsConfigUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editToolsConfigUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/tools-config/{toolsConfigId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditToolsConfigUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *EditToolsConfigUsingPUTOK:
		return value, nil, nil
	case *EditToolsConfigUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EnableClusterTaskUsingPOST enables cluster task
*/
func (a *Client) EnableClusterTaskUsingPOST(params *EnableClusterTaskUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableClusterTaskUsingPOSTOK, *EnableClusterTaskUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableClusterTaskUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enableClusterTaskUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/clusterTask/enable",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableClusterTaskUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *EnableClusterTaskUsingPOSTOK:
		return value, nil, nil
	case *EnableClusterTaskUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertsUsingGET gets alerts
*/
func (a *Client) GetAlertsUsingGET(params *GetAlertsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlertsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/alerts",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlertsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllTemplateInputsUsingGET gets all template inputs
*/
func (a *Client) GetAllTemplateInputsUsingGET(params *GetAllTemplateInputsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllTemplateInputsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTemplateInputsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllTemplateInputsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/templateInputs/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllTemplateInputsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllTemplateInputsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllTemplateInputsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAvailabilitySchedulesUsingGET gets availability schedules
*/
func (a *Client) GetAvailabilitySchedulesUsingGET(params *GetAvailabilitySchedulesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAvailabilitySchedulesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAvailabilitySchedulesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAvailabilitySchedulesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/availability-schedule",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAvailabilitySchedulesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAvailabilitySchedulesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAvailabilitySchedulesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterCommonUsingGET gets cluster common
*/
func (a *Client) GetClusterCommonUsingGET(params *GetClusterCommonUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterCommonUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterCommonUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterCommonUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterCommonUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterCommonUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterCommonUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterInfoUsingGET gets cluster info
*/
func (a *Client) GetClusterInfoUsingGET(params *GetClusterInfoUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterInfoUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterInfoUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterInfoUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/info",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterInfoUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterInfoUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterInfoUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterMetadataUsingGET gets cluster metadata
*/
func (a *Client) GetClusterMetadataUsingGET(params *GetClusterMetadataUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterMetadataUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterMetadataUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterMetadataUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/cluster-metadata",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterMetadataUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterMetadataUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterMetadataUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterSchedulesUsingGET gets cluster schedules
*/
func (a *Client) GetClusterSchedulesUsingGET(params *GetClusterSchedulesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterSchedulesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterSchedulesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterSchedulesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/schedule",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterSchedulesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterSchedulesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterSchedulesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterTFDetailsUsingGET gets cluster t f details
*/
func (a *Client) GetClusterTFDetailsUsingGET(params *GetClusterTFDetailsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterTFDetailsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterTFDetailsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterTFDetailsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/tfRunConfigurations",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterTFDetailsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterTFDetailsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterTFDetailsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterTaskUsingGET gets cluster task
*/
func (a *Client) GetClusterTaskUsingGET(params *GetClusterTaskUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterTaskUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterTaskUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterTaskUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/clusterTask",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterTaskUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterTaskUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterTaskUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetK8sCredentialsUsingGET gets k8s credentials
*/
func (a *Client) GetK8sCredentialsUsingGET(params *GetK8sCredentialsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetK8sCredentialsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetK8sCredentialsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getK8sCredentialsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8sCredentials",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetK8sCredentialsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetK8sCredentialsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getK8sCredentialsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKubeConfigUsingGET gets kube config
*/
func (a *Client) GetKubeConfigUsingGET(params *GetKubeConfigUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubeConfigUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubeConfigUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKubeConfigUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/kubeconfig",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKubeConfigUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubeConfigUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKubeConfigUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMatchedModulesUsingGET gets matched modules
*/
func (a *Client) GetMatchedModulesUsingGET(params *GetMatchedModulesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMatchedModulesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMatchedModulesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMatchedModulesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/match-modules",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMatchedModulesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMatchedModulesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMatchedModulesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNamespacesInUseByDependentClustersUsingGET gets namespaces in use by dependent clusters
*/
func (a *Client) GetNamespacesInUseByDependentClustersUsingGET(params *GetNamespacesInUseByDependentClustersUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespacesInUseByDependentClustersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNamespacesInUseByDependentClustersUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNamespacesInUseByDependentClustersUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{baseClusterId}/base-env-in-use-namespaces",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNamespacesInUseByDependentClustersUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNamespacesInUseByDependentClustersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNamespacesInUseByDependentClustersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOpenAlertsUsingGET gets open alerts
*/
func (a *Client) GetOpenAlertsUsingGET(params *GetOpenAlertsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOpenAlertsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOpenAlertsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOpenAlertsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/open-alerts",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOpenAlertsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOpenAlertsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOpenAlertsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOverridesUsingGET1 gets overrides
*/
func (a *Client) GetOverridesUsingGET1(params *GetOverridesUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOverridesUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOverridesUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOverridesUsingGET_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/overrides",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOverridesUsingGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOverridesUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOverridesUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPinnedSnapshotUsingGET1 gets pinned snapshot
*/
func (a *Client) GetPinnedSnapshotUsingGET1(params *GetPinnedSnapshotUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPinnedSnapshotUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPinnedSnapshotUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPinnedSnapshotUsingGET_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPinnedSnapshotUsingGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPinnedSnapshotUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPinnedSnapshotUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProvidedResourcesUsingGET gets provided resources
*/
func (a *Client) GetProvidedResourcesUsingGET(params *GetProvidedResourcesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProvidedResourcesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvidedResourcesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProvidedResourcesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/providedResources",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvidedResourcesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvidedResourcesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProvidedResourcesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReleaseImpactsUsingGET gets release impacts
*/
func (a *Client) GetReleaseImpactsUsingGET(params *GetReleaseImpactsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReleaseImpactsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseImpactsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReleaseImpactsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/release-impacts",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseImpactsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleaseImpactsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleaseImpactsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceStatsUsingGET gets resource stats
*/
func (a *Client) GetResourceStatsUsingGET(params *GetResourceStatsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceStatsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceStatsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceStatsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resource-stats",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourceStatsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceStatsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceStatsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTemplateInputByUIDUsingGET gets template input by Uid
*/
func (a *Client) GetTemplateInputByUIDUsingGET(params *GetTemplateInputByUIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTemplateInputByUIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplateInputByUIDUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTemplateInputByUidUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/templateInputs/{inputType}/items/{uid}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTemplateInputByUIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTemplateInputByUIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTemplateInputByUidUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTemplateInputsUsingGET gets template inputs
*/
func (a *Client) GetTemplateInputsUsingGET(params *GetTemplateInputsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTemplateInputsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplateInputsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTemplateInputsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/templateInputs/{inputType}/items",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTemplateInputsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTemplateInputsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTemplateInputsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetToolsConfigUsingGET gets tools config
*/
func (a *Client) GetToolsConfigUsingGET(params *GetToolsConfigUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetToolsConfigUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetToolsConfigUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getToolsConfigUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/tools-config",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetToolsConfigUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetToolsConfigUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getToolsConfigUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVPNProfileUsingGET gets v p n profile
*/
func (a *Client) GetVPNProfileUsingGET(params *GetVPNProfileUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVPNProfileUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVPNProfileUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVPNProfileUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/vpn-profile",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVPNProfileUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVPNProfileUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVPNProfileUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVariableCountsUsingGET gets variable counts
*/
func (a *Client) GetVariableCountsUsingGET(params *GetVariableCountsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVariableCountsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVariableCountsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVariableCountsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/variable-counts",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVariableCountsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVariableCountsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVariableCountsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVarsUsingGET gets vars
*/
func (a *Client) GetVarsUsingGET(params *GetVarsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVarsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVarsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVarsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/vars",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVarsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVarsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVarsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVarsWithSecretsUsingGET gets vars with secrets
*/
func (a *Client) GetVarsWithSecretsUsingGET(params *GetVarsWithSecretsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVarsWithSecretsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVarsWithSecretsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVarsWithSecretsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/vars-with-secrets",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVarsWithSecretsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVarsWithSecretsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVarsWithSecretsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVarsWithStatusUsingGET gets vars with status
*/
func (a *Client) GetVarsWithStatusUsingGET(params *GetVarsWithStatusUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVarsWithStatusUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVarsWithStatusUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVarsWithStatusUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/varsWithStatus",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVarsWithStatusUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVarsWithStatusUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVarsWithStatusUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSnapshotsUsingGET1 lists snapshots
*/
func (a *Client) ListSnapshotsUsingGET1(params *ListSnapshotsUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSnapshotsUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSnapshotsUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSnapshotsUsingGET_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSnapshotsUsingGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSnapshotsUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSnapshotsUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OverrideSizingUsingPOST1 overrides sizing
*/
func (a *Client) OverrideSizingUsingPOST1(params *OverrideSizingUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideSizingUsingPOST1OK, *OverrideSizingUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOverrideSizingUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "overrideSizingUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/overrides",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OverrideSizingUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *OverrideSizingUsingPOST1OK:
		return value, nil, nil
	case *OverrideSizingUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PauseReleaseUsingPOST pauses release
*/
func (a *Client) PauseReleaseUsingPOST(params *PauseReleaseUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PauseReleaseUsingPOSTOK, *PauseReleaseUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPauseReleaseUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pauseReleaseUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/pause-release",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PauseReleaseUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PauseReleaseUsingPOSTOK:
		return value, nil, nil
	case *PauseReleaseUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PinSnapshotUsingPOST1 pins snapshot
*/
func (a *Client) PinSnapshotUsingPOST1(params *PinSnapshotUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PinSnapshotUsingPOST1OK, *PinSnapshotUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPinSnapshotUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "pinSnapshotUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PinSnapshotUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PinSnapshotUsingPOST1OK:
		return value, nil, nil
	case *PinSnapshotUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RefreshKubeConfigUsingGET refreshes kube config
*/
func (a *Client) RefreshKubeConfigUsingGET(params *RefreshKubeConfigUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshKubeConfigUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshKubeConfigUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refreshKubeConfigUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RefreshKubeConfigUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshKubeConfigUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refreshKubeConfigUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveSilenceUsingDELETE removes silence
*/
func (a *Client) RemoveSilenceUsingDELETE(params *RemoveSilenceUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveSilenceUsingDELETEOK, *RemoveSilenceUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveSilenceUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeSilenceUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveSilenceUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RemoveSilenceUsingDELETEOK:
		return value, nil, nil
	case *RemoveSilenceUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResourceDetailsUsingGET resources details
*/
func (a *Client) ResourceDetailsUsingGET(params *ResourceDetailsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceDetailsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceDetailsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resourceDetailsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/resourceDetails",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResourceDetailsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceDetailsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resourceDetailsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetClusterCodeUsingPOST sets cluster code
*/
func (a *Client) SetClusterCodeUsingPOST(params *SetClusterCodeUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetClusterCodeUsingPOSTOK, *SetClusterCodeUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetClusterCodeUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setClusterCodeUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/setClusterCode",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetClusterCodeUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SetClusterCodeUsingPOSTOK:
		return value, nil, nil
	case *SetClusterCodeUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SilenceAlertsUsingPOST silences alerts
*/
func (a *Client) SilenceAlertsUsingPOST(params *SilenceAlertsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SilenceAlertsUsingPOSTOK, *SilenceAlertsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSilenceAlertsUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "silenceAlertsUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/silence-alerts",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SilenceAlertsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SilenceAlertsUsingPOSTOK:
		return value, nil, nil
	case *SilenceAlertsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAvailabilitySchedulesUsingPUT updates availability schedules
*/
func (a *Client) UpdateAvailabilitySchedulesUsingPUT(params *UpdateAvailabilitySchedulesUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAvailabilitySchedulesUsingPUTOK, *UpdateAvailabilitySchedulesUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAvailabilitySchedulesUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAvailabilitySchedulesUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/availability-schedule/{scheduleId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAvailabilitySchedulesUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAvailabilitySchedulesUsingPUTOK:
		return value, nil, nil
	case *UpdateAvailabilitySchedulesUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateClusterBranchUsingPATCH updates cluster branch
*/
func (a *Client) UpdateClusterBranchUsingPATCH(params *UpdateClusterBranchUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClusterBranchUsingPATCHOK, *UpdateClusterBranchUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterBranchUsingPATCHParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateClusterBranchUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/branch",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterBranchUsingPATCHReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateClusterBranchUsingPATCHOK:
		return value, nil, nil
	case *UpdateClusterBranchUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateClusterSchedulesUsingPUT updates cluster schedules
*/
func (a *Client) UpdateClusterSchedulesUsingPUT(params *UpdateClusterSchedulesUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClusterSchedulesUsingPUTOK, *UpdateClusterSchedulesUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterSchedulesUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateClusterSchedulesUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/schedule/{clusterScheduleId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterSchedulesUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateClusterSchedulesUsingPUTOK:
		return value, nil, nil
	case *UpdateClusterSchedulesUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateClusterTFDetailsUsingPUT updates cluster t f details
*/
func (a *Client) UpdateClusterTFDetailsUsingPUT(params *UpdateClusterTFDetailsUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClusterTFDetailsUsingPUTOK, *UpdateClusterTFDetailsUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterTFDetailsUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateClusterTFDetailsUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/tfRunConfigurations",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterTFDetailsUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateClusterTFDetailsUsingPUTOK:
		return value, nil, nil
	case *UpdateClusterTFDetailsUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDraftClusterUsingPUT updates draft cluster
*/
func (a *Client) UpdateDraftClusterUsingPUT(params *UpdateDraftClusterUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDraftClusterUsingPUTOK, *UpdateDraftClusterUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDraftClusterUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDraftClusterUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/draft-cluster/{clusterId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDraftClusterUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateDraftClusterUsingPUTOK:
		return value, nil, nil
	case *UpdateDraftClusterUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTemplateInputUsingPUT updates template input
*/
func (a *Client) UpdateTemplateInputUsingPUT(params *UpdateTemplateInputUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTemplateInputUsingPUTOK, *UpdateTemplateInputUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTemplateInputUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTemplateInputUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/templateInputs/{inputType}/items/{uid}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTemplateInputUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateTemplateInputUsingPUTOK:
		return value, nil, nil
	case *UpdateTemplateInputUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpsertProvidedResourcesUsingPOST upserts provided resources
*/
func (a *Client) UpsertProvidedResourcesUsingPOST(params *UpsertProvidedResourcesUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpsertProvidedResourcesUsingPOSTOK, *UpsertProvidedResourcesUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpsertProvidedResourcesUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upsertProvidedResourcesUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/providedResources",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpsertProvidedResourcesUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpsertProvidedResourcesUsingPOSTOK:
		return value, nil, nil
	case *UpsertProvidedResourcesUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpsertVarsUsingPOST1 upserts vars
*/
func (a *Client) UpsertVarsUsingPOST1(params *UpsertVarsUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpsertVarsUsingPOST1OK, *UpsertVarsUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpsertVarsUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "upsertVarsUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/vars/upsert",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpsertVarsUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpsertVarsUsingPOST1OK:
		return value, nil, nil
	case *UpsertVarsUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_common_cluster_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
