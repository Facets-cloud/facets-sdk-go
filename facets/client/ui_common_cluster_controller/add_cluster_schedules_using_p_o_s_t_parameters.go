// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// NewAddClusterSchedulesUsingPOSTParams creates a new AddClusterSchedulesUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAddClusterSchedulesUsingPOSTParams() *AddClusterSchedulesUsingPOSTParams {
	return &AddClusterSchedulesUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAddClusterSchedulesUsingPOSTParamsWithTimeout creates a new AddClusterSchedulesUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewAddClusterSchedulesUsingPOSTParamsWithTimeout(timeout time.Duration) *AddClusterSchedulesUsingPOSTParams {
	return &AddClusterSchedulesUsingPOSTParams{
		timeout: timeout,
	}
}

// NewAddClusterSchedulesUsingPOSTParamsWithContext creates a new AddClusterSchedulesUsingPOSTParams object
// with the ability to set a context for a request.
func NewAddClusterSchedulesUsingPOSTParamsWithContext(ctx context.Context) *AddClusterSchedulesUsingPOSTParams {
	return &AddClusterSchedulesUsingPOSTParams{
		Context: ctx,
	}
}

// NewAddClusterSchedulesUsingPOSTParamsWithHTTPClient creates a new AddClusterSchedulesUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewAddClusterSchedulesUsingPOSTParamsWithHTTPClient(client *http.Client) *AddClusterSchedulesUsingPOSTParams {
	return &AddClusterSchedulesUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
AddClusterSchedulesUsingPOSTParams contains all the parameters to send to the API endpoint

	for the add cluster schedules using p o s t operation.

	Typically these are written to a http.Request.
*/
type AddClusterSchedulesUsingPOSTParams struct {

	/* ClusterID.

	   clusterId
	*/
	ClusterID string

	/* Request.

	   request
	*/
	Request *models.ScheduleRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the add cluster schedules using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddClusterSchedulesUsingPOSTParams) WithDefaults() *AddClusterSchedulesUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the add cluster schedules using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddClusterSchedulesUsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the add cluster schedules using p o s t params
func (o *AddClusterSchedulesUsingPOSTParams) WithTimeout(timeout time.Duration) *AddClusterSchedulesUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add cluster schedules using p o s t params
func (o *AddClusterSchedulesUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add cluster schedules using p o s t params
func (o *AddClusterSchedulesUsingPOSTParams) WithContext(ctx context.Context) *AddClusterSchedulesUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add cluster schedules using p o s t params
func (o *AddClusterSchedulesUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add cluster schedules using p o s t params
func (o *AddClusterSchedulesUsingPOSTParams) WithHTTPClient(client *http.Client) *AddClusterSchedulesUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add cluster schedules using p o s t params
func (o *AddClusterSchedulesUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the add cluster schedules using p o s t params
func (o *AddClusterSchedulesUsingPOSTParams) WithClusterID(clusterID string) *AddClusterSchedulesUsingPOSTParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the add cluster schedules using p o s t params
func (o *AddClusterSchedulesUsingPOSTParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithRequest adds the request to the add cluster schedules using p o s t params
func (o *AddClusterSchedulesUsingPOSTParams) WithRequest(request *models.ScheduleRequest) *AddClusterSchedulesUsingPOSTParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the add cluster schedules using p o s t params
func (o *AddClusterSchedulesUsingPOSTParams) SetRequest(request *models.ScheduleRequest) {
	o.Request = request
}

// WriteToRequest writes these params to a swagger request
func (o *AddClusterSchedulesUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID); err != nil {
		return err
	}
	if o.Request != nil {
		if err := r.SetBodyParam(o.Request); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
