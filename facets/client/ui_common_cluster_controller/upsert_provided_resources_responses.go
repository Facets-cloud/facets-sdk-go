// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpsertProvidedResourcesReader is a Reader for the UpsertProvidedResources structure.
type UpsertProvidedResourcesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpsertProvidedResourcesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpsertProvidedResourcesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpsertProvidedResourcesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpsertProvidedResourcesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpsertProvidedResourcesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpsertProvidedResourcesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/providedResources] upsertProvidedResources", response, response.Code())
	}
}

// NewUpsertProvidedResourcesOK creates a UpsertProvidedResourcesOK with default headers values
func NewUpsertProvidedResourcesOK() *UpsertProvidedResourcesOK {
	return &UpsertProvidedResourcesOK{}
}

/*
UpsertProvidedResourcesOK describes a response with status code 200, with default header values.

OK
*/
type UpsertProvidedResourcesOK struct {
	Payload *models.ProvidedResources
}

// IsSuccess returns true when this upsert provided resources o k response has a 2xx status code
func (o *UpsertProvidedResourcesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upsert provided resources o k response has a 3xx status code
func (o *UpsertProvidedResourcesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert provided resources o k response has a 4xx status code
func (o *UpsertProvidedResourcesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert provided resources o k response has a 5xx status code
func (o *UpsertProvidedResourcesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert provided resources o k response a status code equal to that given
func (o *UpsertProvidedResourcesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upsert provided resources o k response
func (o *UpsertProvidedResourcesOK) Code() int {
	return 200
}

func (o *UpsertProvidedResourcesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/providedResources][%d] upsertProvidedResourcesOK %s", 200, payload)
}

func (o *UpsertProvidedResourcesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/providedResources][%d] upsertProvidedResourcesOK %s", 200, payload)
}

func (o *UpsertProvidedResourcesOK) GetPayload() *models.ProvidedResources {
	return o.Payload
}

func (o *UpsertProvidedResourcesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProvidedResources)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertProvidedResourcesBadRequest creates a UpsertProvidedResourcesBadRequest with default headers values
func NewUpsertProvidedResourcesBadRequest() *UpsertProvidedResourcesBadRequest {
	return &UpsertProvidedResourcesBadRequest{}
}

/*
UpsertProvidedResourcesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpsertProvidedResourcesBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upsert provided resources bad request response has a 2xx status code
func (o *UpsertProvidedResourcesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert provided resources bad request response has a 3xx status code
func (o *UpsertProvidedResourcesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert provided resources bad request response has a 4xx status code
func (o *UpsertProvidedResourcesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert provided resources bad request response has a 5xx status code
func (o *UpsertProvidedResourcesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert provided resources bad request response a status code equal to that given
func (o *UpsertProvidedResourcesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the upsert provided resources bad request response
func (o *UpsertProvidedResourcesBadRequest) Code() int {
	return 400
}

func (o *UpsertProvidedResourcesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/providedResources][%d] upsertProvidedResourcesBadRequest %s", 400, payload)
}

func (o *UpsertProvidedResourcesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/providedResources][%d] upsertProvidedResourcesBadRequest %s", 400, payload)
}

func (o *UpsertProvidedResourcesBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpsertProvidedResourcesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertProvidedResourcesNotFound creates a UpsertProvidedResourcesNotFound with default headers values
func NewUpsertProvidedResourcesNotFound() *UpsertProvidedResourcesNotFound {
	return &UpsertProvidedResourcesNotFound{}
}

/*
UpsertProvidedResourcesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpsertProvidedResourcesNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upsert provided resources not found response has a 2xx status code
func (o *UpsertProvidedResourcesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert provided resources not found response has a 3xx status code
func (o *UpsertProvidedResourcesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert provided resources not found response has a 4xx status code
func (o *UpsertProvidedResourcesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert provided resources not found response has a 5xx status code
func (o *UpsertProvidedResourcesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert provided resources not found response a status code equal to that given
func (o *UpsertProvidedResourcesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the upsert provided resources not found response
func (o *UpsertProvidedResourcesNotFound) Code() int {
	return 404
}

func (o *UpsertProvidedResourcesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/providedResources][%d] upsertProvidedResourcesNotFound %s", 404, payload)
}

func (o *UpsertProvidedResourcesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/providedResources][%d] upsertProvidedResourcesNotFound %s", 404, payload)
}

func (o *UpsertProvidedResourcesNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpsertProvidedResourcesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertProvidedResourcesMethodNotAllowed creates a UpsertProvidedResourcesMethodNotAllowed with default headers values
func NewUpsertProvidedResourcesMethodNotAllowed() *UpsertProvidedResourcesMethodNotAllowed {
	return &UpsertProvidedResourcesMethodNotAllowed{}
}

/*
UpsertProvidedResourcesMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpsertProvidedResourcesMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upsert provided resources method not allowed response has a 2xx status code
func (o *UpsertProvidedResourcesMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert provided resources method not allowed response has a 3xx status code
func (o *UpsertProvidedResourcesMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert provided resources method not allowed response has a 4xx status code
func (o *UpsertProvidedResourcesMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert provided resources method not allowed response has a 5xx status code
func (o *UpsertProvidedResourcesMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert provided resources method not allowed response a status code equal to that given
func (o *UpsertProvidedResourcesMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the upsert provided resources method not allowed response
func (o *UpsertProvidedResourcesMethodNotAllowed) Code() int {
	return 405
}

func (o *UpsertProvidedResourcesMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/providedResources][%d] upsertProvidedResourcesMethodNotAllowed %s", 405, payload)
}

func (o *UpsertProvidedResourcesMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/providedResources][%d] upsertProvidedResourcesMethodNotAllowed %s", 405, payload)
}

func (o *UpsertProvidedResourcesMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpsertProvidedResourcesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertProvidedResourcesInternalServerError creates a UpsertProvidedResourcesInternalServerError with default headers values
func NewUpsertProvidedResourcesInternalServerError() *UpsertProvidedResourcesInternalServerError {
	return &UpsertProvidedResourcesInternalServerError{}
}

/*
UpsertProvidedResourcesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpsertProvidedResourcesInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upsert provided resources internal server error response has a 2xx status code
func (o *UpsertProvidedResourcesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert provided resources internal server error response has a 3xx status code
func (o *UpsertProvidedResourcesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert provided resources internal server error response has a 4xx status code
func (o *UpsertProvidedResourcesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert provided resources internal server error response has a 5xx status code
func (o *UpsertProvidedResourcesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this upsert provided resources internal server error response a status code equal to that given
func (o *UpsertProvidedResourcesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the upsert provided resources internal server error response
func (o *UpsertProvidedResourcesInternalServerError) Code() int {
	return 500
}

func (o *UpsertProvidedResourcesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/providedResources][%d] upsertProvidedResourcesInternalServerError %s", 500, payload)
}

func (o *UpsertProvidedResourcesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/providedResources][%d] upsertProvidedResourcesInternalServerError %s", 500, payload)
}

func (o *UpsertProvidedResourcesInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpsertProvidedResourcesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
