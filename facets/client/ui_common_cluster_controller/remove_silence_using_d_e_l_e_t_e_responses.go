// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RemoveSilenceUsingDELETEReader is a Reader for the RemoveSilenceUsingDELETE structure.
type RemoveSilenceUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveSilenceUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveSilenceUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewRemoveSilenceUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRemoveSilenceUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRemoveSilenceUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}] removeSilenceUsingDELETE", response, response.Code())
	}
}

// NewRemoveSilenceUsingDELETEOK creates a RemoveSilenceUsingDELETEOK with default headers values
func NewRemoveSilenceUsingDELETEOK() *RemoveSilenceUsingDELETEOK {
	return &RemoveSilenceUsingDELETEOK{}
}

/*
RemoveSilenceUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type RemoveSilenceUsingDELETEOK struct {
	Payload map[string]interface{}
}

// IsSuccess returns true when this remove silence using d e l e t e o k response has a 2xx status code
func (o *RemoveSilenceUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove silence using d e l e t e o k response has a 3xx status code
func (o *RemoveSilenceUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove silence using d e l e t e o k response has a 4xx status code
func (o *RemoveSilenceUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove silence using d e l e t e o k response has a 5xx status code
func (o *RemoveSilenceUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this remove silence using d e l e t e o k response a status code equal to that given
func (o *RemoveSilenceUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the remove silence using d e l e t e o k response
func (o *RemoveSilenceUsingDELETEOK) Code() int {
	return 200
}

func (o *RemoveSilenceUsingDELETEOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceUsingDELETEOK %s", 200, payload)
}

func (o *RemoveSilenceUsingDELETEOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceUsingDELETEOK %s", 200, payload)
}

func (o *RemoveSilenceUsingDELETEOK) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *RemoveSilenceUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveSilenceUsingDELETENoContent creates a RemoveSilenceUsingDELETENoContent with default headers values
func NewRemoveSilenceUsingDELETENoContent() *RemoveSilenceUsingDELETENoContent {
	return &RemoveSilenceUsingDELETENoContent{}
}

/*
RemoveSilenceUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type RemoveSilenceUsingDELETENoContent struct {
}

// IsSuccess returns true when this remove silence using d e l e t e no content response has a 2xx status code
func (o *RemoveSilenceUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove silence using d e l e t e no content response has a 3xx status code
func (o *RemoveSilenceUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove silence using d e l e t e no content response has a 4xx status code
func (o *RemoveSilenceUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove silence using d e l e t e no content response has a 5xx status code
func (o *RemoveSilenceUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this remove silence using d e l e t e no content response a status code equal to that given
func (o *RemoveSilenceUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the remove silence using d e l e t e no content response
func (o *RemoveSilenceUsingDELETENoContent) Code() int {
	return 204
}

func (o *RemoveSilenceUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceUsingDELETENoContent", 204)
}

func (o *RemoveSilenceUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceUsingDELETENoContent", 204)
}

func (o *RemoveSilenceUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveSilenceUsingDELETEUnauthorized creates a RemoveSilenceUsingDELETEUnauthorized with default headers values
func NewRemoveSilenceUsingDELETEUnauthorized() *RemoveSilenceUsingDELETEUnauthorized {
	return &RemoveSilenceUsingDELETEUnauthorized{}
}

/*
RemoveSilenceUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RemoveSilenceUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this remove silence using d e l e t e unauthorized response has a 2xx status code
func (o *RemoveSilenceUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove silence using d e l e t e unauthorized response has a 3xx status code
func (o *RemoveSilenceUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove silence using d e l e t e unauthorized response has a 4xx status code
func (o *RemoveSilenceUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove silence using d e l e t e unauthorized response has a 5xx status code
func (o *RemoveSilenceUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this remove silence using d e l e t e unauthorized response a status code equal to that given
func (o *RemoveSilenceUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the remove silence using d e l e t e unauthorized response
func (o *RemoveSilenceUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *RemoveSilenceUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceUsingDELETEUnauthorized", 401)
}

func (o *RemoveSilenceUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceUsingDELETEUnauthorized", 401)
}

func (o *RemoveSilenceUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveSilenceUsingDELETEForbidden creates a RemoveSilenceUsingDELETEForbidden with default headers values
func NewRemoveSilenceUsingDELETEForbidden() *RemoveSilenceUsingDELETEForbidden {
	return &RemoveSilenceUsingDELETEForbidden{}
}

/*
RemoveSilenceUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RemoveSilenceUsingDELETEForbidden struct {
}

// IsSuccess returns true when this remove silence using d e l e t e forbidden response has a 2xx status code
func (o *RemoveSilenceUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove silence using d e l e t e forbidden response has a 3xx status code
func (o *RemoveSilenceUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove silence using d e l e t e forbidden response has a 4xx status code
func (o *RemoveSilenceUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove silence using d e l e t e forbidden response has a 5xx status code
func (o *RemoveSilenceUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this remove silence using d e l e t e forbidden response a status code equal to that given
func (o *RemoveSilenceUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the remove silence using d e l e t e forbidden response
func (o *RemoveSilenceUsingDELETEForbidden) Code() int {
	return 403
}

func (o *RemoveSilenceUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceUsingDELETEForbidden", 403)
}

func (o *RemoveSilenceUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceUsingDELETEForbidden", 403)
}

func (o *RemoveSilenceUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
