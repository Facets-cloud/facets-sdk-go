// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// SilenceAlertsReader is a Reader for the SilenceAlerts structure.
type SilenceAlertsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SilenceAlertsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSilenceAlertsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSilenceAlertsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSilenceAlertsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewSilenceAlertsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSilenceAlertsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/silence-alerts] silenceAlerts", response, response.Code())
	}
}

// NewSilenceAlertsOK creates a SilenceAlertsOK with default headers values
func NewSilenceAlertsOK() *SilenceAlertsOK {
	return &SilenceAlertsOK{}
}

/*
SilenceAlertsOK describes a response with status code 200, with default header values.

OK
*/
type SilenceAlertsOK struct {
	Payload map[string]interface{}
}

// IsSuccess returns true when this silence alerts o k response has a 2xx status code
func (o *SilenceAlertsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this silence alerts o k response has a 3xx status code
func (o *SilenceAlertsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this silence alerts o k response has a 4xx status code
func (o *SilenceAlertsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this silence alerts o k response has a 5xx status code
func (o *SilenceAlertsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this silence alerts o k response a status code equal to that given
func (o *SilenceAlertsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the silence alerts o k response
func (o *SilenceAlertsOK) Code() int {
	return 200
}

func (o *SilenceAlertsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/silence-alerts][%d] silenceAlertsOK %s", 200, payload)
}

func (o *SilenceAlertsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/silence-alerts][%d] silenceAlertsOK %s", 200, payload)
}

func (o *SilenceAlertsOK) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *SilenceAlertsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSilenceAlertsBadRequest creates a SilenceAlertsBadRequest with default headers values
func NewSilenceAlertsBadRequest() *SilenceAlertsBadRequest {
	return &SilenceAlertsBadRequest{}
}

/*
SilenceAlertsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SilenceAlertsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this silence alerts bad request response has a 2xx status code
func (o *SilenceAlertsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this silence alerts bad request response has a 3xx status code
func (o *SilenceAlertsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this silence alerts bad request response has a 4xx status code
func (o *SilenceAlertsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this silence alerts bad request response has a 5xx status code
func (o *SilenceAlertsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this silence alerts bad request response a status code equal to that given
func (o *SilenceAlertsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the silence alerts bad request response
func (o *SilenceAlertsBadRequest) Code() int {
	return 400
}

func (o *SilenceAlertsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/silence-alerts][%d] silenceAlertsBadRequest %s", 400, payload)
}

func (o *SilenceAlertsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/silence-alerts][%d] silenceAlertsBadRequest %s", 400, payload)
}

func (o *SilenceAlertsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SilenceAlertsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSilenceAlertsNotFound creates a SilenceAlertsNotFound with default headers values
func NewSilenceAlertsNotFound() *SilenceAlertsNotFound {
	return &SilenceAlertsNotFound{}
}

/*
SilenceAlertsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SilenceAlertsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this silence alerts not found response has a 2xx status code
func (o *SilenceAlertsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this silence alerts not found response has a 3xx status code
func (o *SilenceAlertsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this silence alerts not found response has a 4xx status code
func (o *SilenceAlertsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this silence alerts not found response has a 5xx status code
func (o *SilenceAlertsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this silence alerts not found response a status code equal to that given
func (o *SilenceAlertsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the silence alerts not found response
func (o *SilenceAlertsNotFound) Code() int {
	return 404
}

func (o *SilenceAlertsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/silence-alerts][%d] silenceAlertsNotFound %s", 404, payload)
}

func (o *SilenceAlertsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/silence-alerts][%d] silenceAlertsNotFound %s", 404, payload)
}

func (o *SilenceAlertsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SilenceAlertsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSilenceAlertsMethodNotAllowed creates a SilenceAlertsMethodNotAllowed with default headers values
func NewSilenceAlertsMethodNotAllowed() *SilenceAlertsMethodNotAllowed {
	return &SilenceAlertsMethodNotAllowed{}
}

/*
SilenceAlertsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type SilenceAlertsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this silence alerts method not allowed response has a 2xx status code
func (o *SilenceAlertsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this silence alerts method not allowed response has a 3xx status code
func (o *SilenceAlertsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this silence alerts method not allowed response has a 4xx status code
func (o *SilenceAlertsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this silence alerts method not allowed response has a 5xx status code
func (o *SilenceAlertsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this silence alerts method not allowed response a status code equal to that given
func (o *SilenceAlertsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the silence alerts method not allowed response
func (o *SilenceAlertsMethodNotAllowed) Code() int {
	return 405
}

func (o *SilenceAlertsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/silence-alerts][%d] silenceAlertsMethodNotAllowed %s", 405, payload)
}

func (o *SilenceAlertsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/silence-alerts][%d] silenceAlertsMethodNotAllowed %s", 405, payload)
}

func (o *SilenceAlertsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SilenceAlertsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSilenceAlertsInternalServerError creates a SilenceAlertsInternalServerError with default headers values
func NewSilenceAlertsInternalServerError() *SilenceAlertsInternalServerError {
	return &SilenceAlertsInternalServerError{}
}

/*
SilenceAlertsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type SilenceAlertsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this silence alerts internal server error response has a 2xx status code
func (o *SilenceAlertsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this silence alerts internal server error response has a 3xx status code
func (o *SilenceAlertsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this silence alerts internal server error response has a 4xx status code
func (o *SilenceAlertsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this silence alerts internal server error response has a 5xx status code
func (o *SilenceAlertsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this silence alerts internal server error response a status code equal to that given
func (o *SilenceAlertsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the silence alerts internal server error response
func (o *SilenceAlertsInternalServerError) Code() int {
	return 500
}

func (o *SilenceAlertsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/silence-alerts][%d] silenceAlertsInternalServerError %s", 500, payload)
}

func (o *SilenceAlertsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/silence-alerts][%d] silenceAlertsInternalServerError %s", 500, payload)
}

func (o *SilenceAlertsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *SilenceAlertsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
