// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteAvailabilityScheduleUsingDELETEReader is a Reader for the DeleteAvailabilityScheduleUsingDELETE structure.
type DeleteAvailabilityScheduleUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAvailabilityScheduleUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteAvailabilityScheduleUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteAvailabilityScheduleUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteAvailabilityScheduleUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteAvailabilityScheduleUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/clusters/{clusterId}/availability-schedule/{availabilityScheduleId}] deleteAvailabilityScheduleUsingDELETE", response, response.Code())
	}
}

// NewDeleteAvailabilityScheduleUsingDELETEOK creates a DeleteAvailabilityScheduleUsingDELETEOK with default headers values
func NewDeleteAvailabilityScheduleUsingDELETEOK() *DeleteAvailabilityScheduleUsingDELETEOK {
	return &DeleteAvailabilityScheduleUsingDELETEOK{}
}

/*
DeleteAvailabilityScheduleUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteAvailabilityScheduleUsingDELETEOK struct {
}

// IsSuccess returns true when this delete availability schedule using d e l e t e o k response has a 2xx status code
func (o *DeleteAvailabilityScheduleUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete availability schedule using d e l e t e o k response has a 3xx status code
func (o *DeleteAvailabilityScheduleUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete availability schedule using d e l e t e o k response has a 4xx status code
func (o *DeleteAvailabilityScheduleUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete availability schedule using d e l e t e o k response has a 5xx status code
func (o *DeleteAvailabilityScheduleUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete availability schedule using d e l e t e o k response a status code equal to that given
func (o *DeleteAvailabilityScheduleUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete availability schedule using d e l e t e o k response
func (o *DeleteAvailabilityScheduleUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteAvailabilityScheduleUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/availability-schedule/{availabilityScheduleId}][%d] deleteAvailabilityScheduleUsingDELETEOK", 200)
}

func (o *DeleteAvailabilityScheduleUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/availability-schedule/{availabilityScheduleId}][%d] deleteAvailabilityScheduleUsingDELETEOK", 200)
}

func (o *DeleteAvailabilityScheduleUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAvailabilityScheduleUsingDELETENoContent creates a DeleteAvailabilityScheduleUsingDELETENoContent with default headers values
func NewDeleteAvailabilityScheduleUsingDELETENoContent() *DeleteAvailabilityScheduleUsingDELETENoContent {
	return &DeleteAvailabilityScheduleUsingDELETENoContent{}
}

/*
DeleteAvailabilityScheduleUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteAvailabilityScheduleUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete availability schedule using d e l e t e no content response has a 2xx status code
func (o *DeleteAvailabilityScheduleUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete availability schedule using d e l e t e no content response has a 3xx status code
func (o *DeleteAvailabilityScheduleUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete availability schedule using d e l e t e no content response has a 4xx status code
func (o *DeleteAvailabilityScheduleUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete availability schedule using d e l e t e no content response has a 5xx status code
func (o *DeleteAvailabilityScheduleUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete availability schedule using d e l e t e no content response a status code equal to that given
func (o *DeleteAvailabilityScheduleUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete availability schedule using d e l e t e no content response
func (o *DeleteAvailabilityScheduleUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteAvailabilityScheduleUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/availability-schedule/{availabilityScheduleId}][%d] deleteAvailabilityScheduleUsingDELETENoContent", 204)
}

func (o *DeleteAvailabilityScheduleUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/availability-schedule/{availabilityScheduleId}][%d] deleteAvailabilityScheduleUsingDELETENoContent", 204)
}

func (o *DeleteAvailabilityScheduleUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAvailabilityScheduleUsingDELETEUnauthorized creates a DeleteAvailabilityScheduleUsingDELETEUnauthorized with default headers values
func NewDeleteAvailabilityScheduleUsingDELETEUnauthorized() *DeleteAvailabilityScheduleUsingDELETEUnauthorized {
	return &DeleteAvailabilityScheduleUsingDELETEUnauthorized{}
}

/*
DeleteAvailabilityScheduleUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteAvailabilityScheduleUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete availability schedule using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteAvailabilityScheduleUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete availability schedule using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteAvailabilityScheduleUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete availability schedule using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteAvailabilityScheduleUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete availability schedule using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteAvailabilityScheduleUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete availability schedule using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteAvailabilityScheduleUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete availability schedule using d e l e t e unauthorized response
func (o *DeleteAvailabilityScheduleUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteAvailabilityScheduleUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/availability-schedule/{availabilityScheduleId}][%d] deleteAvailabilityScheduleUsingDELETEUnauthorized", 401)
}

func (o *DeleteAvailabilityScheduleUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/availability-schedule/{availabilityScheduleId}][%d] deleteAvailabilityScheduleUsingDELETEUnauthorized", 401)
}

func (o *DeleteAvailabilityScheduleUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAvailabilityScheduleUsingDELETEForbidden creates a DeleteAvailabilityScheduleUsingDELETEForbidden with default headers values
func NewDeleteAvailabilityScheduleUsingDELETEForbidden() *DeleteAvailabilityScheduleUsingDELETEForbidden {
	return &DeleteAvailabilityScheduleUsingDELETEForbidden{}
}

/*
DeleteAvailabilityScheduleUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteAvailabilityScheduleUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete availability schedule using d e l e t e forbidden response has a 2xx status code
func (o *DeleteAvailabilityScheduleUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete availability schedule using d e l e t e forbidden response has a 3xx status code
func (o *DeleteAvailabilityScheduleUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete availability schedule using d e l e t e forbidden response has a 4xx status code
func (o *DeleteAvailabilityScheduleUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete availability schedule using d e l e t e forbidden response has a 5xx status code
func (o *DeleteAvailabilityScheduleUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete availability schedule using d e l e t e forbidden response a status code equal to that given
func (o *DeleteAvailabilityScheduleUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete availability schedule using d e l e t e forbidden response
func (o *DeleteAvailabilityScheduleUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteAvailabilityScheduleUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/availability-schedule/{availabilityScheduleId}][%d] deleteAvailabilityScheduleUsingDELETEForbidden", 403)
}

func (o *DeleteAvailabilityScheduleUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/availability-schedule/{availabilityScheduleId}][%d] deleteAvailabilityScheduleUsingDELETEForbidden", 403)
}

func (o *DeleteAvailabilityScheduleUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
