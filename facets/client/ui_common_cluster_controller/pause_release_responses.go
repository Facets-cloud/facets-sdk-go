// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// PauseReleaseReader is a Reader for the PauseRelease structure.
type PauseReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PauseReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPauseReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPauseReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPauseReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewPauseReleaseMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPauseReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/pause-release] pauseRelease", response, response.Code())
	}
}

// NewPauseReleaseOK creates a PauseReleaseOK with default headers values
func NewPauseReleaseOK() *PauseReleaseOK {
	return &PauseReleaseOK{}
}

/*
PauseReleaseOK describes a response with status code 200, with default header values.

OK
*/
type PauseReleaseOK struct {
	Payload string
}

// IsSuccess returns true when this pause release o k response has a 2xx status code
func (o *PauseReleaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pause release o k response has a 3xx status code
func (o *PauseReleaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause release o k response has a 4xx status code
func (o *PauseReleaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this pause release o k response has a 5xx status code
func (o *PauseReleaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this pause release o k response a status code equal to that given
func (o *PauseReleaseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the pause release o k response
func (o *PauseReleaseOK) Code() int {
	return 200
}

func (o *PauseReleaseOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseOK %s", 200, payload)
}

func (o *PauseReleaseOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseOK %s", 200, payload)
}

func (o *PauseReleaseOK) GetPayload() string {
	return o.Payload
}

func (o *PauseReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPauseReleaseBadRequest creates a PauseReleaseBadRequest with default headers values
func NewPauseReleaseBadRequest() *PauseReleaseBadRequest {
	return &PauseReleaseBadRequest{}
}

/*
PauseReleaseBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PauseReleaseBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this pause release bad request response has a 2xx status code
func (o *PauseReleaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause release bad request response has a 3xx status code
func (o *PauseReleaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause release bad request response has a 4xx status code
func (o *PauseReleaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this pause release bad request response has a 5xx status code
func (o *PauseReleaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this pause release bad request response a status code equal to that given
func (o *PauseReleaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the pause release bad request response
func (o *PauseReleaseBadRequest) Code() int {
	return 400
}

func (o *PauseReleaseBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseBadRequest %s", 400, payload)
}

func (o *PauseReleaseBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseBadRequest %s", 400, payload)
}

func (o *PauseReleaseBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *PauseReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPauseReleaseNotFound creates a PauseReleaseNotFound with default headers values
func NewPauseReleaseNotFound() *PauseReleaseNotFound {
	return &PauseReleaseNotFound{}
}

/*
PauseReleaseNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PauseReleaseNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this pause release not found response has a 2xx status code
func (o *PauseReleaseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause release not found response has a 3xx status code
func (o *PauseReleaseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause release not found response has a 4xx status code
func (o *PauseReleaseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this pause release not found response has a 5xx status code
func (o *PauseReleaseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this pause release not found response a status code equal to that given
func (o *PauseReleaseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the pause release not found response
func (o *PauseReleaseNotFound) Code() int {
	return 404
}

func (o *PauseReleaseNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseNotFound %s", 404, payload)
}

func (o *PauseReleaseNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseNotFound %s", 404, payload)
}

func (o *PauseReleaseNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *PauseReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPauseReleaseMethodNotAllowed creates a PauseReleaseMethodNotAllowed with default headers values
func NewPauseReleaseMethodNotAllowed() *PauseReleaseMethodNotAllowed {
	return &PauseReleaseMethodNotAllowed{}
}

/*
PauseReleaseMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type PauseReleaseMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this pause release method not allowed response has a 2xx status code
func (o *PauseReleaseMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause release method not allowed response has a 3xx status code
func (o *PauseReleaseMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause release method not allowed response has a 4xx status code
func (o *PauseReleaseMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this pause release method not allowed response has a 5xx status code
func (o *PauseReleaseMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this pause release method not allowed response a status code equal to that given
func (o *PauseReleaseMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the pause release method not allowed response
func (o *PauseReleaseMethodNotAllowed) Code() int {
	return 405
}

func (o *PauseReleaseMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseMethodNotAllowed %s", 405, payload)
}

func (o *PauseReleaseMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseMethodNotAllowed %s", 405, payload)
}

func (o *PauseReleaseMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *PauseReleaseMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPauseReleaseInternalServerError creates a PauseReleaseInternalServerError with default headers values
func NewPauseReleaseInternalServerError() *PauseReleaseInternalServerError {
	return &PauseReleaseInternalServerError{}
}

/*
PauseReleaseInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PauseReleaseInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this pause release internal server error response has a 2xx status code
func (o *PauseReleaseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause release internal server error response has a 3xx status code
func (o *PauseReleaseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause release internal server error response has a 4xx status code
func (o *PauseReleaseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this pause release internal server error response has a 5xx status code
func (o *PauseReleaseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this pause release internal server error response a status code equal to that given
func (o *PauseReleaseInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the pause release internal server error response
func (o *PauseReleaseInternalServerError) Code() int {
	return 500
}

func (o *PauseReleaseInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseInternalServerError %s", 500, payload)
}

func (o *PauseReleaseInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseInternalServerError %s", 500, payload)
}

func (o *PauseReleaseInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *PauseReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
