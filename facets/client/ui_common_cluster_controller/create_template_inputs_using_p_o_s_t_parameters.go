// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// NewCreateTemplateInputsUsingPOSTParams creates a new CreateTemplateInputsUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateTemplateInputsUsingPOSTParams() *CreateTemplateInputsUsingPOSTParams {
	return &CreateTemplateInputsUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateTemplateInputsUsingPOSTParamsWithTimeout creates a new CreateTemplateInputsUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewCreateTemplateInputsUsingPOSTParamsWithTimeout(timeout time.Duration) *CreateTemplateInputsUsingPOSTParams {
	return &CreateTemplateInputsUsingPOSTParams{
		timeout: timeout,
	}
}

// NewCreateTemplateInputsUsingPOSTParamsWithContext creates a new CreateTemplateInputsUsingPOSTParams object
// with the ability to set a context for a request.
func NewCreateTemplateInputsUsingPOSTParamsWithContext(ctx context.Context) *CreateTemplateInputsUsingPOSTParams {
	return &CreateTemplateInputsUsingPOSTParams{
		Context: ctx,
	}
}

// NewCreateTemplateInputsUsingPOSTParamsWithHTTPClient creates a new CreateTemplateInputsUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateTemplateInputsUsingPOSTParamsWithHTTPClient(client *http.Client) *CreateTemplateInputsUsingPOSTParams {
	return &CreateTemplateInputsUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
CreateTemplateInputsUsingPOSTParams contains all the parameters to send to the API endpoint

	for the create template inputs using p o s t operation.

	Typically these are written to a http.Request.
*/
type CreateTemplateInputsUsingPOSTParams struct {

	/* ClusterID.

	   clusterId
	*/
	ClusterID string

	/* InputType.

	   inputType
	*/
	InputType string

	/* TemplateInputs.

	   templateInputs
	*/
	TemplateInputs []*models.StackTemplateInput

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create template inputs using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateTemplateInputsUsingPOSTParams) WithDefaults() *CreateTemplateInputsUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create template inputs using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateTemplateInputsUsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create template inputs using p o s t params
func (o *CreateTemplateInputsUsingPOSTParams) WithTimeout(timeout time.Duration) *CreateTemplateInputsUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create template inputs using p o s t params
func (o *CreateTemplateInputsUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create template inputs using p o s t params
func (o *CreateTemplateInputsUsingPOSTParams) WithContext(ctx context.Context) *CreateTemplateInputsUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create template inputs using p o s t params
func (o *CreateTemplateInputsUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create template inputs using p o s t params
func (o *CreateTemplateInputsUsingPOSTParams) WithHTTPClient(client *http.Client) *CreateTemplateInputsUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create template inputs using p o s t params
func (o *CreateTemplateInputsUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the create template inputs using p o s t params
func (o *CreateTemplateInputsUsingPOSTParams) WithClusterID(clusterID string) *CreateTemplateInputsUsingPOSTParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the create template inputs using p o s t params
func (o *CreateTemplateInputsUsingPOSTParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithInputType adds the inputType to the create template inputs using p o s t params
func (o *CreateTemplateInputsUsingPOSTParams) WithInputType(inputType string) *CreateTemplateInputsUsingPOSTParams {
	o.SetInputType(inputType)
	return o
}

// SetInputType adds the inputType to the create template inputs using p o s t params
func (o *CreateTemplateInputsUsingPOSTParams) SetInputType(inputType string) {
	o.InputType = inputType
}

// WithTemplateInputs adds the templateInputs to the create template inputs using p o s t params
func (o *CreateTemplateInputsUsingPOSTParams) WithTemplateInputs(templateInputs []*models.StackTemplateInput) *CreateTemplateInputsUsingPOSTParams {
	o.SetTemplateInputs(templateInputs)
	return o
}

// SetTemplateInputs adds the templateInputs to the create template inputs using p o s t params
func (o *CreateTemplateInputsUsingPOSTParams) SetTemplateInputs(templateInputs []*models.StackTemplateInput) {
	o.TemplateInputs = templateInputs
}

// WriteToRequest writes these params to a swagger request
func (o *CreateTemplateInputsUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID); err != nil {
		return err
	}

	// path param inputType
	if err := r.SetPathParam("inputType", o.InputType); err != nil {
		return err
	}
	if o.TemplateInputs != nil {
		if err := r.SetBodyParam(o.TemplateInputs); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
