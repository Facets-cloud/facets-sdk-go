// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RemoveSilenceReader is a Reader for the RemoveSilence structure.
type RemoveSilenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveSilenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveSilenceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveSilenceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRemoveSilenceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRemoveSilenceMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoveSilenceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}] removeSilence", response, response.Code())
	}
}

// NewRemoveSilenceOK creates a RemoveSilenceOK with default headers values
func NewRemoveSilenceOK() *RemoveSilenceOK {
	return &RemoveSilenceOK{}
}

/*
RemoveSilenceOK describes a response with status code 200, with default header values.

OK
*/
type RemoveSilenceOK struct {
	Payload map[string]interface{}
}

// IsSuccess returns true when this remove silence o k response has a 2xx status code
func (o *RemoveSilenceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove silence o k response has a 3xx status code
func (o *RemoveSilenceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove silence o k response has a 4xx status code
func (o *RemoveSilenceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove silence o k response has a 5xx status code
func (o *RemoveSilenceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this remove silence o k response a status code equal to that given
func (o *RemoveSilenceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the remove silence o k response
func (o *RemoveSilenceOK) Code() int {
	return 200
}

func (o *RemoveSilenceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceOK %s", 200, payload)
}

func (o *RemoveSilenceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceOK %s", 200, payload)
}

func (o *RemoveSilenceOK) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *RemoveSilenceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveSilenceBadRequest creates a RemoveSilenceBadRequest with default headers values
func NewRemoveSilenceBadRequest() *RemoveSilenceBadRequest {
	return &RemoveSilenceBadRequest{}
}

/*
RemoveSilenceBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RemoveSilenceBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this remove silence bad request response has a 2xx status code
func (o *RemoveSilenceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove silence bad request response has a 3xx status code
func (o *RemoveSilenceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove silence bad request response has a 4xx status code
func (o *RemoveSilenceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove silence bad request response has a 5xx status code
func (o *RemoveSilenceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this remove silence bad request response a status code equal to that given
func (o *RemoveSilenceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the remove silence bad request response
func (o *RemoveSilenceBadRequest) Code() int {
	return 400
}

func (o *RemoveSilenceBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceBadRequest %s", 400, payload)
}

func (o *RemoveSilenceBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceBadRequest %s", 400, payload)
}

func (o *RemoveSilenceBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RemoveSilenceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveSilenceNotFound creates a RemoveSilenceNotFound with default headers values
func NewRemoveSilenceNotFound() *RemoveSilenceNotFound {
	return &RemoveSilenceNotFound{}
}

/*
RemoveSilenceNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RemoveSilenceNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this remove silence not found response has a 2xx status code
func (o *RemoveSilenceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove silence not found response has a 3xx status code
func (o *RemoveSilenceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove silence not found response has a 4xx status code
func (o *RemoveSilenceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove silence not found response has a 5xx status code
func (o *RemoveSilenceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this remove silence not found response a status code equal to that given
func (o *RemoveSilenceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the remove silence not found response
func (o *RemoveSilenceNotFound) Code() int {
	return 404
}

func (o *RemoveSilenceNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceNotFound %s", 404, payload)
}

func (o *RemoveSilenceNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceNotFound %s", 404, payload)
}

func (o *RemoveSilenceNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RemoveSilenceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveSilenceMethodNotAllowed creates a RemoveSilenceMethodNotAllowed with default headers values
func NewRemoveSilenceMethodNotAllowed() *RemoveSilenceMethodNotAllowed {
	return &RemoveSilenceMethodNotAllowed{}
}

/*
RemoveSilenceMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RemoveSilenceMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this remove silence method not allowed response has a 2xx status code
func (o *RemoveSilenceMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove silence method not allowed response has a 3xx status code
func (o *RemoveSilenceMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove silence method not allowed response has a 4xx status code
func (o *RemoveSilenceMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove silence method not allowed response has a 5xx status code
func (o *RemoveSilenceMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this remove silence method not allowed response a status code equal to that given
func (o *RemoveSilenceMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the remove silence method not allowed response
func (o *RemoveSilenceMethodNotAllowed) Code() int {
	return 405
}

func (o *RemoveSilenceMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceMethodNotAllowed %s", 405, payload)
}

func (o *RemoveSilenceMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceMethodNotAllowed %s", 405, payload)
}

func (o *RemoveSilenceMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RemoveSilenceMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveSilenceInternalServerError creates a RemoveSilenceInternalServerError with default headers values
func NewRemoveSilenceInternalServerError() *RemoveSilenceInternalServerError {
	return &RemoveSilenceInternalServerError{}
}

/*
RemoveSilenceInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RemoveSilenceInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this remove silence internal server error response has a 2xx status code
func (o *RemoveSilenceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove silence internal server error response has a 3xx status code
func (o *RemoveSilenceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove silence internal server error response has a 4xx status code
func (o *RemoveSilenceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove silence internal server error response has a 5xx status code
func (o *RemoveSilenceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remove silence internal server error response a status code equal to that given
func (o *RemoveSilenceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the remove silence internal server error response
func (o *RemoveSilenceInternalServerError) Code() int {
	return 500
}

func (o *RemoveSilenceInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceInternalServerError %s", 500, payload)
}

func (o *RemoveSilenceInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}][%d] removeSilenceInternalServerError %s", 500, payload)
}

func (o *RemoveSilenceInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RemoveSilenceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
