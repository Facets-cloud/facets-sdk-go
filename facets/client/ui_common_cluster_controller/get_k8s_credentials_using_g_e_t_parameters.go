// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetK8sCredentialsUsingGETParams creates a new GetK8sCredentialsUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetK8sCredentialsUsingGETParams() *GetK8sCredentialsUsingGETParams {
	return &GetK8sCredentialsUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetK8sCredentialsUsingGETParamsWithTimeout creates a new GetK8sCredentialsUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetK8sCredentialsUsingGETParamsWithTimeout(timeout time.Duration) *GetK8sCredentialsUsingGETParams {
	return &GetK8sCredentialsUsingGETParams{
		timeout: timeout,
	}
}

// NewGetK8sCredentialsUsingGETParamsWithContext creates a new GetK8sCredentialsUsingGETParams object
// with the ability to set a context for a request.
func NewGetK8sCredentialsUsingGETParamsWithContext(ctx context.Context) *GetK8sCredentialsUsingGETParams {
	return &GetK8sCredentialsUsingGETParams{
		Context: ctx,
	}
}

// NewGetK8sCredentialsUsingGETParamsWithHTTPClient creates a new GetK8sCredentialsUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetK8sCredentialsUsingGETParamsWithHTTPClient(client *http.Client) *GetK8sCredentialsUsingGETParams {
	return &GetK8sCredentialsUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetK8sCredentialsUsingGETParams contains all the parameters to send to the API endpoint

	for the get k8s credentials using g e t operation.

	Typically these are written to a http.Request.
*/
type GetK8sCredentialsUsingGETParams struct {

	/* ClusterID.

	   clusterId
	*/
	ClusterID string

	/* RefreshPermissions.

	   refreshPermissions

	   Default: true
	*/
	RefreshPermissions *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get k8s credentials using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetK8sCredentialsUsingGETParams) WithDefaults() *GetK8sCredentialsUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get k8s credentials using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetK8sCredentialsUsingGETParams) SetDefaults() {
	var (
		refreshPermissionsDefault = bool(true)
	)

	val := GetK8sCredentialsUsingGETParams{
		RefreshPermissions: &refreshPermissionsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get k8s credentials using g e t params
func (o *GetK8sCredentialsUsingGETParams) WithTimeout(timeout time.Duration) *GetK8sCredentialsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get k8s credentials using g e t params
func (o *GetK8sCredentialsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get k8s credentials using g e t params
func (o *GetK8sCredentialsUsingGETParams) WithContext(ctx context.Context) *GetK8sCredentialsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get k8s credentials using g e t params
func (o *GetK8sCredentialsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get k8s credentials using g e t params
func (o *GetK8sCredentialsUsingGETParams) WithHTTPClient(client *http.Client) *GetK8sCredentialsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get k8s credentials using g e t params
func (o *GetK8sCredentialsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the get k8s credentials using g e t params
func (o *GetK8sCredentialsUsingGETParams) WithClusterID(clusterID string) *GetK8sCredentialsUsingGETParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the get k8s credentials using g e t params
func (o *GetK8sCredentialsUsingGETParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithRefreshPermissions adds the refreshPermissions to the get k8s credentials using g e t params
func (o *GetK8sCredentialsUsingGETParams) WithRefreshPermissions(refreshPermissions *bool) *GetK8sCredentialsUsingGETParams {
	o.SetRefreshPermissions(refreshPermissions)
	return o
}

// SetRefreshPermissions adds the refreshPermissions to the get k8s credentials using g e t params
func (o *GetK8sCredentialsUsingGETParams) SetRefreshPermissions(refreshPermissions *bool) {
	o.RefreshPermissions = refreshPermissions
}

// WriteToRequest writes these params to a swagger request
func (o *GetK8sCredentialsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID); err != nil {
		return err
	}

	if o.RefreshPermissions != nil {

		// query param refreshPermissions
		var qrRefreshPermissions bool

		if o.RefreshPermissions != nil {
			qrRefreshPermissions = *o.RefreshPermissions
		}
		qRefreshPermissions := swag.FormatBool(qrRefreshPermissions)
		if qRefreshPermissions != "" {

			if err := r.SetQueryParam("refreshPermissions", qRefreshPermissions); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
