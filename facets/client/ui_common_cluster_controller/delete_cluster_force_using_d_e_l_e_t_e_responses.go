// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteClusterForceUsingDELETEReader is a Reader for the DeleteClusterForceUsingDELETE structure.
type DeleteClusterForceUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteClusterForceUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteClusterForceUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteClusterForceUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteClusterForceUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteClusterForceUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/clusters/{clusterId}/force] deleteClusterForceUsingDELETE", response, response.Code())
	}
}

// NewDeleteClusterForceUsingDELETEOK creates a DeleteClusterForceUsingDELETEOK with default headers values
func NewDeleteClusterForceUsingDELETEOK() *DeleteClusterForceUsingDELETEOK {
	return &DeleteClusterForceUsingDELETEOK{}
}

/*
DeleteClusterForceUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteClusterForceUsingDELETEOK struct {
	Payload bool
}

// IsSuccess returns true when this delete cluster force using d e l e t e o k response has a 2xx status code
func (o *DeleteClusterForceUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete cluster force using d e l e t e o k response has a 3xx status code
func (o *DeleteClusterForceUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cluster force using d e l e t e o k response has a 4xx status code
func (o *DeleteClusterForceUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete cluster force using d e l e t e o k response has a 5xx status code
func (o *DeleteClusterForceUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cluster force using d e l e t e o k response a status code equal to that given
func (o *DeleteClusterForceUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete cluster force using d e l e t e o k response
func (o *DeleteClusterForceUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteClusterForceUsingDELETEOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/force][%d] deleteClusterForceUsingDELETEOK %s", 200, payload)
}

func (o *DeleteClusterForceUsingDELETEOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/force][%d] deleteClusterForceUsingDELETEOK %s", 200, payload)
}

func (o *DeleteClusterForceUsingDELETEOK) GetPayload() bool {
	return o.Payload
}

func (o *DeleteClusterForceUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteClusterForceUsingDELETENoContent creates a DeleteClusterForceUsingDELETENoContent with default headers values
func NewDeleteClusterForceUsingDELETENoContent() *DeleteClusterForceUsingDELETENoContent {
	return &DeleteClusterForceUsingDELETENoContent{}
}

/*
DeleteClusterForceUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteClusterForceUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete cluster force using d e l e t e no content response has a 2xx status code
func (o *DeleteClusterForceUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete cluster force using d e l e t e no content response has a 3xx status code
func (o *DeleteClusterForceUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cluster force using d e l e t e no content response has a 4xx status code
func (o *DeleteClusterForceUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete cluster force using d e l e t e no content response has a 5xx status code
func (o *DeleteClusterForceUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cluster force using d e l e t e no content response a status code equal to that given
func (o *DeleteClusterForceUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete cluster force using d e l e t e no content response
func (o *DeleteClusterForceUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteClusterForceUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/force][%d] deleteClusterForceUsingDELETENoContent", 204)
}

func (o *DeleteClusterForceUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/force][%d] deleteClusterForceUsingDELETENoContent", 204)
}

func (o *DeleteClusterForceUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteClusterForceUsingDELETEUnauthorized creates a DeleteClusterForceUsingDELETEUnauthorized with default headers values
func NewDeleteClusterForceUsingDELETEUnauthorized() *DeleteClusterForceUsingDELETEUnauthorized {
	return &DeleteClusterForceUsingDELETEUnauthorized{}
}

/*
DeleteClusterForceUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteClusterForceUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete cluster force using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteClusterForceUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete cluster force using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteClusterForceUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cluster force using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteClusterForceUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete cluster force using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteClusterForceUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cluster force using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteClusterForceUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete cluster force using d e l e t e unauthorized response
func (o *DeleteClusterForceUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteClusterForceUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/force][%d] deleteClusterForceUsingDELETEUnauthorized", 401)
}

func (o *DeleteClusterForceUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/force][%d] deleteClusterForceUsingDELETEUnauthorized", 401)
}

func (o *DeleteClusterForceUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteClusterForceUsingDELETEForbidden creates a DeleteClusterForceUsingDELETEForbidden with default headers values
func NewDeleteClusterForceUsingDELETEForbidden() *DeleteClusterForceUsingDELETEForbidden {
	return &DeleteClusterForceUsingDELETEForbidden{}
}

/*
DeleteClusterForceUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteClusterForceUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete cluster force using d e l e t e forbidden response has a 2xx status code
func (o *DeleteClusterForceUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete cluster force using d e l e t e forbidden response has a 3xx status code
func (o *DeleteClusterForceUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cluster force using d e l e t e forbidden response has a 4xx status code
func (o *DeleteClusterForceUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete cluster force using d e l e t e forbidden response has a 5xx status code
func (o *DeleteClusterForceUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cluster force using d e l e t e forbidden response a status code equal to that given
func (o *DeleteClusterForceUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete cluster force using d e l e t e forbidden response
func (o *DeleteClusterForceUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteClusterForceUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/force][%d] deleteClusterForceUsingDELETEForbidden", 403)
}

func (o *DeleteClusterForceUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/force][%d] deleteClusterForceUsingDELETEForbidden", 403)
}

func (o *DeleteClusterForceUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
