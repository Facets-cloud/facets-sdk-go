// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DetachImageUsingDELETEReader is a Reader for the DetachImageUsingDELETE structure.
type DetachImageUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DetachImageUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDetachImageUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDetachImageUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDetachImageUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDetachImageUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage] detachImageUsingDELETE", response, response.Code())
	}
}

// NewDetachImageUsingDELETEOK creates a DetachImageUsingDELETEOK with default headers values
func NewDetachImageUsingDELETEOK() *DetachImageUsingDELETEOK {
	return &DetachImageUsingDELETEOK{}
}

/*
DetachImageUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DetachImageUsingDELETEOK struct {
}

// IsSuccess returns true when this detach image using d e l e t e o k response has a 2xx status code
func (o *DetachImageUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this detach image using d e l e t e o k response has a 3xx status code
func (o *DetachImageUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach image using d e l e t e o k response has a 4xx status code
func (o *DetachImageUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this detach image using d e l e t e o k response has a 5xx status code
func (o *DetachImageUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this detach image using d e l e t e o k response a status code equal to that given
func (o *DetachImageUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the detach image using d e l e t e o k response
func (o *DetachImageUsingDELETEOK) Code() int {
	return 200
}

func (o *DetachImageUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageUsingDELETEOK", 200)
}

func (o *DetachImageUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageUsingDELETEOK", 200)
}

func (o *DetachImageUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDetachImageUsingDELETENoContent creates a DetachImageUsingDELETENoContent with default headers values
func NewDetachImageUsingDELETENoContent() *DetachImageUsingDELETENoContent {
	return &DetachImageUsingDELETENoContent{}
}

/*
DetachImageUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DetachImageUsingDELETENoContent struct {
}

// IsSuccess returns true when this detach image using d e l e t e no content response has a 2xx status code
func (o *DetachImageUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this detach image using d e l e t e no content response has a 3xx status code
func (o *DetachImageUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach image using d e l e t e no content response has a 4xx status code
func (o *DetachImageUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this detach image using d e l e t e no content response has a 5xx status code
func (o *DetachImageUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this detach image using d e l e t e no content response a status code equal to that given
func (o *DetachImageUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the detach image using d e l e t e no content response
func (o *DetachImageUsingDELETENoContent) Code() int {
	return 204
}

func (o *DetachImageUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageUsingDELETENoContent", 204)
}

func (o *DetachImageUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageUsingDELETENoContent", 204)
}

func (o *DetachImageUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDetachImageUsingDELETEUnauthorized creates a DetachImageUsingDELETEUnauthorized with default headers values
func NewDetachImageUsingDELETEUnauthorized() *DetachImageUsingDELETEUnauthorized {
	return &DetachImageUsingDELETEUnauthorized{}
}

/*
DetachImageUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DetachImageUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this detach image using d e l e t e unauthorized response has a 2xx status code
func (o *DetachImageUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detach image using d e l e t e unauthorized response has a 3xx status code
func (o *DetachImageUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach image using d e l e t e unauthorized response has a 4xx status code
func (o *DetachImageUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this detach image using d e l e t e unauthorized response has a 5xx status code
func (o *DetachImageUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this detach image using d e l e t e unauthorized response a status code equal to that given
func (o *DetachImageUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the detach image using d e l e t e unauthorized response
func (o *DetachImageUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DetachImageUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageUsingDELETEUnauthorized", 401)
}

func (o *DetachImageUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageUsingDELETEUnauthorized", 401)
}

func (o *DetachImageUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDetachImageUsingDELETEForbidden creates a DetachImageUsingDELETEForbidden with default headers values
func NewDetachImageUsingDELETEForbidden() *DetachImageUsingDELETEForbidden {
	return &DetachImageUsingDELETEForbidden{}
}

/*
DetachImageUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DetachImageUsingDELETEForbidden struct {
}

// IsSuccess returns true when this detach image using d e l e t e forbidden response has a 2xx status code
func (o *DetachImageUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detach image using d e l e t e forbidden response has a 3xx status code
func (o *DetachImageUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach image using d e l e t e forbidden response has a 4xx status code
func (o *DetachImageUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this detach image using d e l e t e forbidden response has a 5xx status code
func (o *DetachImageUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this detach image using d e l e t e forbidden response a status code equal to that given
func (o *DetachImageUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the detach image using d e l e t e forbidden response
func (o *DetachImageUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DetachImageUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageUsingDELETEForbidden", 403)
}

func (o *DetachImageUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageUsingDELETEForbidden", 403)
}

func (o *DetachImageUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
