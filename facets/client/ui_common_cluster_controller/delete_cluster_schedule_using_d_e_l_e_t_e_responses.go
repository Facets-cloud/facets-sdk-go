// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteClusterScheduleUsingDELETEReader is a Reader for the DeleteClusterScheduleUsingDELETE structure.
type DeleteClusterScheduleUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteClusterScheduleUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteClusterScheduleUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteClusterScheduleUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteClusterScheduleUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteClusterScheduleUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/clusters/{clusterId}/schedule/{clusterScheduleId}] deleteClusterScheduleUsingDELETE", response, response.Code())
	}
}

// NewDeleteClusterScheduleUsingDELETEOK creates a DeleteClusterScheduleUsingDELETEOK with default headers values
func NewDeleteClusterScheduleUsingDELETEOK() *DeleteClusterScheduleUsingDELETEOK {
	return &DeleteClusterScheduleUsingDELETEOK{}
}

/*
DeleteClusterScheduleUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteClusterScheduleUsingDELETEOK struct {
	Payload []*models.ClusterSchedule
}

// IsSuccess returns true when this delete cluster schedule using d e l e t e o k response has a 2xx status code
func (o *DeleteClusterScheduleUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete cluster schedule using d e l e t e o k response has a 3xx status code
func (o *DeleteClusterScheduleUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cluster schedule using d e l e t e o k response has a 4xx status code
func (o *DeleteClusterScheduleUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete cluster schedule using d e l e t e o k response has a 5xx status code
func (o *DeleteClusterScheduleUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cluster schedule using d e l e t e o k response a status code equal to that given
func (o *DeleteClusterScheduleUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete cluster schedule using d e l e t e o k response
func (o *DeleteClusterScheduleUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteClusterScheduleUsingDELETEOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/schedule/{clusterScheduleId}][%d] deleteClusterScheduleUsingDELETEOK %s", 200, payload)
}

func (o *DeleteClusterScheduleUsingDELETEOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/schedule/{clusterScheduleId}][%d] deleteClusterScheduleUsingDELETEOK %s", 200, payload)
}

func (o *DeleteClusterScheduleUsingDELETEOK) GetPayload() []*models.ClusterSchedule {
	return o.Payload
}

func (o *DeleteClusterScheduleUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteClusterScheduleUsingDELETENoContent creates a DeleteClusterScheduleUsingDELETENoContent with default headers values
func NewDeleteClusterScheduleUsingDELETENoContent() *DeleteClusterScheduleUsingDELETENoContent {
	return &DeleteClusterScheduleUsingDELETENoContent{}
}

/*
DeleteClusterScheduleUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteClusterScheduleUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete cluster schedule using d e l e t e no content response has a 2xx status code
func (o *DeleteClusterScheduleUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete cluster schedule using d e l e t e no content response has a 3xx status code
func (o *DeleteClusterScheduleUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cluster schedule using d e l e t e no content response has a 4xx status code
func (o *DeleteClusterScheduleUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete cluster schedule using d e l e t e no content response has a 5xx status code
func (o *DeleteClusterScheduleUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cluster schedule using d e l e t e no content response a status code equal to that given
func (o *DeleteClusterScheduleUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete cluster schedule using d e l e t e no content response
func (o *DeleteClusterScheduleUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteClusterScheduleUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/schedule/{clusterScheduleId}][%d] deleteClusterScheduleUsingDELETENoContent", 204)
}

func (o *DeleteClusterScheduleUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/schedule/{clusterScheduleId}][%d] deleteClusterScheduleUsingDELETENoContent", 204)
}

func (o *DeleteClusterScheduleUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteClusterScheduleUsingDELETEUnauthorized creates a DeleteClusterScheduleUsingDELETEUnauthorized with default headers values
func NewDeleteClusterScheduleUsingDELETEUnauthorized() *DeleteClusterScheduleUsingDELETEUnauthorized {
	return &DeleteClusterScheduleUsingDELETEUnauthorized{}
}

/*
DeleteClusterScheduleUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteClusterScheduleUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete cluster schedule using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteClusterScheduleUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete cluster schedule using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteClusterScheduleUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cluster schedule using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteClusterScheduleUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete cluster schedule using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteClusterScheduleUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cluster schedule using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteClusterScheduleUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete cluster schedule using d e l e t e unauthorized response
func (o *DeleteClusterScheduleUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteClusterScheduleUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/schedule/{clusterScheduleId}][%d] deleteClusterScheduleUsingDELETEUnauthorized", 401)
}

func (o *DeleteClusterScheduleUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/schedule/{clusterScheduleId}][%d] deleteClusterScheduleUsingDELETEUnauthorized", 401)
}

func (o *DeleteClusterScheduleUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteClusterScheduleUsingDELETEForbidden creates a DeleteClusterScheduleUsingDELETEForbidden with default headers values
func NewDeleteClusterScheduleUsingDELETEForbidden() *DeleteClusterScheduleUsingDELETEForbidden {
	return &DeleteClusterScheduleUsingDELETEForbidden{}
}

/*
DeleteClusterScheduleUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteClusterScheduleUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete cluster schedule using d e l e t e forbidden response has a 2xx status code
func (o *DeleteClusterScheduleUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete cluster schedule using d e l e t e forbidden response has a 3xx status code
func (o *DeleteClusterScheduleUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cluster schedule using d e l e t e forbidden response has a 4xx status code
func (o *DeleteClusterScheduleUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete cluster schedule using d e l e t e forbidden response has a 5xx status code
func (o *DeleteClusterScheduleUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cluster schedule using d e l e t e forbidden response a status code equal to that given
func (o *DeleteClusterScheduleUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete cluster schedule using d e l e t e forbidden response
func (o *DeleteClusterScheduleUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteClusterScheduleUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/schedule/{clusterScheduleId}][%d] deleteClusterScheduleUsingDELETEForbidden", 403)
}

func (o *DeleteClusterScheduleUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/schedule/{clusterScheduleId}][%d] deleteClusterScheduleUsingDELETEForbidden", 403)
}

func (o *DeleteClusterScheduleUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
