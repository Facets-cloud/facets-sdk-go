// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// EnableClusterTaskUsingPOSTReader is a Reader for the EnableClusterTaskUsingPOST structure.
type EnableClusterTaskUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnableClusterTaskUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnableClusterTaskUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewEnableClusterTaskUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewEnableClusterTaskUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEnableClusterTaskUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEnableClusterTaskUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/clusterTask/enable] enableClusterTaskUsingPOST", response, response.Code())
	}
}

// NewEnableClusterTaskUsingPOSTOK creates a EnableClusterTaskUsingPOSTOK with default headers values
func NewEnableClusterTaskUsingPOSTOK() *EnableClusterTaskUsingPOSTOK {
	return &EnableClusterTaskUsingPOSTOK{}
}

/*
EnableClusterTaskUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type EnableClusterTaskUsingPOSTOK struct {
	Payload *models.ClusterTask
}

// IsSuccess returns true when this enable cluster task using p o s t o k response has a 2xx status code
func (o *EnableClusterTaskUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enable cluster task using p o s t o k response has a 3xx status code
func (o *EnableClusterTaskUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable cluster task using p o s t o k response has a 4xx status code
func (o *EnableClusterTaskUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable cluster task using p o s t o k response has a 5xx status code
func (o *EnableClusterTaskUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this enable cluster task using p o s t o k response a status code equal to that given
func (o *EnableClusterTaskUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the enable cluster task using p o s t o k response
func (o *EnableClusterTaskUsingPOSTOK) Code() int {
	return 200
}

func (o *EnableClusterTaskUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/clusterTask/enable][%d] enableClusterTaskUsingPOSTOK %s", 200, payload)
}

func (o *EnableClusterTaskUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/clusterTask/enable][%d] enableClusterTaskUsingPOSTOK %s", 200, payload)
}

func (o *EnableClusterTaskUsingPOSTOK) GetPayload() *models.ClusterTask {
	return o.Payload
}

func (o *EnableClusterTaskUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ClusterTask)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableClusterTaskUsingPOSTCreated creates a EnableClusterTaskUsingPOSTCreated with default headers values
func NewEnableClusterTaskUsingPOSTCreated() *EnableClusterTaskUsingPOSTCreated {
	return &EnableClusterTaskUsingPOSTCreated{}
}

/*
EnableClusterTaskUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type EnableClusterTaskUsingPOSTCreated struct {
}

// IsSuccess returns true when this enable cluster task using p o s t created response has a 2xx status code
func (o *EnableClusterTaskUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enable cluster task using p o s t created response has a 3xx status code
func (o *EnableClusterTaskUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable cluster task using p o s t created response has a 4xx status code
func (o *EnableClusterTaskUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable cluster task using p o s t created response has a 5xx status code
func (o *EnableClusterTaskUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this enable cluster task using p o s t created response a status code equal to that given
func (o *EnableClusterTaskUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the enable cluster task using p o s t created response
func (o *EnableClusterTaskUsingPOSTCreated) Code() int {
	return 201
}

func (o *EnableClusterTaskUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/clusterTask/enable][%d] enableClusterTaskUsingPOSTCreated", 201)
}

func (o *EnableClusterTaskUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/clusterTask/enable][%d] enableClusterTaskUsingPOSTCreated", 201)
}

func (o *EnableClusterTaskUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableClusterTaskUsingPOSTUnauthorized creates a EnableClusterTaskUsingPOSTUnauthorized with default headers values
func NewEnableClusterTaskUsingPOSTUnauthorized() *EnableClusterTaskUsingPOSTUnauthorized {
	return &EnableClusterTaskUsingPOSTUnauthorized{}
}

/*
EnableClusterTaskUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type EnableClusterTaskUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this enable cluster task using p o s t unauthorized response has a 2xx status code
func (o *EnableClusterTaskUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable cluster task using p o s t unauthorized response has a 3xx status code
func (o *EnableClusterTaskUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable cluster task using p o s t unauthorized response has a 4xx status code
func (o *EnableClusterTaskUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable cluster task using p o s t unauthorized response has a 5xx status code
func (o *EnableClusterTaskUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this enable cluster task using p o s t unauthorized response a status code equal to that given
func (o *EnableClusterTaskUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the enable cluster task using p o s t unauthorized response
func (o *EnableClusterTaskUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *EnableClusterTaskUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/clusterTask/enable][%d] enableClusterTaskUsingPOSTUnauthorized", 401)
}

func (o *EnableClusterTaskUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/clusterTask/enable][%d] enableClusterTaskUsingPOSTUnauthorized", 401)
}

func (o *EnableClusterTaskUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableClusterTaskUsingPOSTForbidden creates a EnableClusterTaskUsingPOSTForbidden with default headers values
func NewEnableClusterTaskUsingPOSTForbidden() *EnableClusterTaskUsingPOSTForbidden {
	return &EnableClusterTaskUsingPOSTForbidden{}
}

/*
EnableClusterTaskUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EnableClusterTaskUsingPOSTForbidden struct {
}

// IsSuccess returns true when this enable cluster task using p o s t forbidden response has a 2xx status code
func (o *EnableClusterTaskUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable cluster task using p o s t forbidden response has a 3xx status code
func (o *EnableClusterTaskUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable cluster task using p o s t forbidden response has a 4xx status code
func (o *EnableClusterTaskUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable cluster task using p o s t forbidden response has a 5xx status code
func (o *EnableClusterTaskUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this enable cluster task using p o s t forbidden response a status code equal to that given
func (o *EnableClusterTaskUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the enable cluster task using p o s t forbidden response
func (o *EnableClusterTaskUsingPOSTForbidden) Code() int {
	return 403
}

func (o *EnableClusterTaskUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/clusterTask/enable][%d] enableClusterTaskUsingPOSTForbidden", 403)
}

func (o *EnableClusterTaskUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/clusterTask/enable][%d] enableClusterTaskUsingPOSTForbidden", 403)
}

func (o *EnableClusterTaskUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableClusterTaskUsingPOSTNotFound creates a EnableClusterTaskUsingPOSTNotFound with default headers values
func NewEnableClusterTaskUsingPOSTNotFound() *EnableClusterTaskUsingPOSTNotFound {
	return &EnableClusterTaskUsingPOSTNotFound{}
}

/*
EnableClusterTaskUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type EnableClusterTaskUsingPOSTNotFound struct {
}

// IsSuccess returns true when this enable cluster task using p o s t not found response has a 2xx status code
func (o *EnableClusterTaskUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable cluster task using p o s t not found response has a 3xx status code
func (o *EnableClusterTaskUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable cluster task using p o s t not found response has a 4xx status code
func (o *EnableClusterTaskUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable cluster task using p o s t not found response has a 5xx status code
func (o *EnableClusterTaskUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this enable cluster task using p o s t not found response a status code equal to that given
func (o *EnableClusterTaskUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the enable cluster task using p o s t not found response
func (o *EnableClusterTaskUsingPOSTNotFound) Code() int {
	return 404
}

func (o *EnableClusterTaskUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/clusterTask/enable][%d] enableClusterTaskUsingPOSTNotFound", 404)
}

func (o *EnableClusterTaskUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/clusterTask/enable][%d] enableClusterTaskUsingPOSTNotFound", 404)
}

func (o *EnableClusterTaskUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
