// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// NewCreateAvailabilityScheduleUsingPOSTParams creates a new CreateAvailabilityScheduleUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateAvailabilityScheduleUsingPOSTParams() *CreateAvailabilityScheduleUsingPOSTParams {
	return &CreateAvailabilityScheduleUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateAvailabilityScheduleUsingPOSTParamsWithTimeout creates a new CreateAvailabilityScheduleUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewCreateAvailabilityScheduleUsingPOSTParamsWithTimeout(timeout time.Duration) *CreateAvailabilityScheduleUsingPOSTParams {
	return &CreateAvailabilityScheduleUsingPOSTParams{
		timeout: timeout,
	}
}

// NewCreateAvailabilityScheduleUsingPOSTParamsWithContext creates a new CreateAvailabilityScheduleUsingPOSTParams object
// with the ability to set a context for a request.
func NewCreateAvailabilityScheduleUsingPOSTParamsWithContext(ctx context.Context) *CreateAvailabilityScheduleUsingPOSTParams {
	return &CreateAvailabilityScheduleUsingPOSTParams{
		Context: ctx,
	}
}

// NewCreateAvailabilityScheduleUsingPOSTParamsWithHTTPClient creates a new CreateAvailabilityScheduleUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateAvailabilityScheduleUsingPOSTParamsWithHTTPClient(client *http.Client) *CreateAvailabilityScheduleUsingPOSTParams {
	return &CreateAvailabilityScheduleUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
CreateAvailabilityScheduleUsingPOSTParams contains all the parameters to send to the API endpoint

	for the create availability schedule using p o s t operation.

	Typically these are written to a http.Request.
*/
type CreateAvailabilityScheduleUsingPOSTParams struct {

	/* ClusterID.

	   clusterId
	*/
	ClusterID string

	/* Schedules.

	   schedules
	*/
	Schedules []*models.ScheduleRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create availability schedule using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateAvailabilityScheduleUsingPOSTParams) WithDefaults() *CreateAvailabilityScheduleUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create availability schedule using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateAvailabilityScheduleUsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create availability schedule using p o s t params
func (o *CreateAvailabilityScheduleUsingPOSTParams) WithTimeout(timeout time.Duration) *CreateAvailabilityScheduleUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create availability schedule using p o s t params
func (o *CreateAvailabilityScheduleUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create availability schedule using p o s t params
func (o *CreateAvailabilityScheduleUsingPOSTParams) WithContext(ctx context.Context) *CreateAvailabilityScheduleUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create availability schedule using p o s t params
func (o *CreateAvailabilityScheduleUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create availability schedule using p o s t params
func (o *CreateAvailabilityScheduleUsingPOSTParams) WithHTTPClient(client *http.Client) *CreateAvailabilityScheduleUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create availability schedule using p o s t params
func (o *CreateAvailabilityScheduleUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the create availability schedule using p o s t params
func (o *CreateAvailabilityScheduleUsingPOSTParams) WithClusterID(clusterID string) *CreateAvailabilityScheduleUsingPOSTParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the create availability schedule using p o s t params
func (o *CreateAvailabilityScheduleUsingPOSTParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithSchedules adds the schedules to the create availability schedule using p o s t params
func (o *CreateAvailabilityScheduleUsingPOSTParams) WithSchedules(schedules []*models.ScheduleRequest) *CreateAvailabilityScheduleUsingPOSTParams {
	o.SetSchedules(schedules)
	return o
}

// SetSchedules adds the schedules to the create availability schedule using p o s t params
func (o *CreateAvailabilityScheduleUsingPOSTParams) SetSchedules(schedules []*models.ScheduleRequest) {
	o.Schedules = schedules
}

// WriteToRequest writes these params to a swagger request
func (o *CreateAvailabilityScheduleUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID); err != nil {
		return err
	}
	if o.Schedules != nil {
		if err := r.SetBodyParam(o.Schedules); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
