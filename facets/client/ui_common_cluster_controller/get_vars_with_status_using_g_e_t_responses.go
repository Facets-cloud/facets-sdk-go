// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetVarsWithStatusUsingGETReader is a Reader for the GetVarsWithStatusUsingGET structure.
type GetVarsWithStatusUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVarsWithStatusUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVarsWithStatusUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetVarsWithStatusUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetVarsWithStatusUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVarsWithStatusUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/varsWithStatus] getVarsWithStatusUsingGET", response, response.Code())
	}
}

// NewGetVarsWithStatusUsingGETOK creates a GetVarsWithStatusUsingGETOK with default headers values
func NewGetVarsWithStatusUsingGETOK() *GetVarsWithStatusUsingGETOK {
	return &GetVarsWithStatusUsingGETOK{}
}

/*
GetVarsWithStatusUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetVarsWithStatusUsingGETOK struct {
	Payload map[string]models.Variables
}

// IsSuccess returns true when this get vars with status using g e t o k response has a 2xx status code
func (o *GetVarsWithStatusUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get vars with status using g e t o k response has a 3xx status code
func (o *GetVarsWithStatusUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vars with status using g e t o k response has a 4xx status code
func (o *GetVarsWithStatusUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get vars with status using g e t o k response has a 5xx status code
func (o *GetVarsWithStatusUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get vars with status using g e t o k response a status code equal to that given
func (o *GetVarsWithStatusUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get vars with status using g e t o k response
func (o *GetVarsWithStatusUsingGETOK) Code() int {
	return 200
}

func (o *GetVarsWithStatusUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/varsWithStatus][%d] getVarsWithStatusUsingGETOK %s", 200, payload)
}

func (o *GetVarsWithStatusUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/varsWithStatus][%d] getVarsWithStatusUsingGETOK %s", 200, payload)
}

func (o *GetVarsWithStatusUsingGETOK) GetPayload() map[string]models.Variables {
	return o.Payload
}

func (o *GetVarsWithStatusUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVarsWithStatusUsingGETUnauthorized creates a GetVarsWithStatusUsingGETUnauthorized with default headers values
func NewGetVarsWithStatusUsingGETUnauthorized() *GetVarsWithStatusUsingGETUnauthorized {
	return &GetVarsWithStatusUsingGETUnauthorized{}
}

/*
GetVarsWithStatusUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetVarsWithStatusUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get vars with status using g e t unauthorized response has a 2xx status code
func (o *GetVarsWithStatusUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vars with status using g e t unauthorized response has a 3xx status code
func (o *GetVarsWithStatusUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vars with status using g e t unauthorized response has a 4xx status code
func (o *GetVarsWithStatusUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vars with status using g e t unauthorized response has a 5xx status code
func (o *GetVarsWithStatusUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get vars with status using g e t unauthorized response a status code equal to that given
func (o *GetVarsWithStatusUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get vars with status using g e t unauthorized response
func (o *GetVarsWithStatusUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetVarsWithStatusUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/varsWithStatus][%d] getVarsWithStatusUsingGETUnauthorized", 401)
}

func (o *GetVarsWithStatusUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/varsWithStatus][%d] getVarsWithStatusUsingGETUnauthorized", 401)
}

func (o *GetVarsWithStatusUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVarsWithStatusUsingGETForbidden creates a GetVarsWithStatusUsingGETForbidden with default headers values
func NewGetVarsWithStatusUsingGETForbidden() *GetVarsWithStatusUsingGETForbidden {
	return &GetVarsWithStatusUsingGETForbidden{}
}

/*
GetVarsWithStatusUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetVarsWithStatusUsingGETForbidden struct {
}

// IsSuccess returns true when this get vars with status using g e t forbidden response has a 2xx status code
func (o *GetVarsWithStatusUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vars with status using g e t forbidden response has a 3xx status code
func (o *GetVarsWithStatusUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vars with status using g e t forbidden response has a 4xx status code
func (o *GetVarsWithStatusUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vars with status using g e t forbidden response has a 5xx status code
func (o *GetVarsWithStatusUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get vars with status using g e t forbidden response a status code equal to that given
func (o *GetVarsWithStatusUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get vars with status using g e t forbidden response
func (o *GetVarsWithStatusUsingGETForbidden) Code() int {
	return 403
}

func (o *GetVarsWithStatusUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/varsWithStatus][%d] getVarsWithStatusUsingGETForbidden", 403)
}

func (o *GetVarsWithStatusUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/varsWithStatus][%d] getVarsWithStatusUsingGETForbidden", 403)
}

func (o *GetVarsWithStatusUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVarsWithStatusUsingGETNotFound creates a GetVarsWithStatusUsingGETNotFound with default headers values
func NewGetVarsWithStatusUsingGETNotFound() *GetVarsWithStatusUsingGETNotFound {
	return &GetVarsWithStatusUsingGETNotFound{}
}

/*
GetVarsWithStatusUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetVarsWithStatusUsingGETNotFound struct {
}

// IsSuccess returns true when this get vars with status using g e t not found response has a 2xx status code
func (o *GetVarsWithStatusUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vars with status using g e t not found response has a 3xx status code
func (o *GetVarsWithStatusUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vars with status using g e t not found response has a 4xx status code
func (o *GetVarsWithStatusUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vars with status using g e t not found response has a 5xx status code
func (o *GetVarsWithStatusUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get vars with status using g e t not found response a status code equal to that given
func (o *GetVarsWithStatusUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get vars with status using g e t not found response
func (o *GetVarsWithStatusUsingGETNotFound) Code() int {
	return 404
}

func (o *GetVarsWithStatusUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/varsWithStatus][%d] getVarsWithStatusUsingGETNotFound", 404)
}

func (o *GetVarsWithStatusUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/varsWithStatus][%d] getVarsWithStatusUsingGETNotFound", 404)
}

func (o *GetVarsWithStatusUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
