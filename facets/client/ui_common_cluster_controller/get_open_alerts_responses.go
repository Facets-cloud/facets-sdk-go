// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetOpenAlertsReader is a Reader for the GetOpenAlerts structure.
type GetOpenAlertsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOpenAlertsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOpenAlertsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOpenAlertsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOpenAlertsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetOpenAlertsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOpenAlertsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts] getOpenAlerts", response, response.Code())
	}
}

// NewGetOpenAlertsOK creates a GetOpenAlertsOK with default headers values
func NewGetOpenAlertsOK() *GetOpenAlertsOK {
	return &GetOpenAlertsOK{}
}

/*
GetOpenAlertsOK describes a response with status code 200, with default header values.

OK
*/
type GetOpenAlertsOK struct {
	Payload map[string]interface{}
}

// IsSuccess returns true when this get open alerts o k response has a 2xx status code
func (o *GetOpenAlertsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get open alerts o k response has a 3xx status code
func (o *GetOpenAlertsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get open alerts o k response has a 4xx status code
func (o *GetOpenAlertsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get open alerts o k response has a 5xx status code
func (o *GetOpenAlertsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get open alerts o k response a status code equal to that given
func (o *GetOpenAlertsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get open alerts o k response
func (o *GetOpenAlertsOK) Code() int {
	return 200
}

func (o *GetOpenAlertsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsOK %s", 200, payload)
}

func (o *GetOpenAlertsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsOK %s", 200, payload)
}

func (o *GetOpenAlertsOK) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *GetOpenAlertsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOpenAlertsBadRequest creates a GetOpenAlertsBadRequest with default headers values
func NewGetOpenAlertsBadRequest() *GetOpenAlertsBadRequest {
	return &GetOpenAlertsBadRequest{}
}

/*
GetOpenAlertsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetOpenAlertsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get open alerts bad request response has a 2xx status code
func (o *GetOpenAlertsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get open alerts bad request response has a 3xx status code
func (o *GetOpenAlertsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get open alerts bad request response has a 4xx status code
func (o *GetOpenAlertsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get open alerts bad request response has a 5xx status code
func (o *GetOpenAlertsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get open alerts bad request response a status code equal to that given
func (o *GetOpenAlertsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get open alerts bad request response
func (o *GetOpenAlertsBadRequest) Code() int {
	return 400
}

func (o *GetOpenAlertsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsBadRequest %s", 400, payload)
}

func (o *GetOpenAlertsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsBadRequest %s", 400, payload)
}

func (o *GetOpenAlertsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetOpenAlertsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOpenAlertsNotFound creates a GetOpenAlertsNotFound with default headers values
func NewGetOpenAlertsNotFound() *GetOpenAlertsNotFound {
	return &GetOpenAlertsNotFound{}
}

/*
GetOpenAlertsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetOpenAlertsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get open alerts not found response has a 2xx status code
func (o *GetOpenAlertsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get open alerts not found response has a 3xx status code
func (o *GetOpenAlertsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get open alerts not found response has a 4xx status code
func (o *GetOpenAlertsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get open alerts not found response has a 5xx status code
func (o *GetOpenAlertsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get open alerts not found response a status code equal to that given
func (o *GetOpenAlertsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get open alerts not found response
func (o *GetOpenAlertsNotFound) Code() int {
	return 404
}

func (o *GetOpenAlertsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsNotFound %s", 404, payload)
}

func (o *GetOpenAlertsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsNotFound %s", 404, payload)
}

func (o *GetOpenAlertsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetOpenAlertsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOpenAlertsMethodNotAllowed creates a GetOpenAlertsMethodNotAllowed with default headers values
func NewGetOpenAlertsMethodNotAllowed() *GetOpenAlertsMethodNotAllowed {
	return &GetOpenAlertsMethodNotAllowed{}
}

/*
GetOpenAlertsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetOpenAlertsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get open alerts method not allowed response has a 2xx status code
func (o *GetOpenAlertsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get open alerts method not allowed response has a 3xx status code
func (o *GetOpenAlertsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get open alerts method not allowed response has a 4xx status code
func (o *GetOpenAlertsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get open alerts method not allowed response has a 5xx status code
func (o *GetOpenAlertsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get open alerts method not allowed response a status code equal to that given
func (o *GetOpenAlertsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get open alerts method not allowed response
func (o *GetOpenAlertsMethodNotAllowed) Code() int {
	return 405
}

func (o *GetOpenAlertsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsMethodNotAllowed %s", 405, payload)
}

func (o *GetOpenAlertsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsMethodNotAllowed %s", 405, payload)
}

func (o *GetOpenAlertsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetOpenAlertsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOpenAlertsInternalServerError creates a GetOpenAlertsInternalServerError with default headers values
func NewGetOpenAlertsInternalServerError() *GetOpenAlertsInternalServerError {
	return &GetOpenAlertsInternalServerError{}
}

/*
GetOpenAlertsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetOpenAlertsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get open alerts internal server error response has a 2xx status code
func (o *GetOpenAlertsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get open alerts internal server error response has a 3xx status code
func (o *GetOpenAlertsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get open alerts internal server error response has a 4xx status code
func (o *GetOpenAlertsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get open alerts internal server error response has a 5xx status code
func (o *GetOpenAlertsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get open alerts internal server error response a status code equal to that given
func (o *GetOpenAlertsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get open alerts internal server error response
func (o *GetOpenAlertsInternalServerError) Code() int {
	return 500
}

func (o *GetOpenAlertsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsInternalServerError %s", 500, payload)
}

func (o *GetOpenAlertsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsInternalServerError %s", 500, payload)
}

func (o *GetOpenAlertsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetOpenAlertsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
