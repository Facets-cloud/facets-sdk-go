// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RefreshKubeConfigUsingGETReader is a Reader for the RefreshKubeConfigUsingGET structure.
type RefreshKubeConfigUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RefreshKubeConfigUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRefreshKubeConfigUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRefreshKubeConfigUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRefreshKubeConfigUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRefreshKubeConfigUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh] refreshKubeConfigUsingGET", response, response.Code())
	}
}

// NewRefreshKubeConfigUsingGETOK creates a RefreshKubeConfigUsingGETOK with default headers values
func NewRefreshKubeConfigUsingGETOK() *RefreshKubeConfigUsingGETOK {
	return &RefreshKubeConfigUsingGETOK{}
}

/*
RefreshKubeConfigUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type RefreshKubeConfigUsingGETOK struct {
	Payload bool
}

// IsSuccess returns true when this refresh kube config using g e t o k response has a 2xx status code
func (o *RefreshKubeConfigUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this refresh kube config using g e t o k response has a 3xx status code
func (o *RefreshKubeConfigUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh kube config using g e t o k response has a 4xx status code
func (o *RefreshKubeConfigUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh kube config using g e t o k response has a 5xx status code
func (o *RefreshKubeConfigUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh kube config using g e t o k response a status code equal to that given
func (o *RefreshKubeConfigUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the refresh kube config using g e t o k response
func (o *RefreshKubeConfigUsingGETOK) Code() int {
	return 200
}

func (o *RefreshKubeConfigUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigUsingGETOK %s", 200, payload)
}

func (o *RefreshKubeConfigUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigUsingGETOK %s", 200, payload)
}

func (o *RefreshKubeConfigUsingGETOK) GetPayload() bool {
	return o.Payload
}

func (o *RefreshKubeConfigUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshKubeConfigUsingGETUnauthorized creates a RefreshKubeConfigUsingGETUnauthorized with default headers values
func NewRefreshKubeConfigUsingGETUnauthorized() *RefreshKubeConfigUsingGETUnauthorized {
	return &RefreshKubeConfigUsingGETUnauthorized{}
}

/*
RefreshKubeConfigUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RefreshKubeConfigUsingGETUnauthorized struct {
}

// IsSuccess returns true when this refresh kube config using g e t unauthorized response has a 2xx status code
func (o *RefreshKubeConfigUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh kube config using g e t unauthorized response has a 3xx status code
func (o *RefreshKubeConfigUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh kube config using g e t unauthorized response has a 4xx status code
func (o *RefreshKubeConfigUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh kube config using g e t unauthorized response has a 5xx status code
func (o *RefreshKubeConfigUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh kube config using g e t unauthorized response a status code equal to that given
func (o *RefreshKubeConfigUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the refresh kube config using g e t unauthorized response
func (o *RefreshKubeConfigUsingGETUnauthorized) Code() int {
	return 401
}

func (o *RefreshKubeConfigUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigUsingGETUnauthorized", 401)
}

func (o *RefreshKubeConfigUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigUsingGETUnauthorized", 401)
}

func (o *RefreshKubeConfigUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefreshKubeConfigUsingGETForbidden creates a RefreshKubeConfigUsingGETForbidden with default headers values
func NewRefreshKubeConfigUsingGETForbidden() *RefreshKubeConfigUsingGETForbidden {
	return &RefreshKubeConfigUsingGETForbidden{}
}

/*
RefreshKubeConfigUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RefreshKubeConfigUsingGETForbidden struct {
}

// IsSuccess returns true when this refresh kube config using g e t forbidden response has a 2xx status code
func (o *RefreshKubeConfigUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh kube config using g e t forbidden response has a 3xx status code
func (o *RefreshKubeConfigUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh kube config using g e t forbidden response has a 4xx status code
func (o *RefreshKubeConfigUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh kube config using g e t forbidden response has a 5xx status code
func (o *RefreshKubeConfigUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh kube config using g e t forbidden response a status code equal to that given
func (o *RefreshKubeConfigUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the refresh kube config using g e t forbidden response
func (o *RefreshKubeConfigUsingGETForbidden) Code() int {
	return 403
}

func (o *RefreshKubeConfigUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigUsingGETForbidden", 403)
}

func (o *RefreshKubeConfigUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigUsingGETForbidden", 403)
}

func (o *RefreshKubeConfigUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefreshKubeConfigUsingGETNotFound creates a RefreshKubeConfigUsingGETNotFound with default headers values
func NewRefreshKubeConfigUsingGETNotFound() *RefreshKubeConfigUsingGETNotFound {
	return &RefreshKubeConfigUsingGETNotFound{}
}

/*
RefreshKubeConfigUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RefreshKubeConfigUsingGETNotFound struct {
}

// IsSuccess returns true when this refresh kube config using g e t not found response has a 2xx status code
func (o *RefreshKubeConfigUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh kube config using g e t not found response has a 3xx status code
func (o *RefreshKubeConfigUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh kube config using g e t not found response has a 4xx status code
func (o *RefreshKubeConfigUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh kube config using g e t not found response has a 5xx status code
func (o *RefreshKubeConfigUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh kube config using g e t not found response a status code equal to that given
func (o *RefreshKubeConfigUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the refresh kube config using g e t not found response
func (o *RefreshKubeConfigUsingGETNotFound) Code() int {
	return 404
}

func (o *RefreshKubeConfigUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigUsingGETNotFound", 404)
}

func (o *RefreshKubeConfigUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigUsingGETNotFound", 404)
}

func (o *RefreshKubeConfigUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
