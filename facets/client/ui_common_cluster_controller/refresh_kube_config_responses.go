// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RefreshKubeConfigReader is a Reader for the RefreshKubeConfig structure.
type RefreshKubeConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RefreshKubeConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRefreshKubeConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRefreshKubeConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRefreshKubeConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRefreshKubeConfigMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRefreshKubeConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh] refreshKubeConfig", response, response.Code())
	}
}

// NewRefreshKubeConfigOK creates a RefreshKubeConfigOK with default headers values
func NewRefreshKubeConfigOK() *RefreshKubeConfigOK {
	return &RefreshKubeConfigOK{}
}

/*
RefreshKubeConfigOK describes a response with status code 200, with default header values.

OK
*/
type RefreshKubeConfigOK struct {
	Payload bool
}

// IsSuccess returns true when this refresh kube config o k response has a 2xx status code
func (o *RefreshKubeConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this refresh kube config o k response has a 3xx status code
func (o *RefreshKubeConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh kube config o k response has a 4xx status code
func (o *RefreshKubeConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh kube config o k response has a 5xx status code
func (o *RefreshKubeConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh kube config o k response a status code equal to that given
func (o *RefreshKubeConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the refresh kube config o k response
func (o *RefreshKubeConfigOK) Code() int {
	return 200
}

func (o *RefreshKubeConfigOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigOK %s", 200, payload)
}

func (o *RefreshKubeConfigOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigOK %s", 200, payload)
}

func (o *RefreshKubeConfigOK) GetPayload() bool {
	return o.Payload
}

func (o *RefreshKubeConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshKubeConfigBadRequest creates a RefreshKubeConfigBadRequest with default headers values
func NewRefreshKubeConfigBadRequest() *RefreshKubeConfigBadRequest {
	return &RefreshKubeConfigBadRequest{}
}

/*
RefreshKubeConfigBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RefreshKubeConfigBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this refresh kube config bad request response has a 2xx status code
func (o *RefreshKubeConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh kube config bad request response has a 3xx status code
func (o *RefreshKubeConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh kube config bad request response has a 4xx status code
func (o *RefreshKubeConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh kube config bad request response has a 5xx status code
func (o *RefreshKubeConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh kube config bad request response a status code equal to that given
func (o *RefreshKubeConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the refresh kube config bad request response
func (o *RefreshKubeConfigBadRequest) Code() int {
	return 400
}

func (o *RefreshKubeConfigBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigBadRequest %s", 400, payload)
}

func (o *RefreshKubeConfigBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigBadRequest %s", 400, payload)
}

func (o *RefreshKubeConfigBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RefreshKubeConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshKubeConfigNotFound creates a RefreshKubeConfigNotFound with default headers values
func NewRefreshKubeConfigNotFound() *RefreshKubeConfigNotFound {
	return &RefreshKubeConfigNotFound{}
}

/*
RefreshKubeConfigNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RefreshKubeConfigNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this refresh kube config not found response has a 2xx status code
func (o *RefreshKubeConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh kube config not found response has a 3xx status code
func (o *RefreshKubeConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh kube config not found response has a 4xx status code
func (o *RefreshKubeConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh kube config not found response has a 5xx status code
func (o *RefreshKubeConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh kube config not found response a status code equal to that given
func (o *RefreshKubeConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the refresh kube config not found response
func (o *RefreshKubeConfigNotFound) Code() int {
	return 404
}

func (o *RefreshKubeConfigNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigNotFound %s", 404, payload)
}

func (o *RefreshKubeConfigNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigNotFound %s", 404, payload)
}

func (o *RefreshKubeConfigNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RefreshKubeConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshKubeConfigMethodNotAllowed creates a RefreshKubeConfigMethodNotAllowed with default headers values
func NewRefreshKubeConfigMethodNotAllowed() *RefreshKubeConfigMethodNotAllowed {
	return &RefreshKubeConfigMethodNotAllowed{}
}

/*
RefreshKubeConfigMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RefreshKubeConfigMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this refresh kube config method not allowed response has a 2xx status code
func (o *RefreshKubeConfigMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh kube config method not allowed response has a 3xx status code
func (o *RefreshKubeConfigMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh kube config method not allowed response has a 4xx status code
func (o *RefreshKubeConfigMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh kube config method not allowed response has a 5xx status code
func (o *RefreshKubeConfigMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh kube config method not allowed response a status code equal to that given
func (o *RefreshKubeConfigMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the refresh kube config method not allowed response
func (o *RefreshKubeConfigMethodNotAllowed) Code() int {
	return 405
}

func (o *RefreshKubeConfigMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigMethodNotAllowed %s", 405, payload)
}

func (o *RefreshKubeConfigMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigMethodNotAllowed %s", 405, payload)
}

func (o *RefreshKubeConfigMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RefreshKubeConfigMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshKubeConfigInternalServerError creates a RefreshKubeConfigInternalServerError with default headers values
func NewRefreshKubeConfigInternalServerError() *RefreshKubeConfigInternalServerError {
	return &RefreshKubeConfigInternalServerError{}
}

/*
RefreshKubeConfigInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RefreshKubeConfigInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this refresh kube config internal server error response has a 2xx status code
func (o *RefreshKubeConfigInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh kube config internal server error response has a 3xx status code
func (o *RefreshKubeConfigInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh kube config internal server error response has a 4xx status code
func (o *RefreshKubeConfigInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh kube config internal server error response has a 5xx status code
func (o *RefreshKubeConfigInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this refresh kube config internal server error response a status code equal to that given
func (o *RefreshKubeConfigInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the refresh kube config internal server error response
func (o *RefreshKubeConfigInternalServerError) Code() int {
	return 500
}

func (o *RefreshKubeConfigInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigInternalServerError %s", 500, payload)
}

func (o *RefreshKubeConfigInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh][%d] refreshKubeConfigInternalServerError %s", 500, payload)
}

func (o *RefreshKubeConfigInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RefreshKubeConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
