// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpsertVarsReader is a Reader for the UpsertVars structure.
type UpsertVarsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpsertVarsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpsertVarsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpsertVarsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpsertVarsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpsertVarsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpsertVarsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/vars/upsert] upsertVars", response, response.Code())
	}
}

// NewUpsertVarsOK creates a UpsertVarsOK with default headers values
func NewUpsertVarsOK() *UpsertVarsOK {
	return &UpsertVarsOK{}
}

/*
UpsertVarsOK describes a response with status code 200, with default header values.

OK
*/
type UpsertVarsOK struct {
	Payload *models.AbstractCluster
}

// IsSuccess returns true when this upsert vars o k response has a 2xx status code
func (o *UpsertVarsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upsert vars o k response has a 3xx status code
func (o *UpsertVarsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert vars o k response has a 4xx status code
func (o *UpsertVarsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert vars o k response has a 5xx status code
func (o *UpsertVarsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert vars o k response a status code equal to that given
func (o *UpsertVarsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upsert vars o k response
func (o *UpsertVarsOK) Code() int {
	return 200
}

func (o *UpsertVarsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsOK %s", 200, payload)
}

func (o *UpsertVarsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsOK %s", 200, payload)
}

func (o *UpsertVarsOK) GetPayload() *models.AbstractCluster {
	return o.Payload
}

func (o *UpsertVarsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AbstractCluster)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertVarsBadRequest creates a UpsertVarsBadRequest with default headers values
func NewUpsertVarsBadRequest() *UpsertVarsBadRequest {
	return &UpsertVarsBadRequest{}
}

/*
UpsertVarsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpsertVarsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upsert vars bad request response has a 2xx status code
func (o *UpsertVarsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert vars bad request response has a 3xx status code
func (o *UpsertVarsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert vars bad request response has a 4xx status code
func (o *UpsertVarsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert vars bad request response has a 5xx status code
func (o *UpsertVarsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert vars bad request response a status code equal to that given
func (o *UpsertVarsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the upsert vars bad request response
func (o *UpsertVarsBadRequest) Code() int {
	return 400
}

func (o *UpsertVarsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsBadRequest %s", 400, payload)
}

func (o *UpsertVarsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsBadRequest %s", 400, payload)
}

func (o *UpsertVarsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpsertVarsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertVarsNotFound creates a UpsertVarsNotFound with default headers values
func NewUpsertVarsNotFound() *UpsertVarsNotFound {
	return &UpsertVarsNotFound{}
}

/*
UpsertVarsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpsertVarsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upsert vars not found response has a 2xx status code
func (o *UpsertVarsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert vars not found response has a 3xx status code
func (o *UpsertVarsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert vars not found response has a 4xx status code
func (o *UpsertVarsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert vars not found response has a 5xx status code
func (o *UpsertVarsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert vars not found response a status code equal to that given
func (o *UpsertVarsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the upsert vars not found response
func (o *UpsertVarsNotFound) Code() int {
	return 404
}

func (o *UpsertVarsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsNotFound %s", 404, payload)
}

func (o *UpsertVarsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsNotFound %s", 404, payload)
}

func (o *UpsertVarsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpsertVarsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertVarsMethodNotAllowed creates a UpsertVarsMethodNotAllowed with default headers values
func NewUpsertVarsMethodNotAllowed() *UpsertVarsMethodNotAllowed {
	return &UpsertVarsMethodNotAllowed{}
}

/*
UpsertVarsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpsertVarsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upsert vars method not allowed response has a 2xx status code
func (o *UpsertVarsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert vars method not allowed response has a 3xx status code
func (o *UpsertVarsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert vars method not allowed response has a 4xx status code
func (o *UpsertVarsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert vars method not allowed response has a 5xx status code
func (o *UpsertVarsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert vars method not allowed response a status code equal to that given
func (o *UpsertVarsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the upsert vars method not allowed response
func (o *UpsertVarsMethodNotAllowed) Code() int {
	return 405
}

func (o *UpsertVarsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsMethodNotAllowed %s", 405, payload)
}

func (o *UpsertVarsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsMethodNotAllowed %s", 405, payload)
}

func (o *UpsertVarsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpsertVarsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertVarsInternalServerError creates a UpsertVarsInternalServerError with default headers values
func NewUpsertVarsInternalServerError() *UpsertVarsInternalServerError {
	return &UpsertVarsInternalServerError{}
}

/*
UpsertVarsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpsertVarsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upsert vars internal server error response has a 2xx status code
func (o *UpsertVarsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert vars internal server error response has a 3xx status code
func (o *UpsertVarsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert vars internal server error response has a 4xx status code
func (o *UpsertVarsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert vars internal server error response has a 5xx status code
func (o *UpsertVarsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this upsert vars internal server error response a status code equal to that given
func (o *UpsertVarsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the upsert vars internal server error response
func (o *UpsertVarsInternalServerError) Code() int {
	return 500
}

func (o *UpsertVarsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsInternalServerError %s", 500, payload)
}

func (o *UpsertVarsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/vars/upsert][%d] upsertVarsInternalServerError %s", 500, payload)
}

func (o *UpsertVarsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpsertVarsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
