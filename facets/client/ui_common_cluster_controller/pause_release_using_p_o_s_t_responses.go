// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PauseReleaseUsingPOSTReader is a Reader for the PauseReleaseUsingPOST structure.
type PauseReleaseUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PauseReleaseUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPauseReleaseUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewPauseReleaseUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPauseReleaseUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPauseReleaseUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPauseReleaseUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/pause-release] pauseReleaseUsingPOST", response, response.Code())
	}
}

// NewPauseReleaseUsingPOSTOK creates a PauseReleaseUsingPOSTOK with default headers values
func NewPauseReleaseUsingPOSTOK() *PauseReleaseUsingPOSTOK {
	return &PauseReleaseUsingPOSTOK{}
}

/*
PauseReleaseUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type PauseReleaseUsingPOSTOK struct {
	Payload string
}

// IsSuccess returns true when this pause release using p o s t o k response has a 2xx status code
func (o *PauseReleaseUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pause release using p o s t o k response has a 3xx status code
func (o *PauseReleaseUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause release using p o s t o k response has a 4xx status code
func (o *PauseReleaseUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this pause release using p o s t o k response has a 5xx status code
func (o *PauseReleaseUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this pause release using p o s t o k response a status code equal to that given
func (o *PauseReleaseUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the pause release using p o s t o k response
func (o *PauseReleaseUsingPOSTOK) Code() int {
	return 200
}

func (o *PauseReleaseUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseUsingPOSTOK %s", 200, payload)
}

func (o *PauseReleaseUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseUsingPOSTOK %s", 200, payload)
}

func (o *PauseReleaseUsingPOSTOK) GetPayload() string {
	return o.Payload
}

func (o *PauseReleaseUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPauseReleaseUsingPOSTCreated creates a PauseReleaseUsingPOSTCreated with default headers values
func NewPauseReleaseUsingPOSTCreated() *PauseReleaseUsingPOSTCreated {
	return &PauseReleaseUsingPOSTCreated{}
}

/*
PauseReleaseUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type PauseReleaseUsingPOSTCreated struct {
}

// IsSuccess returns true when this pause release using p o s t created response has a 2xx status code
func (o *PauseReleaseUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pause release using p o s t created response has a 3xx status code
func (o *PauseReleaseUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause release using p o s t created response has a 4xx status code
func (o *PauseReleaseUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this pause release using p o s t created response has a 5xx status code
func (o *PauseReleaseUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this pause release using p o s t created response a status code equal to that given
func (o *PauseReleaseUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the pause release using p o s t created response
func (o *PauseReleaseUsingPOSTCreated) Code() int {
	return 201
}

func (o *PauseReleaseUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseUsingPOSTCreated", 201)
}

func (o *PauseReleaseUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseUsingPOSTCreated", 201)
}

func (o *PauseReleaseUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPauseReleaseUsingPOSTUnauthorized creates a PauseReleaseUsingPOSTUnauthorized with default headers values
func NewPauseReleaseUsingPOSTUnauthorized() *PauseReleaseUsingPOSTUnauthorized {
	return &PauseReleaseUsingPOSTUnauthorized{}
}

/*
PauseReleaseUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PauseReleaseUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this pause release using p o s t unauthorized response has a 2xx status code
func (o *PauseReleaseUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause release using p o s t unauthorized response has a 3xx status code
func (o *PauseReleaseUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause release using p o s t unauthorized response has a 4xx status code
func (o *PauseReleaseUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this pause release using p o s t unauthorized response has a 5xx status code
func (o *PauseReleaseUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this pause release using p o s t unauthorized response a status code equal to that given
func (o *PauseReleaseUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the pause release using p o s t unauthorized response
func (o *PauseReleaseUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *PauseReleaseUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseUsingPOSTUnauthorized", 401)
}

func (o *PauseReleaseUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseUsingPOSTUnauthorized", 401)
}

func (o *PauseReleaseUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPauseReleaseUsingPOSTForbidden creates a PauseReleaseUsingPOSTForbidden with default headers values
func NewPauseReleaseUsingPOSTForbidden() *PauseReleaseUsingPOSTForbidden {
	return &PauseReleaseUsingPOSTForbidden{}
}

/*
PauseReleaseUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PauseReleaseUsingPOSTForbidden struct {
}

// IsSuccess returns true when this pause release using p o s t forbidden response has a 2xx status code
func (o *PauseReleaseUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause release using p o s t forbidden response has a 3xx status code
func (o *PauseReleaseUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause release using p o s t forbidden response has a 4xx status code
func (o *PauseReleaseUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this pause release using p o s t forbidden response has a 5xx status code
func (o *PauseReleaseUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this pause release using p o s t forbidden response a status code equal to that given
func (o *PauseReleaseUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the pause release using p o s t forbidden response
func (o *PauseReleaseUsingPOSTForbidden) Code() int {
	return 403
}

func (o *PauseReleaseUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseUsingPOSTForbidden", 403)
}

func (o *PauseReleaseUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseUsingPOSTForbidden", 403)
}

func (o *PauseReleaseUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPauseReleaseUsingPOSTNotFound creates a PauseReleaseUsingPOSTNotFound with default headers values
func NewPauseReleaseUsingPOSTNotFound() *PauseReleaseUsingPOSTNotFound {
	return &PauseReleaseUsingPOSTNotFound{}
}

/*
PauseReleaseUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PauseReleaseUsingPOSTNotFound struct {
}

// IsSuccess returns true when this pause release using p o s t not found response has a 2xx status code
func (o *PauseReleaseUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pause release using p o s t not found response has a 3xx status code
func (o *PauseReleaseUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pause release using p o s t not found response has a 4xx status code
func (o *PauseReleaseUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this pause release using p o s t not found response has a 5xx status code
func (o *PauseReleaseUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this pause release using p o s t not found response a status code equal to that given
func (o *PauseReleaseUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the pause release using p o s t not found response
func (o *PauseReleaseUsingPOSTNotFound) Code() int {
	return 404
}

func (o *PauseReleaseUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseUsingPOSTNotFound", 404)
}

func (o *PauseReleaseUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/pause-release][%d] pauseReleaseUsingPOSTNotFound", 404)
}

func (o *PauseReleaseUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
