// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DetachImageReader is a Reader for the DetachImage structure.
type DetachImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DetachImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDetachImageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDetachImageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDetachImageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDetachImageMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDetachImageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage] detachImage", response, response.Code())
	}
}

// NewDetachImageOK creates a DetachImageOK with default headers values
func NewDetachImageOK() *DetachImageOK {
	return &DetachImageOK{}
}

/*
DetachImageOK describes a response with status code 200, with default header values.

OK
*/
type DetachImageOK struct {
}

// IsSuccess returns true when this detach image o k response has a 2xx status code
func (o *DetachImageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this detach image o k response has a 3xx status code
func (o *DetachImageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach image o k response has a 4xx status code
func (o *DetachImageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this detach image o k response has a 5xx status code
func (o *DetachImageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this detach image o k response a status code equal to that given
func (o *DetachImageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the detach image o k response
func (o *DetachImageOK) Code() int {
	return 200
}

func (o *DetachImageOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageOK", 200)
}

func (o *DetachImageOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageOK", 200)
}

func (o *DetachImageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDetachImageBadRequest creates a DetachImageBadRequest with default headers values
func NewDetachImageBadRequest() *DetachImageBadRequest {
	return &DetachImageBadRequest{}
}

/*
DetachImageBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DetachImageBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this detach image bad request response has a 2xx status code
func (o *DetachImageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detach image bad request response has a 3xx status code
func (o *DetachImageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach image bad request response has a 4xx status code
func (o *DetachImageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this detach image bad request response has a 5xx status code
func (o *DetachImageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this detach image bad request response a status code equal to that given
func (o *DetachImageBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the detach image bad request response
func (o *DetachImageBadRequest) Code() int {
	return 400
}

func (o *DetachImageBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageBadRequest %s", 400, payload)
}

func (o *DetachImageBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageBadRequest %s", 400, payload)
}

func (o *DetachImageBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DetachImageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetachImageNotFound creates a DetachImageNotFound with default headers values
func NewDetachImageNotFound() *DetachImageNotFound {
	return &DetachImageNotFound{}
}

/*
DetachImageNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DetachImageNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this detach image not found response has a 2xx status code
func (o *DetachImageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detach image not found response has a 3xx status code
func (o *DetachImageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach image not found response has a 4xx status code
func (o *DetachImageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this detach image not found response has a 5xx status code
func (o *DetachImageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this detach image not found response a status code equal to that given
func (o *DetachImageNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the detach image not found response
func (o *DetachImageNotFound) Code() int {
	return 404
}

func (o *DetachImageNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageNotFound %s", 404, payload)
}

func (o *DetachImageNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageNotFound %s", 404, payload)
}

func (o *DetachImageNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DetachImageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetachImageMethodNotAllowed creates a DetachImageMethodNotAllowed with default headers values
func NewDetachImageMethodNotAllowed() *DetachImageMethodNotAllowed {
	return &DetachImageMethodNotAllowed{}
}

/*
DetachImageMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DetachImageMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this detach image method not allowed response has a 2xx status code
func (o *DetachImageMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detach image method not allowed response has a 3xx status code
func (o *DetachImageMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach image method not allowed response has a 4xx status code
func (o *DetachImageMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this detach image method not allowed response has a 5xx status code
func (o *DetachImageMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this detach image method not allowed response a status code equal to that given
func (o *DetachImageMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the detach image method not allowed response
func (o *DetachImageMethodNotAllowed) Code() int {
	return 405
}

func (o *DetachImageMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageMethodNotAllowed %s", 405, payload)
}

func (o *DetachImageMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageMethodNotAllowed %s", 405, payload)
}

func (o *DetachImageMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DetachImageMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetachImageInternalServerError creates a DetachImageInternalServerError with default headers values
func NewDetachImageInternalServerError() *DetachImageInternalServerError {
	return &DetachImageInternalServerError{}
}

/*
DetachImageInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DetachImageInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this detach image internal server error response has a 2xx status code
func (o *DetachImageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detach image internal server error response has a 3xx status code
func (o *DetachImageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detach image internal server error response has a 4xx status code
func (o *DetachImageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this detach image internal server error response has a 5xx status code
func (o *DetachImageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this detach image internal server error response a status code equal to that given
func (o *DetachImageInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the detach image internal server error response
func (o *DetachImageInternalServerError) Code() int {
	return 500
}

func (o *DetachImageInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageInternalServerError %s", 500, payload)
}

func (o *DetachImageInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/detachImage][%d] detachImageInternalServerError %s", 500, payload)
}

func (o *DetachImageInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DetachImageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
