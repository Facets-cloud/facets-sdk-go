// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetOpenAlertsUsingGETReader is a Reader for the GetOpenAlertsUsingGET structure.
type GetOpenAlertsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOpenAlertsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOpenAlertsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOpenAlertsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOpenAlertsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOpenAlertsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts] getOpenAlertsUsingGET", response, response.Code())
	}
}

// NewGetOpenAlertsUsingGETOK creates a GetOpenAlertsUsingGETOK with default headers values
func NewGetOpenAlertsUsingGETOK() *GetOpenAlertsUsingGETOK {
	return &GetOpenAlertsUsingGETOK{}
}

/*
GetOpenAlertsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetOpenAlertsUsingGETOK struct {
	Payload map[string]interface{}
}

// IsSuccess returns true when this get open alerts using g e t o k response has a 2xx status code
func (o *GetOpenAlertsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get open alerts using g e t o k response has a 3xx status code
func (o *GetOpenAlertsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get open alerts using g e t o k response has a 4xx status code
func (o *GetOpenAlertsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get open alerts using g e t o k response has a 5xx status code
func (o *GetOpenAlertsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get open alerts using g e t o k response a status code equal to that given
func (o *GetOpenAlertsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get open alerts using g e t o k response
func (o *GetOpenAlertsUsingGETOK) Code() int {
	return 200
}

func (o *GetOpenAlertsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsUsingGETOK %s", 200, payload)
}

func (o *GetOpenAlertsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsUsingGETOK %s", 200, payload)
}

func (o *GetOpenAlertsUsingGETOK) GetPayload() map[string]interface{} {
	return o.Payload
}

func (o *GetOpenAlertsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOpenAlertsUsingGETUnauthorized creates a GetOpenAlertsUsingGETUnauthorized with default headers values
func NewGetOpenAlertsUsingGETUnauthorized() *GetOpenAlertsUsingGETUnauthorized {
	return &GetOpenAlertsUsingGETUnauthorized{}
}

/*
GetOpenAlertsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOpenAlertsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get open alerts using g e t unauthorized response has a 2xx status code
func (o *GetOpenAlertsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get open alerts using g e t unauthorized response has a 3xx status code
func (o *GetOpenAlertsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get open alerts using g e t unauthorized response has a 4xx status code
func (o *GetOpenAlertsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get open alerts using g e t unauthorized response has a 5xx status code
func (o *GetOpenAlertsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get open alerts using g e t unauthorized response a status code equal to that given
func (o *GetOpenAlertsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get open alerts using g e t unauthorized response
func (o *GetOpenAlertsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetOpenAlertsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsUsingGETUnauthorized", 401)
}

func (o *GetOpenAlertsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsUsingGETUnauthorized", 401)
}

func (o *GetOpenAlertsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOpenAlertsUsingGETForbidden creates a GetOpenAlertsUsingGETForbidden with default headers values
func NewGetOpenAlertsUsingGETForbidden() *GetOpenAlertsUsingGETForbidden {
	return &GetOpenAlertsUsingGETForbidden{}
}

/*
GetOpenAlertsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOpenAlertsUsingGETForbidden struct {
}

// IsSuccess returns true when this get open alerts using g e t forbidden response has a 2xx status code
func (o *GetOpenAlertsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get open alerts using g e t forbidden response has a 3xx status code
func (o *GetOpenAlertsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get open alerts using g e t forbidden response has a 4xx status code
func (o *GetOpenAlertsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get open alerts using g e t forbidden response has a 5xx status code
func (o *GetOpenAlertsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get open alerts using g e t forbidden response a status code equal to that given
func (o *GetOpenAlertsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get open alerts using g e t forbidden response
func (o *GetOpenAlertsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetOpenAlertsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsUsingGETForbidden", 403)
}

func (o *GetOpenAlertsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsUsingGETForbidden", 403)
}

func (o *GetOpenAlertsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetOpenAlertsUsingGETNotFound creates a GetOpenAlertsUsingGETNotFound with default headers values
func NewGetOpenAlertsUsingGETNotFound() *GetOpenAlertsUsingGETNotFound {
	return &GetOpenAlertsUsingGETNotFound{}
}

/*
GetOpenAlertsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetOpenAlertsUsingGETNotFound struct {
}

// IsSuccess returns true when this get open alerts using g e t not found response has a 2xx status code
func (o *GetOpenAlertsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get open alerts using g e t not found response has a 3xx status code
func (o *GetOpenAlertsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get open alerts using g e t not found response has a 4xx status code
func (o *GetOpenAlertsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get open alerts using g e t not found response has a 5xx status code
func (o *GetOpenAlertsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get open alerts using g e t not found response a status code equal to that given
func (o *GetOpenAlertsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get open alerts using g e t not found response
func (o *GetOpenAlertsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetOpenAlertsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsUsingGETNotFound", 404)
}

func (o *GetOpenAlertsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/open-alerts][%d] getOpenAlertsUsingGETNotFound", 404)
}

func (o *GetOpenAlertsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
