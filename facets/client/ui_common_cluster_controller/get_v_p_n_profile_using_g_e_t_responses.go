// Code generated by go-swagger; DO NOT EDIT.

package ui_common_cluster_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetVPNProfileUsingGETReader is a Reader for the GetVPNProfileUsingGET structure.
type GetVPNProfileUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVPNProfileUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVPNProfileUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetVPNProfileUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetVPNProfileUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVPNProfileUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/vpn-profile] getVPNProfileUsingGET", response, response.Code())
	}
}

// NewGetVPNProfileUsingGETOK creates a GetVPNProfileUsingGETOK with default headers values
func NewGetVPNProfileUsingGETOK() *GetVPNProfileUsingGETOK {
	return &GetVPNProfileUsingGETOK{}
}

/*
GetVPNProfileUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetVPNProfileUsingGETOK struct {
	Payload string
}

// IsSuccess returns true when this get v p n profile using g e t o k response has a 2xx status code
func (o *GetVPNProfileUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v p n profile using g e t o k response has a 3xx status code
func (o *GetVPNProfileUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v p n profile using g e t o k response has a 4xx status code
func (o *GetVPNProfileUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v p n profile using g e t o k response has a 5xx status code
func (o *GetVPNProfileUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v p n profile using g e t o k response a status code equal to that given
func (o *GetVPNProfileUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v p n profile using g e t o k response
func (o *GetVPNProfileUsingGETOK) Code() int {
	return 200
}

func (o *GetVPNProfileUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/vpn-profile][%d] getVPNProfileUsingGETOK %s", 200, payload)
}

func (o *GetVPNProfileUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/vpn-profile][%d] getVPNProfileUsingGETOK %s", 200, payload)
}

func (o *GetVPNProfileUsingGETOK) GetPayload() string {
	return o.Payload
}

func (o *GetVPNProfileUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVPNProfileUsingGETUnauthorized creates a GetVPNProfileUsingGETUnauthorized with default headers values
func NewGetVPNProfileUsingGETUnauthorized() *GetVPNProfileUsingGETUnauthorized {
	return &GetVPNProfileUsingGETUnauthorized{}
}

/*
GetVPNProfileUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetVPNProfileUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get v p n profile using g e t unauthorized response has a 2xx status code
func (o *GetVPNProfileUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v p n profile using g e t unauthorized response has a 3xx status code
func (o *GetVPNProfileUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v p n profile using g e t unauthorized response has a 4xx status code
func (o *GetVPNProfileUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v p n profile using g e t unauthorized response has a 5xx status code
func (o *GetVPNProfileUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get v p n profile using g e t unauthorized response a status code equal to that given
func (o *GetVPNProfileUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get v p n profile using g e t unauthorized response
func (o *GetVPNProfileUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetVPNProfileUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/vpn-profile][%d] getVPNProfileUsingGETUnauthorized", 401)
}

func (o *GetVPNProfileUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/vpn-profile][%d] getVPNProfileUsingGETUnauthorized", 401)
}

func (o *GetVPNProfileUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVPNProfileUsingGETForbidden creates a GetVPNProfileUsingGETForbidden with default headers values
func NewGetVPNProfileUsingGETForbidden() *GetVPNProfileUsingGETForbidden {
	return &GetVPNProfileUsingGETForbidden{}
}

/*
GetVPNProfileUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetVPNProfileUsingGETForbidden struct {
}

// IsSuccess returns true when this get v p n profile using g e t forbidden response has a 2xx status code
func (o *GetVPNProfileUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v p n profile using g e t forbidden response has a 3xx status code
func (o *GetVPNProfileUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v p n profile using g e t forbidden response has a 4xx status code
func (o *GetVPNProfileUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v p n profile using g e t forbidden response has a 5xx status code
func (o *GetVPNProfileUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get v p n profile using g e t forbidden response a status code equal to that given
func (o *GetVPNProfileUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get v p n profile using g e t forbidden response
func (o *GetVPNProfileUsingGETForbidden) Code() int {
	return 403
}

func (o *GetVPNProfileUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/vpn-profile][%d] getVPNProfileUsingGETForbidden", 403)
}

func (o *GetVPNProfileUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/vpn-profile][%d] getVPNProfileUsingGETForbidden", 403)
}

func (o *GetVPNProfileUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVPNProfileUsingGETNotFound creates a GetVPNProfileUsingGETNotFound with default headers values
func NewGetVPNProfileUsingGETNotFound() *GetVPNProfileUsingGETNotFound {
	return &GetVPNProfileUsingGETNotFound{}
}

/*
GetVPNProfileUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetVPNProfileUsingGETNotFound struct {
}

// IsSuccess returns true when this get v p n profile using g e t not found response has a 2xx status code
func (o *GetVPNProfileUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v p n profile using g e t not found response has a 3xx status code
func (o *GetVPNProfileUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v p n profile using g e t not found response has a 4xx status code
func (o *GetVPNProfileUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v p n profile using g e t not found response has a 5xx status code
func (o *GetVPNProfileUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get v p n profile using g e t not found response a status code equal to that given
func (o *GetVPNProfileUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get v p n profile using g e t not found response
func (o *GetVPNProfileUsingGETNotFound) Code() int {
	return 404
}

func (o *GetVPNProfileUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/vpn-profile][%d] getVPNProfileUsingGETNotFound", 404)
}

func (o *GetVPNProfileUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/vpn-profile][%d] getVPNProfileUsingGETNotFound", 404)
}

func (o *GetVPNProfileUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
