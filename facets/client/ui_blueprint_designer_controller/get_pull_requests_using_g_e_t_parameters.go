// Code generated by go-swagger; DO NOT EDIT.

package ui_blueprint_designer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPullRequestsUsingGETParams creates a new GetPullRequestsUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPullRequestsUsingGETParams() *GetPullRequestsUsingGETParams {
	return &GetPullRequestsUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPullRequestsUsingGETParamsWithTimeout creates a new GetPullRequestsUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetPullRequestsUsingGETParamsWithTimeout(timeout time.Duration) *GetPullRequestsUsingGETParams {
	return &GetPullRequestsUsingGETParams{
		timeout: timeout,
	}
}

// NewGetPullRequestsUsingGETParamsWithContext creates a new GetPullRequestsUsingGETParams object
// with the ability to set a context for a request.
func NewGetPullRequestsUsingGETParamsWithContext(ctx context.Context) *GetPullRequestsUsingGETParams {
	return &GetPullRequestsUsingGETParams{
		Context: ctx,
	}
}

// NewGetPullRequestsUsingGETParamsWithHTTPClient creates a new GetPullRequestsUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPullRequestsUsingGETParamsWithHTTPClient(client *http.Client) *GetPullRequestsUsingGETParams {
	return &GetPullRequestsUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetPullRequestsUsingGETParams contains all the parameters to send to the API endpoint

	for the get pull requests using g e t operation.

	Typically these are written to a http.Request.
*/
type GetPullRequestsUsingGETParams struct {

	/* CreatedDate.

	   createdDate
	*/
	CreatedDate *string

	/* PageNumber.

	   pageNumber

	   Format: int32
	   Default: 1
	*/
	PageNumber *int32

	/* PageSize.

	   pageSize

	   Format: int32
	   Default: 10
	*/
	PageSize *int32

	/* Query.

	   query
	*/
	Query *string

	/* StackName.

	   stackName
	*/
	StackName string

	/* State.

	   state

	   Default: "OPEN"
	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get pull requests using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPullRequestsUsingGETParams) WithDefaults() *GetPullRequestsUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get pull requests using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPullRequestsUsingGETParams) SetDefaults() {
	var (
		pageNumberDefault = int32(1)

		pageSizeDefault = int32(10)

		stateDefault = string("OPEN")
	)

	val := GetPullRequestsUsingGETParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		State:      &stateDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) WithTimeout(timeout time.Duration) *GetPullRequestsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) WithContext(ctx context.Context) *GetPullRequestsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) WithHTTPClient(client *http.Client) *GetPullRequestsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreatedDate adds the createdDate to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) WithCreatedDate(createdDate *string) *GetPullRequestsUsingGETParams {
	o.SetCreatedDate(createdDate)
	return o
}

// SetCreatedDate adds the createdDate to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) SetCreatedDate(createdDate *string) {
	o.CreatedDate = createdDate
}

// WithPageNumber adds the pageNumber to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) WithPageNumber(pageNumber *int32) *GetPullRequestsUsingGETParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) WithPageSize(pageSize *int32) *GetPullRequestsUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithQuery adds the query to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) WithQuery(query *string) *GetPullRequestsUsingGETParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) SetQuery(query *string) {
	o.Query = query
}

// WithStackName adds the stackName to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) WithStackName(stackName string) *GetPullRequestsUsingGETParams {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) SetStackName(stackName string) {
	o.StackName = stackName
}

// WithState adds the state to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) WithState(state *string) *GetPullRequestsUsingGETParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get pull requests using g e t params
func (o *GetPullRequestsUsingGETParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *GetPullRequestsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreatedDate != nil {

		// query param createdDate
		var qrCreatedDate string

		if o.CreatedDate != nil {
			qrCreatedDate = *o.CreatedDate
		}
		qCreatedDate := qrCreatedDate
		if qCreatedDate != "" {

			if err := r.SetQueryParam("createdDate", qCreatedDate); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	// path param stackName
	if err := r.SetPathParam("stackName", o.StackName); err != nil {
		return err
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
