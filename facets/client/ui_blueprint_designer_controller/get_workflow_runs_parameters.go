// Code generated by go-swagger; DO NOT EDIT.

package ui_blueprint_designer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetWorkflowRunsParams creates a new GetWorkflowRunsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetWorkflowRunsParams() *GetWorkflowRunsParams {
	return &GetWorkflowRunsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetWorkflowRunsParamsWithTimeout creates a new GetWorkflowRunsParams object
// with the ability to set a timeout on a request.
func NewGetWorkflowRunsParamsWithTimeout(timeout time.Duration) *GetWorkflowRunsParams {
	return &GetWorkflowRunsParams{
		timeout: timeout,
	}
}

// NewGetWorkflowRunsParamsWithContext creates a new GetWorkflowRunsParams object
// with the ability to set a context for a request.
func NewGetWorkflowRunsParamsWithContext(ctx context.Context) *GetWorkflowRunsParams {
	return &GetWorkflowRunsParams{
		Context: ctx,
	}
}

// NewGetWorkflowRunsParamsWithHTTPClient creates a new GetWorkflowRunsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetWorkflowRunsParamsWithHTTPClient(client *http.Client) *GetWorkflowRunsParams {
	return &GetWorkflowRunsParams{
		HTTPClient: client,
	}
}

/*
GetWorkflowRunsParams contains all the parameters to send to the API endpoint

	for the get workflow runs operation.

	Typically these are written to a http.Request.
*/
type GetWorkflowRunsParams struct {

	// Actor.
	Actor *string

	// Branch.
	Branch *string

	// Event.
	Event *string

	// PageNumber.
	PageNumber *string

	// PageSize.
	PageSize *string

	// StackName.
	StackName string

	// Status.
	Status *string

	// WorkflowID.
	WorkflowID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get workflow runs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWorkflowRunsParams) WithDefaults() *GetWorkflowRunsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get workflow runs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWorkflowRunsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get workflow runs params
func (o *GetWorkflowRunsParams) WithTimeout(timeout time.Duration) *GetWorkflowRunsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get workflow runs params
func (o *GetWorkflowRunsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get workflow runs params
func (o *GetWorkflowRunsParams) WithContext(ctx context.Context) *GetWorkflowRunsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get workflow runs params
func (o *GetWorkflowRunsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get workflow runs params
func (o *GetWorkflowRunsParams) WithHTTPClient(client *http.Client) *GetWorkflowRunsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get workflow runs params
func (o *GetWorkflowRunsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActor adds the actor to the get workflow runs params
func (o *GetWorkflowRunsParams) WithActor(actor *string) *GetWorkflowRunsParams {
	o.SetActor(actor)
	return o
}

// SetActor adds the actor to the get workflow runs params
func (o *GetWorkflowRunsParams) SetActor(actor *string) {
	o.Actor = actor
}

// WithBranch adds the branch to the get workflow runs params
func (o *GetWorkflowRunsParams) WithBranch(branch *string) *GetWorkflowRunsParams {
	o.SetBranch(branch)
	return o
}

// SetBranch adds the branch to the get workflow runs params
func (o *GetWorkflowRunsParams) SetBranch(branch *string) {
	o.Branch = branch
}

// WithEvent adds the event to the get workflow runs params
func (o *GetWorkflowRunsParams) WithEvent(event *string) *GetWorkflowRunsParams {
	o.SetEvent(event)
	return o
}

// SetEvent adds the event to the get workflow runs params
func (o *GetWorkflowRunsParams) SetEvent(event *string) {
	o.Event = event
}

// WithPageNumber adds the pageNumber to the get workflow runs params
func (o *GetWorkflowRunsParams) WithPageNumber(pageNumber *string) *GetWorkflowRunsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get workflow runs params
func (o *GetWorkflowRunsParams) SetPageNumber(pageNumber *string) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get workflow runs params
func (o *GetWorkflowRunsParams) WithPageSize(pageSize *string) *GetWorkflowRunsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get workflow runs params
func (o *GetWorkflowRunsParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WithStackName adds the stackName to the get workflow runs params
func (o *GetWorkflowRunsParams) WithStackName(stackName string) *GetWorkflowRunsParams {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the get workflow runs params
func (o *GetWorkflowRunsParams) SetStackName(stackName string) {
	o.StackName = stackName
}

// WithStatus adds the status to the get workflow runs params
func (o *GetWorkflowRunsParams) WithStatus(status *string) *GetWorkflowRunsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get workflow runs params
func (o *GetWorkflowRunsParams) SetStatus(status *string) {
	o.Status = status
}

// WithWorkflowID adds the workflowID to the get workflow runs params
func (o *GetWorkflowRunsParams) WithWorkflowID(workflowID *string) *GetWorkflowRunsParams {
	o.SetWorkflowID(workflowID)
	return o
}

// SetWorkflowID adds the workflowId to the get workflow runs params
func (o *GetWorkflowRunsParams) SetWorkflowID(workflowID *string) {
	o.WorkflowID = workflowID
}

// WriteToRequest writes these params to a swagger request
func (o *GetWorkflowRunsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Actor != nil {

		// query param actor
		var qrActor string

		if o.Actor != nil {
			qrActor = *o.Actor
		}
		qActor := qrActor
		if qActor != "" {

			if err := r.SetQueryParam("actor", qActor); err != nil {
				return err
			}
		}
	}

	if o.Branch != nil {

		// query param branch
		var qrBranch string

		if o.Branch != nil {
			qrBranch = *o.Branch
		}
		qBranch := qrBranch
		if qBranch != "" {

			if err := r.SetQueryParam("branch", qBranch); err != nil {
				return err
			}
		}
	}

	if o.Event != nil {

		// query param event
		var qrEvent string

		if o.Event != nil {
			qrEvent = *o.Event
		}
		qEvent := qrEvent
		if qEvent != "" {

			if err := r.SetQueryParam("event", qEvent); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber string

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize string

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	// path param stackName
	if err := r.SetPathParam("stackName", o.StackName); err != nil {
		return err
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.WorkflowID != nil {

		// query param workflowId
		var qrWorkflowID string

		if o.WorkflowID != nil {
			qrWorkflowID = *o.WorkflowID
		}
		qWorkflowID := qrWorkflowID
		if qWorkflowID != "" {

			if err := r.SetQueryParam("workflowId", qWorkflowID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
