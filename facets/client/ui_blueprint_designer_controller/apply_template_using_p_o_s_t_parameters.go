// Code generated by go-swagger; DO NOT EDIT.

package ui_blueprint_designer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewApplyTemplateUsingPOSTParams creates a new ApplyTemplateUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewApplyTemplateUsingPOSTParams() *ApplyTemplateUsingPOSTParams {
	return &ApplyTemplateUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewApplyTemplateUsingPOSTParamsWithTimeout creates a new ApplyTemplateUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewApplyTemplateUsingPOSTParamsWithTimeout(timeout time.Duration) *ApplyTemplateUsingPOSTParams {
	return &ApplyTemplateUsingPOSTParams{
		timeout: timeout,
	}
}

// NewApplyTemplateUsingPOSTParamsWithContext creates a new ApplyTemplateUsingPOSTParams object
// with the ability to set a context for a request.
func NewApplyTemplateUsingPOSTParamsWithContext(ctx context.Context) *ApplyTemplateUsingPOSTParams {
	return &ApplyTemplateUsingPOSTParams{
		Context: ctx,
	}
}

// NewApplyTemplateUsingPOSTParamsWithHTTPClient creates a new ApplyTemplateUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewApplyTemplateUsingPOSTParamsWithHTTPClient(client *http.Client) *ApplyTemplateUsingPOSTParams {
	return &ApplyTemplateUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
ApplyTemplateUsingPOSTParams contains all the parameters to send to the API endpoint

	for the apply template using p o s t operation.

	Typically these are written to a http.Request.
*/
type ApplyTemplateUsingPOSTParams struct {

	/* Prefix.

	   prefix
	*/
	Prefix *string

	/* StackName.

	   stackName
	*/
	StackName string

	/* Suffix.

	   suffix
	*/
	Suffix *string

	/* TemplateName.

	   templateName
	*/
	TemplateName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the apply template using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApplyTemplateUsingPOSTParams) WithDefaults() *ApplyTemplateUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the apply template using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApplyTemplateUsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the apply template using p o s t params
func (o *ApplyTemplateUsingPOSTParams) WithTimeout(timeout time.Duration) *ApplyTemplateUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the apply template using p o s t params
func (o *ApplyTemplateUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the apply template using p o s t params
func (o *ApplyTemplateUsingPOSTParams) WithContext(ctx context.Context) *ApplyTemplateUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the apply template using p o s t params
func (o *ApplyTemplateUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the apply template using p o s t params
func (o *ApplyTemplateUsingPOSTParams) WithHTTPClient(client *http.Client) *ApplyTemplateUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the apply template using p o s t params
func (o *ApplyTemplateUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPrefix adds the prefix to the apply template using p o s t params
func (o *ApplyTemplateUsingPOSTParams) WithPrefix(prefix *string) *ApplyTemplateUsingPOSTParams {
	o.SetPrefix(prefix)
	return o
}

// SetPrefix adds the prefix to the apply template using p o s t params
func (o *ApplyTemplateUsingPOSTParams) SetPrefix(prefix *string) {
	o.Prefix = prefix
}

// WithStackName adds the stackName to the apply template using p o s t params
func (o *ApplyTemplateUsingPOSTParams) WithStackName(stackName string) *ApplyTemplateUsingPOSTParams {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the apply template using p o s t params
func (o *ApplyTemplateUsingPOSTParams) SetStackName(stackName string) {
	o.StackName = stackName
}

// WithSuffix adds the suffix to the apply template using p o s t params
func (o *ApplyTemplateUsingPOSTParams) WithSuffix(suffix *string) *ApplyTemplateUsingPOSTParams {
	o.SetSuffix(suffix)
	return o
}

// SetSuffix adds the suffix to the apply template using p o s t params
func (o *ApplyTemplateUsingPOSTParams) SetSuffix(suffix *string) {
	o.Suffix = suffix
}

// WithTemplateName adds the templateName to the apply template using p o s t params
func (o *ApplyTemplateUsingPOSTParams) WithTemplateName(templateName string) *ApplyTemplateUsingPOSTParams {
	o.SetTemplateName(templateName)
	return o
}

// SetTemplateName adds the templateName to the apply template using p o s t params
func (o *ApplyTemplateUsingPOSTParams) SetTemplateName(templateName string) {
	o.TemplateName = templateName
}

// WriteToRequest writes these params to a swagger request
func (o *ApplyTemplateUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Prefix != nil {

		// query param prefix
		var qrPrefix string

		if o.Prefix != nil {
			qrPrefix = *o.Prefix
		}
		qPrefix := qrPrefix
		if qPrefix != "" {

			if err := r.SetQueryParam("prefix", qPrefix); err != nil {
				return err
			}
		}
	}

	// path param stackName
	if err := r.SetPathParam("stackName", o.StackName); err != nil {
		return err
	}

	if o.Suffix != nil {

		// query param suffix
		var qrSuffix string

		if o.Suffix != nil {
			qrSuffix = *o.Suffix
		}
		qSuffix := qrSuffix
		if qSuffix != "" {

			if err := r.SetQueryParam("suffix", qSuffix); err != nil {
				return err
			}
		}
	}

	// path param templateName
	if err := r.SetPathParam("templateName", o.TemplateName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
