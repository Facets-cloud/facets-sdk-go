// Code generated by go-swagger; DO NOT EDIT.

package ui_blueprint_designer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ApplyTemplateReader is a Reader for the ApplyTemplate structure.
type ApplyTemplateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApplyTemplateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewApplyTemplateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewApplyTemplateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewApplyTemplateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewApplyTemplateMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewApplyTemplateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/designer/{stackName}/{templateName}/apply] applyTemplate", response, response.Code())
	}
}

// NewApplyTemplateOK creates a ApplyTemplateOK with default headers values
func NewApplyTemplateOK() *ApplyTemplateOK {
	return &ApplyTemplateOK{}
}

/*
ApplyTemplateOK describes a response with status code 200, with default header values.

OK
*/
type ApplyTemplateOK struct {
}

// IsSuccess returns true when this apply template o k response has a 2xx status code
func (o *ApplyTemplateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this apply template o k response has a 3xx status code
func (o *ApplyTemplateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply template o k response has a 4xx status code
func (o *ApplyTemplateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this apply template o k response has a 5xx status code
func (o *ApplyTemplateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this apply template o k response a status code equal to that given
func (o *ApplyTemplateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the apply template o k response
func (o *ApplyTemplateOK) Code() int {
	return 200
}

func (o *ApplyTemplateOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/{templateName}/apply][%d] applyTemplateOK", 200)
}

func (o *ApplyTemplateOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/{templateName}/apply][%d] applyTemplateOK", 200)
}

func (o *ApplyTemplateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewApplyTemplateBadRequest creates a ApplyTemplateBadRequest with default headers values
func NewApplyTemplateBadRequest() *ApplyTemplateBadRequest {
	return &ApplyTemplateBadRequest{}
}

/*
ApplyTemplateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ApplyTemplateBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this apply template bad request response has a 2xx status code
func (o *ApplyTemplateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply template bad request response has a 3xx status code
func (o *ApplyTemplateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply template bad request response has a 4xx status code
func (o *ApplyTemplateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply template bad request response has a 5xx status code
func (o *ApplyTemplateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this apply template bad request response a status code equal to that given
func (o *ApplyTemplateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the apply template bad request response
func (o *ApplyTemplateBadRequest) Code() int {
	return 400
}

func (o *ApplyTemplateBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/{templateName}/apply][%d] applyTemplateBadRequest %s", 400, payload)
}

func (o *ApplyTemplateBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/{templateName}/apply][%d] applyTemplateBadRequest %s", 400, payload)
}

func (o *ApplyTemplateBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ApplyTemplateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyTemplateNotFound creates a ApplyTemplateNotFound with default headers values
func NewApplyTemplateNotFound() *ApplyTemplateNotFound {
	return &ApplyTemplateNotFound{}
}

/*
ApplyTemplateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ApplyTemplateNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this apply template not found response has a 2xx status code
func (o *ApplyTemplateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply template not found response has a 3xx status code
func (o *ApplyTemplateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply template not found response has a 4xx status code
func (o *ApplyTemplateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply template not found response has a 5xx status code
func (o *ApplyTemplateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this apply template not found response a status code equal to that given
func (o *ApplyTemplateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the apply template not found response
func (o *ApplyTemplateNotFound) Code() int {
	return 404
}

func (o *ApplyTemplateNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/{templateName}/apply][%d] applyTemplateNotFound %s", 404, payload)
}

func (o *ApplyTemplateNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/{templateName}/apply][%d] applyTemplateNotFound %s", 404, payload)
}

func (o *ApplyTemplateNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ApplyTemplateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyTemplateMethodNotAllowed creates a ApplyTemplateMethodNotAllowed with default headers values
func NewApplyTemplateMethodNotAllowed() *ApplyTemplateMethodNotAllowed {
	return &ApplyTemplateMethodNotAllowed{}
}

/*
ApplyTemplateMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ApplyTemplateMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this apply template method not allowed response has a 2xx status code
func (o *ApplyTemplateMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply template method not allowed response has a 3xx status code
func (o *ApplyTemplateMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply template method not allowed response has a 4xx status code
func (o *ApplyTemplateMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply template method not allowed response has a 5xx status code
func (o *ApplyTemplateMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this apply template method not allowed response a status code equal to that given
func (o *ApplyTemplateMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the apply template method not allowed response
func (o *ApplyTemplateMethodNotAllowed) Code() int {
	return 405
}

func (o *ApplyTemplateMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/{templateName}/apply][%d] applyTemplateMethodNotAllowed %s", 405, payload)
}

func (o *ApplyTemplateMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/{templateName}/apply][%d] applyTemplateMethodNotAllowed %s", 405, payload)
}

func (o *ApplyTemplateMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ApplyTemplateMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyTemplateInternalServerError creates a ApplyTemplateInternalServerError with default headers values
func NewApplyTemplateInternalServerError() *ApplyTemplateInternalServerError {
	return &ApplyTemplateInternalServerError{}
}

/*
ApplyTemplateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ApplyTemplateInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this apply template internal server error response has a 2xx status code
func (o *ApplyTemplateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply template internal server error response has a 3xx status code
func (o *ApplyTemplateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply template internal server error response has a 4xx status code
func (o *ApplyTemplateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this apply template internal server error response has a 5xx status code
func (o *ApplyTemplateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this apply template internal server error response a status code equal to that given
func (o *ApplyTemplateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the apply template internal server error response
func (o *ApplyTemplateInternalServerError) Code() int {
	return 500
}

func (o *ApplyTemplateInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/{templateName}/apply][%d] applyTemplateInternalServerError %s", 500, payload)
}

func (o *ApplyTemplateInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/designer/{stackName}/{templateName}/apply][%d] applyTemplateInternalServerError %s", 500, payload)
}

func (o *ApplyTemplateInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ApplyTemplateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
