// Code generated by go-swagger; DO NOT EDIT.

package ui_blueprint_designer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetWorkflowsUsingGETReader is a Reader for the GetWorkflowsUsingGET structure.
type GetWorkflowsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkflowsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkflowsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetWorkflowsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWorkflowsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWorkflowsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflows] getWorkflowsUsingGET", response, response.Code())
	}
}

// NewGetWorkflowsUsingGETOK creates a GetWorkflowsUsingGETOK with default headers values
func NewGetWorkflowsUsingGETOK() *GetWorkflowsUsingGETOK {
	return &GetWorkflowsUsingGETOK{}
}

/*
GetWorkflowsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetWorkflowsUsingGETOK struct {
	Payload []*models.Workflow
}

// IsSuccess returns true when this get workflows using g e t o k response has a 2xx status code
func (o *GetWorkflowsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get workflows using g e t o k response has a 3xx status code
func (o *GetWorkflowsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflows using g e t o k response has a 4xx status code
func (o *GetWorkflowsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get workflows using g e t o k response has a 5xx status code
func (o *GetWorkflowsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflows using g e t o k response a status code equal to that given
func (o *GetWorkflowsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get workflows using g e t o k response
func (o *GetWorkflowsUsingGETOK) Code() int {
	return 200
}

func (o *GetWorkflowsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflows][%d] getWorkflowsUsingGETOK %s", 200, payload)
}

func (o *GetWorkflowsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflows][%d] getWorkflowsUsingGETOK %s", 200, payload)
}

func (o *GetWorkflowsUsingGETOK) GetPayload() []*models.Workflow {
	return o.Payload
}

func (o *GetWorkflowsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowsUsingGETUnauthorized creates a GetWorkflowsUsingGETUnauthorized with default headers values
func NewGetWorkflowsUsingGETUnauthorized() *GetWorkflowsUsingGETUnauthorized {
	return &GetWorkflowsUsingGETUnauthorized{}
}

/*
GetWorkflowsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetWorkflowsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get workflows using g e t unauthorized response has a 2xx status code
func (o *GetWorkflowsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflows using g e t unauthorized response has a 3xx status code
func (o *GetWorkflowsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflows using g e t unauthorized response has a 4xx status code
func (o *GetWorkflowsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflows using g e t unauthorized response has a 5xx status code
func (o *GetWorkflowsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflows using g e t unauthorized response a status code equal to that given
func (o *GetWorkflowsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get workflows using g e t unauthorized response
func (o *GetWorkflowsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetWorkflowsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflows][%d] getWorkflowsUsingGETUnauthorized", 401)
}

func (o *GetWorkflowsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflows][%d] getWorkflowsUsingGETUnauthorized", 401)
}

func (o *GetWorkflowsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetWorkflowsUsingGETForbidden creates a GetWorkflowsUsingGETForbidden with default headers values
func NewGetWorkflowsUsingGETForbidden() *GetWorkflowsUsingGETForbidden {
	return &GetWorkflowsUsingGETForbidden{}
}

/*
GetWorkflowsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetWorkflowsUsingGETForbidden struct {
}

// IsSuccess returns true when this get workflows using g e t forbidden response has a 2xx status code
func (o *GetWorkflowsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflows using g e t forbidden response has a 3xx status code
func (o *GetWorkflowsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflows using g e t forbidden response has a 4xx status code
func (o *GetWorkflowsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflows using g e t forbidden response has a 5xx status code
func (o *GetWorkflowsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflows using g e t forbidden response a status code equal to that given
func (o *GetWorkflowsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get workflows using g e t forbidden response
func (o *GetWorkflowsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetWorkflowsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflows][%d] getWorkflowsUsingGETForbidden", 403)
}

func (o *GetWorkflowsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflows][%d] getWorkflowsUsingGETForbidden", 403)
}

func (o *GetWorkflowsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetWorkflowsUsingGETNotFound creates a GetWorkflowsUsingGETNotFound with default headers values
func NewGetWorkflowsUsingGETNotFound() *GetWorkflowsUsingGETNotFound {
	return &GetWorkflowsUsingGETNotFound{}
}

/*
GetWorkflowsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetWorkflowsUsingGETNotFound struct {
}

// IsSuccess returns true when this get workflows using g e t not found response has a 2xx status code
func (o *GetWorkflowsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflows using g e t not found response has a 3xx status code
func (o *GetWorkflowsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflows using g e t not found response has a 4xx status code
func (o *GetWorkflowsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflows using g e t not found response has a 5xx status code
func (o *GetWorkflowsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflows using g e t not found response a status code equal to that given
func (o *GetWorkflowsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get workflows using g e t not found response
func (o *GetWorkflowsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetWorkflowsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflows][%d] getWorkflowsUsingGETNotFound", 404)
}

func (o *GetWorkflowsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflows][%d] getWorkflowsUsingGETNotFound", 404)
}

func (o *GetWorkflowsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
