// Code generated by go-swagger; DO NOT EDIT.

package ui_blueprint_designer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RenameResourceUsingPUTReader is a Reader for the RenameResourceUsingPUT structure.
type RenameResourceUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RenameResourceUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRenameResourceUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewRenameResourceUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRenameResourceUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRenameResourceUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRenameResourceUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename] renameResourceUsingPUT", response, response.Code())
	}
}

// NewRenameResourceUsingPUTOK creates a RenameResourceUsingPUTOK with default headers values
func NewRenameResourceUsingPUTOK() *RenameResourceUsingPUTOK {
	return &RenameResourceUsingPUTOK{}
}

/*
RenameResourceUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type RenameResourceUsingPUTOK struct {
}

// IsSuccess returns true when this rename resource using p u t o k response has a 2xx status code
func (o *RenameResourceUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rename resource using p u t o k response has a 3xx status code
func (o *RenameResourceUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rename resource using p u t o k response has a 4xx status code
func (o *RenameResourceUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this rename resource using p u t o k response has a 5xx status code
func (o *RenameResourceUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this rename resource using p u t o k response a status code equal to that given
func (o *RenameResourceUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the rename resource using p u t o k response
func (o *RenameResourceUsingPUTOK) Code() int {
	return 200
}

func (o *RenameResourceUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceUsingPUTOK", 200)
}

func (o *RenameResourceUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceUsingPUTOK", 200)
}

func (o *RenameResourceUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRenameResourceUsingPUTCreated creates a RenameResourceUsingPUTCreated with default headers values
func NewRenameResourceUsingPUTCreated() *RenameResourceUsingPUTCreated {
	return &RenameResourceUsingPUTCreated{}
}

/*
RenameResourceUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type RenameResourceUsingPUTCreated struct {
}

// IsSuccess returns true when this rename resource using p u t created response has a 2xx status code
func (o *RenameResourceUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rename resource using p u t created response has a 3xx status code
func (o *RenameResourceUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rename resource using p u t created response has a 4xx status code
func (o *RenameResourceUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this rename resource using p u t created response has a 5xx status code
func (o *RenameResourceUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this rename resource using p u t created response a status code equal to that given
func (o *RenameResourceUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the rename resource using p u t created response
func (o *RenameResourceUsingPUTCreated) Code() int {
	return 201
}

func (o *RenameResourceUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceUsingPUTCreated", 201)
}

func (o *RenameResourceUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceUsingPUTCreated", 201)
}

func (o *RenameResourceUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRenameResourceUsingPUTUnauthorized creates a RenameResourceUsingPUTUnauthorized with default headers values
func NewRenameResourceUsingPUTUnauthorized() *RenameResourceUsingPUTUnauthorized {
	return &RenameResourceUsingPUTUnauthorized{}
}

/*
RenameResourceUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RenameResourceUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this rename resource using p u t unauthorized response has a 2xx status code
func (o *RenameResourceUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rename resource using p u t unauthorized response has a 3xx status code
func (o *RenameResourceUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rename resource using p u t unauthorized response has a 4xx status code
func (o *RenameResourceUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this rename resource using p u t unauthorized response has a 5xx status code
func (o *RenameResourceUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this rename resource using p u t unauthorized response a status code equal to that given
func (o *RenameResourceUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the rename resource using p u t unauthorized response
func (o *RenameResourceUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *RenameResourceUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceUsingPUTUnauthorized", 401)
}

func (o *RenameResourceUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceUsingPUTUnauthorized", 401)
}

func (o *RenameResourceUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRenameResourceUsingPUTForbidden creates a RenameResourceUsingPUTForbidden with default headers values
func NewRenameResourceUsingPUTForbidden() *RenameResourceUsingPUTForbidden {
	return &RenameResourceUsingPUTForbidden{}
}

/*
RenameResourceUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RenameResourceUsingPUTForbidden struct {
}

// IsSuccess returns true when this rename resource using p u t forbidden response has a 2xx status code
func (o *RenameResourceUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rename resource using p u t forbidden response has a 3xx status code
func (o *RenameResourceUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rename resource using p u t forbidden response has a 4xx status code
func (o *RenameResourceUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this rename resource using p u t forbidden response has a 5xx status code
func (o *RenameResourceUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this rename resource using p u t forbidden response a status code equal to that given
func (o *RenameResourceUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the rename resource using p u t forbidden response
func (o *RenameResourceUsingPUTForbidden) Code() int {
	return 403
}

func (o *RenameResourceUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceUsingPUTForbidden", 403)
}

func (o *RenameResourceUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceUsingPUTForbidden", 403)
}

func (o *RenameResourceUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRenameResourceUsingPUTNotFound creates a RenameResourceUsingPUTNotFound with default headers values
func NewRenameResourceUsingPUTNotFound() *RenameResourceUsingPUTNotFound {
	return &RenameResourceUsingPUTNotFound{}
}

/*
RenameResourceUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RenameResourceUsingPUTNotFound struct {
}

// IsSuccess returns true when this rename resource using p u t not found response has a 2xx status code
func (o *RenameResourceUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rename resource using p u t not found response has a 3xx status code
func (o *RenameResourceUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rename resource using p u t not found response has a 4xx status code
func (o *RenameResourceUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this rename resource using p u t not found response has a 5xx status code
func (o *RenameResourceUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this rename resource using p u t not found response a status code equal to that given
func (o *RenameResourceUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the rename resource using p u t not found response
func (o *RenameResourceUsingPUTNotFound) Code() int {
	return 404
}

func (o *RenameResourceUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceUsingPUTNotFound", 404)
}

func (o *RenameResourceUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceUsingPUTNotFound", 404)
}

func (o *RenameResourceUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
