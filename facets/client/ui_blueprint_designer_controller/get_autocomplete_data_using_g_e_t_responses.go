// Code generated by go-swagger; DO NOT EDIT.

package ui_blueprint_designer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAutocompleteDataUsingGETReader is a Reader for the GetAutocompleteDataUsingGET structure.
type GetAutocompleteDataUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAutocompleteDataUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAutocompleteDataUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAutocompleteDataUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAutocompleteDataUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAutocompleteDataUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/designer/{stackName}/ref-autocomplete-data] getAutocompleteDataUsingGET", response, response.Code())
	}
}

// NewGetAutocompleteDataUsingGETOK creates a GetAutocompleteDataUsingGETOK with default headers values
func NewGetAutocompleteDataUsingGETOK() *GetAutocompleteDataUsingGETOK {
	return &GetAutocompleteDataUsingGETOK{}
}

/*
GetAutocompleteDataUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAutocompleteDataUsingGETOK struct {
	Payload *models.AutocompleteResponse
}

// IsSuccess returns true when this get autocomplete data using g e t o k response has a 2xx status code
func (o *GetAutocompleteDataUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get autocomplete data using g e t o k response has a 3xx status code
func (o *GetAutocompleteDataUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get autocomplete data using g e t o k response has a 4xx status code
func (o *GetAutocompleteDataUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get autocomplete data using g e t o k response has a 5xx status code
func (o *GetAutocompleteDataUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get autocomplete data using g e t o k response a status code equal to that given
func (o *GetAutocompleteDataUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get autocomplete data using g e t o k response
func (o *GetAutocompleteDataUsingGETOK) Code() int {
	return 200
}

func (o *GetAutocompleteDataUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/ref-autocomplete-data][%d] getAutocompleteDataUsingGETOK %s", 200, payload)
}

func (o *GetAutocompleteDataUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/ref-autocomplete-data][%d] getAutocompleteDataUsingGETOK %s", 200, payload)
}

func (o *GetAutocompleteDataUsingGETOK) GetPayload() *models.AutocompleteResponse {
	return o.Payload
}

func (o *GetAutocompleteDataUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AutocompleteResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAutocompleteDataUsingGETUnauthorized creates a GetAutocompleteDataUsingGETUnauthorized with default headers values
func NewGetAutocompleteDataUsingGETUnauthorized() *GetAutocompleteDataUsingGETUnauthorized {
	return &GetAutocompleteDataUsingGETUnauthorized{}
}

/*
GetAutocompleteDataUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAutocompleteDataUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get autocomplete data using g e t unauthorized response has a 2xx status code
func (o *GetAutocompleteDataUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get autocomplete data using g e t unauthorized response has a 3xx status code
func (o *GetAutocompleteDataUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get autocomplete data using g e t unauthorized response has a 4xx status code
func (o *GetAutocompleteDataUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get autocomplete data using g e t unauthorized response has a 5xx status code
func (o *GetAutocompleteDataUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get autocomplete data using g e t unauthorized response a status code equal to that given
func (o *GetAutocompleteDataUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get autocomplete data using g e t unauthorized response
func (o *GetAutocompleteDataUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAutocompleteDataUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/ref-autocomplete-data][%d] getAutocompleteDataUsingGETUnauthorized", 401)
}

func (o *GetAutocompleteDataUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/ref-autocomplete-data][%d] getAutocompleteDataUsingGETUnauthorized", 401)
}

func (o *GetAutocompleteDataUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAutocompleteDataUsingGETForbidden creates a GetAutocompleteDataUsingGETForbidden with default headers values
func NewGetAutocompleteDataUsingGETForbidden() *GetAutocompleteDataUsingGETForbidden {
	return &GetAutocompleteDataUsingGETForbidden{}
}

/*
GetAutocompleteDataUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAutocompleteDataUsingGETForbidden struct {
}

// IsSuccess returns true when this get autocomplete data using g e t forbidden response has a 2xx status code
func (o *GetAutocompleteDataUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get autocomplete data using g e t forbidden response has a 3xx status code
func (o *GetAutocompleteDataUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get autocomplete data using g e t forbidden response has a 4xx status code
func (o *GetAutocompleteDataUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get autocomplete data using g e t forbidden response has a 5xx status code
func (o *GetAutocompleteDataUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get autocomplete data using g e t forbidden response a status code equal to that given
func (o *GetAutocompleteDataUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get autocomplete data using g e t forbidden response
func (o *GetAutocompleteDataUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAutocompleteDataUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/ref-autocomplete-data][%d] getAutocompleteDataUsingGETForbidden", 403)
}

func (o *GetAutocompleteDataUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/ref-autocomplete-data][%d] getAutocompleteDataUsingGETForbidden", 403)
}

func (o *GetAutocompleteDataUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAutocompleteDataUsingGETNotFound creates a GetAutocompleteDataUsingGETNotFound with default headers values
func NewGetAutocompleteDataUsingGETNotFound() *GetAutocompleteDataUsingGETNotFound {
	return &GetAutocompleteDataUsingGETNotFound{}
}

/*
GetAutocompleteDataUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAutocompleteDataUsingGETNotFound struct {
}

// IsSuccess returns true when this get autocomplete data using g e t not found response has a 2xx status code
func (o *GetAutocompleteDataUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get autocomplete data using g e t not found response has a 3xx status code
func (o *GetAutocompleteDataUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get autocomplete data using g e t not found response has a 4xx status code
func (o *GetAutocompleteDataUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get autocomplete data using g e t not found response has a 5xx status code
func (o *GetAutocompleteDataUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get autocomplete data using g e t not found response a status code equal to that given
func (o *GetAutocompleteDataUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get autocomplete data using g e t not found response
func (o *GetAutocompleteDataUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAutocompleteDataUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/ref-autocomplete-data][%d] getAutocompleteDataUsingGETNotFound", 404)
}

func (o *GetAutocompleteDataUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/ref-autocomplete-data][%d] getAutocompleteDataUsingGETNotFound", 404)
}

func (o *GetAutocompleteDataUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
