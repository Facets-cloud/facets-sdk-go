// Code generated by go-swagger; DO NOT EDIT.

package ui_blueprint_designer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// NewUpdateResourcesUsingPUTParams creates a new UpdateResourcesUsingPUTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateResourcesUsingPUTParams() *UpdateResourcesUsingPUTParams {
	return &UpdateResourcesUsingPUTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateResourcesUsingPUTParamsWithTimeout creates a new UpdateResourcesUsingPUTParams object
// with the ability to set a timeout on a request.
func NewUpdateResourcesUsingPUTParamsWithTimeout(timeout time.Duration) *UpdateResourcesUsingPUTParams {
	return &UpdateResourcesUsingPUTParams{
		timeout: timeout,
	}
}

// NewUpdateResourcesUsingPUTParamsWithContext creates a new UpdateResourcesUsingPUTParams object
// with the ability to set a context for a request.
func NewUpdateResourcesUsingPUTParamsWithContext(ctx context.Context) *UpdateResourcesUsingPUTParams {
	return &UpdateResourcesUsingPUTParams{
		Context: ctx,
	}
}

// NewUpdateResourcesUsingPUTParamsWithHTTPClient creates a new UpdateResourcesUsingPUTParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateResourcesUsingPUTParamsWithHTTPClient(client *http.Client) *UpdateResourcesUsingPUTParams {
	return &UpdateResourcesUsingPUTParams{
		HTTPClient: client,
	}
}

/*
UpdateResourcesUsingPUTParams contains all the parameters to send to the API endpoint

	for the update resources using p u t operation.

	Typically these are written to a http.Request.
*/
type UpdateResourcesUsingPUTParams struct {

	/* Branch.

	   branch
	*/
	Branch string

	/* ResourceFileRequests.

	   resourceFileRequests
	*/
	ResourceFileRequests []*models.ResourceFileRequest

	/* StackName.

	   stackName
	*/
	StackName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update resources using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateResourcesUsingPUTParams) WithDefaults() *UpdateResourcesUsingPUTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update resources using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateResourcesUsingPUTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update resources using p u t params
func (o *UpdateResourcesUsingPUTParams) WithTimeout(timeout time.Duration) *UpdateResourcesUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update resources using p u t params
func (o *UpdateResourcesUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update resources using p u t params
func (o *UpdateResourcesUsingPUTParams) WithContext(ctx context.Context) *UpdateResourcesUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update resources using p u t params
func (o *UpdateResourcesUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update resources using p u t params
func (o *UpdateResourcesUsingPUTParams) WithHTTPClient(client *http.Client) *UpdateResourcesUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update resources using p u t params
func (o *UpdateResourcesUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBranch adds the branch to the update resources using p u t params
func (o *UpdateResourcesUsingPUTParams) WithBranch(branch string) *UpdateResourcesUsingPUTParams {
	o.SetBranch(branch)
	return o
}

// SetBranch adds the branch to the update resources using p u t params
func (o *UpdateResourcesUsingPUTParams) SetBranch(branch string) {
	o.Branch = branch
}

// WithResourceFileRequests adds the resourceFileRequests to the update resources using p u t params
func (o *UpdateResourcesUsingPUTParams) WithResourceFileRequests(resourceFileRequests []*models.ResourceFileRequest) *UpdateResourcesUsingPUTParams {
	o.SetResourceFileRequests(resourceFileRequests)
	return o
}

// SetResourceFileRequests adds the resourceFileRequests to the update resources using p u t params
func (o *UpdateResourcesUsingPUTParams) SetResourceFileRequests(resourceFileRequests []*models.ResourceFileRequest) {
	o.ResourceFileRequests = resourceFileRequests
}

// WithStackName adds the stackName to the update resources using p u t params
func (o *UpdateResourcesUsingPUTParams) WithStackName(stackName string) *UpdateResourcesUsingPUTParams {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the update resources using p u t params
func (o *UpdateResourcesUsingPUTParams) SetStackName(stackName string) {
	o.StackName = stackName
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateResourcesUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param branch
	if err := r.SetPathParam("branch", o.Branch); err != nil {
		return err
	}
	if o.ResourceFileRequests != nil {
		if err := r.SetBodyParam(o.ResourceFileRequests); err != nil {
			return err
		}
	}

	// path param stackName
	if err := r.SetPathParam("stackName", o.StackName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
