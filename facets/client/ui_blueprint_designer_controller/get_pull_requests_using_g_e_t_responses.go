// Code generated by go-swagger; DO NOT EDIT.

package ui_blueprint_designer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetPullRequestsUsingGETReader is a Reader for the GetPullRequestsUsingGET structure.
type GetPullRequestsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPullRequestsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPullRequestsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetPullRequestsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPullRequestsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPullRequestsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/designer/{stackName}/pulls] getPullRequestsUsingGET", response, response.Code())
	}
}

// NewGetPullRequestsUsingGETOK creates a GetPullRequestsUsingGETOK with default headers values
func NewGetPullRequestsUsingGETOK() *GetPullRequestsUsingGETOK {
	return &GetPullRequestsUsingGETOK{}
}

/*
GetPullRequestsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetPullRequestsUsingGETOK struct {
	Payload *models.ListPullRequestResponse
}

// IsSuccess returns true when this get pull requests using g e t o k response has a 2xx status code
func (o *GetPullRequestsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get pull requests using g e t o k response has a 3xx status code
func (o *GetPullRequestsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get pull requests using g e t o k response has a 4xx status code
func (o *GetPullRequestsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get pull requests using g e t o k response has a 5xx status code
func (o *GetPullRequestsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get pull requests using g e t o k response a status code equal to that given
func (o *GetPullRequestsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get pull requests using g e t o k response
func (o *GetPullRequestsUsingGETOK) Code() int {
	return 200
}

func (o *GetPullRequestsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/pulls][%d] getPullRequestsUsingGETOK %s", 200, payload)
}

func (o *GetPullRequestsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/pulls][%d] getPullRequestsUsingGETOK %s", 200, payload)
}

func (o *GetPullRequestsUsingGETOK) GetPayload() *models.ListPullRequestResponse {
	return o.Payload
}

func (o *GetPullRequestsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListPullRequestResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPullRequestsUsingGETUnauthorized creates a GetPullRequestsUsingGETUnauthorized with default headers values
func NewGetPullRequestsUsingGETUnauthorized() *GetPullRequestsUsingGETUnauthorized {
	return &GetPullRequestsUsingGETUnauthorized{}
}

/*
GetPullRequestsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetPullRequestsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get pull requests using g e t unauthorized response has a 2xx status code
func (o *GetPullRequestsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get pull requests using g e t unauthorized response has a 3xx status code
func (o *GetPullRequestsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get pull requests using g e t unauthorized response has a 4xx status code
func (o *GetPullRequestsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get pull requests using g e t unauthorized response has a 5xx status code
func (o *GetPullRequestsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get pull requests using g e t unauthorized response a status code equal to that given
func (o *GetPullRequestsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get pull requests using g e t unauthorized response
func (o *GetPullRequestsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetPullRequestsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/pulls][%d] getPullRequestsUsingGETUnauthorized", 401)
}

func (o *GetPullRequestsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/pulls][%d] getPullRequestsUsingGETUnauthorized", 401)
}

func (o *GetPullRequestsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPullRequestsUsingGETForbidden creates a GetPullRequestsUsingGETForbidden with default headers values
func NewGetPullRequestsUsingGETForbidden() *GetPullRequestsUsingGETForbidden {
	return &GetPullRequestsUsingGETForbidden{}
}

/*
GetPullRequestsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetPullRequestsUsingGETForbidden struct {
}

// IsSuccess returns true when this get pull requests using g e t forbidden response has a 2xx status code
func (o *GetPullRequestsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get pull requests using g e t forbidden response has a 3xx status code
func (o *GetPullRequestsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get pull requests using g e t forbidden response has a 4xx status code
func (o *GetPullRequestsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get pull requests using g e t forbidden response has a 5xx status code
func (o *GetPullRequestsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get pull requests using g e t forbidden response a status code equal to that given
func (o *GetPullRequestsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get pull requests using g e t forbidden response
func (o *GetPullRequestsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetPullRequestsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/pulls][%d] getPullRequestsUsingGETForbidden", 403)
}

func (o *GetPullRequestsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/pulls][%d] getPullRequestsUsingGETForbidden", 403)
}

func (o *GetPullRequestsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPullRequestsUsingGETNotFound creates a GetPullRequestsUsingGETNotFound with default headers values
func NewGetPullRequestsUsingGETNotFound() *GetPullRequestsUsingGETNotFound {
	return &GetPullRequestsUsingGETNotFound{}
}

/*
GetPullRequestsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetPullRequestsUsingGETNotFound struct {
}

// IsSuccess returns true when this get pull requests using g e t not found response has a 2xx status code
func (o *GetPullRequestsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get pull requests using g e t not found response has a 3xx status code
func (o *GetPullRequestsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get pull requests using g e t not found response has a 4xx status code
func (o *GetPullRequestsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get pull requests using g e t not found response has a 5xx status code
func (o *GetPullRequestsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get pull requests using g e t not found response a status code equal to that given
func (o *GetPullRequestsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get pull requests using g e t not found response
func (o *GetPullRequestsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetPullRequestsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/pulls][%d] getPullRequestsUsingGETNotFound", 404)
}

func (o *GetPullRequestsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/designer/{stackName}/pulls][%d] getPullRequestsUsingGETNotFound", 404)
}

func (o *GetPullRequestsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
