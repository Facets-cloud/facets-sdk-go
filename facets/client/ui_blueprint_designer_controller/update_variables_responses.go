// Code generated by go-swagger; DO NOT EDIT.

package ui_blueprint_designer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateVariablesReader is a Reader for the UpdateVariables structure.
type UpdateVariablesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVariablesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVariablesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVariablesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVariablesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateVariablesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateVariablesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/designer/{stackName}/variables] updateVariables", response, response.Code())
	}
}

// NewUpdateVariablesOK creates a UpdateVariablesOK with default headers values
func NewUpdateVariablesOK() *UpdateVariablesOK {
	return &UpdateVariablesOK{}
}

/*
UpdateVariablesOK describes a response with status code 200, with default header values.

OK
*/
type UpdateVariablesOK struct {
}

// IsSuccess returns true when this update variables o k response has a 2xx status code
func (o *UpdateVariablesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update variables o k response has a 3xx status code
func (o *UpdateVariablesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update variables o k response has a 4xx status code
func (o *UpdateVariablesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update variables o k response has a 5xx status code
func (o *UpdateVariablesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update variables o k response a status code equal to that given
func (o *UpdateVariablesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update variables o k response
func (o *UpdateVariablesOK) Code() int {
	return 200
}

func (o *UpdateVariablesOK) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/variables][%d] updateVariablesOK", 200)
}

func (o *UpdateVariablesOK) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/variables][%d] updateVariablesOK", 200)
}

func (o *UpdateVariablesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVariablesBadRequest creates a UpdateVariablesBadRequest with default headers values
func NewUpdateVariablesBadRequest() *UpdateVariablesBadRequest {
	return &UpdateVariablesBadRequest{}
}

/*
UpdateVariablesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateVariablesBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update variables bad request response has a 2xx status code
func (o *UpdateVariablesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update variables bad request response has a 3xx status code
func (o *UpdateVariablesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update variables bad request response has a 4xx status code
func (o *UpdateVariablesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update variables bad request response has a 5xx status code
func (o *UpdateVariablesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update variables bad request response a status code equal to that given
func (o *UpdateVariablesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update variables bad request response
func (o *UpdateVariablesBadRequest) Code() int {
	return 400
}

func (o *UpdateVariablesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/variables][%d] updateVariablesBadRequest %s", 400, payload)
}

func (o *UpdateVariablesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/variables][%d] updateVariablesBadRequest %s", 400, payload)
}

func (o *UpdateVariablesBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateVariablesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVariablesNotFound creates a UpdateVariablesNotFound with default headers values
func NewUpdateVariablesNotFound() *UpdateVariablesNotFound {
	return &UpdateVariablesNotFound{}
}

/*
UpdateVariablesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateVariablesNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update variables not found response has a 2xx status code
func (o *UpdateVariablesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update variables not found response has a 3xx status code
func (o *UpdateVariablesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update variables not found response has a 4xx status code
func (o *UpdateVariablesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update variables not found response has a 5xx status code
func (o *UpdateVariablesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update variables not found response a status code equal to that given
func (o *UpdateVariablesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update variables not found response
func (o *UpdateVariablesNotFound) Code() int {
	return 404
}

func (o *UpdateVariablesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/variables][%d] updateVariablesNotFound %s", 404, payload)
}

func (o *UpdateVariablesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/variables][%d] updateVariablesNotFound %s", 404, payload)
}

func (o *UpdateVariablesNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateVariablesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVariablesMethodNotAllowed creates a UpdateVariablesMethodNotAllowed with default headers values
func NewUpdateVariablesMethodNotAllowed() *UpdateVariablesMethodNotAllowed {
	return &UpdateVariablesMethodNotAllowed{}
}

/*
UpdateVariablesMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateVariablesMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update variables method not allowed response has a 2xx status code
func (o *UpdateVariablesMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update variables method not allowed response has a 3xx status code
func (o *UpdateVariablesMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update variables method not allowed response has a 4xx status code
func (o *UpdateVariablesMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update variables method not allowed response has a 5xx status code
func (o *UpdateVariablesMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update variables method not allowed response a status code equal to that given
func (o *UpdateVariablesMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update variables method not allowed response
func (o *UpdateVariablesMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateVariablesMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/variables][%d] updateVariablesMethodNotAllowed %s", 405, payload)
}

func (o *UpdateVariablesMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/variables][%d] updateVariablesMethodNotAllowed %s", 405, payload)
}

func (o *UpdateVariablesMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateVariablesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVariablesInternalServerError creates a UpdateVariablesInternalServerError with default headers values
func NewUpdateVariablesInternalServerError() *UpdateVariablesInternalServerError {
	return &UpdateVariablesInternalServerError{}
}

/*
UpdateVariablesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateVariablesInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update variables internal server error response has a 2xx status code
func (o *UpdateVariablesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update variables internal server error response has a 3xx status code
func (o *UpdateVariablesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update variables internal server error response has a 4xx status code
func (o *UpdateVariablesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update variables internal server error response has a 5xx status code
func (o *UpdateVariablesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update variables internal server error response a status code equal to that given
func (o *UpdateVariablesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update variables internal server error response
func (o *UpdateVariablesInternalServerError) Code() int {
	return 500
}

func (o *UpdateVariablesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/variables][%d] updateVariablesInternalServerError %s", 500, payload)
}

func (o *UpdateVariablesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/variables][%d] updateVariablesInternalServerError %s", 500, payload)
}

func (o *UpdateVariablesInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateVariablesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
