// Code generated by go-swagger; DO NOT EDIT.

package ui_blueprint_designer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteVariablesUsingDELETEReader is a Reader for the DeleteVariablesUsingDELETE structure.
type DeleteVariablesUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVariablesUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteVariablesUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteVariablesUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteVariablesUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteVariablesUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/designer/{stackName}/variables] deleteVariablesUsingDELETE", response, response.Code())
	}
}

// NewDeleteVariablesUsingDELETEOK creates a DeleteVariablesUsingDELETEOK with default headers values
func NewDeleteVariablesUsingDELETEOK() *DeleteVariablesUsingDELETEOK {
	return &DeleteVariablesUsingDELETEOK{}
}

/*
DeleteVariablesUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteVariablesUsingDELETEOK struct {
}

// IsSuccess returns true when this delete variables using d e l e t e o k response has a 2xx status code
func (o *DeleteVariablesUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete variables using d e l e t e o k response has a 3xx status code
func (o *DeleteVariablesUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete variables using d e l e t e o k response has a 4xx status code
func (o *DeleteVariablesUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete variables using d e l e t e o k response has a 5xx status code
func (o *DeleteVariablesUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete variables using d e l e t e o k response a status code equal to that given
func (o *DeleteVariablesUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete variables using d e l e t e o k response
func (o *DeleteVariablesUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteVariablesUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/designer/{stackName}/variables][%d] deleteVariablesUsingDELETEOK", 200)
}

func (o *DeleteVariablesUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/designer/{stackName}/variables][%d] deleteVariablesUsingDELETEOK", 200)
}

func (o *DeleteVariablesUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVariablesUsingDELETENoContent creates a DeleteVariablesUsingDELETENoContent with default headers values
func NewDeleteVariablesUsingDELETENoContent() *DeleteVariablesUsingDELETENoContent {
	return &DeleteVariablesUsingDELETENoContent{}
}

/*
DeleteVariablesUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteVariablesUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete variables using d e l e t e no content response has a 2xx status code
func (o *DeleteVariablesUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete variables using d e l e t e no content response has a 3xx status code
func (o *DeleteVariablesUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete variables using d e l e t e no content response has a 4xx status code
func (o *DeleteVariablesUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete variables using d e l e t e no content response has a 5xx status code
func (o *DeleteVariablesUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete variables using d e l e t e no content response a status code equal to that given
func (o *DeleteVariablesUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete variables using d e l e t e no content response
func (o *DeleteVariablesUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteVariablesUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/designer/{stackName}/variables][%d] deleteVariablesUsingDELETENoContent", 204)
}

func (o *DeleteVariablesUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/designer/{stackName}/variables][%d] deleteVariablesUsingDELETENoContent", 204)
}

func (o *DeleteVariablesUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVariablesUsingDELETEUnauthorized creates a DeleteVariablesUsingDELETEUnauthorized with default headers values
func NewDeleteVariablesUsingDELETEUnauthorized() *DeleteVariablesUsingDELETEUnauthorized {
	return &DeleteVariablesUsingDELETEUnauthorized{}
}

/*
DeleteVariablesUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteVariablesUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete variables using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteVariablesUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete variables using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteVariablesUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete variables using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteVariablesUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete variables using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteVariablesUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete variables using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteVariablesUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete variables using d e l e t e unauthorized response
func (o *DeleteVariablesUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteVariablesUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/designer/{stackName}/variables][%d] deleteVariablesUsingDELETEUnauthorized", 401)
}

func (o *DeleteVariablesUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/designer/{stackName}/variables][%d] deleteVariablesUsingDELETEUnauthorized", 401)
}

func (o *DeleteVariablesUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVariablesUsingDELETEForbidden creates a DeleteVariablesUsingDELETEForbidden with default headers values
func NewDeleteVariablesUsingDELETEForbidden() *DeleteVariablesUsingDELETEForbidden {
	return &DeleteVariablesUsingDELETEForbidden{}
}

/*
DeleteVariablesUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteVariablesUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete variables using d e l e t e forbidden response has a 2xx status code
func (o *DeleteVariablesUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete variables using d e l e t e forbidden response has a 3xx status code
func (o *DeleteVariablesUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete variables using d e l e t e forbidden response has a 4xx status code
func (o *DeleteVariablesUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete variables using d e l e t e forbidden response has a 5xx status code
func (o *DeleteVariablesUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete variables using d e l e t e forbidden response a status code equal to that given
func (o *DeleteVariablesUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete variables using d e l e t e forbidden response
func (o *DeleteVariablesUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteVariablesUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/designer/{stackName}/variables][%d] deleteVariablesUsingDELETEForbidden", 403)
}

func (o *DeleteVariablesUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/designer/{stackName}/variables][%d] deleteVariablesUsingDELETEForbidden", 403)
}

func (o *DeleteVariablesUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
