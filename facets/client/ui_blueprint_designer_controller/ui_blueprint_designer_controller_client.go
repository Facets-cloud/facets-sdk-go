// Code generated by go-swagger; DO NOT EDIT.

package ui_blueprint_designer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui blueprint designer controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui blueprint designer controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui blueprint designer controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui blueprint designer controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddVariablesUsingPOST(params *AddVariablesUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddVariablesUsingPOSTOK, *AddVariablesUsingPOSTCreated, error)

	ApplyTemplateUsingPOST(params *ApplyTemplateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplyTemplateUsingPOSTOK, *ApplyTemplateUsingPOSTCreated, error)

	BulkEditDisabledForResourcesUsingPUT(params *BulkEditDisabledForResourcesUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEditDisabledForResourcesUsingPUTOK, *BulkEditDisabledForResourcesUsingPUTCreated, error)

	BulkEditDisabledForResourcesUsingPUT1(params *BulkEditDisabledForResourcesUsingPUT1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEditDisabledForResourcesUsingPUT1OK, *BulkEditDisabledForResourcesUsingPUT1Created, error)

	CreateBranchUsingPOST(params *CreateBranchUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBranchUsingPOSTOK, *CreateBranchUsingPOSTCreated, error)

	CreateResourcesUsingPOST(params *CreateResourcesUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateResourcesUsingPOSTOK, *CreateResourcesUsingPOSTCreated, error)

	CreateResourcesUsingPOST1(params *CreateResourcesUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateResourcesUsingPOST1OK, *CreateResourcesUsingPOST1Created, error)

	DeleteResourcesUsingDELETE(params *DeleteResourcesUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteResourcesUsingDELETEOK, *DeleteResourcesUsingDELETENoContent, error)

	DeleteResourcesUsingDELETE1(params *DeleteResourcesUsingDELETE1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteResourcesUsingDELETE1OK, *DeleteResourcesUsingDELETE1NoContent, error)

	DeleteVariablesUsingDELETE(params *DeleteVariablesUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVariablesUsingDELETEOK, *DeleteVariablesUsingDELETENoContent, error)

	GetAddOnModulesUsingGET(params *GetAddOnModulesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAddOnModulesUsingGETOK, error)

	GetAutocompleteDataUsingGET(params *GetAutocompleteDataUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAutocompleteDataUsingGETOK, error)

	GetDesignerResourcesUsingGET(params *GetDesignerResourcesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDesignerResourcesUsingGETOK, error)

	GetModuleInputsUsingGET(params *GetModuleInputsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModuleInputsUsingGETOK, error)

	GetPullRequestsUsingGET(params *GetPullRequestsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPullRequestsUsingGETOK, error)

	GetPullRequestsUsingGET1(params *GetPullRequestsUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPullRequestsUsingGET1OK, error)

	GetSchemaMetadataUsingGET(params *GetSchemaMetadataUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSchemaMetadataUsingGETOK, error)

	GetWorkflowRunsUsingGET(params *GetWorkflowRunsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowRunsUsingGETOK, error)

	GetWorkflowRunsUsingGET1(params *GetWorkflowRunsUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowRunsUsingGET1OK, error)

	GetWorkflowsUsingGET(params *GetWorkflowsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowsUsingGETOK, error)

	GetWorkflowsUsingGET1(params *GetWorkflowsUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowsUsingGET1OK, error)

	ListBranchesUsingGET(params *ListBranchesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBranchesUsingGETOK, error)

	ListBranchesUsingGET1(params *ListBranchesUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBranchesUsingGET1OK, error)

	RenameResourceUsingPUT(params *RenameResourceUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenameResourceUsingPUTOK, *RenameResourceUsingPUTCreated, error)

	RenameResourceUsingPUT1(params *RenameResourceUsingPUT1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenameResourceUsingPUT1OK, *RenameResourceUsingPUT1Created, error)

	SyncSpecifiedBlueprintsWithTemplatesUsingPOST(params *SyncSpecifiedBlueprintsWithTemplatesUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncSpecifiedBlueprintsWithTemplatesUsingPOSTOK, *SyncSpecifiedBlueprintsWithTemplatesUsingPOSTCreated, error)

	UpdateResourcesUsingPUT(params *UpdateResourcesUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateResourcesUsingPUTOK, *UpdateResourcesUsingPUTCreated, error)

	UpdateResourcesUsingPUT1(params *UpdateResourcesUsingPUT1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateResourcesUsingPUT1OK, *UpdateResourcesUsingPUT1Created, error)

	UpdateVariablesUsingPUT(params *UpdateVariablesUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVariablesUsingPUTOK, *UpdateVariablesUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddVariablesUsingPOST adds variables
*/
func (a *Client) AddVariablesUsingPOST(params *AddVariablesUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddVariablesUsingPOSTOK, *AddVariablesUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVariablesUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addVariablesUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/variables",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddVariablesUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddVariablesUsingPOSTOK:
		return value, nil, nil
	case *AddVariablesUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_blueprint_designer_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ApplyTemplateUsingPOST applies template
*/
func (a *Client) ApplyTemplateUsingPOST(params *ApplyTemplateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplyTemplateUsingPOSTOK, *ApplyTemplateUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplyTemplateUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "applyTemplateUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/{templateName}/apply",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplyTemplateUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ApplyTemplateUsingPOSTOK:
		return value, nil, nil
	case *ApplyTemplateUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_blueprint_designer_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkEditDisabledForResourcesUsingPUT bulks edit disabled for resources
*/
func (a *Client) BulkEditDisabledForResourcesUsingPUT(params *BulkEditDisabledForResourcesUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEditDisabledForResourcesUsingPUTOK, *BulkEditDisabledForResourcesUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkEditDisabledForResourcesUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "bulkEditDisabledForResourcesUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/branch/{branch}/resource-enable-disable",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BulkEditDisabledForResourcesUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BulkEditDisabledForResourcesUsingPUTOK:
		return value, nil, nil
	case *BulkEditDisabledForResourcesUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_blueprint_designer_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkEditDisabledForResourcesUsingPUT1 bulks edit disabled for resources
*/
func (a *Client) BulkEditDisabledForResourcesUsingPUT1(params *BulkEditDisabledForResourcesUsingPUT1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEditDisabledForResourcesUsingPUT1OK, *BulkEditDisabledForResourcesUsingPUT1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkEditDisabledForResourcesUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "bulkEditDisabledForResourcesUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/resource-enable-disable",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BulkEditDisabledForResourcesUsingPUT1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BulkEditDisabledForResourcesUsingPUT1OK:
		return value, nil, nil
	case *BulkEditDisabledForResourcesUsingPUT1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_blueprint_designer_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBranchUsingPOST creates branch
*/
func (a *Client) CreateBranchUsingPOST(params *CreateBranchUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBranchUsingPOSTOK, *CreateBranchUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBranchUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBranchUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/{branch}/create-branch",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBranchUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateBranchUsingPOSTOK:
		return value, nil, nil
	case *CreateBranchUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_blueprint_designer_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateResourcesUsingPOST creates resources
*/
func (a *Client) CreateResourcesUsingPOST(params *CreateResourcesUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateResourcesUsingPOSTOK, *CreateResourcesUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResourcesUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createResourcesUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/branch/{branch}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResourcesUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateResourcesUsingPOSTOK:
		return value, nil, nil
	case *CreateResourcesUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_blueprint_designer_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateResourcesUsingPOST1 creates resources
*/
func (a *Client) CreateResourcesUsingPOST1(params *CreateResourcesUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateResourcesUsingPOST1OK, *CreateResourcesUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResourcesUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createResourcesUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/designer/{stackName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResourcesUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateResourcesUsingPOST1OK:
		return value, nil, nil
	case *CreateResourcesUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_blueprint_designer_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteResourcesUsingDELETE deletes resources
*/
func (a *Client) DeleteResourcesUsingDELETE(params *DeleteResourcesUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteResourcesUsingDELETEOK, *DeleteResourcesUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourcesUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteResourcesUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/branch/{branch}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteResourcesUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteResourcesUsingDELETEOK:
		return value, nil, nil
	case *DeleteResourcesUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_blueprint_designer_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteResourcesUsingDELETE1 deletes resources
*/
func (a *Client) DeleteResourcesUsingDELETE1(params *DeleteResourcesUsingDELETE1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteResourcesUsingDELETE1OK, *DeleteResourcesUsingDELETE1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourcesUsingDELETE1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteResourcesUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/designer/{stackName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteResourcesUsingDELETE1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteResourcesUsingDELETE1OK:
		return value, nil, nil
	case *DeleteResourcesUsingDELETE1NoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_blueprint_designer_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteVariablesUsingDELETE deletes variables
*/
func (a *Client) DeleteVariablesUsingDELETE(params *DeleteVariablesUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVariablesUsingDELETEOK, *DeleteVariablesUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVariablesUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVariablesUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/variables",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVariablesUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteVariablesUsingDELETEOK:
		return value, nil, nil
	case *DeleteVariablesUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_blueprint_designer_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAddOnModulesUsingGET gets add ons for this resource
*/
func (a *Client) GetAddOnModulesUsingGET(params *GetAddOnModulesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAddOnModulesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAddOnModulesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAddOnModulesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/add-ons",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAddOnModulesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAddOnModulesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAddOnModulesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAutocompleteDataUsingGET gets autocomplete data
*/
func (a *Client) GetAutocompleteDataUsingGET(params *GetAutocompleteDataUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAutocompleteDataUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAutocompleteDataUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAutocompleteDataUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/ref-autocomplete-data",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAutocompleteDataUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAutocompleteDataUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAutocompleteDataUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDesignerResourcesUsingGET gets designer resources
*/
func (a *Client) GetDesignerResourcesUsingGET(params *GetDesignerResourcesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDesignerResourcesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDesignerResourcesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDesignerResourcesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/{branchName}/files",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDesignerResourcesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDesignerResourcesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDesignerResourcesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetModuleInputsUsingGET gets module inputs
*/
func (a *Client) GetModuleInputsUsingGET(params *GetModuleInputsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModuleInputsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModuleInputsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModuleInputsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/intent/{intent}/flavor/{flavor}/input",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetModuleInputsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetModuleInputsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getModuleInputsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPullRequestsUsingGET gets pull requests
*/
func (a *Client) GetPullRequestsUsingGET(params *GetPullRequestsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPullRequestsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPullRequestsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPullRequestsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/pulls",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPullRequestsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPullRequestsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPullRequestsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPullRequestsUsingGET1 gets pull requests
*/
func (a *Client) GetPullRequestsUsingGET1(params *GetPullRequestsUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPullRequestsUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPullRequestsUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPullRequestsUsingGET_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/pulls",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPullRequestsUsingGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPullRequestsUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPullRequestsUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSchemaMetadataUsingGET gets schema metadata
*/
func (a *Client) GetSchemaMetadataUsingGET(params *GetSchemaMetadataUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSchemaMetadataUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchemaMetadataUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSchemaMetadataUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/facets-components",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSchemaMetadataUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSchemaMetadataUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSchemaMetadataUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflowRunsUsingGET gets workflow runs
*/
func (a *Client) GetWorkflowRunsUsingGET(params *GetWorkflowRunsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowRunsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowRunsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowRunsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflow-runs",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowRunsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowRunsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowRunsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflowRunsUsingGET1 gets workflow runs
*/
func (a *Client) GetWorkflowRunsUsingGET1(params *GetWorkflowRunsUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowRunsUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowRunsUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowRunsUsingGET_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/workflow-runs",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowRunsUsingGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowRunsUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowRunsUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflowsUsingGET gets workflows
*/
func (a *Client) GetWorkflowsUsingGET(params *GetWorkflowsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflows",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflowsUsingGET1 gets workflows
*/
func (a *Client) GetWorkflowsUsingGET1(params *GetWorkflowsUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowsUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowsUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowsUsingGET_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/workflows",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowsUsingGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowsUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowsUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBranchesUsingGET lists branches
*/
func (a *Client) ListBranchesUsingGET(params *ListBranchesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBranchesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBranchesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listBranchesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/branch-list",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBranchesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBranchesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listBranchesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBranchesUsingGET1 lists branches
*/
func (a *Client) ListBranchesUsingGET1(params *ListBranchesUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBranchesUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBranchesUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "listBranchesUsingGET_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/branch-list",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBranchesUsingGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBranchesUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listBranchesUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RenameResourceUsingPUT renames resource
*/
func (a *Client) RenameResourceUsingPUT(params *RenameResourceUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenameResourceUsingPUTOK, *RenameResourceUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenameResourceUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "renameResourceUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/branch/{branch}/rename",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RenameResourceUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RenameResourceUsingPUTOK:
		return value, nil, nil
	case *RenameResourceUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_blueprint_designer_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RenameResourceUsingPUT1 renames resource
*/
func (a *Client) RenameResourceUsingPUT1(params *RenameResourceUsingPUT1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenameResourceUsingPUT1OK, *RenameResourceUsingPUT1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenameResourceUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "renameResourceUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/rename",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RenameResourceUsingPUT1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RenameResourceUsingPUT1OK:
		return value, nil, nil
	case *RenameResourceUsingPUT1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_blueprint_designer_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SyncSpecifiedBlueprintsWithTemplatesUsingPOST syncs specified blueprints with templates
*/
func (a *Client) SyncSpecifiedBlueprintsWithTemplatesUsingPOST(params *SyncSpecifiedBlueprintsWithTemplatesUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncSpecifiedBlueprintsWithTemplatesUsingPOSTOK, *SyncSpecifiedBlueprintsWithTemplatesUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncSpecifiedBlueprintsWithTemplatesUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncSpecifiedBlueprintsWithTemplatesUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/designer/{templateName}/sync",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncSpecifiedBlueprintsWithTemplatesUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SyncSpecifiedBlueprintsWithTemplatesUsingPOSTOK:
		return value, nil, nil
	case *SyncSpecifiedBlueprintsWithTemplatesUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_blueprint_designer_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateResourcesUsingPUT updates resources
*/
func (a *Client) UpdateResourcesUsingPUT(params *UpdateResourcesUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateResourcesUsingPUTOK, *UpdateResourcesUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateResourcesUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateResourcesUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/branch/{branch}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateResourcesUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateResourcesUsingPUTOK:
		return value, nil, nil
	case *UpdateResourcesUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_blueprint_designer_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateResourcesUsingPUT1 updates resources
*/
func (a *Client) UpdateResourcesUsingPUT1(params *UpdateResourcesUsingPUT1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateResourcesUsingPUT1OK, *UpdateResourcesUsingPUT1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateResourcesUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateResourcesUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/designer/{stackName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateResourcesUsingPUT1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateResourcesUsingPUT1OK:
		return value, nil, nil
	case *UpdateResourcesUsingPUT1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_blueprint_designer_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVariablesUsingPUT updates variables
*/
func (a *Client) UpdateVariablesUsingPUT(params *UpdateVariablesUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVariablesUsingPUTOK, *UpdateVariablesUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVariablesUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVariablesUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/variables",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVariablesUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateVariablesUsingPUTOK:
		return value, nil, nil
	case *UpdateVariablesUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_blueprint_designer_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
