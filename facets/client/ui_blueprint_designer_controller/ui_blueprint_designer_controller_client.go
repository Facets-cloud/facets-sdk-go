// Code generated by go-swagger; DO NOT EDIT.

package ui_blueprint_designer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui blueprint designer controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui blueprint designer controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui blueprint designer controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui blueprint designer controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddVariables(params *AddVariablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddVariablesOK, error)

	ApplyTemplate(params *ApplyTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplyTemplateOK, error)

	BulkEditDisabledForResources(params *BulkEditDisabledForResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEditDisabledForResourcesOK, error)

	BulkEditDisabledForResources1(params *BulkEditDisabledForResources1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEditDisabledForResources1OK, error)

	CreateBranch(params *CreateBranchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBranchOK, error)

	CreateResources(params *CreateResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateResourcesOK, error)

	DeleteResources(params *DeleteResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteResourcesOK, error)

	DeleteVariables(params *DeleteVariablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVariablesOK, error)

	GetAddOnModules(params *GetAddOnModulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAddOnModulesOK, error)

	GetAutocompleteData(params *GetAutocompleteDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAutocompleteDataOK, error)

	GetAutocompleteDataV2(params *GetAutocompleteDataV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAutocompleteDataV2OK, error)

	GetDesignerResources(params *GetDesignerResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDesignerResourcesOK, error)

	GetModuleInputs(params *GetModuleInputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModuleInputsOK, error)

	GetPullRequests(params *GetPullRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPullRequestsOK, error)

	GetPullRequests1(params *GetPullRequests1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPullRequests1OK, error)

	GetSchemaMetadata(params *GetSchemaMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSchemaMetadataOK, error)

	GetWorkflowRuns(params *GetWorkflowRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowRunsOK, error)

	GetWorkflowRuns1(params *GetWorkflowRuns1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowRuns1OK, error)

	GetWorkflows(params *GetWorkflowsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowsOK, error)

	GetWorkflows1(params *GetWorkflows1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflows1OK, error)

	ListBranches(params *ListBranchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBranchesOK, error)

	ListBranches1(params *ListBranches1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBranches1OK, error)

	ListProvidersExposedByModule(params *ListProvidersExposedByModuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProvidersExposedByModuleOK, error)

	RenameResource(params *RenameResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenameResourceOK, error)

	SyncSpecifiedBlueprintsWithTemplates(params *SyncSpecifiedBlueprintsWithTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncSpecifiedBlueprintsWithTemplatesOK, error)

	UpdateResources(params *UpdateResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateResourcesOK, error)

	UpdateVariables(params *UpdateVariablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVariablesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddVariables add variables API
*/
func (a *Client) AddVariables(params *AddVariablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVariablesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addVariables",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddVariablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ApplyTemplate apply template API
*/
func (a *Client) ApplyTemplate(params *ApplyTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplyTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplyTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "applyTemplate",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/{templateName}/apply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplyTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplyTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for applyTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkEditDisabledForResources bulk edit disabled for resources API
*/
func (a *Client) BulkEditDisabledForResources(params *BulkEditDisabledForResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEditDisabledForResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkEditDisabledForResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "bulkEditDisabledForResources",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/resource-enable-disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BulkEditDisabledForResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkEditDisabledForResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bulkEditDisabledForResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkEditDisabledForResources1 bulk edit disabled for resources 1 API
*/
func (a *Client) BulkEditDisabledForResources1(params *BulkEditDisabledForResources1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEditDisabledForResources1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkEditDisabledForResources1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "bulkEditDisabledForResources_1",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/branch/{branch}/resource-enable-disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BulkEditDisabledForResources1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkEditDisabledForResources1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bulkEditDisabledForResources_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBranch create branch API
*/
func (a *Client) CreateBranch(params *CreateBranchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBranchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBranchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBranch",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/{branch}/create-branch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBranchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBranchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBranch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateResources create resources API
*/
func (a *Client) CreateResources(params *CreateResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createResources",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/branch/{branch}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteResources delete resources API
*/
func (a *Client) DeleteResources(params *DeleteResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteResources",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/branch/{branch}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteVariables delete variables API
*/
func (a *Client) DeleteVariables(params *DeleteVariablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVariablesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVariables",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVariablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAddOnModules gets add ons for this resource
*/
func (a *Client) GetAddOnModules(params *GetAddOnModulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAddOnModulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAddOnModulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAddOnModules",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/add-ons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAddOnModulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAddOnModulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAddOnModules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAutocompleteData get autocomplete data API
*/
func (a *Client) GetAutocompleteData(params *GetAutocompleteDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAutocompleteDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAutocompleteDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAutocompleteData",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/ref-autocomplete-data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAutocompleteDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAutocompleteDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAutocompleteData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAutocompleteDataV2 gets autocomplete data with module specific output trees

Returns module-specific output trees for each resource with automatic fallback to intent-level outputs
*/
func (a *Client) GetAutocompleteDataV2(params *GetAutocompleteDataV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAutocompleteDataV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAutocompleteDataV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAutocompleteDataV2",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/ref-autocomplete-data-v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAutocompleteDataV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAutocompleteDataV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAutocompleteDataV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDesignerResources get designer resources API
*/
func (a *Client) GetDesignerResources(params *GetDesignerResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDesignerResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDesignerResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDesignerResources",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/{branchName}/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDesignerResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDesignerResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDesignerResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetModuleInputs get module inputs API
*/
func (a *Client) GetModuleInputs(params *GetModuleInputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModuleInputsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModuleInputsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModuleInputs",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/intent/{intent}/flavor/{flavor}/input",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetModuleInputsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetModuleInputsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getModuleInputs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPullRequests get pull requests API
*/
func (a *Client) GetPullRequests(params *GetPullRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPullRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPullRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPullRequests",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/pulls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPullRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPullRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPullRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPullRequests1 get pull requests 1 API
*/
func (a *Client) GetPullRequests1(params *GetPullRequests1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPullRequests1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPullRequests1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPullRequests_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/pulls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPullRequests1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPullRequests1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPullRequests_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSchemaMetadata get schema metadata API
*/
func (a *Client) GetSchemaMetadata(params *GetSchemaMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSchemaMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchemaMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSchemaMetadata",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/facets-components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSchemaMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSchemaMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSchemaMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflowRuns get workflow runs API
*/
func (a *Client) GetWorkflowRuns(params *GetWorkflowRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowRunsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowRuns",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/workflow-runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowRunsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowRuns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflowRuns1 get workflow runs 1 API
*/
func (a *Client) GetWorkflowRuns1(params *GetWorkflowRuns1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowRuns1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowRuns1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowRuns_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflow-runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowRuns1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowRuns1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowRuns_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflows get workflows API
*/
func (a *Client) GetWorkflows(params *GetWorkflowsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflows",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflows1 get workflows 1 API
*/
func (a *Client) GetWorkflows1(params *GetWorkflows1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflows1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflows1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflows_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflows1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflows1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflows_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBranches list branches API
*/
func (a *Client) ListBranches(params *ListBranchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBranchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBranchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listBranches",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/branch-list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBranchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBranchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listBranches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBranches1 list branches 1 API
*/
func (a *Client) ListBranches1(params *ListBranches1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBranches1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBranches1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "listBranches_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/branch-list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBranches1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBranches1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listBranches_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListProvidersExposedByModule list providers exposed by module API
*/
func (a *Client) ListProvidersExposedByModule(params *ListProvidersExposedByModuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProvidersExposedByModuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProvidersExposedByModuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProvidersExposedByModule",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/intent/{intent}/flavor/{flavor}/output-providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListProvidersExposedByModuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProvidersExposedByModuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listProvidersExposedByModule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RenameResource rename resource API
*/
func (a *Client) RenameResource(params *RenameResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenameResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenameResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "renameResource",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/branch/{branch}/rename",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RenameResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RenameResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for renameResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SyncSpecifiedBlueprintsWithTemplates sync specified blueprints with templates API
*/
func (a *Client) SyncSpecifiedBlueprintsWithTemplates(params *SyncSpecifiedBlueprintsWithTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncSpecifiedBlueprintsWithTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncSpecifiedBlueprintsWithTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncSpecifiedBlueprintsWithTemplates",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/designer/{templateName}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncSpecifiedBlueprintsWithTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncSpecifiedBlueprintsWithTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for syncSpecifiedBlueprintsWithTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateResources update resources API
*/
func (a *Client) UpdateResources(params *UpdateResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateResources",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/branch/{branch}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVariables update variables API
*/
func (a *Client) UpdateVariables(params *UpdateVariablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVariablesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVariables",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/designer/{stackName}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVariablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
