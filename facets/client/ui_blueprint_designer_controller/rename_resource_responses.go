// Code generated by go-swagger; DO NOT EDIT.

package ui_blueprint_designer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RenameResourceReader is a Reader for the RenameResource structure.
type RenameResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RenameResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRenameResourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRenameResourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRenameResourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRenameResourceMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRenameResourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename] renameResource", response, response.Code())
	}
}

// NewRenameResourceOK creates a RenameResourceOK with default headers values
func NewRenameResourceOK() *RenameResourceOK {
	return &RenameResourceOK{}
}

/*
RenameResourceOK describes a response with status code 200, with default header values.

OK
*/
type RenameResourceOK struct {
}

// IsSuccess returns true when this rename resource o k response has a 2xx status code
func (o *RenameResourceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rename resource o k response has a 3xx status code
func (o *RenameResourceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rename resource o k response has a 4xx status code
func (o *RenameResourceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this rename resource o k response has a 5xx status code
func (o *RenameResourceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this rename resource o k response a status code equal to that given
func (o *RenameResourceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the rename resource o k response
func (o *RenameResourceOK) Code() int {
	return 200
}

func (o *RenameResourceOK) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceOK", 200)
}

func (o *RenameResourceOK) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceOK", 200)
}

func (o *RenameResourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRenameResourceBadRequest creates a RenameResourceBadRequest with default headers values
func NewRenameResourceBadRequest() *RenameResourceBadRequest {
	return &RenameResourceBadRequest{}
}

/*
RenameResourceBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RenameResourceBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this rename resource bad request response has a 2xx status code
func (o *RenameResourceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rename resource bad request response has a 3xx status code
func (o *RenameResourceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rename resource bad request response has a 4xx status code
func (o *RenameResourceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this rename resource bad request response has a 5xx status code
func (o *RenameResourceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this rename resource bad request response a status code equal to that given
func (o *RenameResourceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the rename resource bad request response
func (o *RenameResourceBadRequest) Code() int {
	return 400
}

func (o *RenameResourceBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceBadRequest %s", 400, payload)
}

func (o *RenameResourceBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceBadRequest %s", 400, payload)
}

func (o *RenameResourceBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RenameResourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenameResourceNotFound creates a RenameResourceNotFound with default headers values
func NewRenameResourceNotFound() *RenameResourceNotFound {
	return &RenameResourceNotFound{}
}

/*
RenameResourceNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RenameResourceNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this rename resource not found response has a 2xx status code
func (o *RenameResourceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rename resource not found response has a 3xx status code
func (o *RenameResourceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rename resource not found response has a 4xx status code
func (o *RenameResourceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this rename resource not found response has a 5xx status code
func (o *RenameResourceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this rename resource not found response a status code equal to that given
func (o *RenameResourceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the rename resource not found response
func (o *RenameResourceNotFound) Code() int {
	return 404
}

func (o *RenameResourceNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceNotFound %s", 404, payload)
}

func (o *RenameResourceNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceNotFound %s", 404, payload)
}

func (o *RenameResourceNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RenameResourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenameResourceMethodNotAllowed creates a RenameResourceMethodNotAllowed with default headers values
func NewRenameResourceMethodNotAllowed() *RenameResourceMethodNotAllowed {
	return &RenameResourceMethodNotAllowed{}
}

/*
RenameResourceMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RenameResourceMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this rename resource method not allowed response has a 2xx status code
func (o *RenameResourceMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rename resource method not allowed response has a 3xx status code
func (o *RenameResourceMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rename resource method not allowed response has a 4xx status code
func (o *RenameResourceMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this rename resource method not allowed response has a 5xx status code
func (o *RenameResourceMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this rename resource method not allowed response a status code equal to that given
func (o *RenameResourceMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the rename resource method not allowed response
func (o *RenameResourceMethodNotAllowed) Code() int {
	return 405
}

func (o *RenameResourceMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceMethodNotAllowed %s", 405, payload)
}

func (o *RenameResourceMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceMethodNotAllowed %s", 405, payload)
}

func (o *RenameResourceMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RenameResourceMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenameResourceInternalServerError creates a RenameResourceInternalServerError with default headers values
func NewRenameResourceInternalServerError() *RenameResourceInternalServerError {
	return &RenameResourceInternalServerError{}
}

/*
RenameResourceInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RenameResourceInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this rename resource internal server error response has a 2xx status code
func (o *RenameResourceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rename resource internal server error response has a 3xx status code
func (o *RenameResourceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rename resource internal server error response has a 4xx status code
func (o *RenameResourceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this rename resource internal server error response has a 5xx status code
func (o *RenameResourceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this rename resource internal server error response a status code equal to that given
func (o *RenameResourceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the rename resource internal server error response
func (o *RenameResourceInternalServerError) Code() int {
	return 500
}

func (o *RenameResourceInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceInternalServerError %s", 500, payload)
}

func (o *RenameResourceInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/designer/{stackName}/branch/{branch}/rename][%d] renameResourceInternalServerError %s", 500, payload)
}

func (o *RenameResourceInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RenameResourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
