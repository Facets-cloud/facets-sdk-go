// Code generated by go-swagger; DO NOT EDIT.

package ui_one_time_webhook_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// PollWebhookUsingGETReader is a Reader for the PollWebhookUsingGET structure.
type PollWebhookUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PollWebhookUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPollWebhookUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPollWebhookUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPollWebhookUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPollWebhookUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}] pollWebhookUsingGET", response, response.Code())
	}
}

// NewPollWebhookUsingGETOK creates a PollWebhookUsingGETOK with default headers values
func NewPollWebhookUsingGETOK() *PollWebhookUsingGETOK {
	return &PollWebhookUsingGETOK{}
}

/*
PollWebhookUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type PollWebhookUsingGETOK struct {
	Payload *models.OneTimeWebhook
}

// IsSuccess returns true when this poll webhook using g e t o k response has a 2xx status code
func (o *PollWebhookUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this poll webhook using g e t o k response has a 3xx status code
func (o *PollWebhookUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this poll webhook using g e t o k response has a 4xx status code
func (o *PollWebhookUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this poll webhook using g e t o k response has a 5xx status code
func (o *PollWebhookUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this poll webhook using g e t o k response a status code equal to that given
func (o *PollWebhookUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the poll webhook using g e t o k response
func (o *PollWebhookUsingGETOK) Code() int {
	return 200
}

func (o *PollWebhookUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookUsingGETOK %s", 200, payload)
}

func (o *PollWebhookUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookUsingGETOK %s", 200, payload)
}

func (o *PollWebhookUsingGETOK) GetPayload() *models.OneTimeWebhook {
	return o.Payload
}

func (o *PollWebhookUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OneTimeWebhook)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPollWebhookUsingGETUnauthorized creates a PollWebhookUsingGETUnauthorized with default headers values
func NewPollWebhookUsingGETUnauthorized() *PollWebhookUsingGETUnauthorized {
	return &PollWebhookUsingGETUnauthorized{}
}

/*
PollWebhookUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PollWebhookUsingGETUnauthorized struct {
}

// IsSuccess returns true when this poll webhook using g e t unauthorized response has a 2xx status code
func (o *PollWebhookUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this poll webhook using g e t unauthorized response has a 3xx status code
func (o *PollWebhookUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this poll webhook using g e t unauthorized response has a 4xx status code
func (o *PollWebhookUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this poll webhook using g e t unauthorized response has a 5xx status code
func (o *PollWebhookUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this poll webhook using g e t unauthorized response a status code equal to that given
func (o *PollWebhookUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the poll webhook using g e t unauthorized response
func (o *PollWebhookUsingGETUnauthorized) Code() int {
	return 401
}

func (o *PollWebhookUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookUsingGETUnauthorized", 401)
}

func (o *PollWebhookUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookUsingGETUnauthorized", 401)
}

func (o *PollWebhookUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPollWebhookUsingGETForbidden creates a PollWebhookUsingGETForbidden with default headers values
func NewPollWebhookUsingGETForbidden() *PollWebhookUsingGETForbidden {
	return &PollWebhookUsingGETForbidden{}
}

/*
PollWebhookUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PollWebhookUsingGETForbidden struct {
}

// IsSuccess returns true when this poll webhook using g e t forbidden response has a 2xx status code
func (o *PollWebhookUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this poll webhook using g e t forbidden response has a 3xx status code
func (o *PollWebhookUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this poll webhook using g e t forbidden response has a 4xx status code
func (o *PollWebhookUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this poll webhook using g e t forbidden response has a 5xx status code
func (o *PollWebhookUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this poll webhook using g e t forbidden response a status code equal to that given
func (o *PollWebhookUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the poll webhook using g e t forbidden response
func (o *PollWebhookUsingGETForbidden) Code() int {
	return 403
}

func (o *PollWebhookUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookUsingGETForbidden", 403)
}

func (o *PollWebhookUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookUsingGETForbidden", 403)
}

func (o *PollWebhookUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPollWebhookUsingGETNotFound creates a PollWebhookUsingGETNotFound with default headers values
func NewPollWebhookUsingGETNotFound() *PollWebhookUsingGETNotFound {
	return &PollWebhookUsingGETNotFound{}
}

/*
PollWebhookUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PollWebhookUsingGETNotFound struct {
}

// IsSuccess returns true when this poll webhook using g e t not found response has a 2xx status code
func (o *PollWebhookUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this poll webhook using g e t not found response has a 3xx status code
func (o *PollWebhookUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this poll webhook using g e t not found response has a 4xx status code
func (o *PollWebhookUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this poll webhook using g e t not found response has a 5xx status code
func (o *PollWebhookUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this poll webhook using g e t not found response a status code equal to that given
func (o *PollWebhookUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the poll webhook using g e t not found response
func (o *PollWebhookUsingGETNotFound) Code() int {
	return 404
}

func (o *PollWebhookUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookUsingGETNotFound", 404)
}

func (o *PollWebhookUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookUsingGETNotFound", 404)
}

func (o *PollWebhookUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
