// Code generated by go-swagger; DO NOT EDIT.

package ui_one_time_webhook_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// PollWebhookReader is a Reader for the PollWebhook structure.
type PollWebhookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PollWebhookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPollWebhookOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPollWebhookBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPollWebhookNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewPollWebhookMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPollWebhookInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}] pollWebhook", response, response.Code())
	}
}

// NewPollWebhookOK creates a PollWebhookOK with default headers values
func NewPollWebhookOK() *PollWebhookOK {
	return &PollWebhookOK{}
}

/*
PollWebhookOK describes a response with status code 200, with default header values.

OK
*/
type PollWebhookOK struct {
	Payload *models.OneTimeWebhook
}

// IsSuccess returns true when this poll webhook o k response has a 2xx status code
func (o *PollWebhookOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this poll webhook o k response has a 3xx status code
func (o *PollWebhookOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this poll webhook o k response has a 4xx status code
func (o *PollWebhookOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this poll webhook o k response has a 5xx status code
func (o *PollWebhookOK) IsServerError() bool {
	return false
}

// IsCode returns true when this poll webhook o k response a status code equal to that given
func (o *PollWebhookOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the poll webhook o k response
func (o *PollWebhookOK) Code() int {
	return 200
}

func (o *PollWebhookOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookOK %s", 200, payload)
}

func (o *PollWebhookOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookOK %s", 200, payload)
}

func (o *PollWebhookOK) GetPayload() *models.OneTimeWebhook {
	return o.Payload
}

func (o *PollWebhookOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OneTimeWebhook)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPollWebhookBadRequest creates a PollWebhookBadRequest with default headers values
func NewPollWebhookBadRequest() *PollWebhookBadRequest {
	return &PollWebhookBadRequest{}
}

/*
PollWebhookBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PollWebhookBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this poll webhook bad request response has a 2xx status code
func (o *PollWebhookBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this poll webhook bad request response has a 3xx status code
func (o *PollWebhookBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this poll webhook bad request response has a 4xx status code
func (o *PollWebhookBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this poll webhook bad request response has a 5xx status code
func (o *PollWebhookBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this poll webhook bad request response a status code equal to that given
func (o *PollWebhookBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the poll webhook bad request response
func (o *PollWebhookBadRequest) Code() int {
	return 400
}

func (o *PollWebhookBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookBadRequest %s", 400, payload)
}

func (o *PollWebhookBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookBadRequest %s", 400, payload)
}

func (o *PollWebhookBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *PollWebhookBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPollWebhookNotFound creates a PollWebhookNotFound with default headers values
func NewPollWebhookNotFound() *PollWebhookNotFound {
	return &PollWebhookNotFound{}
}

/*
PollWebhookNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PollWebhookNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this poll webhook not found response has a 2xx status code
func (o *PollWebhookNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this poll webhook not found response has a 3xx status code
func (o *PollWebhookNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this poll webhook not found response has a 4xx status code
func (o *PollWebhookNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this poll webhook not found response has a 5xx status code
func (o *PollWebhookNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this poll webhook not found response a status code equal to that given
func (o *PollWebhookNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the poll webhook not found response
func (o *PollWebhookNotFound) Code() int {
	return 404
}

func (o *PollWebhookNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookNotFound %s", 404, payload)
}

func (o *PollWebhookNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookNotFound %s", 404, payload)
}

func (o *PollWebhookNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *PollWebhookNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPollWebhookMethodNotAllowed creates a PollWebhookMethodNotAllowed with default headers values
func NewPollWebhookMethodNotAllowed() *PollWebhookMethodNotAllowed {
	return &PollWebhookMethodNotAllowed{}
}

/*
PollWebhookMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type PollWebhookMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this poll webhook method not allowed response has a 2xx status code
func (o *PollWebhookMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this poll webhook method not allowed response has a 3xx status code
func (o *PollWebhookMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this poll webhook method not allowed response has a 4xx status code
func (o *PollWebhookMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this poll webhook method not allowed response has a 5xx status code
func (o *PollWebhookMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this poll webhook method not allowed response a status code equal to that given
func (o *PollWebhookMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the poll webhook method not allowed response
func (o *PollWebhookMethodNotAllowed) Code() int {
	return 405
}

func (o *PollWebhookMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookMethodNotAllowed %s", 405, payload)
}

func (o *PollWebhookMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookMethodNotAllowed %s", 405, payload)
}

func (o *PollWebhookMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *PollWebhookMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPollWebhookInternalServerError creates a PollWebhookInternalServerError with default headers values
func NewPollWebhookInternalServerError() *PollWebhookInternalServerError {
	return &PollWebhookInternalServerError{}
}

/*
PollWebhookInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PollWebhookInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this poll webhook internal server error response has a 2xx status code
func (o *PollWebhookInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this poll webhook internal server error response has a 3xx status code
func (o *PollWebhookInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this poll webhook internal server error response has a 4xx status code
func (o *PollWebhookInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this poll webhook internal server error response has a 5xx status code
func (o *PollWebhookInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this poll webhook internal server error response a status code equal to that given
func (o *PollWebhookInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the poll webhook internal server error response
func (o *PollWebhookInternalServerError) Code() int {
	return 500
}

func (o *PollWebhookInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookInternalServerError %s", 500, payload)
}

func (o *PollWebhookInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/onetime-webhook/poll/{webhookId}][%d] pollWebhookInternalServerError %s", 500, payload)
}

func (o *PollWebhookInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *PollWebhookInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
