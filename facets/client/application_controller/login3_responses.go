// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// Login3Reader is a Reader for the Login3 structure.
type Login3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *Login3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLogin3OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLogin3BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLogin3NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewLogin3MethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLogin3InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/login] login_3", response, response.Code())
	}
}

// NewLogin3OK creates a Login3OK with default headers values
func NewLogin3OK() *Login3OK {
	return &Login3OK{}
}

/*
Login3OK describes a response with status code 200, with default header values.

OK
*/
type Login3OK struct {
	Payload string
}

// IsSuccess returns true when this login3 o k response has a 2xx status code
func (o *Login3OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login3 o k response has a 3xx status code
func (o *Login3OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login3 o k response has a 4xx status code
func (o *Login3OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this login3 o k response has a 5xx status code
func (o *Login3OK) IsServerError() bool {
	return false
}

// IsCode returns true when this login3 o k response a status code equal to that given
func (o *Login3OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the login3 o k response
func (o *Login3OK) Code() int {
	return 200
}

func (o *Login3OK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/login][%d] login3OK %s", 200, payload)
}

func (o *Login3OK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/login][%d] login3OK %s", 200, payload)
}

func (o *Login3OK) GetPayload() string {
	return o.Payload
}

func (o *Login3OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogin3BadRequest creates a Login3BadRequest with default headers values
func NewLogin3BadRequest() *Login3BadRequest {
	return &Login3BadRequest{}
}

/*
Login3BadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type Login3BadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this login3 bad request response has a 2xx status code
func (o *Login3BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login3 bad request response has a 3xx status code
func (o *Login3BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login3 bad request response has a 4xx status code
func (o *Login3BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this login3 bad request response has a 5xx status code
func (o *Login3BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this login3 bad request response a status code equal to that given
func (o *Login3BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the login3 bad request response
func (o *Login3BadRequest) Code() int {
	return 400
}

func (o *Login3BadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/login][%d] login3BadRequest %s", 400, payload)
}

func (o *Login3BadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/login][%d] login3BadRequest %s", 400, payload)
}

func (o *Login3BadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *Login3BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogin3NotFound creates a Login3NotFound with default headers values
func NewLogin3NotFound() *Login3NotFound {
	return &Login3NotFound{}
}

/*
Login3NotFound describes a response with status code 404, with default header values.

Not Found
*/
type Login3NotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this login3 not found response has a 2xx status code
func (o *Login3NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login3 not found response has a 3xx status code
func (o *Login3NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login3 not found response has a 4xx status code
func (o *Login3NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this login3 not found response has a 5xx status code
func (o *Login3NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this login3 not found response a status code equal to that given
func (o *Login3NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the login3 not found response
func (o *Login3NotFound) Code() int {
	return 404
}

func (o *Login3NotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/login][%d] login3NotFound %s", 404, payload)
}

func (o *Login3NotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/login][%d] login3NotFound %s", 404, payload)
}

func (o *Login3NotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *Login3NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogin3MethodNotAllowed creates a Login3MethodNotAllowed with default headers values
func NewLogin3MethodNotAllowed() *Login3MethodNotAllowed {
	return &Login3MethodNotAllowed{}
}

/*
Login3MethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type Login3MethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this login3 method not allowed response has a 2xx status code
func (o *Login3MethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login3 method not allowed response has a 3xx status code
func (o *Login3MethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login3 method not allowed response has a 4xx status code
func (o *Login3MethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this login3 method not allowed response has a 5xx status code
func (o *Login3MethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this login3 method not allowed response a status code equal to that given
func (o *Login3MethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the login3 method not allowed response
func (o *Login3MethodNotAllowed) Code() int {
	return 405
}

func (o *Login3MethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/login][%d] login3MethodNotAllowed %s", 405, payload)
}

func (o *Login3MethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/login][%d] login3MethodNotAllowed %s", 405, payload)
}

func (o *Login3MethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *Login3MethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogin3InternalServerError creates a Login3InternalServerError with default headers values
func NewLogin3InternalServerError() *Login3InternalServerError {
	return &Login3InternalServerError{}
}

/*
Login3InternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type Login3InternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this login3 internal server error response has a 2xx status code
func (o *Login3InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login3 internal server error response has a 3xx status code
func (o *Login3InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login3 internal server error response has a 4xx status code
func (o *Login3InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this login3 internal server error response has a 5xx status code
func (o *Login3InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this login3 internal server error response a status code equal to that given
func (o *Login3InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the login3 internal server error response
func (o *Login3InternalServerError) Code() int {
	return 500
}

func (o *Login3InternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/login][%d] login3InternalServerError %s", 500, payload)
}

func (o *Login3InternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/login][%d] login3InternalServerError %s", 500, payload)
}

func (o *Login3InternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *Login3InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
