// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateUserCCReader is a Reader for the CreateUserCC structure.
type CreateUserCCReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateUserCCReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateUserCCOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateUserCCBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateUserCCNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreateUserCCMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateUserCCInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/cc-users] createUserCC", response, response.Code())
	}
}

// NewCreateUserCCOK creates a CreateUserCCOK with default headers values
func NewCreateUserCCOK() *CreateUserCCOK {
	return &CreateUserCCOK{}
}

/*
CreateUserCCOK describes a response with status code 200, with default header values.

OK
*/
type CreateUserCCOK struct {
	Payload *models.User
}

// IsSuccess returns true when this create user c c o k response has a 2xx status code
func (o *CreateUserCCOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create user c c o k response has a 3xx status code
func (o *CreateUserCCOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create user c c o k response has a 4xx status code
func (o *CreateUserCCOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create user c c o k response has a 5xx status code
func (o *CreateUserCCOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create user c c o k response a status code equal to that given
func (o *CreateUserCCOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create user c c o k response
func (o *CreateUserCCOK) Code() int {
	return 200
}

func (o *CreateUserCCOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/cc-users][%d] createUserCCOK %s", 200, payload)
}

func (o *CreateUserCCOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/cc-users][%d] createUserCCOK %s", 200, payload)
}

func (o *CreateUserCCOK) GetPayload() *models.User {
	return o.Payload
}

func (o *CreateUserCCOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserCCBadRequest creates a CreateUserCCBadRequest with default headers values
func NewCreateUserCCBadRequest() *CreateUserCCBadRequest {
	return &CreateUserCCBadRequest{}
}

/*
CreateUserCCBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateUserCCBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create user c c bad request response has a 2xx status code
func (o *CreateUserCCBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create user c c bad request response has a 3xx status code
func (o *CreateUserCCBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create user c c bad request response has a 4xx status code
func (o *CreateUserCCBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create user c c bad request response has a 5xx status code
func (o *CreateUserCCBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create user c c bad request response a status code equal to that given
func (o *CreateUserCCBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create user c c bad request response
func (o *CreateUserCCBadRequest) Code() int {
	return 400
}

func (o *CreateUserCCBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/cc-users][%d] createUserCCBadRequest %s", 400, payload)
}

func (o *CreateUserCCBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/cc-users][%d] createUserCCBadRequest %s", 400, payload)
}

func (o *CreateUserCCBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateUserCCBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserCCNotFound creates a CreateUserCCNotFound with default headers values
func NewCreateUserCCNotFound() *CreateUserCCNotFound {
	return &CreateUserCCNotFound{}
}

/*
CreateUserCCNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateUserCCNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create user c c not found response has a 2xx status code
func (o *CreateUserCCNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create user c c not found response has a 3xx status code
func (o *CreateUserCCNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create user c c not found response has a 4xx status code
func (o *CreateUserCCNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create user c c not found response has a 5xx status code
func (o *CreateUserCCNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create user c c not found response a status code equal to that given
func (o *CreateUserCCNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create user c c not found response
func (o *CreateUserCCNotFound) Code() int {
	return 404
}

func (o *CreateUserCCNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/cc-users][%d] createUserCCNotFound %s", 404, payload)
}

func (o *CreateUserCCNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/cc-users][%d] createUserCCNotFound %s", 404, payload)
}

func (o *CreateUserCCNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateUserCCNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserCCMethodNotAllowed creates a CreateUserCCMethodNotAllowed with default headers values
func NewCreateUserCCMethodNotAllowed() *CreateUserCCMethodNotAllowed {
	return &CreateUserCCMethodNotAllowed{}
}

/*
CreateUserCCMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type CreateUserCCMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create user c c method not allowed response has a 2xx status code
func (o *CreateUserCCMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create user c c method not allowed response has a 3xx status code
func (o *CreateUserCCMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create user c c method not allowed response has a 4xx status code
func (o *CreateUserCCMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create user c c method not allowed response has a 5xx status code
func (o *CreateUserCCMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this create user c c method not allowed response a status code equal to that given
func (o *CreateUserCCMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the create user c c method not allowed response
func (o *CreateUserCCMethodNotAllowed) Code() int {
	return 405
}

func (o *CreateUserCCMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/cc-users][%d] createUserCCMethodNotAllowed %s", 405, payload)
}

func (o *CreateUserCCMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/cc-users][%d] createUserCCMethodNotAllowed %s", 405, payload)
}

func (o *CreateUserCCMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateUserCCMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserCCInternalServerError creates a CreateUserCCInternalServerError with default headers values
func NewCreateUserCCInternalServerError() *CreateUserCCInternalServerError {
	return &CreateUserCCInternalServerError{}
}

/*
CreateUserCCInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateUserCCInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create user c c internal server error response has a 2xx status code
func (o *CreateUserCCInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create user c c internal server error response has a 3xx status code
func (o *CreateUserCCInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create user c c internal server error response has a 4xx status code
func (o *CreateUserCCInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create user c c internal server error response has a 5xx status code
func (o *CreateUserCCInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create user c c internal server error response a status code equal to that given
func (o *CreateUserCCInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create user c c internal server error response
func (o *CreateUserCCInternalServerError) Code() int {
	return 500
}

func (o *CreateUserCCInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/cc-users][%d] createUserCCInternalServerError %s", 500, payload)
}

func (o *CreateUserCCInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/cc-users][%d] createUserCCInternalServerError %s", 500, payload)
}

func (o *CreateUserCCInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateUserCCInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
