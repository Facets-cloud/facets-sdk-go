// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ChangePasswordReader is a Reader for the ChangePassword structure.
type ChangePasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangePasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChangePasswordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewChangePasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewChangePasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewChangePasswordMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewChangePasswordInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/users/{userId}/changePassword] changePassword", response, response.Code())
	}
}

// NewChangePasswordOK creates a ChangePasswordOK with default headers values
func NewChangePasswordOK() *ChangePasswordOK {
	return &ChangePasswordOK{}
}

/*
ChangePasswordOK describes a response with status code 200, with default header values.

OK
*/
type ChangePasswordOK struct {
	Payload *models.User
}

// IsSuccess returns true when this change password o k response has a 2xx status code
func (o *ChangePasswordOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this change password o k response has a 3xx status code
func (o *ChangePasswordOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password o k response has a 4xx status code
func (o *ChangePasswordOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this change password o k response has a 5xx status code
func (o *ChangePasswordOK) IsServerError() bool {
	return false
}

// IsCode returns true when this change password o k response a status code equal to that given
func (o *ChangePasswordOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the change password o k response
func (o *ChangePasswordOK) Code() int {
	return 200
}

func (o *ChangePasswordOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/users/{userId}/changePassword][%d] changePasswordOK %s", 200, payload)
}

func (o *ChangePasswordOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/users/{userId}/changePassword][%d] changePasswordOK %s", 200, payload)
}

func (o *ChangePasswordOK) GetPayload() *models.User {
	return o.Payload
}

func (o *ChangePasswordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordBadRequest creates a ChangePasswordBadRequest with default headers values
func NewChangePasswordBadRequest() *ChangePasswordBadRequest {
	return &ChangePasswordBadRequest{}
}

/*
ChangePasswordBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ChangePasswordBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this change password bad request response has a 2xx status code
func (o *ChangePasswordBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password bad request response has a 3xx status code
func (o *ChangePasswordBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password bad request response has a 4xx status code
func (o *ChangePasswordBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password bad request response has a 5xx status code
func (o *ChangePasswordBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this change password bad request response a status code equal to that given
func (o *ChangePasswordBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the change password bad request response
func (o *ChangePasswordBadRequest) Code() int {
	return 400
}

func (o *ChangePasswordBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/users/{userId}/changePassword][%d] changePasswordBadRequest %s", 400, payload)
}

func (o *ChangePasswordBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/users/{userId}/changePassword][%d] changePasswordBadRequest %s", 400, payload)
}

func (o *ChangePasswordBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ChangePasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordNotFound creates a ChangePasswordNotFound with default headers values
func NewChangePasswordNotFound() *ChangePasswordNotFound {
	return &ChangePasswordNotFound{}
}

/*
ChangePasswordNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ChangePasswordNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this change password not found response has a 2xx status code
func (o *ChangePasswordNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password not found response has a 3xx status code
func (o *ChangePasswordNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password not found response has a 4xx status code
func (o *ChangePasswordNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password not found response has a 5xx status code
func (o *ChangePasswordNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this change password not found response a status code equal to that given
func (o *ChangePasswordNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the change password not found response
func (o *ChangePasswordNotFound) Code() int {
	return 404
}

func (o *ChangePasswordNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/users/{userId}/changePassword][%d] changePasswordNotFound %s", 404, payload)
}

func (o *ChangePasswordNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/users/{userId}/changePassword][%d] changePasswordNotFound %s", 404, payload)
}

func (o *ChangePasswordNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ChangePasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordMethodNotAllowed creates a ChangePasswordMethodNotAllowed with default headers values
func NewChangePasswordMethodNotAllowed() *ChangePasswordMethodNotAllowed {
	return &ChangePasswordMethodNotAllowed{}
}

/*
ChangePasswordMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ChangePasswordMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this change password method not allowed response has a 2xx status code
func (o *ChangePasswordMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password method not allowed response has a 3xx status code
func (o *ChangePasswordMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password method not allowed response has a 4xx status code
func (o *ChangePasswordMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password method not allowed response has a 5xx status code
func (o *ChangePasswordMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this change password method not allowed response a status code equal to that given
func (o *ChangePasswordMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the change password method not allowed response
func (o *ChangePasswordMethodNotAllowed) Code() int {
	return 405
}

func (o *ChangePasswordMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/users/{userId}/changePassword][%d] changePasswordMethodNotAllowed %s", 405, payload)
}

func (o *ChangePasswordMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/users/{userId}/changePassword][%d] changePasswordMethodNotAllowed %s", 405, payload)
}

func (o *ChangePasswordMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ChangePasswordMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordInternalServerError creates a ChangePasswordInternalServerError with default headers values
func NewChangePasswordInternalServerError() *ChangePasswordInternalServerError {
	return &ChangePasswordInternalServerError{}
}

/*
ChangePasswordInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ChangePasswordInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this change password internal server error response has a 2xx status code
func (o *ChangePasswordInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password internal server error response has a 3xx status code
func (o *ChangePasswordInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password internal server error response has a 4xx status code
func (o *ChangePasswordInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this change password internal server error response has a 5xx status code
func (o *ChangePasswordInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this change password internal server error response a status code equal to that given
func (o *ChangePasswordInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the change password internal server error response
func (o *ChangePasswordInternalServerError) Code() int {
	return 500
}

func (o *ChangePasswordInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/users/{userId}/changePassword][%d] changePasswordInternalServerError %s", 500, payload)
}

func (o *ChangePasswordInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/users/{userId}/changePassword][%d] changePasswordInternalServerError %s", 500, payload)
}

func (o *ChangePasswordInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ChangePasswordInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
