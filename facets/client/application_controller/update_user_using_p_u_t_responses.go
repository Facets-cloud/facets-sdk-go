// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateUserUsingPUTReader is a Reader for the UpdateUserUsingPUT structure.
type UpdateUserUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUserUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateUserUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateUserUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateUserUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUserUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/users/{userId}] updateUserUsingPUT", response, response.Code())
	}
}

// NewUpdateUserUsingPUTOK creates a UpdateUserUsingPUTOK with default headers values
func NewUpdateUserUsingPUTOK() *UpdateUserUsingPUTOK {
	return &UpdateUserUsingPUTOK{}
}

/*
UpdateUserUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateUserUsingPUTOK struct {
	Payload *models.User
}

// IsSuccess returns true when this update user using p u t o k response has a 2xx status code
func (o *UpdateUserUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update user using p u t o k response has a 3xx status code
func (o *UpdateUserUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user using p u t o k response has a 4xx status code
func (o *UpdateUserUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user using p u t o k response has a 5xx status code
func (o *UpdateUserUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update user using p u t o k response a status code equal to that given
func (o *UpdateUserUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update user using p u t o k response
func (o *UpdateUserUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateUserUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/users/{userId}][%d] updateUserUsingPUTOK %s", 200, payload)
}

func (o *UpdateUserUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/users/{userId}][%d] updateUserUsingPUTOK %s", 200, payload)
}

func (o *UpdateUserUsingPUTOK) GetPayload() *models.User {
	return o.Payload
}

func (o *UpdateUserUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserUsingPUTCreated creates a UpdateUserUsingPUTCreated with default headers values
func NewUpdateUserUsingPUTCreated() *UpdateUserUsingPUTCreated {
	return &UpdateUserUsingPUTCreated{}
}

/*
UpdateUserUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateUserUsingPUTCreated struct {
}

// IsSuccess returns true when this update user using p u t created response has a 2xx status code
func (o *UpdateUserUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update user using p u t created response has a 3xx status code
func (o *UpdateUserUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user using p u t created response has a 4xx status code
func (o *UpdateUserUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user using p u t created response has a 5xx status code
func (o *UpdateUserUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update user using p u t created response a status code equal to that given
func (o *UpdateUserUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update user using p u t created response
func (o *UpdateUserUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateUserUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /api/users/{userId}][%d] updateUserUsingPUTCreated", 201)
}

func (o *UpdateUserUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /api/users/{userId}][%d] updateUserUsingPUTCreated", 201)
}

func (o *UpdateUserUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserUsingPUTUnauthorized creates a UpdateUserUsingPUTUnauthorized with default headers values
func NewUpdateUserUsingPUTUnauthorized() *UpdateUserUsingPUTUnauthorized {
	return &UpdateUserUsingPUTUnauthorized{}
}

/*
UpdateUserUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateUserUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update user using p u t unauthorized response has a 2xx status code
func (o *UpdateUserUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user using p u t unauthorized response has a 3xx status code
func (o *UpdateUserUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user using p u t unauthorized response has a 4xx status code
func (o *UpdateUserUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user using p u t unauthorized response has a 5xx status code
func (o *UpdateUserUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update user using p u t unauthorized response a status code equal to that given
func (o *UpdateUserUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update user using p u t unauthorized response
func (o *UpdateUserUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateUserUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/users/{userId}][%d] updateUserUsingPUTUnauthorized", 401)
}

func (o *UpdateUserUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/users/{userId}][%d] updateUserUsingPUTUnauthorized", 401)
}

func (o *UpdateUserUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserUsingPUTForbidden creates a UpdateUserUsingPUTForbidden with default headers values
func NewUpdateUserUsingPUTForbidden() *UpdateUserUsingPUTForbidden {
	return &UpdateUserUsingPUTForbidden{}
}

/*
UpdateUserUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateUserUsingPUTForbidden struct {
}

// IsSuccess returns true when this update user using p u t forbidden response has a 2xx status code
func (o *UpdateUserUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user using p u t forbidden response has a 3xx status code
func (o *UpdateUserUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user using p u t forbidden response has a 4xx status code
func (o *UpdateUserUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user using p u t forbidden response has a 5xx status code
func (o *UpdateUserUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update user using p u t forbidden response a status code equal to that given
func (o *UpdateUserUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update user using p u t forbidden response
func (o *UpdateUserUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateUserUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/users/{userId}][%d] updateUserUsingPUTForbidden", 403)
}

func (o *UpdateUserUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /api/users/{userId}][%d] updateUserUsingPUTForbidden", 403)
}

func (o *UpdateUserUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserUsingPUTNotFound creates a UpdateUserUsingPUTNotFound with default headers values
func NewUpdateUserUsingPUTNotFound() *UpdateUserUsingPUTNotFound {
	return &UpdateUserUsingPUTNotFound{}
}

/*
UpdateUserUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateUserUsingPUTNotFound struct {
}

// IsSuccess returns true when this update user using p u t not found response has a 2xx status code
func (o *UpdateUserUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user using p u t not found response has a 3xx status code
func (o *UpdateUserUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user using p u t not found response has a 4xx status code
func (o *UpdateUserUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user using p u t not found response has a 5xx status code
func (o *UpdateUserUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update user using p u t not found response a status code equal to that given
func (o *UpdateUserUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update user using p u t not found response
func (o *UpdateUserUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateUserUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/users/{userId}][%d] updateUserUsingPUTNotFound", 404)
}

func (o *UpdateUserUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /api/users/{userId}][%d] updateUserUsingPUTNotFound", 404)
}

func (o *UpdateUserUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
