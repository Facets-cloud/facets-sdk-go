// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// MeUsingGETReader is a Reader for the MeUsingGET structure.
type MeUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MeUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMeUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewMeUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMeUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMeUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/me] meUsingGET", response, response.Code())
	}
}

// NewMeUsingGETOK creates a MeUsingGETOK with default headers values
func NewMeUsingGETOK() *MeUsingGETOK {
	return &MeUsingGETOK{}
}

/*
MeUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type MeUsingGETOK struct {
	Payload *models.SimpleOauth2User
}

// IsSuccess returns true when this me using g e t o k response has a 2xx status code
func (o *MeUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this me using g e t o k response has a 3xx status code
func (o *MeUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this me using g e t o k response has a 4xx status code
func (o *MeUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this me using g e t o k response has a 5xx status code
func (o *MeUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this me using g e t o k response a status code equal to that given
func (o *MeUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the me using g e t o k response
func (o *MeUsingGETOK) Code() int {
	return 200
}

func (o *MeUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/me][%d] meUsingGETOK %s", 200, payload)
}

func (o *MeUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/me][%d] meUsingGETOK %s", 200, payload)
}

func (o *MeUsingGETOK) GetPayload() *models.SimpleOauth2User {
	return o.Payload
}

func (o *MeUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SimpleOauth2User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMeUsingGETUnauthorized creates a MeUsingGETUnauthorized with default headers values
func NewMeUsingGETUnauthorized() *MeUsingGETUnauthorized {
	return &MeUsingGETUnauthorized{}
}

/*
MeUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type MeUsingGETUnauthorized struct {
}

// IsSuccess returns true when this me using g e t unauthorized response has a 2xx status code
func (o *MeUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this me using g e t unauthorized response has a 3xx status code
func (o *MeUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this me using g e t unauthorized response has a 4xx status code
func (o *MeUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this me using g e t unauthorized response has a 5xx status code
func (o *MeUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this me using g e t unauthorized response a status code equal to that given
func (o *MeUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the me using g e t unauthorized response
func (o *MeUsingGETUnauthorized) Code() int {
	return 401
}

func (o *MeUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/me][%d] meUsingGETUnauthorized", 401)
}

func (o *MeUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/me][%d] meUsingGETUnauthorized", 401)
}

func (o *MeUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMeUsingGETForbidden creates a MeUsingGETForbidden with default headers values
func NewMeUsingGETForbidden() *MeUsingGETForbidden {
	return &MeUsingGETForbidden{}
}

/*
MeUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type MeUsingGETForbidden struct {
}

// IsSuccess returns true when this me using g e t forbidden response has a 2xx status code
func (o *MeUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this me using g e t forbidden response has a 3xx status code
func (o *MeUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this me using g e t forbidden response has a 4xx status code
func (o *MeUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this me using g e t forbidden response has a 5xx status code
func (o *MeUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this me using g e t forbidden response a status code equal to that given
func (o *MeUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the me using g e t forbidden response
func (o *MeUsingGETForbidden) Code() int {
	return 403
}

func (o *MeUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /api/me][%d] meUsingGETForbidden", 403)
}

func (o *MeUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /api/me][%d] meUsingGETForbidden", 403)
}

func (o *MeUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMeUsingGETNotFound creates a MeUsingGETNotFound with default headers values
func NewMeUsingGETNotFound() *MeUsingGETNotFound {
	return &MeUsingGETNotFound{}
}

/*
MeUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type MeUsingGETNotFound struct {
}

// IsSuccess returns true when this me using g e t not found response has a 2xx status code
func (o *MeUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this me using g e t not found response has a 3xx status code
func (o *MeUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this me using g e t not found response has a 4xx status code
func (o *MeUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this me using g e t not found response has a 5xx status code
func (o *MeUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this me using g e t not found response a status code equal to that given
func (o *MeUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the me using g e t not found response
func (o *MeUsingGETNotFound) Code() int {
	return 404
}

func (o *MeUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /api/me][%d] meUsingGETNotFound", 404)
}

func (o *MeUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /api/me][%d] meUsingGETNotFound", 404)
}

func (o *MeUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
