// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// LoginUsingPOSTReader is a Reader for the LoginUsingPOST structure.
type LoginUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoginUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewLoginUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewLoginUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLoginUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLoginUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/login] loginUsingPOST", response, response.Code())
	}
}

// NewLoginUsingPOSTOK creates a LoginUsingPOSTOK with default headers values
func NewLoginUsingPOSTOK() *LoginUsingPOSTOK {
	return &LoginUsingPOSTOK{}
}

/*
LoginUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type LoginUsingPOSTOK struct {
	Payload string
}

// IsSuccess returns true when this login using p o s t o k response has a 2xx status code
func (o *LoginUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login using p o s t o k response has a 3xx status code
func (o *LoginUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using p o s t o k response has a 4xx status code
func (o *LoginUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this login using p o s t o k response has a 5xx status code
func (o *LoginUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this login using p o s t o k response a status code equal to that given
func (o *LoginUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the login using p o s t o k response
func (o *LoginUsingPOSTOK) Code() int {
	return 200
}

func (o *LoginUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/login][%d] loginUsingPOSTOK %s", 200, payload)
}

func (o *LoginUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/login][%d] loginUsingPOSTOK %s", 200, payload)
}

func (o *LoginUsingPOSTOK) GetPayload() string {
	return o.Payload
}

func (o *LoginUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUsingPOSTCreated creates a LoginUsingPOSTCreated with default headers values
func NewLoginUsingPOSTCreated() *LoginUsingPOSTCreated {
	return &LoginUsingPOSTCreated{}
}

/*
LoginUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type LoginUsingPOSTCreated struct {
}

// IsSuccess returns true when this login using p o s t created response has a 2xx status code
func (o *LoginUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login using p o s t created response has a 3xx status code
func (o *LoginUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using p o s t created response has a 4xx status code
func (o *LoginUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this login using p o s t created response has a 5xx status code
func (o *LoginUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this login using p o s t created response a status code equal to that given
func (o *LoginUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the login using p o s t created response
func (o *LoginUsingPOSTCreated) Code() int {
	return 201
}

func (o *LoginUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /api/login][%d] loginUsingPOSTCreated", 201)
}

func (o *LoginUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /api/login][%d] loginUsingPOSTCreated", 201)
}

func (o *LoginUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLoginUsingPOSTUnauthorized creates a LoginUsingPOSTUnauthorized with default headers values
func NewLoginUsingPOSTUnauthorized() *LoginUsingPOSTUnauthorized {
	return &LoginUsingPOSTUnauthorized{}
}

/*
LoginUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type LoginUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this login using p o s t unauthorized response has a 2xx status code
func (o *LoginUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login using p o s t unauthorized response has a 3xx status code
func (o *LoginUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using p o s t unauthorized response has a 4xx status code
func (o *LoginUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this login using p o s t unauthorized response has a 5xx status code
func (o *LoginUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this login using p o s t unauthorized response a status code equal to that given
func (o *LoginUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the login using p o s t unauthorized response
func (o *LoginUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *LoginUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/login][%d] loginUsingPOSTUnauthorized", 401)
}

func (o *LoginUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/login][%d] loginUsingPOSTUnauthorized", 401)
}

func (o *LoginUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLoginUsingPOSTForbidden creates a LoginUsingPOSTForbidden with default headers values
func NewLoginUsingPOSTForbidden() *LoginUsingPOSTForbidden {
	return &LoginUsingPOSTForbidden{}
}

/*
LoginUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type LoginUsingPOSTForbidden struct {
}

// IsSuccess returns true when this login using p o s t forbidden response has a 2xx status code
func (o *LoginUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login using p o s t forbidden response has a 3xx status code
func (o *LoginUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using p o s t forbidden response has a 4xx status code
func (o *LoginUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this login using p o s t forbidden response has a 5xx status code
func (o *LoginUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this login using p o s t forbidden response a status code equal to that given
func (o *LoginUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the login using p o s t forbidden response
func (o *LoginUsingPOSTForbidden) Code() int {
	return 403
}

func (o *LoginUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /api/login][%d] loginUsingPOSTForbidden", 403)
}

func (o *LoginUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /api/login][%d] loginUsingPOSTForbidden", 403)
}

func (o *LoginUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLoginUsingPOSTNotFound creates a LoginUsingPOSTNotFound with default headers values
func NewLoginUsingPOSTNotFound() *LoginUsingPOSTNotFound {
	return &LoginUsingPOSTNotFound{}
}

/*
LoginUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type LoginUsingPOSTNotFound struct {
}

// IsSuccess returns true when this login using p o s t not found response has a 2xx status code
func (o *LoginUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login using p o s t not found response has a 3xx status code
func (o *LoginUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using p o s t not found response has a 4xx status code
func (o *LoginUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this login using p o s t not found response has a 5xx status code
func (o *LoginUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this login using p o s t not found response a status code equal to that given
func (o *LoginUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the login using p o s t not found response
func (o *LoginUsingPOSTNotFound) Code() int {
	return 404
}

func (o *LoginUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /api/login][%d] loginUsingPOSTNotFound", 404)
}

func (o *LoginUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /api/login][%d] loginUsingPOSTNotFound", 404)
}

func (o *LoginUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
