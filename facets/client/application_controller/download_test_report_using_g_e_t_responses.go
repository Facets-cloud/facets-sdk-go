// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DownloadTestReportUsingGETReader is a Reader for the DownloadTestReportUsingGET structure.
type DownloadTestReportUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DownloadTestReportUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadTestReportUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDownloadTestReportUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDownloadTestReportUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDownloadTestReportUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/{applicationFamily}/applications/{applicationId}/builds/{buildId}/downloadArtifacts] downloadTestReportUsingGET", response, response.Code())
	}
}

// NewDownloadTestReportUsingGETOK creates a DownloadTestReportUsingGETOK with default headers values
func NewDownloadTestReportUsingGETOK() *DownloadTestReportUsingGETOK {
	return &DownloadTestReportUsingGETOK{}
}

/*
DownloadTestReportUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type DownloadTestReportUsingGETOK struct {
	Payload *models.InputStreamResource
}

// IsSuccess returns true when this download test report using g e t o k response has a 2xx status code
func (o *DownloadTestReportUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this download test report using g e t o k response has a 3xx status code
func (o *DownloadTestReportUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download test report using g e t o k response has a 4xx status code
func (o *DownloadTestReportUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this download test report using g e t o k response has a 5xx status code
func (o *DownloadTestReportUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this download test report using g e t o k response a status code equal to that given
func (o *DownloadTestReportUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the download test report using g e t o k response
func (o *DownloadTestReportUsingGETOK) Code() int {
	return 200
}

func (o *DownloadTestReportUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/{applicationFamily}/applications/{applicationId}/builds/{buildId}/downloadArtifacts][%d] downloadTestReportUsingGETOK %s", 200, payload)
}

func (o *DownloadTestReportUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/{applicationFamily}/applications/{applicationId}/builds/{buildId}/downloadArtifacts][%d] downloadTestReportUsingGETOK %s", 200, payload)
}

func (o *DownloadTestReportUsingGETOK) GetPayload() *models.InputStreamResource {
	return o.Payload
}

func (o *DownloadTestReportUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InputStreamResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadTestReportUsingGETUnauthorized creates a DownloadTestReportUsingGETUnauthorized with default headers values
func NewDownloadTestReportUsingGETUnauthorized() *DownloadTestReportUsingGETUnauthorized {
	return &DownloadTestReportUsingGETUnauthorized{}
}

/*
DownloadTestReportUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DownloadTestReportUsingGETUnauthorized struct {
}

// IsSuccess returns true when this download test report using g e t unauthorized response has a 2xx status code
func (o *DownloadTestReportUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download test report using g e t unauthorized response has a 3xx status code
func (o *DownloadTestReportUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download test report using g e t unauthorized response has a 4xx status code
func (o *DownloadTestReportUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this download test report using g e t unauthorized response has a 5xx status code
func (o *DownloadTestReportUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this download test report using g e t unauthorized response a status code equal to that given
func (o *DownloadTestReportUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the download test report using g e t unauthorized response
func (o *DownloadTestReportUsingGETUnauthorized) Code() int {
	return 401
}

func (o *DownloadTestReportUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/{applicationFamily}/applications/{applicationId}/builds/{buildId}/downloadArtifacts][%d] downloadTestReportUsingGETUnauthorized", 401)
}

func (o *DownloadTestReportUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/{applicationFamily}/applications/{applicationId}/builds/{buildId}/downloadArtifacts][%d] downloadTestReportUsingGETUnauthorized", 401)
}

func (o *DownloadTestReportUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadTestReportUsingGETForbidden creates a DownloadTestReportUsingGETForbidden with default headers values
func NewDownloadTestReportUsingGETForbidden() *DownloadTestReportUsingGETForbidden {
	return &DownloadTestReportUsingGETForbidden{}
}

/*
DownloadTestReportUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DownloadTestReportUsingGETForbidden struct {
}

// IsSuccess returns true when this download test report using g e t forbidden response has a 2xx status code
func (o *DownloadTestReportUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download test report using g e t forbidden response has a 3xx status code
func (o *DownloadTestReportUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download test report using g e t forbidden response has a 4xx status code
func (o *DownloadTestReportUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this download test report using g e t forbidden response has a 5xx status code
func (o *DownloadTestReportUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this download test report using g e t forbidden response a status code equal to that given
func (o *DownloadTestReportUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the download test report using g e t forbidden response
func (o *DownloadTestReportUsingGETForbidden) Code() int {
	return 403
}

func (o *DownloadTestReportUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /api/{applicationFamily}/applications/{applicationId}/builds/{buildId}/downloadArtifacts][%d] downloadTestReportUsingGETForbidden", 403)
}

func (o *DownloadTestReportUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /api/{applicationFamily}/applications/{applicationId}/builds/{buildId}/downloadArtifacts][%d] downloadTestReportUsingGETForbidden", 403)
}

func (o *DownloadTestReportUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadTestReportUsingGETNotFound creates a DownloadTestReportUsingGETNotFound with default headers values
func NewDownloadTestReportUsingGETNotFound() *DownloadTestReportUsingGETNotFound {
	return &DownloadTestReportUsingGETNotFound{}
}

/*
DownloadTestReportUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DownloadTestReportUsingGETNotFound struct {
}

// IsSuccess returns true when this download test report using g e t not found response has a 2xx status code
func (o *DownloadTestReportUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download test report using g e t not found response has a 3xx status code
func (o *DownloadTestReportUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download test report using g e t not found response has a 4xx status code
func (o *DownloadTestReportUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this download test report using g e t not found response has a 5xx status code
func (o *DownloadTestReportUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this download test report using g e t not found response a status code equal to that given
func (o *DownloadTestReportUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the download test report using g e t not found response
func (o *DownloadTestReportUsingGETNotFound) Code() int {
	return 404
}

func (o *DownloadTestReportUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /api/{applicationFamily}/applications/{applicationId}/builds/{buildId}/downloadArtifacts][%d] downloadTestReportUsingGETNotFound", 404)
}

func (o *DownloadTestReportUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /api/{applicationFamily}/applications/{applicationId}/builds/{buildId}/downloadArtifacts][%d] downloadTestReportUsingGETNotFound", 404)
}

func (o *DownloadTestReportUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
