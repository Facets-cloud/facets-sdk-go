// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DisableMonitoringUsingDELETEReader is a Reader for the DisableMonitoringUsingDELETE structure.
type DisableMonitoringUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DisableMonitoringUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDisableMonitoringUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDisableMonitoringUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDisableMonitoringUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDisableMonitoringUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring] disableMonitoringUsingDELETE", response, response.Code())
	}
}

// NewDisableMonitoringUsingDELETEOK creates a DisableMonitoringUsingDELETEOK with default headers values
func NewDisableMonitoringUsingDELETEOK() *DisableMonitoringUsingDELETEOK {
	return &DisableMonitoringUsingDELETEOK{}
}

/*
DisableMonitoringUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DisableMonitoringUsingDELETEOK struct {
	Payload bool
}

// IsSuccess returns true when this disable monitoring using d e l e t e o k response has a 2xx status code
func (o *DisableMonitoringUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this disable monitoring using d e l e t e o k response has a 3xx status code
func (o *DisableMonitoringUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this disable monitoring using d e l e t e o k response has a 4xx status code
func (o *DisableMonitoringUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this disable monitoring using d e l e t e o k response has a 5xx status code
func (o *DisableMonitoringUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this disable monitoring using d e l e t e o k response a status code equal to that given
func (o *DisableMonitoringUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the disable monitoring using d e l e t e o k response
func (o *DisableMonitoringUsingDELETEOK) Code() int {
	return 200
}

func (o *DisableMonitoringUsingDELETEOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] disableMonitoringUsingDELETEOK %s", 200, payload)
}

func (o *DisableMonitoringUsingDELETEOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] disableMonitoringUsingDELETEOK %s", 200, payload)
}

func (o *DisableMonitoringUsingDELETEOK) GetPayload() bool {
	return o.Payload
}

func (o *DisableMonitoringUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableMonitoringUsingDELETENoContent creates a DisableMonitoringUsingDELETENoContent with default headers values
func NewDisableMonitoringUsingDELETENoContent() *DisableMonitoringUsingDELETENoContent {
	return &DisableMonitoringUsingDELETENoContent{}
}

/*
DisableMonitoringUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DisableMonitoringUsingDELETENoContent struct {
}

// IsSuccess returns true when this disable monitoring using d e l e t e no content response has a 2xx status code
func (o *DisableMonitoringUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this disable monitoring using d e l e t e no content response has a 3xx status code
func (o *DisableMonitoringUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this disable monitoring using d e l e t e no content response has a 4xx status code
func (o *DisableMonitoringUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this disable monitoring using d e l e t e no content response has a 5xx status code
func (o *DisableMonitoringUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this disable monitoring using d e l e t e no content response a status code equal to that given
func (o *DisableMonitoringUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the disable monitoring using d e l e t e no content response
func (o *DisableMonitoringUsingDELETENoContent) Code() int {
	return 204
}

func (o *DisableMonitoringUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] disableMonitoringUsingDELETENoContent", 204)
}

func (o *DisableMonitoringUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] disableMonitoringUsingDELETENoContent", 204)
}

func (o *DisableMonitoringUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDisableMonitoringUsingDELETEUnauthorized creates a DisableMonitoringUsingDELETEUnauthorized with default headers values
func NewDisableMonitoringUsingDELETEUnauthorized() *DisableMonitoringUsingDELETEUnauthorized {
	return &DisableMonitoringUsingDELETEUnauthorized{}
}

/*
DisableMonitoringUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DisableMonitoringUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this disable monitoring using d e l e t e unauthorized response has a 2xx status code
func (o *DisableMonitoringUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this disable monitoring using d e l e t e unauthorized response has a 3xx status code
func (o *DisableMonitoringUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this disable monitoring using d e l e t e unauthorized response has a 4xx status code
func (o *DisableMonitoringUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this disable monitoring using d e l e t e unauthorized response has a 5xx status code
func (o *DisableMonitoringUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this disable monitoring using d e l e t e unauthorized response a status code equal to that given
func (o *DisableMonitoringUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the disable monitoring using d e l e t e unauthorized response
func (o *DisableMonitoringUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DisableMonitoringUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] disableMonitoringUsingDELETEUnauthorized", 401)
}

func (o *DisableMonitoringUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] disableMonitoringUsingDELETEUnauthorized", 401)
}

func (o *DisableMonitoringUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDisableMonitoringUsingDELETEForbidden creates a DisableMonitoringUsingDELETEForbidden with default headers values
func NewDisableMonitoringUsingDELETEForbidden() *DisableMonitoringUsingDELETEForbidden {
	return &DisableMonitoringUsingDELETEForbidden{}
}

/*
DisableMonitoringUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DisableMonitoringUsingDELETEForbidden struct {
}

// IsSuccess returns true when this disable monitoring using d e l e t e forbidden response has a 2xx status code
func (o *DisableMonitoringUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this disable monitoring using d e l e t e forbidden response has a 3xx status code
func (o *DisableMonitoringUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this disable monitoring using d e l e t e forbidden response has a 4xx status code
func (o *DisableMonitoringUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this disable monitoring using d e l e t e forbidden response has a 5xx status code
func (o *DisableMonitoringUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this disable monitoring using d e l e t e forbidden response a status code equal to that given
func (o *DisableMonitoringUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the disable monitoring using d e l e t e forbidden response
func (o *DisableMonitoringUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DisableMonitoringUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] disableMonitoringUsingDELETEForbidden", 403)
}

func (o *DisableMonitoringUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] disableMonitoringUsingDELETEForbidden", 403)
}

func (o *DisableMonitoringUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
