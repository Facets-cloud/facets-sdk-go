// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// EnableMonitoringUsingPOSTReader is a Reader for the EnableMonitoringUsingPOST structure.
type EnableMonitoringUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnableMonitoringUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnableMonitoringUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewEnableMonitoringUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewEnableMonitoringUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEnableMonitoringUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEnableMonitoringUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring] enableMonitoringUsingPOST", response, response.Code())
	}
}

// NewEnableMonitoringUsingPOSTOK creates a EnableMonitoringUsingPOSTOK with default headers values
func NewEnableMonitoringUsingPOSTOK() *EnableMonitoringUsingPOSTOK {
	return &EnableMonitoringUsingPOSTOK{}
}

/*
EnableMonitoringUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type EnableMonitoringUsingPOSTOK struct {
	Payload bool
}

// IsSuccess returns true when this enable monitoring using p o s t o k response has a 2xx status code
func (o *EnableMonitoringUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enable monitoring using p o s t o k response has a 3xx status code
func (o *EnableMonitoringUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable monitoring using p o s t o k response has a 4xx status code
func (o *EnableMonitoringUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable monitoring using p o s t o k response has a 5xx status code
func (o *EnableMonitoringUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this enable monitoring using p o s t o k response a status code equal to that given
func (o *EnableMonitoringUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the enable monitoring using p o s t o k response
func (o *EnableMonitoringUsingPOSTOK) Code() int {
	return 200
}

func (o *EnableMonitoringUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] enableMonitoringUsingPOSTOK %s", 200, payload)
}

func (o *EnableMonitoringUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] enableMonitoringUsingPOSTOK %s", 200, payload)
}

func (o *EnableMonitoringUsingPOSTOK) GetPayload() bool {
	return o.Payload
}

func (o *EnableMonitoringUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableMonitoringUsingPOSTCreated creates a EnableMonitoringUsingPOSTCreated with default headers values
func NewEnableMonitoringUsingPOSTCreated() *EnableMonitoringUsingPOSTCreated {
	return &EnableMonitoringUsingPOSTCreated{}
}

/*
EnableMonitoringUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type EnableMonitoringUsingPOSTCreated struct {
}

// IsSuccess returns true when this enable monitoring using p o s t created response has a 2xx status code
func (o *EnableMonitoringUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enable monitoring using p o s t created response has a 3xx status code
func (o *EnableMonitoringUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable monitoring using p o s t created response has a 4xx status code
func (o *EnableMonitoringUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable monitoring using p o s t created response has a 5xx status code
func (o *EnableMonitoringUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this enable monitoring using p o s t created response a status code equal to that given
func (o *EnableMonitoringUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the enable monitoring using p o s t created response
func (o *EnableMonitoringUsingPOSTCreated) Code() int {
	return 201
}

func (o *EnableMonitoringUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] enableMonitoringUsingPOSTCreated", 201)
}

func (o *EnableMonitoringUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] enableMonitoringUsingPOSTCreated", 201)
}

func (o *EnableMonitoringUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableMonitoringUsingPOSTUnauthorized creates a EnableMonitoringUsingPOSTUnauthorized with default headers values
func NewEnableMonitoringUsingPOSTUnauthorized() *EnableMonitoringUsingPOSTUnauthorized {
	return &EnableMonitoringUsingPOSTUnauthorized{}
}

/*
EnableMonitoringUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type EnableMonitoringUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this enable monitoring using p o s t unauthorized response has a 2xx status code
func (o *EnableMonitoringUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable monitoring using p o s t unauthorized response has a 3xx status code
func (o *EnableMonitoringUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable monitoring using p o s t unauthorized response has a 4xx status code
func (o *EnableMonitoringUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable monitoring using p o s t unauthorized response has a 5xx status code
func (o *EnableMonitoringUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this enable monitoring using p o s t unauthorized response a status code equal to that given
func (o *EnableMonitoringUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the enable monitoring using p o s t unauthorized response
func (o *EnableMonitoringUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *EnableMonitoringUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] enableMonitoringUsingPOSTUnauthorized", 401)
}

func (o *EnableMonitoringUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] enableMonitoringUsingPOSTUnauthorized", 401)
}

func (o *EnableMonitoringUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableMonitoringUsingPOSTForbidden creates a EnableMonitoringUsingPOSTForbidden with default headers values
func NewEnableMonitoringUsingPOSTForbidden() *EnableMonitoringUsingPOSTForbidden {
	return &EnableMonitoringUsingPOSTForbidden{}
}

/*
EnableMonitoringUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EnableMonitoringUsingPOSTForbidden struct {
}

// IsSuccess returns true when this enable monitoring using p o s t forbidden response has a 2xx status code
func (o *EnableMonitoringUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable monitoring using p o s t forbidden response has a 3xx status code
func (o *EnableMonitoringUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable monitoring using p o s t forbidden response has a 4xx status code
func (o *EnableMonitoringUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable monitoring using p o s t forbidden response has a 5xx status code
func (o *EnableMonitoringUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this enable monitoring using p o s t forbidden response a status code equal to that given
func (o *EnableMonitoringUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the enable monitoring using p o s t forbidden response
func (o *EnableMonitoringUsingPOSTForbidden) Code() int {
	return 403
}

func (o *EnableMonitoringUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] enableMonitoringUsingPOSTForbidden", 403)
}

func (o *EnableMonitoringUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] enableMonitoringUsingPOSTForbidden", 403)
}

func (o *EnableMonitoringUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableMonitoringUsingPOSTNotFound creates a EnableMonitoringUsingPOSTNotFound with default headers values
func NewEnableMonitoringUsingPOSTNotFound() *EnableMonitoringUsingPOSTNotFound {
	return &EnableMonitoringUsingPOSTNotFound{}
}

/*
EnableMonitoringUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type EnableMonitoringUsingPOSTNotFound struct {
}

// IsSuccess returns true when this enable monitoring using p o s t not found response has a 2xx status code
func (o *EnableMonitoringUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable monitoring using p o s t not found response has a 3xx status code
func (o *EnableMonitoringUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable monitoring using p o s t not found response has a 4xx status code
func (o *EnableMonitoringUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable monitoring using p o s t not found response has a 5xx status code
func (o *EnableMonitoringUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this enable monitoring using p o s t not found response a status code equal to that given
func (o *EnableMonitoringUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the enable monitoring using p o s t not found response
func (o *EnableMonitoringUsingPOSTNotFound) Code() int {
	return 404
}

func (o *EnableMonitoringUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] enableMonitoringUsingPOSTNotFound", 404)
}

func (o *EnableMonitoringUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring][%d] enableMonitoringUsingPOSTNotFound", 404)
}

func (o *EnableMonitoringUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
