// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetApplicationTagsUsingGETReader is a Reader for the GetApplicationTagsUsingGET structure.
type GetApplicationTagsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetApplicationTagsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetApplicationTagsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetApplicationTagsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetApplicationTagsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetApplicationTagsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/{applicationFamily}/applications/{applicationId}/tags] getApplicationTagsUsingGET", response, response.Code())
	}
}

// NewGetApplicationTagsUsingGETOK creates a GetApplicationTagsUsingGETOK with default headers values
func NewGetApplicationTagsUsingGETOK() *GetApplicationTagsUsingGETOK {
	return &GetApplicationTagsUsingGETOK{}
}

/*
GetApplicationTagsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetApplicationTagsUsingGETOK struct {
	Payload []string
}

// IsSuccess returns true when this get application tags using g e t o k response has a 2xx status code
func (o *GetApplicationTagsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get application tags using g e t o k response has a 3xx status code
func (o *GetApplicationTagsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get application tags using g e t o k response has a 4xx status code
func (o *GetApplicationTagsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get application tags using g e t o k response has a 5xx status code
func (o *GetApplicationTagsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get application tags using g e t o k response a status code equal to that given
func (o *GetApplicationTagsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get application tags using g e t o k response
func (o *GetApplicationTagsUsingGETOK) Code() int {
	return 200
}

func (o *GetApplicationTagsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/{applicationFamily}/applications/{applicationId}/tags][%d] getApplicationTagsUsingGETOK %s", 200, payload)
}

func (o *GetApplicationTagsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/{applicationFamily}/applications/{applicationId}/tags][%d] getApplicationTagsUsingGETOK %s", 200, payload)
}

func (o *GetApplicationTagsUsingGETOK) GetPayload() []string {
	return o.Payload
}

func (o *GetApplicationTagsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApplicationTagsUsingGETUnauthorized creates a GetApplicationTagsUsingGETUnauthorized with default headers values
func NewGetApplicationTagsUsingGETUnauthorized() *GetApplicationTagsUsingGETUnauthorized {
	return &GetApplicationTagsUsingGETUnauthorized{}
}

/*
GetApplicationTagsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetApplicationTagsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get application tags using g e t unauthorized response has a 2xx status code
func (o *GetApplicationTagsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get application tags using g e t unauthorized response has a 3xx status code
func (o *GetApplicationTagsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get application tags using g e t unauthorized response has a 4xx status code
func (o *GetApplicationTagsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get application tags using g e t unauthorized response has a 5xx status code
func (o *GetApplicationTagsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get application tags using g e t unauthorized response a status code equal to that given
func (o *GetApplicationTagsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get application tags using g e t unauthorized response
func (o *GetApplicationTagsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetApplicationTagsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/{applicationFamily}/applications/{applicationId}/tags][%d] getApplicationTagsUsingGETUnauthorized", 401)
}

func (o *GetApplicationTagsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/{applicationFamily}/applications/{applicationId}/tags][%d] getApplicationTagsUsingGETUnauthorized", 401)
}

func (o *GetApplicationTagsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetApplicationTagsUsingGETForbidden creates a GetApplicationTagsUsingGETForbidden with default headers values
func NewGetApplicationTagsUsingGETForbidden() *GetApplicationTagsUsingGETForbidden {
	return &GetApplicationTagsUsingGETForbidden{}
}

/*
GetApplicationTagsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetApplicationTagsUsingGETForbidden struct {
}

// IsSuccess returns true when this get application tags using g e t forbidden response has a 2xx status code
func (o *GetApplicationTagsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get application tags using g e t forbidden response has a 3xx status code
func (o *GetApplicationTagsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get application tags using g e t forbidden response has a 4xx status code
func (o *GetApplicationTagsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get application tags using g e t forbidden response has a 5xx status code
func (o *GetApplicationTagsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get application tags using g e t forbidden response a status code equal to that given
func (o *GetApplicationTagsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get application tags using g e t forbidden response
func (o *GetApplicationTagsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetApplicationTagsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /api/{applicationFamily}/applications/{applicationId}/tags][%d] getApplicationTagsUsingGETForbidden", 403)
}

func (o *GetApplicationTagsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /api/{applicationFamily}/applications/{applicationId}/tags][%d] getApplicationTagsUsingGETForbidden", 403)
}

func (o *GetApplicationTagsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetApplicationTagsUsingGETNotFound creates a GetApplicationTagsUsingGETNotFound with default headers values
func NewGetApplicationTagsUsingGETNotFound() *GetApplicationTagsUsingGETNotFound {
	return &GetApplicationTagsUsingGETNotFound{}
}

/*
GetApplicationTagsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetApplicationTagsUsingGETNotFound struct {
}

// IsSuccess returns true when this get application tags using g e t not found response has a 2xx status code
func (o *GetApplicationTagsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get application tags using g e t not found response has a 3xx status code
func (o *GetApplicationTagsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get application tags using g e t not found response has a 4xx status code
func (o *GetApplicationTagsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get application tags using g e t not found response has a 5xx status code
func (o *GetApplicationTagsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get application tags using g e t not found response a status code equal to that given
func (o *GetApplicationTagsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get application tags using g e t not found response
func (o *GetApplicationTagsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetApplicationTagsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /api/{applicationFamily}/applications/{applicationId}/tags][%d] getApplicationTagsUsingGETNotFound", 404)
}

func (o *GetApplicationTagsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /api/{applicationFamily}/applications/{applicationId}/tags][%d] getApplicationTagsUsingGETNotFound", 404)
}

func (o *GetApplicationTagsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
