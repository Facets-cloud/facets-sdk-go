// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// LoginUsingGETReader is a Reader for the LoginUsingGET structure.
type LoginUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoginUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewLoginUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLoginUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLoginUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/login] loginUsingGET", response, response.Code())
	}
}

// NewLoginUsingGETOK creates a LoginUsingGETOK with default headers values
func NewLoginUsingGETOK() *LoginUsingGETOK {
	return &LoginUsingGETOK{}
}

/*
LoginUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type LoginUsingGETOK struct {
	Payload string
}

// IsSuccess returns true when this login using g e t o k response has a 2xx status code
func (o *LoginUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login using g e t o k response has a 3xx status code
func (o *LoginUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using g e t o k response has a 4xx status code
func (o *LoginUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this login using g e t o k response has a 5xx status code
func (o *LoginUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this login using g e t o k response a status code equal to that given
func (o *LoginUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the login using g e t o k response
func (o *LoginUsingGETOK) Code() int {
	return 200
}

func (o *LoginUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/login][%d] loginUsingGETOK %s", 200, payload)
}

func (o *LoginUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/login][%d] loginUsingGETOK %s", 200, payload)
}

func (o *LoginUsingGETOK) GetPayload() string {
	return o.Payload
}

func (o *LoginUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUsingGETUnauthorized creates a LoginUsingGETUnauthorized with default headers values
func NewLoginUsingGETUnauthorized() *LoginUsingGETUnauthorized {
	return &LoginUsingGETUnauthorized{}
}

/*
LoginUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type LoginUsingGETUnauthorized struct {
}

// IsSuccess returns true when this login using g e t unauthorized response has a 2xx status code
func (o *LoginUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login using g e t unauthorized response has a 3xx status code
func (o *LoginUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using g e t unauthorized response has a 4xx status code
func (o *LoginUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this login using g e t unauthorized response has a 5xx status code
func (o *LoginUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this login using g e t unauthorized response a status code equal to that given
func (o *LoginUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the login using g e t unauthorized response
func (o *LoginUsingGETUnauthorized) Code() int {
	return 401
}

func (o *LoginUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/login][%d] loginUsingGETUnauthorized", 401)
}

func (o *LoginUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/login][%d] loginUsingGETUnauthorized", 401)
}

func (o *LoginUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLoginUsingGETForbidden creates a LoginUsingGETForbidden with default headers values
func NewLoginUsingGETForbidden() *LoginUsingGETForbidden {
	return &LoginUsingGETForbidden{}
}

/*
LoginUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type LoginUsingGETForbidden struct {
}

// IsSuccess returns true when this login using g e t forbidden response has a 2xx status code
func (o *LoginUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login using g e t forbidden response has a 3xx status code
func (o *LoginUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using g e t forbidden response has a 4xx status code
func (o *LoginUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this login using g e t forbidden response has a 5xx status code
func (o *LoginUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this login using g e t forbidden response a status code equal to that given
func (o *LoginUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the login using g e t forbidden response
func (o *LoginUsingGETForbidden) Code() int {
	return 403
}

func (o *LoginUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /api/login][%d] loginUsingGETForbidden", 403)
}

func (o *LoginUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /api/login][%d] loginUsingGETForbidden", 403)
}

func (o *LoginUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLoginUsingGETNotFound creates a LoginUsingGETNotFound with default headers values
func NewLoginUsingGETNotFound() *LoginUsingGETNotFound {
	return &LoginUsingGETNotFound{}
}

/*
LoginUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type LoginUsingGETNotFound struct {
}

// IsSuccess returns true when this login using g e t not found response has a 2xx status code
func (o *LoginUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login using g e t not found response has a 3xx status code
func (o *LoginUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using g e t not found response has a 4xx status code
func (o *LoginUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this login using g e t not found response has a 5xx status code
func (o *LoginUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this login using g e t not found response a status code equal to that given
func (o *LoginUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the login using g e t not found response
func (o *LoginUsingGETNotFound) Code() int {
	return 404
}

func (o *LoginUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /api/login][%d] loginUsingGETNotFound", 404)
}

func (o *LoginUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /api/login][%d] loginUsingGETNotFound", 404)
}

func (o *LoginUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
