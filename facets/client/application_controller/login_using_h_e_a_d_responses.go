// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// LoginUsingHEADReader is a Reader for the LoginUsingHEAD structure.
type LoginUsingHEADReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginUsingHEADReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoginUsingHEADOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewLoginUsingHEADNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewLoginUsingHEADUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLoginUsingHEADForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[HEAD /api/login] loginUsingHEAD", response, response.Code())
	}
}

// NewLoginUsingHEADOK creates a LoginUsingHEADOK with default headers values
func NewLoginUsingHEADOK() *LoginUsingHEADOK {
	return &LoginUsingHEADOK{}
}

/*
LoginUsingHEADOK describes a response with status code 200, with default header values.

OK
*/
type LoginUsingHEADOK struct {
	Payload string
}

// IsSuccess returns true when this login using h e a d o k response has a 2xx status code
func (o *LoginUsingHEADOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login using h e a d o k response has a 3xx status code
func (o *LoginUsingHEADOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using h e a d o k response has a 4xx status code
func (o *LoginUsingHEADOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this login using h e a d o k response has a 5xx status code
func (o *LoginUsingHEADOK) IsServerError() bool {
	return false
}

// IsCode returns true when this login using h e a d o k response a status code equal to that given
func (o *LoginUsingHEADOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the login using h e a d o k response
func (o *LoginUsingHEADOK) Code() int {
	return 200
}

func (o *LoginUsingHEADOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[HEAD /api/login][%d] loginUsingHEADOK %s", 200, payload)
}

func (o *LoginUsingHEADOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[HEAD /api/login][%d] loginUsingHEADOK %s", 200, payload)
}

func (o *LoginUsingHEADOK) GetPayload() string {
	return o.Payload
}

func (o *LoginUsingHEADOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUsingHEADNoContent creates a LoginUsingHEADNoContent with default headers values
func NewLoginUsingHEADNoContent() *LoginUsingHEADNoContent {
	return &LoginUsingHEADNoContent{}
}

/*
LoginUsingHEADNoContent describes a response with status code 204, with default header values.

No Content
*/
type LoginUsingHEADNoContent struct {
}

// IsSuccess returns true when this login using h e a d no content response has a 2xx status code
func (o *LoginUsingHEADNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login using h e a d no content response has a 3xx status code
func (o *LoginUsingHEADNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using h e a d no content response has a 4xx status code
func (o *LoginUsingHEADNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this login using h e a d no content response has a 5xx status code
func (o *LoginUsingHEADNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this login using h e a d no content response a status code equal to that given
func (o *LoginUsingHEADNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the login using h e a d no content response
func (o *LoginUsingHEADNoContent) Code() int {
	return 204
}

func (o *LoginUsingHEADNoContent) Error() string {
	return fmt.Sprintf("[HEAD /api/login][%d] loginUsingHEADNoContent", 204)
}

func (o *LoginUsingHEADNoContent) String() string {
	return fmt.Sprintf("[HEAD /api/login][%d] loginUsingHEADNoContent", 204)
}

func (o *LoginUsingHEADNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLoginUsingHEADUnauthorized creates a LoginUsingHEADUnauthorized with default headers values
func NewLoginUsingHEADUnauthorized() *LoginUsingHEADUnauthorized {
	return &LoginUsingHEADUnauthorized{}
}

/*
LoginUsingHEADUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type LoginUsingHEADUnauthorized struct {
}

// IsSuccess returns true when this login using h e a d unauthorized response has a 2xx status code
func (o *LoginUsingHEADUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login using h e a d unauthorized response has a 3xx status code
func (o *LoginUsingHEADUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using h e a d unauthorized response has a 4xx status code
func (o *LoginUsingHEADUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this login using h e a d unauthorized response has a 5xx status code
func (o *LoginUsingHEADUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this login using h e a d unauthorized response a status code equal to that given
func (o *LoginUsingHEADUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the login using h e a d unauthorized response
func (o *LoginUsingHEADUnauthorized) Code() int {
	return 401
}

func (o *LoginUsingHEADUnauthorized) Error() string {
	return fmt.Sprintf("[HEAD /api/login][%d] loginUsingHEADUnauthorized", 401)
}

func (o *LoginUsingHEADUnauthorized) String() string {
	return fmt.Sprintf("[HEAD /api/login][%d] loginUsingHEADUnauthorized", 401)
}

func (o *LoginUsingHEADUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLoginUsingHEADForbidden creates a LoginUsingHEADForbidden with default headers values
func NewLoginUsingHEADForbidden() *LoginUsingHEADForbidden {
	return &LoginUsingHEADForbidden{}
}

/*
LoginUsingHEADForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type LoginUsingHEADForbidden struct {
}

// IsSuccess returns true when this login using h e a d forbidden response has a 2xx status code
func (o *LoginUsingHEADForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login using h e a d forbidden response has a 3xx status code
func (o *LoginUsingHEADForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using h e a d forbidden response has a 4xx status code
func (o *LoginUsingHEADForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this login using h e a d forbidden response has a 5xx status code
func (o *LoginUsingHEADForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this login using h e a d forbidden response a status code equal to that given
func (o *LoginUsingHEADForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the login using h e a d forbidden response
func (o *LoginUsingHEADForbidden) Code() int {
	return 403
}

func (o *LoginUsingHEADForbidden) Error() string {
	return fmt.Sprintf("[HEAD /api/login][%d] loginUsingHEADForbidden", 403)
}

func (o *LoginUsingHEADForbidden) String() string {
	return fmt.Sprintf("[HEAD /api/login][%d] loginUsingHEADForbidden", 403)
}

func (o *LoginUsingHEADForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
