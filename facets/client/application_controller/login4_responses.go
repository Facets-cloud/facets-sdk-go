// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// Login4Reader is a Reader for the Login4 structure.
type Login4Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *Login4Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLogin4OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLogin4BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLogin4NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewLogin4MethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLogin4InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /api/login] login_4", response, response.Code())
	}
}

// NewLogin4OK creates a Login4OK with default headers values
func NewLogin4OK() *Login4OK {
	return &Login4OK{}
}

/*
Login4OK describes a response with status code 200, with default header values.

OK
*/
type Login4OK struct {
	Payload string
}

// IsSuccess returns true when this login4 o k response has a 2xx status code
func (o *Login4OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login4 o k response has a 3xx status code
func (o *Login4OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login4 o k response has a 4xx status code
func (o *Login4OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this login4 o k response has a 5xx status code
func (o *Login4OK) IsServerError() bool {
	return false
}

// IsCode returns true when this login4 o k response a status code equal to that given
func (o *Login4OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the login4 o k response
func (o *Login4OK) Code() int {
	return 200
}

func (o *Login4OK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /api/login][%d] login4OK %s", 200, payload)
}

func (o *Login4OK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /api/login][%d] login4OK %s", 200, payload)
}

func (o *Login4OK) GetPayload() string {
	return o.Payload
}

func (o *Login4OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogin4BadRequest creates a Login4BadRequest with default headers values
func NewLogin4BadRequest() *Login4BadRequest {
	return &Login4BadRequest{}
}

/*
Login4BadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type Login4BadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this login4 bad request response has a 2xx status code
func (o *Login4BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login4 bad request response has a 3xx status code
func (o *Login4BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login4 bad request response has a 4xx status code
func (o *Login4BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this login4 bad request response has a 5xx status code
func (o *Login4BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this login4 bad request response a status code equal to that given
func (o *Login4BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the login4 bad request response
func (o *Login4BadRequest) Code() int {
	return 400
}

func (o *Login4BadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /api/login][%d] login4BadRequest %s", 400, payload)
}

func (o *Login4BadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /api/login][%d] login4BadRequest %s", 400, payload)
}

func (o *Login4BadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *Login4BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogin4NotFound creates a Login4NotFound with default headers values
func NewLogin4NotFound() *Login4NotFound {
	return &Login4NotFound{}
}

/*
Login4NotFound describes a response with status code 404, with default header values.

Not Found
*/
type Login4NotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this login4 not found response has a 2xx status code
func (o *Login4NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login4 not found response has a 3xx status code
func (o *Login4NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login4 not found response has a 4xx status code
func (o *Login4NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this login4 not found response has a 5xx status code
func (o *Login4NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this login4 not found response a status code equal to that given
func (o *Login4NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the login4 not found response
func (o *Login4NotFound) Code() int {
	return 404
}

func (o *Login4NotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /api/login][%d] login4NotFound %s", 404, payload)
}

func (o *Login4NotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /api/login][%d] login4NotFound %s", 404, payload)
}

func (o *Login4NotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *Login4NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogin4MethodNotAllowed creates a Login4MethodNotAllowed with default headers values
func NewLogin4MethodNotAllowed() *Login4MethodNotAllowed {
	return &Login4MethodNotAllowed{}
}

/*
Login4MethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type Login4MethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this login4 method not allowed response has a 2xx status code
func (o *Login4MethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login4 method not allowed response has a 3xx status code
func (o *Login4MethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login4 method not allowed response has a 4xx status code
func (o *Login4MethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this login4 method not allowed response has a 5xx status code
func (o *Login4MethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this login4 method not allowed response a status code equal to that given
func (o *Login4MethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the login4 method not allowed response
func (o *Login4MethodNotAllowed) Code() int {
	return 405
}

func (o *Login4MethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /api/login][%d] login4MethodNotAllowed %s", 405, payload)
}

func (o *Login4MethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /api/login][%d] login4MethodNotAllowed %s", 405, payload)
}

func (o *Login4MethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *Login4MethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogin4InternalServerError creates a Login4InternalServerError with default headers values
func NewLogin4InternalServerError() *Login4InternalServerError {
	return &Login4InternalServerError{}
}

/*
Login4InternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type Login4InternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this login4 internal server error response has a 2xx status code
func (o *Login4InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login4 internal server error response has a 3xx status code
func (o *Login4InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login4 internal server error response has a 4xx status code
func (o *Login4InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this login4 internal server error response has a 5xx status code
func (o *Login4InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this login4 internal server error response a status code equal to that given
func (o *Login4InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the login4 internal server error response
func (o *Login4InternalServerError) Code() int {
	return 500
}

func (o *Login4InternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /api/login][%d] login4InternalServerError %s", 500, payload)
}

func (o *Login4InternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /api/login][%d] login4InternalServerError %s", 500, payload)
}

func (o *Login4InternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *Login4InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
