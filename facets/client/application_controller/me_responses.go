// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// MeReader is a Reader for the Me structure.
type MeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewMeMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/me] me", response, response.Code())
	}
}

// NewMeOK creates a MeOK with default headers values
func NewMeOK() *MeOK {
	return &MeOK{}
}

/*
MeOK describes a response with status code 200, with default header values.

OK
*/
type MeOK struct {
	Payload *models.SimpleOauth2User
}

// IsSuccess returns true when this me o k response has a 2xx status code
func (o *MeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this me o k response has a 3xx status code
func (o *MeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this me o k response has a 4xx status code
func (o *MeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this me o k response has a 5xx status code
func (o *MeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this me o k response a status code equal to that given
func (o *MeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the me o k response
func (o *MeOK) Code() int {
	return 200
}

func (o *MeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/me][%d] meOK %s", 200, payload)
}

func (o *MeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/me][%d] meOK %s", 200, payload)
}

func (o *MeOK) GetPayload() *models.SimpleOauth2User {
	return o.Payload
}

func (o *MeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SimpleOauth2User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMeBadRequest creates a MeBadRequest with default headers values
func NewMeBadRequest() *MeBadRequest {
	return &MeBadRequest{}
}

/*
MeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type MeBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this me bad request response has a 2xx status code
func (o *MeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this me bad request response has a 3xx status code
func (o *MeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this me bad request response has a 4xx status code
func (o *MeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this me bad request response has a 5xx status code
func (o *MeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this me bad request response a status code equal to that given
func (o *MeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the me bad request response
func (o *MeBadRequest) Code() int {
	return 400
}

func (o *MeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/me][%d] meBadRequest %s", 400, payload)
}

func (o *MeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/me][%d] meBadRequest %s", 400, payload)
}

func (o *MeBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMeNotFound creates a MeNotFound with default headers values
func NewMeNotFound() *MeNotFound {
	return &MeNotFound{}
}

/*
MeNotFound describes a response with status code 404, with default header values.

Not Found
*/
type MeNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this me not found response has a 2xx status code
func (o *MeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this me not found response has a 3xx status code
func (o *MeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this me not found response has a 4xx status code
func (o *MeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this me not found response has a 5xx status code
func (o *MeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this me not found response a status code equal to that given
func (o *MeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the me not found response
func (o *MeNotFound) Code() int {
	return 404
}

func (o *MeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/me][%d] meNotFound %s", 404, payload)
}

func (o *MeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/me][%d] meNotFound %s", 404, payload)
}

func (o *MeNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMeMethodNotAllowed creates a MeMethodNotAllowed with default headers values
func NewMeMethodNotAllowed() *MeMethodNotAllowed {
	return &MeMethodNotAllowed{}
}

/*
MeMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type MeMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this me method not allowed response has a 2xx status code
func (o *MeMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this me method not allowed response has a 3xx status code
func (o *MeMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this me method not allowed response has a 4xx status code
func (o *MeMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this me method not allowed response has a 5xx status code
func (o *MeMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this me method not allowed response a status code equal to that given
func (o *MeMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the me method not allowed response
func (o *MeMethodNotAllowed) Code() int {
	return 405
}

func (o *MeMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/me][%d] meMethodNotAllowed %s", 405, payload)
}

func (o *MeMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/me][%d] meMethodNotAllowed %s", 405, payload)
}

func (o *MeMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MeMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMeInternalServerError creates a MeInternalServerError with default headers values
func NewMeInternalServerError() *MeInternalServerError {
	return &MeInternalServerError{}
}

/*
MeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type MeInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this me internal server error response has a 2xx status code
func (o *MeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this me internal server error response has a 3xx status code
func (o *MeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this me internal server error response has a 4xx status code
func (o *MeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this me internal server error response has a 5xx status code
func (o *MeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this me internal server error response a status code equal to that given
func (o *MeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the me internal server error response
func (o *MeInternalServerError) Code() int {
	return 500
}

func (o *MeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/me][%d] meInternalServerError %s", 500, payload)
}

func (o *MeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/me][%d] meInternalServerError %s", 500, payload)
}

func (o *MeInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
