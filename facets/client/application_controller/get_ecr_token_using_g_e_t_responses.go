// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetEcrTokenUsingGETReader is a Reader for the GetEcrTokenUsingGET structure.
type GetEcrTokenUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEcrTokenUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEcrTokenUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetEcrTokenUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetEcrTokenUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetEcrTokenUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/getEcrLoginToken] getEcrTokenUsingGET", response, response.Code())
	}
}

// NewGetEcrTokenUsingGETOK creates a GetEcrTokenUsingGETOK with default headers values
func NewGetEcrTokenUsingGETOK() *GetEcrTokenUsingGETOK {
	return &GetEcrTokenUsingGETOK{}
}

/*
GetEcrTokenUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetEcrTokenUsingGETOK struct {
	Payload interface{}
}

// IsSuccess returns true when this get ecr token using g e t o k response has a 2xx status code
func (o *GetEcrTokenUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get ecr token using g e t o k response has a 3xx status code
func (o *GetEcrTokenUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ecr token using g e t o k response has a 4xx status code
func (o *GetEcrTokenUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get ecr token using g e t o k response has a 5xx status code
func (o *GetEcrTokenUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get ecr token using g e t o k response a status code equal to that given
func (o *GetEcrTokenUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get ecr token using g e t o k response
func (o *GetEcrTokenUsingGETOK) Code() int {
	return 200
}

func (o *GetEcrTokenUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/getEcrLoginToken][%d] getEcrTokenUsingGETOK %s", 200, payload)
}

func (o *GetEcrTokenUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/getEcrLoginToken][%d] getEcrTokenUsingGETOK %s", 200, payload)
}

func (o *GetEcrTokenUsingGETOK) GetPayload() interface{} {
	return o.Payload
}

func (o *GetEcrTokenUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEcrTokenUsingGETUnauthorized creates a GetEcrTokenUsingGETUnauthorized with default headers values
func NewGetEcrTokenUsingGETUnauthorized() *GetEcrTokenUsingGETUnauthorized {
	return &GetEcrTokenUsingGETUnauthorized{}
}

/*
GetEcrTokenUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetEcrTokenUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get ecr token using g e t unauthorized response has a 2xx status code
func (o *GetEcrTokenUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get ecr token using g e t unauthorized response has a 3xx status code
func (o *GetEcrTokenUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ecr token using g e t unauthorized response has a 4xx status code
func (o *GetEcrTokenUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get ecr token using g e t unauthorized response has a 5xx status code
func (o *GetEcrTokenUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get ecr token using g e t unauthorized response a status code equal to that given
func (o *GetEcrTokenUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get ecr token using g e t unauthorized response
func (o *GetEcrTokenUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetEcrTokenUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/getEcrLoginToken][%d] getEcrTokenUsingGETUnauthorized", 401)
}

func (o *GetEcrTokenUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/getEcrLoginToken][%d] getEcrTokenUsingGETUnauthorized", 401)
}

func (o *GetEcrTokenUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEcrTokenUsingGETForbidden creates a GetEcrTokenUsingGETForbidden with default headers values
func NewGetEcrTokenUsingGETForbidden() *GetEcrTokenUsingGETForbidden {
	return &GetEcrTokenUsingGETForbidden{}
}

/*
GetEcrTokenUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetEcrTokenUsingGETForbidden struct {
}

// IsSuccess returns true when this get ecr token using g e t forbidden response has a 2xx status code
func (o *GetEcrTokenUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get ecr token using g e t forbidden response has a 3xx status code
func (o *GetEcrTokenUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ecr token using g e t forbidden response has a 4xx status code
func (o *GetEcrTokenUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get ecr token using g e t forbidden response has a 5xx status code
func (o *GetEcrTokenUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get ecr token using g e t forbidden response a status code equal to that given
func (o *GetEcrTokenUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get ecr token using g e t forbidden response
func (o *GetEcrTokenUsingGETForbidden) Code() int {
	return 403
}

func (o *GetEcrTokenUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /api/getEcrLoginToken][%d] getEcrTokenUsingGETForbidden", 403)
}

func (o *GetEcrTokenUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /api/getEcrLoginToken][%d] getEcrTokenUsingGETForbidden", 403)
}

func (o *GetEcrTokenUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEcrTokenUsingGETNotFound creates a GetEcrTokenUsingGETNotFound with default headers values
func NewGetEcrTokenUsingGETNotFound() *GetEcrTokenUsingGETNotFound {
	return &GetEcrTokenUsingGETNotFound{}
}

/*
GetEcrTokenUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetEcrTokenUsingGETNotFound struct {
}

// IsSuccess returns true when this get ecr token using g e t not found response has a 2xx status code
func (o *GetEcrTokenUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get ecr token using g e t not found response has a 3xx status code
func (o *GetEcrTokenUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ecr token using g e t not found response has a 4xx status code
func (o *GetEcrTokenUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get ecr token using g e t not found response has a 5xx status code
func (o *GetEcrTokenUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get ecr token using g e t not found response a status code equal to that given
func (o *GetEcrTokenUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get ecr token using g e t not found response
func (o *GetEcrTokenUsingGETNotFound) Code() int {
	return 404
}

func (o *GetEcrTokenUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /api/getEcrLoginToken][%d] getEcrTokenUsingGETNotFound", 404)
}

func (o *GetEcrTokenUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /api/getEcrLoginToken][%d] getEcrTokenUsingGETNotFound", 404)
}

func (o *GetEcrTokenUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
