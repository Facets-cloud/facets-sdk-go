// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// LoginUsingPUTReader is a Reader for the LoginUsingPUT structure.
type LoginUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoginUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewLoginUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewLoginUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLoginUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLoginUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/login] loginUsingPUT", response, response.Code())
	}
}

// NewLoginUsingPUTOK creates a LoginUsingPUTOK with default headers values
func NewLoginUsingPUTOK() *LoginUsingPUTOK {
	return &LoginUsingPUTOK{}
}

/*
LoginUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type LoginUsingPUTOK struct {
	Payload string
}

// IsSuccess returns true when this login using p u t o k response has a 2xx status code
func (o *LoginUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login using p u t o k response has a 3xx status code
func (o *LoginUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using p u t o k response has a 4xx status code
func (o *LoginUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this login using p u t o k response has a 5xx status code
func (o *LoginUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this login using p u t o k response a status code equal to that given
func (o *LoginUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the login using p u t o k response
func (o *LoginUsingPUTOK) Code() int {
	return 200
}

func (o *LoginUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/login][%d] loginUsingPUTOK %s", 200, payload)
}

func (o *LoginUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/login][%d] loginUsingPUTOK %s", 200, payload)
}

func (o *LoginUsingPUTOK) GetPayload() string {
	return o.Payload
}

func (o *LoginUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUsingPUTCreated creates a LoginUsingPUTCreated with default headers values
func NewLoginUsingPUTCreated() *LoginUsingPUTCreated {
	return &LoginUsingPUTCreated{}
}

/*
LoginUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type LoginUsingPUTCreated struct {
}

// IsSuccess returns true when this login using p u t created response has a 2xx status code
func (o *LoginUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login using p u t created response has a 3xx status code
func (o *LoginUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using p u t created response has a 4xx status code
func (o *LoginUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this login using p u t created response has a 5xx status code
func (o *LoginUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this login using p u t created response a status code equal to that given
func (o *LoginUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the login using p u t created response
func (o *LoginUsingPUTCreated) Code() int {
	return 201
}

func (o *LoginUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /api/login][%d] loginUsingPUTCreated", 201)
}

func (o *LoginUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /api/login][%d] loginUsingPUTCreated", 201)
}

func (o *LoginUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLoginUsingPUTUnauthorized creates a LoginUsingPUTUnauthorized with default headers values
func NewLoginUsingPUTUnauthorized() *LoginUsingPUTUnauthorized {
	return &LoginUsingPUTUnauthorized{}
}

/*
LoginUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type LoginUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this login using p u t unauthorized response has a 2xx status code
func (o *LoginUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login using p u t unauthorized response has a 3xx status code
func (o *LoginUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using p u t unauthorized response has a 4xx status code
func (o *LoginUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this login using p u t unauthorized response has a 5xx status code
func (o *LoginUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this login using p u t unauthorized response a status code equal to that given
func (o *LoginUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the login using p u t unauthorized response
func (o *LoginUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *LoginUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/login][%d] loginUsingPUTUnauthorized", 401)
}

func (o *LoginUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/login][%d] loginUsingPUTUnauthorized", 401)
}

func (o *LoginUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLoginUsingPUTForbidden creates a LoginUsingPUTForbidden with default headers values
func NewLoginUsingPUTForbidden() *LoginUsingPUTForbidden {
	return &LoginUsingPUTForbidden{}
}

/*
LoginUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type LoginUsingPUTForbidden struct {
}

// IsSuccess returns true when this login using p u t forbidden response has a 2xx status code
func (o *LoginUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login using p u t forbidden response has a 3xx status code
func (o *LoginUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using p u t forbidden response has a 4xx status code
func (o *LoginUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this login using p u t forbidden response has a 5xx status code
func (o *LoginUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this login using p u t forbidden response a status code equal to that given
func (o *LoginUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the login using p u t forbidden response
func (o *LoginUsingPUTForbidden) Code() int {
	return 403
}

func (o *LoginUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/login][%d] loginUsingPUTForbidden", 403)
}

func (o *LoginUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /api/login][%d] loginUsingPUTForbidden", 403)
}

func (o *LoginUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLoginUsingPUTNotFound creates a LoginUsingPUTNotFound with default headers values
func NewLoginUsingPUTNotFound() *LoginUsingPUTNotFound {
	return &LoginUsingPUTNotFound{}
}

/*
LoginUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type LoginUsingPUTNotFound struct {
}

// IsSuccess returns true when this login using p u t not found response has a 2xx status code
func (o *LoginUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login using p u t not found response has a 3xx status code
func (o *LoginUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using p u t not found response has a 4xx status code
func (o *LoginUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this login using p u t not found response has a 5xx status code
func (o *LoginUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this login using p u t not found response a status code equal to that given
func (o *LoginUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the login using p u t not found response
func (o *LoginUsingPUTNotFound) Code() int {
	return 404
}

func (o *LoginUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/login][%d] loginUsingPUTNotFound", 404)
}

func (o *LoginUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /api/login][%d] loginUsingPUTNotFound", 404)
}

func (o *LoginUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
