// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// LoginUsingOPTIONSReader is a Reader for the LoginUsingOPTIONS structure.
type LoginUsingOPTIONSReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginUsingOPTIONSReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoginUsingOPTIONSOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewLoginUsingOPTIONSNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewLoginUsingOPTIONSUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLoginUsingOPTIONSForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[OPTIONS /api/login] loginUsingOPTIONS", response, response.Code())
	}
}

// NewLoginUsingOPTIONSOK creates a LoginUsingOPTIONSOK with default headers values
func NewLoginUsingOPTIONSOK() *LoginUsingOPTIONSOK {
	return &LoginUsingOPTIONSOK{}
}

/*
LoginUsingOPTIONSOK describes a response with status code 200, with default header values.

OK
*/
type LoginUsingOPTIONSOK struct {
	Payload string
}

// IsSuccess returns true when this login using o p t i o n s o k response has a 2xx status code
func (o *LoginUsingOPTIONSOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login using o p t i o n s o k response has a 3xx status code
func (o *LoginUsingOPTIONSOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using o p t i o n s o k response has a 4xx status code
func (o *LoginUsingOPTIONSOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this login using o p t i o n s o k response has a 5xx status code
func (o *LoginUsingOPTIONSOK) IsServerError() bool {
	return false
}

// IsCode returns true when this login using o p t i o n s o k response a status code equal to that given
func (o *LoginUsingOPTIONSOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the login using o p t i o n s o k response
func (o *LoginUsingOPTIONSOK) Code() int {
	return 200
}

func (o *LoginUsingOPTIONSOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[OPTIONS /api/login][%d] loginUsingOPTIONSOK %s", 200, payload)
}

func (o *LoginUsingOPTIONSOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[OPTIONS /api/login][%d] loginUsingOPTIONSOK %s", 200, payload)
}

func (o *LoginUsingOPTIONSOK) GetPayload() string {
	return o.Payload
}

func (o *LoginUsingOPTIONSOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUsingOPTIONSNoContent creates a LoginUsingOPTIONSNoContent with default headers values
func NewLoginUsingOPTIONSNoContent() *LoginUsingOPTIONSNoContent {
	return &LoginUsingOPTIONSNoContent{}
}

/*
LoginUsingOPTIONSNoContent describes a response with status code 204, with default header values.

No Content
*/
type LoginUsingOPTIONSNoContent struct {
}

// IsSuccess returns true when this login using o p t i o n s no content response has a 2xx status code
func (o *LoginUsingOPTIONSNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login using o p t i o n s no content response has a 3xx status code
func (o *LoginUsingOPTIONSNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using o p t i o n s no content response has a 4xx status code
func (o *LoginUsingOPTIONSNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this login using o p t i o n s no content response has a 5xx status code
func (o *LoginUsingOPTIONSNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this login using o p t i o n s no content response a status code equal to that given
func (o *LoginUsingOPTIONSNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the login using o p t i o n s no content response
func (o *LoginUsingOPTIONSNoContent) Code() int {
	return 204
}

func (o *LoginUsingOPTIONSNoContent) Error() string {
	return fmt.Sprintf("[OPTIONS /api/login][%d] loginUsingOPTIONSNoContent", 204)
}

func (o *LoginUsingOPTIONSNoContent) String() string {
	return fmt.Sprintf("[OPTIONS /api/login][%d] loginUsingOPTIONSNoContent", 204)
}

func (o *LoginUsingOPTIONSNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLoginUsingOPTIONSUnauthorized creates a LoginUsingOPTIONSUnauthorized with default headers values
func NewLoginUsingOPTIONSUnauthorized() *LoginUsingOPTIONSUnauthorized {
	return &LoginUsingOPTIONSUnauthorized{}
}

/*
LoginUsingOPTIONSUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type LoginUsingOPTIONSUnauthorized struct {
}

// IsSuccess returns true when this login using o p t i o n s unauthorized response has a 2xx status code
func (o *LoginUsingOPTIONSUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login using o p t i o n s unauthorized response has a 3xx status code
func (o *LoginUsingOPTIONSUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using o p t i o n s unauthorized response has a 4xx status code
func (o *LoginUsingOPTIONSUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this login using o p t i o n s unauthorized response has a 5xx status code
func (o *LoginUsingOPTIONSUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this login using o p t i o n s unauthorized response a status code equal to that given
func (o *LoginUsingOPTIONSUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the login using o p t i o n s unauthorized response
func (o *LoginUsingOPTIONSUnauthorized) Code() int {
	return 401
}

func (o *LoginUsingOPTIONSUnauthorized) Error() string {
	return fmt.Sprintf("[OPTIONS /api/login][%d] loginUsingOPTIONSUnauthorized", 401)
}

func (o *LoginUsingOPTIONSUnauthorized) String() string {
	return fmt.Sprintf("[OPTIONS /api/login][%d] loginUsingOPTIONSUnauthorized", 401)
}

func (o *LoginUsingOPTIONSUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLoginUsingOPTIONSForbidden creates a LoginUsingOPTIONSForbidden with default headers values
func NewLoginUsingOPTIONSForbidden() *LoginUsingOPTIONSForbidden {
	return &LoginUsingOPTIONSForbidden{}
}

/*
LoginUsingOPTIONSForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type LoginUsingOPTIONSForbidden struct {
}

// IsSuccess returns true when this login using o p t i o n s forbidden response has a 2xx status code
func (o *LoginUsingOPTIONSForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login using o p t i o n s forbidden response has a 3xx status code
func (o *LoginUsingOPTIONSForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login using o p t i o n s forbidden response has a 4xx status code
func (o *LoginUsingOPTIONSForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this login using o p t i o n s forbidden response has a 5xx status code
func (o *LoginUsingOPTIONSForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this login using o p t i o n s forbidden response a status code equal to that given
func (o *LoginUsingOPTIONSForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the login using o p t i o n s forbidden response
func (o *LoginUsingOPTIONSForbidden) Code() int {
	return 403
}

func (o *LoginUsingOPTIONSForbidden) Error() string {
	return fmt.Sprintf("[OPTIONS /api/login][%d] loginUsingOPTIONSForbidden", 403)
}

func (o *LoginUsingOPTIONSForbidden) String() string {
	return fmt.Sprintf("[OPTIONS /api/login][%d] loginUsingOPTIONSForbidden", 403)
}

func (o *LoginUsingOPTIONSForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
