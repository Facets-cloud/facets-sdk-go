// Code generated by go-swagger; DO NOT EDIT.

package ui_promotion_workflow_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui promotion workflow controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui promotion workflow controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui promotion workflow controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui promotion workflow controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateWorkflowUsingPOST(params *CreateWorkflowUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateWorkflowUsingPOSTOK, *CreateWorkflowUsingPOSTCreated, error)

	DeleteWorkflowUsingDELETE(params *DeleteWorkflowUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWorkflowUsingDELETEOK, *DeleteWorkflowUsingDELETENoContent, error)

	GetAllWorkflowsUsingGET(params *GetAllWorkflowsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllWorkflowsUsingGETOK, error)

	GetDefaultWorkflowUsingGET(params *GetDefaultWorkflowUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDefaultWorkflowUsingGETOK, error)

	GetRegistrationSpecificWorkflowsUsingGET(params *GetRegistrationSpecificWorkflowsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRegistrationSpecificWorkflowsUsingGETOK, error)

	GetWorkflowUsingGET(params *GetWorkflowUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowUsingGETOK, error)

	GetWorkflowsByStackUsingGET(params *GetWorkflowsByStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowsByStackUsingGETOK, error)

	UpdateWorkflowUsingPUT(params *UpdateWorkflowUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWorkflowUsingPUTOK, *UpdateWorkflowUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateWorkflowUsingPOST creates workflow
*/
func (a *Client) CreateWorkflowUsingPOST(params *CreateWorkflowUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateWorkflowUsingPOSTOK, *CreateWorkflowUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWorkflowUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createWorkflowUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/workflow",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateWorkflowUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateWorkflowUsingPOSTOK:
		return value, nil, nil
	case *CreateWorkflowUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_promotion_workflow_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteWorkflowUsingDELETE deletes workflow
*/
func (a *Client) DeleteWorkflowUsingDELETE(params *DeleteWorkflowUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWorkflowUsingDELETEOK, *DeleteWorkflowUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkflowUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteWorkflowUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/workflow/{workflowId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteWorkflowUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteWorkflowUsingDELETEOK:
		return value, nil, nil
	case *DeleteWorkflowUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_promotion_workflow_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllWorkflowsUsingGET gets all workflows
*/
func (a *Client) GetAllWorkflowsUsingGET(params *GetAllWorkflowsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllWorkflowsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllWorkflowsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllWorkflowsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/workflow",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllWorkflowsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllWorkflowsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllWorkflowsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDefaultWorkflowUsingGET gets default workflow
*/
func (a *Client) GetDefaultWorkflowUsingGET(params *GetDefaultWorkflowUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDefaultWorkflowUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDefaultWorkflowUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDefaultWorkflowUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/workflow/default-workflow/registration-type/{registrationType}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDefaultWorkflowUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDefaultWorkflowUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDefaultWorkflowUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRegistrationSpecificWorkflowsUsingGET gets registration specific workflows
*/
func (a *Client) GetRegistrationSpecificWorkflowsUsingGET(params *GetRegistrationSpecificWorkflowsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRegistrationSpecificWorkflowsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegistrationSpecificWorkflowsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRegistrationSpecificWorkflowsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/workflow/registration-specific",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRegistrationSpecificWorkflowsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRegistrationSpecificWorkflowsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRegistrationSpecificWorkflowsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflowUsingGET gets workflow
*/
func (a *Client) GetWorkflowUsingGET(params *GetWorkflowUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/workflow/{workflowId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflowsByStackUsingGET gets workflows by stack
*/
func (a *Client) GetWorkflowsByStackUsingGET(params *GetWorkflowsByStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowsByStackUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowsByStackUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowsByStackUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/workflow/blueprint/{stackName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowsByStackUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowsByStackUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowsByStackUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateWorkflowUsingPUT updates workflow
*/
func (a *Client) UpdateWorkflowUsingPUT(params *UpdateWorkflowUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWorkflowUsingPUTOK, *UpdateWorkflowUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWorkflowUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateWorkflowUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/workflow/{workflowId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateWorkflowUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateWorkflowUsingPUTOK:
		return value, nil, nil
	case *UpdateWorkflowUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_promotion_workflow_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
