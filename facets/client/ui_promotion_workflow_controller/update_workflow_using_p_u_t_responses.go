// Code generated by go-swagger; DO NOT EDIT.

package ui_promotion_workflow_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateWorkflowUsingPUTReader is a Reader for the UpdateWorkflowUsingPUT structure.
type UpdateWorkflowUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateWorkflowUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateWorkflowUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateWorkflowUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateWorkflowUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateWorkflowUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateWorkflowUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/workflow/{workflowId}] updateWorkflowUsingPUT", response, response.Code())
	}
}

// NewUpdateWorkflowUsingPUTOK creates a UpdateWorkflowUsingPUTOK with default headers values
func NewUpdateWorkflowUsingPUTOK() *UpdateWorkflowUsingPUTOK {
	return &UpdateWorkflowUsingPUTOK{}
}

/*
UpdateWorkflowUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateWorkflowUsingPUTOK struct {
	Payload *models.PromotionWorkflow
}

// IsSuccess returns true when this update workflow using p u t o k response has a 2xx status code
func (o *UpdateWorkflowUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update workflow using p u t o k response has a 3xx status code
func (o *UpdateWorkflowUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update workflow using p u t o k response has a 4xx status code
func (o *UpdateWorkflowUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update workflow using p u t o k response has a 5xx status code
func (o *UpdateWorkflowUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update workflow using p u t o k response a status code equal to that given
func (o *UpdateWorkflowUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update workflow using p u t o k response
func (o *UpdateWorkflowUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateWorkflowUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/workflow/{workflowId}][%d] updateWorkflowUsingPUTOK %s", 200, payload)
}

func (o *UpdateWorkflowUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/workflow/{workflowId}][%d] updateWorkflowUsingPUTOK %s", 200, payload)
}

func (o *UpdateWorkflowUsingPUTOK) GetPayload() *models.PromotionWorkflow {
	return o.Payload
}

func (o *UpdateWorkflowUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PromotionWorkflow)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWorkflowUsingPUTCreated creates a UpdateWorkflowUsingPUTCreated with default headers values
func NewUpdateWorkflowUsingPUTCreated() *UpdateWorkflowUsingPUTCreated {
	return &UpdateWorkflowUsingPUTCreated{}
}

/*
UpdateWorkflowUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateWorkflowUsingPUTCreated struct {
}

// IsSuccess returns true when this update workflow using p u t created response has a 2xx status code
func (o *UpdateWorkflowUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update workflow using p u t created response has a 3xx status code
func (o *UpdateWorkflowUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update workflow using p u t created response has a 4xx status code
func (o *UpdateWorkflowUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update workflow using p u t created response has a 5xx status code
func (o *UpdateWorkflowUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update workflow using p u t created response a status code equal to that given
func (o *UpdateWorkflowUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update workflow using p u t created response
func (o *UpdateWorkflowUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateWorkflowUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/workflow/{workflowId}][%d] updateWorkflowUsingPUTCreated", 201)
}

func (o *UpdateWorkflowUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/workflow/{workflowId}][%d] updateWorkflowUsingPUTCreated", 201)
}

func (o *UpdateWorkflowUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateWorkflowUsingPUTUnauthorized creates a UpdateWorkflowUsingPUTUnauthorized with default headers values
func NewUpdateWorkflowUsingPUTUnauthorized() *UpdateWorkflowUsingPUTUnauthorized {
	return &UpdateWorkflowUsingPUTUnauthorized{}
}

/*
UpdateWorkflowUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateWorkflowUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update workflow using p u t unauthorized response has a 2xx status code
func (o *UpdateWorkflowUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update workflow using p u t unauthorized response has a 3xx status code
func (o *UpdateWorkflowUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update workflow using p u t unauthorized response has a 4xx status code
func (o *UpdateWorkflowUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update workflow using p u t unauthorized response has a 5xx status code
func (o *UpdateWorkflowUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update workflow using p u t unauthorized response a status code equal to that given
func (o *UpdateWorkflowUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update workflow using p u t unauthorized response
func (o *UpdateWorkflowUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateWorkflowUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/workflow/{workflowId}][%d] updateWorkflowUsingPUTUnauthorized", 401)
}

func (o *UpdateWorkflowUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/workflow/{workflowId}][%d] updateWorkflowUsingPUTUnauthorized", 401)
}

func (o *UpdateWorkflowUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateWorkflowUsingPUTForbidden creates a UpdateWorkflowUsingPUTForbidden with default headers values
func NewUpdateWorkflowUsingPUTForbidden() *UpdateWorkflowUsingPUTForbidden {
	return &UpdateWorkflowUsingPUTForbidden{}
}

/*
UpdateWorkflowUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateWorkflowUsingPUTForbidden struct {
}

// IsSuccess returns true when this update workflow using p u t forbidden response has a 2xx status code
func (o *UpdateWorkflowUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update workflow using p u t forbidden response has a 3xx status code
func (o *UpdateWorkflowUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update workflow using p u t forbidden response has a 4xx status code
func (o *UpdateWorkflowUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update workflow using p u t forbidden response has a 5xx status code
func (o *UpdateWorkflowUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update workflow using p u t forbidden response a status code equal to that given
func (o *UpdateWorkflowUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update workflow using p u t forbidden response
func (o *UpdateWorkflowUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateWorkflowUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/workflow/{workflowId}][%d] updateWorkflowUsingPUTForbidden", 403)
}

func (o *UpdateWorkflowUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/workflow/{workflowId}][%d] updateWorkflowUsingPUTForbidden", 403)
}

func (o *UpdateWorkflowUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateWorkflowUsingPUTNotFound creates a UpdateWorkflowUsingPUTNotFound with default headers values
func NewUpdateWorkflowUsingPUTNotFound() *UpdateWorkflowUsingPUTNotFound {
	return &UpdateWorkflowUsingPUTNotFound{}
}

/*
UpdateWorkflowUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateWorkflowUsingPUTNotFound struct {
}

// IsSuccess returns true when this update workflow using p u t not found response has a 2xx status code
func (o *UpdateWorkflowUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update workflow using p u t not found response has a 3xx status code
func (o *UpdateWorkflowUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update workflow using p u t not found response has a 4xx status code
func (o *UpdateWorkflowUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update workflow using p u t not found response has a 5xx status code
func (o *UpdateWorkflowUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update workflow using p u t not found response a status code equal to that given
func (o *UpdateWorkflowUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update workflow using p u t not found response
func (o *UpdateWorkflowUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateWorkflowUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/workflow/{workflowId}][%d] updateWorkflowUsingPUTNotFound", 404)
}

func (o *UpdateWorkflowUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/workflow/{workflowId}][%d] updateWorkflowUsingPUTNotFound", 404)
}

func (o *UpdateWorkflowUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
