// Code generated by go-swagger; DO NOT EDIT.

package ui_promotion_workflow_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRegistrationSpecificWorkflowsParams creates a new GetRegistrationSpecificWorkflowsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRegistrationSpecificWorkflowsParams() *GetRegistrationSpecificWorkflowsParams {
	return &GetRegistrationSpecificWorkflowsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRegistrationSpecificWorkflowsParamsWithTimeout creates a new GetRegistrationSpecificWorkflowsParams object
// with the ability to set a timeout on a request.
func NewGetRegistrationSpecificWorkflowsParamsWithTimeout(timeout time.Duration) *GetRegistrationSpecificWorkflowsParams {
	return &GetRegistrationSpecificWorkflowsParams{
		timeout: timeout,
	}
}

// NewGetRegistrationSpecificWorkflowsParamsWithContext creates a new GetRegistrationSpecificWorkflowsParams object
// with the ability to set a context for a request.
func NewGetRegistrationSpecificWorkflowsParamsWithContext(ctx context.Context) *GetRegistrationSpecificWorkflowsParams {
	return &GetRegistrationSpecificWorkflowsParams{
		Context: ctx,
	}
}

// NewGetRegistrationSpecificWorkflowsParamsWithHTTPClient creates a new GetRegistrationSpecificWorkflowsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRegistrationSpecificWorkflowsParamsWithHTTPClient(client *http.Client) *GetRegistrationSpecificWorkflowsParams {
	return &GetRegistrationSpecificWorkflowsParams{
		HTTPClient: client,
	}
}

/*
GetRegistrationSpecificWorkflowsParams contains all the parameters to send to the API endpoint

	for the get registration specific workflows operation.

	Typically these are written to a http.Request.
*/
type GetRegistrationSpecificWorkflowsParams struct {

	// RegistrationType.
	RegistrationType string

	// StackName.
	StackName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get registration specific workflows params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRegistrationSpecificWorkflowsParams) WithDefaults() *GetRegistrationSpecificWorkflowsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get registration specific workflows params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRegistrationSpecificWorkflowsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get registration specific workflows params
func (o *GetRegistrationSpecificWorkflowsParams) WithTimeout(timeout time.Duration) *GetRegistrationSpecificWorkflowsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get registration specific workflows params
func (o *GetRegistrationSpecificWorkflowsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get registration specific workflows params
func (o *GetRegistrationSpecificWorkflowsParams) WithContext(ctx context.Context) *GetRegistrationSpecificWorkflowsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get registration specific workflows params
func (o *GetRegistrationSpecificWorkflowsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get registration specific workflows params
func (o *GetRegistrationSpecificWorkflowsParams) WithHTTPClient(client *http.Client) *GetRegistrationSpecificWorkflowsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get registration specific workflows params
func (o *GetRegistrationSpecificWorkflowsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRegistrationType adds the registrationType to the get registration specific workflows params
func (o *GetRegistrationSpecificWorkflowsParams) WithRegistrationType(registrationType string) *GetRegistrationSpecificWorkflowsParams {
	o.SetRegistrationType(registrationType)
	return o
}

// SetRegistrationType adds the registrationType to the get registration specific workflows params
func (o *GetRegistrationSpecificWorkflowsParams) SetRegistrationType(registrationType string) {
	o.RegistrationType = registrationType
}

// WithStackName adds the stackName to the get registration specific workflows params
func (o *GetRegistrationSpecificWorkflowsParams) WithStackName(stackName *string) *GetRegistrationSpecificWorkflowsParams {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the get registration specific workflows params
func (o *GetRegistrationSpecificWorkflowsParams) SetStackName(stackName *string) {
	o.StackName = stackName
}

// WriteToRequest writes these params to a swagger request
func (o *GetRegistrationSpecificWorkflowsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param registrationType
	qrRegistrationType := o.RegistrationType
	qRegistrationType := qrRegistrationType
	if qRegistrationType != "" {

		if err := r.SetQueryParam("registrationType", qRegistrationType); err != nil {
			return err
		}
	}

	if o.StackName != nil {

		// query param stackName
		var qrStackName string

		if o.StackName != nil {
			qrStackName = *o.StackName
		}
		qStackName := qrStackName
		if qStackName != "" {

			if err := r.SetQueryParam("stackName", qStackName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
