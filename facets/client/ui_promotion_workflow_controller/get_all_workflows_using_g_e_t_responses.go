// Code generated by go-swagger; DO NOT EDIT.

package ui_promotion_workflow_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllWorkflowsUsingGETReader is a Reader for the GetAllWorkflowsUsingGET structure.
type GetAllWorkflowsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllWorkflowsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllWorkflowsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllWorkflowsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllWorkflowsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllWorkflowsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/workflow] getAllWorkflowsUsingGET", response, response.Code())
	}
}

// NewGetAllWorkflowsUsingGETOK creates a GetAllWorkflowsUsingGETOK with default headers values
func NewGetAllWorkflowsUsingGETOK() *GetAllWorkflowsUsingGETOK {
	return &GetAllWorkflowsUsingGETOK{}
}

/*
GetAllWorkflowsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllWorkflowsUsingGETOK struct {
	Payload []*models.PromotionWorkflow
}

// IsSuccess returns true when this get all workflows using g e t o k response has a 2xx status code
func (o *GetAllWorkflowsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all workflows using g e t o k response has a 3xx status code
func (o *GetAllWorkflowsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all workflows using g e t o k response has a 4xx status code
func (o *GetAllWorkflowsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all workflows using g e t o k response has a 5xx status code
func (o *GetAllWorkflowsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all workflows using g e t o k response a status code equal to that given
func (o *GetAllWorkflowsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all workflows using g e t o k response
func (o *GetAllWorkflowsUsingGETOK) Code() int {
	return 200
}

func (o *GetAllWorkflowsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/workflow][%d] getAllWorkflowsUsingGETOK %s", 200, payload)
}

func (o *GetAllWorkflowsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/workflow][%d] getAllWorkflowsUsingGETOK %s", 200, payload)
}

func (o *GetAllWorkflowsUsingGETOK) GetPayload() []*models.PromotionWorkflow {
	return o.Payload
}

func (o *GetAllWorkflowsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllWorkflowsUsingGETUnauthorized creates a GetAllWorkflowsUsingGETUnauthorized with default headers values
func NewGetAllWorkflowsUsingGETUnauthorized() *GetAllWorkflowsUsingGETUnauthorized {
	return &GetAllWorkflowsUsingGETUnauthorized{}
}

/*
GetAllWorkflowsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllWorkflowsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all workflows using g e t unauthorized response has a 2xx status code
func (o *GetAllWorkflowsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all workflows using g e t unauthorized response has a 3xx status code
func (o *GetAllWorkflowsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all workflows using g e t unauthorized response has a 4xx status code
func (o *GetAllWorkflowsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all workflows using g e t unauthorized response has a 5xx status code
func (o *GetAllWorkflowsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all workflows using g e t unauthorized response a status code equal to that given
func (o *GetAllWorkflowsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all workflows using g e t unauthorized response
func (o *GetAllWorkflowsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllWorkflowsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow][%d] getAllWorkflowsUsingGETUnauthorized", 401)
}

func (o *GetAllWorkflowsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow][%d] getAllWorkflowsUsingGETUnauthorized", 401)
}

func (o *GetAllWorkflowsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllWorkflowsUsingGETForbidden creates a GetAllWorkflowsUsingGETForbidden with default headers values
func NewGetAllWorkflowsUsingGETForbidden() *GetAllWorkflowsUsingGETForbidden {
	return &GetAllWorkflowsUsingGETForbidden{}
}

/*
GetAllWorkflowsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllWorkflowsUsingGETForbidden struct {
}

// IsSuccess returns true when this get all workflows using g e t forbidden response has a 2xx status code
func (o *GetAllWorkflowsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all workflows using g e t forbidden response has a 3xx status code
func (o *GetAllWorkflowsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all workflows using g e t forbidden response has a 4xx status code
func (o *GetAllWorkflowsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all workflows using g e t forbidden response has a 5xx status code
func (o *GetAllWorkflowsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all workflows using g e t forbidden response a status code equal to that given
func (o *GetAllWorkflowsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all workflows using g e t forbidden response
func (o *GetAllWorkflowsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllWorkflowsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow][%d] getAllWorkflowsUsingGETForbidden", 403)
}

func (o *GetAllWorkflowsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow][%d] getAllWorkflowsUsingGETForbidden", 403)
}

func (o *GetAllWorkflowsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllWorkflowsUsingGETNotFound creates a GetAllWorkflowsUsingGETNotFound with default headers values
func NewGetAllWorkflowsUsingGETNotFound() *GetAllWorkflowsUsingGETNotFound {
	return &GetAllWorkflowsUsingGETNotFound{}
}

/*
GetAllWorkflowsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllWorkflowsUsingGETNotFound struct {
}

// IsSuccess returns true when this get all workflows using g e t not found response has a 2xx status code
func (o *GetAllWorkflowsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all workflows using g e t not found response has a 3xx status code
func (o *GetAllWorkflowsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all workflows using g e t not found response has a 4xx status code
func (o *GetAllWorkflowsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all workflows using g e t not found response has a 5xx status code
func (o *GetAllWorkflowsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all workflows using g e t not found response a status code equal to that given
func (o *GetAllWorkflowsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all workflows using g e t not found response
func (o *GetAllWorkflowsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllWorkflowsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow][%d] getAllWorkflowsUsingGETNotFound", 404)
}

func (o *GetAllWorkflowsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow][%d] getAllWorkflowsUsingGETNotFound", 404)
}

func (o *GetAllWorkflowsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
