// Code generated by go-swagger; DO NOT EDIT.

package ui_promotion_workflow_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRegistrationSpecificWorkflowsUsingGETParams creates a new GetRegistrationSpecificWorkflowsUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRegistrationSpecificWorkflowsUsingGETParams() *GetRegistrationSpecificWorkflowsUsingGETParams {
	return &GetRegistrationSpecificWorkflowsUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRegistrationSpecificWorkflowsUsingGETParamsWithTimeout creates a new GetRegistrationSpecificWorkflowsUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetRegistrationSpecificWorkflowsUsingGETParamsWithTimeout(timeout time.Duration) *GetRegistrationSpecificWorkflowsUsingGETParams {
	return &GetRegistrationSpecificWorkflowsUsingGETParams{
		timeout: timeout,
	}
}

// NewGetRegistrationSpecificWorkflowsUsingGETParamsWithContext creates a new GetRegistrationSpecificWorkflowsUsingGETParams object
// with the ability to set a context for a request.
func NewGetRegistrationSpecificWorkflowsUsingGETParamsWithContext(ctx context.Context) *GetRegistrationSpecificWorkflowsUsingGETParams {
	return &GetRegistrationSpecificWorkflowsUsingGETParams{
		Context: ctx,
	}
}

// NewGetRegistrationSpecificWorkflowsUsingGETParamsWithHTTPClient creates a new GetRegistrationSpecificWorkflowsUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRegistrationSpecificWorkflowsUsingGETParamsWithHTTPClient(client *http.Client) *GetRegistrationSpecificWorkflowsUsingGETParams {
	return &GetRegistrationSpecificWorkflowsUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetRegistrationSpecificWorkflowsUsingGETParams contains all the parameters to send to the API endpoint

	for the get registration specific workflows using g e t operation.

	Typically these are written to a http.Request.
*/
type GetRegistrationSpecificWorkflowsUsingGETParams struct {

	/* RegistrationType.

	   registrationType
	*/
	RegistrationType string

	/* StackName.

	   stackName
	*/
	StackName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get registration specific workflows using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRegistrationSpecificWorkflowsUsingGETParams) WithDefaults() *GetRegistrationSpecificWorkflowsUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get registration specific workflows using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRegistrationSpecificWorkflowsUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get registration specific workflows using g e t params
func (o *GetRegistrationSpecificWorkflowsUsingGETParams) WithTimeout(timeout time.Duration) *GetRegistrationSpecificWorkflowsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get registration specific workflows using g e t params
func (o *GetRegistrationSpecificWorkflowsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get registration specific workflows using g e t params
func (o *GetRegistrationSpecificWorkflowsUsingGETParams) WithContext(ctx context.Context) *GetRegistrationSpecificWorkflowsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get registration specific workflows using g e t params
func (o *GetRegistrationSpecificWorkflowsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get registration specific workflows using g e t params
func (o *GetRegistrationSpecificWorkflowsUsingGETParams) WithHTTPClient(client *http.Client) *GetRegistrationSpecificWorkflowsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get registration specific workflows using g e t params
func (o *GetRegistrationSpecificWorkflowsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRegistrationType adds the registrationType to the get registration specific workflows using g e t params
func (o *GetRegistrationSpecificWorkflowsUsingGETParams) WithRegistrationType(registrationType string) *GetRegistrationSpecificWorkflowsUsingGETParams {
	o.SetRegistrationType(registrationType)
	return o
}

// SetRegistrationType adds the registrationType to the get registration specific workflows using g e t params
func (o *GetRegistrationSpecificWorkflowsUsingGETParams) SetRegistrationType(registrationType string) {
	o.RegistrationType = registrationType
}

// WithStackName adds the stackName to the get registration specific workflows using g e t params
func (o *GetRegistrationSpecificWorkflowsUsingGETParams) WithStackName(stackName *string) *GetRegistrationSpecificWorkflowsUsingGETParams {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the get registration specific workflows using g e t params
func (o *GetRegistrationSpecificWorkflowsUsingGETParams) SetStackName(stackName *string) {
	o.StackName = stackName
}

// WriteToRequest writes these params to a swagger request
func (o *GetRegistrationSpecificWorkflowsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param registrationType
	qrRegistrationType := o.RegistrationType
	qRegistrationType := qrRegistrationType
	if qRegistrationType != "" {

		if err := r.SetQueryParam("registrationType", qRegistrationType); err != nil {
			return err
		}
	}

	if o.StackName != nil {

		// query param stackName
		var qrStackName string

		if o.StackName != nil {
			qrStackName = *o.StackName
		}
		qStackName := qrStackName
		if qStackName != "" {

			if err := r.SetQueryParam("stackName", qStackName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
