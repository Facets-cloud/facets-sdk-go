// Code generated by go-swagger; DO NOT EDIT.

package ui_promotion_workflow_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetDefaultWorkflowUsingGETReader is a Reader for the GetDefaultWorkflowUsingGET structure.
type GetDefaultWorkflowUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDefaultWorkflowUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDefaultWorkflowUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDefaultWorkflowUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDefaultWorkflowUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDefaultWorkflowUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/workflow/default-workflow/registration-type/{registrationType}] getDefaultWorkflowUsingGET", response, response.Code())
	}
}

// NewGetDefaultWorkflowUsingGETOK creates a GetDefaultWorkflowUsingGETOK with default headers values
func NewGetDefaultWorkflowUsingGETOK() *GetDefaultWorkflowUsingGETOK {
	return &GetDefaultWorkflowUsingGETOK{}
}

/*
GetDefaultWorkflowUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetDefaultWorkflowUsingGETOK struct {
	Payload *models.PromotionWorkflow
}

// IsSuccess returns true when this get default workflow using g e t o k response has a 2xx status code
func (o *GetDefaultWorkflowUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get default workflow using g e t o k response has a 3xx status code
func (o *GetDefaultWorkflowUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get default workflow using g e t o k response has a 4xx status code
func (o *GetDefaultWorkflowUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get default workflow using g e t o k response has a 5xx status code
func (o *GetDefaultWorkflowUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get default workflow using g e t o k response a status code equal to that given
func (o *GetDefaultWorkflowUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get default workflow using g e t o k response
func (o *GetDefaultWorkflowUsingGETOK) Code() int {
	return 200
}

func (o *GetDefaultWorkflowUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/default-workflow/registration-type/{registrationType}][%d] getDefaultWorkflowUsingGETOK %s", 200, payload)
}

func (o *GetDefaultWorkflowUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/default-workflow/registration-type/{registrationType}][%d] getDefaultWorkflowUsingGETOK %s", 200, payload)
}

func (o *GetDefaultWorkflowUsingGETOK) GetPayload() *models.PromotionWorkflow {
	return o.Payload
}

func (o *GetDefaultWorkflowUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PromotionWorkflow)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDefaultWorkflowUsingGETUnauthorized creates a GetDefaultWorkflowUsingGETUnauthorized with default headers values
func NewGetDefaultWorkflowUsingGETUnauthorized() *GetDefaultWorkflowUsingGETUnauthorized {
	return &GetDefaultWorkflowUsingGETUnauthorized{}
}

/*
GetDefaultWorkflowUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetDefaultWorkflowUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get default workflow using g e t unauthorized response has a 2xx status code
func (o *GetDefaultWorkflowUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get default workflow using g e t unauthorized response has a 3xx status code
func (o *GetDefaultWorkflowUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get default workflow using g e t unauthorized response has a 4xx status code
func (o *GetDefaultWorkflowUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get default workflow using g e t unauthorized response has a 5xx status code
func (o *GetDefaultWorkflowUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get default workflow using g e t unauthorized response a status code equal to that given
func (o *GetDefaultWorkflowUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get default workflow using g e t unauthorized response
func (o *GetDefaultWorkflowUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetDefaultWorkflowUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/default-workflow/registration-type/{registrationType}][%d] getDefaultWorkflowUsingGETUnauthorized", 401)
}

func (o *GetDefaultWorkflowUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/default-workflow/registration-type/{registrationType}][%d] getDefaultWorkflowUsingGETUnauthorized", 401)
}

func (o *GetDefaultWorkflowUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDefaultWorkflowUsingGETForbidden creates a GetDefaultWorkflowUsingGETForbidden with default headers values
func NewGetDefaultWorkflowUsingGETForbidden() *GetDefaultWorkflowUsingGETForbidden {
	return &GetDefaultWorkflowUsingGETForbidden{}
}

/*
GetDefaultWorkflowUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetDefaultWorkflowUsingGETForbidden struct {
}

// IsSuccess returns true when this get default workflow using g e t forbidden response has a 2xx status code
func (o *GetDefaultWorkflowUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get default workflow using g e t forbidden response has a 3xx status code
func (o *GetDefaultWorkflowUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get default workflow using g e t forbidden response has a 4xx status code
func (o *GetDefaultWorkflowUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get default workflow using g e t forbidden response has a 5xx status code
func (o *GetDefaultWorkflowUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get default workflow using g e t forbidden response a status code equal to that given
func (o *GetDefaultWorkflowUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get default workflow using g e t forbidden response
func (o *GetDefaultWorkflowUsingGETForbidden) Code() int {
	return 403
}

func (o *GetDefaultWorkflowUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/default-workflow/registration-type/{registrationType}][%d] getDefaultWorkflowUsingGETForbidden", 403)
}

func (o *GetDefaultWorkflowUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/default-workflow/registration-type/{registrationType}][%d] getDefaultWorkflowUsingGETForbidden", 403)
}

func (o *GetDefaultWorkflowUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDefaultWorkflowUsingGETNotFound creates a GetDefaultWorkflowUsingGETNotFound with default headers values
func NewGetDefaultWorkflowUsingGETNotFound() *GetDefaultWorkflowUsingGETNotFound {
	return &GetDefaultWorkflowUsingGETNotFound{}
}

/*
GetDefaultWorkflowUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetDefaultWorkflowUsingGETNotFound struct {
}

// IsSuccess returns true when this get default workflow using g e t not found response has a 2xx status code
func (o *GetDefaultWorkflowUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get default workflow using g e t not found response has a 3xx status code
func (o *GetDefaultWorkflowUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get default workflow using g e t not found response has a 4xx status code
func (o *GetDefaultWorkflowUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get default workflow using g e t not found response has a 5xx status code
func (o *GetDefaultWorkflowUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get default workflow using g e t not found response a status code equal to that given
func (o *GetDefaultWorkflowUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get default workflow using g e t not found response
func (o *GetDefaultWorkflowUsingGETNotFound) Code() int {
	return 404
}

func (o *GetDefaultWorkflowUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/default-workflow/registration-type/{registrationType}][%d] getDefaultWorkflowUsingGETNotFound", 404)
}

func (o *GetDefaultWorkflowUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/default-workflow/registration-type/{registrationType}][%d] getDefaultWorkflowUsingGETNotFound", 404)
}

func (o *GetDefaultWorkflowUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
