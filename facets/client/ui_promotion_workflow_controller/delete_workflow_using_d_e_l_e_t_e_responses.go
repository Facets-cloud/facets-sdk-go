// Code generated by go-swagger; DO NOT EDIT.

package ui_promotion_workflow_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteWorkflowUsingDELETEReader is a Reader for the DeleteWorkflowUsingDELETE structure.
type DeleteWorkflowUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteWorkflowUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteWorkflowUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteWorkflowUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteWorkflowUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteWorkflowUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/workflow/{workflowId}] deleteWorkflowUsingDELETE", response, response.Code())
	}
}

// NewDeleteWorkflowUsingDELETEOK creates a DeleteWorkflowUsingDELETEOK with default headers values
func NewDeleteWorkflowUsingDELETEOK() *DeleteWorkflowUsingDELETEOK {
	return &DeleteWorkflowUsingDELETEOK{}
}

/*
DeleteWorkflowUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteWorkflowUsingDELETEOK struct {
	Payload *models.PromotionWorkflow
}

// IsSuccess returns true when this delete workflow using d e l e t e o k response has a 2xx status code
func (o *DeleteWorkflowUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete workflow using d e l e t e o k response has a 3xx status code
func (o *DeleteWorkflowUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete workflow using d e l e t e o k response has a 4xx status code
func (o *DeleteWorkflowUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete workflow using d e l e t e o k response has a 5xx status code
func (o *DeleteWorkflowUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete workflow using d e l e t e o k response a status code equal to that given
func (o *DeleteWorkflowUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete workflow using d e l e t e o k response
func (o *DeleteWorkflowUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteWorkflowUsingDELETEOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/workflow/{workflowId}][%d] deleteWorkflowUsingDELETEOK %s", 200, payload)
}

func (o *DeleteWorkflowUsingDELETEOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/workflow/{workflowId}][%d] deleteWorkflowUsingDELETEOK %s", 200, payload)
}

func (o *DeleteWorkflowUsingDELETEOK) GetPayload() *models.PromotionWorkflow {
	return o.Payload
}

func (o *DeleteWorkflowUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PromotionWorkflow)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteWorkflowUsingDELETENoContent creates a DeleteWorkflowUsingDELETENoContent with default headers values
func NewDeleteWorkflowUsingDELETENoContent() *DeleteWorkflowUsingDELETENoContent {
	return &DeleteWorkflowUsingDELETENoContent{}
}

/*
DeleteWorkflowUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteWorkflowUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete workflow using d e l e t e no content response has a 2xx status code
func (o *DeleteWorkflowUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete workflow using d e l e t e no content response has a 3xx status code
func (o *DeleteWorkflowUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete workflow using d e l e t e no content response has a 4xx status code
func (o *DeleteWorkflowUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete workflow using d e l e t e no content response has a 5xx status code
func (o *DeleteWorkflowUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete workflow using d e l e t e no content response a status code equal to that given
func (o *DeleteWorkflowUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete workflow using d e l e t e no content response
func (o *DeleteWorkflowUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteWorkflowUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/workflow/{workflowId}][%d] deleteWorkflowUsingDELETENoContent", 204)
}

func (o *DeleteWorkflowUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/workflow/{workflowId}][%d] deleteWorkflowUsingDELETENoContent", 204)
}

func (o *DeleteWorkflowUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteWorkflowUsingDELETEUnauthorized creates a DeleteWorkflowUsingDELETEUnauthorized with default headers values
func NewDeleteWorkflowUsingDELETEUnauthorized() *DeleteWorkflowUsingDELETEUnauthorized {
	return &DeleteWorkflowUsingDELETEUnauthorized{}
}

/*
DeleteWorkflowUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteWorkflowUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete workflow using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteWorkflowUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete workflow using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteWorkflowUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete workflow using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteWorkflowUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete workflow using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteWorkflowUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete workflow using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteWorkflowUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete workflow using d e l e t e unauthorized response
func (o *DeleteWorkflowUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteWorkflowUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/workflow/{workflowId}][%d] deleteWorkflowUsingDELETEUnauthorized", 401)
}

func (o *DeleteWorkflowUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/workflow/{workflowId}][%d] deleteWorkflowUsingDELETEUnauthorized", 401)
}

func (o *DeleteWorkflowUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteWorkflowUsingDELETEForbidden creates a DeleteWorkflowUsingDELETEForbidden with default headers values
func NewDeleteWorkflowUsingDELETEForbidden() *DeleteWorkflowUsingDELETEForbidden {
	return &DeleteWorkflowUsingDELETEForbidden{}
}

/*
DeleteWorkflowUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteWorkflowUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete workflow using d e l e t e forbidden response has a 2xx status code
func (o *DeleteWorkflowUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete workflow using d e l e t e forbidden response has a 3xx status code
func (o *DeleteWorkflowUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete workflow using d e l e t e forbidden response has a 4xx status code
func (o *DeleteWorkflowUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete workflow using d e l e t e forbidden response has a 5xx status code
func (o *DeleteWorkflowUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete workflow using d e l e t e forbidden response a status code equal to that given
func (o *DeleteWorkflowUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete workflow using d e l e t e forbidden response
func (o *DeleteWorkflowUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteWorkflowUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/workflow/{workflowId}][%d] deleteWorkflowUsingDELETEForbidden", 403)
}

func (o *DeleteWorkflowUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/workflow/{workflowId}][%d] deleteWorkflowUsingDELETEForbidden", 403)
}

func (o *DeleteWorkflowUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
