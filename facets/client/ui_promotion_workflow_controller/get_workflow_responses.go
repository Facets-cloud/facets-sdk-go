// Code generated by go-swagger; DO NOT EDIT.

package ui_promotion_workflow_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetWorkflowReader is a Reader for the GetWorkflow structure.
type GetWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkflowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetWorkflowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWorkflowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetWorkflowMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetWorkflowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/workflow/{workflowId}] getWorkflow", response, response.Code())
	}
}

// NewGetWorkflowOK creates a GetWorkflowOK with default headers values
func NewGetWorkflowOK() *GetWorkflowOK {
	return &GetWorkflowOK{}
}

/*
GetWorkflowOK describes a response with status code 200, with default header values.

OK
*/
type GetWorkflowOK struct {
	Payload *models.PromotionWorkflow
}

// IsSuccess returns true when this get workflow o k response has a 2xx status code
func (o *GetWorkflowOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get workflow o k response has a 3xx status code
func (o *GetWorkflowOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow o k response has a 4xx status code
func (o *GetWorkflowOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get workflow o k response has a 5xx status code
func (o *GetWorkflowOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow o k response a status code equal to that given
func (o *GetWorkflowOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get workflow o k response
func (o *GetWorkflowOK) Code() int {
	return 200
}

func (o *GetWorkflowOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowOK %s", 200, payload)
}

func (o *GetWorkflowOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowOK %s", 200, payload)
}

func (o *GetWorkflowOK) GetPayload() *models.PromotionWorkflow {
	return o.Payload
}

func (o *GetWorkflowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PromotionWorkflow)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowBadRequest creates a GetWorkflowBadRequest with default headers values
func NewGetWorkflowBadRequest() *GetWorkflowBadRequest {
	return &GetWorkflowBadRequest{}
}

/*
GetWorkflowBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetWorkflowBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get workflow bad request response has a 2xx status code
func (o *GetWorkflowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow bad request response has a 3xx status code
func (o *GetWorkflowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow bad request response has a 4xx status code
func (o *GetWorkflowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflow bad request response has a 5xx status code
func (o *GetWorkflowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow bad request response a status code equal to that given
func (o *GetWorkflowBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get workflow bad request response
func (o *GetWorkflowBadRequest) Code() int {
	return 400
}

func (o *GetWorkflowBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowBadRequest %s", 400, payload)
}

func (o *GetWorkflowBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowBadRequest %s", 400, payload)
}

func (o *GetWorkflowBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetWorkflowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowNotFound creates a GetWorkflowNotFound with default headers values
func NewGetWorkflowNotFound() *GetWorkflowNotFound {
	return &GetWorkflowNotFound{}
}

/*
GetWorkflowNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetWorkflowNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get workflow not found response has a 2xx status code
func (o *GetWorkflowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow not found response has a 3xx status code
func (o *GetWorkflowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow not found response has a 4xx status code
func (o *GetWorkflowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflow not found response has a 5xx status code
func (o *GetWorkflowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow not found response a status code equal to that given
func (o *GetWorkflowNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get workflow not found response
func (o *GetWorkflowNotFound) Code() int {
	return 404
}

func (o *GetWorkflowNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowNotFound %s", 404, payload)
}

func (o *GetWorkflowNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowNotFound %s", 404, payload)
}

func (o *GetWorkflowNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetWorkflowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowMethodNotAllowed creates a GetWorkflowMethodNotAllowed with default headers values
func NewGetWorkflowMethodNotAllowed() *GetWorkflowMethodNotAllowed {
	return &GetWorkflowMethodNotAllowed{}
}

/*
GetWorkflowMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetWorkflowMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get workflow method not allowed response has a 2xx status code
func (o *GetWorkflowMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow method not allowed response has a 3xx status code
func (o *GetWorkflowMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow method not allowed response has a 4xx status code
func (o *GetWorkflowMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflow method not allowed response has a 5xx status code
func (o *GetWorkflowMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow method not allowed response a status code equal to that given
func (o *GetWorkflowMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get workflow method not allowed response
func (o *GetWorkflowMethodNotAllowed) Code() int {
	return 405
}

func (o *GetWorkflowMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowMethodNotAllowed %s", 405, payload)
}

func (o *GetWorkflowMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowMethodNotAllowed %s", 405, payload)
}

func (o *GetWorkflowMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetWorkflowMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowInternalServerError creates a GetWorkflowInternalServerError with default headers values
func NewGetWorkflowInternalServerError() *GetWorkflowInternalServerError {
	return &GetWorkflowInternalServerError{}
}

/*
GetWorkflowInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetWorkflowInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get workflow internal server error response has a 2xx status code
func (o *GetWorkflowInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow internal server error response has a 3xx status code
func (o *GetWorkflowInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow internal server error response has a 4xx status code
func (o *GetWorkflowInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get workflow internal server error response has a 5xx status code
func (o *GetWorkflowInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get workflow internal server error response a status code equal to that given
func (o *GetWorkflowInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get workflow internal server error response
func (o *GetWorkflowInternalServerError) Code() int {
	return 500
}

func (o *GetWorkflowInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowInternalServerError %s", 500, payload)
}

func (o *GetWorkflowInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowInternalServerError %s", 500, payload)
}

func (o *GetWorkflowInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetWorkflowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
