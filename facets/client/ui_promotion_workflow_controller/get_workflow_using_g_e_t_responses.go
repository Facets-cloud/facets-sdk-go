// Code generated by go-swagger; DO NOT EDIT.

package ui_promotion_workflow_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetWorkflowUsingGETReader is a Reader for the GetWorkflowUsingGET structure.
type GetWorkflowUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkflowUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkflowUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetWorkflowUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWorkflowUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWorkflowUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/workflow/{workflowId}] getWorkflowUsingGET", response, response.Code())
	}
}

// NewGetWorkflowUsingGETOK creates a GetWorkflowUsingGETOK with default headers values
func NewGetWorkflowUsingGETOK() *GetWorkflowUsingGETOK {
	return &GetWorkflowUsingGETOK{}
}

/*
GetWorkflowUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetWorkflowUsingGETOK struct {
	Payload *models.PromotionWorkflow
}

// IsSuccess returns true when this get workflow using g e t o k response has a 2xx status code
func (o *GetWorkflowUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get workflow using g e t o k response has a 3xx status code
func (o *GetWorkflowUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow using g e t o k response has a 4xx status code
func (o *GetWorkflowUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get workflow using g e t o k response has a 5xx status code
func (o *GetWorkflowUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow using g e t o k response a status code equal to that given
func (o *GetWorkflowUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get workflow using g e t o k response
func (o *GetWorkflowUsingGETOK) Code() int {
	return 200
}

func (o *GetWorkflowUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowUsingGETOK %s", 200, payload)
}

func (o *GetWorkflowUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowUsingGETOK %s", 200, payload)
}

func (o *GetWorkflowUsingGETOK) GetPayload() *models.PromotionWorkflow {
	return o.Payload
}

func (o *GetWorkflowUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PromotionWorkflow)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowUsingGETUnauthorized creates a GetWorkflowUsingGETUnauthorized with default headers values
func NewGetWorkflowUsingGETUnauthorized() *GetWorkflowUsingGETUnauthorized {
	return &GetWorkflowUsingGETUnauthorized{}
}

/*
GetWorkflowUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetWorkflowUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get workflow using g e t unauthorized response has a 2xx status code
func (o *GetWorkflowUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow using g e t unauthorized response has a 3xx status code
func (o *GetWorkflowUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow using g e t unauthorized response has a 4xx status code
func (o *GetWorkflowUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflow using g e t unauthorized response has a 5xx status code
func (o *GetWorkflowUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow using g e t unauthorized response a status code equal to that given
func (o *GetWorkflowUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get workflow using g e t unauthorized response
func (o *GetWorkflowUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetWorkflowUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowUsingGETUnauthorized", 401)
}

func (o *GetWorkflowUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowUsingGETUnauthorized", 401)
}

func (o *GetWorkflowUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetWorkflowUsingGETForbidden creates a GetWorkflowUsingGETForbidden with default headers values
func NewGetWorkflowUsingGETForbidden() *GetWorkflowUsingGETForbidden {
	return &GetWorkflowUsingGETForbidden{}
}

/*
GetWorkflowUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetWorkflowUsingGETForbidden struct {
}

// IsSuccess returns true when this get workflow using g e t forbidden response has a 2xx status code
func (o *GetWorkflowUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow using g e t forbidden response has a 3xx status code
func (o *GetWorkflowUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow using g e t forbidden response has a 4xx status code
func (o *GetWorkflowUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflow using g e t forbidden response has a 5xx status code
func (o *GetWorkflowUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow using g e t forbidden response a status code equal to that given
func (o *GetWorkflowUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get workflow using g e t forbidden response
func (o *GetWorkflowUsingGETForbidden) Code() int {
	return 403
}

func (o *GetWorkflowUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowUsingGETForbidden", 403)
}

func (o *GetWorkflowUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowUsingGETForbidden", 403)
}

func (o *GetWorkflowUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetWorkflowUsingGETNotFound creates a GetWorkflowUsingGETNotFound with default headers values
func NewGetWorkflowUsingGETNotFound() *GetWorkflowUsingGETNotFound {
	return &GetWorkflowUsingGETNotFound{}
}

/*
GetWorkflowUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetWorkflowUsingGETNotFound struct {
}

// IsSuccess returns true when this get workflow using g e t not found response has a 2xx status code
func (o *GetWorkflowUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow using g e t not found response has a 3xx status code
func (o *GetWorkflowUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow using g e t not found response has a 4xx status code
func (o *GetWorkflowUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflow using g e t not found response has a 5xx status code
func (o *GetWorkflowUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow using g e t not found response a status code equal to that given
func (o *GetWorkflowUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get workflow using g e t not found response
func (o *GetWorkflowUsingGETNotFound) Code() int {
	return 404
}

func (o *GetWorkflowUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowUsingGETNotFound", 404)
}

func (o *GetWorkflowUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/workflow/{workflowId}][%d] getWorkflowUsingGETNotFound", 404)
}

func (o *GetWorkflowUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
