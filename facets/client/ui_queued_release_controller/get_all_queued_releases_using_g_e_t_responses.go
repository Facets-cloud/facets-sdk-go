// Code generated by go-swagger; DO NOT EDIT.

package ui_queued_release_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllQueuedReleasesUsingGETReader is a Reader for the GetAllQueuedReleasesUsingGET structure.
type GetAllQueuedReleasesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllQueuedReleasesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllQueuedReleasesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllQueuedReleasesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllQueuedReleasesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllQueuedReleasesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/queued-releases/] getAllQueuedReleasesUsingGET", response, response.Code())
	}
}

// NewGetAllQueuedReleasesUsingGETOK creates a GetAllQueuedReleasesUsingGETOK with default headers values
func NewGetAllQueuedReleasesUsingGETOK() *GetAllQueuedReleasesUsingGETOK {
	return &GetAllQueuedReleasesUsingGETOK{}
}

/*
GetAllQueuedReleasesUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllQueuedReleasesUsingGETOK struct {
	Payload []*models.QueuedRelease
}

// IsSuccess returns true when this get all queued releases using g e t o k response has a 2xx status code
func (o *GetAllQueuedReleasesUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all queued releases using g e t o k response has a 3xx status code
func (o *GetAllQueuedReleasesUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all queued releases using g e t o k response has a 4xx status code
func (o *GetAllQueuedReleasesUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all queued releases using g e t o k response has a 5xx status code
func (o *GetAllQueuedReleasesUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all queued releases using g e t o k response a status code equal to that given
func (o *GetAllQueuedReleasesUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all queued releases using g e t o k response
func (o *GetAllQueuedReleasesUsingGETOK) Code() int {
	return 200
}

func (o *GetAllQueuedReleasesUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/queued-releases/][%d] getAllQueuedReleasesUsingGETOK %s", 200, payload)
}

func (o *GetAllQueuedReleasesUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/queued-releases/][%d] getAllQueuedReleasesUsingGETOK %s", 200, payload)
}

func (o *GetAllQueuedReleasesUsingGETOK) GetPayload() []*models.QueuedRelease {
	return o.Payload
}

func (o *GetAllQueuedReleasesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllQueuedReleasesUsingGETUnauthorized creates a GetAllQueuedReleasesUsingGETUnauthorized with default headers values
func NewGetAllQueuedReleasesUsingGETUnauthorized() *GetAllQueuedReleasesUsingGETUnauthorized {
	return &GetAllQueuedReleasesUsingGETUnauthorized{}
}

/*
GetAllQueuedReleasesUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllQueuedReleasesUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all queued releases using g e t unauthorized response has a 2xx status code
func (o *GetAllQueuedReleasesUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all queued releases using g e t unauthorized response has a 3xx status code
func (o *GetAllQueuedReleasesUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all queued releases using g e t unauthorized response has a 4xx status code
func (o *GetAllQueuedReleasesUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all queued releases using g e t unauthorized response has a 5xx status code
func (o *GetAllQueuedReleasesUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all queued releases using g e t unauthorized response a status code equal to that given
func (o *GetAllQueuedReleasesUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all queued releases using g e t unauthorized response
func (o *GetAllQueuedReleasesUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllQueuedReleasesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/queued-releases/][%d] getAllQueuedReleasesUsingGETUnauthorized", 401)
}

func (o *GetAllQueuedReleasesUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/queued-releases/][%d] getAllQueuedReleasesUsingGETUnauthorized", 401)
}

func (o *GetAllQueuedReleasesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllQueuedReleasesUsingGETForbidden creates a GetAllQueuedReleasesUsingGETForbidden with default headers values
func NewGetAllQueuedReleasesUsingGETForbidden() *GetAllQueuedReleasesUsingGETForbidden {
	return &GetAllQueuedReleasesUsingGETForbidden{}
}

/*
GetAllQueuedReleasesUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllQueuedReleasesUsingGETForbidden struct {
}

// IsSuccess returns true when this get all queued releases using g e t forbidden response has a 2xx status code
func (o *GetAllQueuedReleasesUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all queued releases using g e t forbidden response has a 3xx status code
func (o *GetAllQueuedReleasesUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all queued releases using g e t forbidden response has a 4xx status code
func (o *GetAllQueuedReleasesUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all queued releases using g e t forbidden response has a 5xx status code
func (o *GetAllQueuedReleasesUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all queued releases using g e t forbidden response a status code equal to that given
func (o *GetAllQueuedReleasesUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all queued releases using g e t forbidden response
func (o *GetAllQueuedReleasesUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllQueuedReleasesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/queued-releases/][%d] getAllQueuedReleasesUsingGETForbidden", 403)
}

func (o *GetAllQueuedReleasesUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/queued-releases/][%d] getAllQueuedReleasesUsingGETForbidden", 403)
}

func (o *GetAllQueuedReleasesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllQueuedReleasesUsingGETNotFound creates a GetAllQueuedReleasesUsingGETNotFound with default headers values
func NewGetAllQueuedReleasesUsingGETNotFound() *GetAllQueuedReleasesUsingGETNotFound {
	return &GetAllQueuedReleasesUsingGETNotFound{}
}

/*
GetAllQueuedReleasesUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllQueuedReleasesUsingGETNotFound struct {
}

// IsSuccess returns true when this get all queued releases using g e t not found response has a 2xx status code
func (o *GetAllQueuedReleasesUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all queued releases using g e t not found response has a 3xx status code
func (o *GetAllQueuedReleasesUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all queued releases using g e t not found response has a 4xx status code
func (o *GetAllQueuedReleasesUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all queued releases using g e t not found response has a 5xx status code
func (o *GetAllQueuedReleasesUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all queued releases using g e t not found response a status code equal to that given
func (o *GetAllQueuedReleasesUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all queued releases using g e t not found response
func (o *GetAllQueuedReleasesUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllQueuedReleasesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/queued-releases/][%d] getAllQueuedReleasesUsingGETNotFound", 404)
}

func (o *GetAllQueuedReleasesUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/queued-releases/][%d] getAllQueuedReleasesUsingGETNotFound", 404)
}

func (o *GetAllQueuedReleasesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
