// Code generated by go-swagger; DO NOT EDIT.

package ui_queued_release_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteByIDReader is a Reader for the DeleteByID structure.
type DeleteByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteByIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}] deleteById", response, response.Code())
	}
}

// NewDeleteByIDOK creates a DeleteByIDOK with default headers values
func NewDeleteByIDOK() *DeleteByIDOK {
	return &DeleteByIDOK{}
}

/*
DeleteByIDOK describes a response with status code 200, with default header values.

OK
*/
type DeleteByIDOK struct {
}

// IsSuccess returns true when this delete by Id o k response has a 2xx status code
func (o *DeleteByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete by Id o k response has a 3xx status code
func (o *DeleteByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete by Id o k response has a 4xx status code
func (o *DeleteByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete by Id o k response has a 5xx status code
func (o *DeleteByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete by Id o k response a status code equal to that given
func (o *DeleteByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete by Id o k response
func (o *DeleteByIDOK) Code() int {
	return 200
}

func (o *DeleteByIDOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdOK", 200)
}

func (o *DeleteByIDOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdOK", 200)
}

func (o *DeleteByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteByIDBadRequest creates a DeleteByIDBadRequest with default headers values
func NewDeleteByIDBadRequest() *DeleteByIDBadRequest {
	return &DeleteByIDBadRequest{}
}

/*
DeleteByIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteByIDBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete by Id bad request response has a 2xx status code
func (o *DeleteByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete by Id bad request response has a 3xx status code
func (o *DeleteByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete by Id bad request response has a 4xx status code
func (o *DeleteByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete by Id bad request response has a 5xx status code
func (o *DeleteByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete by Id bad request response a status code equal to that given
func (o *DeleteByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete by Id bad request response
func (o *DeleteByIDBadRequest) Code() int {
	return 400
}

func (o *DeleteByIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdBadRequest %s", 400, payload)
}

func (o *DeleteByIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdBadRequest %s", 400, payload)
}

func (o *DeleteByIDBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteByIDNotFound creates a DeleteByIDNotFound with default headers values
func NewDeleteByIDNotFound() *DeleteByIDNotFound {
	return &DeleteByIDNotFound{}
}

/*
DeleteByIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteByIDNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete by Id not found response has a 2xx status code
func (o *DeleteByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete by Id not found response has a 3xx status code
func (o *DeleteByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete by Id not found response has a 4xx status code
func (o *DeleteByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete by Id not found response has a 5xx status code
func (o *DeleteByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete by Id not found response a status code equal to that given
func (o *DeleteByIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete by Id not found response
func (o *DeleteByIDNotFound) Code() int {
	return 404
}

func (o *DeleteByIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdNotFound %s", 404, payload)
}

func (o *DeleteByIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdNotFound %s", 404, payload)
}

func (o *DeleteByIDNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteByIDMethodNotAllowed creates a DeleteByIDMethodNotAllowed with default headers values
func NewDeleteByIDMethodNotAllowed() *DeleteByIDMethodNotAllowed {
	return &DeleteByIDMethodNotAllowed{}
}

/*
DeleteByIDMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DeleteByIDMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete by Id method not allowed response has a 2xx status code
func (o *DeleteByIDMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete by Id method not allowed response has a 3xx status code
func (o *DeleteByIDMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete by Id method not allowed response has a 4xx status code
func (o *DeleteByIDMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete by Id method not allowed response has a 5xx status code
func (o *DeleteByIDMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete by Id method not allowed response a status code equal to that given
func (o *DeleteByIDMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the delete by Id method not allowed response
func (o *DeleteByIDMethodNotAllowed) Code() int {
	return 405
}

func (o *DeleteByIDMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdMethodNotAllowed %s", 405, payload)
}

func (o *DeleteByIDMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdMethodNotAllowed %s", 405, payload)
}

func (o *DeleteByIDMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteByIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteByIDInternalServerError creates a DeleteByIDInternalServerError with default headers values
func NewDeleteByIDInternalServerError() *DeleteByIDInternalServerError {
	return &DeleteByIDInternalServerError{}
}

/*
DeleteByIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteByIDInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete by Id internal server error response has a 2xx status code
func (o *DeleteByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete by Id internal server error response has a 3xx status code
func (o *DeleteByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete by Id internal server error response has a 4xx status code
func (o *DeleteByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete by Id internal server error response has a 5xx status code
func (o *DeleteByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete by Id internal server error response a status code equal to that given
func (o *DeleteByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete by Id internal server error response
func (o *DeleteByIDInternalServerError) Code() int {
	return 500
}

func (o *DeleteByIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdInternalServerError %s", 500, payload)
}

func (o *DeleteByIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdInternalServerError %s", 500, payload)
}

func (o *DeleteByIDInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
