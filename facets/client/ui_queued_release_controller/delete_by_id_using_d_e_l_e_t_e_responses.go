// Code generated by go-swagger; DO NOT EDIT.

package ui_queued_release_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteByIDUsingDELETEReader is a Reader for the DeleteByIDUsingDELETE structure.
type DeleteByIDUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteByIDUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteByIDUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteByIDUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteByIDUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteByIDUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}] deleteByIdUsingDELETE", response, response.Code())
	}
}

// NewDeleteByIDUsingDELETEOK creates a DeleteByIDUsingDELETEOK with default headers values
func NewDeleteByIDUsingDELETEOK() *DeleteByIDUsingDELETEOK {
	return &DeleteByIDUsingDELETEOK{}
}

/*
DeleteByIDUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteByIDUsingDELETEOK struct {
}

// IsSuccess returns true when this delete by Id using d e l e t e o k response has a 2xx status code
func (o *DeleteByIDUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete by Id using d e l e t e o k response has a 3xx status code
func (o *DeleteByIDUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete by Id using d e l e t e o k response has a 4xx status code
func (o *DeleteByIDUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete by Id using d e l e t e o k response has a 5xx status code
func (o *DeleteByIDUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete by Id using d e l e t e o k response a status code equal to that given
func (o *DeleteByIDUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete by Id using d e l e t e o k response
func (o *DeleteByIDUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteByIDUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdUsingDELETEOK", 200)
}

func (o *DeleteByIDUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdUsingDELETEOK", 200)
}

func (o *DeleteByIDUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteByIDUsingDELETENoContent creates a DeleteByIDUsingDELETENoContent with default headers values
func NewDeleteByIDUsingDELETENoContent() *DeleteByIDUsingDELETENoContent {
	return &DeleteByIDUsingDELETENoContent{}
}

/*
DeleteByIDUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteByIDUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete by Id using d e l e t e no content response has a 2xx status code
func (o *DeleteByIDUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete by Id using d e l e t e no content response has a 3xx status code
func (o *DeleteByIDUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete by Id using d e l e t e no content response has a 4xx status code
func (o *DeleteByIDUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete by Id using d e l e t e no content response has a 5xx status code
func (o *DeleteByIDUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete by Id using d e l e t e no content response a status code equal to that given
func (o *DeleteByIDUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete by Id using d e l e t e no content response
func (o *DeleteByIDUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteByIDUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdUsingDELETENoContent", 204)
}

func (o *DeleteByIDUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdUsingDELETENoContent", 204)
}

func (o *DeleteByIDUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteByIDUsingDELETEUnauthorized creates a DeleteByIDUsingDELETEUnauthorized with default headers values
func NewDeleteByIDUsingDELETEUnauthorized() *DeleteByIDUsingDELETEUnauthorized {
	return &DeleteByIDUsingDELETEUnauthorized{}
}

/*
DeleteByIDUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteByIDUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete by Id using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteByIDUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete by Id using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteByIDUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete by Id using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteByIDUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete by Id using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteByIDUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete by Id using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteByIDUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete by Id using d e l e t e unauthorized response
func (o *DeleteByIDUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteByIDUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdUsingDELETEUnauthorized", 401)
}

func (o *DeleteByIDUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdUsingDELETEUnauthorized", 401)
}

func (o *DeleteByIDUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteByIDUsingDELETEForbidden creates a DeleteByIDUsingDELETEForbidden with default headers values
func NewDeleteByIDUsingDELETEForbidden() *DeleteByIDUsingDELETEForbidden {
	return &DeleteByIDUsingDELETEForbidden{}
}

/*
DeleteByIDUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteByIDUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete by Id using d e l e t e forbidden response has a 2xx status code
func (o *DeleteByIDUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete by Id using d e l e t e forbidden response has a 3xx status code
func (o *DeleteByIDUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete by Id using d e l e t e forbidden response has a 4xx status code
func (o *DeleteByIDUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete by Id using d e l e t e forbidden response has a 5xx status code
func (o *DeleteByIDUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete by Id using d e l e t e forbidden response a status code equal to that given
func (o *DeleteByIDUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete by Id using d e l e t e forbidden response
func (o *DeleteByIDUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteByIDUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdUsingDELETEForbidden", 403)
}

func (o *DeleteByIDUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/queued-releases/{queuedReleaseId}][%d] deleteByIdUsingDELETEForbidden", 403)
}

func (o *DeleteByIDUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
