// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ApproveReleaseReader is a Reader for the ApproveRelease structure.
type ApproveReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApproveReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewApproveReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewApproveReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewApproveReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewApproveReleaseMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewApproveReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease] approveRelease", response, response.Code())
	}
}

// NewApproveReleaseOK creates a ApproveReleaseOK with default headers values
func NewApproveReleaseOK() *ApproveReleaseOK {
	return &ApproveReleaseOK{}
}

/*
ApproveReleaseOK describes a response with status code 200, with default header values.

OK
*/
type ApproveReleaseOK struct {
	Payload *models.DeploymentLog
}

// IsSuccess returns true when this approve release o k response has a 2xx status code
func (o *ApproveReleaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this approve release o k response has a 3xx status code
func (o *ApproveReleaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve release o k response has a 4xx status code
func (o *ApproveReleaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this approve release o k response has a 5xx status code
func (o *ApproveReleaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this approve release o k response a status code equal to that given
func (o *ApproveReleaseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the approve release o k response
func (o *ApproveReleaseOK) Code() int {
	return 200
}

func (o *ApproveReleaseOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseOK %s", 200, payload)
}

func (o *ApproveReleaseOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseOK %s", 200, payload)
}

func (o *ApproveReleaseOK) GetPayload() *models.DeploymentLog {
	return o.Payload
}

func (o *ApproveReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveReleaseBadRequest creates a ApproveReleaseBadRequest with default headers values
func NewApproveReleaseBadRequest() *ApproveReleaseBadRequest {
	return &ApproveReleaseBadRequest{}
}

/*
ApproveReleaseBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ApproveReleaseBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this approve release bad request response has a 2xx status code
func (o *ApproveReleaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this approve release bad request response has a 3xx status code
func (o *ApproveReleaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve release bad request response has a 4xx status code
func (o *ApproveReleaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this approve release bad request response has a 5xx status code
func (o *ApproveReleaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this approve release bad request response a status code equal to that given
func (o *ApproveReleaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the approve release bad request response
func (o *ApproveReleaseBadRequest) Code() int {
	return 400
}

func (o *ApproveReleaseBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseBadRequest %s", 400, payload)
}

func (o *ApproveReleaseBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseBadRequest %s", 400, payload)
}

func (o *ApproveReleaseBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ApproveReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveReleaseNotFound creates a ApproveReleaseNotFound with default headers values
func NewApproveReleaseNotFound() *ApproveReleaseNotFound {
	return &ApproveReleaseNotFound{}
}

/*
ApproveReleaseNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ApproveReleaseNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this approve release not found response has a 2xx status code
func (o *ApproveReleaseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this approve release not found response has a 3xx status code
func (o *ApproveReleaseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve release not found response has a 4xx status code
func (o *ApproveReleaseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this approve release not found response has a 5xx status code
func (o *ApproveReleaseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this approve release not found response a status code equal to that given
func (o *ApproveReleaseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the approve release not found response
func (o *ApproveReleaseNotFound) Code() int {
	return 404
}

func (o *ApproveReleaseNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseNotFound %s", 404, payload)
}

func (o *ApproveReleaseNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseNotFound %s", 404, payload)
}

func (o *ApproveReleaseNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ApproveReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveReleaseMethodNotAllowed creates a ApproveReleaseMethodNotAllowed with default headers values
func NewApproveReleaseMethodNotAllowed() *ApproveReleaseMethodNotAllowed {
	return &ApproveReleaseMethodNotAllowed{}
}

/*
ApproveReleaseMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ApproveReleaseMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this approve release method not allowed response has a 2xx status code
func (o *ApproveReleaseMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this approve release method not allowed response has a 3xx status code
func (o *ApproveReleaseMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve release method not allowed response has a 4xx status code
func (o *ApproveReleaseMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this approve release method not allowed response has a 5xx status code
func (o *ApproveReleaseMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this approve release method not allowed response a status code equal to that given
func (o *ApproveReleaseMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the approve release method not allowed response
func (o *ApproveReleaseMethodNotAllowed) Code() int {
	return 405
}

func (o *ApproveReleaseMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseMethodNotAllowed %s", 405, payload)
}

func (o *ApproveReleaseMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseMethodNotAllowed %s", 405, payload)
}

func (o *ApproveReleaseMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ApproveReleaseMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveReleaseInternalServerError creates a ApproveReleaseInternalServerError with default headers values
func NewApproveReleaseInternalServerError() *ApproveReleaseInternalServerError {
	return &ApproveReleaseInternalServerError{}
}

/*
ApproveReleaseInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ApproveReleaseInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this approve release internal server error response has a 2xx status code
func (o *ApproveReleaseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this approve release internal server error response has a 3xx status code
func (o *ApproveReleaseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve release internal server error response has a 4xx status code
func (o *ApproveReleaseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this approve release internal server error response has a 5xx status code
func (o *ApproveReleaseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this approve release internal server error response a status code equal to that given
func (o *ApproveReleaseInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the approve release internal server error response
func (o *ApproveReleaseInternalServerError) Code() int {
	return 500
}

func (o *ApproveReleaseInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseInternalServerError %s", 500, payload)
}

func (o *ApproveReleaseInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseInternalServerError %s", 500, payload)
}

func (o *ApproveReleaseInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ApproveReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
