// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// CleanS3SourcesUsingDELETEReader is a Reader for the CleanS3SourcesUsingDELETE structure.
type CleanS3SourcesUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CleanS3SourcesUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCleanS3SourcesUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewCleanS3SourcesUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCleanS3SourcesUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCleanS3SourcesUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/clusters/{clusterId}/deployments/clean-s3-sources] cleanS3SourcesUsingDELETE", response, response.Code())
	}
}

// NewCleanS3SourcesUsingDELETEOK creates a CleanS3SourcesUsingDELETEOK with default headers values
func NewCleanS3SourcesUsingDELETEOK() *CleanS3SourcesUsingDELETEOK {
	return &CleanS3SourcesUsingDELETEOK{}
}

/*
CleanS3SourcesUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type CleanS3SourcesUsingDELETEOK struct {
}

// IsSuccess returns true when this clean s3 sources using d e l e t e o k response has a 2xx status code
func (o *CleanS3SourcesUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this clean s3 sources using d e l e t e o k response has a 3xx status code
func (o *CleanS3SourcesUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clean s3 sources using d e l e t e o k response has a 4xx status code
func (o *CleanS3SourcesUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this clean s3 sources using d e l e t e o k response has a 5xx status code
func (o *CleanS3SourcesUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this clean s3 sources using d e l e t e o k response a status code equal to that given
func (o *CleanS3SourcesUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the clean s3 sources using d e l e t e o k response
func (o *CleanS3SourcesUsingDELETEOK) Code() int {
	return 200
}

func (o *CleanS3SourcesUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/deployments/clean-s3-sources][%d] cleanS3SourcesUsingDELETEOK", 200)
}

func (o *CleanS3SourcesUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/deployments/clean-s3-sources][%d] cleanS3SourcesUsingDELETEOK", 200)
}

func (o *CleanS3SourcesUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCleanS3SourcesUsingDELETENoContent creates a CleanS3SourcesUsingDELETENoContent with default headers values
func NewCleanS3SourcesUsingDELETENoContent() *CleanS3SourcesUsingDELETENoContent {
	return &CleanS3SourcesUsingDELETENoContent{}
}

/*
CleanS3SourcesUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type CleanS3SourcesUsingDELETENoContent struct {
}

// IsSuccess returns true when this clean s3 sources using d e l e t e no content response has a 2xx status code
func (o *CleanS3SourcesUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this clean s3 sources using d e l e t e no content response has a 3xx status code
func (o *CleanS3SourcesUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clean s3 sources using d e l e t e no content response has a 4xx status code
func (o *CleanS3SourcesUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this clean s3 sources using d e l e t e no content response has a 5xx status code
func (o *CleanS3SourcesUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this clean s3 sources using d e l e t e no content response a status code equal to that given
func (o *CleanS3SourcesUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the clean s3 sources using d e l e t e no content response
func (o *CleanS3SourcesUsingDELETENoContent) Code() int {
	return 204
}

func (o *CleanS3SourcesUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/deployments/clean-s3-sources][%d] cleanS3SourcesUsingDELETENoContent", 204)
}

func (o *CleanS3SourcesUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/deployments/clean-s3-sources][%d] cleanS3SourcesUsingDELETENoContent", 204)
}

func (o *CleanS3SourcesUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCleanS3SourcesUsingDELETEUnauthorized creates a CleanS3SourcesUsingDELETEUnauthorized with default headers values
func NewCleanS3SourcesUsingDELETEUnauthorized() *CleanS3SourcesUsingDELETEUnauthorized {
	return &CleanS3SourcesUsingDELETEUnauthorized{}
}

/*
CleanS3SourcesUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CleanS3SourcesUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this clean s3 sources using d e l e t e unauthorized response has a 2xx status code
func (o *CleanS3SourcesUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clean s3 sources using d e l e t e unauthorized response has a 3xx status code
func (o *CleanS3SourcesUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clean s3 sources using d e l e t e unauthorized response has a 4xx status code
func (o *CleanS3SourcesUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this clean s3 sources using d e l e t e unauthorized response has a 5xx status code
func (o *CleanS3SourcesUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this clean s3 sources using d e l e t e unauthorized response a status code equal to that given
func (o *CleanS3SourcesUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the clean s3 sources using d e l e t e unauthorized response
func (o *CleanS3SourcesUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *CleanS3SourcesUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/deployments/clean-s3-sources][%d] cleanS3SourcesUsingDELETEUnauthorized", 401)
}

func (o *CleanS3SourcesUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/deployments/clean-s3-sources][%d] cleanS3SourcesUsingDELETEUnauthorized", 401)
}

func (o *CleanS3SourcesUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCleanS3SourcesUsingDELETEForbidden creates a CleanS3SourcesUsingDELETEForbidden with default headers values
func NewCleanS3SourcesUsingDELETEForbidden() *CleanS3SourcesUsingDELETEForbidden {
	return &CleanS3SourcesUsingDELETEForbidden{}
}

/*
CleanS3SourcesUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CleanS3SourcesUsingDELETEForbidden struct {
}

// IsSuccess returns true when this clean s3 sources using d e l e t e forbidden response has a 2xx status code
func (o *CleanS3SourcesUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clean s3 sources using d e l e t e forbidden response has a 3xx status code
func (o *CleanS3SourcesUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clean s3 sources using d e l e t e forbidden response has a 4xx status code
func (o *CleanS3SourcesUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this clean s3 sources using d e l e t e forbidden response has a 5xx status code
func (o *CleanS3SourcesUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this clean s3 sources using d e l e t e forbidden response a status code equal to that given
func (o *CleanS3SourcesUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the clean s3 sources using d e l e t e forbidden response
func (o *CleanS3SourcesUsingDELETEForbidden) Code() int {
	return 403
}

func (o *CleanS3SourcesUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/deployments/clean-s3-sources][%d] cleanS3SourcesUsingDELETEForbidden", 403)
}

func (o *CleanS3SourcesUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/clusters/{clusterId}/deployments/clean-s3-sources][%d] cleanS3SourcesUsingDELETEForbidden", 403)
}

func (o *CleanS3SourcesUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
