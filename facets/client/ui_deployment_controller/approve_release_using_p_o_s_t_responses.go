// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ApproveReleaseUsingPOSTReader is a Reader for the ApproveReleaseUsingPOST structure.
type ApproveReleaseUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApproveReleaseUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewApproveReleaseUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewApproveReleaseUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewApproveReleaseUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewApproveReleaseUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewApproveReleaseUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease] approveReleaseUsingPOST", response, response.Code())
	}
}

// NewApproveReleaseUsingPOSTOK creates a ApproveReleaseUsingPOSTOK with default headers values
func NewApproveReleaseUsingPOSTOK() *ApproveReleaseUsingPOSTOK {
	return &ApproveReleaseUsingPOSTOK{}
}

/*
ApproveReleaseUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type ApproveReleaseUsingPOSTOK struct {
	Payload *models.DeploymentLog
}

// IsSuccess returns true when this approve release using p o s t o k response has a 2xx status code
func (o *ApproveReleaseUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this approve release using p o s t o k response has a 3xx status code
func (o *ApproveReleaseUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve release using p o s t o k response has a 4xx status code
func (o *ApproveReleaseUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this approve release using p o s t o k response has a 5xx status code
func (o *ApproveReleaseUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this approve release using p o s t o k response a status code equal to that given
func (o *ApproveReleaseUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the approve release using p o s t o k response
func (o *ApproveReleaseUsingPOSTOK) Code() int {
	return 200
}

func (o *ApproveReleaseUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseUsingPOSTOK %s", 200, payload)
}

func (o *ApproveReleaseUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseUsingPOSTOK %s", 200, payload)
}

func (o *ApproveReleaseUsingPOSTOK) GetPayload() *models.DeploymentLog {
	return o.Payload
}

func (o *ApproveReleaseUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveReleaseUsingPOSTCreated creates a ApproveReleaseUsingPOSTCreated with default headers values
func NewApproveReleaseUsingPOSTCreated() *ApproveReleaseUsingPOSTCreated {
	return &ApproveReleaseUsingPOSTCreated{}
}

/*
ApproveReleaseUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type ApproveReleaseUsingPOSTCreated struct {
}

// IsSuccess returns true when this approve release using p o s t created response has a 2xx status code
func (o *ApproveReleaseUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this approve release using p o s t created response has a 3xx status code
func (o *ApproveReleaseUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve release using p o s t created response has a 4xx status code
func (o *ApproveReleaseUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this approve release using p o s t created response has a 5xx status code
func (o *ApproveReleaseUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this approve release using p o s t created response a status code equal to that given
func (o *ApproveReleaseUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the approve release using p o s t created response
func (o *ApproveReleaseUsingPOSTCreated) Code() int {
	return 201
}

func (o *ApproveReleaseUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseUsingPOSTCreated", 201)
}

func (o *ApproveReleaseUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseUsingPOSTCreated", 201)
}

func (o *ApproveReleaseUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewApproveReleaseUsingPOSTUnauthorized creates a ApproveReleaseUsingPOSTUnauthorized with default headers values
func NewApproveReleaseUsingPOSTUnauthorized() *ApproveReleaseUsingPOSTUnauthorized {
	return &ApproveReleaseUsingPOSTUnauthorized{}
}

/*
ApproveReleaseUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ApproveReleaseUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this approve release using p o s t unauthorized response has a 2xx status code
func (o *ApproveReleaseUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this approve release using p o s t unauthorized response has a 3xx status code
func (o *ApproveReleaseUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve release using p o s t unauthorized response has a 4xx status code
func (o *ApproveReleaseUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this approve release using p o s t unauthorized response has a 5xx status code
func (o *ApproveReleaseUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this approve release using p o s t unauthorized response a status code equal to that given
func (o *ApproveReleaseUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the approve release using p o s t unauthorized response
func (o *ApproveReleaseUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *ApproveReleaseUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseUsingPOSTUnauthorized", 401)
}

func (o *ApproveReleaseUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseUsingPOSTUnauthorized", 401)
}

func (o *ApproveReleaseUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewApproveReleaseUsingPOSTForbidden creates a ApproveReleaseUsingPOSTForbidden with default headers values
func NewApproveReleaseUsingPOSTForbidden() *ApproveReleaseUsingPOSTForbidden {
	return &ApproveReleaseUsingPOSTForbidden{}
}

/*
ApproveReleaseUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ApproveReleaseUsingPOSTForbidden struct {
}

// IsSuccess returns true when this approve release using p o s t forbidden response has a 2xx status code
func (o *ApproveReleaseUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this approve release using p o s t forbidden response has a 3xx status code
func (o *ApproveReleaseUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve release using p o s t forbidden response has a 4xx status code
func (o *ApproveReleaseUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this approve release using p o s t forbidden response has a 5xx status code
func (o *ApproveReleaseUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this approve release using p o s t forbidden response a status code equal to that given
func (o *ApproveReleaseUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the approve release using p o s t forbidden response
func (o *ApproveReleaseUsingPOSTForbidden) Code() int {
	return 403
}

func (o *ApproveReleaseUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseUsingPOSTForbidden", 403)
}

func (o *ApproveReleaseUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseUsingPOSTForbidden", 403)
}

func (o *ApproveReleaseUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewApproveReleaseUsingPOSTNotFound creates a ApproveReleaseUsingPOSTNotFound with default headers values
func NewApproveReleaseUsingPOSTNotFound() *ApproveReleaseUsingPOSTNotFound {
	return &ApproveReleaseUsingPOSTNotFound{}
}

/*
ApproveReleaseUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ApproveReleaseUsingPOSTNotFound struct {
}

// IsSuccess returns true when this approve release using p o s t not found response has a 2xx status code
func (o *ApproveReleaseUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this approve release using p o s t not found response has a 3xx status code
func (o *ApproveReleaseUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve release using p o s t not found response has a 4xx status code
func (o *ApproveReleaseUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this approve release using p o s t not found response has a 5xx status code
func (o *ApproveReleaseUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this approve release using p o s t not found response a status code equal to that given
func (o *ApproveReleaseUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the approve release using p o s t not found response
func (o *ApproveReleaseUsingPOSTNotFound) Code() int {
	return 404
}

func (o *ApproveReleaseUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseUsingPOSTNotFound", 404)
}

func (o *ApproveReleaseUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease][%d] approveReleaseUsingPOSTNotFound", 404)
}

func (o *ApproveReleaseUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
