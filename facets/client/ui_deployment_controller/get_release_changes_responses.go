// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetReleaseChangesReader is a Reader for the GetReleaseChanges structure.
type GetReleaseChangesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReleaseChangesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReleaseChangesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetReleaseChangesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReleaseChangesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetReleaseChangesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetReleaseChangesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/release-changes] getReleaseChanges", response, response.Code())
	}
}

// NewGetReleaseChangesOK creates a GetReleaseChangesOK with default headers values
func NewGetReleaseChangesOK() *GetReleaseChangesOK {
	return &GetReleaseChangesOK{}
}

/*
GetReleaseChangesOK describes a response with status code 200, with default header values.

OK
*/
type GetReleaseChangesOK struct {
	Payload *models.ReleaseChanges
}

// IsSuccess returns true when this get release changes o k response has a 2xx status code
func (o *GetReleaseChangesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get release changes o k response has a 3xx status code
func (o *GetReleaseChangesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release changes o k response has a 4xx status code
func (o *GetReleaseChangesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get release changes o k response has a 5xx status code
func (o *GetReleaseChangesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get release changes o k response a status code equal to that given
func (o *GetReleaseChangesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get release changes o k response
func (o *GetReleaseChangesOK) Code() int {
	return 200
}

func (o *GetReleaseChangesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/release-changes][%d] getReleaseChangesOK %s", 200, payload)
}

func (o *GetReleaseChangesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/release-changes][%d] getReleaseChangesOK %s", 200, payload)
}

func (o *GetReleaseChangesOK) GetPayload() *models.ReleaseChanges {
	return o.Payload
}

func (o *GetReleaseChangesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReleaseChanges)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseChangesBadRequest creates a GetReleaseChangesBadRequest with default headers values
func NewGetReleaseChangesBadRequest() *GetReleaseChangesBadRequest {
	return &GetReleaseChangesBadRequest{}
}

/*
GetReleaseChangesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetReleaseChangesBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get release changes bad request response has a 2xx status code
func (o *GetReleaseChangesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release changes bad request response has a 3xx status code
func (o *GetReleaseChangesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release changes bad request response has a 4xx status code
func (o *GetReleaseChangesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release changes bad request response has a 5xx status code
func (o *GetReleaseChangesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get release changes bad request response a status code equal to that given
func (o *GetReleaseChangesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get release changes bad request response
func (o *GetReleaseChangesBadRequest) Code() int {
	return 400
}

func (o *GetReleaseChangesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/release-changes][%d] getReleaseChangesBadRequest %s", 400, payload)
}

func (o *GetReleaseChangesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/release-changes][%d] getReleaseChangesBadRequest %s", 400, payload)
}

func (o *GetReleaseChangesBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetReleaseChangesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseChangesNotFound creates a GetReleaseChangesNotFound with default headers values
func NewGetReleaseChangesNotFound() *GetReleaseChangesNotFound {
	return &GetReleaseChangesNotFound{}
}

/*
GetReleaseChangesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetReleaseChangesNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get release changes not found response has a 2xx status code
func (o *GetReleaseChangesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release changes not found response has a 3xx status code
func (o *GetReleaseChangesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release changes not found response has a 4xx status code
func (o *GetReleaseChangesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release changes not found response has a 5xx status code
func (o *GetReleaseChangesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get release changes not found response a status code equal to that given
func (o *GetReleaseChangesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get release changes not found response
func (o *GetReleaseChangesNotFound) Code() int {
	return 404
}

func (o *GetReleaseChangesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/release-changes][%d] getReleaseChangesNotFound %s", 404, payload)
}

func (o *GetReleaseChangesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/release-changes][%d] getReleaseChangesNotFound %s", 404, payload)
}

func (o *GetReleaseChangesNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetReleaseChangesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseChangesMethodNotAllowed creates a GetReleaseChangesMethodNotAllowed with default headers values
func NewGetReleaseChangesMethodNotAllowed() *GetReleaseChangesMethodNotAllowed {
	return &GetReleaseChangesMethodNotAllowed{}
}

/*
GetReleaseChangesMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetReleaseChangesMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get release changes method not allowed response has a 2xx status code
func (o *GetReleaseChangesMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release changes method not allowed response has a 3xx status code
func (o *GetReleaseChangesMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release changes method not allowed response has a 4xx status code
func (o *GetReleaseChangesMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release changes method not allowed response has a 5xx status code
func (o *GetReleaseChangesMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get release changes method not allowed response a status code equal to that given
func (o *GetReleaseChangesMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get release changes method not allowed response
func (o *GetReleaseChangesMethodNotAllowed) Code() int {
	return 405
}

func (o *GetReleaseChangesMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/release-changes][%d] getReleaseChangesMethodNotAllowed %s", 405, payload)
}

func (o *GetReleaseChangesMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/release-changes][%d] getReleaseChangesMethodNotAllowed %s", 405, payload)
}

func (o *GetReleaseChangesMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetReleaseChangesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseChangesInternalServerError creates a GetReleaseChangesInternalServerError with default headers values
func NewGetReleaseChangesInternalServerError() *GetReleaseChangesInternalServerError {
	return &GetReleaseChangesInternalServerError{}
}

/*
GetReleaseChangesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetReleaseChangesInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get release changes internal server error response has a 2xx status code
func (o *GetReleaseChangesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release changes internal server error response has a 3xx status code
func (o *GetReleaseChangesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release changes internal server error response has a 4xx status code
func (o *GetReleaseChangesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get release changes internal server error response has a 5xx status code
func (o *GetReleaseChangesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get release changes internal server error response a status code equal to that given
func (o *GetReleaseChangesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get release changes internal server error response
func (o *GetReleaseChangesInternalServerError) Code() int {
	return 500
}

func (o *GetReleaseChangesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/release-changes][%d] getReleaseChangesInternalServerError %s", 500, payload)
}

func (o *GetReleaseChangesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/release-changes][%d] getReleaseChangesInternalServerError %s", 500, payload)
}

func (o *GetReleaseChangesInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetReleaseChangesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
