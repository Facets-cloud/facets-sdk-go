// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RunHotfixDeploymentRecipeReader is a Reader for the RunHotfixDeploymentRecipe structure.
type RunHotfixDeploymentRecipeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunHotfixDeploymentRecipeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunHotfixDeploymentRecipeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRunHotfixDeploymentRecipeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRunHotfixDeploymentRecipeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRunHotfixDeploymentRecipeMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRunHotfixDeploymentRecipeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/deployments/recipes/deployment/hotfix] runHotfixDeploymentRecipe", response, response.Code())
	}
}

// NewRunHotfixDeploymentRecipeOK creates a RunHotfixDeploymentRecipeOK with default headers values
func NewRunHotfixDeploymentRecipeOK() *RunHotfixDeploymentRecipeOK {
	return &RunHotfixDeploymentRecipeOK{}
}

/*
RunHotfixDeploymentRecipeOK describes a response with status code 200, with default header values.

OK
*/
type RunHotfixDeploymentRecipeOK struct {
	Payload *models.DeploymentLog
}

// IsSuccess returns true when this run hotfix deployment recipe o k response has a 2xx status code
func (o *RunHotfixDeploymentRecipeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this run hotfix deployment recipe o k response has a 3xx status code
func (o *RunHotfixDeploymentRecipeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run hotfix deployment recipe o k response has a 4xx status code
func (o *RunHotfixDeploymentRecipeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this run hotfix deployment recipe o k response has a 5xx status code
func (o *RunHotfixDeploymentRecipeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this run hotfix deployment recipe o k response a status code equal to that given
func (o *RunHotfixDeploymentRecipeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the run hotfix deployment recipe o k response
func (o *RunHotfixDeploymentRecipeOK) Code() int {
	return 200
}

func (o *RunHotfixDeploymentRecipeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/recipes/deployment/hotfix][%d] runHotfixDeploymentRecipeOK %s", 200, payload)
}

func (o *RunHotfixDeploymentRecipeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/recipes/deployment/hotfix][%d] runHotfixDeploymentRecipeOK %s", 200, payload)
}

func (o *RunHotfixDeploymentRecipeOK) GetPayload() *models.DeploymentLog {
	return o.Payload
}

func (o *RunHotfixDeploymentRecipeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunHotfixDeploymentRecipeBadRequest creates a RunHotfixDeploymentRecipeBadRequest with default headers values
func NewRunHotfixDeploymentRecipeBadRequest() *RunHotfixDeploymentRecipeBadRequest {
	return &RunHotfixDeploymentRecipeBadRequest{}
}

/*
RunHotfixDeploymentRecipeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RunHotfixDeploymentRecipeBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this run hotfix deployment recipe bad request response has a 2xx status code
func (o *RunHotfixDeploymentRecipeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run hotfix deployment recipe bad request response has a 3xx status code
func (o *RunHotfixDeploymentRecipeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run hotfix deployment recipe bad request response has a 4xx status code
func (o *RunHotfixDeploymentRecipeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this run hotfix deployment recipe bad request response has a 5xx status code
func (o *RunHotfixDeploymentRecipeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this run hotfix deployment recipe bad request response a status code equal to that given
func (o *RunHotfixDeploymentRecipeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the run hotfix deployment recipe bad request response
func (o *RunHotfixDeploymentRecipeBadRequest) Code() int {
	return 400
}

func (o *RunHotfixDeploymentRecipeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/recipes/deployment/hotfix][%d] runHotfixDeploymentRecipeBadRequest %s", 400, payload)
}

func (o *RunHotfixDeploymentRecipeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/recipes/deployment/hotfix][%d] runHotfixDeploymentRecipeBadRequest %s", 400, payload)
}

func (o *RunHotfixDeploymentRecipeBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RunHotfixDeploymentRecipeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunHotfixDeploymentRecipeNotFound creates a RunHotfixDeploymentRecipeNotFound with default headers values
func NewRunHotfixDeploymentRecipeNotFound() *RunHotfixDeploymentRecipeNotFound {
	return &RunHotfixDeploymentRecipeNotFound{}
}

/*
RunHotfixDeploymentRecipeNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RunHotfixDeploymentRecipeNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this run hotfix deployment recipe not found response has a 2xx status code
func (o *RunHotfixDeploymentRecipeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run hotfix deployment recipe not found response has a 3xx status code
func (o *RunHotfixDeploymentRecipeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run hotfix deployment recipe not found response has a 4xx status code
func (o *RunHotfixDeploymentRecipeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this run hotfix deployment recipe not found response has a 5xx status code
func (o *RunHotfixDeploymentRecipeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this run hotfix deployment recipe not found response a status code equal to that given
func (o *RunHotfixDeploymentRecipeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the run hotfix deployment recipe not found response
func (o *RunHotfixDeploymentRecipeNotFound) Code() int {
	return 404
}

func (o *RunHotfixDeploymentRecipeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/recipes/deployment/hotfix][%d] runHotfixDeploymentRecipeNotFound %s", 404, payload)
}

func (o *RunHotfixDeploymentRecipeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/recipes/deployment/hotfix][%d] runHotfixDeploymentRecipeNotFound %s", 404, payload)
}

func (o *RunHotfixDeploymentRecipeNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RunHotfixDeploymentRecipeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunHotfixDeploymentRecipeMethodNotAllowed creates a RunHotfixDeploymentRecipeMethodNotAllowed with default headers values
func NewRunHotfixDeploymentRecipeMethodNotAllowed() *RunHotfixDeploymentRecipeMethodNotAllowed {
	return &RunHotfixDeploymentRecipeMethodNotAllowed{}
}

/*
RunHotfixDeploymentRecipeMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RunHotfixDeploymentRecipeMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this run hotfix deployment recipe method not allowed response has a 2xx status code
func (o *RunHotfixDeploymentRecipeMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run hotfix deployment recipe method not allowed response has a 3xx status code
func (o *RunHotfixDeploymentRecipeMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run hotfix deployment recipe method not allowed response has a 4xx status code
func (o *RunHotfixDeploymentRecipeMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this run hotfix deployment recipe method not allowed response has a 5xx status code
func (o *RunHotfixDeploymentRecipeMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this run hotfix deployment recipe method not allowed response a status code equal to that given
func (o *RunHotfixDeploymentRecipeMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the run hotfix deployment recipe method not allowed response
func (o *RunHotfixDeploymentRecipeMethodNotAllowed) Code() int {
	return 405
}

func (o *RunHotfixDeploymentRecipeMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/recipes/deployment/hotfix][%d] runHotfixDeploymentRecipeMethodNotAllowed %s", 405, payload)
}

func (o *RunHotfixDeploymentRecipeMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/recipes/deployment/hotfix][%d] runHotfixDeploymentRecipeMethodNotAllowed %s", 405, payload)
}

func (o *RunHotfixDeploymentRecipeMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RunHotfixDeploymentRecipeMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunHotfixDeploymentRecipeInternalServerError creates a RunHotfixDeploymentRecipeInternalServerError with default headers values
func NewRunHotfixDeploymentRecipeInternalServerError() *RunHotfixDeploymentRecipeInternalServerError {
	return &RunHotfixDeploymentRecipeInternalServerError{}
}

/*
RunHotfixDeploymentRecipeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RunHotfixDeploymentRecipeInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this run hotfix deployment recipe internal server error response has a 2xx status code
func (o *RunHotfixDeploymentRecipeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run hotfix deployment recipe internal server error response has a 3xx status code
func (o *RunHotfixDeploymentRecipeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run hotfix deployment recipe internal server error response has a 4xx status code
func (o *RunHotfixDeploymentRecipeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this run hotfix deployment recipe internal server error response has a 5xx status code
func (o *RunHotfixDeploymentRecipeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this run hotfix deployment recipe internal server error response a status code equal to that given
func (o *RunHotfixDeploymentRecipeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the run hotfix deployment recipe internal server error response
func (o *RunHotfixDeploymentRecipeInternalServerError) Code() int {
	return 500
}

func (o *RunHotfixDeploymentRecipeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/recipes/deployment/hotfix][%d] runHotfixDeploymentRecipeInternalServerError %s", 500, payload)
}

func (o *RunHotfixDeploymentRecipeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/recipes/deployment/hotfix][%d] runHotfixDeploymentRecipeInternalServerError %s", 500, payload)
}

func (o *RunHotfixDeploymentRecipeInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RunHotfixDeploymentRecipeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
