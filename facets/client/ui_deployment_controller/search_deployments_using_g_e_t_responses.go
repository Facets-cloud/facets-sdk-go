// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// SearchDeploymentsUsingGETReader is a Reader for the SearchDeploymentsUsingGET structure.
type SearchDeploymentsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchDeploymentsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchDeploymentsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSearchDeploymentsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchDeploymentsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchDeploymentsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/deployments/search] searchDeploymentsUsingGET", response, response.Code())
	}
}

// NewSearchDeploymentsUsingGETOK creates a SearchDeploymentsUsingGETOK with default headers values
func NewSearchDeploymentsUsingGETOK() *SearchDeploymentsUsingGETOK {
	return &SearchDeploymentsUsingGETOK{}
}

/*
SearchDeploymentsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type SearchDeploymentsUsingGETOK struct {
	Payload *models.PageDeploymentLog
}

// IsSuccess returns true when this search deployments using g e t o k response has a 2xx status code
func (o *SearchDeploymentsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search deployments using g e t o k response has a 3xx status code
func (o *SearchDeploymentsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search deployments using g e t o k response has a 4xx status code
func (o *SearchDeploymentsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search deployments using g e t o k response has a 5xx status code
func (o *SearchDeploymentsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search deployments using g e t o k response a status code equal to that given
func (o *SearchDeploymentsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the search deployments using g e t o k response
func (o *SearchDeploymentsUsingGETOK) Code() int {
	return 200
}

func (o *SearchDeploymentsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/search][%d] searchDeploymentsUsingGETOK %s", 200, payload)
}

func (o *SearchDeploymentsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/search][%d] searchDeploymentsUsingGETOK %s", 200, payload)
}

func (o *SearchDeploymentsUsingGETOK) GetPayload() *models.PageDeploymentLog {
	return o.Payload
}

func (o *SearchDeploymentsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageDeploymentLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchDeploymentsUsingGETUnauthorized creates a SearchDeploymentsUsingGETUnauthorized with default headers values
func NewSearchDeploymentsUsingGETUnauthorized() *SearchDeploymentsUsingGETUnauthorized {
	return &SearchDeploymentsUsingGETUnauthorized{}
}

/*
SearchDeploymentsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SearchDeploymentsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this search deployments using g e t unauthorized response has a 2xx status code
func (o *SearchDeploymentsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search deployments using g e t unauthorized response has a 3xx status code
func (o *SearchDeploymentsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search deployments using g e t unauthorized response has a 4xx status code
func (o *SearchDeploymentsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this search deployments using g e t unauthorized response has a 5xx status code
func (o *SearchDeploymentsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this search deployments using g e t unauthorized response a status code equal to that given
func (o *SearchDeploymentsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the search deployments using g e t unauthorized response
func (o *SearchDeploymentsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *SearchDeploymentsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/search][%d] searchDeploymentsUsingGETUnauthorized", 401)
}

func (o *SearchDeploymentsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/search][%d] searchDeploymentsUsingGETUnauthorized", 401)
}

func (o *SearchDeploymentsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchDeploymentsUsingGETForbidden creates a SearchDeploymentsUsingGETForbidden with default headers values
func NewSearchDeploymentsUsingGETForbidden() *SearchDeploymentsUsingGETForbidden {
	return &SearchDeploymentsUsingGETForbidden{}
}

/*
SearchDeploymentsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SearchDeploymentsUsingGETForbidden struct {
}

// IsSuccess returns true when this search deployments using g e t forbidden response has a 2xx status code
func (o *SearchDeploymentsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search deployments using g e t forbidden response has a 3xx status code
func (o *SearchDeploymentsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search deployments using g e t forbidden response has a 4xx status code
func (o *SearchDeploymentsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search deployments using g e t forbidden response has a 5xx status code
func (o *SearchDeploymentsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search deployments using g e t forbidden response a status code equal to that given
func (o *SearchDeploymentsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the search deployments using g e t forbidden response
func (o *SearchDeploymentsUsingGETForbidden) Code() int {
	return 403
}

func (o *SearchDeploymentsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/search][%d] searchDeploymentsUsingGETForbidden", 403)
}

func (o *SearchDeploymentsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/search][%d] searchDeploymentsUsingGETForbidden", 403)
}

func (o *SearchDeploymentsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchDeploymentsUsingGETNotFound creates a SearchDeploymentsUsingGETNotFound with default headers values
func NewSearchDeploymentsUsingGETNotFound() *SearchDeploymentsUsingGETNotFound {
	return &SearchDeploymentsUsingGETNotFound{}
}

/*
SearchDeploymentsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SearchDeploymentsUsingGETNotFound struct {
}

// IsSuccess returns true when this search deployments using g e t not found response has a 2xx status code
func (o *SearchDeploymentsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search deployments using g e t not found response has a 3xx status code
func (o *SearchDeploymentsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search deployments using g e t not found response has a 4xx status code
func (o *SearchDeploymentsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search deployments using g e t not found response has a 5xx status code
func (o *SearchDeploymentsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search deployments using g e t not found response a status code equal to that given
func (o *SearchDeploymentsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the search deployments using g e t not found response
func (o *SearchDeploymentsUsingGETNotFound) Code() int {
	return 404
}

func (o *SearchDeploymentsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/search][%d] searchDeploymentsUsingGETNotFound", 404)
}

func (o *SearchDeploymentsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/search][%d] searchDeploymentsUsingGETNotFound", 404)
}

func (o *SearchDeploymentsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
