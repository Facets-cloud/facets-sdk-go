// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// TriggerRollbackPlanReleaseReader is a Reader for the TriggerRollbackPlanRelease structure.
type TriggerRollbackPlanReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TriggerRollbackPlanReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTriggerRollbackPlanReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTriggerRollbackPlanReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTriggerRollbackPlanReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewTriggerRollbackPlanReleaseMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTriggerRollbackPlanReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/{resourceType}/{resourceName}/rollback-plan] triggerRollbackPlanRelease", response, response.Code())
	}
}

// NewTriggerRollbackPlanReleaseOK creates a TriggerRollbackPlanReleaseOK with default headers values
func NewTriggerRollbackPlanReleaseOK() *TriggerRollbackPlanReleaseOK {
	return &TriggerRollbackPlanReleaseOK{}
}

/*
TriggerRollbackPlanReleaseOK describes a response with status code 200, with default header values.

OK
*/
type TriggerRollbackPlanReleaseOK struct {
	Payload *models.DeploymentLog
}

// IsSuccess returns true when this trigger rollback plan release o k response has a 2xx status code
func (o *TriggerRollbackPlanReleaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this trigger rollback plan release o k response has a 3xx status code
func (o *TriggerRollbackPlanReleaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this trigger rollback plan release o k response has a 4xx status code
func (o *TriggerRollbackPlanReleaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this trigger rollback plan release o k response has a 5xx status code
func (o *TriggerRollbackPlanReleaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this trigger rollback plan release o k response a status code equal to that given
func (o *TriggerRollbackPlanReleaseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the trigger rollback plan release o k response
func (o *TriggerRollbackPlanReleaseOK) Code() int {
	return 200
}

func (o *TriggerRollbackPlanReleaseOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/{resourceType}/{resourceName}/rollback-plan][%d] triggerRollbackPlanReleaseOK %s", 200, payload)
}

func (o *TriggerRollbackPlanReleaseOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/{resourceType}/{resourceName}/rollback-plan][%d] triggerRollbackPlanReleaseOK %s", 200, payload)
}

func (o *TriggerRollbackPlanReleaseOK) GetPayload() *models.DeploymentLog {
	return o.Payload
}

func (o *TriggerRollbackPlanReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTriggerRollbackPlanReleaseBadRequest creates a TriggerRollbackPlanReleaseBadRequest with default headers values
func NewTriggerRollbackPlanReleaseBadRequest() *TriggerRollbackPlanReleaseBadRequest {
	return &TriggerRollbackPlanReleaseBadRequest{}
}

/*
TriggerRollbackPlanReleaseBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type TriggerRollbackPlanReleaseBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this trigger rollback plan release bad request response has a 2xx status code
func (o *TriggerRollbackPlanReleaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this trigger rollback plan release bad request response has a 3xx status code
func (o *TriggerRollbackPlanReleaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this trigger rollback plan release bad request response has a 4xx status code
func (o *TriggerRollbackPlanReleaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this trigger rollback plan release bad request response has a 5xx status code
func (o *TriggerRollbackPlanReleaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this trigger rollback plan release bad request response a status code equal to that given
func (o *TriggerRollbackPlanReleaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the trigger rollback plan release bad request response
func (o *TriggerRollbackPlanReleaseBadRequest) Code() int {
	return 400
}

func (o *TriggerRollbackPlanReleaseBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/{resourceType}/{resourceName}/rollback-plan][%d] triggerRollbackPlanReleaseBadRequest %s", 400, payload)
}

func (o *TriggerRollbackPlanReleaseBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/{resourceType}/{resourceName}/rollback-plan][%d] triggerRollbackPlanReleaseBadRequest %s", 400, payload)
}

func (o *TriggerRollbackPlanReleaseBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *TriggerRollbackPlanReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTriggerRollbackPlanReleaseNotFound creates a TriggerRollbackPlanReleaseNotFound with default headers values
func NewTriggerRollbackPlanReleaseNotFound() *TriggerRollbackPlanReleaseNotFound {
	return &TriggerRollbackPlanReleaseNotFound{}
}

/*
TriggerRollbackPlanReleaseNotFound describes a response with status code 404, with default header values.

Not Found
*/
type TriggerRollbackPlanReleaseNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this trigger rollback plan release not found response has a 2xx status code
func (o *TriggerRollbackPlanReleaseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this trigger rollback plan release not found response has a 3xx status code
func (o *TriggerRollbackPlanReleaseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this trigger rollback plan release not found response has a 4xx status code
func (o *TriggerRollbackPlanReleaseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this trigger rollback plan release not found response has a 5xx status code
func (o *TriggerRollbackPlanReleaseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this trigger rollback plan release not found response a status code equal to that given
func (o *TriggerRollbackPlanReleaseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the trigger rollback plan release not found response
func (o *TriggerRollbackPlanReleaseNotFound) Code() int {
	return 404
}

func (o *TriggerRollbackPlanReleaseNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/{resourceType}/{resourceName}/rollback-plan][%d] triggerRollbackPlanReleaseNotFound %s", 404, payload)
}

func (o *TriggerRollbackPlanReleaseNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/{resourceType}/{resourceName}/rollback-plan][%d] triggerRollbackPlanReleaseNotFound %s", 404, payload)
}

func (o *TriggerRollbackPlanReleaseNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *TriggerRollbackPlanReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTriggerRollbackPlanReleaseMethodNotAllowed creates a TriggerRollbackPlanReleaseMethodNotAllowed with default headers values
func NewTriggerRollbackPlanReleaseMethodNotAllowed() *TriggerRollbackPlanReleaseMethodNotAllowed {
	return &TriggerRollbackPlanReleaseMethodNotAllowed{}
}

/*
TriggerRollbackPlanReleaseMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type TriggerRollbackPlanReleaseMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this trigger rollback plan release method not allowed response has a 2xx status code
func (o *TriggerRollbackPlanReleaseMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this trigger rollback plan release method not allowed response has a 3xx status code
func (o *TriggerRollbackPlanReleaseMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this trigger rollback plan release method not allowed response has a 4xx status code
func (o *TriggerRollbackPlanReleaseMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this trigger rollback plan release method not allowed response has a 5xx status code
func (o *TriggerRollbackPlanReleaseMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this trigger rollback plan release method not allowed response a status code equal to that given
func (o *TriggerRollbackPlanReleaseMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the trigger rollback plan release method not allowed response
func (o *TriggerRollbackPlanReleaseMethodNotAllowed) Code() int {
	return 405
}

func (o *TriggerRollbackPlanReleaseMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/{resourceType}/{resourceName}/rollback-plan][%d] triggerRollbackPlanReleaseMethodNotAllowed %s", 405, payload)
}

func (o *TriggerRollbackPlanReleaseMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/{resourceType}/{resourceName}/rollback-plan][%d] triggerRollbackPlanReleaseMethodNotAllowed %s", 405, payload)
}

func (o *TriggerRollbackPlanReleaseMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *TriggerRollbackPlanReleaseMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTriggerRollbackPlanReleaseInternalServerError creates a TriggerRollbackPlanReleaseInternalServerError with default headers values
func NewTriggerRollbackPlanReleaseInternalServerError() *TriggerRollbackPlanReleaseInternalServerError {
	return &TriggerRollbackPlanReleaseInternalServerError{}
}

/*
TriggerRollbackPlanReleaseInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type TriggerRollbackPlanReleaseInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this trigger rollback plan release internal server error response has a 2xx status code
func (o *TriggerRollbackPlanReleaseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this trigger rollback plan release internal server error response has a 3xx status code
func (o *TriggerRollbackPlanReleaseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this trigger rollback plan release internal server error response has a 4xx status code
func (o *TriggerRollbackPlanReleaseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this trigger rollback plan release internal server error response has a 5xx status code
func (o *TriggerRollbackPlanReleaseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this trigger rollback plan release internal server error response a status code equal to that given
func (o *TriggerRollbackPlanReleaseInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the trigger rollback plan release internal server error response
func (o *TriggerRollbackPlanReleaseInternalServerError) Code() int {
	return 500
}

func (o *TriggerRollbackPlanReleaseInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/{resourceType}/{resourceName}/rollback-plan][%d] triggerRollbackPlanReleaseInternalServerError %s", 500, payload)
}

func (o *TriggerRollbackPlanReleaseInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/{resourceType}/{resourceName}/rollback-plan][%d] triggerRollbackPlanReleaseInternalServerError %s", 500, payload)
}

func (o *TriggerRollbackPlanReleaseInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *TriggerRollbackPlanReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
