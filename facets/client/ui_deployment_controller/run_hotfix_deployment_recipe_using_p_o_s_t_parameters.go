// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// NewRunHotfixDeploymentRecipeUsingPOSTParams creates a new RunHotfixDeploymentRecipeUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRunHotfixDeploymentRecipeUsingPOSTParams() *RunHotfixDeploymentRecipeUsingPOSTParams {
	return &RunHotfixDeploymentRecipeUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRunHotfixDeploymentRecipeUsingPOSTParamsWithTimeout creates a new RunHotfixDeploymentRecipeUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewRunHotfixDeploymentRecipeUsingPOSTParamsWithTimeout(timeout time.Duration) *RunHotfixDeploymentRecipeUsingPOSTParams {
	return &RunHotfixDeploymentRecipeUsingPOSTParams{
		timeout: timeout,
	}
}

// NewRunHotfixDeploymentRecipeUsingPOSTParamsWithContext creates a new RunHotfixDeploymentRecipeUsingPOSTParams object
// with the ability to set a context for a request.
func NewRunHotfixDeploymentRecipeUsingPOSTParamsWithContext(ctx context.Context) *RunHotfixDeploymentRecipeUsingPOSTParams {
	return &RunHotfixDeploymentRecipeUsingPOSTParams{
		Context: ctx,
	}
}

// NewRunHotfixDeploymentRecipeUsingPOSTParamsWithHTTPClient creates a new RunHotfixDeploymentRecipeUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewRunHotfixDeploymentRecipeUsingPOSTParamsWithHTTPClient(client *http.Client) *RunHotfixDeploymentRecipeUsingPOSTParams {
	return &RunHotfixDeploymentRecipeUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
RunHotfixDeploymentRecipeUsingPOSTParams contains all the parameters to send to the API endpoint

	for the run hotfix deployment recipe using p o s t operation.

	Typically these are written to a http.Request.
*/
type RunHotfixDeploymentRecipeUsingPOSTParams struct {

	/* AllowDestroy.

	   allowDestroy
	*/
	AllowDestroy *bool

	/* CanQueue.

	   canQueue
	*/
	CanQueue *bool

	/* ClusterID.

	   clusterId
	*/
	ClusterID string

	/* Comment.

	   comment
	*/
	Comment *string

	/* DeploymentRecipe.

	   deploymentRecipe
	*/
	DeploymentRecipe *models.HotfixDeploymentRecipe

	/* ForceRelease.

	   forceRelease
	*/
	ForceRelease *bool

	/* IsPlan.

	   isPlan
	*/
	IsPlan *bool

	/* WithRefresh.

	   withRefresh
	*/
	WithRefresh *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the run hotfix deployment recipe using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) WithDefaults() *RunHotfixDeploymentRecipeUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the run hotfix deployment recipe using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) SetDefaults() {
	var (
		allowDestroyDefault = bool(false)

		canQueueDefault = bool(false)

		forceReleaseDefault = bool(false)

		isPlanDefault = bool(false)

		withRefreshDefault = bool(false)
	)

	val := RunHotfixDeploymentRecipeUsingPOSTParams{
		AllowDestroy: &allowDestroyDefault,
		CanQueue:     &canQueueDefault,
		ForceRelease: &forceReleaseDefault,
		IsPlan:       &isPlanDefault,
		WithRefresh:  &withRefreshDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) WithTimeout(timeout time.Duration) *RunHotfixDeploymentRecipeUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) WithContext(ctx context.Context) *RunHotfixDeploymentRecipeUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) WithHTTPClient(client *http.Client) *RunHotfixDeploymentRecipeUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowDestroy adds the allowDestroy to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) WithAllowDestroy(allowDestroy *bool) *RunHotfixDeploymentRecipeUsingPOSTParams {
	o.SetAllowDestroy(allowDestroy)
	return o
}

// SetAllowDestroy adds the allowDestroy to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) SetAllowDestroy(allowDestroy *bool) {
	o.AllowDestroy = allowDestroy
}

// WithCanQueue adds the canQueue to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) WithCanQueue(canQueue *bool) *RunHotfixDeploymentRecipeUsingPOSTParams {
	o.SetCanQueue(canQueue)
	return o
}

// SetCanQueue adds the canQueue to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) SetCanQueue(canQueue *bool) {
	o.CanQueue = canQueue
}

// WithClusterID adds the clusterID to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) WithClusterID(clusterID string) *RunHotfixDeploymentRecipeUsingPOSTParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithComment adds the comment to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) WithComment(comment *string) *RunHotfixDeploymentRecipeUsingPOSTParams {
	o.SetComment(comment)
	return o
}

// SetComment adds the comment to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) SetComment(comment *string) {
	o.Comment = comment
}

// WithDeploymentRecipe adds the deploymentRecipe to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) WithDeploymentRecipe(deploymentRecipe *models.HotfixDeploymentRecipe) *RunHotfixDeploymentRecipeUsingPOSTParams {
	o.SetDeploymentRecipe(deploymentRecipe)
	return o
}

// SetDeploymentRecipe adds the deploymentRecipe to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) SetDeploymentRecipe(deploymentRecipe *models.HotfixDeploymentRecipe) {
	o.DeploymentRecipe = deploymentRecipe
}

// WithForceRelease adds the forceRelease to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) WithForceRelease(forceRelease *bool) *RunHotfixDeploymentRecipeUsingPOSTParams {
	o.SetForceRelease(forceRelease)
	return o
}

// SetForceRelease adds the forceRelease to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) SetForceRelease(forceRelease *bool) {
	o.ForceRelease = forceRelease
}

// WithIsPlan adds the isPlan to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) WithIsPlan(isPlan *bool) *RunHotfixDeploymentRecipeUsingPOSTParams {
	o.SetIsPlan(isPlan)
	return o
}

// SetIsPlan adds the isPlan to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) SetIsPlan(isPlan *bool) {
	o.IsPlan = isPlan
}

// WithWithRefresh adds the withRefresh to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) WithWithRefresh(withRefresh *bool) *RunHotfixDeploymentRecipeUsingPOSTParams {
	o.SetWithRefresh(withRefresh)
	return o
}

// SetWithRefresh adds the withRefresh to the run hotfix deployment recipe using p o s t params
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) SetWithRefresh(withRefresh *bool) {
	o.WithRefresh = withRefresh
}

// WriteToRequest writes these params to a swagger request
func (o *RunHotfixDeploymentRecipeUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllowDestroy != nil {

		// query param allowDestroy
		var qrAllowDestroy bool

		if o.AllowDestroy != nil {
			qrAllowDestroy = *o.AllowDestroy
		}
		qAllowDestroy := swag.FormatBool(qrAllowDestroy)
		if qAllowDestroy != "" {

			if err := r.SetQueryParam("allowDestroy", qAllowDestroy); err != nil {
				return err
			}
		}
	}

	if o.CanQueue != nil {

		// query param canQueue
		var qrCanQueue bool

		if o.CanQueue != nil {
			qrCanQueue = *o.CanQueue
		}
		qCanQueue := swag.FormatBool(qrCanQueue)
		if qCanQueue != "" {

			if err := r.SetQueryParam("canQueue", qCanQueue); err != nil {
				return err
			}
		}
	}

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID); err != nil {
		return err
	}

	if o.Comment != nil {

		// query param comment
		var qrComment string

		if o.Comment != nil {
			qrComment = *o.Comment
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}
	if o.DeploymentRecipe != nil {
		if err := r.SetBodyParam(o.DeploymentRecipe); err != nil {
			return err
		}
	}

	if o.ForceRelease != nil {

		// query param forceRelease
		var qrForceRelease bool

		if o.ForceRelease != nil {
			qrForceRelease = *o.ForceRelease
		}
		qForceRelease := swag.FormatBool(qrForceRelease)
		if qForceRelease != "" {

			if err := r.SetQueryParam("forceRelease", qForceRelease); err != nil {
				return err
			}
		}
	}

	if o.IsPlan != nil {

		// query param isPlan
		var qrIsPlan bool

		if o.IsPlan != nil {
			qrIsPlan = *o.IsPlan
		}
		qIsPlan := swag.FormatBool(qrIsPlan)
		if qIsPlan != "" {

			if err := r.SetQueryParam("isPlan", qIsPlan); err != nil {
				return err
			}
		}
	}

	if o.WithRefresh != nil {

		// query param withRefresh
		var qrWithRefresh bool

		if o.WithRefresh != nil {
			qrWithRefresh = *o.WithRefresh
		}
		qWithRefresh := swag.FormatBool(qrWithRefresh)
		if qWithRefresh != "" {

			if err := r.SetQueryParam("withRefresh", qWithRefresh); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
