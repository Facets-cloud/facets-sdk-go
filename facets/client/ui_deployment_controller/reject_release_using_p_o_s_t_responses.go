// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RejectReleaseUsingPOSTReader is a Reader for the RejectReleaseUsingPOST structure.
type RejectReleaseUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RejectReleaseUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRejectReleaseUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewRejectReleaseUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRejectReleaseUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRejectReleaseUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRejectReleaseUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease] rejectReleaseUsingPOST", response, response.Code())
	}
}

// NewRejectReleaseUsingPOSTOK creates a RejectReleaseUsingPOSTOK with default headers values
func NewRejectReleaseUsingPOSTOK() *RejectReleaseUsingPOSTOK {
	return &RejectReleaseUsingPOSTOK{}
}

/*
RejectReleaseUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type RejectReleaseUsingPOSTOK struct {
	Payload *models.DeploymentLog
}

// IsSuccess returns true when this reject release using p o s t o k response has a 2xx status code
func (o *RejectReleaseUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reject release using p o s t o k response has a 3xx status code
func (o *RejectReleaseUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject release using p o s t o k response has a 4xx status code
func (o *RejectReleaseUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this reject release using p o s t o k response has a 5xx status code
func (o *RejectReleaseUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this reject release using p o s t o k response a status code equal to that given
func (o *RejectReleaseUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the reject release using p o s t o k response
func (o *RejectReleaseUsingPOSTOK) Code() int {
	return 200
}

func (o *RejectReleaseUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseUsingPOSTOK %s", 200, payload)
}

func (o *RejectReleaseUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseUsingPOSTOK %s", 200, payload)
}

func (o *RejectReleaseUsingPOSTOK) GetPayload() *models.DeploymentLog {
	return o.Payload
}

func (o *RejectReleaseUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectReleaseUsingPOSTCreated creates a RejectReleaseUsingPOSTCreated with default headers values
func NewRejectReleaseUsingPOSTCreated() *RejectReleaseUsingPOSTCreated {
	return &RejectReleaseUsingPOSTCreated{}
}

/*
RejectReleaseUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type RejectReleaseUsingPOSTCreated struct {
}

// IsSuccess returns true when this reject release using p o s t created response has a 2xx status code
func (o *RejectReleaseUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reject release using p o s t created response has a 3xx status code
func (o *RejectReleaseUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject release using p o s t created response has a 4xx status code
func (o *RejectReleaseUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this reject release using p o s t created response has a 5xx status code
func (o *RejectReleaseUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this reject release using p o s t created response a status code equal to that given
func (o *RejectReleaseUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the reject release using p o s t created response
func (o *RejectReleaseUsingPOSTCreated) Code() int {
	return 201
}

func (o *RejectReleaseUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseUsingPOSTCreated", 201)
}

func (o *RejectReleaseUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseUsingPOSTCreated", 201)
}

func (o *RejectReleaseUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRejectReleaseUsingPOSTUnauthorized creates a RejectReleaseUsingPOSTUnauthorized with default headers values
func NewRejectReleaseUsingPOSTUnauthorized() *RejectReleaseUsingPOSTUnauthorized {
	return &RejectReleaseUsingPOSTUnauthorized{}
}

/*
RejectReleaseUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RejectReleaseUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this reject release using p o s t unauthorized response has a 2xx status code
func (o *RejectReleaseUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject release using p o s t unauthorized response has a 3xx status code
func (o *RejectReleaseUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject release using p o s t unauthorized response has a 4xx status code
func (o *RejectReleaseUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this reject release using p o s t unauthorized response has a 5xx status code
func (o *RejectReleaseUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this reject release using p o s t unauthorized response a status code equal to that given
func (o *RejectReleaseUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the reject release using p o s t unauthorized response
func (o *RejectReleaseUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *RejectReleaseUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseUsingPOSTUnauthorized", 401)
}

func (o *RejectReleaseUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseUsingPOSTUnauthorized", 401)
}

func (o *RejectReleaseUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRejectReleaseUsingPOSTForbidden creates a RejectReleaseUsingPOSTForbidden with default headers values
func NewRejectReleaseUsingPOSTForbidden() *RejectReleaseUsingPOSTForbidden {
	return &RejectReleaseUsingPOSTForbidden{}
}

/*
RejectReleaseUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RejectReleaseUsingPOSTForbidden struct {
}

// IsSuccess returns true when this reject release using p o s t forbidden response has a 2xx status code
func (o *RejectReleaseUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject release using p o s t forbidden response has a 3xx status code
func (o *RejectReleaseUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject release using p o s t forbidden response has a 4xx status code
func (o *RejectReleaseUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this reject release using p o s t forbidden response has a 5xx status code
func (o *RejectReleaseUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this reject release using p o s t forbidden response a status code equal to that given
func (o *RejectReleaseUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the reject release using p o s t forbidden response
func (o *RejectReleaseUsingPOSTForbidden) Code() int {
	return 403
}

func (o *RejectReleaseUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseUsingPOSTForbidden", 403)
}

func (o *RejectReleaseUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseUsingPOSTForbidden", 403)
}

func (o *RejectReleaseUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRejectReleaseUsingPOSTNotFound creates a RejectReleaseUsingPOSTNotFound with default headers values
func NewRejectReleaseUsingPOSTNotFound() *RejectReleaseUsingPOSTNotFound {
	return &RejectReleaseUsingPOSTNotFound{}
}

/*
RejectReleaseUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RejectReleaseUsingPOSTNotFound struct {
}

// IsSuccess returns true when this reject release using p o s t not found response has a 2xx status code
func (o *RejectReleaseUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject release using p o s t not found response has a 3xx status code
func (o *RejectReleaseUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject release using p o s t not found response has a 4xx status code
func (o *RejectReleaseUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this reject release using p o s t not found response has a 5xx status code
func (o *RejectReleaseUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this reject release using p o s t not found response a status code equal to that given
func (o *RejectReleaseUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the reject release using p o s t not found response
func (o *RejectReleaseUsingPOSTNotFound) Code() int {
	return 404
}

func (o *RejectReleaseUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseUsingPOSTNotFound", 404)
}

func (o *RejectReleaseUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseUsingPOSTNotFound", 404)
}

func (o *RejectReleaseUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
