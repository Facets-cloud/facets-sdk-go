// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetLatestReleaseUsingGETReader is a Reader for the GetLatestReleaseUsingGET structure.
type GetLatestReleaseUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLatestReleaseUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLatestReleaseUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetLatestReleaseUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLatestReleaseUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLatestReleaseUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release] getLatestReleaseUsingGET", response, response.Code())
	}
}

// NewGetLatestReleaseUsingGETOK creates a GetLatestReleaseUsingGETOK with default headers values
func NewGetLatestReleaseUsingGETOK() *GetLatestReleaseUsingGETOK {
	return &GetLatestReleaseUsingGETOK{}
}

/*
GetLatestReleaseUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetLatestReleaseUsingGETOK struct {
	Payload *models.DeploymentLog
}

// IsSuccess returns true when this get latest release using g e t o k response has a 2xx status code
func (o *GetLatestReleaseUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get latest release using g e t o k response has a 3xx status code
func (o *GetLatestReleaseUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest release using g e t o k response has a 4xx status code
func (o *GetLatestReleaseUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get latest release using g e t o k response has a 5xx status code
func (o *GetLatestReleaseUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest release using g e t o k response a status code equal to that given
func (o *GetLatestReleaseUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get latest release using g e t o k response
func (o *GetLatestReleaseUsingGETOK) Code() int {
	return 200
}

func (o *GetLatestReleaseUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseUsingGETOK %s", 200, payload)
}

func (o *GetLatestReleaseUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseUsingGETOK %s", 200, payload)
}

func (o *GetLatestReleaseUsingGETOK) GetPayload() *models.DeploymentLog {
	return o.Payload
}

func (o *GetLatestReleaseUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLatestReleaseUsingGETUnauthorized creates a GetLatestReleaseUsingGETUnauthorized with default headers values
func NewGetLatestReleaseUsingGETUnauthorized() *GetLatestReleaseUsingGETUnauthorized {
	return &GetLatestReleaseUsingGETUnauthorized{}
}

/*
GetLatestReleaseUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetLatestReleaseUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get latest release using g e t unauthorized response has a 2xx status code
func (o *GetLatestReleaseUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get latest release using g e t unauthorized response has a 3xx status code
func (o *GetLatestReleaseUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest release using g e t unauthorized response has a 4xx status code
func (o *GetLatestReleaseUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get latest release using g e t unauthorized response has a 5xx status code
func (o *GetLatestReleaseUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest release using g e t unauthorized response a status code equal to that given
func (o *GetLatestReleaseUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get latest release using g e t unauthorized response
func (o *GetLatestReleaseUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetLatestReleaseUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseUsingGETUnauthorized", 401)
}

func (o *GetLatestReleaseUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseUsingGETUnauthorized", 401)
}

func (o *GetLatestReleaseUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLatestReleaseUsingGETForbidden creates a GetLatestReleaseUsingGETForbidden with default headers values
func NewGetLatestReleaseUsingGETForbidden() *GetLatestReleaseUsingGETForbidden {
	return &GetLatestReleaseUsingGETForbidden{}
}

/*
GetLatestReleaseUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetLatestReleaseUsingGETForbidden struct {
}

// IsSuccess returns true when this get latest release using g e t forbidden response has a 2xx status code
func (o *GetLatestReleaseUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get latest release using g e t forbidden response has a 3xx status code
func (o *GetLatestReleaseUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest release using g e t forbidden response has a 4xx status code
func (o *GetLatestReleaseUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get latest release using g e t forbidden response has a 5xx status code
func (o *GetLatestReleaseUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest release using g e t forbidden response a status code equal to that given
func (o *GetLatestReleaseUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get latest release using g e t forbidden response
func (o *GetLatestReleaseUsingGETForbidden) Code() int {
	return 403
}

func (o *GetLatestReleaseUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseUsingGETForbidden", 403)
}

func (o *GetLatestReleaseUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseUsingGETForbidden", 403)
}

func (o *GetLatestReleaseUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLatestReleaseUsingGETNotFound creates a GetLatestReleaseUsingGETNotFound with default headers values
func NewGetLatestReleaseUsingGETNotFound() *GetLatestReleaseUsingGETNotFound {
	return &GetLatestReleaseUsingGETNotFound{}
}

/*
GetLatestReleaseUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetLatestReleaseUsingGETNotFound struct {
}

// IsSuccess returns true when this get latest release using g e t not found response has a 2xx status code
func (o *GetLatestReleaseUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get latest release using g e t not found response has a 3xx status code
func (o *GetLatestReleaseUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest release using g e t not found response has a 4xx status code
func (o *GetLatestReleaseUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get latest release using g e t not found response has a 5xx status code
func (o *GetLatestReleaseUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest release using g e t not found response a status code equal to that given
func (o *GetLatestReleaseUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get latest release using g e t not found response
func (o *GetLatestReleaseUsingGETNotFound) Code() int {
	return 404
}

func (o *GetLatestReleaseUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseUsingGETNotFound", 404)
}

func (o *GetLatestReleaseUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseUsingGETNotFound", 404)
}

func (o *GetLatestReleaseUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
