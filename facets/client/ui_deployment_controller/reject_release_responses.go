// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RejectReleaseReader is a Reader for the RejectRelease structure.
type RejectReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RejectReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRejectReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRejectReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRejectReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRejectReleaseMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRejectReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease] rejectRelease", response, response.Code())
	}
}

// NewRejectReleaseOK creates a RejectReleaseOK with default headers values
func NewRejectReleaseOK() *RejectReleaseOK {
	return &RejectReleaseOK{}
}

/*
RejectReleaseOK describes a response with status code 200, with default header values.

OK
*/
type RejectReleaseOK struct {
	Payload *models.DeploymentLog
}

// IsSuccess returns true when this reject release o k response has a 2xx status code
func (o *RejectReleaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reject release o k response has a 3xx status code
func (o *RejectReleaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject release o k response has a 4xx status code
func (o *RejectReleaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this reject release o k response has a 5xx status code
func (o *RejectReleaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this reject release o k response a status code equal to that given
func (o *RejectReleaseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the reject release o k response
func (o *RejectReleaseOK) Code() int {
	return 200
}

func (o *RejectReleaseOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseOK %s", 200, payload)
}

func (o *RejectReleaseOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseOK %s", 200, payload)
}

func (o *RejectReleaseOK) GetPayload() *models.DeploymentLog {
	return o.Payload
}

func (o *RejectReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectReleaseBadRequest creates a RejectReleaseBadRequest with default headers values
func NewRejectReleaseBadRequest() *RejectReleaseBadRequest {
	return &RejectReleaseBadRequest{}
}

/*
RejectReleaseBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RejectReleaseBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this reject release bad request response has a 2xx status code
func (o *RejectReleaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject release bad request response has a 3xx status code
func (o *RejectReleaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject release bad request response has a 4xx status code
func (o *RejectReleaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this reject release bad request response has a 5xx status code
func (o *RejectReleaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this reject release bad request response a status code equal to that given
func (o *RejectReleaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the reject release bad request response
func (o *RejectReleaseBadRequest) Code() int {
	return 400
}

func (o *RejectReleaseBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseBadRequest %s", 400, payload)
}

func (o *RejectReleaseBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseBadRequest %s", 400, payload)
}

func (o *RejectReleaseBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RejectReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectReleaseNotFound creates a RejectReleaseNotFound with default headers values
func NewRejectReleaseNotFound() *RejectReleaseNotFound {
	return &RejectReleaseNotFound{}
}

/*
RejectReleaseNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RejectReleaseNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this reject release not found response has a 2xx status code
func (o *RejectReleaseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject release not found response has a 3xx status code
func (o *RejectReleaseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject release not found response has a 4xx status code
func (o *RejectReleaseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this reject release not found response has a 5xx status code
func (o *RejectReleaseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this reject release not found response a status code equal to that given
func (o *RejectReleaseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the reject release not found response
func (o *RejectReleaseNotFound) Code() int {
	return 404
}

func (o *RejectReleaseNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseNotFound %s", 404, payload)
}

func (o *RejectReleaseNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseNotFound %s", 404, payload)
}

func (o *RejectReleaseNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RejectReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectReleaseMethodNotAllowed creates a RejectReleaseMethodNotAllowed with default headers values
func NewRejectReleaseMethodNotAllowed() *RejectReleaseMethodNotAllowed {
	return &RejectReleaseMethodNotAllowed{}
}

/*
RejectReleaseMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RejectReleaseMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this reject release method not allowed response has a 2xx status code
func (o *RejectReleaseMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject release method not allowed response has a 3xx status code
func (o *RejectReleaseMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject release method not allowed response has a 4xx status code
func (o *RejectReleaseMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this reject release method not allowed response has a 5xx status code
func (o *RejectReleaseMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this reject release method not allowed response a status code equal to that given
func (o *RejectReleaseMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the reject release method not allowed response
func (o *RejectReleaseMethodNotAllowed) Code() int {
	return 405
}

func (o *RejectReleaseMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseMethodNotAllowed %s", 405, payload)
}

func (o *RejectReleaseMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseMethodNotAllowed %s", 405, payload)
}

func (o *RejectReleaseMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RejectReleaseMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectReleaseInternalServerError creates a RejectReleaseInternalServerError with default headers values
func NewRejectReleaseInternalServerError() *RejectReleaseInternalServerError {
	return &RejectReleaseInternalServerError{}
}

/*
RejectReleaseInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RejectReleaseInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this reject release internal server error response has a 2xx status code
func (o *RejectReleaseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject release internal server error response has a 3xx status code
func (o *RejectReleaseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject release internal server error response has a 4xx status code
func (o *RejectReleaseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this reject release internal server error response has a 5xx status code
func (o *RejectReleaseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this reject release internal server error response a status code equal to that given
func (o *RejectReleaseInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the reject release internal server error response
func (o *RejectReleaseInternalServerError) Code() int {
	return 500
}

func (o *RejectReleaseInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseInternalServerError %s", 500, payload)
}

func (o *RejectReleaseInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease][%d] rejectReleaseInternalServerError %s", 500, payload)
}

func (o *RejectReleaseInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RejectReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
