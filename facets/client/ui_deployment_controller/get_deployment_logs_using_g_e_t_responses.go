// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetDeploymentLogsUsingGETReader is a Reader for the GetDeploymentLogsUsingGET structure.
type GetDeploymentLogsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeploymentLogsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeploymentLogsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDeploymentLogsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDeploymentLogsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDeploymentLogsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/logs] getDeploymentLogsUsingGET", response, response.Code())
	}
}

// NewGetDeploymentLogsUsingGETOK creates a GetDeploymentLogsUsingGETOK with default headers values
func NewGetDeploymentLogsUsingGETOK() *GetDeploymentLogsUsingGETOK {
	return &GetDeploymentLogsUsingGETOK{}
}

/*
GetDeploymentLogsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetDeploymentLogsUsingGETOK struct {
	Payload *models.TokenPaginatedResponse
}

// IsSuccess returns true when this get deployment logs using g e t o k response has a 2xx status code
func (o *GetDeploymentLogsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get deployment logs using g e t o k response has a 3xx status code
func (o *GetDeploymentLogsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployment logs using g e t o k response has a 4xx status code
func (o *GetDeploymentLogsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get deployment logs using g e t o k response has a 5xx status code
func (o *GetDeploymentLogsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get deployment logs using g e t o k response a status code equal to that given
func (o *GetDeploymentLogsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get deployment logs using g e t o k response
func (o *GetDeploymentLogsUsingGETOK) Code() int {
	return 200
}

func (o *GetDeploymentLogsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/logs][%d] getDeploymentLogsUsingGETOK %s", 200, payload)
}

func (o *GetDeploymentLogsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/logs][%d] getDeploymentLogsUsingGETOK %s", 200, payload)
}

func (o *GetDeploymentLogsUsingGETOK) GetPayload() *models.TokenPaginatedResponse {
	return o.Payload
}

func (o *GetDeploymentLogsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokenPaginatedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeploymentLogsUsingGETUnauthorized creates a GetDeploymentLogsUsingGETUnauthorized with default headers values
func NewGetDeploymentLogsUsingGETUnauthorized() *GetDeploymentLogsUsingGETUnauthorized {
	return &GetDeploymentLogsUsingGETUnauthorized{}
}

/*
GetDeploymentLogsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetDeploymentLogsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get deployment logs using g e t unauthorized response has a 2xx status code
func (o *GetDeploymentLogsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get deployment logs using g e t unauthorized response has a 3xx status code
func (o *GetDeploymentLogsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployment logs using g e t unauthorized response has a 4xx status code
func (o *GetDeploymentLogsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get deployment logs using g e t unauthorized response has a 5xx status code
func (o *GetDeploymentLogsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get deployment logs using g e t unauthorized response a status code equal to that given
func (o *GetDeploymentLogsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get deployment logs using g e t unauthorized response
func (o *GetDeploymentLogsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetDeploymentLogsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/logs][%d] getDeploymentLogsUsingGETUnauthorized", 401)
}

func (o *GetDeploymentLogsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/logs][%d] getDeploymentLogsUsingGETUnauthorized", 401)
}

func (o *GetDeploymentLogsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeploymentLogsUsingGETForbidden creates a GetDeploymentLogsUsingGETForbidden with default headers values
func NewGetDeploymentLogsUsingGETForbidden() *GetDeploymentLogsUsingGETForbidden {
	return &GetDeploymentLogsUsingGETForbidden{}
}

/*
GetDeploymentLogsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetDeploymentLogsUsingGETForbidden struct {
}

// IsSuccess returns true when this get deployment logs using g e t forbidden response has a 2xx status code
func (o *GetDeploymentLogsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get deployment logs using g e t forbidden response has a 3xx status code
func (o *GetDeploymentLogsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployment logs using g e t forbidden response has a 4xx status code
func (o *GetDeploymentLogsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get deployment logs using g e t forbidden response has a 5xx status code
func (o *GetDeploymentLogsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get deployment logs using g e t forbidden response a status code equal to that given
func (o *GetDeploymentLogsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get deployment logs using g e t forbidden response
func (o *GetDeploymentLogsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetDeploymentLogsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/logs][%d] getDeploymentLogsUsingGETForbidden", 403)
}

func (o *GetDeploymentLogsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/logs][%d] getDeploymentLogsUsingGETForbidden", 403)
}

func (o *GetDeploymentLogsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeploymentLogsUsingGETNotFound creates a GetDeploymentLogsUsingGETNotFound with default headers values
func NewGetDeploymentLogsUsingGETNotFound() *GetDeploymentLogsUsingGETNotFound {
	return &GetDeploymentLogsUsingGETNotFound{}
}

/*
GetDeploymentLogsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetDeploymentLogsUsingGETNotFound struct {
}

// IsSuccess returns true when this get deployment logs using g e t not found response has a 2xx status code
func (o *GetDeploymentLogsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get deployment logs using g e t not found response has a 3xx status code
func (o *GetDeploymentLogsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployment logs using g e t not found response has a 4xx status code
func (o *GetDeploymentLogsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get deployment logs using g e t not found response has a 5xx status code
func (o *GetDeploymentLogsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get deployment logs using g e t not found response a status code equal to that given
func (o *GetDeploymentLogsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get deployment logs using g e t not found response
func (o *GetDeploymentLogsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetDeploymentLogsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/logs][%d] getDeploymentLogsUsingGETNotFound", 404)
}

func (o *GetDeploymentLogsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/logs][%d] getDeploymentLogsUsingGETNotFound", 404)
}

func (o *GetDeploymentLogsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
