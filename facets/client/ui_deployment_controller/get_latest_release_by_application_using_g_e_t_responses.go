// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetLatestReleaseByApplicationUsingGETReader is a Reader for the GetLatestReleaseByApplicationUsingGET structure.
type GetLatestReleaseByApplicationUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLatestReleaseByApplicationUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLatestReleaseByApplicationUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetLatestReleaseByApplicationUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLatestReleaseByApplicationUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLatestReleaseByApplicationUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release/{application}] getLatestReleaseByApplicationUsingGET", response, response.Code())
	}
}

// NewGetLatestReleaseByApplicationUsingGETOK creates a GetLatestReleaseByApplicationUsingGETOK with default headers values
func NewGetLatestReleaseByApplicationUsingGETOK() *GetLatestReleaseByApplicationUsingGETOK {
	return &GetLatestReleaseByApplicationUsingGETOK{}
}

/*
GetLatestReleaseByApplicationUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetLatestReleaseByApplicationUsingGETOK struct {
	Payload *models.DeploymentLog
}

// IsSuccess returns true when this get latest release by application using g e t o k response has a 2xx status code
func (o *GetLatestReleaseByApplicationUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get latest release by application using g e t o k response has a 3xx status code
func (o *GetLatestReleaseByApplicationUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest release by application using g e t o k response has a 4xx status code
func (o *GetLatestReleaseByApplicationUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get latest release by application using g e t o k response has a 5xx status code
func (o *GetLatestReleaseByApplicationUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest release by application using g e t o k response a status code equal to that given
func (o *GetLatestReleaseByApplicationUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get latest release by application using g e t o k response
func (o *GetLatestReleaseByApplicationUsingGETOK) Code() int {
	return 200
}

func (o *GetLatestReleaseByApplicationUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release/{application}][%d] getLatestReleaseByApplicationUsingGETOK %s", 200, payload)
}

func (o *GetLatestReleaseByApplicationUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release/{application}][%d] getLatestReleaseByApplicationUsingGETOK %s", 200, payload)
}

func (o *GetLatestReleaseByApplicationUsingGETOK) GetPayload() *models.DeploymentLog {
	return o.Payload
}

func (o *GetLatestReleaseByApplicationUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLatestReleaseByApplicationUsingGETUnauthorized creates a GetLatestReleaseByApplicationUsingGETUnauthorized with default headers values
func NewGetLatestReleaseByApplicationUsingGETUnauthorized() *GetLatestReleaseByApplicationUsingGETUnauthorized {
	return &GetLatestReleaseByApplicationUsingGETUnauthorized{}
}

/*
GetLatestReleaseByApplicationUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetLatestReleaseByApplicationUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get latest release by application using g e t unauthorized response has a 2xx status code
func (o *GetLatestReleaseByApplicationUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get latest release by application using g e t unauthorized response has a 3xx status code
func (o *GetLatestReleaseByApplicationUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest release by application using g e t unauthorized response has a 4xx status code
func (o *GetLatestReleaseByApplicationUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get latest release by application using g e t unauthorized response has a 5xx status code
func (o *GetLatestReleaseByApplicationUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest release by application using g e t unauthorized response a status code equal to that given
func (o *GetLatestReleaseByApplicationUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get latest release by application using g e t unauthorized response
func (o *GetLatestReleaseByApplicationUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetLatestReleaseByApplicationUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release/{application}][%d] getLatestReleaseByApplicationUsingGETUnauthorized", 401)
}

func (o *GetLatestReleaseByApplicationUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release/{application}][%d] getLatestReleaseByApplicationUsingGETUnauthorized", 401)
}

func (o *GetLatestReleaseByApplicationUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLatestReleaseByApplicationUsingGETForbidden creates a GetLatestReleaseByApplicationUsingGETForbidden with default headers values
func NewGetLatestReleaseByApplicationUsingGETForbidden() *GetLatestReleaseByApplicationUsingGETForbidden {
	return &GetLatestReleaseByApplicationUsingGETForbidden{}
}

/*
GetLatestReleaseByApplicationUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetLatestReleaseByApplicationUsingGETForbidden struct {
}

// IsSuccess returns true when this get latest release by application using g e t forbidden response has a 2xx status code
func (o *GetLatestReleaseByApplicationUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get latest release by application using g e t forbidden response has a 3xx status code
func (o *GetLatestReleaseByApplicationUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest release by application using g e t forbidden response has a 4xx status code
func (o *GetLatestReleaseByApplicationUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get latest release by application using g e t forbidden response has a 5xx status code
func (o *GetLatestReleaseByApplicationUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest release by application using g e t forbidden response a status code equal to that given
func (o *GetLatestReleaseByApplicationUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get latest release by application using g e t forbidden response
func (o *GetLatestReleaseByApplicationUsingGETForbidden) Code() int {
	return 403
}

func (o *GetLatestReleaseByApplicationUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release/{application}][%d] getLatestReleaseByApplicationUsingGETForbidden", 403)
}

func (o *GetLatestReleaseByApplicationUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release/{application}][%d] getLatestReleaseByApplicationUsingGETForbidden", 403)
}

func (o *GetLatestReleaseByApplicationUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLatestReleaseByApplicationUsingGETNotFound creates a GetLatestReleaseByApplicationUsingGETNotFound with default headers values
func NewGetLatestReleaseByApplicationUsingGETNotFound() *GetLatestReleaseByApplicationUsingGETNotFound {
	return &GetLatestReleaseByApplicationUsingGETNotFound{}
}

/*
GetLatestReleaseByApplicationUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetLatestReleaseByApplicationUsingGETNotFound struct {
}

// IsSuccess returns true when this get latest release by application using g e t not found response has a 2xx status code
func (o *GetLatestReleaseByApplicationUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get latest release by application using g e t not found response has a 3xx status code
func (o *GetLatestReleaseByApplicationUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest release by application using g e t not found response has a 4xx status code
func (o *GetLatestReleaseByApplicationUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get latest release by application using g e t not found response has a 5xx status code
func (o *GetLatestReleaseByApplicationUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest release by application using g e t not found response a status code equal to that given
func (o *GetLatestReleaseByApplicationUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get latest release by application using g e t not found response
func (o *GetLatestReleaseByApplicationUsingGETNotFound) Code() int {
	return 404
}

func (o *GetLatestReleaseByApplicationUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release/{application}][%d] getLatestReleaseByApplicationUsingGETNotFound", 404)
}

func (o *GetLatestReleaseByApplicationUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release/{application}][%d] getLatestReleaseByApplicationUsingGETNotFound", 404)
}

func (o *GetLatestReleaseByApplicationUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
