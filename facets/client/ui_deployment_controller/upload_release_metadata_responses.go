// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UploadReleaseMetadataReader is a Reader for the UploadReleaseMetadata structure.
type UploadReleaseMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadReleaseMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadReleaseMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadReleaseMetadataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUploadReleaseMetadataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUploadReleaseMetadataMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadReleaseMetadataInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/upload-release-metadata] uploadReleaseMetadata", response, response.Code())
	}
}

// NewUploadReleaseMetadataOK creates a UploadReleaseMetadataOK with default headers values
func NewUploadReleaseMetadataOK() *UploadReleaseMetadataOK {
	return &UploadReleaseMetadataOK{}
}

/*
UploadReleaseMetadataOK describes a response with status code 200, with default header values.

OK
*/
type UploadReleaseMetadataOK struct {
}

// IsSuccess returns true when this upload release metadata o k response has a 2xx status code
func (o *UploadReleaseMetadataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upload release metadata o k response has a 3xx status code
func (o *UploadReleaseMetadataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload release metadata o k response has a 4xx status code
func (o *UploadReleaseMetadataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload release metadata o k response has a 5xx status code
func (o *UploadReleaseMetadataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upload release metadata o k response a status code equal to that given
func (o *UploadReleaseMetadataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upload release metadata o k response
func (o *UploadReleaseMetadataOK) Code() int {
	return 200
}

func (o *UploadReleaseMetadataOK) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/upload-release-metadata][%d] uploadReleaseMetadataOK", 200)
}

func (o *UploadReleaseMetadataOK) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/upload-release-metadata][%d] uploadReleaseMetadataOK", 200)
}

func (o *UploadReleaseMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadReleaseMetadataBadRequest creates a UploadReleaseMetadataBadRequest with default headers values
func NewUploadReleaseMetadataBadRequest() *UploadReleaseMetadataBadRequest {
	return &UploadReleaseMetadataBadRequest{}
}

/*
UploadReleaseMetadataBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UploadReleaseMetadataBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upload release metadata bad request response has a 2xx status code
func (o *UploadReleaseMetadataBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload release metadata bad request response has a 3xx status code
func (o *UploadReleaseMetadataBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload release metadata bad request response has a 4xx status code
func (o *UploadReleaseMetadataBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload release metadata bad request response has a 5xx status code
func (o *UploadReleaseMetadataBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this upload release metadata bad request response a status code equal to that given
func (o *UploadReleaseMetadataBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the upload release metadata bad request response
func (o *UploadReleaseMetadataBadRequest) Code() int {
	return 400
}

func (o *UploadReleaseMetadataBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/upload-release-metadata][%d] uploadReleaseMetadataBadRequest %s", 400, payload)
}

func (o *UploadReleaseMetadataBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/upload-release-metadata][%d] uploadReleaseMetadataBadRequest %s", 400, payload)
}

func (o *UploadReleaseMetadataBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UploadReleaseMetadataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadReleaseMetadataNotFound creates a UploadReleaseMetadataNotFound with default headers values
func NewUploadReleaseMetadataNotFound() *UploadReleaseMetadataNotFound {
	return &UploadReleaseMetadataNotFound{}
}

/*
UploadReleaseMetadataNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UploadReleaseMetadataNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upload release metadata not found response has a 2xx status code
func (o *UploadReleaseMetadataNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload release metadata not found response has a 3xx status code
func (o *UploadReleaseMetadataNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload release metadata not found response has a 4xx status code
func (o *UploadReleaseMetadataNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload release metadata not found response has a 5xx status code
func (o *UploadReleaseMetadataNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this upload release metadata not found response a status code equal to that given
func (o *UploadReleaseMetadataNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the upload release metadata not found response
func (o *UploadReleaseMetadataNotFound) Code() int {
	return 404
}

func (o *UploadReleaseMetadataNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/upload-release-metadata][%d] uploadReleaseMetadataNotFound %s", 404, payload)
}

func (o *UploadReleaseMetadataNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/upload-release-metadata][%d] uploadReleaseMetadataNotFound %s", 404, payload)
}

func (o *UploadReleaseMetadataNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UploadReleaseMetadataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadReleaseMetadataMethodNotAllowed creates a UploadReleaseMetadataMethodNotAllowed with default headers values
func NewUploadReleaseMetadataMethodNotAllowed() *UploadReleaseMetadataMethodNotAllowed {
	return &UploadReleaseMetadataMethodNotAllowed{}
}

/*
UploadReleaseMetadataMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UploadReleaseMetadataMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upload release metadata method not allowed response has a 2xx status code
func (o *UploadReleaseMetadataMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload release metadata method not allowed response has a 3xx status code
func (o *UploadReleaseMetadataMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload release metadata method not allowed response has a 4xx status code
func (o *UploadReleaseMetadataMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload release metadata method not allowed response has a 5xx status code
func (o *UploadReleaseMetadataMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this upload release metadata method not allowed response a status code equal to that given
func (o *UploadReleaseMetadataMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the upload release metadata method not allowed response
func (o *UploadReleaseMetadataMethodNotAllowed) Code() int {
	return 405
}

func (o *UploadReleaseMetadataMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/upload-release-metadata][%d] uploadReleaseMetadataMethodNotAllowed %s", 405, payload)
}

func (o *UploadReleaseMetadataMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/upload-release-metadata][%d] uploadReleaseMetadataMethodNotAllowed %s", 405, payload)
}

func (o *UploadReleaseMetadataMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UploadReleaseMetadataMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadReleaseMetadataInternalServerError creates a UploadReleaseMetadataInternalServerError with default headers values
func NewUploadReleaseMetadataInternalServerError() *UploadReleaseMetadataInternalServerError {
	return &UploadReleaseMetadataInternalServerError{}
}

/*
UploadReleaseMetadataInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UploadReleaseMetadataInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upload release metadata internal server error response has a 2xx status code
func (o *UploadReleaseMetadataInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload release metadata internal server error response has a 3xx status code
func (o *UploadReleaseMetadataInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload release metadata internal server error response has a 4xx status code
func (o *UploadReleaseMetadataInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload release metadata internal server error response has a 5xx status code
func (o *UploadReleaseMetadataInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this upload release metadata internal server error response a status code equal to that given
func (o *UploadReleaseMetadataInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the upload release metadata internal server error response
func (o *UploadReleaseMetadataInternalServerError) Code() int {
	return 500
}

func (o *UploadReleaseMetadataInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/upload-release-metadata][%d] uploadReleaseMetadataInternalServerError %s", 500, payload)
}

func (o *UploadReleaseMetadataInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/upload-release-metadata][%d] uploadReleaseMetadataInternalServerError %s", 500, payload)
}

func (o *UploadReleaseMetadataInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UploadReleaseMetadataInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UploadReleaseMetadataBody upload release metadata body
swagger:model UploadReleaseMetadataBody
*/
type UploadReleaseMetadataBody struct {

	// file
	// Required: true
	// Format: binary
	File io.ReadCloser `json:"file"`
}

// Validate validates this upload release metadata body
func (o *UploadReleaseMetadataBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadReleaseMetadataBody) validateFile(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"file", "body", io.ReadCloser(o.File)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this upload release metadata body based on context it is used
func (o *UploadReleaseMetadataBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UploadReleaseMetadataBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadReleaseMetadataBody) UnmarshalBinary(b []byte) error {
	var res UploadReleaseMetadataBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
