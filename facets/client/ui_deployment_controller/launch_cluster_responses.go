// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// LaunchClusterReader is a Reader for the LaunchCluster structure.
type LaunchClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LaunchClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLaunchClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLaunchClusterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLaunchClusterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewLaunchClusterMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLaunchClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/launch] launchCluster", response, response.Code())
	}
}

// NewLaunchClusterOK creates a LaunchClusterOK with default headers values
func NewLaunchClusterOK() *LaunchClusterOK {
	return &LaunchClusterOK{}
}

/*
LaunchClusterOK describes a response with status code 200, with default header values.

OK
*/
type LaunchClusterOK struct {
	Payload *models.DeploymentLog
}

// IsSuccess returns true when this launch cluster o k response has a 2xx status code
func (o *LaunchClusterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this launch cluster o k response has a 3xx status code
func (o *LaunchClusterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this launch cluster o k response has a 4xx status code
func (o *LaunchClusterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this launch cluster o k response has a 5xx status code
func (o *LaunchClusterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this launch cluster o k response a status code equal to that given
func (o *LaunchClusterOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the launch cluster o k response
func (o *LaunchClusterOK) Code() int {
	return 200
}

func (o *LaunchClusterOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/launch][%d] launchClusterOK %s", 200, payload)
}

func (o *LaunchClusterOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/launch][%d] launchClusterOK %s", 200, payload)
}

func (o *LaunchClusterOK) GetPayload() *models.DeploymentLog {
	return o.Payload
}

func (o *LaunchClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLaunchClusterBadRequest creates a LaunchClusterBadRequest with default headers values
func NewLaunchClusterBadRequest() *LaunchClusterBadRequest {
	return &LaunchClusterBadRequest{}
}

/*
LaunchClusterBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type LaunchClusterBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this launch cluster bad request response has a 2xx status code
func (o *LaunchClusterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this launch cluster bad request response has a 3xx status code
func (o *LaunchClusterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this launch cluster bad request response has a 4xx status code
func (o *LaunchClusterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this launch cluster bad request response has a 5xx status code
func (o *LaunchClusterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this launch cluster bad request response a status code equal to that given
func (o *LaunchClusterBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the launch cluster bad request response
func (o *LaunchClusterBadRequest) Code() int {
	return 400
}

func (o *LaunchClusterBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/launch][%d] launchClusterBadRequest %s", 400, payload)
}

func (o *LaunchClusterBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/launch][%d] launchClusterBadRequest %s", 400, payload)
}

func (o *LaunchClusterBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LaunchClusterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLaunchClusterNotFound creates a LaunchClusterNotFound with default headers values
func NewLaunchClusterNotFound() *LaunchClusterNotFound {
	return &LaunchClusterNotFound{}
}

/*
LaunchClusterNotFound describes a response with status code 404, with default header values.

Not Found
*/
type LaunchClusterNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this launch cluster not found response has a 2xx status code
func (o *LaunchClusterNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this launch cluster not found response has a 3xx status code
func (o *LaunchClusterNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this launch cluster not found response has a 4xx status code
func (o *LaunchClusterNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this launch cluster not found response has a 5xx status code
func (o *LaunchClusterNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this launch cluster not found response a status code equal to that given
func (o *LaunchClusterNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the launch cluster not found response
func (o *LaunchClusterNotFound) Code() int {
	return 404
}

func (o *LaunchClusterNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/launch][%d] launchClusterNotFound %s", 404, payload)
}

func (o *LaunchClusterNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/launch][%d] launchClusterNotFound %s", 404, payload)
}

func (o *LaunchClusterNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LaunchClusterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLaunchClusterMethodNotAllowed creates a LaunchClusterMethodNotAllowed with default headers values
func NewLaunchClusterMethodNotAllowed() *LaunchClusterMethodNotAllowed {
	return &LaunchClusterMethodNotAllowed{}
}

/*
LaunchClusterMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type LaunchClusterMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this launch cluster method not allowed response has a 2xx status code
func (o *LaunchClusterMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this launch cluster method not allowed response has a 3xx status code
func (o *LaunchClusterMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this launch cluster method not allowed response has a 4xx status code
func (o *LaunchClusterMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this launch cluster method not allowed response has a 5xx status code
func (o *LaunchClusterMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this launch cluster method not allowed response a status code equal to that given
func (o *LaunchClusterMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the launch cluster method not allowed response
func (o *LaunchClusterMethodNotAllowed) Code() int {
	return 405
}

func (o *LaunchClusterMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/launch][%d] launchClusterMethodNotAllowed %s", 405, payload)
}

func (o *LaunchClusterMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/launch][%d] launchClusterMethodNotAllowed %s", 405, payload)
}

func (o *LaunchClusterMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LaunchClusterMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLaunchClusterInternalServerError creates a LaunchClusterInternalServerError with default headers values
func NewLaunchClusterInternalServerError() *LaunchClusterInternalServerError {
	return &LaunchClusterInternalServerError{}
}

/*
LaunchClusterInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type LaunchClusterInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this launch cluster internal server error response has a 2xx status code
func (o *LaunchClusterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this launch cluster internal server error response has a 3xx status code
func (o *LaunchClusterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this launch cluster internal server error response has a 4xx status code
func (o *LaunchClusterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this launch cluster internal server error response has a 5xx status code
func (o *LaunchClusterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this launch cluster internal server error response a status code equal to that given
func (o *LaunchClusterInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the launch cluster internal server error response
func (o *LaunchClusterInternalServerError) Code() int {
	return 500
}

func (o *LaunchClusterInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/launch][%d] launchClusterInternalServerError %s", 500, payload)
}

func (o *LaunchClusterInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/launch][%d] launchClusterInternalServerError %s", 500, payload)
}

func (o *LaunchClusterInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *LaunchClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
