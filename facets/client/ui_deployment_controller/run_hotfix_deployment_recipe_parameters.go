// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// NewRunHotfixDeploymentRecipeParams creates a new RunHotfixDeploymentRecipeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRunHotfixDeploymentRecipeParams() *RunHotfixDeploymentRecipeParams {
	return &RunHotfixDeploymentRecipeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRunHotfixDeploymentRecipeParamsWithTimeout creates a new RunHotfixDeploymentRecipeParams object
// with the ability to set a timeout on a request.
func NewRunHotfixDeploymentRecipeParamsWithTimeout(timeout time.Duration) *RunHotfixDeploymentRecipeParams {
	return &RunHotfixDeploymentRecipeParams{
		timeout: timeout,
	}
}

// NewRunHotfixDeploymentRecipeParamsWithContext creates a new RunHotfixDeploymentRecipeParams object
// with the ability to set a context for a request.
func NewRunHotfixDeploymentRecipeParamsWithContext(ctx context.Context) *RunHotfixDeploymentRecipeParams {
	return &RunHotfixDeploymentRecipeParams{
		Context: ctx,
	}
}

// NewRunHotfixDeploymentRecipeParamsWithHTTPClient creates a new RunHotfixDeploymentRecipeParams object
// with the ability to set a custom HTTPClient for a request.
func NewRunHotfixDeploymentRecipeParamsWithHTTPClient(client *http.Client) *RunHotfixDeploymentRecipeParams {
	return &RunHotfixDeploymentRecipeParams{
		HTTPClient: client,
	}
}

/*
RunHotfixDeploymentRecipeParams contains all the parameters to send to the API endpoint

	for the run hotfix deployment recipe operation.

	Typically these are written to a http.Request.
*/
type RunHotfixDeploymentRecipeParams struct {

	// AllowDestroy.
	AllowDestroy *string

	// Body.
	Body *models.HotfixDeploymentRecipe

	// CanQueue.
	CanQueue *string

	// ClusterID.
	ClusterID string

	// Comment.
	Comment *string

	// ForceRelease.
	ForceRelease *string

	// IsPlan.
	IsPlan *string

	/* ReleaseTraceID.

	   Unique identifier of the release that you can search it with
	*/
	ReleaseTraceID *string

	// SkipStateCheck.
	SkipStateCheck *string

	// WithRefresh.
	WithRefresh *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the run hotfix deployment recipe params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RunHotfixDeploymentRecipeParams) WithDefaults() *RunHotfixDeploymentRecipeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the run hotfix deployment recipe params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RunHotfixDeploymentRecipeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) WithTimeout(timeout time.Duration) *RunHotfixDeploymentRecipeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) WithContext(ctx context.Context) *RunHotfixDeploymentRecipeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) WithHTTPClient(client *http.Client) *RunHotfixDeploymentRecipeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowDestroy adds the allowDestroy to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) WithAllowDestroy(allowDestroy *string) *RunHotfixDeploymentRecipeParams {
	o.SetAllowDestroy(allowDestroy)
	return o
}

// SetAllowDestroy adds the allowDestroy to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) SetAllowDestroy(allowDestroy *string) {
	o.AllowDestroy = allowDestroy
}

// WithBody adds the body to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) WithBody(body *models.HotfixDeploymentRecipe) *RunHotfixDeploymentRecipeParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) SetBody(body *models.HotfixDeploymentRecipe) {
	o.Body = body
}

// WithCanQueue adds the canQueue to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) WithCanQueue(canQueue *string) *RunHotfixDeploymentRecipeParams {
	o.SetCanQueue(canQueue)
	return o
}

// SetCanQueue adds the canQueue to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) SetCanQueue(canQueue *string) {
	o.CanQueue = canQueue
}

// WithClusterID adds the clusterID to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) WithClusterID(clusterID string) *RunHotfixDeploymentRecipeParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithComment adds the comment to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) WithComment(comment *string) *RunHotfixDeploymentRecipeParams {
	o.SetComment(comment)
	return o
}

// SetComment adds the comment to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) SetComment(comment *string) {
	o.Comment = comment
}

// WithForceRelease adds the forceRelease to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) WithForceRelease(forceRelease *string) *RunHotfixDeploymentRecipeParams {
	o.SetForceRelease(forceRelease)
	return o
}

// SetForceRelease adds the forceRelease to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) SetForceRelease(forceRelease *string) {
	o.ForceRelease = forceRelease
}

// WithIsPlan adds the isPlan to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) WithIsPlan(isPlan *string) *RunHotfixDeploymentRecipeParams {
	o.SetIsPlan(isPlan)
	return o
}

// SetIsPlan adds the isPlan to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) SetIsPlan(isPlan *string) {
	o.IsPlan = isPlan
}

// WithReleaseTraceID adds the releaseTraceID to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) WithReleaseTraceID(releaseTraceID *string) *RunHotfixDeploymentRecipeParams {
	o.SetReleaseTraceID(releaseTraceID)
	return o
}

// SetReleaseTraceID adds the releaseTraceId to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) SetReleaseTraceID(releaseTraceID *string) {
	o.ReleaseTraceID = releaseTraceID
}

// WithSkipStateCheck adds the skipStateCheck to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) WithSkipStateCheck(skipStateCheck *string) *RunHotfixDeploymentRecipeParams {
	o.SetSkipStateCheck(skipStateCheck)
	return o
}

// SetSkipStateCheck adds the skipStateCheck to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) SetSkipStateCheck(skipStateCheck *string) {
	o.SkipStateCheck = skipStateCheck
}

// WithWithRefresh adds the withRefresh to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) WithWithRefresh(withRefresh *string) *RunHotfixDeploymentRecipeParams {
	o.SetWithRefresh(withRefresh)
	return o
}

// SetWithRefresh adds the withRefresh to the run hotfix deployment recipe params
func (o *RunHotfixDeploymentRecipeParams) SetWithRefresh(withRefresh *string) {
	o.WithRefresh = withRefresh
}

// WriteToRequest writes these params to a swagger request
func (o *RunHotfixDeploymentRecipeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllowDestroy != nil {

		// query param allowDestroy
		var qrAllowDestroy string

		if o.AllowDestroy != nil {
			qrAllowDestroy = *o.AllowDestroy
		}
		qAllowDestroy := qrAllowDestroy
		if qAllowDestroy != "" {

			if err := r.SetQueryParam("allowDestroy", qAllowDestroy); err != nil {
				return err
			}
		}
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.CanQueue != nil {

		// query param canQueue
		var qrCanQueue string

		if o.CanQueue != nil {
			qrCanQueue = *o.CanQueue
		}
		qCanQueue := qrCanQueue
		if qCanQueue != "" {

			if err := r.SetQueryParam("canQueue", qCanQueue); err != nil {
				return err
			}
		}
	}

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID); err != nil {
		return err
	}

	if o.Comment != nil {

		// query param comment
		var qrComment string

		if o.Comment != nil {
			qrComment = *o.Comment
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.ForceRelease != nil {

		// query param forceRelease
		var qrForceRelease string

		if o.ForceRelease != nil {
			qrForceRelease = *o.ForceRelease
		}
		qForceRelease := qrForceRelease
		if qForceRelease != "" {

			if err := r.SetQueryParam("forceRelease", qForceRelease); err != nil {
				return err
			}
		}
	}

	if o.IsPlan != nil {

		// query param isPlan
		var qrIsPlan string

		if o.IsPlan != nil {
			qrIsPlan = *o.IsPlan
		}
		qIsPlan := qrIsPlan
		if qIsPlan != "" {

			if err := r.SetQueryParam("isPlan", qIsPlan); err != nil {
				return err
			}
		}
	}

	if o.ReleaseTraceID != nil {

		// query param releaseTraceId
		var qrReleaseTraceID string

		if o.ReleaseTraceID != nil {
			qrReleaseTraceID = *o.ReleaseTraceID
		}
		qReleaseTraceID := qrReleaseTraceID
		if qReleaseTraceID != "" {

			if err := r.SetQueryParam("releaseTraceId", qReleaseTraceID); err != nil {
				return err
			}
		}
	}

	if o.SkipStateCheck != nil {

		// query param skipStateCheck
		var qrSkipStateCheck string

		if o.SkipStateCheck != nil {
			qrSkipStateCheck = *o.SkipStateCheck
		}
		qSkipStateCheck := qrSkipStateCheck
		if qSkipStateCheck != "" {

			if err := r.SetQueryParam("skipStateCheck", qSkipStateCheck); err != nil {
				return err
			}
		}
	}

	if o.WithRefresh != nil {

		// query param withRefresh
		var qrWithRefresh string

		if o.WithRefresh != nil {
			qrWithRefresh = *o.WithRefresh
		}
		qWithRefresh := qrWithRefresh
		if qWithRefresh != "" {

			if err := r.SetQueryParam("withRefresh", qWithRefresh); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
