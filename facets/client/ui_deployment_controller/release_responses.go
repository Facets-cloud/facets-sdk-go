// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ReleaseReader is a Reader for the Release structure.
type ReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewReleaseMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release] release", response, response.Code())
	}
}

// NewReleaseOK creates a ReleaseOK with default headers values
func NewReleaseOK() *ReleaseOK {
	return &ReleaseOK{}
}

/*
ReleaseOK describes a response with status code 200, with default header values.

OK
*/
type ReleaseOK struct {
	Payload *models.DeploymentLog
}

// IsSuccess returns true when this release o k response has a 2xx status code
func (o *ReleaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this release o k response has a 3xx status code
func (o *ReleaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release o k response has a 4xx status code
func (o *ReleaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this release o k response has a 5xx status code
func (o *ReleaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this release o k response a status code equal to that given
func (o *ReleaseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the release o k response
func (o *ReleaseOK) Code() int {
	return 200
}

func (o *ReleaseOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseOK %s", 200, payload)
}

func (o *ReleaseOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseOK %s", 200, payload)
}

func (o *ReleaseOK) GetPayload() *models.DeploymentLog {
	return o.Payload
}

func (o *ReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseBadRequest creates a ReleaseBadRequest with default headers values
func NewReleaseBadRequest() *ReleaseBadRequest {
	return &ReleaseBadRequest{}
}

/*
ReleaseBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ReleaseBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this release bad request response has a 2xx status code
func (o *ReleaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release bad request response has a 3xx status code
func (o *ReleaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release bad request response has a 4xx status code
func (o *ReleaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this release bad request response has a 5xx status code
func (o *ReleaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this release bad request response a status code equal to that given
func (o *ReleaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the release bad request response
func (o *ReleaseBadRequest) Code() int {
	return 400
}

func (o *ReleaseBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseBadRequest %s", 400, payload)
}

func (o *ReleaseBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseBadRequest %s", 400, payload)
}

func (o *ReleaseBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseNotFound creates a ReleaseNotFound with default headers values
func NewReleaseNotFound() *ReleaseNotFound {
	return &ReleaseNotFound{}
}

/*
ReleaseNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ReleaseNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this release not found response has a 2xx status code
func (o *ReleaseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release not found response has a 3xx status code
func (o *ReleaseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release not found response has a 4xx status code
func (o *ReleaseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this release not found response has a 5xx status code
func (o *ReleaseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this release not found response a status code equal to that given
func (o *ReleaseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the release not found response
func (o *ReleaseNotFound) Code() int {
	return 404
}

func (o *ReleaseNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseNotFound %s", 404, payload)
}

func (o *ReleaseNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseNotFound %s", 404, payload)
}

func (o *ReleaseNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseMethodNotAllowed creates a ReleaseMethodNotAllowed with default headers values
func NewReleaseMethodNotAllowed() *ReleaseMethodNotAllowed {
	return &ReleaseMethodNotAllowed{}
}

/*
ReleaseMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ReleaseMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this release method not allowed response has a 2xx status code
func (o *ReleaseMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release method not allowed response has a 3xx status code
func (o *ReleaseMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release method not allowed response has a 4xx status code
func (o *ReleaseMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this release method not allowed response has a 5xx status code
func (o *ReleaseMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this release method not allowed response a status code equal to that given
func (o *ReleaseMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the release method not allowed response
func (o *ReleaseMethodNotAllowed) Code() int {
	return 405
}

func (o *ReleaseMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseMethodNotAllowed %s", 405, payload)
}

func (o *ReleaseMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseMethodNotAllowed %s", 405, payload)
}

func (o *ReleaseMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ReleaseMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseInternalServerError creates a ReleaseInternalServerError with default headers values
func NewReleaseInternalServerError() *ReleaseInternalServerError {
	return &ReleaseInternalServerError{}
}

/*
ReleaseInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ReleaseInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this release internal server error response has a 2xx status code
func (o *ReleaseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release internal server error response has a 3xx status code
func (o *ReleaseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release internal server error response has a 4xx status code
func (o *ReleaseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this release internal server error response has a 5xx status code
func (o *ReleaseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this release internal server error response a status code equal to that given
func (o *ReleaseInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the release internal server error response
func (o *ReleaseInternalServerError) Code() int {
	return 500
}

func (o *ReleaseInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseInternalServerError %s", 500, payload)
}

func (o *ReleaseInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseInternalServerError %s", 500, payload)
}

func (o *ReleaseInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
