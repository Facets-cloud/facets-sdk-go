// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ReleaseUsingPUTReader is a Reader for the ReleaseUsingPUT structure.
type ReleaseUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReleaseUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReleaseUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewReleaseUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewReleaseUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReleaseUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReleaseUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release] releaseUsingPUT", response, response.Code())
	}
}

// NewReleaseUsingPUTOK creates a ReleaseUsingPUTOK with default headers values
func NewReleaseUsingPUTOK() *ReleaseUsingPUTOK {
	return &ReleaseUsingPUTOK{}
}

/*
ReleaseUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type ReleaseUsingPUTOK struct {
	Payload *models.DeploymentLog
}

// IsSuccess returns true when this release using p u t o k response has a 2xx status code
func (o *ReleaseUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this release using p u t o k response has a 3xx status code
func (o *ReleaseUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release using p u t o k response has a 4xx status code
func (o *ReleaseUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this release using p u t o k response has a 5xx status code
func (o *ReleaseUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this release using p u t o k response a status code equal to that given
func (o *ReleaseUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the release using p u t o k response
func (o *ReleaseUsingPUTOK) Code() int {
	return 200
}

func (o *ReleaseUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseUsingPUTOK %s", 200, payload)
}

func (o *ReleaseUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseUsingPUTOK %s", 200, payload)
}

func (o *ReleaseUsingPUTOK) GetPayload() *models.DeploymentLog {
	return o.Payload
}

func (o *ReleaseUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseUsingPUTCreated creates a ReleaseUsingPUTCreated with default headers values
func NewReleaseUsingPUTCreated() *ReleaseUsingPUTCreated {
	return &ReleaseUsingPUTCreated{}
}

/*
ReleaseUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type ReleaseUsingPUTCreated struct {
}

// IsSuccess returns true when this release using p u t created response has a 2xx status code
func (o *ReleaseUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this release using p u t created response has a 3xx status code
func (o *ReleaseUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release using p u t created response has a 4xx status code
func (o *ReleaseUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this release using p u t created response has a 5xx status code
func (o *ReleaseUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this release using p u t created response a status code equal to that given
func (o *ReleaseUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the release using p u t created response
func (o *ReleaseUsingPUTCreated) Code() int {
	return 201
}

func (o *ReleaseUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseUsingPUTCreated", 201)
}

func (o *ReleaseUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseUsingPUTCreated", 201)
}

func (o *ReleaseUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReleaseUsingPUTUnauthorized creates a ReleaseUsingPUTUnauthorized with default headers values
func NewReleaseUsingPUTUnauthorized() *ReleaseUsingPUTUnauthorized {
	return &ReleaseUsingPUTUnauthorized{}
}

/*
ReleaseUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ReleaseUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this release using p u t unauthorized response has a 2xx status code
func (o *ReleaseUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release using p u t unauthorized response has a 3xx status code
func (o *ReleaseUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release using p u t unauthorized response has a 4xx status code
func (o *ReleaseUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this release using p u t unauthorized response has a 5xx status code
func (o *ReleaseUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this release using p u t unauthorized response a status code equal to that given
func (o *ReleaseUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the release using p u t unauthorized response
func (o *ReleaseUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *ReleaseUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseUsingPUTUnauthorized", 401)
}

func (o *ReleaseUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseUsingPUTUnauthorized", 401)
}

func (o *ReleaseUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReleaseUsingPUTForbidden creates a ReleaseUsingPUTForbidden with default headers values
func NewReleaseUsingPUTForbidden() *ReleaseUsingPUTForbidden {
	return &ReleaseUsingPUTForbidden{}
}

/*
ReleaseUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ReleaseUsingPUTForbidden struct {
}

// IsSuccess returns true when this release using p u t forbidden response has a 2xx status code
func (o *ReleaseUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release using p u t forbidden response has a 3xx status code
func (o *ReleaseUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release using p u t forbidden response has a 4xx status code
func (o *ReleaseUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this release using p u t forbidden response has a 5xx status code
func (o *ReleaseUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this release using p u t forbidden response a status code equal to that given
func (o *ReleaseUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the release using p u t forbidden response
func (o *ReleaseUsingPUTForbidden) Code() int {
	return 403
}

func (o *ReleaseUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseUsingPUTForbidden", 403)
}

func (o *ReleaseUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseUsingPUTForbidden", 403)
}

func (o *ReleaseUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReleaseUsingPUTNotFound creates a ReleaseUsingPUTNotFound with default headers values
func NewReleaseUsingPUTNotFound() *ReleaseUsingPUTNotFound {
	return &ReleaseUsingPUTNotFound{}
}

/*
ReleaseUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ReleaseUsingPUTNotFound struct {
}

// IsSuccess returns true when this release using p u t not found response has a 2xx status code
func (o *ReleaseUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release using p u t not found response has a 3xx status code
func (o *ReleaseUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release using p u t not found response has a 4xx status code
func (o *ReleaseUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this release using p u t not found response has a 5xx status code
func (o *ReleaseUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this release using p u t not found response a status code equal to that given
func (o *ReleaseUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the release using p u t not found response
func (o *ReleaseUsingPUTNotFound) Code() int {
	return 404
}

func (o *ReleaseUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseUsingPUTNotFound", 404)
}

func (o *ReleaseUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/release][%d] releaseUsingPUTNotFound", 404)
}

func (o *ReleaseUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
