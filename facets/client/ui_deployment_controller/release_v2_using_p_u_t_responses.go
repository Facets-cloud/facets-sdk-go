// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ReleaseV2UsingPUTReader is a Reader for the ReleaseV2UsingPUT structure.
type ReleaseV2UsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReleaseV2UsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReleaseV2UsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewReleaseV2UsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewReleaseV2UsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReleaseV2UsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReleaseV2UsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/releaseV2/{releaseType}] releaseV2UsingPUT", response, response.Code())
	}
}

// NewReleaseV2UsingPUTOK creates a ReleaseV2UsingPUTOK with default headers values
func NewReleaseV2UsingPUTOK() *ReleaseV2UsingPUTOK {
	return &ReleaseV2UsingPUTOK{}
}

/*
ReleaseV2UsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type ReleaseV2UsingPUTOK struct {
	Payload *models.DeploymentLog
}

// IsSuccess returns true when this release v2 using p u t o k response has a 2xx status code
func (o *ReleaseV2UsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this release v2 using p u t o k response has a 3xx status code
func (o *ReleaseV2UsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release v2 using p u t o k response has a 4xx status code
func (o *ReleaseV2UsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this release v2 using p u t o k response has a 5xx status code
func (o *ReleaseV2UsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this release v2 using p u t o k response a status code equal to that given
func (o *ReleaseV2UsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the release v2 using p u t o k response
func (o *ReleaseV2UsingPUTOK) Code() int {
	return 200
}

func (o *ReleaseV2UsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/releaseV2/{releaseType}][%d] releaseV2UsingPUTOK %s", 200, payload)
}

func (o *ReleaseV2UsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/releaseV2/{releaseType}][%d] releaseV2UsingPUTOK %s", 200, payload)
}

func (o *ReleaseV2UsingPUTOK) GetPayload() *models.DeploymentLog {
	return o.Payload
}

func (o *ReleaseV2UsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseV2UsingPUTCreated creates a ReleaseV2UsingPUTCreated with default headers values
func NewReleaseV2UsingPUTCreated() *ReleaseV2UsingPUTCreated {
	return &ReleaseV2UsingPUTCreated{}
}

/*
ReleaseV2UsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type ReleaseV2UsingPUTCreated struct {
}

// IsSuccess returns true when this release v2 using p u t created response has a 2xx status code
func (o *ReleaseV2UsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this release v2 using p u t created response has a 3xx status code
func (o *ReleaseV2UsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release v2 using p u t created response has a 4xx status code
func (o *ReleaseV2UsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this release v2 using p u t created response has a 5xx status code
func (o *ReleaseV2UsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this release v2 using p u t created response a status code equal to that given
func (o *ReleaseV2UsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the release v2 using p u t created response
func (o *ReleaseV2UsingPUTCreated) Code() int {
	return 201
}

func (o *ReleaseV2UsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/releaseV2/{releaseType}][%d] releaseV2UsingPUTCreated", 201)
}

func (o *ReleaseV2UsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/releaseV2/{releaseType}][%d] releaseV2UsingPUTCreated", 201)
}

func (o *ReleaseV2UsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReleaseV2UsingPUTUnauthorized creates a ReleaseV2UsingPUTUnauthorized with default headers values
func NewReleaseV2UsingPUTUnauthorized() *ReleaseV2UsingPUTUnauthorized {
	return &ReleaseV2UsingPUTUnauthorized{}
}

/*
ReleaseV2UsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ReleaseV2UsingPUTUnauthorized struct {
}

// IsSuccess returns true when this release v2 using p u t unauthorized response has a 2xx status code
func (o *ReleaseV2UsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release v2 using p u t unauthorized response has a 3xx status code
func (o *ReleaseV2UsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release v2 using p u t unauthorized response has a 4xx status code
func (o *ReleaseV2UsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this release v2 using p u t unauthorized response has a 5xx status code
func (o *ReleaseV2UsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this release v2 using p u t unauthorized response a status code equal to that given
func (o *ReleaseV2UsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the release v2 using p u t unauthorized response
func (o *ReleaseV2UsingPUTUnauthorized) Code() int {
	return 401
}

func (o *ReleaseV2UsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/releaseV2/{releaseType}][%d] releaseV2UsingPUTUnauthorized", 401)
}

func (o *ReleaseV2UsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/releaseV2/{releaseType}][%d] releaseV2UsingPUTUnauthorized", 401)
}

func (o *ReleaseV2UsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReleaseV2UsingPUTForbidden creates a ReleaseV2UsingPUTForbidden with default headers values
func NewReleaseV2UsingPUTForbidden() *ReleaseV2UsingPUTForbidden {
	return &ReleaseV2UsingPUTForbidden{}
}

/*
ReleaseV2UsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ReleaseV2UsingPUTForbidden struct {
}

// IsSuccess returns true when this release v2 using p u t forbidden response has a 2xx status code
func (o *ReleaseV2UsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release v2 using p u t forbidden response has a 3xx status code
func (o *ReleaseV2UsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release v2 using p u t forbidden response has a 4xx status code
func (o *ReleaseV2UsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this release v2 using p u t forbidden response has a 5xx status code
func (o *ReleaseV2UsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this release v2 using p u t forbidden response a status code equal to that given
func (o *ReleaseV2UsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the release v2 using p u t forbidden response
func (o *ReleaseV2UsingPUTForbidden) Code() int {
	return 403
}

func (o *ReleaseV2UsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/releaseV2/{releaseType}][%d] releaseV2UsingPUTForbidden", 403)
}

func (o *ReleaseV2UsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/releaseV2/{releaseType}][%d] releaseV2UsingPUTForbidden", 403)
}

func (o *ReleaseV2UsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReleaseV2UsingPUTNotFound creates a ReleaseV2UsingPUTNotFound with default headers values
func NewReleaseV2UsingPUTNotFound() *ReleaseV2UsingPUTNotFound {
	return &ReleaseV2UsingPUTNotFound{}
}

/*
ReleaseV2UsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ReleaseV2UsingPUTNotFound struct {
}

// IsSuccess returns true when this release v2 using p u t not found response has a 2xx status code
func (o *ReleaseV2UsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release v2 using p u t not found response has a 3xx status code
func (o *ReleaseV2UsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release v2 using p u t not found response has a 4xx status code
func (o *ReleaseV2UsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this release v2 using p u t not found response has a 5xx status code
func (o *ReleaseV2UsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this release v2 using p u t not found response a status code equal to that given
func (o *ReleaseV2UsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the release v2 using p u t not found response
func (o *ReleaseV2UsingPUTNotFound) Code() int {
	return 404
}

func (o *ReleaseV2UsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/releaseV2/{releaseType}][%d] releaseV2UsingPUTNotFound", 404)
}

func (o *ReleaseV2UsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/clusters/{clusterId}/deployments/releaseV2/{releaseType}][%d] releaseV2UsingPUTNotFound", 404)
}

func (o *ReleaseV2UsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
