// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetDeploymentByReleaseTraceIDReader is a Reader for the GetDeploymentByReleaseTraceID structure.
type GetDeploymentByReleaseTraceIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeploymentByReleaseTraceIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeploymentByReleaseTraceIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDeploymentByReleaseTraceIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDeploymentByReleaseTraceIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetDeploymentByReleaseTraceIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDeploymentByReleaseTraceIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/deployments/trace-id/{releaseTraceId}] getDeploymentByReleaseTraceId", response, response.Code())
	}
}

// NewGetDeploymentByReleaseTraceIDOK creates a GetDeploymentByReleaseTraceIDOK with default headers values
func NewGetDeploymentByReleaseTraceIDOK() *GetDeploymentByReleaseTraceIDOK {
	return &GetDeploymentByReleaseTraceIDOK{}
}

/*
GetDeploymentByReleaseTraceIDOK describes a response with status code 200, with default header values.

OK
*/
type GetDeploymentByReleaseTraceIDOK struct {
	Payload *models.DeploymentLog
}

// IsSuccess returns true when this get deployment by release trace Id o k response has a 2xx status code
func (o *GetDeploymentByReleaseTraceIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get deployment by release trace Id o k response has a 3xx status code
func (o *GetDeploymentByReleaseTraceIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployment by release trace Id o k response has a 4xx status code
func (o *GetDeploymentByReleaseTraceIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get deployment by release trace Id o k response has a 5xx status code
func (o *GetDeploymentByReleaseTraceIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get deployment by release trace Id o k response a status code equal to that given
func (o *GetDeploymentByReleaseTraceIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get deployment by release trace Id o k response
func (o *GetDeploymentByReleaseTraceIDOK) Code() int {
	return 200
}

func (o *GetDeploymentByReleaseTraceIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/trace-id/{releaseTraceId}][%d] getDeploymentByReleaseTraceIdOK %s", 200, payload)
}

func (o *GetDeploymentByReleaseTraceIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/trace-id/{releaseTraceId}][%d] getDeploymentByReleaseTraceIdOK %s", 200, payload)
}

func (o *GetDeploymentByReleaseTraceIDOK) GetPayload() *models.DeploymentLog {
	return o.Payload
}

func (o *GetDeploymentByReleaseTraceIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeploymentByReleaseTraceIDBadRequest creates a GetDeploymentByReleaseTraceIDBadRequest with default headers values
func NewGetDeploymentByReleaseTraceIDBadRequest() *GetDeploymentByReleaseTraceIDBadRequest {
	return &GetDeploymentByReleaseTraceIDBadRequest{}
}

/*
GetDeploymentByReleaseTraceIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetDeploymentByReleaseTraceIDBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get deployment by release trace Id bad request response has a 2xx status code
func (o *GetDeploymentByReleaseTraceIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get deployment by release trace Id bad request response has a 3xx status code
func (o *GetDeploymentByReleaseTraceIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployment by release trace Id bad request response has a 4xx status code
func (o *GetDeploymentByReleaseTraceIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get deployment by release trace Id bad request response has a 5xx status code
func (o *GetDeploymentByReleaseTraceIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get deployment by release trace Id bad request response a status code equal to that given
func (o *GetDeploymentByReleaseTraceIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get deployment by release trace Id bad request response
func (o *GetDeploymentByReleaseTraceIDBadRequest) Code() int {
	return 400
}

func (o *GetDeploymentByReleaseTraceIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/trace-id/{releaseTraceId}][%d] getDeploymentByReleaseTraceIdBadRequest %s", 400, payload)
}

func (o *GetDeploymentByReleaseTraceIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/trace-id/{releaseTraceId}][%d] getDeploymentByReleaseTraceIdBadRequest %s", 400, payload)
}

func (o *GetDeploymentByReleaseTraceIDBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetDeploymentByReleaseTraceIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeploymentByReleaseTraceIDNotFound creates a GetDeploymentByReleaseTraceIDNotFound with default headers values
func NewGetDeploymentByReleaseTraceIDNotFound() *GetDeploymentByReleaseTraceIDNotFound {
	return &GetDeploymentByReleaseTraceIDNotFound{}
}

/*
GetDeploymentByReleaseTraceIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetDeploymentByReleaseTraceIDNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get deployment by release trace Id not found response has a 2xx status code
func (o *GetDeploymentByReleaseTraceIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get deployment by release trace Id not found response has a 3xx status code
func (o *GetDeploymentByReleaseTraceIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployment by release trace Id not found response has a 4xx status code
func (o *GetDeploymentByReleaseTraceIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get deployment by release trace Id not found response has a 5xx status code
func (o *GetDeploymentByReleaseTraceIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get deployment by release trace Id not found response a status code equal to that given
func (o *GetDeploymentByReleaseTraceIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get deployment by release trace Id not found response
func (o *GetDeploymentByReleaseTraceIDNotFound) Code() int {
	return 404
}

func (o *GetDeploymentByReleaseTraceIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/trace-id/{releaseTraceId}][%d] getDeploymentByReleaseTraceIdNotFound %s", 404, payload)
}

func (o *GetDeploymentByReleaseTraceIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/trace-id/{releaseTraceId}][%d] getDeploymentByReleaseTraceIdNotFound %s", 404, payload)
}

func (o *GetDeploymentByReleaseTraceIDNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetDeploymentByReleaseTraceIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeploymentByReleaseTraceIDMethodNotAllowed creates a GetDeploymentByReleaseTraceIDMethodNotAllowed with default headers values
func NewGetDeploymentByReleaseTraceIDMethodNotAllowed() *GetDeploymentByReleaseTraceIDMethodNotAllowed {
	return &GetDeploymentByReleaseTraceIDMethodNotAllowed{}
}

/*
GetDeploymentByReleaseTraceIDMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetDeploymentByReleaseTraceIDMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get deployment by release trace Id method not allowed response has a 2xx status code
func (o *GetDeploymentByReleaseTraceIDMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get deployment by release trace Id method not allowed response has a 3xx status code
func (o *GetDeploymentByReleaseTraceIDMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployment by release trace Id method not allowed response has a 4xx status code
func (o *GetDeploymentByReleaseTraceIDMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get deployment by release trace Id method not allowed response has a 5xx status code
func (o *GetDeploymentByReleaseTraceIDMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get deployment by release trace Id method not allowed response a status code equal to that given
func (o *GetDeploymentByReleaseTraceIDMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get deployment by release trace Id method not allowed response
func (o *GetDeploymentByReleaseTraceIDMethodNotAllowed) Code() int {
	return 405
}

func (o *GetDeploymentByReleaseTraceIDMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/trace-id/{releaseTraceId}][%d] getDeploymentByReleaseTraceIdMethodNotAllowed %s", 405, payload)
}

func (o *GetDeploymentByReleaseTraceIDMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/trace-id/{releaseTraceId}][%d] getDeploymentByReleaseTraceIdMethodNotAllowed %s", 405, payload)
}

func (o *GetDeploymentByReleaseTraceIDMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetDeploymentByReleaseTraceIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeploymentByReleaseTraceIDInternalServerError creates a GetDeploymentByReleaseTraceIDInternalServerError with default headers values
func NewGetDeploymentByReleaseTraceIDInternalServerError() *GetDeploymentByReleaseTraceIDInternalServerError {
	return &GetDeploymentByReleaseTraceIDInternalServerError{}
}

/*
GetDeploymentByReleaseTraceIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetDeploymentByReleaseTraceIDInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get deployment by release trace Id internal server error response has a 2xx status code
func (o *GetDeploymentByReleaseTraceIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get deployment by release trace Id internal server error response has a 3xx status code
func (o *GetDeploymentByReleaseTraceIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get deployment by release trace Id internal server error response has a 4xx status code
func (o *GetDeploymentByReleaseTraceIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get deployment by release trace Id internal server error response has a 5xx status code
func (o *GetDeploymentByReleaseTraceIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get deployment by release trace Id internal server error response a status code equal to that given
func (o *GetDeploymentByReleaseTraceIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get deployment by release trace Id internal server error response
func (o *GetDeploymentByReleaseTraceIDInternalServerError) Code() int {
	return 500
}

func (o *GetDeploymentByReleaseTraceIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/trace-id/{releaseTraceId}][%d] getDeploymentByReleaseTraceIdInternalServerError %s", 500, payload)
}

func (o *GetDeploymentByReleaseTraceIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/trace-id/{releaseTraceId}][%d] getDeploymentByReleaseTraceIdInternalServerError %s", 500, payload)
}

func (o *GetDeploymentByReleaseTraceIDInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetDeploymentByReleaseTraceIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
