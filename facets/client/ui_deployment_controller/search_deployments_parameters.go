// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSearchDeploymentsParams creates a new SearchDeploymentsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchDeploymentsParams() *SearchDeploymentsParams {
	return &SearchDeploymentsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchDeploymentsParamsWithTimeout creates a new SearchDeploymentsParams object
// with the ability to set a timeout on a request.
func NewSearchDeploymentsParamsWithTimeout(timeout time.Duration) *SearchDeploymentsParams {
	return &SearchDeploymentsParams{
		timeout: timeout,
	}
}

// NewSearchDeploymentsParamsWithContext creates a new SearchDeploymentsParams object
// with the ability to set a context for a request.
func NewSearchDeploymentsParamsWithContext(ctx context.Context) *SearchDeploymentsParams {
	return &SearchDeploymentsParams{
		Context: ctx,
	}
}

// NewSearchDeploymentsParamsWithHTTPClient creates a new SearchDeploymentsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchDeploymentsParamsWithHTTPClient(client *http.Client) *SearchDeploymentsParams {
	return &SearchDeploymentsParams{
		HTTPClient: client,
	}
}

/*
SearchDeploymentsParams contains all the parameters to send to the API endpoint

	for the search deployments operation.

	Typically these are written to a http.Request.
*/
type SearchDeploymentsParams struct {

	// ClusterID.
	ClusterID string

	// End.
	End *string

	// ExcludeStatus.
	ExcludeStatus *string

	// PageNumber.
	PageNumber *string

	// PageSize.
	PageSize *string

	// ReleaseType.
	ReleaseType *string

	// SignedOff.
	SignedOff *string

	// Start.
	Start *string

	// Status.
	Status *string

	// TfVersion.
	TfVersion *string

	// TriggeredBy.
	TriggeredBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search deployments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchDeploymentsParams) WithDefaults() *SearchDeploymentsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search deployments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchDeploymentsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search deployments params
func (o *SearchDeploymentsParams) WithTimeout(timeout time.Duration) *SearchDeploymentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search deployments params
func (o *SearchDeploymentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search deployments params
func (o *SearchDeploymentsParams) WithContext(ctx context.Context) *SearchDeploymentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search deployments params
func (o *SearchDeploymentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search deployments params
func (o *SearchDeploymentsParams) WithHTTPClient(client *http.Client) *SearchDeploymentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search deployments params
func (o *SearchDeploymentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the search deployments params
func (o *SearchDeploymentsParams) WithClusterID(clusterID string) *SearchDeploymentsParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the search deployments params
func (o *SearchDeploymentsParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithEnd adds the end to the search deployments params
func (o *SearchDeploymentsParams) WithEnd(end *string) *SearchDeploymentsParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the search deployments params
func (o *SearchDeploymentsParams) SetEnd(end *string) {
	o.End = end
}

// WithExcludeStatus adds the excludeStatus to the search deployments params
func (o *SearchDeploymentsParams) WithExcludeStatus(excludeStatus *string) *SearchDeploymentsParams {
	o.SetExcludeStatus(excludeStatus)
	return o
}

// SetExcludeStatus adds the excludeStatus to the search deployments params
func (o *SearchDeploymentsParams) SetExcludeStatus(excludeStatus *string) {
	o.ExcludeStatus = excludeStatus
}

// WithPageNumber adds the pageNumber to the search deployments params
func (o *SearchDeploymentsParams) WithPageNumber(pageNumber *string) *SearchDeploymentsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the search deployments params
func (o *SearchDeploymentsParams) SetPageNumber(pageNumber *string) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the search deployments params
func (o *SearchDeploymentsParams) WithPageSize(pageSize *string) *SearchDeploymentsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the search deployments params
func (o *SearchDeploymentsParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WithReleaseType adds the releaseType to the search deployments params
func (o *SearchDeploymentsParams) WithReleaseType(releaseType *string) *SearchDeploymentsParams {
	o.SetReleaseType(releaseType)
	return o
}

// SetReleaseType adds the releaseType to the search deployments params
func (o *SearchDeploymentsParams) SetReleaseType(releaseType *string) {
	o.ReleaseType = releaseType
}

// WithSignedOff adds the signedOff to the search deployments params
func (o *SearchDeploymentsParams) WithSignedOff(signedOff *string) *SearchDeploymentsParams {
	o.SetSignedOff(signedOff)
	return o
}

// SetSignedOff adds the signedOff to the search deployments params
func (o *SearchDeploymentsParams) SetSignedOff(signedOff *string) {
	o.SignedOff = signedOff
}

// WithStart adds the start to the search deployments params
func (o *SearchDeploymentsParams) WithStart(start *string) *SearchDeploymentsParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the search deployments params
func (o *SearchDeploymentsParams) SetStart(start *string) {
	o.Start = start
}

// WithStatus adds the status to the search deployments params
func (o *SearchDeploymentsParams) WithStatus(status *string) *SearchDeploymentsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the search deployments params
func (o *SearchDeploymentsParams) SetStatus(status *string) {
	o.Status = status
}

// WithTfVersion adds the tfVersion to the search deployments params
func (o *SearchDeploymentsParams) WithTfVersion(tfVersion *string) *SearchDeploymentsParams {
	o.SetTfVersion(tfVersion)
	return o
}

// SetTfVersion adds the tfVersion to the search deployments params
func (o *SearchDeploymentsParams) SetTfVersion(tfVersion *string) {
	o.TfVersion = tfVersion
}

// WithTriggeredBy adds the triggeredBy to the search deployments params
func (o *SearchDeploymentsParams) WithTriggeredBy(triggeredBy *string) *SearchDeploymentsParams {
	o.SetTriggeredBy(triggeredBy)
	return o
}

// SetTriggeredBy adds the triggeredBy to the search deployments params
func (o *SearchDeploymentsParams) SetTriggeredBy(triggeredBy *string) {
	o.TriggeredBy = triggeredBy
}

// WriteToRequest writes these params to a swagger request
func (o *SearchDeploymentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID); err != nil {
		return err
	}

	if o.End != nil {

		// query param end
		var qrEnd string

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := qrEnd
		if qEnd != "" {

			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}
	}

	if o.ExcludeStatus != nil {

		// query param excludeStatus
		var qrExcludeStatus string

		if o.ExcludeStatus != nil {
			qrExcludeStatus = *o.ExcludeStatus
		}
		qExcludeStatus := qrExcludeStatus
		if qExcludeStatus != "" {

			if err := r.SetQueryParam("excludeStatus", qExcludeStatus); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber string

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize string

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.ReleaseType != nil {

		// query param releaseType
		var qrReleaseType string

		if o.ReleaseType != nil {
			qrReleaseType = *o.ReleaseType
		}
		qReleaseType := qrReleaseType
		if qReleaseType != "" {

			if err := r.SetQueryParam("releaseType", qReleaseType); err != nil {
				return err
			}
		}
	}

	if o.SignedOff != nil {

		// query param signedOff
		var qrSignedOff string

		if o.SignedOff != nil {
			qrSignedOff = *o.SignedOff
		}
		qSignedOff := qrSignedOff
		if qSignedOff != "" {

			if err := r.SetQueryParam("signedOff", qSignedOff); err != nil {
				return err
			}
		}
	}

	if o.Start != nil {

		// query param start
		var qrStart string

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := qrStart
		if qStart != "" {

			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.TfVersion != nil {

		// query param tfVersion
		var qrTfVersion string

		if o.TfVersion != nil {
			qrTfVersion = *o.TfVersion
		}
		qTfVersion := qrTfVersion
		if qTfVersion != "" {

			if err := r.SetQueryParam("tfVersion", qTfVersion); err != nil {
				return err
			}
		}
	}

	if o.TriggeredBy != nil {

		// query param triggeredBy
		var qrTriggeredBy string

		if o.TriggeredBy != nil {
			qrTriggeredBy = *o.TriggeredBy
		}
		qTriggeredBy := qrTriggeredBy
		if qTriggeredBy != "" {

			if err := r.SetQueryParam("triggeredBy", qTriggeredBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
