// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchDeploymentsUsingGETParams creates a new SearchDeploymentsUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchDeploymentsUsingGETParams() *SearchDeploymentsUsingGETParams {
	return &SearchDeploymentsUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchDeploymentsUsingGETParamsWithTimeout creates a new SearchDeploymentsUsingGETParams object
// with the ability to set a timeout on a request.
func NewSearchDeploymentsUsingGETParamsWithTimeout(timeout time.Duration) *SearchDeploymentsUsingGETParams {
	return &SearchDeploymentsUsingGETParams{
		timeout: timeout,
	}
}

// NewSearchDeploymentsUsingGETParamsWithContext creates a new SearchDeploymentsUsingGETParams object
// with the ability to set a context for a request.
func NewSearchDeploymentsUsingGETParamsWithContext(ctx context.Context) *SearchDeploymentsUsingGETParams {
	return &SearchDeploymentsUsingGETParams{
		Context: ctx,
	}
}

// NewSearchDeploymentsUsingGETParamsWithHTTPClient creates a new SearchDeploymentsUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchDeploymentsUsingGETParamsWithHTTPClient(client *http.Client) *SearchDeploymentsUsingGETParams {
	return &SearchDeploymentsUsingGETParams{
		HTTPClient: client,
	}
}

/*
SearchDeploymentsUsingGETParams contains all the parameters to send to the API endpoint

	for the search deployments using g e t operation.

	Typically these are written to a http.Request.
*/
type SearchDeploymentsUsingGETParams struct {

	/* ClusterID.

	   clusterId
	*/
	ClusterID string

	/* End.

	   end

	   Format: date-time
	*/
	End *strfmt.DateTime

	/* ExcludeStatus.

	   excludeStatus
	*/
	ExcludeStatus []string

	/* PageNumber.

	   pageNumber

	   Format: int32
	*/
	PageNumber *int32

	/* PageSize.

	   pageSize

	   Format: int32
	   Default: 50
	*/
	PageSize *int32

	/* ReleaseType.

	   releaseType
	*/
	ReleaseType *string

	/* SignedOff.

	   signedOff
	*/
	SignedOff *bool

	/* Start.

	   start

	   Format: date-time
	*/
	Start *strfmt.DateTime

	/* Status.

	   status
	*/
	Status *string

	/* TriggeredBy.

	   triggeredBy
	*/
	TriggeredBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search deployments using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchDeploymentsUsingGETParams) WithDefaults() *SearchDeploymentsUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search deployments using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchDeploymentsUsingGETParams) SetDefaults() {
	var (
		pageNumberDefault = int32(0)

		pageSizeDefault = int32(50)
	)

	val := SearchDeploymentsUsingGETParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) WithTimeout(timeout time.Duration) *SearchDeploymentsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) WithContext(ctx context.Context) *SearchDeploymentsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) WithHTTPClient(client *http.Client) *SearchDeploymentsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) WithClusterID(clusterID string) *SearchDeploymentsUsingGETParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithEnd adds the end to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) WithEnd(end *strfmt.DateTime) *SearchDeploymentsUsingGETParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) SetEnd(end *strfmt.DateTime) {
	o.End = end
}

// WithExcludeStatus adds the excludeStatus to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) WithExcludeStatus(excludeStatus []string) *SearchDeploymentsUsingGETParams {
	o.SetExcludeStatus(excludeStatus)
	return o
}

// SetExcludeStatus adds the excludeStatus to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) SetExcludeStatus(excludeStatus []string) {
	o.ExcludeStatus = excludeStatus
}

// WithPageNumber adds the pageNumber to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) WithPageNumber(pageNumber *int32) *SearchDeploymentsUsingGETParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) WithPageSize(pageSize *int32) *SearchDeploymentsUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithReleaseType adds the releaseType to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) WithReleaseType(releaseType *string) *SearchDeploymentsUsingGETParams {
	o.SetReleaseType(releaseType)
	return o
}

// SetReleaseType adds the releaseType to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) SetReleaseType(releaseType *string) {
	o.ReleaseType = releaseType
}

// WithSignedOff adds the signedOff to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) WithSignedOff(signedOff *bool) *SearchDeploymentsUsingGETParams {
	o.SetSignedOff(signedOff)
	return o
}

// SetSignedOff adds the signedOff to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) SetSignedOff(signedOff *bool) {
	o.SignedOff = signedOff
}

// WithStart adds the start to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) WithStart(start *strfmt.DateTime) *SearchDeploymentsUsingGETParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) SetStart(start *strfmt.DateTime) {
	o.Start = start
}

// WithStatus adds the status to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) WithStatus(status *string) *SearchDeploymentsUsingGETParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) SetStatus(status *string) {
	o.Status = status
}

// WithTriggeredBy adds the triggeredBy to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) WithTriggeredBy(triggeredBy *string) *SearchDeploymentsUsingGETParams {
	o.SetTriggeredBy(triggeredBy)
	return o
}

// SetTriggeredBy adds the triggeredBy to the search deployments using g e t params
func (o *SearchDeploymentsUsingGETParams) SetTriggeredBy(triggeredBy *string) {
	o.TriggeredBy = triggeredBy
}

// WriteToRequest writes these params to a swagger request
func (o *SearchDeploymentsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID); err != nil {
		return err
	}

	if o.End != nil {

		// query param end
		var qrEnd strfmt.DateTime

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := qrEnd.String()
		if qEnd != "" {

			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}
	}

	if o.ExcludeStatus != nil {

		// binding items for excludeStatus
		joinedExcludeStatus := o.bindParamExcludeStatus(reg)

		// query array param excludeStatus
		if err := r.SetQueryParam("excludeStatus", joinedExcludeStatus...); err != nil {
			return err
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.ReleaseType != nil {

		// query param releaseType
		var qrReleaseType string

		if o.ReleaseType != nil {
			qrReleaseType = *o.ReleaseType
		}
		qReleaseType := qrReleaseType
		if qReleaseType != "" {

			if err := r.SetQueryParam("releaseType", qReleaseType); err != nil {
				return err
			}
		}
	}

	if o.SignedOff != nil {

		// query param signedOff
		var qrSignedOff bool

		if o.SignedOff != nil {
			qrSignedOff = *o.SignedOff
		}
		qSignedOff := swag.FormatBool(qrSignedOff)
		if qSignedOff != "" {

			if err := r.SetQueryParam("signedOff", qSignedOff); err != nil {
				return err
			}
		}
	}

	if o.Start != nil {

		// query param start
		var qrStart strfmt.DateTime

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := qrStart.String()
		if qStart != "" {

			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.TriggeredBy != nil {

		// query param triggeredBy
		var qrTriggeredBy string

		if o.TriggeredBy != nil {
			qrTriggeredBy = *o.TriggeredBy
		}
		qTriggeredBy := qrTriggeredBy
		if qTriggeredBy != "" {

			if err := r.SetQueryParam("triggeredBy", qTriggeredBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchDeploymentsUsingGET binds the parameter excludeStatus
func (o *SearchDeploymentsUsingGETParams) bindParamExcludeStatus(formats strfmt.Registry) []string {
	excludeStatusIR := o.ExcludeStatus

	var excludeStatusIC []string
	for _, excludeStatusIIR := range excludeStatusIR { // explode []string

		excludeStatusIIV := excludeStatusIIR // string as string
		excludeStatusIC = append(excludeStatusIC, excludeStatusIIV)
	}

	// items.CollectionFormat: "multi"
	excludeStatusIS := swag.JoinByFormat(excludeStatusIC, "multi")

	return excludeStatusIS
}
