// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// TriggerMaintenanceReleaseReader is a Reader for the TriggerMaintenanceRelease structure.
type TriggerMaintenanceReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TriggerMaintenanceReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTriggerMaintenanceReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTriggerMaintenanceReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTriggerMaintenanceReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewTriggerMaintenanceReleaseMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTriggerMaintenanceReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/deployments/maintenance] triggerMaintenanceRelease", response, response.Code())
	}
}

// NewTriggerMaintenanceReleaseOK creates a TriggerMaintenanceReleaseOK with default headers values
func NewTriggerMaintenanceReleaseOK() *TriggerMaintenanceReleaseOK {
	return &TriggerMaintenanceReleaseOK{}
}

/*
TriggerMaintenanceReleaseOK describes a response with status code 200, with default header values.

OK
*/
type TriggerMaintenanceReleaseOK struct {
	Payload *models.DeploymentLog
}

// IsSuccess returns true when this trigger maintenance release o k response has a 2xx status code
func (o *TriggerMaintenanceReleaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this trigger maintenance release o k response has a 3xx status code
func (o *TriggerMaintenanceReleaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this trigger maintenance release o k response has a 4xx status code
func (o *TriggerMaintenanceReleaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this trigger maintenance release o k response has a 5xx status code
func (o *TriggerMaintenanceReleaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this trigger maintenance release o k response a status code equal to that given
func (o *TriggerMaintenanceReleaseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the trigger maintenance release o k response
func (o *TriggerMaintenanceReleaseOK) Code() int {
	return 200
}

func (o *TriggerMaintenanceReleaseOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/maintenance][%d] triggerMaintenanceReleaseOK %s", 200, payload)
}

func (o *TriggerMaintenanceReleaseOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/maintenance][%d] triggerMaintenanceReleaseOK %s", 200, payload)
}

func (o *TriggerMaintenanceReleaseOK) GetPayload() *models.DeploymentLog {
	return o.Payload
}

func (o *TriggerMaintenanceReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTriggerMaintenanceReleaseBadRequest creates a TriggerMaintenanceReleaseBadRequest with default headers values
func NewTriggerMaintenanceReleaseBadRequest() *TriggerMaintenanceReleaseBadRequest {
	return &TriggerMaintenanceReleaseBadRequest{}
}

/*
TriggerMaintenanceReleaseBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type TriggerMaintenanceReleaseBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this trigger maintenance release bad request response has a 2xx status code
func (o *TriggerMaintenanceReleaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this trigger maintenance release bad request response has a 3xx status code
func (o *TriggerMaintenanceReleaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this trigger maintenance release bad request response has a 4xx status code
func (o *TriggerMaintenanceReleaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this trigger maintenance release bad request response has a 5xx status code
func (o *TriggerMaintenanceReleaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this trigger maintenance release bad request response a status code equal to that given
func (o *TriggerMaintenanceReleaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the trigger maintenance release bad request response
func (o *TriggerMaintenanceReleaseBadRequest) Code() int {
	return 400
}

func (o *TriggerMaintenanceReleaseBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/maintenance][%d] triggerMaintenanceReleaseBadRequest %s", 400, payload)
}

func (o *TriggerMaintenanceReleaseBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/maintenance][%d] triggerMaintenanceReleaseBadRequest %s", 400, payload)
}

func (o *TriggerMaintenanceReleaseBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *TriggerMaintenanceReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTriggerMaintenanceReleaseNotFound creates a TriggerMaintenanceReleaseNotFound with default headers values
func NewTriggerMaintenanceReleaseNotFound() *TriggerMaintenanceReleaseNotFound {
	return &TriggerMaintenanceReleaseNotFound{}
}

/*
TriggerMaintenanceReleaseNotFound describes a response with status code 404, with default header values.

Not Found
*/
type TriggerMaintenanceReleaseNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this trigger maintenance release not found response has a 2xx status code
func (o *TriggerMaintenanceReleaseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this trigger maintenance release not found response has a 3xx status code
func (o *TriggerMaintenanceReleaseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this trigger maintenance release not found response has a 4xx status code
func (o *TriggerMaintenanceReleaseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this trigger maintenance release not found response has a 5xx status code
func (o *TriggerMaintenanceReleaseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this trigger maintenance release not found response a status code equal to that given
func (o *TriggerMaintenanceReleaseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the trigger maintenance release not found response
func (o *TriggerMaintenanceReleaseNotFound) Code() int {
	return 404
}

func (o *TriggerMaintenanceReleaseNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/maintenance][%d] triggerMaintenanceReleaseNotFound %s", 404, payload)
}

func (o *TriggerMaintenanceReleaseNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/maintenance][%d] triggerMaintenanceReleaseNotFound %s", 404, payload)
}

func (o *TriggerMaintenanceReleaseNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *TriggerMaintenanceReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTriggerMaintenanceReleaseMethodNotAllowed creates a TriggerMaintenanceReleaseMethodNotAllowed with default headers values
func NewTriggerMaintenanceReleaseMethodNotAllowed() *TriggerMaintenanceReleaseMethodNotAllowed {
	return &TriggerMaintenanceReleaseMethodNotAllowed{}
}

/*
TriggerMaintenanceReleaseMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type TriggerMaintenanceReleaseMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this trigger maintenance release method not allowed response has a 2xx status code
func (o *TriggerMaintenanceReleaseMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this trigger maintenance release method not allowed response has a 3xx status code
func (o *TriggerMaintenanceReleaseMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this trigger maintenance release method not allowed response has a 4xx status code
func (o *TriggerMaintenanceReleaseMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this trigger maintenance release method not allowed response has a 5xx status code
func (o *TriggerMaintenanceReleaseMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this trigger maintenance release method not allowed response a status code equal to that given
func (o *TriggerMaintenanceReleaseMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the trigger maintenance release method not allowed response
func (o *TriggerMaintenanceReleaseMethodNotAllowed) Code() int {
	return 405
}

func (o *TriggerMaintenanceReleaseMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/maintenance][%d] triggerMaintenanceReleaseMethodNotAllowed %s", 405, payload)
}

func (o *TriggerMaintenanceReleaseMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/maintenance][%d] triggerMaintenanceReleaseMethodNotAllowed %s", 405, payload)
}

func (o *TriggerMaintenanceReleaseMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *TriggerMaintenanceReleaseMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTriggerMaintenanceReleaseInternalServerError creates a TriggerMaintenanceReleaseInternalServerError with default headers values
func NewTriggerMaintenanceReleaseInternalServerError() *TriggerMaintenanceReleaseInternalServerError {
	return &TriggerMaintenanceReleaseInternalServerError{}
}

/*
TriggerMaintenanceReleaseInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type TriggerMaintenanceReleaseInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this trigger maintenance release internal server error response has a 2xx status code
func (o *TriggerMaintenanceReleaseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this trigger maintenance release internal server error response has a 3xx status code
func (o *TriggerMaintenanceReleaseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this trigger maintenance release internal server error response has a 4xx status code
func (o *TriggerMaintenanceReleaseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this trigger maintenance release internal server error response has a 5xx status code
func (o *TriggerMaintenanceReleaseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this trigger maintenance release internal server error response a status code equal to that given
func (o *TriggerMaintenanceReleaseInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the trigger maintenance release internal server error response
func (o *TriggerMaintenanceReleaseInternalServerError) Code() int {
	return 500
}

func (o *TriggerMaintenanceReleaseInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/maintenance][%d] triggerMaintenanceReleaseInternalServerError %s", 500, payload)
}

func (o *TriggerMaintenanceReleaseInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/deployments/maintenance][%d] triggerMaintenanceReleaseInternalServerError %s", 500, payload)
}

func (o *TriggerMaintenanceReleaseInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *TriggerMaintenanceReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
