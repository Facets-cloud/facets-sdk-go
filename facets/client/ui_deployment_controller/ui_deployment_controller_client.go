// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui deployment controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui deployment controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui deployment controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui deployment controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AbortAutomationSuiteUsingDELETE1(params *AbortAutomationSuiteUsingDELETE1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AbortAutomationSuiteUsingDELETE1OK, *AbortAutomationSuiteUsingDELETE1NoContent, error)

	ApproveReleaseUsingPOST(params *ApproveReleaseUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApproveReleaseUsingPOSTOK, *ApproveReleaseUsingPOSTCreated, error)

	CleanS3SourcesUsingDELETE(params *CleanS3SourcesUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CleanS3SourcesUsingDELETEOK, *CleanS3SourcesUsingDELETENoContent, error)

	CreateDeploymentUsingPOST(params *CreateDeploymentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDeploymentUsingPOSTOK, *CreateDeploymentUsingPOSTCreated, error)

	DestroyClusterUsingDELETE(params *DestroyClusterUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DestroyClusterUsingDELETEOK, *DestroyClusterUsingDELETENoContent, error)

	GetClusterStateUsingGET(params *GetClusterStateUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterStateUsingGETOK, error)

	GetDeploymentLogsUsingGET(params *GetDeploymentLogsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentLogsUsingGETOK, error)

	GetDeploymentStatsUsingGET(params *GetDeploymentStatsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentStatsUsingGETOK, error)

	GetDeploymentUsingGET(params *GetDeploymentUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentUsingGETOK, error)

	GetDeploymentsOverviewUsingGET(params *GetDeploymentsOverviewUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentsOverviewUsingGETOK, error)

	GetDeploymentsUsingGET1(params *GetDeploymentsUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentsUsingGET1OK, error)

	GetLatestReleaseByApplicationUsingGET(params *GetLatestReleaseByApplicationUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLatestReleaseByApplicationUsingGETOK, error)

	GetLatestReleaseUsingGET(params *GetLatestReleaseUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLatestReleaseUsingGETOK, error)

	GetReleaseChangesUsingGET(params *GetReleaseChangesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReleaseChangesUsingGETOK, error)

	LaunchClusterUsingPUT(params *LaunchClusterUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LaunchClusterUsingPUTOK, *LaunchClusterUsingPUTCreated, error)

	RejectReleaseUsingPOST(params *RejectReleaseUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectReleaseUsingPOSTOK, *RejectReleaseUsingPOSTCreated, error)

	ReleaseUsingPUT(params *ReleaseUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReleaseUsingPUTOK, *ReleaseUsingPUTCreated, error)

	ReleaseV2UsingPUT(params *ReleaseV2UsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReleaseV2UsingPUTOK, *ReleaseV2UsingPUTCreated, error)

	RunHotfixDeploymentRecipeUsingPOST(params *RunHotfixDeploymentRecipeUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RunHotfixDeploymentRecipeUsingPOSTOK, *RunHotfixDeploymentRecipeUsingPOSTCreated, error)

	SearchDeploymentsUsingGET(params *SearchDeploymentsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDeploymentsUsingGETOK, error)

	SignOffDeploymentUsingPUT(params *SignOffDeploymentUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SignOffDeploymentUsingPUTOK, *SignOffDeploymentUsingPUTCreated, error)

	SimulateUsingGET(params *SimulateUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SimulateUsingGETOK, error)

	StateUnlockUsingPUT(params *StateUnlockUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StateUnlockUsingPUTOK, *StateUnlockUsingPUTCreated, error)

	StreamDeploymentLogsUsingGET(params *StreamDeploymentLogsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StreamDeploymentLogsUsingGETOK, error)

	TriggerMaintenanceReleaseUsingPOST(params *TriggerMaintenanceReleaseUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerMaintenanceReleaseUsingPOSTOK, *TriggerMaintenanceReleaseUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AbortAutomationSuiteUsingDELETE1 aborts automation suite
*/
func (a *Client) AbortAutomationSuiteUsingDELETE1(params *AbortAutomationSuiteUsingDELETE1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AbortAutomationSuiteUsingDELETE1OK, *AbortAutomationSuiteUsingDELETE1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAbortAutomationSuiteUsingDELETE1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "abortAutomationSuiteUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/qa/{executionId}/abortSuite",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AbortAutomationSuiteUsingDELETE1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AbortAutomationSuiteUsingDELETE1OK:
		return value, nil, nil
	case *AbortAutomationSuiteUsingDELETE1NoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_deployment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ApproveReleaseUsingPOST approves release
*/
func (a *Client) ApproveReleaseUsingPOST(params *ApproveReleaseUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApproveReleaseUsingPOSTOK, *ApproveReleaseUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApproveReleaseUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "approveReleaseUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApproveReleaseUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ApproveReleaseUsingPOSTOK:
		return value, nil, nil
	case *ApproveReleaseUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_deployment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CleanS3SourcesUsingDELETE cleans s3 sources
*/
func (a *Client) CleanS3SourcesUsingDELETE(params *CleanS3SourcesUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CleanS3SourcesUsingDELETEOK, *CleanS3SourcesUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCleanS3SourcesUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cleanS3SourcesUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/clean-s3-sources",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CleanS3SourcesUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CleanS3SourcesUsingDELETEOK:
		return value, nil, nil
	case *CleanS3SourcesUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_deployment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateDeploymentUsingPOST creates deployment
*/
func (a *Client) CreateDeploymentUsingPOST(params *CreateDeploymentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDeploymentUsingPOSTOK, *CreateDeploymentUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDeploymentUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDeploymentUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDeploymentUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateDeploymentUsingPOSTOK:
		return value, nil, nil
	case *CreateDeploymentUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_deployment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DestroyClusterUsingDELETE destroys cluster
*/
func (a *Client) DestroyClusterUsingDELETE(params *DestroyClusterUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DestroyClusterUsingDELETEOK, *DestroyClusterUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestroyClusterUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "destroyClusterUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/destroy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DestroyClusterUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DestroyClusterUsingDELETEOK:
		return value, nil, nil
	case *DestroyClusterUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_deployment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterStateUsingGET gets cluster state
*/
func (a *Client) GetClusterStateUsingGET(params *GetClusterStateUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterStateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterStateUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterStateUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/state",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterStateUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterStateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterStateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeploymentLogsUsingGET gets deployment logs
*/
func (a *Client) GetDeploymentLogsUsingGET(params *GetDeploymentLogsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentLogsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentLogsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentLogsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/logs",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentLogsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentLogsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentLogsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeploymentStatsUsingGET gets deployment stats
*/
func (a *Client) GetDeploymentStatsUsingGET(params *GetDeploymentStatsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentStatsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentStatsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentStatsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/stats",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentStatsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentStatsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentStatsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeploymentUsingGET gets deployment
*/
func (a *Client) GetDeploymentUsingGET(params *GetDeploymentUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeploymentsOverviewUsingGET gets deployments overview
*/
func (a *Client) GetDeploymentsOverviewUsingGET(params *GetDeploymentsOverviewUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentsOverviewUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentsOverviewUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentsOverviewUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/overview",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentsOverviewUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentsOverviewUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentsOverviewUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeploymentsUsingGET1 gets deployments
*/
func (a *Client) GetDeploymentsUsingGET1(params *GetDeploymentsUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentsUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentsUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentsUsingGET_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentsUsingGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentsUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentsUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLatestReleaseByApplicationUsingGET gets latest release by application
*/
func (a *Client) GetLatestReleaseByApplicationUsingGET(params *GetLatestReleaseByApplicationUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLatestReleaseByApplicationUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLatestReleaseByApplicationUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLatestReleaseByApplicationUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release/{application}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLatestReleaseByApplicationUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLatestReleaseByApplicationUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLatestReleaseByApplicationUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLatestReleaseUsingGET gets latest release
*/
func (a *Client) GetLatestReleaseUsingGET(params *GetLatestReleaseUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLatestReleaseUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLatestReleaseUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLatestReleaseUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLatestReleaseUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLatestReleaseUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLatestReleaseUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReleaseChangesUsingGET gets release changes
*/
func (a *Client) GetReleaseChangesUsingGET(params *GetReleaseChangesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReleaseChangesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseChangesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReleaseChangesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/release-changes",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseChangesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleaseChangesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleaseChangesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LaunchClusterUsingPUT launches cluster
*/
func (a *Client) LaunchClusterUsingPUT(params *LaunchClusterUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LaunchClusterUsingPUTOK, *LaunchClusterUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLaunchClusterUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "launchClusterUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/launch",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LaunchClusterUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LaunchClusterUsingPUTOK:
		return value, nil, nil
	case *LaunchClusterUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_deployment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RejectReleaseUsingPOST rejects release
*/
func (a *Client) RejectReleaseUsingPOST(params *RejectReleaseUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectReleaseUsingPOSTOK, *RejectReleaseUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectReleaseUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectReleaseUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RejectReleaseUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RejectReleaseUsingPOSTOK:
		return value, nil, nil
	case *RejectReleaseUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_deployment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReleaseUsingPUT releases
*/
func (a *Client) ReleaseUsingPUT(params *ReleaseUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReleaseUsingPUTOK, *ReleaseUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReleaseUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "releaseUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/release",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReleaseUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReleaseUsingPUTOK:
		return value, nil, nil
	case *ReleaseUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_deployment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReleaseV2UsingPUT releases v2
*/
func (a *Client) ReleaseV2UsingPUT(params *ReleaseV2UsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReleaseV2UsingPUTOK, *ReleaseV2UsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReleaseV2UsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "releaseV2UsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/releaseV2/{releaseType}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReleaseV2UsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReleaseV2UsingPUTOK:
		return value, nil, nil
	case *ReleaseV2UsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_deployment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RunHotfixDeploymentRecipeUsingPOST runs hotfix deployment recipe
*/
func (a *Client) RunHotfixDeploymentRecipeUsingPOST(params *RunHotfixDeploymentRecipeUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RunHotfixDeploymentRecipeUsingPOSTOK, *RunHotfixDeploymentRecipeUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunHotfixDeploymentRecipeUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "runHotfixDeploymentRecipeUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/recipes/deployment/hotfix",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RunHotfixDeploymentRecipeUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunHotfixDeploymentRecipeUsingPOSTOK:
		return value, nil, nil
	case *RunHotfixDeploymentRecipeUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_deployment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchDeploymentsUsingGET searches deployments
*/
func (a *Client) SearchDeploymentsUsingGET(params *SearchDeploymentsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDeploymentsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchDeploymentsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchDeploymentsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/search",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchDeploymentsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchDeploymentsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchDeploymentsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SignOffDeploymentUsingPUT signs off deployment
*/
func (a *Client) SignOffDeploymentUsingPUT(params *SignOffDeploymentUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SignOffDeploymentUsingPUTOK, *SignOffDeploymentUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSignOffDeploymentUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "signOffDeploymentUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/signoff",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SignOffDeploymentUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SignOffDeploymentUsingPUTOK:
		return value, nil, nil
	case *SignOffDeploymentUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_deployment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SimulateUsingGET simulates
*/
func (a *Client) SimulateUsingGET(params *SimulateUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SimulateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSimulateUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "simulateUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/simulate",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SimulateUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SimulateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for simulateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StateUnlockUsingPUT states unlock
*/
func (a *Client) StateUnlockUsingPUT(params *StateUnlockUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StateUnlockUsingPUTOK, *StateUnlockUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStateUnlockUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stateUnlockUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/unlock",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StateUnlockUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StateUnlockUsingPUTOK:
		return value, nil, nil
	case *StateUnlockUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_deployment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StreamDeploymentLogsUsingGET streams deployment logs
*/
func (a *Client) StreamDeploymentLogsUsingGET(params *StreamDeploymentLogsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StreamDeploymentLogsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStreamDeploymentLogsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "streamDeploymentLogsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/logs/stream",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StreamDeploymentLogsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StreamDeploymentLogsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for streamDeploymentLogsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TriggerMaintenanceReleaseUsingPOST triggers maintenance release
*/
func (a *Client) TriggerMaintenanceReleaseUsingPOST(params *TriggerMaintenanceReleaseUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerMaintenanceReleaseUsingPOSTOK, *TriggerMaintenanceReleaseUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerMaintenanceReleaseUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "triggerMaintenanceReleaseUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/maintenance",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggerMaintenanceReleaseUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TriggerMaintenanceReleaseUsingPOSTOK:
		return value, nil, nil
	case *TriggerMaintenanceReleaseUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_deployment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
