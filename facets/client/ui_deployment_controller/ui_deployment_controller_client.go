// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui deployment controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui deployment controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui deployment controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui deployment controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AbortAutomationSuite(params *AbortAutomationSuiteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AbortAutomationSuiteOK, error)

	ApproveRelease(params *ApproveReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApproveReleaseOK, error)

	CreateDeployment(params *CreateDeploymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDeploymentOK, error)

	DestroyCluster(params *DestroyClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DestroyClusterOK, error)

	DownloadTerraformExport(params *DownloadTerraformExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DownloadTerraformExportOK, error)

	GetClusterState(params *GetClusterStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterStateOK, error)

	GetDeployment(params *GetDeploymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentOK, error)

	GetDeploymentByReleaseTraceID(params *GetDeploymentByReleaseTraceIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentByReleaseTraceIDOK, error)

	GetDeploymentLogs(params *GetDeploymentLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentLogsOK, error)

	GetDeploymentStats(params *GetDeploymentStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentStatsOK, error)

	GetDeployments(params *GetDeploymentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentsOK, error)

	GetDeploymentsOverview(params *GetDeploymentsOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentsOverviewOK, error)

	GetLatestRelease(params *GetLatestReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLatestReleaseOK, error)

	GetLatestReleaseByApplication(params *GetLatestReleaseByApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLatestReleaseByApplicationOK, error)

	GetReleaseChanges(params *GetReleaseChangesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReleaseChangesOK, error)

	LaunchCluster(params *LaunchClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LaunchClusterOK, error)

	RejectRelease(params *RejectReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectReleaseOK, error)

	Release(params *ReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReleaseOK, error)

	ReleaseV2(params *ReleaseV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReleaseV2OK, error)

	RunHotfixDeploymentRecipe(params *RunHotfixDeploymentRecipeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RunHotfixDeploymentRecipeOK, error)

	SearchDeployments(params *SearchDeploymentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDeploymentsOK, error)

	SignOffDeployment(params *SignOffDeploymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SignOffDeploymentOK, error)

	Simulate(params *SimulateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SimulateOK, error)

	StateUnlock(params *StateUnlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StateUnlockOK, error)

	StreamDeploymentLogs(params *StreamDeploymentLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StreamDeploymentLogsOK, error)

	TriggerMaintenanceRelease(params *TriggerMaintenanceReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerMaintenanceReleaseOK, error)

	TriggerRollbackPlanRelease(params *TriggerRollbackPlanReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerRollbackPlanReleaseOK, error)

	TriggerTerraformExport(params *TriggerTerraformExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerTerraformExportOK, error)

	UploadReleaseMetadata(params *UploadReleaseMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadReleaseMetadataOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AbortAutomationSuite abort automation suite API
*/
func (a *Client) AbortAutomationSuite(params *AbortAutomationSuiteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AbortAutomationSuiteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAbortAutomationSuiteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "abortAutomationSuite",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/qa/{executionId}/abortSuite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AbortAutomationSuiteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AbortAutomationSuiteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for abortAutomationSuite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ApproveRelease approve release API
*/
func (a *Client) ApproveRelease(params *ApproveReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApproveReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApproveReleaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "approveRelease",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApproveReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApproveReleaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for approveRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateDeployment create deployment API
*/
func (a *Client) CreateDeployment(params *CreateDeploymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDeploymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDeployment",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DestroyCluster destroy cluster API
*/
func (a *Client) DestroyCluster(params *DestroyClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DestroyClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestroyClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "destroyCluster",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/destroy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DestroyClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DestroyClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for destroyCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DownloadTerraformExport download terraform export API
*/
func (a *Client) DownloadTerraformExport(params *DownloadTerraformExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DownloadTerraformExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadTerraformExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "downloadTerraformExport",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/download-terraform-export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadTerraformExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadTerraformExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for downloadTerraformExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterState get cluster state API
*/
func (a *Client) GetClusterState(params *GetClusterStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterState",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeployment get deployment API
*/
func (a *Client) GetDeployment(params *GetDeploymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeployment",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeploymentByReleaseTraceID get deployment by release trace Id API
*/
func (a *Client) GetDeploymentByReleaseTraceID(params *GetDeploymentByReleaseTraceIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentByReleaseTraceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentByReleaseTraceIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentByReleaseTraceId",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/trace-id/{releaseTraceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentByReleaseTraceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentByReleaseTraceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentByReleaseTraceId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeploymentLogs get deployment logs API
*/
func (a *Client) GetDeploymentLogs(params *GetDeploymentLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentLogs",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeploymentStats get deployment stats API
*/
func (a *Client) GetDeploymentStats(params *GetDeploymentStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentStats",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeployments get deployments API
*/
func (a *Client) GetDeployments(params *GetDeploymentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeployments",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeployments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeploymentsOverview get deployments overview API
*/
func (a *Client) GetDeploymentsOverview(params *GetDeploymentsOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentsOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentsOverviewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentsOverview",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentsOverviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentsOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentsOverview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLatestRelease get latest release API
*/
func (a *Client) GetLatestRelease(params *GetLatestReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLatestReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLatestReleaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLatestRelease",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLatestReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLatestReleaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLatestRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLatestReleaseByApplication get latest release by application API
*/
func (a *Client) GetLatestReleaseByApplication(params *GetLatestReleaseByApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLatestReleaseByApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLatestReleaseByApplicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLatestReleaseByApplication",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release/{application}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLatestReleaseByApplicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLatestReleaseByApplicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLatestReleaseByApplication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReleaseChanges get release changes API
*/
func (a *Client) GetReleaseChanges(params *GetReleaseChangesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReleaseChangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseChangesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReleaseChanges",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/release-changes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseChangesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleaseChangesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleaseChanges: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LaunchCluster launch cluster API
*/
func (a *Client) LaunchCluster(params *LaunchClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LaunchClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLaunchClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "launchCluster",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/launch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LaunchClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LaunchClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for launchCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RejectRelease reject release API
*/
func (a *Client) RejectRelease(params *RejectReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectReleaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectRelease",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RejectReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectReleaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Release release API
*/
func (a *Client) Release(params *ReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReleaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "release",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/release",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReleaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for release: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReleaseV2 release v2 API
*/
func (a *Client) ReleaseV2(params *ReleaseV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReleaseV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReleaseV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "releaseV2",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/releaseV2/{releaseType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReleaseV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReleaseV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for releaseV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RunHotfixDeploymentRecipe run hotfix deployment recipe API
*/
func (a *Client) RunHotfixDeploymentRecipe(params *RunHotfixDeploymentRecipeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RunHotfixDeploymentRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunHotfixDeploymentRecipeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "runHotfixDeploymentRecipe",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/recipes/deployment/hotfix",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RunHotfixDeploymentRecipeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunHotfixDeploymentRecipeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for runHotfixDeploymentRecipe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchDeployments search deployments API
*/
func (a *Client) SearchDeployments(params *SearchDeploymentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDeploymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchDeploymentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchDeployments",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchDeploymentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchDeploymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchDeployments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SignOffDeployment sign off deployment API
*/
func (a *Client) SignOffDeployment(params *SignOffDeploymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SignOffDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSignOffDeploymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "signOffDeployment",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/signoff",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SignOffDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SignOffDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for signOffDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Simulate simulate API
*/
func (a *Client) Simulate(params *SimulateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SimulateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSimulateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "simulate",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/simulate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SimulateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SimulateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for simulate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StateUnlock state unlock API
*/
func (a *Client) StateUnlock(params *StateUnlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StateUnlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStateUnlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stateUnlock",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/unlock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StateUnlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StateUnlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stateUnlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StreamDeploymentLogs stream deployment logs API
*/
func (a *Client) StreamDeploymentLogs(params *StreamDeploymentLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StreamDeploymentLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStreamDeploymentLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "streamDeploymentLogs",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/logs/stream",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StreamDeploymentLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StreamDeploymentLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for streamDeploymentLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TriggerMaintenanceRelease trigger maintenance release API
*/
func (a *Client) TriggerMaintenanceRelease(params *TriggerMaintenanceReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerMaintenanceReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerMaintenanceReleaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "triggerMaintenanceRelease",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/maintenance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggerMaintenanceReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TriggerMaintenanceReleaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for triggerMaintenanceRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TriggerRollbackPlanRelease trigger rollback plan release API
*/
func (a *Client) TriggerRollbackPlanRelease(params *TriggerRollbackPlanReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerRollbackPlanReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerRollbackPlanReleaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "triggerRollbackPlanRelease",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/{resourceType}/{resourceName}/rollback-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggerRollbackPlanReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TriggerRollbackPlanReleaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for triggerRollbackPlanRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TriggerTerraformExport trigger terraform export API
*/
func (a *Client) TriggerTerraformExport(params *TriggerTerraformExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerTerraformExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerTerraformExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "triggerTerraformExport",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/terraform-export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggerTerraformExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TriggerTerraformExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for triggerTerraformExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadReleaseMetadata upload release metadata API
*/
func (a *Client) UploadReleaseMetadata(params *UploadReleaseMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadReleaseMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadReleaseMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadReleaseMetadata",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/upload-release-metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadReleaseMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadReleaseMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadReleaseMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
