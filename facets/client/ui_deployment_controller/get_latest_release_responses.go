// Code generated by go-swagger; DO NOT EDIT.

package ui_deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetLatestReleaseReader is a Reader for the GetLatestRelease structure.
type GetLatestReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLatestReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLatestReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLatestReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLatestReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetLatestReleaseMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLatestReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release] getLatestRelease", response, response.Code())
	}
}

// NewGetLatestReleaseOK creates a GetLatestReleaseOK with default headers values
func NewGetLatestReleaseOK() *GetLatestReleaseOK {
	return &GetLatestReleaseOK{}
}

/*
GetLatestReleaseOK describes a response with status code 200, with default header values.

OK
*/
type GetLatestReleaseOK struct {
	Payload *models.DeploymentLog
}

// IsSuccess returns true when this get latest release o k response has a 2xx status code
func (o *GetLatestReleaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get latest release o k response has a 3xx status code
func (o *GetLatestReleaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest release o k response has a 4xx status code
func (o *GetLatestReleaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get latest release o k response has a 5xx status code
func (o *GetLatestReleaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest release o k response a status code equal to that given
func (o *GetLatestReleaseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get latest release o k response
func (o *GetLatestReleaseOK) Code() int {
	return 200
}

func (o *GetLatestReleaseOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseOK %s", 200, payload)
}

func (o *GetLatestReleaseOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseOK %s", 200, payload)
}

func (o *GetLatestReleaseOK) GetPayload() *models.DeploymentLog {
	return o.Payload
}

func (o *GetLatestReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLatestReleaseBadRequest creates a GetLatestReleaseBadRequest with default headers values
func NewGetLatestReleaseBadRequest() *GetLatestReleaseBadRequest {
	return &GetLatestReleaseBadRequest{}
}

/*
GetLatestReleaseBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetLatestReleaseBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get latest release bad request response has a 2xx status code
func (o *GetLatestReleaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get latest release bad request response has a 3xx status code
func (o *GetLatestReleaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest release bad request response has a 4xx status code
func (o *GetLatestReleaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get latest release bad request response has a 5xx status code
func (o *GetLatestReleaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest release bad request response a status code equal to that given
func (o *GetLatestReleaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get latest release bad request response
func (o *GetLatestReleaseBadRequest) Code() int {
	return 400
}

func (o *GetLatestReleaseBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseBadRequest %s", 400, payload)
}

func (o *GetLatestReleaseBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseBadRequest %s", 400, payload)
}

func (o *GetLatestReleaseBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetLatestReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLatestReleaseNotFound creates a GetLatestReleaseNotFound with default headers values
func NewGetLatestReleaseNotFound() *GetLatestReleaseNotFound {
	return &GetLatestReleaseNotFound{}
}

/*
GetLatestReleaseNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetLatestReleaseNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get latest release not found response has a 2xx status code
func (o *GetLatestReleaseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get latest release not found response has a 3xx status code
func (o *GetLatestReleaseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest release not found response has a 4xx status code
func (o *GetLatestReleaseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get latest release not found response has a 5xx status code
func (o *GetLatestReleaseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest release not found response a status code equal to that given
func (o *GetLatestReleaseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get latest release not found response
func (o *GetLatestReleaseNotFound) Code() int {
	return 404
}

func (o *GetLatestReleaseNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseNotFound %s", 404, payload)
}

func (o *GetLatestReleaseNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseNotFound %s", 404, payload)
}

func (o *GetLatestReleaseNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetLatestReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLatestReleaseMethodNotAllowed creates a GetLatestReleaseMethodNotAllowed with default headers values
func NewGetLatestReleaseMethodNotAllowed() *GetLatestReleaseMethodNotAllowed {
	return &GetLatestReleaseMethodNotAllowed{}
}

/*
GetLatestReleaseMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetLatestReleaseMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get latest release method not allowed response has a 2xx status code
func (o *GetLatestReleaseMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get latest release method not allowed response has a 3xx status code
func (o *GetLatestReleaseMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest release method not allowed response has a 4xx status code
func (o *GetLatestReleaseMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get latest release method not allowed response has a 5xx status code
func (o *GetLatestReleaseMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest release method not allowed response a status code equal to that given
func (o *GetLatestReleaseMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get latest release method not allowed response
func (o *GetLatestReleaseMethodNotAllowed) Code() int {
	return 405
}

func (o *GetLatestReleaseMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseMethodNotAllowed %s", 405, payload)
}

func (o *GetLatestReleaseMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseMethodNotAllowed %s", 405, payload)
}

func (o *GetLatestReleaseMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetLatestReleaseMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLatestReleaseInternalServerError creates a GetLatestReleaseInternalServerError with default headers values
func NewGetLatestReleaseInternalServerError() *GetLatestReleaseInternalServerError {
	return &GetLatestReleaseInternalServerError{}
}

/*
GetLatestReleaseInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetLatestReleaseInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get latest release internal server error response has a 2xx status code
func (o *GetLatestReleaseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get latest release internal server error response has a 3xx status code
func (o *GetLatestReleaseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest release internal server error response has a 4xx status code
func (o *GetLatestReleaseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get latest release internal server error response has a 5xx status code
func (o *GetLatestReleaseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get latest release internal server error response a status code equal to that given
func (o *GetLatestReleaseInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get latest release internal server error response
func (o *GetLatestReleaseInternalServerError) Code() int {
	return 500
}

func (o *GetLatestReleaseInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseInternalServerError %s", 500, payload)
}

func (o *GetLatestReleaseInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release][%d] getLatestReleaseInternalServerError %s", 500, payload)
}

func (o *GetLatestReleaseInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetLatestReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
