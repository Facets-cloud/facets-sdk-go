// Code generated by go-swagger; DO NOT EDIT.

package ui_artifact_routing_rule_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateArtifactRoutingRuleReader is a Reader for the UpdateArtifactRoutingRule structure.
type UpdateArtifactRoutingRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateArtifactRoutingRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateArtifactRoutingRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateArtifactRoutingRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateArtifactRoutingRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateArtifactRoutingRuleMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateArtifactRoutingRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/artifact-routing-rule] updateArtifactRoutingRule", response, response.Code())
	}
}

// NewUpdateArtifactRoutingRuleOK creates a UpdateArtifactRoutingRuleOK with default headers values
func NewUpdateArtifactRoutingRuleOK() *UpdateArtifactRoutingRuleOK {
	return &UpdateArtifactRoutingRuleOK{}
}

/*
UpdateArtifactRoutingRuleOK describes a response with status code 200, with default header values.

OK
*/
type UpdateArtifactRoutingRuleOK struct {
	Payload *models.ArtifactRoutingRuleResponse
}

// IsSuccess returns true when this update artifact routing rule o k response has a 2xx status code
func (o *UpdateArtifactRoutingRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update artifact routing rule o k response has a 3xx status code
func (o *UpdateArtifactRoutingRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update artifact routing rule o k response has a 4xx status code
func (o *UpdateArtifactRoutingRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update artifact routing rule o k response has a 5xx status code
func (o *UpdateArtifactRoutingRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update artifact routing rule o k response a status code equal to that given
func (o *UpdateArtifactRoutingRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update artifact routing rule o k response
func (o *UpdateArtifactRoutingRuleOK) Code() int {
	return 200
}

func (o *UpdateArtifactRoutingRuleOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/artifact-routing-rule][%d] updateArtifactRoutingRuleOK %s", 200, payload)
}

func (o *UpdateArtifactRoutingRuleOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/artifact-routing-rule][%d] updateArtifactRoutingRuleOK %s", 200, payload)
}

func (o *UpdateArtifactRoutingRuleOK) GetPayload() *models.ArtifactRoutingRuleResponse {
	return o.Payload
}

func (o *UpdateArtifactRoutingRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ArtifactRoutingRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateArtifactRoutingRuleBadRequest creates a UpdateArtifactRoutingRuleBadRequest with default headers values
func NewUpdateArtifactRoutingRuleBadRequest() *UpdateArtifactRoutingRuleBadRequest {
	return &UpdateArtifactRoutingRuleBadRequest{}
}

/*
UpdateArtifactRoutingRuleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateArtifactRoutingRuleBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update artifact routing rule bad request response has a 2xx status code
func (o *UpdateArtifactRoutingRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update artifact routing rule bad request response has a 3xx status code
func (o *UpdateArtifactRoutingRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update artifact routing rule bad request response has a 4xx status code
func (o *UpdateArtifactRoutingRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update artifact routing rule bad request response has a 5xx status code
func (o *UpdateArtifactRoutingRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update artifact routing rule bad request response a status code equal to that given
func (o *UpdateArtifactRoutingRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update artifact routing rule bad request response
func (o *UpdateArtifactRoutingRuleBadRequest) Code() int {
	return 400
}

func (o *UpdateArtifactRoutingRuleBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/artifact-routing-rule][%d] updateArtifactRoutingRuleBadRequest %s", 400, payload)
}

func (o *UpdateArtifactRoutingRuleBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/artifact-routing-rule][%d] updateArtifactRoutingRuleBadRequest %s", 400, payload)
}

func (o *UpdateArtifactRoutingRuleBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateArtifactRoutingRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateArtifactRoutingRuleNotFound creates a UpdateArtifactRoutingRuleNotFound with default headers values
func NewUpdateArtifactRoutingRuleNotFound() *UpdateArtifactRoutingRuleNotFound {
	return &UpdateArtifactRoutingRuleNotFound{}
}

/*
UpdateArtifactRoutingRuleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateArtifactRoutingRuleNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update artifact routing rule not found response has a 2xx status code
func (o *UpdateArtifactRoutingRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update artifact routing rule not found response has a 3xx status code
func (o *UpdateArtifactRoutingRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update artifact routing rule not found response has a 4xx status code
func (o *UpdateArtifactRoutingRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update artifact routing rule not found response has a 5xx status code
func (o *UpdateArtifactRoutingRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update artifact routing rule not found response a status code equal to that given
func (o *UpdateArtifactRoutingRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update artifact routing rule not found response
func (o *UpdateArtifactRoutingRuleNotFound) Code() int {
	return 404
}

func (o *UpdateArtifactRoutingRuleNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/artifact-routing-rule][%d] updateArtifactRoutingRuleNotFound %s", 404, payload)
}

func (o *UpdateArtifactRoutingRuleNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/artifact-routing-rule][%d] updateArtifactRoutingRuleNotFound %s", 404, payload)
}

func (o *UpdateArtifactRoutingRuleNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateArtifactRoutingRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateArtifactRoutingRuleMethodNotAllowed creates a UpdateArtifactRoutingRuleMethodNotAllowed with default headers values
func NewUpdateArtifactRoutingRuleMethodNotAllowed() *UpdateArtifactRoutingRuleMethodNotAllowed {
	return &UpdateArtifactRoutingRuleMethodNotAllowed{}
}

/*
UpdateArtifactRoutingRuleMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateArtifactRoutingRuleMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update artifact routing rule method not allowed response has a 2xx status code
func (o *UpdateArtifactRoutingRuleMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update artifact routing rule method not allowed response has a 3xx status code
func (o *UpdateArtifactRoutingRuleMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update artifact routing rule method not allowed response has a 4xx status code
func (o *UpdateArtifactRoutingRuleMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update artifact routing rule method not allowed response has a 5xx status code
func (o *UpdateArtifactRoutingRuleMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update artifact routing rule method not allowed response a status code equal to that given
func (o *UpdateArtifactRoutingRuleMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update artifact routing rule method not allowed response
func (o *UpdateArtifactRoutingRuleMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateArtifactRoutingRuleMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/artifact-routing-rule][%d] updateArtifactRoutingRuleMethodNotAllowed %s", 405, payload)
}

func (o *UpdateArtifactRoutingRuleMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/artifact-routing-rule][%d] updateArtifactRoutingRuleMethodNotAllowed %s", 405, payload)
}

func (o *UpdateArtifactRoutingRuleMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateArtifactRoutingRuleMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateArtifactRoutingRuleInternalServerError creates a UpdateArtifactRoutingRuleInternalServerError with default headers values
func NewUpdateArtifactRoutingRuleInternalServerError() *UpdateArtifactRoutingRuleInternalServerError {
	return &UpdateArtifactRoutingRuleInternalServerError{}
}

/*
UpdateArtifactRoutingRuleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateArtifactRoutingRuleInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update artifact routing rule internal server error response has a 2xx status code
func (o *UpdateArtifactRoutingRuleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update artifact routing rule internal server error response has a 3xx status code
func (o *UpdateArtifactRoutingRuleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update artifact routing rule internal server error response has a 4xx status code
func (o *UpdateArtifactRoutingRuleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update artifact routing rule internal server error response has a 5xx status code
func (o *UpdateArtifactRoutingRuleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update artifact routing rule internal server error response a status code equal to that given
func (o *UpdateArtifactRoutingRuleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update artifact routing rule internal server error response
func (o *UpdateArtifactRoutingRuleInternalServerError) Code() int {
	return 500
}

func (o *UpdateArtifactRoutingRuleInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/artifact-routing-rule][%d] updateArtifactRoutingRuleInternalServerError %s", 500, payload)
}

func (o *UpdateArtifactRoutingRuleInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/artifact-routing-rule][%d] updateArtifactRoutingRuleInternalServerError %s", 500, payload)
}

func (o *UpdateArtifactRoutingRuleInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateArtifactRoutingRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
