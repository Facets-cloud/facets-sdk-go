// Code generated by go-swagger; DO NOT EDIT.

package ui_artifact_routing_rule_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// TestRuleForBranchNameReader is a Reader for the TestRuleForBranchName structure.
type TestRuleForBranchNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TestRuleForBranchNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTestRuleForBranchNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTestRuleForBranchNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTestRuleForBranchNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewTestRuleForBranchNameMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTestRuleForBranchNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/artifact-routing-rule/test] testRuleForBranchName", response, response.Code())
	}
}

// NewTestRuleForBranchNameOK creates a TestRuleForBranchNameOK with default headers values
func NewTestRuleForBranchNameOK() *TestRuleForBranchNameOK {
	return &TestRuleForBranchNameOK{}
}

/*
TestRuleForBranchNameOK describes a response with status code 200, with default header values.

OK
*/
type TestRuleForBranchNameOK struct {
	Payload *models.TestRuleResponse
}

// IsSuccess returns true when this test rule for branch name o k response has a 2xx status code
func (o *TestRuleForBranchNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this test rule for branch name o k response has a 3xx status code
func (o *TestRuleForBranchNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test rule for branch name o k response has a 4xx status code
func (o *TestRuleForBranchNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this test rule for branch name o k response has a 5xx status code
func (o *TestRuleForBranchNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this test rule for branch name o k response a status code equal to that given
func (o *TestRuleForBranchNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the test rule for branch name o k response
func (o *TestRuleForBranchNameOK) Code() int {
	return 200
}

func (o *TestRuleForBranchNameOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameOK %s", 200, payload)
}

func (o *TestRuleForBranchNameOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameOK %s", 200, payload)
}

func (o *TestRuleForBranchNameOK) GetPayload() *models.TestRuleResponse {
	return o.Payload
}

func (o *TestRuleForBranchNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TestRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestRuleForBranchNameBadRequest creates a TestRuleForBranchNameBadRequest with default headers values
func NewTestRuleForBranchNameBadRequest() *TestRuleForBranchNameBadRequest {
	return &TestRuleForBranchNameBadRequest{}
}

/*
TestRuleForBranchNameBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type TestRuleForBranchNameBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this test rule for branch name bad request response has a 2xx status code
func (o *TestRuleForBranchNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test rule for branch name bad request response has a 3xx status code
func (o *TestRuleForBranchNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test rule for branch name bad request response has a 4xx status code
func (o *TestRuleForBranchNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this test rule for branch name bad request response has a 5xx status code
func (o *TestRuleForBranchNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this test rule for branch name bad request response a status code equal to that given
func (o *TestRuleForBranchNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the test rule for branch name bad request response
func (o *TestRuleForBranchNameBadRequest) Code() int {
	return 400
}

func (o *TestRuleForBranchNameBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameBadRequest %s", 400, payload)
}

func (o *TestRuleForBranchNameBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameBadRequest %s", 400, payload)
}

func (o *TestRuleForBranchNameBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *TestRuleForBranchNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestRuleForBranchNameNotFound creates a TestRuleForBranchNameNotFound with default headers values
func NewTestRuleForBranchNameNotFound() *TestRuleForBranchNameNotFound {
	return &TestRuleForBranchNameNotFound{}
}

/*
TestRuleForBranchNameNotFound describes a response with status code 404, with default header values.

Not Found
*/
type TestRuleForBranchNameNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this test rule for branch name not found response has a 2xx status code
func (o *TestRuleForBranchNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test rule for branch name not found response has a 3xx status code
func (o *TestRuleForBranchNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test rule for branch name not found response has a 4xx status code
func (o *TestRuleForBranchNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this test rule for branch name not found response has a 5xx status code
func (o *TestRuleForBranchNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this test rule for branch name not found response a status code equal to that given
func (o *TestRuleForBranchNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the test rule for branch name not found response
func (o *TestRuleForBranchNameNotFound) Code() int {
	return 404
}

func (o *TestRuleForBranchNameNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameNotFound %s", 404, payload)
}

func (o *TestRuleForBranchNameNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameNotFound %s", 404, payload)
}

func (o *TestRuleForBranchNameNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *TestRuleForBranchNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestRuleForBranchNameMethodNotAllowed creates a TestRuleForBranchNameMethodNotAllowed with default headers values
func NewTestRuleForBranchNameMethodNotAllowed() *TestRuleForBranchNameMethodNotAllowed {
	return &TestRuleForBranchNameMethodNotAllowed{}
}

/*
TestRuleForBranchNameMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type TestRuleForBranchNameMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this test rule for branch name method not allowed response has a 2xx status code
func (o *TestRuleForBranchNameMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test rule for branch name method not allowed response has a 3xx status code
func (o *TestRuleForBranchNameMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test rule for branch name method not allowed response has a 4xx status code
func (o *TestRuleForBranchNameMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this test rule for branch name method not allowed response has a 5xx status code
func (o *TestRuleForBranchNameMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this test rule for branch name method not allowed response a status code equal to that given
func (o *TestRuleForBranchNameMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the test rule for branch name method not allowed response
func (o *TestRuleForBranchNameMethodNotAllowed) Code() int {
	return 405
}

func (o *TestRuleForBranchNameMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameMethodNotAllowed %s", 405, payload)
}

func (o *TestRuleForBranchNameMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameMethodNotAllowed %s", 405, payload)
}

func (o *TestRuleForBranchNameMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *TestRuleForBranchNameMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestRuleForBranchNameInternalServerError creates a TestRuleForBranchNameInternalServerError with default headers values
func NewTestRuleForBranchNameInternalServerError() *TestRuleForBranchNameInternalServerError {
	return &TestRuleForBranchNameInternalServerError{}
}

/*
TestRuleForBranchNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type TestRuleForBranchNameInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this test rule for branch name internal server error response has a 2xx status code
func (o *TestRuleForBranchNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test rule for branch name internal server error response has a 3xx status code
func (o *TestRuleForBranchNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test rule for branch name internal server error response has a 4xx status code
func (o *TestRuleForBranchNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this test rule for branch name internal server error response has a 5xx status code
func (o *TestRuleForBranchNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this test rule for branch name internal server error response a status code equal to that given
func (o *TestRuleForBranchNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the test rule for branch name internal server error response
func (o *TestRuleForBranchNameInternalServerError) Code() int {
	return 500
}

func (o *TestRuleForBranchNameInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameInternalServerError %s", 500, payload)
}

func (o *TestRuleForBranchNameInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameInternalServerError %s", 500, payload)
}

func (o *TestRuleForBranchNameInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *TestRuleForBranchNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
