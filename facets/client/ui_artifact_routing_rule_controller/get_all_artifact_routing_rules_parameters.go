// Code generated by go-swagger; DO NOT EDIT.

package ui_artifact_routing_rule_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetAllArtifactRoutingRulesParams creates a new GetAllArtifactRoutingRulesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllArtifactRoutingRulesParams() *GetAllArtifactRoutingRulesParams {
	return &GetAllArtifactRoutingRulesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllArtifactRoutingRulesParamsWithTimeout creates a new GetAllArtifactRoutingRulesParams object
// with the ability to set a timeout on a request.
func NewGetAllArtifactRoutingRulesParamsWithTimeout(timeout time.Duration) *GetAllArtifactRoutingRulesParams {
	return &GetAllArtifactRoutingRulesParams{
		timeout: timeout,
	}
}

// NewGetAllArtifactRoutingRulesParamsWithContext creates a new GetAllArtifactRoutingRulesParams object
// with the ability to set a context for a request.
func NewGetAllArtifactRoutingRulesParamsWithContext(ctx context.Context) *GetAllArtifactRoutingRulesParams {
	return &GetAllArtifactRoutingRulesParams{
		Context: ctx,
	}
}

// NewGetAllArtifactRoutingRulesParamsWithHTTPClient creates a new GetAllArtifactRoutingRulesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllArtifactRoutingRulesParamsWithHTTPClient(client *http.Client) *GetAllArtifactRoutingRulesParams {
	return &GetAllArtifactRoutingRulesParams{
		HTTPClient: client,
	}
}

/*
GetAllArtifactRoutingRulesParams contains all the parameters to send to the API endpoint

	for the get all artifact routing rules operation.

	Typically these are written to a http.Request.
*/
type GetAllArtifactRoutingRulesParams struct {

	// RegistrationType.
	RegistrationType *string

	// StackName.
	StackName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all artifact routing rules params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllArtifactRoutingRulesParams) WithDefaults() *GetAllArtifactRoutingRulesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all artifact routing rules params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllArtifactRoutingRulesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get all artifact routing rules params
func (o *GetAllArtifactRoutingRulesParams) WithTimeout(timeout time.Duration) *GetAllArtifactRoutingRulesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all artifact routing rules params
func (o *GetAllArtifactRoutingRulesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all artifact routing rules params
func (o *GetAllArtifactRoutingRulesParams) WithContext(ctx context.Context) *GetAllArtifactRoutingRulesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all artifact routing rules params
func (o *GetAllArtifactRoutingRulesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all artifact routing rules params
func (o *GetAllArtifactRoutingRulesParams) WithHTTPClient(client *http.Client) *GetAllArtifactRoutingRulesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all artifact routing rules params
func (o *GetAllArtifactRoutingRulesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRegistrationType adds the registrationType to the get all artifact routing rules params
func (o *GetAllArtifactRoutingRulesParams) WithRegistrationType(registrationType *string) *GetAllArtifactRoutingRulesParams {
	o.SetRegistrationType(registrationType)
	return o
}

// SetRegistrationType adds the registrationType to the get all artifact routing rules params
func (o *GetAllArtifactRoutingRulesParams) SetRegistrationType(registrationType *string) {
	o.RegistrationType = registrationType
}

// WithStackName adds the stackName to the get all artifact routing rules params
func (o *GetAllArtifactRoutingRulesParams) WithStackName(stackName string) *GetAllArtifactRoutingRulesParams {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the get all artifact routing rules params
func (o *GetAllArtifactRoutingRulesParams) SetStackName(stackName string) {
	o.StackName = stackName
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllArtifactRoutingRulesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.RegistrationType != nil {

		// query param registrationType
		var qrRegistrationType string

		if o.RegistrationType != nil {
			qrRegistrationType = *o.RegistrationType
		}
		qRegistrationType := qrRegistrationType
		if qRegistrationType != "" {

			if err := r.SetQueryParam("registrationType", qRegistrationType); err != nil {
				return err
			}
		}
	}

	// query param stackName
	qrStackName := o.StackName
	qStackName := qrStackName
	if qStackName != "" {

		if err := r.SetQueryParam("stackName", qStackName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
