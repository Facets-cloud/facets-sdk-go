// Code generated by go-swagger; DO NOT EDIT.

package ui_artifact_routing_rule_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui artifact routing rule controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui artifact routing rule controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui artifact routing rule controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui artifact routing rule controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddArtifactRoutingRule(params *AddArtifactRoutingRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddArtifactRoutingRuleOK, error)

	DeleteArtifactRoutingRule(params *DeleteArtifactRoutingRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteArtifactRoutingRuleOK, error)

	GetAllArtifactRoutingRules(params *GetAllArtifactRoutingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllArtifactRoutingRulesOK, error)

	GetAllOperators(params *GetAllOperatorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllOperatorsOK, error)

	GetArtifactRoutingRule(params *GetArtifactRoutingRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactRoutingRuleOK, error)

	TestRuleForBranchName(params *TestRuleForBranchNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TestRuleForBranchNameOK, error)

	UpdateArtifactRoutingRule(params *UpdateArtifactRoutingRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateArtifactRoutingRuleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddArtifactRoutingRule add artifact routing rule API
*/
func (a *Client) AddArtifactRoutingRule(params *AddArtifactRoutingRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddArtifactRoutingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddArtifactRoutingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addArtifactRoutingRule",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifact-routing-rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddArtifactRoutingRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddArtifactRoutingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addArtifactRoutingRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteArtifactRoutingRule delete artifact routing rule API
*/
func (a *Client) DeleteArtifactRoutingRule(params *DeleteArtifactRoutingRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteArtifactRoutingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteArtifactRoutingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteArtifactRoutingRule",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/artifact-routing-rule/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteArtifactRoutingRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteArtifactRoutingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteArtifactRoutingRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllArtifactRoutingRules get all artifact routing rules API
*/
func (a *Client) GetAllArtifactRoutingRules(params *GetAllArtifactRoutingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllArtifactRoutingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllArtifactRoutingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllArtifactRoutingRules",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifact-routing-rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllArtifactRoutingRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllArtifactRoutingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllArtifactRoutingRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllOperators get all operators API
*/
func (a *Client) GetAllOperators(params *GetAllOperatorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllOperatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllOperatorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllOperators",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifact-routing-rule/operators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllOperatorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllOperatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllOperators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactRoutingRule get artifact routing rule API
*/
func (a *Client) GetArtifactRoutingRule(params *GetArtifactRoutingRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactRoutingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactRoutingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactRoutingRule",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifact-routing-rule/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactRoutingRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactRoutingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactRoutingRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TestRuleForBranchName test rule for branch name API
*/
func (a *Client) TestRuleForBranchName(params *TestRuleForBranchNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TestRuleForBranchNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestRuleForBranchNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "testRuleForBranchName",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifact-routing-rule/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TestRuleForBranchNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TestRuleForBranchNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for testRuleForBranchName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateArtifactRoutingRule update artifact routing rule API
*/
func (a *Client) UpdateArtifactRoutingRule(params *UpdateArtifactRoutingRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateArtifactRoutingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateArtifactRoutingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateArtifactRoutingRule",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/artifact-routing-rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateArtifactRoutingRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateArtifactRoutingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateArtifactRoutingRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
