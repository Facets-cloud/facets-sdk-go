// Code generated by go-swagger; DO NOT EDIT.

package ui_artifact_routing_rule_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// TestRuleForBranchNameUsingPOSTReader is a Reader for the TestRuleForBranchNameUsingPOST structure.
type TestRuleForBranchNameUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TestRuleForBranchNameUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTestRuleForBranchNameUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewTestRuleForBranchNameUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewTestRuleForBranchNameUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewTestRuleForBranchNameUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTestRuleForBranchNameUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/artifact-routing-rule/test] testRuleForBranchNameUsingPOST", response, response.Code())
	}
}

// NewTestRuleForBranchNameUsingPOSTOK creates a TestRuleForBranchNameUsingPOSTOK with default headers values
func NewTestRuleForBranchNameUsingPOSTOK() *TestRuleForBranchNameUsingPOSTOK {
	return &TestRuleForBranchNameUsingPOSTOK{}
}

/*
TestRuleForBranchNameUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type TestRuleForBranchNameUsingPOSTOK struct {
	Payload *models.TestRuleResponse
}

// IsSuccess returns true when this test rule for branch name using p o s t o k response has a 2xx status code
func (o *TestRuleForBranchNameUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this test rule for branch name using p o s t o k response has a 3xx status code
func (o *TestRuleForBranchNameUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test rule for branch name using p o s t o k response has a 4xx status code
func (o *TestRuleForBranchNameUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this test rule for branch name using p o s t o k response has a 5xx status code
func (o *TestRuleForBranchNameUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this test rule for branch name using p o s t o k response a status code equal to that given
func (o *TestRuleForBranchNameUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the test rule for branch name using p o s t o k response
func (o *TestRuleForBranchNameUsingPOSTOK) Code() int {
	return 200
}

func (o *TestRuleForBranchNameUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameUsingPOSTOK %s", 200, payload)
}

func (o *TestRuleForBranchNameUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameUsingPOSTOK %s", 200, payload)
}

func (o *TestRuleForBranchNameUsingPOSTOK) GetPayload() *models.TestRuleResponse {
	return o.Payload
}

func (o *TestRuleForBranchNameUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TestRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestRuleForBranchNameUsingPOSTCreated creates a TestRuleForBranchNameUsingPOSTCreated with default headers values
func NewTestRuleForBranchNameUsingPOSTCreated() *TestRuleForBranchNameUsingPOSTCreated {
	return &TestRuleForBranchNameUsingPOSTCreated{}
}

/*
TestRuleForBranchNameUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type TestRuleForBranchNameUsingPOSTCreated struct {
}

// IsSuccess returns true when this test rule for branch name using p o s t created response has a 2xx status code
func (o *TestRuleForBranchNameUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this test rule for branch name using p o s t created response has a 3xx status code
func (o *TestRuleForBranchNameUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test rule for branch name using p o s t created response has a 4xx status code
func (o *TestRuleForBranchNameUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this test rule for branch name using p o s t created response has a 5xx status code
func (o *TestRuleForBranchNameUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this test rule for branch name using p o s t created response a status code equal to that given
func (o *TestRuleForBranchNameUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the test rule for branch name using p o s t created response
func (o *TestRuleForBranchNameUsingPOSTCreated) Code() int {
	return 201
}

func (o *TestRuleForBranchNameUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameUsingPOSTCreated", 201)
}

func (o *TestRuleForBranchNameUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameUsingPOSTCreated", 201)
}

func (o *TestRuleForBranchNameUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTestRuleForBranchNameUsingPOSTUnauthorized creates a TestRuleForBranchNameUsingPOSTUnauthorized with default headers values
func NewTestRuleForBranchNameUsingPOSTUnauthorized() *TestRuleForBranchNameUsingPOSTUnauthorized {
	return &TestRuleForBranchNameUsingPOSTUnauthorized{}
}

/*
TestRuleForBranchNameUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type TestRuleForBranchNameUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this test rule for branch name using p o s t unauthorized response has a 2xx status code
func (o *TestRuleForBranchNameUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test rule for branch name using p o s t unauthorized response has a 3xx status code
func (o *TestRuleForBranchNameUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test rule for branch name using p o s t unauthorized response has a 4xx status code
func (o *TestRuleForBranchNameUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this test rule for branch name using p o s t unauthorized response has a 5xx status code
func (o *TestRuleForBranchNameUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this test rule for branch name using p o s t unauthorized response a status code equal to that given
func (o *TestRuleForBranchNameUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the test rule for branch name using p o s t unauthorized response
func (o *TestRuleForBranchNameUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *TestRuleForBranchNameUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameUsingPOSTUnauthorized", 401)
}

func (o *TestRuleForBranchNameUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameUsingPOSTUnauthorized", 401)
}

func (o *TestRuleForBranchNameUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTestRuleForBranchNameUsingPOSTForbidden creates a TestRuleForBranchNameUsingPOSTForbidden with default headers values
func NewTestRuleForBranchNameUsingPOSTForbidden() *TestRuleForBranchNameUsingPOSTForbidden {
	return &TestRuleForBranchNameUsingPOSTForbidden{}
}

/*
TestRuleForBranchNameUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type TestRuleForBranchNameUsingPOSTForbidden struct {
}

// IsSuccess returns true when this test rule for branch name using p o s t forbidden response has a 2xx status code
func (o *TestRuleForBranchNameUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test rule for branch name using p o s t forbidden response has a 3xx status code
func (o *TestRuleForBranchNameUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test rule for branch name using p o s t forbidden response has a 4xx status code
func (o *TestRuleForBranchNameUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this test rule for branch name using p o s t forbidden response has a 5xx status code
func (o *TestRuleForBranchNameUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this test rule for branch name using p o s t forbidden response a status code equal to that given
func (o *TestRuleForBranchNameUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the test rule for branch name using p o s t forbidden response
func (o *TestRuleForBranchNameUsingPOSTForbidden) Code() int {
	return 403
}

func (o *TestRuleForBranchNameUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameUsingPOSTForbidden", 403)
}

func (o *TestRuleForBranchNameUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameUsingPOSTForbidden", 403)
}

func (o *TestRuleForBranchNameUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTestRuleForBranchNameUsingPOSTNotFound creates a TestRuleForBranchNameUsingPOSTNotFound with default headers values
func NewTestRuleForBranchNameUsingPOSTNotFound() *TestRuleForBranchNameUsingPOSTNotFound {
	return &TestRuleForBranchNameUsingPOSTNotFound{}
}

/*
TestRuleForBranchNameUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type TestRuleForBranchNameUsingPOSTNotFound struct {
}

// IsSuccess returns true when this test rule for branch name using p o s t not found response has a 2xx status code
func (o *TestRuleForBranchNameUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test rule for branch name using p o s t not found response has a 3xx status code
func (o *TestRuleForBranchNameUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test rule for branch name using p o s t not found response has a 4xx status code
func (o *TestRuleForBranchNameUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this test rule for branch name using p o s t not found response has a 5xx status code
func (o *TestRuleForBranchNameUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this test rule for branch name using p o s t not found response a status code equal to that given
func (o *TestRuleForBranchNameUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the test rule for branch name using p o s t not found response
func (o *TestRuleForBranchNameUsingPOSTNotFound) Code() int {
	return 404
}

func (o *TestRuleForBranchNameUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameUsingPOSTNotFound", 404)
}

func (o *TestRuleForBranchNameUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/artifact-routing-rule/test][%d] testRuleForBranchNameUsingPOSTNotFound", 404)
}

func (o *TestRuleForBranchNameUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
