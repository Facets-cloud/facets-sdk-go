// Code generated by go-swagger; DO NOT EDIT.

package ui_artifact_routing_rule_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetAllOperatorsUsingGETReader is a Reader for the GetAllOperatorsUsingGET structure.
type GetAllOperatorsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllOperatorsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllOperatorsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllOperatorsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllOperatorsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllOperatorsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/artifact-routing-rule/operators] getAllOperatorsUsingGET", response, response.Code())
	}
}

// NewGetAllOperatorsUsingGETOK creates a GetAllOperatorsUsingGETOK with default headers values
func NewGetAllOperatorsUsingGETOK() *GetAllOperatorsUsingGETOK {
	return &GetAllOperatorsUsingGETOK{}
}

/*
GetAllOperatorsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllOperatorsUsingGETOK struct {
	Payload []string
}

// IsSuccess returns true when this get all operators using g e t o k response has a 2xx status code
func (o *GetAllOperatorsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all operators using g e t o k response has a 3xx status code
func (o *GetAllOperatorsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all operators using g e t o k response has a 4xx status code
func (o *GetAllOperatorsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all operators using g e t o k response has a 5xx status code
func (o *GetAllOperatorsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all operators using g e t o k response a status code equal to that given
func (o *GetAllOperatorsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all operators using g e t o k response
func (o *GetAllOperatorsUsingGETOK) Code() int {
	return 200
}

func (o *GetAllOperatorsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/artifact-routing-rule/operators][%d] getAllOperatorsUsingGETOK %s", 200, payload)
}

func (o *GetAllOperatorsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/artifact-routing-rule/operators][%d] getAllOperatorsUsingGETOK %s", 200, payload)
}

func (o *GetAllOperatorsUsingGETOK) GetPayload() []string {
	return o.Payload
}

func (o *GetAllOperatorsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllOperatorsUsingGETUnauthorized creates a GetAllOperatorsUsingGETUnauthorized with default headers values
func NewGetAllOperatorsUsingGETUnauthorized() *GetAllOperatorsUsingGETUnauthorized {
	return &GetAllOperatorsUsingGETUnauthorized{}
}

/*
GetAllOperatorsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllOperatorsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all operators using g e t unauthorized response has a 2xx status code
func (o *GetAllOperatorsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all operators using g e t unauthorized response has a 3xx status code
func (o *GetAllOperatorsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all operators using g e t unauthorized response has a 4xx status code
func (o *GetAllOperatorsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all operators using g e t unauthorized response has a 5xx status code
func (o *GetAllOperatorsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all operators using g e t unauthorized response a status code equal to that given
func (o *GetAllOperatorsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all operators using g e t unauthorized response
func (o *GetAllOperatorsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllOperatorsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifact-routing-rule/operators][%d] getAllOperatorsUsingGETUnauthorized", 401)
}

func (o *GetAllOperatorsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifact-routing-rule/operators][%d] getAllOperatorsUsingGETUnauthorized", 401)
}

func (o *GetAllOperatorsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllOperatorsUsingGETForbidden creates a GetAllOperatorsUsingGETForbidden with default headers values
func NewGetAllOperatorsUsingGETForbidden() *GetAllOperatorsUsingGETForbidden {
	return &GetAllOperatorsUsingGETForbidden{}
}

/*
GetAllOperatorsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllOperatorsUsingGETForbidden struct {
}

// IsSuccess returns true when this get all operators using g e t forbidden response has a 2xx status code
func (o *GetAllOperatorsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all operators using g e t forbidden response has a 3xx status code
func (o *GetAllOperatorsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all operators using g e t forbidden response has a 4xx status code
func (o *GetAllOperatorsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all operators using g e t forbidden response has a 5xx status code
func (o *GetAllOperatorsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all operators using g e t forbidden response a status code equal to that given
func (o *GetAllOperatorsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all operators using g e t forbidden response
func (o *GetAllOperatorsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllOperatorsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifact-routing-rule/operators][%d] getAllOperatorsUsingGETForbidden", 403)
}

func (o *GetAllOperatorsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifact-routing-rule/operators][%d] getAllOperatorsUsingGETForbidden", 403)
}

func (o *GetAllOperatorsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllOperatorsUsingGETNotFound creates a GetAllOperatorsUsingGETNotFound with default headers values
func NewGetAllOperatorsUsingGETNotFound() *GetAllOperatorsUsingGETNotFound {
	return &GetAllOperatorsUsingGETNotFound{}
}

/*
GetAllOperatorsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllOperatorsUsingGETNotFound struct {
}

// IsSuccess returns true when this get all operators using g e t not found response has a 2xx status code
func (o *GetAllOperatorsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all operators using g e t not found response has a 3xx status code
func (o *GetAllOperatorsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all operators using g e t not found response has a 4xx status code
func (o *GetAllOperatorsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all operators using g e t not found response has a 5xx status code
func (o *GetAllOperatorsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all operators using g e t not found response a status code equal to that given
func (o *GetAllOperatorsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all operators using g e t not found response
func (o *GetAllOperatorsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllOperatorsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifact-routing-rule/operators][%d] getAllOperatorsUsingGETNotFound", 404)
}

func (o *GetAllOperatorsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifact-routing-rule/operators][%d] getAllOperatorsUsingGETNotFound", 404)
}

func (o *GetAllOperatorsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
