// Code generated by go-swagger; DO NOT EDIT.

package ui_artifact_routing_rule_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetArtifactRoutingRuleUsingGETReader is a Reader for the GetArtifactRoutingRuleUsingGET structure.
type GetArtifactRoutingRuleUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetArtifactRoutingRuleUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetArtifactRoutingRuleUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetArtifactRoutingRuleUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetArtifactRoutingRuleUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetArtifactRoutingRuleUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/artifact-routing-rule/{ruleId}] getArtifactRoutingRuleUsingGET", response, response.Code())
	}
}

// NewGetArtifactRoutingRuleUsingGETOK creates a GetArtifactRoutingRuleUsingGETOK with default headers values
func NewGetArtifactRoutingRuleUsingGETOK() *GetArtifactRoutingRuleUsingGETOK {
	return &GetArtifactRoutingRuleUsingGETOK{}
}

/*
GetArtifactRoutingRuleUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetArtifactRoutingRuleUsingGETOK struct {
	Payload *models.ArtifactRoutingRuleResponse
}

// IsSuccess returns true when this get artifact routing rule using g e t o k response has a 2xx status code
func (o *GetArtifactRoutingRuleUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get artifact routing rule using g e t o k response has a 3xx status code
func (o *GetArtifactRoutingRuleUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get artifact routing rule using g e t o k response has a 4xx status code
func (o *GetArtifactRoutingRuleUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get artifact routing rule using g e t o k response has a 5xx status code
func (o *GetArtifactRoutingRuleUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get artifact routing rule using g e t o k response a status code equal to that given
func (o *GetArtifactRoutingRuleUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get artifact routing rule using g e t o k response
func (o *GetArtifactRoutingRuleUsingGETOK) Code() int {
	return 200
}

func (o *GetArtifactRoutingRuleUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/artifact-routing-rule/{ruleId}][%d] getArtifactRoutingRuleUsingGETOK %s", 200, payload)
}

func (o *GetArtifactRoutingRuleUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/artifact-routing-rule/{ruleId}][%d] getArtifactRoutingRuleUsingGETOK %s", 200, payload)
}

func (o *GetArtifactRoutingRuleUsingGETOK) GetPayload() *models.ArtifactRoutingRuleResponse {
	return o.Payload
}

func (o *GetArtifactRoutingRuleUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ArtifactRoutingRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArtifactRoutingRuleUsingGETUnauthorized creates a GetArtifactRoutingRuleUsingGETUnauthorized with default headers values
func NewGetArtifactRoutingRuleUsingGETUnauthorized() *GetArtifactRoutingRuleUsingGETUnauthorized {
	return &GetArtifactRoutingRuleUsingGETUnauthorized{}
}

/*
GetArtifactRoutingRuleUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetArtifactRoutingRuleUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get artifact routing rule using g e t unauthorized response has a 2xx status code
func (o *GetArtifactRoutingRuleUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get artifact routing rule using g e t unauthorized response has a 3xx status code
func (o *GetArtifactRoutingRuleUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get artifact routing rule using g e t unauthorized response has a 4xx status code
func (o *GetArtifactRoutingRuleUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get artifact routing rule using g e t unauthorized response has a 5xx status code
func (o *GetArtifactRoutingRuleUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get artifact routing rule using g e t unauthorized response a status code equal to that given
func (o *GetArtifactRoutingRuleUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get artifact routing rule using g e t unauthorized response
func (o *GetArtifactRoutingRuleUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetArtifactRoutingRuleUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifact-routing-rule/{ruleId}][%d] getArtifactRoutingRuleUsingGETUnauthorized", 401)
}

func (o *GetArtifactRoutingRuleUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifact-routing-rule/{ruleId}][%d] getArtifactRoutingRuleUsingGETUnauthorized", 401)
}

func (o *GetArtifactRoutingRuleUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetArtifactRoutingRuleUsingGETForbidden creates a GetArtifactRoutingRuleUsingGETForbidden with default headers values
func NewGetArtifactRoutingRuleUsingGETForbidden() *GetArtifactRoutingRuleUsingGETForbidden {
	return &GetArtifactRoutingRuleUsingGETForbidden{}
}

/*
GetArtifactRoutingRuleUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetArtifactRoutingRuleUsingGETForbidden struct {
}

// IsSuccess returns true when this get artifact routing rule using g e t forbidden response has a 2xx status code
func (o *GetArtifactRoutingRuleUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get artifact routing rule using g e t forbidden response has a 3xx status code
func (o *GetArtifactRoutingRuleUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get artifact routing rule using g e t forbidden response has a 4xx status code
func (o *GetArtifactRoutingRuleUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get artifact routing rule using g e t forbidden response has a 5xx status code
func (o *GetArtifactRoutingRuleUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get artifact routing rule using g e t forbidden response a status code equal to that given
func (o *GetArtifactRoutingRuleUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get artifact routing rule using g e t forbidden response
func (o *GetArtifactRoutingRuleUsingGETForbidden) Code() int {
	return 403
}

func (o *GetArtifactRoutingRuleUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifact-routing-rule/{ruleId}][%d] getArtifactRoutingRuleUsingGETForbidden", 403)
}

func (o *GetArtifactRoutingRuleUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifact-routing-rule/{ruleId}][%d] getArtifactRoutingRuleUsingGETForbidden", 403)
}

func (o *GetArtifactRoutingRuleUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetArtifactRoutingRuleUsingGETNotFound creates a GetArtifactRoutingRuleUsingGETNotFound with default headers values
func NewGetArtifactRoutingRuleUsingGETNotFound() *GetArtifactRoutingRuleUsingGETNotFound {
	return &GetArtifactRoutingRuleUsingGETNotFound{}
}

/*
GetArtifactRoutingRuleUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetArtifactRoutingRuleUsingGETNotFound struct {
}

// IsSuccess returns true when this get artifact routing rule using g e t not found response has a 2xx status code
func (o *GetArtifactRoutingRuleUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get artifact routing rule using g e t not found response has a 3xx status code
func (o *GetArtifactRoutingRuleUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get artifact routing rule using g e t not found response has a 4xx status code
func (o *GetArtifactRoutingRuleUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get artifact routing rule using g e t not found response has a 5xx status code
func (o *GetArtifactRoutingRuleUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get artifact routing rule using g e t not found response a status code equal to that given
func (o *GetArtifactRoutingRuleUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get artifact routing rule using g e t not found response
func (o *GetArtifactRoutingRuleUsingGETNotFound) Code() int {
	return 404
}

func (o *GetArtifactRoutingRuleUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifact-routing-rule/{ruleId}][%d] getArtifactRoutingRuleUsingGETNotFound", 404)
}

func (o *GetArtifactRoutingRuleUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifact-routing-rule/{ruleId}][%d] getArtifactRoutingRuleUsingGETNotFound", 404)
}

func (o *GetArtifactRoutingRuleUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
