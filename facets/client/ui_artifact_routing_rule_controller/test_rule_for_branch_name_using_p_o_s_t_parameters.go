// Code generated by go-swagger; DO NOT EDIT.

package ui_artifact_routing_rule_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// NewTestRuleForBranchNameUsingPOSTParams creates a new TestRuleForBranchNameUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewTestRuleForBranchNameUsingPOSTParams() *TestRuleForBranchNameUsingPOSTParams {
	return &TestRuleForBranchNameUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewTestRuleForBranchNameUsingPOSTParamsWithTimeout creates a new TestRuleForBranchNameUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewTestRuleForBranchNameUsingPOSTParamsWithTimeout(timeout time.Duration) *TestRuleForBranchNameUsingPOSTParams {
	return &TestRuleForBranchNameUsingPOSTParams{
		timeout: timeout,
	}
}

// NewTestRuleForBranchNameUsingPOSTParamsWithContext creates a new TestRuleForBranchNameUsingPOSTParams object
// with the ability to set a context for a request.
func NewTestRuleForBranchNameUsingPOSTParamsWithContext(ctx context.Context) *TestRuleForBranchNameUsingPOSTParams {
	return &TestRuleForBranchNameUsingPOSTParams{
		Context: ctx,
	}
}

// NewTestRuleForBranchNameUsingPOSTParamsWithHTTPClient creates a new TestRuleForBranchNameUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewTestRuleForBranchNameUsingPOSTParamsWithHTTPClient(client *http.Client) *TestRuleForBranchNameUsingPOSTParams {
	return &TestRuleForBranchNameUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
TestRuleForBranchNameUsingPOSTParams contains all the parameters to send to the API endpoint

	for the test rule for branch name using p o s t operation.

	Typically these are written to a http.Request.
*/
type TestRuleForBranchNameUsingPOSTParams struct {

	/* Criteria.

	   criteria
	*/
	Criteria []*models.Criterion

	/* Metadata.

	   metadata
	*/
	Metadata []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the test rule for branch name using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TestRuleForBranchNameUsingPOSTParams) WithDefaults() *TestRuleForBranchNameUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the test rule for branch name using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TestRuleForBranchNameUsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the test rule for branch name using p o s t params
func (o *TestRuleForBranchNameUsingPOSTParams) WithTimeout(timeout time.Duration) *TestRuleForBranchNameUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the test rule for branch name using p o s t params
func (o *TestRuleForBranchNameUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the test rule for branch name using p o s t params
func (o *TestRuleForBranchNameUsingPOSTParams) WithContext(ctx context.Context) *TestRuleForBranchNameUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the test rule for branch name using p o s t params
func (o *TestRuleForBranchNameUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the test rule for branch name using p o s t params
func (o *TestRuleForBranchNameUsingPOSTParams) WithHTTPClient(client *http.Client) *TestRuleForBranchNameUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the test rule for branch name using p o s t params
func (o *TestRuleForBranchNameUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCriteria adds the criteria to the test rule for branch name using p o s t params
func (o *TestRuleForBranchNameUsingPOSTParams) WithCriteria(criteria []*models.Criterion) *TestRuleForBranchNameUsingPOSTParams {
	o.SetCriteria(criteria)
	return o
}

// SetCriteria adds the criteria to the test rule for branch name using p o s t params
func (o *TestRuleForBranchNameUsingPOSTParams) SetCriteria(criteria []*models.Criterion) {
	o.Criteria = criteria
}

// WithMetadata adds the metadata to the test rule for branch name using p o s t params
func (o *TestRuleForBranchNameUsingPOSTParams) WithMetadata(metadata []string) *TestRuleForBranchNameUsingPOSTParams {
	o.SetMetadata(metadata)
	return o
}

// SetMetadata adds the metadata to the test rule for branch name using p o s t params
func (o *TestRuleForBranchNameUsingPOSTParams) SetMetadata(metadata []string) {
	o.Metadata = metadata
}

// WriteToRequest writes these params to a swagger request
func (o *TestRuleForBranchNameUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Criteria != nil {
		if err := r.SetBodyParam(o.Criteria); err != nil {
			return err
		}
	}

	if o.Metadata != nil {

		// binding items for metadata
		joinedMetadata := o.bindParamMetadata(reg)

		// query array param metadata
		if err := r.SetQueryParam("metadata", joinedMetadata...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamTestRuleForBranchNameUsingPOST binds the parameter metadata
func (o *TestRuleForBranchNameUsingPOSTParams) bindParamMetadata(formats strfmt.Registry) []string {
	metadataIR := o.Metadata

	var metadataIC []string
	for _, metadataIIR := range metadataIR { // explode []string

		metadataIIV := metadataIIR // string as string
		metadataIC = append(metadataIC, metadataIIV)
	}

	// items.CollectionFormat: ""
	metadataIS := swag.JoinByFormat(metadataIC, "")

	return metadataIS
}
