// Code generated by go-swagger; DO NOT EDIT.

package stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ToggleReleaseUsingPOSTReader is a Reader for the ToggleReleaseUsingPOST structure.
type ToggleReleaseUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ToggleReleaseUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewToggleReleaseUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewToggleReleaseUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewToggleReleaseUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewToggleReleaseUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewToggleReleaseUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc/v1/stacks/{stackName}/toggleRelease] toggleReleaseUsingPOST", response, response.Code())
	}
}

// NewToggleReleaseUsingPOSTOK creates a ToggleReleaseUsingPOSTOK with default headers values
func NewToggleReleaseUsingPOSTOK() *ToggleReleaseUsingPOSTOK {
	return &ToggleReleaseUsingPOSTOK{}
}

/*
ToggleReleaseUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type ToggleReleaseUsingPOSTOK struct {
	Payload *models.ToggleRelease
}

// IsSuccess returns true when this toggle release using p o s t o k response has a 2xx status code
func (o *ToggleReleaseUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this toggle release using p o s t o k response has a 3xx status code
func (o *ToggleReleaseUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this toggle release using p o s t o k response has a 4xx status code
func (o *ToggleReleaseUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this toggle release using p o s t o k response has a 5xx status code
func (o *ToggleReleaseUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this toggle release using p o s t o k response a status code equal to that given
func (o *ToggleReleaseUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the toggle release using p o s t o k response
func (o *ToggleReleaseUsingPOSTOK) Code() int {
	return 200
}

func (o *ToggleReleaseUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseUsingPOSTOK %s", 200, payload)
}

func (o *ToggleReleaseUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseUsingPOSTOK %s", 200, payload)
}

func (o *ToggleReleaseUsingPOSTOK) GetPayload() *models.ToggleRelease {
	return o.Payload
}

func (o *ToggleReleaseUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ToggleRelease)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewToggleReleaseUsingPOSTCreated creates a ToggleReleaseUsingPOSTCreated with default headers values
func NewToggleReleaseUsingPOSTCreated() *ToggleReleaseUsingPOSTCreated {
	return &ToggleReleaseUsingPOSTCreated{}
}

/*
ToggleReleaseUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type ToggleReleaseUsingPOSTCreated struct {
}

// IsSuccess returns true when this toggle release using p o s t created response has a 2xx status code
func (o *ToggleReleaseUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this toggle release using p o s t created response has a 3xx status code
func (o *ToggleReleaseUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this toggle release using p o s t created response has a 4xx status code
func (o *ToggleReleaseUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this toggle release using p o s t created response has a 5xx status code
func (o *ToggleReleaseUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this toggle release using p o s t created response a status code equal to that given
func (o *ToggleReleaseUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the toggle release using p o s t created response
func (o *ToggleReleaseUsingPOSTCreated) Code() int {
	return 201
}

func (o *ToggleReleaseUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseUsingPOSTCreated", 201)
}

func (o *ToggleReleaseUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseUsingPOSTCreated", 201)
}

func (o *ToggleReleaseUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewToggleReleaseUsingPOSTUnauthorized creates a ToggleReleaseUsingPOSTUnauthorized with default headers values
func NewToggleReleaseUsingPOSTUnauthorized() *ToggleReleaseUsingPOSTUnauthorized {
	return &ToggleReleaseUsingPOSTUnauthorized{}
}

/*
ToggleReleaseUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ToggleReleaseUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this toggle release using p o s t unauthorized response has a 2xx status code
func (o *ToggleReleaseUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this toggle release using p o s t unauthorized response has a 3xx status code
func (o *ToggleReleaseUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this toggle release using p o s t unauthorized response has a 4xx status code
func (o *ToggleReleaseUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this toggle release using p o s t unauthorized response has a 5xx status code
func (o *ToggleReleaseUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this toggle release using p o s t unauthorized response a status code equal to that given
func (o *ToggleReleaseUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the toggle release using p o s t unauthorized response
func (o *ToggleReleaseUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *ToggleReleaseUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseUsingPOSTUnauthorized", 401)
}

func (o *ToggleReleaseUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseUsingPOSTUnauthorized", 401)
}

func (o *ToggleReleaseUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewToggleReleaseUsingPOSTForbidden creates a ToggleReleaseUsingPOSTForbidden with default headers values
func NewToggleReleaseUsingPOSTForbidden() *ToggleReleaseUsingPOSTForbidden {
	return &ToggleReleaseUsingPOSTForbidden{}
}

/*
ToggleReleaseUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ToggleReleaseUsingPOSTForbidden struct {
}

// IsSuccess returns true when this toggle release using p o s t forbidden response has a 2xx status code
func (o *ToggleReleaseUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this toggle release using p o s t forbidden response has a 3xx status code
func (o *ToggleReleaseUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this toggle release using p o s t forbidden response has a 4xx status code
func (o *ToggleReleaseUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this toggle release using p o s t forbidden response has a 5xx status code
func (o *ToggleReleaseUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this toggle release using p o s t forbidden response a status code equal to that given
func (o *ToggleReleaseUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the toggle release using p o s t forbidden response
func (o *ToggleReleaseUsingPOSTForbidden) Code() int {
	return 403
}

func (o *ToggleReleaseUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseUsingPOSTForbidden", 403)
}

func (o *ToggleReleaseUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseUsingPOSTForbidden", 403)
}

func (o *ToggleReleaseUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewToggleReleaseUsingPOSTNotFound creates a ToggleReleaseUsingPOSTNotFound with default headers values
func NewToggleReleaseUsingPOSTNotFound() *ToggleReleaseUsingPOSTNotFound {
	return &ToggleReleaseUsingPOSTNotFound{}
}

/*
ToggleReleaseUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ToggleReleaseUsingPOSTNotFound struct {
}

// IsSuccess returns true when this toggle release using p o s t not found response has a 2xx status code
func (o *ToggleReleaseUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this toggle release using p o s t not found response has a 3xx status code
func (o *ToggleReleaseUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this toggle release using p o s t not found response has a 4xx status code
func (o *ToggleReleaseUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this toggle release using p o s t not found response has a 5xx status code
func (o *ToggleReleaseUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this toggle release using p o s t not found response a status code equal to that given
func (o *ToggleReleaseUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the toggle release using p o s t not found response
func (o *ToggleReleaseUsingPOSTNotFound) Code() int {
	return 404
}

func (o *ToggleReleaseUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseUsingPOSTNotFound", 404)
}

func (o *ToggleReleaseUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc/v1/stacks/{stackName}/toggleRelease][%d] toggleReleaseUsingPOSTNotFound", 404)
}

func (o *ToggleReleaseUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
