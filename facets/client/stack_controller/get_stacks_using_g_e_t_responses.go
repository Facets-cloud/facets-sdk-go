// Code generated by go-swagger; DO NOT EDIT.

package stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetStacksUsingGETReader is a Reader for the GetStacksUsingGET structure.
type GetStacksUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStacksUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStacksUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetStacksUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetStacksUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetStacksUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc/v1/stacks/] getStacksUsingGET", response, response.Code())
	}
}

// NewGetStacksUsingGETOK creates a GetStacksUsingGETOK with default headers values
func NewGetStacksUsingGETOK() *GetStacksUsingGETOK {
	return &GetStacksUsingGETOK{}
}

/*
GetStacksUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetStacksUsingGETOK struct {
	Payload []*models.Stack
}

// IsSuccess returns true when this get stacks using g e t o k response has a 2xx status code
func (o *GetStacksUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get stacks using g e t o k response has a 3xx status code
func (o *GetStacksUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get stacks using g e t o k response has a 4xx status code
func (o *GetStacksUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get stacks using g e t o k response has a 5xx status code
func (o *GetStacksUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get stacks using g e t o k response a status code equal to that given
func (o *GetStacksUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get stacks using g e t o k response
func (o *GetStacksUsingGETOK) Code() int {
	return 200
}

func (o *GetStacksUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc/v1/stacks/][%d] getStacksUsingGETOK %s", 200, payload)
}

func (o *GetStacksUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc/v1/stacks/][%d] getStacksUsingGETOK %s", 200, payload)
}

func (o *GetStacksUsingGETOK) GetPayload() []*models.Stack {
	return o.Payload
}

func (o *GetStacksUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStacksUsingGETUnauthorized creates a GetStacksUsingGETUnauthorized with default headers values
func NewGetStacksUsingGETUnauthorized() *GetStacksUsingGETUnauthorized {
	return &GetStacksUsingGETUnauthorized{}
}

/*
GetStacksUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetStacksUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get stacks using g e t unauthorized response has a 2xx status code
func (o *GetStacksUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get stacks using g e t unauthorized response has a 3xx status code
func (o *GetStacksUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get stacks using g e t unauthorized response has a 4xx status code
func (o *GetStacksUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get stacks using g e t unauthorized response has a 5xx status code
func (o *GetStacksUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get stacks using g e t unauthorized response a status code equal to that given
func (o *GetStacksUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get stacks using g e t unauthorized response
func (o *GetStacksUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetStacksUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/][%d] getStacksUsingGETUnauthorized", 401)
}

func (o *GetStacksUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/][%d] getStacksUsingGETUnauthorized", 401)
}

func (o *GetStacksUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStacksUsingGETForbidden creates a GetStacksUsingGETForbidden with default headers values
func NewGetStacksUsingGETForbidden() *GetStacksUsingGETForbidden {
	return &GetStacksUsingGETForbidden{}
}

/*
GetStacksUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetStacksUsingGETForbidden struct {
}

// IsSuccess returns true when this get stacks using g e t forbidden response has a 2xx status code
func (o *GetStacksUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get stacks using g e t forbidden response has a 3xx status code
func (o *GetStacksUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get stacks using g e t forbidden response has a 4xx status code
func (o *GetStacksUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get stacks using g e t forbidden response has a 5xx status code
func (o *GetStacksUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get stacks using g e t forbidden response a status code equal to that given
func (o *GetStacksUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get stacks using g e t forbidden response
func (o *GetStacksUsingGETForbidden) Code() int {
	return 403
}

func (o *GetStacksUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/][%d] getStacksUsingGETForbidden", 403)
}

func (o *GetStacksUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/][%d] getStacksUsingGETForbidden", 403)
}

func (o *GetStacksUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStacksUsingGETNotFound creates a GetStacksUsingGETNotFound with default headers values
func NewGetStacksUsingGETNotFound() *GetStacksUsingGETNotFound {
	return &GetStacksUsingGETNotFound{}
}

/*
GetStacksUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetStacksUsingGETNotFound struct {
}

// IsSuccess returns true when this get stacks using g e t not found response has a 2xx status code
func (o *GetStacksUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get stacks using g e t not found response has a 3xx status code
func (o *GetStacksUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get stacks using g e t not found response has a 4xx status code
func (o *GetStacksUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get stacks using g e t not found response has a 5xx status code
func (o *GetStacksUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get stacks using g e t not found response a status code equal to that given
func (o *GetStacksUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get stacks using g e t not found response
func (o *GetStacksUsingGETNotFound) Code() int {
	return 404
}

func (o *GetStacksUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/][%d] getStacksUsingGETNotFound", 404)
}

func (o *GetStacksUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/][%d] getStacksUsingGETNotFound", 404)
}

func (o *GetStacksUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
