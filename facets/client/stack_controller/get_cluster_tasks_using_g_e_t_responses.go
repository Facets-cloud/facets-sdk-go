// Code generated by go-swagger; DO NOT EDIT.

package stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetClusterTasksUsingGETReader is a Reader for the GetClusterTasksUsingGET structure.
type GetClusterTasksUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetClusterTasksUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetClusterTasksUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetClusterTasksUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetClusterTasksUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetClusterTasksUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc/v1/stacks/clusterTask/{stackName}] getClusterTasksUsingGET", response, response.Code())
	}
}

// NewGetClusterTasksUsingGETOK creates a GetClusterTasksUsingGETOK with default headers values
func NewGetClusterTasksUsingGETOK() *GetClusterTasksUsingGETOK {
	return &GetClusterTasksUsingGETOK{}
}

/*
GetClusterTasksUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetClusterTasksUsingGETOK struct {
	Payload []*models.ClusterTask
}

// IsSuccess returns true when this get cluster tasks using g e t o k response has a 2xx status code
func (o *GetClusterTasksUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get cluster tasks using g e t o k response has a 3xx status code
func (o *GetClusterTasksUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cluster tasks using g e t o k response has a 4xx status code
func (o *GetClusterTasksUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get cluster tasks using g e t o k response has a 5xx status code
func (o *GetClusterTasksUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get cluster tasks using g e t o k response a status code equal to that given
func (o *GetClusterTasksUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get cluster tasks using g e t o k response
func (o *GetClusterTasksUsingGETOK) Code() int {
	return 200
}

func (o *GetClusterTasksUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc/v1/stacks/clusterTask/{stackName}][%d] getClusterTasksUsingGETOK %s", 200, payload)
}

func (o *GetClusterTasksUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc/v1/stacks/clusterTask/{stackName}][%d] getClusterTasksUsingGETOK %s", 200, payload)
}

func (o *GetClusterTasksUsingGETOK) GetPayload() []*models.ClusterTask {
	return o.Payload
}

func (o *GetClusterTasksUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClusterTasksUsingGETUnauthorized creates a GetClusterTasksUsingGETUnauthorized with default headers values
func NewGetClusterTasksUsingGETUnauthorized() *GetClusterTasksUsingGETUnauthorized {
	return &GetClusterTasksUsingGETUnauthorized{}
}

/*
GetClusterTasksUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetClusterTasksUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get cluster tasks using g e t unauthorized response has a 2xx status code
func (o *GetClusterTasksUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cluster tasks using g e t unauthorized response has a 3xx status code
func (o *GetClusterTasksUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cluster tasks using g e t unauthorized response has a 4xx status code
func (o *GetClusterTasksUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cluster tasks using g e t unauthorized response has a 5xx status code
func (o *GetClusterTasksUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get cluster tasks using g e t unauthorized response a status code equal to that given
func (o *GetClusterTasksUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get cluster tasks using g e t unauthorized response
func (o *GetClusterTasksUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetClusterTasksUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/clusterTask/{stackName}][%d] getClusterTasksUsingGETUnauthorized", 401)
}

func (o *GetClusterTasksUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/clusterTask/{stackName}][%d] getClusterTasksUsingGETUnauthorized", 401)
}

func (o *GetClusterTasksUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetClusterTasksUsingGETForbidden creates a GetClusterTasksUsingGETForbidden with default headers values
func NewGetClusterTasksUsingGETForbidden() *GetClusterTasksUsingGETForbidden {
	return &GetClusterTasksUsingGETForbidden{}
}

/*
GetClusterTasksUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetClusterTasksUsingGETForbidden struct {
}

// IsSuccess returns true when this get cluster tasks using g e t forbidden response has a 2xx status code
func (o *GetClusterTasksUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cluster tasks using g e t forbidden response has a 3xx status code
func (o *GetClusterTasksUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cluster tasks using g e t forbidden response has a 4xx status code
func (o *GetClusterTasksUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cluster tasks using g e t forbidden response has a 5xx status code
func (o *GetClusterTasksUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get cluster tasks using g e t forbidden response a status code equal to that given
func (o *GetClusterTasksUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get cluster tasks using g e t forbidden response
func (o *GetClusterTasksUsingGETForbidden) Code() int {
	return 403
}

func (o *GetClusterTasksUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/clusterTask/{stackName}][%d] getClusterTasksUsingGETForbidden", 403)
}

func (o *GetClusterTasksUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/clusterTask/{stackName}][%d] getClusterTasksUsingGETForbidden", 403)
}

func (o *GetClusterTasksUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetClusterTasksUsingGETNotFound creates a GetClusterTasksUsingGETNotFound with default headers values
func NewGetClusterTasksUsingGETNotFound() *GetClusterTasksUsingGETNotFound {
	return &GetClusterTasksUsingGETNotFound{}
}

/*
GetClusterTasksUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetClusterTasksUsingGETNotFound struct {
}

// IsSuccess returns true when this get cluster tasks using g e t not found response has a 2xx status code
func (o *GetClusterTasksUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cluster tasks using g e t not found response has a 3xx status code
func (o *GetClusterTasksUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cluster tasks using g e t not found response has a 4xx status code
func (o *GetClusterTasksUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cluster tasks using g e t not found response has a 5xx status code
func (o *GetClusterTasksUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get cluster tasks using g e t not found response a status code equal to that given
func (o *GetClusterTasksUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get cluster tasks using g e t not found response
func (o *GetClusterTasksUsingGETNotFound) Code() int {
	return 404
}

func (o *GetClusterTasksUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/clusterTask/{stackName}][%d] getClusterTasksUsingGETNotFound", 404)
}

func (o *GetClusterTasksUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/clusterTask/{stackName}][%d] getClusterTasksUsingGETNotFound", 404)
}

func (o *GetClusterTasksUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
