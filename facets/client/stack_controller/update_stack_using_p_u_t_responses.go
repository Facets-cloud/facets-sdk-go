// Code generated by go-swagger; DO NOT EDIT.

package stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateStackUsingPUTReader is a Reader for the UpdateStackUsingPUT structure.
type UpdateStackUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateStackUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateStackUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateStackUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateStackUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateStackUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateStackUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc/v1/stacks/{stackName}] updateStackUsingPUT", response, response.Code())
	}
}

// NewUpdateStackUsingPUTOK creates a UpdateStackUsingPUTOK with default headers values
func NewUpdateStackUsingPUTOK() *UpdateStackUsingPUTOK {
	return &UpdateStackUsingPUTOK{}
}

/*
UpdateStackUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateStackUsingPUTOK struct {
	Payload *models.Stack
}

// IsSuccess returns true when this update stack using p u t o k response has a 2xx status code
func (o *UpdateStackUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update stack using p u t o k response has a 3xx status code
func (o *UpdateStackUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update stack using p u t o k response has a 4xx status code
func (o *UpdateStackUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update stack using p u t o k response has a 5xx status code
func (o *UpdateStackUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update stack using p u t o k response a status code equal to that given
func (o *UpdateStackUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update stack using p u t o k response
func (o *UpdateStackUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateStackUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc/v1/stacks/{stackName}][%d] updateStackUsingPUTOK %s", 200, payload)
}

func (o *UpdateStackUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc/v1/stacks/{stackName}][%d] updateStackUsingPUTOK %s", 200, payload)
}

func (o *UpdateStackUsingPUTOK) GetPayload() *models.Stack {
	return o.Payload
}

func (o *UpdateStackUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Stack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStackUsingPUTCreated creates a UpdateStackUsingPUTCreated with default headers values
func NewUpdateStackUsingPUTCreated() *UpdateStackUsingPUTCreated {
	return &UpdateStackUsingPUTCreated{}
}

/*
UpdateStackUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateStackUsingPUTCreated struct {
}

// IsSuccess returns true when this update stack using p u t created response has a 2xx status code
func (o *UpdateStackUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update stack using p u t created response has a 3xx status code
func (o *UpdateStackUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update stack using p u t created response has a 4xx status code
func (o *UpdateStackUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update stack using p u t created response has a 5xx status code
func (o *UpdateStackUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update stack using p u t created response a status code equal to that given
func (o *UpdateStackUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update stack using p u t created response
func (o *UpdateStackUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateStackUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc/v1/stacks/{stackName}][%d] updateStackUsingPUTCreated", 201)
}

func (o *UpdateStackUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc/v1/stacks/{stackName}][%d] updateStackUsingPUTCreated", 201)
}

func (o *UpdateStackUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateStackUsingPUTUnauthorized creates a UpdateStackUsingPUTUnauthorized with default headers values
func NewUpdateStackUsingPUTUnauthorized() *UpdateStackUsingPUTUnauthorized {
	return &UpdateStackUsingPUTUnauthorized{}
}

/*
UpdateStackUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateStackUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update stack using p u t unauthorized response has a 2xx status code
func (o *UpdateStackUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update stack using p u t unauthorized response has a 3xx status code
func (o *UpdateStackUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update stack using p u t unauthorized response has a 4xx status code
func (o *UpdateStackUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update stack using p u t unauthorized response has a 5xx status code
func (o *UpdateStackUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update stack using p u t unauthorized response a status code equal to that given
func (o *UpdateStackUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update stack using p u t unauthorized response
func (o *UpdateStackUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateStackUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc/v1/stacks/{stackName}][%d] updateStackUsingPUTUnauthorized", 401)
}

func (o *UpdateStackUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc/v1/stacks/{stackName}][%d] updateStackUsingPUTUnauthorized", 401)
}

func (o *UpdateStackUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateStackUsingPUTForbidden creates a UpdateStackUsingPUTForbidden with default headers values
func NewUpdateStackUsingPUTForbidden() *UpdateStackUsingPUTForbidden {
	return &UpdateStackUsingPUTForbidden{}
}

/*
UpdateStackUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateStackUsingPUTForbidden struct {
}

// IsSuccess returns true when this update stack using p u t forbidden response has a 2xx status code
func (o *UpdateStackUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update stack using p u t forbidden response has a 3xx status code
func (o *UpdateStackUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update stack using p u t forbidden response has a 4xx status code
func (o *UpdateStackUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update stack using p u t forbidden response has a 5xx status code
func (o *UpdateStackUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update stack using p u t forbidden response a status code equal to that given
func (o *UpdateStackUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update stack using p u t forbidden response
func (o *UpdateStackUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateStackUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc/v1/stacks/{stackName}][%d] updateStackUsingPUTForbidden", 403)
}

func (o *UpdateStackUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc/v1/stacks/{stackName}][%d] updateStackUsingPUTForbidden", 403)
}

func (o *UpdateStackUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateStackUsingPUTNotFound creates a UpdateStackUsingPUTNotFound with default headers values
func NewUpdateStackUsingPUTNotFound() *UpdateStackUsingPUTNotFound {
	return &UpdateStackUsingPUTNotFound{}
}

/*
UpdateStackUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateStackUsingPUTNotFound struct {
}

// IsSuccess returns true when this update stack using p u t not found response has a 2xx status code
func (o *UpdateStackUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update stack using p u t not found response has a 3xx status code
func (o *UpdateStackUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update stack using p u t not found response has a 4xx status code
func (o *UpdateStackUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update stack using p u t not found response has a 5xx status code
func (o *UpdateStackUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update stack using p u t not found response a status code equal to that given
func (o *UpdateStackUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update stack using p u t not found response
func (o *UpdateStackUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateStackUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc/v1/stacks/{stackName}][%d] updateStackUsingPUTNotFound", 404)
}

func (o *UpdateStackUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc/v1/stacks/{stackName}][%d] updateStackUsingPUTNotFound", 404)
}

func (o *UpdateStackUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
