// Code generated by go-swagger; DO NOT EDIT.

package stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ReloadStackUsingGETReader is a Reader for the ReloadStackUsingGET structure.
type ReloadStackUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReloadStackUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReloadStackUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewReloadStackUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReloadStackUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReloadStackUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc/v1/stacks/{stackName}/reload] reloadStackUsingGET", response, response.Code())
	}
}

// NewReloadStackUsingGETOK creates a ReloadStackUsingGETOK with default headers values
func NewReloadStackUsingGETOK() *ReloadStackUsingGETOK {
	return &ReloadStackUsingGETOK{}
}

/*
ReloadStackUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type ReloadStackUsingGETOK struct {
	Payload *models.Stack
}

// IsSuccess returns true when this reload stack using g e t o k response has a 2xx status code
func (o *ReloadStackUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reload stack using g e t o k response has a 3xx status code
func (o *ReloadStackUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reload stack using g e t o k response has a 4xx status code
func (o *ReloadStackUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this reload stack using g e t o k response has a 5xx status code
func (o *ReloadStackUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this reload stack using g e t o k response a status code equal to that given
func (o *ReloadStackUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the reload stack using g e t o k response
func (o *ReloadStackUsingGETOK) Code() int {
	return 200
}

func (o *ReloadStackUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc/v1/stacks/{stackName}/reload][%d] reloadStackUsingGETOK %s", 200, payload)
}

func (o *ReloadStackUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc/v1/stacks/{stackName}/reload][%d] reloadStackUsingGETOK %s", 200, payload)
}

func (o *ReloadStackUsingGETOK) GetPayload() *models.Stack {
	return o.Payload
}

func (o *ReloadStackUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Stack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReloadStackUsingGETUnauthorized creates a ReloadStackUsingGETUnauthorized with default headers values
func NewReloadStackUsingGETUnauthorized() *ReloadStackUsingGETUnauthorized {
	return &ReloadStackUsingGETUnauthorized{}
}

/*
ReloadStackUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ReloadStackUsingGETUnauthorized struct {
}

// IsSuccess returns true when this reload stack using g e t unauthorized response has a 2xx status code
func (o *ReloadStackUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reload stack using g e t unauthorized response has a 3xx status code
func (o *ReloadStackUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reload stack using g e t unauthorized response has a 4xx status code
func (o *ReloadStackUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this reload stack using g e t unauthorized response has a 5xx status code
func (o *ReloadStackUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this reload stack using g e t unauthorized response a status code equal to that given
func (o *ReloadStackUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the reload stack using g e t unauthorized response
func (o *ReloadStackUsingGETUnauthorized) Code() int {
	return 401
}

func (o *ReloadStackUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/{stackName}/reload][%d] reloadStackUsingGETUnauthorized", 401)
}

func (o *ReloadStackUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/{stackName}/reload][%d] reloadStackUsingGETUnauthorized", 401)
}

func (o *ReloadStackUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReloadStackUsingGETForbidden creates a ReloadStackUsingGETForbidden with default headers values
func NewReloadStackUsingGETForbidden() *ReloadStackUsingGETForbidden {
	return &ReloadStackUsingGETForbidden{}
}

/*
ReloadStackUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ReloadStackUsingGETForbidden struct {
}

// IsSuccess returns true when this reload stack using g e t forbidden response has a 2xx status code
func (o *ReloadStackUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reload stack using g e t forbidden response has a 3xx status code
func (o *ReloadStackUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reload stack using g e t forbidden response has a 4xx status code
func (o *ReloadStackUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this reload stack using g e t forbidden response has a 5xx status code
func (o *ReloadStackUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this reload stack using g e t forbidden response a status code equal to that given
func (o *ReloadStackUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the reload stack using g e t forbidden response
func (o *ReloadStackUsingGETForbidden) Code() int {
	return 403
}

func (o *ReloadStackUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/{stackName}/reload][%d] reloadStackUsingGETForbidden", 403)
}

func (o *ReloadStackUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/{stackName}/reload][%d] reloadStackUsingGETForbidden", 403)
}

func (o *ReloadStackUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReloadStackUsingGETNotFound creates a ReloadStackUsingGETNotFound with default headers values
func NewReloadStackUsingGETNotFound() *ReloadStackUsingGETNotFound {
	return &ReloadStackUsingGETNotFound{}
}

/*
ReloadStackUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ReloadStackUsingGETNotFound struct {
}

// IsSuccess returns true when this reload stack using g e t not found response has a 2xx status code
func (o *ReloadStackUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reload stack using g e t not found response has a 3xx status code
func (o *ReloadStackUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reload stack using g e t not found response has a 4xx status code
func (o *ReloadStackUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this reload stack using g e t not found response has a 5xx status code
func (o *ReloadStackUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this reload stack using g e t not found response a status code equal to that given
func (o *ReloadStackUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the reload stack using g e t not found response
func (o *ReloadStackUsingGETNotFound) Code() int {
	return 404
}

func (o *ReloadStackUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/{stackName}/reload][%d] reloadStackUsingGETNotFound", 404)
}

func (o *ReloadStackUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc/v1/stacks/{stackName}/reload][%d] reloadStackUsingGETNotFound", 404)
}

func (o *ReloadStackUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
