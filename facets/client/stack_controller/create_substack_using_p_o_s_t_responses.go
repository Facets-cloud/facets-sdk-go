// Code generated by go-swagger; DO NOT EDIT.

package stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateSubstackUsingPOSTReader is a Reader for the CreateSubstackUsingPOST structure.
type CreateSubstackUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSubstackUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateSubstackUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewCreateSubstackUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateSubstackUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateSubstackUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateSubstackUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc/v1/stacks/substack/{substackName}] createSubstackUsingPOST", response, response.Code())
	}
}

// NewCreateSubstackUsingPOSTOK creates a CreateSubstackUsingPOSTOK with default headers values
func NewCreateSubstackUsingPOSTOK() *CreateSubstackUsingPOSTOK {
	return &CreateSubstackUsingPOSTOK{}
}

/*
CreateSubstackUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type CreateSubstackUsingPOSTOK struct {
	Payload *models.Substack
}

// IsSuccess returns true when this create substack using p o s t o k response has a 2xx status code
func (o *CreateSubstackUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create substack using p o s t o k response has a 3xx status code
func (o *CreateSubstackUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create substack using p o s t o k response has a 4xx status code
func (o *CreateSubstackUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create substack using p o s t o k response has a 5xx status code
func (o *CreateSubstackUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create substack using p o s t o k response a status code equal to that given
func (o *CreateSubstackUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create substack using p o s t o k response
func (o *CreateSubstackUsingPOSTOK) Code() int {
	return 200
}

func (o *CreateSubstackUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc/v1/stacks/substack/{substackName}][%d] createSubstackUsingPOSTOK %s", 200, payload)
}

func (o *CreateSubstackUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc/v1/stacks/substack/{substackName}][%d] createSubstackUsingPOSTOK %s", 200, payload)
}

func (o *CreateSubstackUsingPOSTOK) GetPayload() *models.Substack {
	return o.Payload
}

func (o *CreateSubstackUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Substack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubstackUsingPOSTCreated creates a CreateSubstackUsingPOSTCreated with default headers values
func NewCreateSubstackUsingPOSTCreated() *CreateSubstackUsingPOSTCreated {
	return &CreateSubstackUsingPOSTCreated{}
}

/*
CreateSubstackUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type CreateSubstackUsingPOSTCreated struct {
}

// IsSuccess returns true when this create substack using p o s t created response has a 2xx status code
func (o *CreateSubstackUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create substack using p o s t created response has a 3xx status code
func (o *CreateSubstackUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create substack using p o s t created response has a 4xx status code
func (o *CreateSubstackUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create substack using p o s t created response has a 5xx status code
func (o *CreateSubstackUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create substack using p o s t created response a status code equal to that given
func (o *CreateSubstackUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create substack using p o s t created response
func (o *CreateSubstackUsingPOSTCreated) Code() int {
	return 201
}

func (o *CreateSubstackUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc/v1/stacks/substack/{substackName}][%d] createSubstackUsingPOSTCreated", 201)
}

func (o *CreateSubstackUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc/v1/stacks/substack/{substackName}][%d] createSubstackUsingPOSTCreated", 201)
}

func (o *CreateSubstackUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateSubstackUsingPOSTUnauthorized creates a CreateSubstackUsingPOSTUnauthorized with default headers values
func NewCreateSubstackUsingPOSTUnauthorized() *CreateSubstackUsingPOSTUnauthorized {
	return &CreateSubstackUsingPOSTUnauthorized{}
}

/*
CreateSubstackUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateSubstackUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this create substack using p o s t unauthorized response has a 2xx status code
func (o *CreateSubstackUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create substack using p o s t unauthorized response has a 3xx status code
func (o *CreateSubstackUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create substack using p o s t unauthorized response has a 4xx status code
func (o *CreateSubstackUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create substack using p o s t unauthorized response has a 5xx status code
func (o *CreateSubstackUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create substack using p o s t unauthorized response a status code equal to that given
func (o *CreateSubstackUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create substack using p o s t unauthorized response
func (o *CreateSubstackUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *CreateSubstackUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc/v1/stacks/substack/{substackName}][%d] createSubstackUsingPOSTUnauthorized", 401)
}

func (o *CreateSubstackUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc/v1/stacks/substack/{substackName}][%d] createSubstackUsingPOSTUnauthorized", 401)
}

func (o *CreateSubstackUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateSubstackUsingPOSTForbidden creates a CreateSubstackUsingPOSTForbidden with default headers values
func NewCreateSubstackUsingPOSTForbidden() *CreateSubstackUsingPOSTForbidden {
	return &CreateSubstackUsingPOSTForbidden{}
}

/*
CreateSubstackUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateSubstackUsingPOSTForbidden struct {
}

// IsSuccess returns true when this create substack using p o s t forbidden response has a 2xx status code
func (o *CreateSubstackUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create substack using p o s t forbidden response has a 3xx status code
func (o *CreateSubstackUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create substack using p o s t forbidden response has a 4xx status code
func (o *CreateSubstackUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create substack using p o s t forbidden response has a 5xx status code
func (o *CreateSubstackUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create substack using p o s t forbidden response a status code equal to that given
func (o *CreateSubstackUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create substack using p o s t forbidden response
func (o *CreateSubstackUsingPOSTForbidden) Code() int {
	return 403
}

func (o *CreateSubstackUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc/v1/stacks/substack/{substackName}][%d] createSubstackUsingPOSTForbidden", 403)
}

func (o *CreateSubstackUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc/v1/stacks/substack/{substackName}][%d] createSubstackUsingPOSTForbidden", 403)
}

func (o *CreateSubstackUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateSubstackUsingPOSTNotFound creates a CreateSubstackUsingPOSTNotFound with default headers values
func NewCreateSubstackUsingPOSTNotFound() *CreateSubstackUsingPOSTNotFound {
	return &CreateSubstackUsingPOSTNotFound{}
}

/*
CreateSubstackUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateSubstackUsingPOSTNotFound struct {
}

// IsSuccess returns true when this create substack using p o s t not found response has a 2xx status code
func (o *CreateSubstackUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create substack using p o s t not found response has a 3xx status code
func (o *CreateSubstackUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create substack using p o s t not found response has a 4xx status code
func (o *CreateSubstackUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create substack using p o s t not found response has a 5xx status code
func (o *CreateSubstackUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create substack using p o s t not found response a status code equal to that given
func (o *CreateSubstackUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create substack using p o s t not found response
func (o *CreateSubstackUsingPOSTNotFound) Code() int {
	return 404
}

func (o *CreateSubstackUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc/v1/stacks/substack/{substackName}][%d] createSubstackUsingPOSTNotFound", 404)
}

func (o *CreateSubstackUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc/v1/stacks/substack/{substackName}][%d] createSubstackUsingPOSTNotFound", 404)
}

func (o *CreateSubstackUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
