// Code generated by go-swagger; DO NOT EDIT.

package stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new stack controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new stack controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new stack controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for stack controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateClusterTasksUsingPOST(params *CreateClusterTasksUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateClusterTasksUsingPOSTOK, *CreateClusterTasksUsingPOSTCreated, error)

	CreateStackUsingPOST(params *CreateStackUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStackUsingPOSTOK, *CreateStackUsingPOSTCreated, error)

	CreateSubstackUsingPOST(params *CreateSubstackUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubstackUsingPOSTOK, *CreateSubstackUsingPOSTCreated, error)

	GetClusterTasksUsingGET(params *GetClusterTasksUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterTasksUsingGETOK, error)

	GetClustersUsingGET(params *GetClustersUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClustersUsingGETOK, error)

	GetStacksUsingGET(params *GetStacksUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStacksUsingGETOK, error)

	ReloadStackUsingGET(params *ReloadStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadStackUsingGETOK, error)

	ToggleReleaseUsingPOST(params *ToggleReleaseUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ToggleReleaseUsingPOSTOK, *ToggleReleaseUsingPOSTCreated, error)

	UpdateStackUsingPUT(params *UpdateStackUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStackUsingPUTOK, *UpdateStackUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateClusterTasksUsingPOST creates cluster tasks
*/
func (a *Client) CreateClusterTasksUsingPOST(params *CreateClusterTasksUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateClusterTasksUsingPOSTOK, *CreateClusterTasksUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterTasksUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createClusterTasksUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc/v1/stacks/clusterTask",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateClusterTasksUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateClusterTasksUsingPOSTOK:
		return value, nil, nil
	case *CreateClusterTasksUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateStackUsingPOST creates stack
*/
func (a *Client) CreateStackUsingPOST(params *CreateStackUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStackUsingPOSTOK, *CreateStackUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStackUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createStackUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc/v1/stacks/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStackUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateStackUsingPOSTOK:
		return value, nil, nil
	case *CreateStackUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSubstackUsingPOST creates substack
*/
func (a *Client) CreateSubstackUsingPOST(params *CreateSubstackUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubstackUsingPOSTOK, *CreateSubstackUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubstackUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSubstackUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc/v1/stacks/substack/{substackName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubstackUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateSubstackUsingPOSTOK:
		return value, nil, nil
	case *CreateSubstackUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterTasksUsingGET gets cluster tasks
*/
func (a *Client) GetClusterTasksUsingGET(params *GetClusterTasksUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterTasksUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterTasksUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterTasksUsingGET",
		Method:             "GET",
		PathPattern:        "/cc/v1/stacks/clusterTask/{stackName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterTasksUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterTasksUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterTasksUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClustersUsingGET gets clusters
*/
func (a *Client) GetClustersUsingGET(params *GetClustersUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClustersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClustersUsingGET",
		Method:             "GET",
		PathPattern:        "/cc/v1/stacks/{stackName}/clusters",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClustersUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClustersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClustersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStacksUsingGET gets stacks
*/
func (a *Client) GetStacksUsingGET(params *GetStacksUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStacksUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStacksUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStacksUsingGET",
		Method:             "GET",
		PathPattern:        "/cc/v1/stacks/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStacksUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStacksUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStacksUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReloadStackUsingGET reloads stack
*/
func (a *Client) ReloadStackUsingGET(params *ReloadStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadStackUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadStackUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reloadStackUsingGET",
		Method:             "GET",
		PathPattern:        "/cc/v1/stacks/{stackName}/reload",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReloadStackUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadStackUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadStackUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ToggleReleaseUsingPOST toggles release
*/
func (a *Client) ToggleReleaseUsingPOST(params *ToggleReleaseUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ToggleReleaseUsingPOSTOK, *ToggleReleaseUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewToggleReleaseUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "toggleReleaseUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc/v1/stacks/{stackName}/toggleRelease",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ToggleReleaseUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ToggleReleaseUsingPOSTOK:
		return value, nil, nil
	case *ToggleReleaseUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateStackUsingPUT updates stack
*/
func (a *Client) UpdateStackUsingPUT(params *UpdateStackUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStackUsingPUTOK, *UpdateStackUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStackUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateStackUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc/v1/stacks/{stackName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateStackUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateStackUsingPUTOK:
		return value, nil, nil
	case *UpdateStackUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stack_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
