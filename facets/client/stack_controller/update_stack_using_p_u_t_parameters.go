// Code generated by go-swagger; DO NOT EDIT.

package stack_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// NewUpdateStackUsingPUTParams creates a new UpdateStackUsingPUTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateStackUsingPUTParams() *UpdateStackUsingPUTParams {
	return &UpdateStackUsingPUTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateStackUsingPUTParamsWithTimeout creates a new UpdateStackUsingPUTParams object
// with the ability to set a timeout on a request.
func NewUpdateStackUsingPUTParamsWithTimeout(timeout time.Duration) *UpdateStackUsingPUTParams {
	return &UpdateStackUsingPUTParams{
		timeout: timeout,
	}
}

// NewUpdateStackUsingPUTParamsWithContext creates a new UpdateStackUsingPUTParams object
// with the ability to set a context for a request.
func NewUpdateStackUsingPUTParamsWithContext(ctx context.Context) *UpdateStackUsingPUTParams {
	return &UpdateStackUsingPUTParams{
		Context: ctx,
	}
}

// NewUpdateStackUsingPUTParamsWithHTTPClient creates a new UpdateStackUsingPUTParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateStackUsingPUTParamsWithHTTPClient(client *http.Client) *UpdateStackUsingPUTParams {
	return &UpdateStackUsingPUTParams{
		HTTPClient: client,
	}
}

/*
UpdateStackUsingPUTParams contains all the parameters to send to the API endpoint

	for the update stack using p u t operation.

	Typically these are written to a http.Request.
*/
type UpdateStackUsingPUTParams struct {

	/* Stack.

	   stack
	*/
	Stack *models.Stack

	/* StackName.

	   stackName
	*/
	StackName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update stack using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateStackUsingPUTParams) WithDefaults() *UpdateStackUsingPUTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update stack using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateStackUsingPUTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update stack using p u t params
func (o *UpdateStackUsingPUTParams) WithTimeout(timeout time.Duration) *UpdateStackUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update stack using p u t params
func (o *UpdateStackUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update stack using p u t params
func (o *UpdateStackUsingPUTParams) WithContext(ctx context.Context) *UpdateStackUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update stack using p u t params
func (o *UpdateStackUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update stack using p u t params
func (o *UpdateStackUsingPUTParams) WithHTTPClient(client *http.Client) *UpdateStackUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update stack using p u t params
func (o *UpdateStackUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithStack adds the stack to the update stack using p u t params
func (o *UpdateStackUsingPUTParams) WithStack(stack *models.Stack) *UpdateStackUsingPUTParams {
	o.SetStack(stack)
	return o
}

// SetStack adds the stack to the update stack using p u t params
func (o *UpdateStackUsingPUTParams) SetStack(stack *models.Stack) {
	o.Stack = stack
}

// WithStackName adds the stackName to the update stack using p u t params
func (o *UpdateStackUsingPUTParams) WithStackName(stackName string) *UpdateStackUsingPUTParams {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the update stack using p u t params
func (o *UpdateStackUsingPUTParams) SetStackName(stackName string) {
	o.StackName = stackName
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateStackUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Stack != nil {
		if err := r.SetBodyParam(o.Stack); err != nil {
			return err
		}
	}

	// path param stackName
	if err := r.SetPathParam("stackName", o.StackName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
