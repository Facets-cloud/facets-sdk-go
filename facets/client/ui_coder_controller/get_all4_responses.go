// Code generated by go-swagger; DO NOT EDIT.

package ui_coder_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAll4Reader is a Reader for the GetAll4 structure.
type GetAll4Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAll4Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAll4OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAll4BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAll4NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAll4MethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAll4InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workspaces] getAll_4", response, response.Code())
	}
}

// NewGetAll4OK creates a GetAll4OK with default headers values
func NewGetAll4OK() *GetAll4OK {
	return &GetAll4OK{}
}

/*
GetAll4OK describes a response with status code 200, with default header values.

OK
*/
type GetAll4OK struct {
	Payload []*models.CoderWorkspaceResponse
}

// IsSuccess returns true when this get all4 o k response has a 2xx status code
func (o *GetAll4OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all4 o k response has a 3xx status code
func (o *GetAll4OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all4 o k response has a 4xx status code
func (o *GetAll4OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all4 o k response has a 5xx status code
func (o *GetAll4OK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all4 o k response a status code equal to that given
func (o *GetAll4OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all4 o k response
func (o *GetAll4OK) Code() int {
	return 200
}

func (o *GetAll4OK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workspaces][%d] getAll4OK %s", 200, payload)
}

func (o *GetAll4OK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workspaces][%d] getAll4OK %s", 200, payload)
}

func (o *GetAll4OK) GetPayload() []*models.CoderWorkspaceResponse {
	return o.Payload
}

func (o *GetAll4OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAll4BadRequest creates a GetAll4BadRequest with default headers values
func NewGetAll4BadRequest() *GetAll4BadRequest {
	return &GetAll4BadRequest{}
}

/*
GetAll4BadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAll4BadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all4 bad request response has a 2xx status code
func (o *GetAll4BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all4 bad request response has a 3xx status code
func (o *GetAll4BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all4 bad request response has a 4xx status code
func (o *GetAll4BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all4 bad request response has a 5xx status code
func (o *GetAll4BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all4 bad request response a status code equal to that given
func (o *GetAll4BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all4 bad request response
func (o *GetAll4BadRequest) Code() int {
	return 400
}

func (o *GetAll4BadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workspaces][%d] getAll4BadRequest %s", 400, payload)
}

func (o *GetAll4BadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workspaces][%d] getAll4BadRequest %s", 400, payload)
}

func (o *GetAll4BadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAll4BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAll4NotFound creates a GetAll4NotFound with default headers values
func NewGetAll4NotFound() *GetAll4NotFound {
	return &GetAll4NotFound{}
}

/*
GetAll4NotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAll4NotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all4 not found response has a 2xx status code
func (o *GetAll4NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all4 not found response has a 3xx status code
func (o *GetAll4NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all4 not found response has a 4xx status code
func (o *GetAll4NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all4 not found response has a 5xx status code
func (o *GetAll4NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all4 not found response a status code equal to that given
func (o *GetAll4NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all4 not found response
func (o *GetAll4NotFound) Code() int {
	return 404
}

func (o *GetAll4NotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workspaces][%d] getAll4NotFound %s", 404, payload)
}

func (o *GetAll4NotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workspaces][%d] getAll4NotFound %s", 404, payload)
}

func (o *GetAll4NotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAll4NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAll4MethodNotAllowed creates a GetAll4MethodNotAllowed with default headers values
func NewGetAll4MethodNotAllowed() *GetAll4MethodNotAllowed {
	return &GetAll4MethodNotAllowed{}
}

/*
GetAll4MethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAll4MethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all4 method not allowed response has a 2xx status code
func (o *GetAll4MethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all4 method not allowed response has a 3xx status code
func (o *GetAll4MethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all4 method not allowed response has a 4xx status code
func (o *GetAll4MethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all4 method not allowed response has a 5xx status code
func (o *GetAll4MethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get all4 method not allowed response a status code equal to that given
func (o *GetAll4MethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get all4 method not allowed response
func (o *GetAll4MethodNotAllowed) Code() int {
	return 405
}

func (o *GetAll4MethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workspaces][%d] getAll4MethodNotAllowed %s", 405, payload)
}

func (o *GetAll4MethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workspaces][%d] getAll4MethodNotAllowed %s", 405, payload)
}

func (o *GetAll4MethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAll4MethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAll4InternalServerError creates a GetAll4InternalServerError with default headers values
func NewGetAll4InternalServerError() *GetAll4InternalServerError {
	return &GetAll4InternalServerError{}
}

/*
GetAll4InternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAll4InternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all4 internal server error response has a 2xx status code
func (o *GetAll4InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all4 internal server error response has a 3xx status code
func (o *GetAll4InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all4 internal server error response has a 4xx status code
func (o *GetAll4InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all4 internal server error response has a 5xx status code
func (o *GetAll4InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all4 internal server error response a status code equal to that given
func (o *GetAll4InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all4 internal server error response
func (o *GetAll4InternalServerError) Code() int {
	return 500
}

func (o *GetAll4InternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workspaces][%d] getAll4InternalServerError %s", 500, payload)
}

func (o *GetAll4InternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workspaces][%d] getAll4InternalServerError %s", 500, payload)
}

func (o *GetAll4InternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAll4InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
