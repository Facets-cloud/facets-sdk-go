// Code generated by go-swagger; DO NOT EDIT.

package ui_coder_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateWorkspaceWithExistingBranchReader is a Reader for the CreateWorkspaceWithExistingBranch structure.
type CreateWorkspaceWithExistingBranchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateWorkspaceWithExistingBranchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateWorkspaceWithExistingBranchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateWorkspaceWithExistingBranchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateWorkspaceWithExistingBranchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreateWorkspaceWithExistingBranchMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateWorkspaceWithExistingBranchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/existing-branch] createWorkspaceWithExistingBranch", response, response.Code())
	}
}

// NewCreateWorkspaceWithExistingBranchOK creates a CreateWorkspaceWithExistingBranchOK with default headers values
func NewCreateWorkspaceWithExistingBranchOK() *CreateWorkspaceWithExistingBranchOK {
	return &CreateWorkspaceWithExistingBranchOK{}
}

/*
CreateWorkspaceWithExistingBranchOK describes a response with status code 200, with default header values.

OK
*/
type CreateWorkspaceWithExistingBranchOK struct {
	Payload *models.CoderWorkspaceResponse
}

// IsSuccess returns true when this create workspace with existing branch o k response has a 2xx status code
func (o *CreateWorkspaceWithExistingBranchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create workspace with existing branch o k response has a 3xx status code
func (o *CreateWorkspaceWithExistingBranchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create workspace with existing branch o k response has a 4xx status code
func (o *CreateWorkspaceWithExistingBranchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create workspace with existing branch o k response has a 5xx status code
func (o *CreateWorkspaceWithExistingBranchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create workspace with existing branch o k response a status code equal to that given
func (o *CreateWorkspaceWithExistingBranchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create workspace with existing branch o k response
func (o *CreateWorkspaceWithExistingBranchOK) Code() int {
	return 200
}

func (o *CreateWorkspaceWithExistingBranchOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/existing-branch][%d] createWorkspaceWithExistingBranchOK %s", 200, payload)
}

func (o *CreateWorkspaceWithExistingBranchOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/existing-branch][%d] createWorkspaceWithExistingBranchOK %s", 200, payload)
}

func (o *CreateWorkspaceWithExistingBranchOK) GetPayload() *models.CoderWorkspaceResponse {
	return o.Payload
}

func (o *CreateWorkspaceWithExistingBranchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoderWorkspaceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateWorkspaceWithExistingBranchBadRequest creates a CreateWorkspaceWithExistingBranchBadRequest with default headers values
func NewCreateWorkspaceWithExistingBranchBadRequest() *CreateWorkspaceWithExistingBranchBadRequest {
	return &CreateWorkspaceWithExistingBranchBadRequest{}
}

/*
CreateWorkspaceWithExistingBranchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateWorkspaceWithExistingBranchBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create workspace with existing branch bad request response has a 2xx status code
func (o *CreateWorkspaceWithExistingBranchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create workspace with existing branch bad request response has a 3xx status code
func (o *CreateWorkspaceWithExistingBranchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create workspace with existing branch bad request response has a 4xx status code
func (o *CreateWorkspaceWithExistingBranchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create workspace with existing branch bad request response has a 5xx status code
func (o *CreateWorkspaceWithExistingBranchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create workspace with existing branch bad request response a status code equal to that given
func (o *CreateWorkspaceWithExistingBranchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create workspace with existing branch bad request response
func (o *CreateWorkspaceWithExistingBranchBadRequest) Code() int {
	return 400
}

func (o *CreateWorkspaceWithExistingBranchBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/existing-branch][%d] createWorkspaceWithExistingBranchBadRequest %s", 400, payload)
}

func (o *CreateWorkspaceWithExistingBranchBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/existing-branch][%d] createWorkspaceWithExistingBranchBadRequest %s", 400, payload)
}

func (o *CreateWorkspaceWithExistingBranchBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateWorkspaceWithExistingBranchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateWorkspaceWithExistingBranchNotFound creates a CreateWorkspaceWithExistingBranchNotFound with default headers values
func NewCreateWorkspaceWithExistingBranchNotFound() *CreateWorkspaceWithExistingBranchNotFound {
	return &CreateWorkspaceWithExistingBranchNotFound{}
}

/*
CreateWorkspaceWithExistingBranchNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateWorkspaceWithExistingBranchNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create workspace with existing branch not found response has a 2xx status code
func (o *CreateWorkspaceWithExistingBranchNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create workspace with existing branch not found response has a 3xx status code
func (o *CreateWorkspaceWithExistingBranchNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create workspace with existing branch not found response has a 4xx status code
func (o *CreateWorkspaceWithExistingBranchNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create workspace with existing branch not found response has a 5xx status code
func (o *CreateWorkspaceWithExistingBranchNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create workspace with existing branch not found response a status code equal to that given
func (o *CreateWorkspaceWithExistingBranchNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create workspace with existing branch not found response
func (o *CreateWorkspaceWithExistingBranchNotFound) Code() int {
	return 404
}

func (o *CreateWorkspaceWithExistingBranchNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/existing-branch][%d] createWorkspaceWithExistingBranchNotFound %s", 404, payload)
}

func (o *CreateWorkspaceWithExistingBranchNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/existing-branch][%d] createWorkspaceWithExistingBranchNotFound %s", 404, payload)
}

func (o *CreateWorkspaceWithExistingBranchNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateWorkspaceWithExistingBranchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateWorkspaceWithExistingBranchMethodNotAllowed creates a CreateWorkspaceWithExistingBranchMethodNotAllowed with default headers values
func NewCreateWorkspaceWithExistingBranchMethodNotAllowed() *CreateWorkspaceWithExistingBranchMethodNotAllowed {
	return &CreateWorkspaceWithExistingBranchMethodNotAllowed{}
}

/*
CreateWorkspaceWithExistingBranchMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type CreateWorkspaceWithExistingBranchMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create workspace with existing branch method not allowed response has a 2xx status code
func (o *CreateWorkspaceWithExistingBranchMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create workspace with existing branch method not allowed response has a 3xx status code
func (o *CreateWorkspaceWithExistingBranchMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create workspace with existing branch method not allowed response has a 4xx status code
func (o *CreateWorkspaceWithExistingBranchMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create workspace with existing branch method not allowed response has a 5xx status code
func (o *CreateWorkspaceWithExistingBranchMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this create workspace with existing branch method not allowed response a status code equal to that given
func (o *CreateWorkspaceWithExistingBranchMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the create workspace with existing branch method not allowed response
func (o *CreateWorkspaceWithExistingBranchMethodNotAllowed) Code() int {
	return 405
}

func (o *CreateWorkspaceWithExistingBranchMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/existing-branch][%d] createWorkspaceWithExistingBranchMethodNotAllowed %s", 405, payload)
}

func (o *CreateWorkspaceWithExistingBranchMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/existing-branch][%d] createWorkspaceWithExistingBranchMethodNotAllowed %s", 405, payload)
}

func (o *CreateWorkspaceWithExistingBranchMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateWorkspaceWithExistingBranchMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateWorkspaceWithExistingBranchInternalServerError creates a CreateWorkspaceWithExistingBranchInternalServerError with default headers values
func NewCreateWorkspaceWithExistingBranchInternalServerError() *CreateWorkspaceWithExistingBranchInternalServerError {
	return &CreateWorkspaceWithExistingBranchInternalServerError{}
}

/*
CreateWorkspaceWithExistingBranchInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateWorkspaceWithExistingBranchInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create workspace with existing branch internal server error response has a 2xx status code
func (o *CreateWorkspaceWithExistingBranchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create workspace with existing branch internal server error response has a 3xx status code
func (o *CreateWorkspaceWithExistingBranchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create workspace with existing branch internal server error response has a 4xx status code
func (o *CreateWorkspaceWithExistingBranchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create workspace with existing branch internal server error response has a 5xx status code
func (o *CreateWorkspaceWithExistingBranchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create workspace with existing branch internal server error response a status code equal to that given
func (o *CreateWorkspaceWithExistingBranchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create workspace with existing branch internal server error response
func (o *CreateWorkspaceWithExistingBranchInternalServerError) Code() int {
	return 500
}

func (o *CreateWorkspaceWithExistingBranchInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/existing-branch][%d] createWorkspaceWithExistingBranchInternalServerError %s", 500, payload)
}

func (o *CreateWorkspaceWithExistingBranchInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/existing-branch][%d] createWorkspaceWithExistingBranchInternalServerError %s", 500, payload)
}

func (o *CreateWorkspaceWithExistingBranchInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateWorkspaceWithExistingBranchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
