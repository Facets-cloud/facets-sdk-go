// Code generated by go-swagger; DO NOT EDIT.

package ui_coder_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// IdentifyCoderLaunchEligibleUsingGETReader is a Reader for the IdentifyCoderLaunchEligibleUsingGET structure.
type IdentifyCoderLaunchEligibleUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IdentifyCoderLaunchEligibleUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIdentifyCoderLaunchEligibleUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewIdentifyCoderLaunchEligibleUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewIdentifyCoderLaunchEligibleUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewIdentifyCoderLaunchEligibleUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/coder/stack/{stackName}/coder-eligibility] identifyCoderLaunchEligibleUsingGET", response, response.Code())
	}
}

// NewIdentifyCoderLaunchEligibleUsingGETOK creates a IdentifyCoderLaunchEligibleUsingGETOK with default headers values
func NewIdentifyCoderLaunchEligibleUsingGETOK() *IdentifyCoderLaunchEligibleUsingGETOK {
	return &IdentifyCoderLaunchEligibleUsingGETOK{}
}

/*
IdentifyCoderLaunchEligibleUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type IdentifyCoderLaunchEligibleUsingGETOK struct {
	Payload *models.CoderLaunchEligibilityResponse
}

// IsSuccess returns true when this identify coder launch eligible using g e t o k response has a 2xx status code
func (o *IdentifyCoderLaunchEligibleUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this identify coder launch eligible using g e t o k response has a 3xx status code
func (o *IdentifyCoderLaunchEligibleUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identify coder launch eligible using g e t o k response has a 4xx status code
func (o *IdentifyCoderLaunchEligibleUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this identify coder launch eligible using g e t o k response has a 5xx status code
func (o *IdentifyCoderLaunchEligibleUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this identify coder launch eligible using g e t o k response a status code equal to that given
func (o *IdentifyCoderLaunchEligibleUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the identify coder launch eligible using g e t o k response
func (o *IdentifyCoderLaunchEligibleUsingGETOK) Code() int {
	return 200
}

func (o *IdentifyCoderLaunchEligibleUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/coder-eligibility][%d] identifyCoderLaunchEligibleUsingGETOK %s", 200, payload)
}

func (o *IdentifyCoderLaunchEligibleUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/coder-eligibility][%d] identifyCoderLaunchEligibleUsingGETOK %s", 200, payload)
}

func (o *IdentifyCoderLaunchEligibleUsingGETOK) GetPayload() *models.CoderLaunchEligibilityResponse {
	return o.Payload
}

func (o *IdentifyCoderLaunchEligibleUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CoderLaunchEligibilityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentifyCoderLaunchEligibleUsingGETUnauthorized creates a IdentifyCoderLaunchEligibleUsingGETUnauthorized with default headers values
func NewIdentifyCoderLaunchEligibleUsingGETUnauthorized() *IdentifyCoderLaunchEligibleUsingGETUnauthorized {
	return &IdentifyCoderLaunchEligibleUsingGETUnauthorized{}
}

/*
IdentifyCoderLaunchEligibleUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type IdentifyCoderLaunchEligibleUsingGETUnauthorized struct {
}

// IsSuccess returns true when this identify coder launch eligible using g e t unauthorized response has a 2xx status code
func (o *IdentifyCoderLaunchEligibleUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identify coder launch eligible using g e t unauthorized response has a 3xx status code
func (o *IdentifyCoderLaunchEligibleUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identify coder launch eligible using g e t unauthorized response has a 4xx status code
func (o *IdentifyCoderLaunchEligibleUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this identify coder launch eligible using g e t unauthorized response has a 5xx status code
func (o *IdentifyCoderLaunchEligibleUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this identify coder launch eligible using g e t unauthorized response a status code equal to that given
func (o *IdentifyCoderLaunchEligibleUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the identify coder launch eligible using g e t unauthorized response
func (o *IdentifyCoderLaunchEligibleUsingGETUnauthorized) Code() int {
	return 401
}

func (o *IdentifyCoderLaunchEligibleUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/coder-eligibility][%d] identifyCoderLaunchEligibleUsingGETUnauthorized", 401)
}

func (o *IdentifyCoderLaunchEligibleUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/coder-eligibility][%d] identifyCoderLaunchEligibleUsingGETUnauthorized", 401)
}

func (o *IdentifyCoderLaunchEligibleUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIdentifyCoderLaunchEligibleUsingGETForbidden creates a IdentifyCoderLaunchEligibleUsingGETForbidden with default headers values
func NewIdentifyCoderLaunchEligibleUsingGETForbidden() *IdentifyCoderLaunchEligibleUsingGETForbidden {
	return &IdentifyCoderLaunchEligibleUsingGETForbidden{}
}

/*
IdentifyCoderLaunchEligibleUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type IdentifyCoderLaunchEligibleUsingGETForbidden struct {
}

// IsSuccess returns true when this identify coder launch eligible using g e t forbidden response has a 2xx status code
func (o *IdentifyCoderLaunchEligibleUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identify coder launch eligible using g e t forbidden response has a 3xx status code
func (o *IdentifyCoderLaunchEligibleUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identify coder launch eligible using g e t forbidden response has a 4xx status code
func (o *IdentifyCoderLaunchEligibleUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this identify coder launch eligible using g e t forbidden response has a 5xx status code
func (o *IdentifyCoderLaunchEligibleUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this identify coder launch eligible using g e t forbidden response a status code equal to that given
func (o *IdentifyCoderLaunchEligibleUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the identify coder launch eligible using g e t forbidden response
func (o *IdentifyCoderLaunchEligibleUsingGETForbidden) Code() int {
	return 403
}

func (o *IdentifyCoderLaunchEligibleUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/coder-eligibility][%d] identifyCoderLaunchEligibleUsingGETForbidden", 403)
}

func (o *IdentifyCoderLaunchEligibleUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/coder-eligibility][%d] identifyCoderLaunchEligibleUsingGETForbidden", 403)
}

func (o *IdentifyCoderLaunchEligibleUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIdentifyCoderLaunchEligibleUsingGETNotFound creates a IdentifyCoderLaunchEligibleUsingGETNotFound with default headers values
func NewIdentifyCoderLaunchEligibleUsingGETNotFound() *IdentifyCoderLaunchEligibleUsingGETNotFound {
	return &IdentifyCoderLaunchEligibleUsingGETNotFound{}
}

/*
IdentifyCoderLaunchEligibleUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type IdentifyCoderLaunchEligibleUsingGETNotFound struct {
}

// IsSuccess returns true when this identify coder launch eligible using g e t not found response has a 2xx status code
func (o *IdentifyCoderLaunchEligibleUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identify coder launch eligible using g e t not found response has a 3xx status code
func (o *IdentifyCoderLaunchEligibleUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identify coder launch eligible using g e t not found response has a 4xx status code
func (o *IdentifyCoderLaunchEligibleUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this identify coder launch eligible using g e t not found response has a 5xx status code
func (o *IdentifyCoderLaunchEligibleUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this identify coder launch eligible using g e t not found response a status code equal to that given
func (o *IdentifyCoderLaunchEligibleUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the identify coder launch eligible using g e t not found response
func (o *IdentifyCoderLaunchEligibleUsingGETNotFound) Code() int {
	return 404
}

func (o *IdentifyCoderLaunchEligibleUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/coder-eligibility][%d] identifyCoderLaunchEligibleUsingGETNotFound", 404)
}

func (o *IdentifyCoderLaunchEligibleUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/coder-eligibility][%d] identifyCoderLaunchEligibleUsingGETNotFound", 404)
}

func (o *IdentifyCoderLaunchEligibleUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
