// Code generated by go-swagger; DO NOT EDIT.

package ui_coder_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllUsingGET2Reader is a Reader for the GetAllUsingGET2 structure.
type GetAllUsingGET2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllUsingGET2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllUsingGET2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllUsingGET2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllUsingGET2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllUsingGET2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/coder/stack/{stackName}/workspaces] getAllUsingGET_2", response, response.Code())
	}
}

// NewGetAllUsingGET2OK creates a GetAllUsingGET2OK with default headers values
func NewGetAllUsingGET2OK() *GetAllUsingGET2OK {
	return &GetAllUsingGET2OK{}
}

/*
GetAllUsingGET2OK describes a response with status code 200, with default header values.

OK
*/
type GetAllUsingGET2OK struct {
	Payload []*models.CoderWorkspaceResponse
}

// IsSuccess returns true when this get all using g e t2 o k response has a 2xx status code
func (o *GetAllUsingGET2OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all using g e t2 o k response has a 3xx status code
func (o *GetAllUsingGET2OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all using g e t2 o k response has a 4xx status code
func (o *GetAllUsingGET2OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all using g e t2 o k response has a 5xx status code
func (o *GetAllUsingGET2OK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all using g e t2 o k response a status code equal to that given
func (o *GetAllUsingGET2OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all using g e t2 o k response
func (o *GetAllUsingGET2OK) Code() int {
	return 200
}

func (o *GetAllUsingGET2OK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/workspaces][%d] getAllUsingGET2OK %s", 200, payload)
}

func (o *GetAllUsingGET2OK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/workspaces][%d] getAllUsingGET2OK %s", 200, payload)
}

func (o *GetAllUsingGET2OK) GetPayload() []*models.CoderWorkspaceResponse {
	return o.Payload
}

func (o *GetAllUsingGET2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllUsingGET2Unauthorized creates a GetAllUsingGET2Unauthorized with default headers values
func NewGetAllUsingGET2Unauthorized() *GetAllUsingGET2Unauthorized {
	return &GetAllUsingGET2Unauthorized{}
}

/*
GetAllUsingGET2Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllUsingGET2Unauthorized struct {
}

// IsSuccess returns true when this get all using g e t2 unauthorized response has a 2xx status code
func (o *GetAllUsingGET2Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all using g e t2 unauthorized response has a 3xx status code
func (o *GetAllUsingGET2Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all using g e t2 unauthorized response has a 4xx status code
func (o *GetAllUsingGET2Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all using g e t2 unauthorized response has a 5xx status code
func (o *GetAllUsingGET2Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all using g e t2 unauthorized response a status code equal to that given
func (o *GetAllUsingGET2Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all using g e t2 unauthorized response
func (o *GetAllUsingGET2Unauthorized) Code() int {
	return 401
}

func (o *GetAllUsingGET2Unauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/workspaces][%d] getAllUsingGET2Unauthorized", 401)
}

func (o *GetAllUsingGET2Unauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/workspaces][%d] getAllUsingGET2Unauthorized", 401)
}

func (o *GetAllUsingGET2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllUsingGET2Forbidden creates a GetAllUsingGET2Forbidden with default headers values
func NewGetAllUsingGET2Forbidden() *GetAllUsingGET2Forbidden {
	return &GetAllUsingGET2Forbidden{}
}

/*
GetAllUsingGET2Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllUsingGET2Forbidden struct {
}

// IsSuccess returns true when this get all using g e t2 forbidden response has a 2xx status code
func (o *GetAllUsingGET2Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all using g e t2 forbidden response has a 3xx status code
func (o *GetAllUsingGET2Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all using g e t2 forbidden response has a 4xx status code
func (o *GetAllUsingGET2Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all using g e t2 forbidden response has a 5xx status code
func (o *GetAllUsingGET2Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all using g e t2 forbidden response a status code equal to that given
func (o *GetAllUsingGET2Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all using g e t2 forbidden response
func (o *GetAllUsingGET2Forbidden) Code() int {
	return 403
}

func (o *GetAllUsingGET2Forbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/workspaces][%d] getAllUsingGET2Forbidden", 403)
}

func (o *GetAllUsingGET2Forbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/workspaces][%d] getAllUsingGET2Forbidden", 403)
}

func (o *GetAllUsingGET2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllUsingGET2NotFound creates a GetAllUsingGET2NotFound with default headers values
func NewGetAllUsingGET2NotFound() *GetAllUsingGET2NotFound {
	return &GetAllUsingGET2NotFound{}
}

/*
GetAllUsingGET2NotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllUsingGET2NotFound struct {
}

// IsSuccess returns true when this get all using g e t2 not found response has a 2xx status code
func (o *GetAllUsingGET2NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all using g e t2 not found response has a 3xx status code
func (o *GetAllUsingGET2NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all using g e t2 not found response has a 4xx status code
func (o *GetAllUsingGET2NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all using g e t2 not found response has a 5xx status code
func (o *GetAllUsingGET2NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all using g e t2 not found response a status code equal to that given
func (o *GetAllUsingGET2NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all using g e t2 not found response
func (o *GetAllUsingGET2NotFound) Code() int {
	return 404
}

func (o *GetAllUsingGET2NotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/workspaces][%d] getAllUsingGET2NotFound", 404)
}

func (o *GetAllUsingGET2NotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/coder/stack/{stackName}/workspaces][%d] getAllUsingGET2NotFound", 404)
}

func (o *GetAllUsingGET2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
