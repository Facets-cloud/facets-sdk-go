// Code generated by go-swagger; DO NOT EDIT.

package ui_coder_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// NewCreateWorkspaceWithExistingBranchUsingPOST1Params creates a new CreateWorkspaceWithExistingBranchUsingPOST1Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateWorkspaceWithExistingBranchUsingPOST1Params() *CreateWorkspaceWithExistingBranchUsingPOST1Params {
	return &CreateWorkspaceWithExistingBranchUsingPOST1Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateWorkspaceWithExistingBranchUsingPOST1ParamsWithTimeout creates a new CreateWorkspaceWithExistingBranchUsingPOST1Params object
// with the ability to set a timeout on a request.
func NewCreateWorkspaceWithExistingBranchUsingPOST1ParamsWithTimeout(timeout time.Duration) *CreateWorkspaceWithExistingBranchUsingPOST1Params {
	return &CreateWorkspaceWithExistingBranchUsingPOST1Params{
		timeout: timeout,
	}
}

// NewCreateWorkspaceWithExistingBranchUsingPOST1ParamsWithContext creates a new CreateWorkspaceWithExistingBranchUsingPOST1Params object
// with the ability to set a context for a request.
func NewCreateWorkspaceWithExistingBranchUsingPOST1ParamsWithContext(ctx context.Context) *CreateWorkspaceWithExistingBranchUsingPOST1Params {
	return &CreateWorkspaceWithExistingBranchUsingPOST1Params{
		Context: ctx,
	}
}

// NewCreateWorkspaceWithExistingBranchUsingPOST1ParamsWithHTTPClient creates a new CreateWorkspaceWithExistingBranchUsingPOST1Params object
// with the ability to set a custom HTTPClient for a request.
func NewCreateWorkspaceWithExistingBranchUsingPOST1ParamsWithHTTPClient(client *http.Client) *CreateWorkspaceWithExistingBranchUsingPOST1Params {
	return &CreateWorkspaceWithExistingBranchUsingPOST1Params{
		HTTPClient: client,
	}
}

/*
CreateWorkspaceWithExistingBranchUsingPOST1Params contains all the parameters to send to the API endpoint

	for the create workspace with existing branch using p o s t 1 operation.

	Typically these are written to a http.Request.
*/
type CreateWorkspaceWithExistingBranchUsingPOST1Params struct {

	/* CreateWorkspaceExistingBranchRequest.

	   createWorkspaceExistingBranchRequest
	*/
	CreateWorkspaceExistingBranchRequest *models.CreateWorkspaceExistingBranchRequest

	/* ResourceName.

	   resourceName
	*/
	ResourceName string

	/* ResourceType.

	   resourceType
	*/
	ResourceType string

	/* StackName.

	   stackName
	*/
	StackName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create workspace with existing branch using p o s t 1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) WithDefaults() *CreateWorkspaceWithExistingBranchUsingPOST1Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create workspace with existing branch using p o s t 1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create workspace with existing branch using p o s t 1 params
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) WithTimeout(timeout time.Duration) *CreateWorkspaceWithExistingBranchUsingPOST1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create workspace with existing branch using p o s t 1 params
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create workspace with existing branch using p o s t 1 params
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) WithContext(ctx context.Context) *CreateWorkspaceWithExistingBranchUsingPOST1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create workspace with existing branch using p o s t 1 params
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create workspace with existing branch using p o s t 1 params
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) WithHTTPClient(client *http.Client) *CreateWorkspaceWithExistingBranchUsingPOST1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create workspace with existing branch using p o s t 1 params
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreateWorkspaceExistingBranchRequest adds the createWorkspaceExistingBranchRequest to the create workspace with existing branch using p o s t 1 params
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) WithCreateWorkspaceExistingBranchRequest(createWorkspaceExistingBranchRequest *models.CreateWorkspaceExistingBranchRequest) *CreateWorkspaceWithExistingBranchUsingPOST1Params {
	o.SetCreateWorkspaceExistingBranchRequest(createWorkspaceExistingBranchRequest)
	return o
}

// SetCreateWorkspaceExistingBranchRequest adds the createWorkspaceExistingBranchRequest to the create workspace with existing branch using p o s t 1 params
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) SetCreateWorkspaceExistingBranchRequest(createWorkspaceExistingBranchRequest *models.CreateWorkspaceExistingBranchRequest) {
	o.CreateWorkspaceExistingBranchRequest = createWorkspaceExistingBranchRequest
}

// WithResourceName adds the resourceName to the create workspace with existing branch using p o s t 1 params
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) WithResourceName(resourceName string) *CreateWorkspaceWithExistingBranchUsingPOST1Params {
	o.SetResourceName(resourceName)
	return o
}

// SetResourceName adds the resourceName to the create workspace with existing branch using p o s t 1 params
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) SetResourceName(resourceName string) {
	o.ResourceName = resourceName
}

// WithResourceType adds the resourceType to the create workspace with existing branch using p o s t 1 params
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) WithResourceType(resourceType string) *CreateWorkspaceWithExistingBranchUsingPOST1Params {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the create workspace with existing branch using p o s t 1 params
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) SetResourceType(resourceType string) {
	o.ResourceType = resourceType
}

// WithStackName adds the stackName to the create workspace with existing branch using p o s t 1 params
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) WithStackName(stackName string) *CreateWorkspaceWithExistingBranchUsingPOST1Params {
	o.SetStackName(stackName)
	return o
}

// SetStackName adds the stackName to the create workspace with existing branch using p o s t 1 params
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) SetStackName(stackName string) {
	o.StackName = stackName
}

// WriteToRequest writes these params to a swagger request
func (o *CreateWorkspaceWithExistingBranchUsingPOST1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.CreateWorkspaceExistingBranchRequest != nil {
		if err := r.SetBodyParam(o.CreateWorkspaceExistingBranchRequest); err != nil {
			return err
		}
	}

	// path param resourceName
	if err := r.SetPathParam("resourceName", o.ResourceName); err != nil {
		return err
	}

	// path param resourceType
	if err := r.SetPathParam("resourceType", o.ResourceType); err != nil {
		return err
	}

	// path param stackName
	if err := r.SetPathParam("stackName", o.StackName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
