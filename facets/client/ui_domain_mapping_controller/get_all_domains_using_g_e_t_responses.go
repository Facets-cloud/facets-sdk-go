// Code generated by go-swagger; DO NOT EDIT.

package ui_domain_mapping_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllDomainsUsingGETReader is a Reader for the GetAllDomainsUsingGET structure.
type GetAllDomainsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllDomainsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllDomainsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllDomainsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllDomainsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllDomainsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/domain-mapping/clusterId/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}] getAllDomainsUsingGET", response, response.Code())
	}
}

// NewGetAllDomainsUsingGETOK creates a GetAllDomainsUsingGETOK with default headers values
func NewGetAllDomainsUsingGETOK() *GetAllDomainsUsingGETOK {
	return &GetAllDomainsUsingGETOK{}
}

/*
GetAllDomainsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllDomainsUsingGETOK struct {
	Payload []*models.DomainDTO
}

// IsSuccess returns true when this get all domains using g e t o k response has a 2xx status code
func (o *GetAllDomainsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all domains using g e t o k response has a 3xx status code
func (o *GetAllDomainsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all domains using g e t o k response has a 4xx status code
func (o *GetAllDomainsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all domains using g e t o k response has a 5xx status code
func (o *GetAllDomainsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all domains using g e t o k response a status code equal to that given
func (o *GetAllDomainsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all domains using g e t o k response
func (o *GetAllDomainsUsingGETOK) Code() int {
	return 200
}

func (o *GetAllDomainsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/domain-mapping/clusterId/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}][%d] getAllDomainsUsingGETOK %s", 200, payload)
}

func (o *GetAllDomainsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/domain-mapping/clusterId/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}][%d] getAllDomainsUsingGETOK %s", 200, payload)
}

func (o *GetAllDomainsUsingGETOK) GetPayload() []*models.DomainDTO {
	return o.Payload
}

func (o *GetAllDomainsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllDomainsUsingGETUnauthorized creates a GetAllDomainsUsingGETUnauthorized with default headers values
func NewGetAllDomainsUsingGETUnauthorized() *GetAllDomainsUsingGETUnauthorized {
	return &GetAllDomainsUsingGETUnauthorized{}
}

/*
GetAllDomainsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllDomainsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all domains using g e t unauthorized response has a 2xx status code
func (o *GetAllDomainsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all domains using g e t unauthorized response has a 3xx status code
func (o *GetAllDomainsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all domains using g e t unauthorized response has a 4xx status code
func (o *GetAllDomainsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all domains using g e t unauthorized response has a 5xx status code
func (o *GetAllDomainsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all domains using g e t unauthorized response a status code equal to that given
func (o *GetAllDomainsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all domains using g e t unauthorized response
func (o *GetAllDomainsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllDomainsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/domain-mapping/clusterId/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}][%d] getAllDomainsUsingGETUnauthorized", 401)
}

func (o *GetAllDomainsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/domain-mapping/clusterId/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}][%d] getAllDomainsUsingGETUnauthorized", 401)
}

func (o *GetAllDomainsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllDomainsUsingGETForbidden creates a GetAllDomainsUsingGETForbidden with default headers values
func NewGetAllDomainsUsingGETForbidden() *GetAllDomainsUsingGETForbidden {
	return &GetAllDomainsUsingGETForbidden{}
}

/*
GetAllDomainsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllDomainsUsingGETForbidden struct {
}

// IsSuccess returns true when this get all domains using g e t forbidden response has a 2xx status code
func (o *GetAllDomainsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all domains using g e t forbidden response has a 3xx status code
func (o *GetAllDomainsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all domains using g e t forbidden response has a 4xx status code
func (o *GetAllDomainsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all domains using g e t forbidden response has a 5xx status code
func (o *GetAllDomainsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all domains using g e t forbidden response a status code equal to that given
func (o *GetAllDomainsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all domains using g e t forbidden response
func (o *GetAllDomainsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllDomainsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/domain-mapping/clusterId/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}][%d] getAllDomainsUsingGETForbidden", 403)
}

func (o *GetAllDomainsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/domain-mapping/clusterId/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}][%d] getAllDomainsUsingGETForbidden", 403)
}

func (o *GetAllDomainsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllDomainsUsingGETNotFound creates a GetAllDomainsUsingGETNotFound with default headers values
func NewGetAllDomainsUsingGETNotFound() *GetAllDomainsUsingGETNotFound {
	return &GetAllDomainsUsingGETNotFound{}
}

/*
GetAllDomainsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllDomainsUsingGETNotFound struct {
}

// IsSuccess returns true when this get all domains using g e t not found response has a 2xx status code
func (o *GetAllDomainsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all domains using g e t not found response has a 3xx status code
func (o *GetAllDomainsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all domains using g e t not found response has a 4xx status code
func (o *GetAllDomainsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all domains using g e t not found response has a 5xx status code
func (o *GetAllDomainsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all domains using g e t not found response a status code equal to that given
func (o *GetAllDomainsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all domains using g e t not found response
func (o *GetAllDomainsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllDomainsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/domain-mapping/clusterId/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}][%d] getAllDomainsUsingGETNotFound", 404)
}

func (o *GetAllDomainsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/domain-mapping/clusterId/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}][%d] getAllDomainsUsingGETNotFound", 404)
}

func (o *GetAllDomainsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
