// Code generated by go-swagger; DO NOT EDIT.

package ui_kubernetes_explorer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ListDeploymentsByLabelsReader is a Reader for the ListDeploymentsByLabels structure.
type ListDeploymentsByLabelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListDeploymentsByLabelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListDeploymentsByLabelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListDeploymentsByLabelsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListDeploymentsByLabelsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewListDeploymentsByLabelsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListDeploymentsByLabelsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments] listDeploymentsByLabels", response, response.Code())
	}
}

// NewListDeploymentsByLabelsOK creates a ListDeploymentsByLabelsOK with default headers values
func NewListDeploymentsByLabelsOK() *ListDeploymentsByLabelsOK {
	return &ListDeploymentsByLabelsOK{}
}

/*
ListDeploymentsByLabelsOK describes a response with status code 200, with default header values.

OK
*/
type ListDeploymentsByLabelsOK struct {
	Payload []*models.DeploymentDTO
}

// IsSuccess returns true when this list deployments by labels o k response has a 2xx status code
func (o *ListDeploymentsByLabelsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list deployments by labels o k response has a 3xx status code
func (o *ListDeploymentsByLabelsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list deployments by labels o k response has a 4xx status code
func (o *ListDeploymentsByLabelsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list deployments by labels o k response has a 5xx status code
func (o *ListDeploymentsByLabelsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list deployments by labels o k response a status code equal to that given
func (o *ListDeploymentsByLabelsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list deployments by labels o k response
func (o *ListDeploymentsByLabelsOK) Code() int {
	return 200
}

func (o *ListDeploymentsByLabelsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments][%d] listDeploymentsByLabelsOK %s", 200, payload)
}

func (o *ListDeploymentsByLabelsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments][%d] listDeploymentsByLabelsOK %s", 200, payload)
}

func (o *ListDeploymentsByLabelsOK) GetPayload() []*models.DeploymentDTO {
	return o.Payload
}

func (o *ListDeploymentsByLabelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDeploymentsByLabelsBadRequest creates a ListDeploymentsByLabelsBadRequest with default headers values
func NewListDeploymentsByLabelsBadRequest() *ListDeploymentsByLabelsBadRequest {
	return &ListDeploymentsByLabelsBadRequest{}
}

/*
ListDeploymentsByLabelsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ListDeploymentsByLabelsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this list deployments by labels bad request response has a 2xx status code
func (o *ListDeploymentsByLabelsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list deployments by labels bad request response has a 3xx status code
func (o *ListDeploymentsByLabelsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list deployments by labels bad request response has a 4xx status code
func (o *ListDeploymentsByLabelsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list deployments by labels bad request response has a 5xx status code
func (o *ListDeploymentsByLabelsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list deployments by labels bad request response a status code equal to that given
func (o *ListDeploymentsByLabelsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list deployments by labels bad request response
func (o *ListDeploymentsByLabelsBadRequest) Code() int {
	return 400
}

func (o *ListDeploymentsByLabelsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments][%d] listDeploymentsByLabelsBadRequest %s", 400, payload)
}

func (o *ListDeploymentsByLabelsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments][%d] listDeploymentsByLabelsBadRequest %s", 400, payload)
}

func (o *ListDeploymentsByLabelsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ListDeploymentsByLabelsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDeploymentsByLabelsNotFound creates a ListDeploymentsByLabelsNotFound with default headers values
func NewListDeploymentsByLabelsNotFound() *ListDeploymentsByLabelsNotFound {
	return &ListDeploymentsByLabelsNotFound{}
}

/*
ListDeploymentsByLabelsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ListDeploymentsByLabelsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this list deployments by labels not found response has a 2xx status code
func (o *ListDeploymentsByLabelsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list deployments by labels not found response has a 3xx status code
func (o *ListDeploymentsByLabelsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list deployments by labels not found response has a 4xx status code
func (o *ListDeploymentsByLabelsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list deployments by labels not found response has a 5xx status code
func (o *ListDeploymentsByLabelsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list deployments by labels not found response a status code equal to that given
func (o *ListDeploymentsByLabelsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list deployments by labels not found response
func (o *ListDeploymentsByLabelsNotFound) Code() int {
	return 404
}

func (o *ListDeploymentsByLabelsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments][%d] listDeploymentsByLabelsNotFound %s", 404, payload)
}

func (o *ListDeploymentsByLabelsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments][%d] listDeploymentsByLabelsNotFound %s", 404, payload)
}

func (o *ListDeploymentsByLabelsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ListDeploymentsByLabelsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDeploymentsByLabelsMethodNotAllowed creates a ListDeploymentsByLabelsMethodNotAllowed with default headers values
func NewListDeploymentsByLabelsMethodNotAllowed() *ListDeploymentsByLabelsMethodNotAllowed {
	return &ListDeploymentsByLabelsMethodNotAllowed{}
}

/*
ListDeploymentsByLabelsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ListDeploymentsByLabelsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this list deployments by labels method not allowed response has a 2xx status code
func (o *ListDeploymentsByLabelsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list deployments by labels method not allowed response has a 3xx status code
func (o *ListDeploymentsByLabelsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list deployments by labels method not allowed response has a 4xx status code
func (o *ListDeploymentsByLabelsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this list deployments by labels method not allowed response has a 5xx status code
func (o *ListDeploymentsByLabelsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this list deployments by labels method not allowed response a status code equal to that given
func (o *ListDeploymentsByLabelsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the list deployments by labels method not allowed response
func (o *ListDeploymentsByLabelsMethodNotAllowed) Code() int {
	return 405
}

func (o *ListDeploymentsByLabelsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments][%d] listDeploymentsByLabelsMethodNotAllowed %s", 405, payload)
}

func (o *ListDeploymentsByLabelsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments][%d] listDeploymentsByLabelsMethodNotAllowed %s", 405, payload)
}

func (o *ListDeploymentsByLabelsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ListDeploymentsByLabelsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDeploymentsByLabelsInternalServerError creates a ListDeploymentsByLabelsInternalServerError with default headers values
func NewListDeploymentsByLabelsInternalServerError() *ListDeploymentsByLabelsInternalServerError {
	return &ListDeploymentsByLabelsInternalServerError{}
}

/*
ListDeploymentsByLabelsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ListDeploymentsByLabelsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this list deployments by labels internal server error response has a 2xx status code
func (o *ListDeploymentsByLabelsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list deployments by labels internal server error response has a 3xx status code
func (o *ListDeploymentsByLabelsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list deployments by labels internal server error response has a 4xx status code
func (o *ListDeploymentsByLabelsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list deployments by labels internal server error response has a 5xx status code
func (o *ListDeploymentsByLabelsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list deployments by labels internal server error response a status code equal to that given
func (o *ListDeploymentsByLabelsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list deployments by labels internal server error response
func (o *ListDeploymentsByLabelsInternalServerError) Code() int {
	return 500
}

func (o *ListDeploymentsByLabelsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments][%d] listDeploymentsByLabelsInternalServerError %s", 500, payload)
}

func (o *ListDeploymentsByLabelsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments][%d] listDeploymentsByLabelsInternalServerError %s", 500, payload)
}

func (o *ListDeploymentsByLabelsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ListDeploymentsByLabelsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
