// Code generated by go-swagger; DO NOT EDIT.

package ui_kubernetes_explorer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ListPVByLabelsUsingGETReader is a Reader for the ListPVByLabelsUsingGET structure.
type ListPVByLabelsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPVByLabelsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListPVByLabelsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListPVByLabelsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListPVByLabelsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListPVByLabelsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/pv] listPVByLabelsUsingGET", response, response.Code())
	}
}

// NewListPVByLabelsUsingGETOK creates a ListPVByLabelsUsingGETOK with default headers values
func NewListPVByLabelsUsingGETOK() *ListPVByLabelsUsingGETOK {
	return &ListPVByLabelsUsingGETOK{}
}

/*
ListPVByLabelsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type ListPVByLabelsUsingGETOK struct {
	Payload []*models.PersistentVolumeDTO
}

// IsSuccess returns true when this list p v by labels using g e t o k response has a 2xx status code
func (o *ListPVByLabelsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list p v by labels using g e t o k response has a 3xx status code
func (o *ListPVByLabelsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list p v by labels using g e t o k response has a 4xx status code
func (o *ListPVByLabelsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list p v by labels using g e t o k response has a 5xx status code
func (o *ListPVByLabelsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list p v by labels using g e t o k response a status code equal to that given
func (o *ListPVByLabelsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list p v by labels using g e t o k response
func (o *ListPVByLabelsUsingGETOK) Code() int {
	return 200
}

func (o *ListPVByLabelsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/pv][%d] listPVByLabelsUsingGETOK %s", 200, payload)
}

func (o *ListPVByLabelsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/pv][%d] listPVByLabelsUsingGETOK %s", 200, payload)
}

func (o *ListPVByLabelsUsingGETOK) GetPayload() []*models.PersistentVolumeDTO {
	return o.Payload
}

func (o *ListPVByLabelsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPVByLabelsUsingGETUnauthorized creates a ListPVByLabelsUsingGETUnauthorized with default headers values
func NewListPVByLabelsUsingGETUnauthorized() *ListPVByLabelsUsingGETUnauthorized {
	return &ListPVByLabelsUsingGETUnauthorized{}
}

/*
ListPVByLabelsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListPVByLabelsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this list p v by labels using g e t unauthorized response has a 2xx status code
func (o *ListPVByLabelsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list p v by labels using g e t unauthorized response has a 3xx status code
func (o *ListPVByLabelsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list p v by labels using g e t unauthorized response has a 4xx status code
func (o *ListPVByLabelsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list p v by labels using g e t unauthorized response has a 5xx status code
func (o *ListPVByLabelsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list p v by labels using g e t unauthorized response a status code equal to that given
func (o *ListPVByLabelsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list p v by labels using g e t unauthorized response
func (o *ListPVByLabelsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *ListPVByLabelsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/pv][%d] listPVByLabelsUsingGETUnauthorized", 401)
}

func (o *ListPVByLabelsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/pv][%d] listPVByLabelsUsingGETUnauthorized", 401)
}

func (o *ListPVByLabelsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListPVByLabelsUsingGETForbidden creates a ListPVByLabelsUsingGETForbidden with default headers values
func NewListPVByLabelsUsingGETForbidden() *ListPVByLabelsUsingGETForbidden {
	return &ListPVByLabelsUsingGETForbidden{}
}

/*
ListPVByLabelsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListPVByLabelsUsingGETForbidden struct {
}

// IsSuccess returns true when this list p v by labels using g e t forbidden response has a 2xx status code
func (o *ListPVByLabelsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list p v by labels using g e t forbidden response has a 3xx status code
func (o *ListPVByLabelsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list p v by labels using g e t forbidden response has a 4xx status code
func (o *ListPVByLabelsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list p v by labels using g e t forbidden response has a 5xx status code
func (o *ListPVByLabelsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list p v by labels using g e t forbidden response a status code equal to that given
func (o *ListPVByLabelsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list p v by labels using g e t forbidden response
func (o *ListPVByLabelsUsingGETForbidden) Code() int {
	return 403
}

func (o *ListPVByLabelsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/pv][%d] listPVByLabelsUsingGETForbidden", 403)
}

func (o *ListPVByLabelsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/pv][%d] listPVByLabelsUsingGETForbidden", 403)
}

func (o *ListPVByLabelsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListPVByLabelsUsingGETNotFound creates a ListPVByLabelsUsingGETNotFound with default headers values
func NewListPVByLabelsUsingGETNotFound() *ListPVByLabelsUsingGETNotFound {
	return &ListPVByLabelsUsingGETNotFound{}
}

/*
ListPVByLabelsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ListPVByLabelsUsingGETNotFound struct {
}

// IsSuccess returns true when this list p v by labels using g e t not found response has a 2xx status code
func (o *ListPVByLabelsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list p v by labels using g e t not found response has a 3xx status code
func (o *ListPVByLabelsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list p v by labels using g e t not found response has a 4xx status code
func (o *ListPVByLabelsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list p v by labels using g e t not found response has a 5xx status code
func (o *ListPVByLabelsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list p v by labels using g e t not found response a status code equal to that given
func (o *ListPVByLabelsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list p v by labels using g e t not found response
func (o *ListPVByLabelsUsingGETNotFound) Code() int {
	return 404
}

func (o *ListPVByLabelsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/pv][%d] listPVByLabelsUsingGETNotFound", 404)
}

func (o *ListPVByLabelsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/pv][%d] listPVByLabelsUsingGETNotFound", 404)
}

func (o *ListPVByLabelsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
