// Code generated by go-swagger; DO NOT EDIT.

package ui_kubernetes_explorer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui kubernetes explorer controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui kubernetes explorer controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui kubernetes explorer controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui kubernetes explorer controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptTextPlain sets the Accept header to "text/plain".
func WithAcceptTextPlain(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/plain"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	ContainerLogsUsingGET(params *ContainerLogsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ContainerLogsUsingGETOK, error)

	GetAllIngressRulesForClusterUsingGET(params *GetAllIngressRulesForClusterUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIngressRulesForClusterUsingGETOK, error)

	GetConfigMapDataUsingGET(params *GetConfigMapDataUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConfigMapDataUsingGETOK, error)

	GetManifestUsingGET(params *GetManifestUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetManifestUsingGETOK, error)

	GetPodsForDeploymentUsingGET(params *GetPodsForDeploymentUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPodsForDeploymentUsingGETOK, error)

	GetSecretsDataUsingGET(params *GetSecretsDataUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSecretsDataUsingGETOK, error)

	ListConfigMapByLabelsUsingGET(params *ListConfigMapByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListConfigMapByLabelsUsingGETOK, error)

	ListContainersInPodUsingGET(params *ListContainersInPodUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListContainersInPodUsingGETOK, error)

	ListContainersInPodV2UsingGET(params *ListContainersInPodV2UsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListContainersInPodV2UsingGETOK, error)

	ListCronJobByLabelsUsingGET(params *ListCronJobByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCronJobByLabelsUsingGETOK, error)

	ListDaemonSetsByLabelsUsingGET(params *ListDaemonSetsByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListDaemonSetsByLabelsUsingGETOK, error)

	ListDeploymentsByLabelsUsingGET(params *ListDeploymentsByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListDeploymentsByLabelsUsingGETOK, error)

	ListEventsByK8sResourceUsingGET(params *ListEventsByK8sResourceUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEventsByK8sResourceUsingGETOK, error)

	ListHpaByLabelsUsingGET(params *ListHpaByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListHpaByLabelsUsingGETOK, error)

	ListIngressesByLabelsUsingGET(params *ListIngressesByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIngressesByLabelsUsingGETOK, error)

	ListJobsByLabelsUsingGET(params *ListJobsByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListJobsByLabelsUsingGETOK, error)

	ListPVByLabelsUsingGET(params *ListPVByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPVByLabelsUsingGETOK, error)

	ListPVCByLabelsUsingGET(params *ListPVCByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPVCByLabelsUsingGETOK, error)

	ListPodsByLabelsUsingGET(params *ListPodsByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPodsByLabelsUsingGETOK, error)

	ListReplicasetsByLabelsUsingGET(params *ListReplicasetsByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListReplicasetsByLabelsUsingGETOK, error)

	ListSecretsByLabelsUsingGET(params *ListSecretsByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSecretsByLabelsUsingGETOK, error)

	ListServicesByLabelsUsingGET(params *ListServicesByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServicesByLabelsUsingGETOK, error)

	ListStatefulsetsLabelsByLabelsUsingGET(params *ListStatefulsetsLabelsByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListStatefulsetsLabelsByLabelsUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ContainerLogsUsingGET containers logs
*/
func (a *Client) ContainerLogsUsingGET(params *ContainerLogsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ContainerLogsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerLogsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "containerLogsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/pods/{podName}/{containerName}/logs",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContainerLogsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerLogsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for containerLogsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllIngressRulesForClusterUsingGET gets all ingress rules for cluster
*/
func (a *Client) GetAllIngressRulesForClusterUsingGET(params *GetAllIngressRulesForClusterUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIngressRulesForClusterUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllIngressRulesForClusterUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllIngressRulesForClusterUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingress-rules",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllIngressRulesForClusterUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllIngressRulesForClusterUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllIngressRulesForClusterUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConfigMapDataUsingGET gets config map data
*/
func (a *Client) GetConfigMapDataUsingGET(params *GetConfigMapDataUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConfigMapDataUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigMapDataUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getConfigMapDataUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/configMaps/{configMapName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigMapDataUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigMapDataUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConfigMapDataUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetManifestUsingGET gets manifest
*/
func (a *Client) GetManifestUsingGET(params *GetManifestUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetManifestUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetManifestUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getManifestUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/{k8sResourceType}/{k8sResourceName}/manifest",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetManifestUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetManifestUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getManifestUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPodsForDeploymentUsingGET gets pods for deployment
*/
func (a *Client) GetPodsForDeploymentUsingGET(params *GetPodsForDeploymentUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPodsForDeploymentUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPodsForDeploymentUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPodsForDeploymentUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments/{deploymentName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPodsForDeploymentUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPodsForDeploymentUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPodsForDeploymentUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSecretsDataUsingGET gets secrets data
*/
func (a *Client) GetSecretsDataUsingGET(params *GetSecretsDataUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSecretsDataUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecretsDataUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSecretsDataUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/secrets/{secretName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecretsDataUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecretsDataUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSecretsDataUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListConfigMapByLabelsUsingGET lists config map by labels
*/
func (a *Client) ListConfigMapByLabelsUsingGET(params *ListConfigMapByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListConfigMapByLabelsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListConfigMapByLabelsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listConfigMapByLabelsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/configMaps",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListConfigMapByLabelsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListConfigMapByLabelsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listConfigMapByLabelsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListContainersInPodUsingGET lists containers in pod
*/
func (a *Client) ListContainersInPodUsingGET(params *ListContainersInPodUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListContainersInPodUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListContainersInPodUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listContainersInPodUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/{podName}/containers",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListContainersInPodUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListContainersInPodUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listContainersInPodUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListContainersInPodV2UsingGET lists containers in pod v2
*/
func (a *Client) ListContainersInPodV2UsingGET(params *ListContainersInPodV2UsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListContainersInPodV2UsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListContainersInPodV2UsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listContainersInPodV2UsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/{podName}/v2/containers",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListContainersInPodV2UsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListContainersInPodV2UsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listContainersInPodV2UsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListCronJobByLabelsUsingGET lists cron job by labels
*/
func (a *Client) ListCronJobByLabelsUsingGET(params *ListCronJobByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCronJobByLabelsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCronJobByLabelsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCronJobByLabelsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/cronJobs",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCronJobByLabelsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCronJobByLabelsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCronJobByLabelsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListDaemonSetsByLabelsUsingGET lists daemon sets by labels
*/
func (a *Client) ListDaemonSetsByLabelsUsingGET(params *ListDaemonSetsByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListDaemonSetsByLabelsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDaemonSetsByLabelsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listDaemonSetsByLabelsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/daemonSets",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDaemonSetsByLabelsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDaemonSetsByLabelsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listDaemonSetsByLabelsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListDeploymentsByLabelsUsingGET lists deployments by labels
*/
func (a *Client) ListDeploymentsByLabelsUsingGET(params *ListDeploymentsByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListDeploymentsByLabelsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDeploymentsByLabelsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listDeploymentsByLabelsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDeploymentsByLabelsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDeploymentsByLabelsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listDeploymentsByLabelsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListEventsByK8sResourceUsingGET lists events by k8s resource
*/
func (a *Client) ListEventsByK8sResourceUsingGET(params *ListEventsByK8sResourceUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEventsByK8sResourceUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventsByK8sResourceUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listEventsByK8sResourceUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/{k8sResourceType}/{k8sResourceName}/events",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListEventsByK8sResourceUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEventsByK8sResourceUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listEventsByK8sResourceUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListHpaByLabelsUsingGET lists hpa by labels
*/
func (a *Client) ListHpaByLabelsUsingGET(params *ListHpaByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListHpaByLabelsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListHpaByLabelsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listHpaByLabelsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/hpa",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListHpaByLabelsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListHpaByLabelsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listHpaByLabelsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIngressesByLabelsUsingGET lists ingresses by labels
*/
func (a *Client) ListIngressesByLabelsUsingGET(params *ListIngressesByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIngressesByLabelsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIngressesByLabelsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listIngressesByLabelsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingresses",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListIngressesByLabelsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIngressesByLabelsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listIngressesByLabelsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListJobsByLabelsUsingGET lists jobs by labels
*/
func (a *Client) ListJobsByLabelsUsingGET(params *ListJobsByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListJobsByLabelsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListJobsByLabelsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listJobsByLabelsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/jobs",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListJobsByLabelsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListJobsByLabelsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listJobsByLabelsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPVByLabelsUsingGET lists p v by labels
*/
func (a *Client) ListPVByLabelsUsingGET(params *ListPVByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPVByLabelsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPVByLabelsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPVByLabelsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/pv",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPVByLabelsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPVByLabelsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPVByLabelsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPVCByLabelsUsingGET lists p v c by labels
*/
func (a *Client) ListPVCByLabelsUsingGET(params *ListPVCByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPVCByLabelsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPVCByLabelsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPVCByLabelsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/pvc",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPVCByLabelsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPVCByLabelsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPVCByLabelsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPodsByLabelsUsingGET lists pods by labels
*/
func (a *Client) ListPodsByLabelsUsingGET(params *ListPodsByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPodsByLabelsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPodsByLabelsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPodsByLabelsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/pods",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPodsByLabelsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPodsByLabelsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPodsByLabelsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListReplicasetsByLabelsUsingGET lists replicasets by labels
*/
func (a *Client) ListReplicasetsByLabelsUsingGET(params *ListReplicasetsByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListReplicasetsByLabelsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListReplicasetsByLabelsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listReplicasetsByLabelsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/replicasets",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListReplicasetsByLabelsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListReplicasetsByLabelsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listReplicasetsByLabelsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSecretsByLabelsUsingGET lists secrets by labels
*/
func (a *Client) ListSecretsByLabelsUsingGET(params *ListSecretsByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSecretsByLabelsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSecretsByLabelsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSecretsByLabelsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/secrets",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSecretsByLabelsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSecretsByLabelsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSecretsByLabelsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListServicesByLabelsUsingGET lists services by labels
*/
func (a *Client) ListServicesByLabelsUsingGET(params *ListServicesByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServicesByLabelsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServicesByLabelsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listServicesByLabelsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/services",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListServicesByLabelsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServicesByLabelsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listServicesByLabelsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListStatefulsetsLabelsByLabelsUsingGET lists statefulsets labels by labels
*/
func (a *Client) ListStatefulsetsLabelsByLabelsUsingGET(params *ListStatefulsetsLabelsByLabelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListStatefulsetsLabelsByLabelsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStatefulsetsLabelsByLabelsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listStatefulsetsLabelsByLabelsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/statefulsets",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListStatefulsetsLabelsByLabelsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStatefulsetsLabelsByLabelsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listStatefulsetsLabelsByLabelsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
