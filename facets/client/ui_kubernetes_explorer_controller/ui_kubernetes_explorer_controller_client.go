// Code generated by go-swagger; DO NOT EDIT.

package ui_kubernetes_explorer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui kubernetes explorer controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui kubernetes explorer controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui kubernetes explorer controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui kubernetes explorer controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ContainerLogs(params *ContainerLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ContainerLogsOK, error)

	GetAllIngressRulesForCluster(params *GetAllIngressRulesForClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIngressRulesForClusterOK, error)

	GetConfigMapData(params *GetConfigMapDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConfigMapDataOK, error)

	GetManifest(params *GetManifestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetManifestOK, error)

	GetPodsForDeployment(params *GetPodsForDeploymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPodsForDeploymentOK, error)

	GetSecretsData(params *GetSecretsDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSecretsDataOK, error)

	ListConfigMapByLabels(params *ListConfigMapByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListConfigMapByLabelsOK, error)

	ListContainersInPod(params *ListContainersInPodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListContainersInPodOK, error)

	ListContainersInPodV2(params *ListContainersInPodV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListContainersInPodV2OK, error)

	ListCronJobByLabels(params *ListCronJobByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCronJobByLabelsOK, error)

	ListDaemonSetsByLabels(params *ListDaemonSetsByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListDaemonSetsByLabelsOK, error)

	ListDeploymentsByLabels(params *ListDeploymentsByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListDeploymentsByLabelsOK, error)

	ListEventsByK8sResource(params *ListEventsByK8sResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEventsByK8sResourceOK, error)

	ListHpaByLabels(params *ListHpaByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListHpaByLabelsOK, error)

	ListIngressesByLabels(params *ListIngressesByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIngressesByLabelsOK, error)

	ListJobsByLabels(params *ListJobsByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListJobsByLabelsOK, error)

	ListPVByLabels(params *ListPVByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPVByLabelsOK, error)

	ListPVCByLabels(params *ListPVCByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPVCByLabelsOK, error)

	ListPodsByLabels(params *ListPodsByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPodsByLabelsOK, error)

	ListReplicasetsByLabels(params *ListReplicasetsByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListReplicasetsByLabelsOK, error)

	ListSecretsByLabels(params *ListSecretsByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSecretsByLabelsOK, error)

	ListServicesByLabels(params *ListServicesByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServicesByLabelsOK, error)

	ListStatefulsetsLabelsByLabels(params *ListStatefulsetsLabelsByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListStatefulsetsLabelsByLabelsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ContainerLogs container logs API
*/
func (a *Client) ContainerLogs(params *ContainerLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ContainerLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "containerLogs",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/pods/{podName}/{containerName}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContainerLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for containerLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllIngressRulesForCluster get all ingress rules for cluster API
*/
func (a *Client) GetAllIngressRulesForCluster(params *GetAllIngressRulesForClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIngressRulesForClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllIngressRulesForClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllIngressRulesForCluster",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingress-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllIngressRulesForClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllIngressRulesForClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllIngressRulesForCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConfigMapData get config map data API
*/
func (a *Client) GetConfigMapData(params *GetConfigMapDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConfigMapDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigMapDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getConfigMapData",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/configMaps/{configMapName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigMapDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigMapDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConfigMapData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetManifest get manifest API
*/
func (a *Client) GetManifest(params *GetManifestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetManifestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetManifestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getManifest",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/{k8sResourceType}/{k8sResourceName}/manifest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetManifestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetManifestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getManifest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPodsForDeployment get pods for deployment API
*/
func (a *Client) GetPodsForDeployment(params *GetPodsForDeploymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPodsForDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPodsForDeploymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPodsForDeployment",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments/{deploymentName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPodsForDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPodsForDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPodsForDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSecretsData get secrets data API
*/
func (a *Client) GetSecretsData(params *GetSecretsDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSecretsDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecretsDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSecretsData",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/secrets/{secretName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecretsDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecretsDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSecretsData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListConfigMapByLabels list config map by labels API
*/
func (a *Client) ListConfigMapByLabels(params *ListConfigMapByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListConfigMapByLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListConfigMapByLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listConfigMapByLabels",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/configMaps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListConfigMapByLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListConfigMapByLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listConfigMapByLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListContainersInPod list containers in pod API
*/
func (a *Client) ListContainersInPod(params *ListContainersInPodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListContainersInPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListContainersInPodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listContainersInPod",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/{podName}/containers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListContainersInPodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListContainersInPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listContainersInPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListContainersInPodV2 list containers in pod v2 API
*/
func (a *Client) ListContainersInPodV2(params *ListContainersInPodV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListContainersInPodV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListContainersInPodV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "listContainersInPodV2",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/{podName}/v2/containers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListContainersInPodV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListContainersInPodV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listContainersInPodV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListCronJobByLabels list cron job by labels API
*/
func (a *Client) ListCronJobByLabels(params *ListCronJobByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCronJobByLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCronJobByLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCronJobByLabels",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/cronJobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCronJobByLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCronJobByLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCronJobByLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListDaemonSetsByLabels list daemon sets by labels API
*/
func (a *Client) ListDaemonSetsByLabels(params *ListDaemonSetsByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListDaemonSetsByLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDaemonSetsByLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listDaemonSetsByLabels",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/daemonSets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDaemonSetsByLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDaemonSetsByLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listDaemonSetsByLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListDeploymentsByLabels list deployments by labels API
*/
func (a *Client) ListDeploymentsByLabels(params *ListDeploymentsByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListDeploymentsByLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDeploymentsByLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listDeploymentsByLabels",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDeploymentsByLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDeploymentsByLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listDeploymentsByLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListEventsByK8sResource list events by k8s resource API
*/
func (a *Client) ListEventsByK8sResource(params *ListEventsByK8sResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEventsByK8sResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventsByK8sResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listEventsByK8sResource",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/{k8sResourceType}/{k8sResourceName}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListEventsByK8sResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEventsByK8sResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listEventsByK8sResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListHpaByLabels list hpa by labels API
*/
func (a *Client) ListHpaByLabels(params *ListHpaByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListHpaByLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListHpaByLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listHpaByLabels",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/hpa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListHpaByLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListHpaByLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listHpaByLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIngressesByLabels list ingresses by labels API
*/
func (a *Client) ListIngressesByLabels(params *ListIngressesByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIngressesByLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIngressesByLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listIngressesByLabels",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListIngressesByLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIngressesByLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listIngressesByLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListJobsByLabels list jobs by labels API
*/
func (a *Client) ListJobsByLabels(params *ListJobsByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListJobsByLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListJobsByLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listJobsByLabels",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListJobsByLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListJobsByLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listJobsByLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPVByLabels list p v by labels API
*/
func (a *Client) ListPVByLabels(params *ListPVByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPVByLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPVByLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPVByLabels",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/pv",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPVByLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPVByLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPVByLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPVCByLabels list p v c by labels API
*/
func (a *Client) ListPVCByLabels(params *ListPVCByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPVCByLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPVCByLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPVCByLabels",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/pvc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPVCByLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPVCByLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPVCByLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPodsByLabels list pods by labels API
*/
func (a *Client) ListPodsByLabels(params *ListPodsByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPodsByLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPodsByLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPodsByLabels",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/pods",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPodsByLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPodsByLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPodsByLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListReplicasetsByLabels list replicasets by labels API
*/
func (a *Client) ListReplicasetsByLabels(params *ListReplicasetsByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListReplicasetsByLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListReplicasetsByLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listReplicasetsByLabels",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/replicasets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListReplicasetsByLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListReplicasetsByLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listReplicasetsByLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSecretsByLabels list secrets by labels API
*/
func (a *Client) ListSecretsByLabels(params *ListSecretsByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSecretsByLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSecretsByLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSecretsByLabels",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSecretsByLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSecretsByLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSecretsByLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListServicesByLabels list services by labels API
*/
func (a *Client) ListServicesByLabels(params *ListServicesByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServicesByLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServicesByLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listServicesByLabels",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListServicesByLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServicesByLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listServicesByLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListStatefulsetsLabelsByLabels list statefulsets labels by labels API
*/
func (a *Client) ListStatefulsetsLabelsByLabels(params *ListStatefulsetsLabelsByLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListStatefulsetsLabelsByLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStatefulsetsLabelsByLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listStatefulsetsLabelsByLabels",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-explorer/statefulsets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListStatefulsetsLabelsByLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStatefulsetsLabelsByLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listStatefulsetsLabelsByLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
