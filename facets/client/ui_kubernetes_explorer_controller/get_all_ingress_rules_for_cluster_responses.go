// Code generated by go-swagger; DO NOT EDIT.

package ui_kubernetes_explorer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllIngressRulesForClusterReader is a Reader for the GetAllIngressRulesForCluster structure.
type GetAllIngressRulesForClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllIngressRulesForClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllIngressRulesForClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllIngressRulesForClusterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllIngressRulesForClusterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAllIngressRulesForClusterMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllIngressRulesForClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingress-rules] getAllIngressRulesForCluster", response, response.Code())
	}
}

// NewGetAllIngressRulesForClusterOK creates a GetAllIngressRulesForClusterOK with default headers values
func NewGetAllIngressRulesForClusterOK() *GetAllIngressRulesForClusterOK {
	return &GetAllIngressRulesForClusterOK{}
}

/*
GetAllIngressRulesForClusterOK describes a response with status code 200, with default header values.

OK
*/
type GetAllIngressRulesForClusterOK struct {
	Payload []*models.IngressRulesDTO
}

// IsSuccess returns true when this get all ingress rules for cluster o k response has a 2xx status code
func (o *GetAllIngressRulesForClusterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all ingress rules for cluster o k response has a 3xx status code
func (o *GetAllIngressRulesForClusterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all ingress rules for cluster o k response has a 4xx status code
func (o *GetAllIngressRulesForClusterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all ingress rules for cluster o k response has a 5xx status code
func (o *GetAllIngressRulesForClusterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all ingress rules for cluster o k response a status code equal to that given
func (o *GetAllIngressRulesForClusterOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all ingress rules for cluster o k response
func (o *GetAllIngressRulesForClusterOK) Code() int {
	return 200
}

func (o *GetAllIngressRulesForClusterOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingress-rules][%d] getAllIngressRulesForClusterOK %s", 200, payload)
}

func (o *GetAllIngressRulesForClusterOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingress-rules][%d] getAllIngressRulesForClusterOK %s", 200, payload)
}

func (o *GetAllIngressRulesForClusterOK) GetPayload() []*models.IngressRulesDTO {
	return o.Payload
}

func (o *GetAllIngressRulesForClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllIngressRulesForClusterBadRequest creates a GetAllIngressRulesForClusterBadRequest with default headers values
func NewGetAllIngressRulesForClusterBadRequest() *GetAllIngressRulesForClusterBadRequest {
	return &GetAllIngressRulesForClusterBadRequest{}
}

/*
GetAllIngressRulesForClusterBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAllIngressRulesForClusterBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all ingress rules for cluster bad request response has a 2xx status code
func (o *GetAllIngressRulesForClusterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all ingress rules for cluster bad request response has a 3xx status code
func (o *GetAllIngressRulesForClusterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all ingress rules for cluster bad request response has a 4xx status code
func (o *GetAllIngressRulesForClusterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all ingress rules for cluster bad request response has a 5xx status code
func (o *GetAllIngressRulesForClusterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all ingress rules for cluster bad request response a status code equal to that given
func (o *GetAllIngressRulesForClusterBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all ingress rules for cluster bad request response
func (o *GetAllIngressRulesForClusterBadRequest) Code() int {
	return 400
}

func (o *GetAllIngressRulesForClusterBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingress-rules][%d] getAllIngressRulesForClusterBadRequest %s", 400, payload)
}

func (o *GetAllIngressRulesForClusterBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingress-rules][%d] getAllIngressRulesForClusterBadRequest %s", 400, payload)
}

func (o *GetAllIngressRulesForClusterBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllIngressRulesForClusterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllIngressRulesForClusterNotFound creates a GetAllIngressRulesForClusterNotFound with default headers values
func NewGetAllIngressRulesForClusterNotFound() *GetAllIngressRulesForClusterNotFound {
	return &GetAllIngressRulesForClusterNotFound{}
}

/*
GetAllIngressRulesForClusterNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllIngressRulesForClusterNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all ingress rules for cluster not found response has a 2xx status code
func (o *GetAllIngressRulesForClusterNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all ingress rules for cluster not found response has a 3xx status code
func (o *GetAllIngressRulesForClusterNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all ingress rules for cluster not found response has a 4xx status code
func (o *GetAllIngressRulesForClusterNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all ingress rules for cluster not found response has a 5xx status code
func (o *GetAllIngressRulesForClusterNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all ingress rules for cluster not found response a status code equal to that given
func (o *GetAllIngressRulesForClusterNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all ingress rules for cluster not found response
func (o *GetAllIngressRulesForClusterNotFound) Code() int {
	return 404
}

func (o *GetAllIngressRulesForClusterNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingress-rules][%d] getAllIngressRulesForClusterNotFound %s", 404, payload)
}

func (o *GetAllIngressRulesForClusterNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingress-rules][%d] getAllIngressRulesForClusterNotFound %s", 404, payload)
}

func (o *GetAllIngressRulesForClusterNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllIngressRulesForClusterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllIngressRulesForClusterMethodNotAllowed creates a GetAllIngressRulesForClusterMethodNotAllowed with default headers values
func NewGetAllIngressRulesForClusterMethodNotAllowed() *GetAllIngressRulesForClusterMethodNotAllowed {
	return &GetAllIngressRulesForClusterMethodNotAllowed{}
}

/*
GetAllIngressRulesForClusterMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAllIngressRulesForClusterMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all ingress rules for cluster method not allowed response has a 2xx status code
func (o *GetAllIngressRulesForClusterMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all ingress rules for cluster method not allowed response has a 3xx status code
func (o *GetAllIngressRulesForClusterMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all ingress rules for cluster method not allowed response has a 4xx status code
func (o *GetAllIngressRulesForClusterMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all ingress rules for cluster method not allowed response has a 5xx status code
func (o *GetAllIngressRulesForClusterMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get all ingress rules for cluster method not allowed response a status code equal to that given
func (o *GetAllIngressRulesForClusterMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get all ingress rules for cluster method not allowed response
func (o *GetAllIngressRulesForClusterMethodNotAllowed) Code() int {
	return 405
}

func (o *GetAllIngressRulesForClusterMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingress-rules][%d] getAllIngressRulesForClusterMethodNotAllowed %s", 405, payload)
}

func (o *GetAllIngressRulesForClusterMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingress-rules][%d] getAllIngressRulesForClusterMethodNotAllowed %s", 405, payload)
}

func (o *GetAllIngressRulesForClusterMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllIngressRulesForClusterMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllIngressRulesForClusterInternalServerError creates a GetAllIngressRulesForClusterInternalServerError with default headers values
func NewGetAllIngressRulesForClusterInternalServerError() *GetAllIngressRulesForClusterInternalServerError {
	return &GetAllIngressRulesForClusterInternalServerError{}
}

/*
GetAllIngressRulesForClusterInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAllIngressRulesForClusterInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all ingress rules for cluster internal server error response has a 2xx status code
func (o *GetAllIngressRulesForClusterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all ingress rules for cluster internal server error response has a 3xx status code
func (o *GetAllIngressRulesForClusterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all ingress rules for cluster internal server error response has a 4xx status code
func (o *GetAllIngressRulesForClusterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all ingress rules for cluster internal server error response has a 5xx status code
func (o *GetAllIngressRulesForClusterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all ingress rules for cluster internal server error response a status code equal to that given
func (o *GetAllIngressRulesForClusterInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all ingress rules for cluster internal server error response
func (o *GetAllIngressRulesForClusterInternalServerError) Code() int {
	return 500
}

func (o *GetAllIngressRulesForClusterInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingress-rules][%d] getAllIngressRulesForClusterInternalServerError %s", 500, payload)
}

func (o *GetAllIngressRulesForClusterInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingress-rules][%d] getAllIngressRulesForClusterInternalServerError %s", 500, payload)
}

func (o *GetAllIngressRulesForClusterInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllIngressRulesForClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
