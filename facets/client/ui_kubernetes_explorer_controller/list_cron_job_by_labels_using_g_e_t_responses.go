// Code generated by go-swagger; DO NOT EDIT.

package ui_kubernetes_explorer_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ListCronJobByLabelsUsingGETReader is a Reader for the ListCronJobByLabelsUsingGET structure.
type ListCronJobByLabelsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListCronJobByLabelsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListCronJobByLabelsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListCronJobByLabelsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListCronJobByLabelsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListCronJobByLabelsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/cronJobs] listCronJobByLabelsUsingGET", response, response.Code())
	}
}

// NewListCronJobByLabelsUsingGETOK creates a ListCronJobByLabelsUsingGETOK with default headers values
func NewListCronJobByLabelsUsingGETOK() *ListCronJobByLabelsUsingGETOK {
	return &ListCronJobByLabelsUsingGETOK{}
}

/*
ListCronJobByLabelsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type ListCronJobByLabelsUsingGETOK struct {
	Payload []*models.CronJobDTO
}

// IsSuccess returns true when this list cron job by labels using g e t o k response has a 2xx status code
func (o *ListCronJobByLabelsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list cron job by labels using g e t o k response has a 3xx status code
func (o *ListCronJobByLabelsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cron job by labels using g e t o k response has a 4xx status code
func (o *ListCronJobByLabelsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list cron job by labels using g e t o k response has a 5xx status code
func (o *ListCronJobByLabelsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list cron job by labels using g e t o k response a status code equal to that given
func (o *ListCronJobByLabelsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list cron job by labels using g e t o k response
func (o *ListCronJobByLabelsUsingGETOK) Code() int {
	return 200
}

func (o *ListCronJobByLabelsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/cronJobs][%d] listCronJobByLabelsUsingGETOK %s", 200, payload)
}

func (o *ListCronJobByLabelsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/cronJobs][%d] listCronJobByLabelsUsingGETOK %s", 200, payload)
}

func (o *ListCronJobByLabelsUsingGETOK) GetPayload() []*models.CronJobDTO {
	return o.Payload
}

func (o *ListCronJobByLabelsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCronJobByLabelsUsingGETUnauthorized creates a ListCronJobByLabelsUsingGETUnauthorized with default headers values
func NewListCronJobByLabelsUsingGETUnauthorized() *ListCronJobByLabelsUsingGETUnauthorized {
	return &ListCronJobByLabelsUsingGETUnauthorized{}
}

/*
ListCronJobByLabelsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListCronJobByLabelsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this list cron job by labels using g e t unauthorized response has a 2xx status code
func (o *ListCronJobByLabelsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list cron job by labels using g e t unauthorized response has a 3xx status code
func (o *ListCronJobByLabelsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cron job by labels using g e t unauthorized response has a 4xx status code
func (o *ListCronJobByLabelsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list cron job by labels using g e t unauthorized response has a 5xx status code
func (o *ListCronJobByLabelsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list cron job by labels using g e t unauthorized response a status code equal to that given
func (o *ListCronJobByLabelsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list cron job by labels using g e t unauthorized response
func (o *ListCronJobByLabelsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *ListCronJobByLabelsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/cronJobs][%d] listCronJobByLabelsUsingGETUnauthorized", 401)
}

func (o *ListCronJobByLabelsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/cronJobs][%d] listCronJobByLabelsUsingGETUnauthorized", 401)
}

func (o *ListCronJobByLabelsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListCronJobByLabelsUsingGETForbidden creates a ListCronJobByLabelsUsingGETForbidden with default headers values
func NewListCronJobByLabelsUsingGETForbidden() *ListCronJobByLabelsUsingGETForbidden {
	return &ListCronJobByLabelsUsingGETForbidden{}
}

/*
ListCronJobByLabelsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListCronJobByLabelsUsingGETForbidden struct {
}

// IsSuccess returns true when this list cron job by labels using g e t forbidden response has a 2xx status code
func (o *ListCronJobByLabelsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list cron job by labels using g e t forbidden response has a 3xx status code
func (o *ListCronJobByLabelsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cron job by labels using g e t forbidden response has a 4xx status code
func (o *ListCronJobByLabelsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list cron job by labels using g e t forbidden response has a 5xx status code
func (o *ListCronJobByLabelsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list cron job by labels using g e t forbidden response a status code equal to that given
func (o *ListCronJobByLabelsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list cron job by labels using g e t forbidden response
func (o *ListCronJobByLabelsUsingGETForbidden) Code() int {
	return 403
}

func (o *ListCronJobByLabelsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/cronJobs][%d] listCronJobByLabelsUsingGETForbidden", 403)
}

func (o *ListCronJobByLabelsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/cronJobs][%d] listCronJobByLabelsUsingGETForbidden", 403)
}

func (o *ListCronJobByLabelsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListCronJobByLabelsUsingGETNotFound creates a ListCronJobByLabelsUsingGETNotFound with default headers values
func NewListCronJobByLabelsUsingGETNotFound() *ListCronJobByLabelsUsingGETNotFound {
	return &ListCronJobByLabelsUsingGETNotFound{}
}

/*
ListCronJobByLabelsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ListCronJobByLabelsUsingGETNotFound struct {
}

// IsSuccess returns true when this list cron job by labels using g e t not found response has a 2xx status code
func (o *ListCronJobByLabelsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list cron job by labels using g e t not found response has a 3xx status code
func (o *ListCronJobByLabelsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cron job by labels using g e t not found response has a 4xx status code
func (o *ListCronJobByLabelsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list cron job by labels using g e t not found response has a 5xx status code
func (o *ListCronJobByLabelsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list cron job by labels using g e t not found response a status code equal to that given
func (o *ListCronJobByLabelsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list cron job by labels using g e t not found response
func (o *ListCronJobByLabelsUsingGETNotFound) Code() int {
	return 404
}

func (o *ListCronJobByLabelsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/cronJobs][%d] listCronJobByLabelsUsingGETNotFound", 404)
}

func (o *ListCronJobByLabelsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/k8s-explorer/cronJobs][%d] listCronJobByLabelsUsingGETNotFound", 404)
}

func (o *ListCronJobByLabelsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
