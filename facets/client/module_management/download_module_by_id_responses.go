// Code generated by go-swagger; DO NOT EDIT.

package module_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DownloadModuleByIDReader is a Reader for the DownloadModuleByID structure.
type DownloadModuleByIDReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *DownloadModuleByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadModuleByIDOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDownloadModuleByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDownloadModuleByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDownloadModuleByIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDownloadModuleByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/modules/{id}/download] downloadModuleById", response, response.Code())
	}
}

// NewDownloadModuleByIDOK creates a DownloadModuleByIDOK with default headers values
func NewDownloadModuleByIDOK(writer io.Writer) *DownloadModuleByIDOK {
	return &DownloadModuleByIDOK{

		Payload: writer,
	}
}

/*
DownloadModuleByIDOK describes a response with status code 200, with default header values.

OK
*/
type DownloadModuleByIDOK struct {
	Payload io.Writer
}

// IsSuccess returns true when this download module by Id o k response has a 2xx status code
func (o *DownloadModuleByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this download module by Id o k response has a 3xx status code
func (o *DownloadModuleByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by Id o k response has a 4xx status code
func (o *DownloadModuleByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this download module by Id o k response has a 5xx status code
func (o *DownloadModuleByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this download module by Id o k response a status code equal to that given
func (o *DownloadModuleByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the download module by Id o k response
func (o *DownloadModuleByIDOK) Code() int {
	return 200
}

func (o *DownloadModuleByIDOK) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdOK", 200)
}

func (o *DownloadModuleByIDOK) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdOK", 200)
}

func (o *DownloadModuleByIDOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *DownloadModuleByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadModuleByIDBadRequest creates a DownloadModuleByIDBadRequest with default headers values
func NewDownloadModuleByIDBadRequest() *DownloadModuleByIDBadRequest {
	return &DownloadModuleByIDBadRequest{}
}

/*
DownloadModuleByIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DownloadModuleByIDBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this download module by Id bad request response has a 2xx status code
func (o *DownloadModuleByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download module by Id bad request response has a 3xx status code
func (o *DownloadModuleByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by Id bad request response has a 4xx status code
func (o *DownloadModuleByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this download module by Id bad request response has a 5xx status code
func (o *DownloadModuleByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this download module by Id bad request response a status code equal to that given
func (o *DownloadModuleByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the download module by Id bad request response
func (o *DownloadModuleByIDBadRequest) Code() int {
	return 400
}

func (o *DownloadModuleByIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdBadRequest %s", 400, payload)
}

func (o *DownloadModuleByIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdBadRequest %s", 400, payload)
}

func (o *DownloadModuleByIDBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DownloadModuleByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadModuleByIDNotFound creates a DownloadModuleByIDNotFound with default headers values
func NewDownloadModuleByIDNotFound() *DownloadModuleByIDNotFound {
	return &DownloadModuleByIDNotFound{}
}

/*
DownloadModuleByIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DownloadModuleByIDNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this download module by Id not found response has a 2xx status code
func (o *DownloadModuleByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download module by Id not found response has a 3xx status code
func (o *DownloadModuleByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by Id not found response has a 4xx status code
func (o *DownloadModuleByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this download module by Id not found response has a 5xx status code
func (o *DownloadModuleByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this download module by Id not found response a status code equal to that given
func (o *DownloadModuleByIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the download module by Id not found response
func (o *DownloadModuleByIDNotFound) Code() int {
	return 404
}

func (o *DownloadModuleByIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdNotFound %s", 404, payload)
}

func (o *DownloadModuleByIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdNotFound %s", 404, payload)
}

func (o *DownloadModuleByIDNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DownloadModuleByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadModuleByIDMethodNotAllowed creates a DownloadModuleByIDMethodNotAllowed with default headers values
func NewDownloadModuleByIDMethodNotAllowed() *DownloadModuleByIDMethodNotAllowed {
	return &DownloadModuleByIDMethodNotAllowed{}
}

/*
DownloadModuleByIDMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DownloadModuleByIDMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this download module by Id method not allowed response has a 2xx status code
func (o *DownloadModuleByIDMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download module by Id method not allowed response has a 3xx status code
func (o *DownloadModuleByIDMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by Id method not allowed response has a 4xx status code
func (o *DownloadModuleByIDMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this download module by Id method not allowed response has a 5xx status code
func (o *DownloadModuleByIDMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this download module by Id method not allowed response a status code equal to that given
func (o *DownloadModuleByIDMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the download module by Id method not allowed response
func (o *DownloadModuleByIDMethodNotAllowed) Code() int {
	return 405
}

func (o *DownloadModuleByIDMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdMethodNotAllowed %s", 405, payload)
}

func (o *DownloadModuleByIDMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdMethodNotAllowed %s", 405, payload)
}

func (o *DownloadModuleByIDMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DownloadModuleByIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadModuleByIDInternalServerError creates a DownloadModuleByIDInternalServerError with default headers values
func NewDownloadModuleByIDInternalServerError() *DownloadModuleByIDInternalServerError {
	return &DownloadModuleByIDInternalServerError{}
}

/*
DownloadModuleByIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DownloadModuleByIDInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this download module by Id internal server error response has a 2xx status code
func (o *DownloadModuleByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download module by Id internal server error response has a 3xx status code
func (o *DownloadModuleByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by Id internal server error response has a 4xx status code
func (o *DownloadModuleByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this download module by Id internal server error response has a 5xx status code
func (o *DownloadModuleByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this download module by Id internal server error response a status code equal to that given
func (o *DownloadModuleByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the download module by Id internal server error response
func (o *DownloadModuleByIDInternalServerError) Code() int {
	return 500
}

func (o *DownloadModuleByIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdInternalServerError %s", 500, payload)
}

func (o *DownloadModuleByIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/{id}/download][%d] downloadModuleByIdInternalServerError %s", 500, payload)
}

func (o *DownloadModuleByIDInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DownloadModuleByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
