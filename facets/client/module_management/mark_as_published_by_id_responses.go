// Code generated by go-swagger; DO NOT EDIT.

package module_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// MarkAsPublishedByIDReader is a Reader for the MarkAsPublishedByID structure.
type MarkAsPublishedByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MarkAsPublishedByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMarkAsPublishedByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMarkAsPublishedByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMarkAsPublishedByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewMarkAsPublishedByIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMarkAsPublishedByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/modules/{id}/mark-published] markAsPublishedById", response, response.Code())
	}
}

// NewMarkAsPublishedByIDOK creates a MarkAsPublishedByIDOK with default headers values
func NewMarkAsPublishedByIDOK() *MarkAsPublishedByIDOK {
	return &MarkAsPublishedByIDOK{}
}

/*
MarkAsPublishedByIDOK describes a response with status code 200, with default header values.

OK
*/
type MarkAsPublishedByIDOK struct {
	Payload *models.TFModule
}

// IsSuccess returns true when this mark as published by Id o k response has a 2xx status code
func (o *MarkAsPublishedByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this mark as published by Id o k response has a 3xx status code
func (o *MarkAsPublishedByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published by Id o k response has a 4xx status code
func (o *MarkAsPublishedByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this mark as published by Id o k response has a 5xx status code
func (o *MarkAsPublishedByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published by Id o k response a status code equal to that given
func (o *MarkAsPublishedByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the mark as published by Id o k response
func (o *MarkAsPublishedByIDOK) Code() int {
	return 200
}

func (o *MarkAsPublishedByIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdOK %s", 200, payload)
}

func (o *MarkAsPublishedByIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdOK %s", 200, payload)
}

func (o *MarkAsPublishedByIDOK) GetPayload() *models.TFModule {
	return o.Payload
}

func (o *MarkAsPublishedByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TFModule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkAsPublishedByIDBadRequest creates a MarkAsPublishedByIDBadRequest with default headers values
func NewMarkAsPublishedByIDBadRequest() *MarkAsPublishedByIDBadRequest {
	return &MarkAsPublishedByIDBadRequest{}
}

/*
MarkAsPublishedByIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type MarkAsPublishedByIDBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this mark as published by Id bad request response has a 2xx status code
func (o *MarkAsPublishedByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this mark as published by Id bad request response has a 3xx status code
func (o *MarkAsPublishedByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published by Id bad request response has a 4xx status code
func (o *MarkAsPublishedByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this mark as published by Id bad request response has a 5xx status code
func (o *MarkAsPublishedByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published by Id bad request response a status code equal to that given
func (o *MarkAsPublishedByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the mark as published by Id bad request response
func (o *MarkAsPublishedByIDBadRequest) Code() int {
	return 400
}

func (o *MarkAsPublishedByIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdBadRequest %s", 400, payload)
}

func (o *MarkAsPublishedByIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdBadRequest %s", 400, payload)
}

func (o *MarkAsPublishedByIDBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MarkAsPublishedByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkAsPublishedByIDNotFound creates a MarkAsPublishedByIDNotFound with default headers values
func NewMarkAsPublishedByIDNotFound() *MarkAsPublishedByIDNotFound {
	return &MarkAsPublishedByIDNotFound{}
}

/*
MarkAsPublishedByIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type MarkAsPublishedByIDNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this mark as published by Id not found response has a 2xx status code
func (o *MarkAsPublishedByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this mark as published by Id not found response has a 3xx status code
func (o *MarkAsPublishedByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published by Id not found response has a 4xx status code
func (o *MarkAsPublishedByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this mark as published by Id not found response has a 5xx status code
func (o *MarkAsPublishedByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published by Id not found response a status code equal to that given
func (o *MarkAsPublishedByIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the mark as published by Id not found response
func (o *MarkAsPublishedByIDNotFound) Code() int {
	return 404
}

func (o *MarkAsPublishedByIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdNotFound %s", 404, payload)
}

func (o *MarkAsPublishedByIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdNotFound %s", 404, payload)
}

func (o *MarkAsPublishedByIDNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MarkAsPublishedByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkAsPublishedByIDMethodNotAllowed creates a MarkAsPublishedByIDMethodNotAllowed with default headers values
func NewMarkAsPublishedByIDMethodNotAllowed() *MarkAsPublishedByIDMethodNotAllowed {
	return &MarkAsPublishedByIDMethodNotAllowed{}
}

/*
MarkAsPublishedByIDMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type MarkAsPublishedByIDMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this mark as published by Id method not allowed response has a 2xx status code
func (o *MarkAsPublishedByIDMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this mark as published by Id method not allowed response has a 3xx status code
func (o *MarkAsPublishedByIDMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published by Id method not allowed response has a 4xx status code
func (o *MarkAsPublishedByIDMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this mark as published by Id method not allowed response has a 5xx status code
func (o *MarkAsPublishedByIDMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published by Id method not allowed response a status code equal to that given
func (o *MarkAsPublishedByIDMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the mark as published by Id method not allowed response
func (o *MarkAsPublishedByIDMethodNotAllowed) Code() int {
	return 405
}

func (o *MarkAsPublishedByIDMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdMethodNotAllowed %s", 405, payload)
}

func (o *MarkAsPublishedByIDMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdMethodNotAllowed %s", 405, payload)
}

func (o *MarkAsPublishedByIDMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MarkAsPublishedByIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkAsPublishedByIDInternalServerError creates a MarkAsPublishedByIDInternalServerError with default headers values
func NewMarkAsPublishedByIDInternalServerError() *MarkAsPublishedByIDInternalServerError {
	return &MarkAsPublishedByIDInternalServerError{}
}

/*
MarkAsPublishedByIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type MarkAsPublishedByIDInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this mark as published by Id internal server error response has a 2xx status code
func (o *MarkAsPublishedByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this mark as published by Id internal server error response has a 3xx status code
func (o *MarkAsPublishedByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published by Id internal server error response has a 4xx status code
func (o *MarkAsPublishedByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this mark as published by Id internal server error response has a 5xx status code
func (o *MarkAsPublishedByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this mark as published by Id internal server error response a status code equal to that given
func (o *MarkAsPublishedByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the mark as published by Id internal server error response
func (o *MarkAsPublishedByIDInternalServerError) Code() int {
	return 500
}

func (o *MarkAsPublishedByIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdInternalServerError %s", 500, payload)
}

func (o *MarkAsPublishedByIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/{id}/mark-published][%d] markAsPublishedByIdInternalServerError %s", 500, payload)
}

func (o *MarkAsPublishedByIDInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MarkAsPublishedByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
