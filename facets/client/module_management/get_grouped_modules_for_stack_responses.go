// Code generated by go-swagger; DO NOT EDIT.

package module_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetGroupedModulesForStackReader is a Reader for the GetGroupedModulesForStack structure.
type GetGroupedModulesForStackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGroupedModulesForStackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGroupedModulesForStackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGroupedModulesForStackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGroupedModulesForStackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetGroupedModulesForStackMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGroupedModulesForStackInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/modules/stack/{stackName}/grouped] getGroupedModulesForStack", response, response.Code())
	}
}

// NewGetGroupedModulesForStackOK creates a GetGroupedModulesForStackOK with default headers values
func NewGetGroupedModulesForStackOK() *GetGroupedModulesForStackOK {
	return &GetGroupedModulesForStackOK{}
}

/*
GetGroupedModulesForStackOK describes a response with status code 200, with default header values.

Operation successful
*/
type GetGroupedModulesForStackOK struct {
	Payload *models.ListResourcesResponse
}

// IsSuccess returns true when this get grouped modules for stack o k response has a 2xx status code
func (o *GetGroupedModulesForStackOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get grouped modules for stack o k response has a 3xx status code
func (o *GetGroupedModulesForStackOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get grouped modules for stack o k response has a 4xx status code
func (o *GetGroupedModulesForStackOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get grouped modules for stack o k response has a 5xx status code
func (o *GetGroupedModulesForStackOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get grouped modules for stack o k response a status code equal to that given
func (o *GetGroupedModulesForStackOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get grouped modules for stack o k response
func (o *GetGroupedModulesForStackOK) Code() int {
	return 200
}

func (o *GetGroupedModulesForStackOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/grouped][%d] getGroupedModulesForStackOK %s", 200, payload)
}

func (o *GetGroupedModulesForStackOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/grouped][%d] getGroupedModulesForStackOK %s", 200, payload)
}

func (o *GetGroupedModulesForStackOK) GetPayload() *models.ListResourcesResponse {
	return o.Payload
}

func (o *GetGroupedModulesForStackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListResourcesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupedModulesForStackBadRequest creates a GetGroupedModulesForStackBadRequest with default headers values
func NewGetGroupedModulesForStackBadRequest() *GetGroupedModulesForStackBadRequest {
	return &GetGroupedModulesForStackBadRequest{}
}

/*
GetGroupedModulesForStackBadRequest describes a response with status code 400, with default header values.

Invalid input parameters
*/
type GetGroupedModulesForStackBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get grouped modules for stack bad request response has a 2xx status code
func (o *GetGroupedModulesForStackBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get grouped modules for stack bad request response has a 3xx status code
func (o *GetGroupedModulesForStackBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get grouped modules for stack bad request response has a 4xx status code
func (o *GetGroupedModulesForStackBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get grouped modules for stack bad request response has a 5xx status code
func (o *GetGroupedModulesForStackBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get grouped modules for stack bad request response a status code equal to that given
func (o *GetGroupedModulesForStackBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get grouped modules for stack bad request response
func (o *GetGroupedModulesForStackBadRequest) Code() int {
	return 400
}

func (o *GetGroupedModulesForStackBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/grouped][%d] getGroupedModulesForStackBadRequest %s", 400, payload)
}

func (o *GetGroupedModulesForStackBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/grouped][%d] getGroupedModulesForStackBadRequest %s", 400, payload)
}

func (o *GetGroupedModulesForStackBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetGroupedModulesForStackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupedModulesForStackNotFound creates a GetGroupedModulesForStackNotFound with default headers values
func NewGetGroupedModulesForStackNotFound() *GetGroupedModulesForStackNotFound {
	return &GetGroupedModulesForStackNotFound{}
}

/*
GetGroupedModulesForStackNotFound describes a response with status code 404, with default header values.

Entity not found
*/
type GetGroupedModulesForStackNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get grouped modules for stack not found response has a 2xx status code
func (o *GetGroupedModulesForStackNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get grouped modules for stack not found response has a 3xx status code
func (o *GetGroupedModulesForStackNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get grouped modules for stack not found response has a 4xx status code
func (o *GetGroupedModulesForStackNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get grouped modules for stack not found response has a 5xx status code
func (o *GetGroupedModulesForStackNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get grouped modules for stack not found response a status code equal to that given
func (o *GetGroupedModulesForStackNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get grouped modules for stack not found response
func (o *GetGroupedModulesForStackNotFound) Code() int {
	return 404
}

func (o *GetGroupedModulesForStackNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/grouped][%d] getGroupedModulesForStackNotFound %s", 404, payload)
}

func (o *GetGroupedModulesForStackNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/grouped][%d] getGroupedModulesForStackNotFound %s", 404, payload)
}

func (o *GetGroupedModulesForStackNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetGroupedModulesForStackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupedModulesForStackMethodNotAllowed creates a GetGroupedModulesForStackMethodNotAllowed with default headers values
func NewGetGroupedModulesForStackMethodNotAllowed() *GetGroupedModulesForStackMethodNotAllowed {
	return &GetGroupedModulesForStackMethodNotAllowed{}
}

/*
GetGroupedModulesForStackMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetGroupedModulesForStackMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get grouped modules for stack method not allowed response has a 2xx status code
func (o *GetGroupedModulesForStackMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get grouped modules for stack method not allowed response has a 3xx status code
func (o *GetGroupedModulesForStackMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get grouped modules for stack method not allowed response has a 4xx status code
func (o *GetGroupedModulesForStackMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get grouped modules for stack method not allowed response has a 5xx status code
func (o *GetGroupedModulesForStackMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get grouped modules for stack method not allowed response a status code equal to that given
func (o *GetGroupedModulesForStackMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get grouped modules for stack method not allowed response
func (o *GetGroupedModulesForStackMethodNotAllowed) Code() int {
	return 405
}

func (o *GetGroupedModulesForStackMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/grouped][%d] getGroupedModulesForStackMethodNotAllowed %s", 405, payload)
}

func (o *GetGroupedModulesForStackMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/grouped][%d] getGroupedModulesForStackMethodNotAllowed %s", 405, payload)
}

func (o *GetGroupedModulesForStackMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetGroupedModulesForStackMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupedModulesForStackInternalServerError creates a GetGroupedModulesForStackInternalServerError with default headers values
func NewGetGroupedModulesForStackInternalServerError() *GetGroupedModulesForStackInternalServerError {
	return &GetGroupedModulesForStackInternalServerError{}
}

/*
GetGroupedModulesForStackInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetGroupedModulesForStackInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get grouped modules for stack internal server error response has a 2xx status code
func (o *GetGroupedModulesForStackInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get grouped modules for stack internal server error response has a 3xx status code
func (o *GetGroupedModulesForStackInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get grouped modules for stack internal server error response has a 4xx status code
func (o *GetGroupedModulesForStackInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get grouped modules for stack internal server error response has a 5xx status code
func (o *GetGroupedModulesForStackInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get grouped modules for stack internal server error response a status code equal to that given
func (o *GetGroupedModulesForStackInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get grouped modules for stack internal server error response
func (o *GetGroupedModulesForStackInternalServerError) Code() int {
	return 500
}

func (o *GetGroupedModulesForStackInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/grouped][%d] getGroupedModulesForStackInternalServerError %s", 500, payload)
}

func (o *GetGroupedModulesForStackInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/grouped][%d] getGroupedModulesForStackInternalServerError %s", 500, payload)
}

func (o *GetGroupedModulesForStackInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetGroupedModulesForStackInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
