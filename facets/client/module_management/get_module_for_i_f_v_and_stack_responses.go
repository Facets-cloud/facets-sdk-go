// Code generated by go-swagger; DO NOT EDIT.

package module_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetModuleForIFVAndStackReader is a Reader for the GetModuleForIFVAndStack structure.
type GetModuleForIFVAndStackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetModuleForIFVAndStackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetModuleForIFVAndStackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetModuleForIFVAndStackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetModuleForIFVAndStackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetModuleForIFVAndStackMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetModuleForIFVAndStackInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module] getModuleForIFVAndStack", response, response.Code())
	}
}

// NewGetModuleForIFVAndStackOK creates a GetModuleForIFVAndStackOK with default headers values
func NewGetModuleForIFVAndStackOK() *GetModuleForIFVAndStackOK {
	return &GetModuleForIFVAndStackOK{}
}

/*
GetModuleForIFVAndStackOK describes a response with status code 200, with default header values.

OK
*/
type GetModuleForIFVAndStackOK struct {
	Payload *models.TFModuleResponseDTO
}

// IsSuccess returns true when this get module for i f v and stack o k response has a 2xx status code
func (o *GetModuleForIFVAndStackOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get module for i f v and stack o k response has a 3xx status code
func (o *GetModuleForIFVAndStackOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get module for i f v and stack o k response has a 4xx status code
func (o *GetModuleForIFVAndStackOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get module for i f v and stack o k response has a 5xx status code
func (o *GetModuleForIFVAndStackOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get module for i f v and stack o k response a status code equal to that given
func (o *GetModuleForIFVAndStackOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get module for i f v and stack o k response
func (o *GetModuleForIFVAndStackOK) Code() int {
	return 200
}

func (o *GetModuleForIFVAndStackOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackOK %s", 200, payload)
}

func (o *GetModuleForIFVAndStackOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackOK %s", 200, payload)
}

func (o *GetModuleForIFVAndStackOK) GetPayload() *models.TFModuleResponseDTO {
	return o.Payload
}

func (o *GetModuleForIFVAndStackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TFModuleResponseDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetModuleForIFVAndStackBadRequest creates a GetModuleForIFVAndStackBadRequest with default headers values
func NewGetModuleForIFVAndStackBadRequest() *GetModuleForIFVAndStackBadRequest {
	return &GetModuleForIFVAndStackBadRequest{}
}

/*
GetModuleForIFVAndStackBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetModuleForIFVAndStackBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get module for i f v and stack bad request response has a 2xx status code
func (o *GetModuleForIFVAndStackBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get module for i f v and stack bad request response has a 3xx status code
func (o *GetModuleForIFVAndStackBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get module for i f v and stack bad request response has a 4xx status code
func (o *GetModuleForIFVAndStackBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get module for i f v and stack bad request response has a 5xx status code
func (o *GetModuleForIFVAndStackBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get module for i f v and stack bad request response a status code equal to that given
func (o *GetModuleForIFVAndStackBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get module for i f v and stack bad request response
func (o *GetModuleForIFVAndStackBadRequest) Code() int {
	return 400
}

func (o *GetModuleForIFVAndStackBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackBadRequest %s", 400, payload)
}

func (o *GetModuleForIFVAndStackBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackBadRequest %s", 400, payload)
}

func (o *GetModuleForIFVAndStackBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetModuleForIFVAndStackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetModuleForIFVAndStackNotFound creates a GetModuleForIFVAndStackNotFound with default headers values
func NewGetModuleForIFVAndStackNotFound() *GetModuleForIFVAndStackNotFound {
	return &GetModuleForIFVAndStackNotFound{}
}

/*
GetModuleForIFVAndStackNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetModuleForIFVAndStackNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get module for i f v and stack not found response has a 2xx status code
func (o *GetModuleForIFVAndStackNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get module for i f v and stack not found response has a 3xx status code
func (o *GetModuleForIFVAndStackNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get module for i f v and stack not found response has a 4xx status code
func (o *GetModuleForIFVAndStackNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get module for i f v and stack not found response has a 5xx status code
func (o *GetModuleForIFVAndStackNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get module for i f v and stack not found response a status code equal to that given
func (o *GetModuleForIFVAndStackNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get module for i f v and stack not found response
func (o *GetModuleForIFVAndStackNotFound) Code() int {
	return 404
}

func (o *GetModuleForIFVAndStackNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackNotFound %s", 404, payload)
}

func (o *GetModuleForIFVAndStackNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackNotFound %s", 404, payload)
}

func (o *GetModuleForIFVAndStackNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetModuleForIFVAndStackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetModuleForIFVAndStackMethodNotAllowed creates a GetModuleForIFVAndStackMethodNotAllowed with default headers values
func NewGetModuleForIFVAndStackMethodNotAllowed() *GetModuleForIFVAndStackMethodNotAllowed {
	return &GetModuleForIFVAndStackMethodNotAllowed{}
}

/*
GetModuleForIFVAndStackMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetModuleForIFVAndStackMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get module for i f v and stack method not allowed response has a 2xx status code
func (o *GetModuleForIFVAndStackMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get module for i f v and stack method not allowed response has a 3xx status code
func (o *GetModuleForIFVAndStackMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get module for i f v and stack method not allowed response has a 4xx status code
func (o *GetModuleForIFVAndStackMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get module for i f v and stack method not allowed response has a 5xx status code
func (o *GetModuleForIFVAndStackMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get module for i f v and stack method not allowed response a status code equal to that given
func (o *GetModuleForIFVAndStackMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get module for i f v and stack method not allowed response
func (o *GetModuleForIFVAndStackMethodNotAllowed) Code() int {
	return 405
}

func (o *GetModuleForIFVAndStackMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackMethodNotAllowed %s", 405, payload)
}

func (o *GetModuleForIFVAndStackMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackMethodNotAllowed %s", 405, payload)
}

func (o *GetModuleForIFVAndStackMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetModuleForIFVAndStackMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetModuleForIFVAndStackInternalServerError creates a GetModuleForIFVAndStackInternalServerError with default headers values
func NewGetModuleForIFVAndStackInternalServerError() *GetModuleForIFVAndStackInternalServerError {
	return &GetModuleForIFVAndStackInternalServerError{}
}

/*
GetModuleForIFVAndStackInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetModuleForIFVAndStackInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get module for i f v and stack internal server error response has a 2xx status code
func (o *GetModuleForIFVAndStackInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get module for i f v and stack internal server error response has a 3xx status code
func (o *GetModuleForIFVAndStackInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get module for i f v and stack internal server error response has a 4xx status code
func (o *GetModuleForIFVAndStackInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get module for i f v and stack internal server error response has a 5xx status code
func (o *GetModuleForIFVAndStackInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get module for i f v and stack internal server error response a status code equal to that given
func (o *GetModuleForIFVAndStackInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get module for i f v and stack internal server error response
func (o *GetModuleForIFVAndStackInternalServerError) Code() int {
	return 500
}

func (o *GetModuleForIFVAndStackInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackInternalServerError %s", 500, payload)
}

func (o *GetModuleForIFVAndStackInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module][%d] getModuleForIFVAndStackInternalServerError %s", 500, payload)
}

func (o *GetModuleForIFVAndStackInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetModuleForIFVAndStackInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
