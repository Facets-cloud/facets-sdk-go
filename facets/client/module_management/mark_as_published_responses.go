// Code generated by go-swagger; DO NOT EDIT.

package module_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// MarkAsPublishedReader is a Reader for the MarkAsPublished structure.
type MarkAsPublishedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MarkAsPublishedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMarkAsPublishedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMarkAsPublishedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMarkAsPublishedNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewMarkAsPublishedMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMarkAsPublishedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published] markAsPublished", response, response.Code())
	}
}

// NewMarkAsPublishedOK creates a MarkAsPublishedOK with default headers values
func NewMarkAsPublishedOK() *MarkAsPublishedOK {
	return &MarkAsPublishedOK{}
}

/*
MarkAsPublishedOK describes a response with status code 200, with default header values.

OK
*/
type MarkAsPublishedOK struct {
	Payload *models.TFModule
}

// IsSuccess returns true when this mark as published o k response has a 2xx status code
func (o *MarkAsPublishedOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this mark as published o k response has a 3xx status code
func (o *MarkAsPublishedOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published o k response has a 4xx status code
func (o *MarkAsPublishedOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this mark as published o k response has a 5xx status code
func (o *MarkAsPublishedOK) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published o k response a status code equal to that given
func (o *MarkAsPublishedOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the mark as published o k response
func (o *MarkAsPublishedOK) Code() int {
	return 200
}

func (o *MarkAsPublishedOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedOK %s", 200, payload)
}

func (o *MarkAsPublishedOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedOK %s", 200, payload)
}

func (o *MarkAsPublishedOK) GetPayload() *models.TFModule {
	return o.Payload
}

func (o *MarkAsPublishedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TFModule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkAsPublishedBadRequest creates a MarkAsPublishedBadRequest with default headers values
func NewMarkAsPublishedBadRequest() *MarkAsPublishedBadRequest {
	return &MarkAsPublishedBadRequest{}
}

/*
MarkAsPublishedBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type MarkAsPublishedBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this mark as published bad request response has a 2xx status code
func (o *MarkAsPublishedBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this mark as published bad request response has a 3xx status code
func (o *MarkAsPublishedBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published bad request response has a 4xx status code
func (o *MarkAsPublishedBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this mark as published bad request response has a 5xx status code
func (o *MarkAsPublishedBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published bad request response a status code equal to that given
func (o *MarkAsPublishedBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the mark as published bad request response
func (o *MarkAsPublishedBadRequest) Code() int {
	return 400
}

func (o *MarkAsPublishedBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedBadRequest %s", 400, payload)
}

func (o *MarkAsPublishedBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedBadRequest %s", 400, payload)
}

func (o *MarkAsPublishedBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MarkAsPublishedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkAsPublishedNotFound creates a MarkAsPublishedNotFound with default headers values
func NewMarkAsPublishedNotFound() *MarkAsPublishedNotFound {
	return &MarkAsPublishedNotFound{}
}

/*
MarkAsPublishedNotFound describes a response with status code 404, with default header values.

Not Found
*/
type MarkAsPublishedNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this mark as published not found response has a 2xx status code
func (o *MarkAsPublishedNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this mark as published not found response has a 3xx status code
func (o *MarkAsPublishedNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published not found response has a 4xx status code
func (o *MarkAsPublishedNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this mark as published not found response has a 5xx status code
func (o *MarkAsPublishedNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published not found response a status code equal to that given
func (o *MarkAsPublishedNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the mark as published not found response
func (o *MarkAsPublishedNotFound) Code() int {
	return 404
}

func (o *MarkAsPublishedNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedNotFound %s", 404, payload)
}

func (o *MarkAsPublishedNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedNotFound %s", 404, payload)
}

func (o *MarkAsPublishedNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MarkAsPublishedNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkAsPublishedMethodNotAllowed creates a MarkAsPublishedMethodNotAllowed with default headers values
func NewMarkAsPublishedMethodNotAllowed() *MarkAsPublishedMethodNotAllowed {
	return &MarkAsPublishedMethodNotAllowed{}
}

/*
MarkAsPublishedMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type MarkAsPublishedMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this mark as published method not allowed response has a 2xx status code
func (o *MarkAsPublishedMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this mark as published method not allowed response has a 3xx status code
func (o *MarkAsPublishedMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published method not allowed response has a 4xx status code
func (o *MarkAsPublishedMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this mark as published method not allowed response has a 5xx status code
func (o *MarkAsPublishedMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this mark as published method not allowed response a status code equal to that given
func (o *MarkAsPublishedMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the mark as published method not allowed response
func (o *MarkAsPublishedMethodNotAllowed) Code() int {
	return 405
}

func (o *MarkAsPublishedMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedMethodNotAllowed %s", 405, payload)
}

func (o *MarkAsPublishedMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedMethodNotAllowed %s", 405, payload)
}

func (o *MarkAsPublishedMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MarkAsPublishedMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkAsPublishedInternalServerError creates a MarkAsPublishedInternalServerError with default headers values
func NewMarkAsPublishedInternalServerError() *MarkAsPublishedInternalServerError {
	return &MarkAsPublishedInternalServerError{}
}

/*
MarkAsPublishedInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type MarkAsPublishedInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this mark as published internal server error response has a 2xx status code
func (o *MarkAsPublishedInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this mark as published internal server error response has a 3xx status code
func (o *MarkAsPublishedInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this mark as published internal server error response has a 4xx status code
func (o *MarkAsPublishedInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this mark as published internal server error response has a 5xx status code
func (o *MarkAsPublishedInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this mark as published internal server error response a status code equal to that given
func (o *MarkAsPublishedInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the mark as published internal server error response
func (o *MarkAsPublishedInternalServerError) Code() int {
	return 500
}

func (o *MarkAsPublishedInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedInternalServerError %s", 500, payload)
}

func (o *MarkAsPublishedInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published][%d] markAsPublishedInternalServerError %s", 500, payload)
}

func (o *MarkAsPublishedInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *MarkAsPublishedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
