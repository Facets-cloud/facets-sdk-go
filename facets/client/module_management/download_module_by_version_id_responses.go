// Code generated by go-swagger; DO NOT EDIT.

package module_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DownloadModuleByVersionIDReader is a Reader for the DownloadModuleByVersionID structure.
type DownloadModuleByVersionIDReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *DownloadModuleByVersionIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadModuleByVersionIDOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDownloadModuleByVersionIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDownloadModuleByVersionIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDownloadModuleByVersionIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDownloadModuleByVersionIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/modules/version/{versionId}/download] downloadModuleByVersionId", response, response.Code())
	}
}

// NewDownloadModuleByVersionIDOK creates a DownloadModuleByVersionIDOK with default headers values
func NewDownloadModuleByVersionIDOK(writer io.Writer) *DownloadModuleByVersionIDOK {
	return &DownloadModuleByVersionIDOK{

		Payload: writer,
	}
}

/*
DownloadModuleByVersionIDOK describes a response with status code 200, with default header values.

OK
*/
type DownloadModuleByVersionIDOK struct {
	Payload io.Writer
}

// IsSuccess returns true when this download module by version Id o k response has a 2xx status code
func (o *DownloadModuleByVersionIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this download module by version Id o k response has a 3xx status code
func (o *DownloadModuleByVersionIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by version Id o k response has a 4xx status code
func (o *DownloadModuleByVersionIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this download module by version Id o k response has a 5xx status code
func (o *DownloadModuleByVersionIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this download module by version Id o k response a status code equal to that given
func (o *DownloadModuleByVersionIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the download module by version Id o k response
func (o *DownloadModuleByVersionIDOK) Code() int {
	return 200
}

func (o *DownloadModuleByVersionIDOK) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdOK", 200)
}

func (o *DownloadModuleByVersionIDOK) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdOK", 200)
}

func (o *DownloadModuleByVersionIDOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *DownloadModuleByVersionIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadModuleByVersionIDBadRequest creates a DownloadModuleByVersionIDBadRequest with default headers values
func NewDownloadModuleByVersionIDBadRequest() *DownloadModuleByVersionIDBadRequest {
	return &DownloadModuleByVersionIDBadRequest{}
}

/*
DownloadModuleByVersionIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DownloadModuleByVersionIDBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this download module by version Id bad request response has a 2xx status code
func (o *DownloadModuleByVersionIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download module by version Id bad request response has a 3xx status code
func (o *DownloadModuleByVersionIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by version Id bad request response has a 4xx status code
func (o *DownloadModuleByVersionIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this download module by version Id bad request response has a 5xx status code
func (o *DownloadModuleByVersionIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this download module by version Id bad request response a status code equal to that given
func (o *DownloadModuleByVersionIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the download module by version Id bad request response
func (o *DownloadModuleByVersionIDBadRequest) Code() int {
	return 400
}

func (o *DownloadModuleByVersionIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdBadRequest %s", 400, payload)
}

func (o *DownloadModuleByVersionIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdBadRequest %s", 400, payload)
}

func (o *DownloadModuleByVersionIDBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DownloadModuleByVersionIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadModuleByVersionIDNotFound creates a DownloadModuleByVersionIDNotFound with default headers values
func NewDownloadModuleByVersionIDNotFound() *DownloadModuleByVersionIDNotFound {
	return &DownloadModuleByVersionIDNotFound{}
}

/*
DownloadModuleByVersionIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DownloadModuleByVersionIDNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this download module by version Id not found response has a 2xx status code
func (o *DownloadModuleByVersionIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download module by version Id not found response has a 3xx status code
func (o *DownloadModuleByVersionIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by version Id not found response has a 4xx status code
func (o *DownloadModuleByVersionIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this download module by version Id not found response has a 5xx status code
func (o *DownloadModuleByVersionIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this download module by version Id not found response a status code equal to that given
func (o *DownloadModuleByVersionIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the download module by version Id not found response
func (o *DownloadModuleByVersionIDNotFound) Code() int {
	return 404
}

func (o *DownloadModuleByVersionIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdNotFound %s", 404, payload)
}

func (o *DownloadModuleByVersionIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdNotFound %s", 404, payload)
}

func (o *DownloadModuleByVersionIDNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DownloadModuleByVersionIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadModuleByVersionIDMethodNotAllowed creates a DownloadModuleByVersionIDMethodNotAllowed with default headers values
func NewDownloadModuleByVersionIDMethodNotAllowed() *DownloadModuleByVersionIDMethodNotAllowed {
	return &DownloadModuleByVersionIDMethodNotAllowed{}
}

/*
DownloadModuleByVersionIDMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DownloadModuleByVersionIDMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this download module by version Id method not allowed response has a 2xx status code
func (o *DownloadModuleByVersionIDMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download module by version Id method not allowed response has a 3xx status code
func (o *DownloadModuleByVersionIDMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by version Id method not allowed response has a 4xx status code
func (o *DownloadModuleByVersionIDMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this download module by version Id method not allowed response has a 5xx status code
func (o *DownloadModuleByVersionIDMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this download module by version Id method not allowed response a status code equal to that given
func (o *DownloadModuleByVersionIDMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the download module by version Id method not allowed response
func (o *DownloadModuleByVersionIDMethodNotAllowed) Code() int {
	return 405
}

func (o *DownloadModuleByVersionIDMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdMethodNotAllowed %s", 405, payload)
}

func (o *DownloadModuleByVersionIDMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdMethodNotAllowed %s", 405, payload)
}

func (o *DownloadModuleByVersionIDMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DownloadModuleByVersionIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadModuleByVersionIDInternalServerError creates a DownloadModuleByVersionIDInternalServerError with default headers values
func NewDownloadModuleByVersionIDInternalServerError() *DownloadModuleByVersionIDInternalServerError {
	return &DownloadModuleByVersionIDInternalServerError{}
}

/*
DownloadModuleByVersionIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DownloadModuleByVersionIDInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this download module by version Id internal server error response has a 2xx status code
func (o *DownloadModuleByVersionIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download module by version Id internal server error response has a 3xx status code
func (o *DownloadModuleByVersionIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download module by version Id internal server error response has a 4xx status code
func (o *DownloadModuleByVersionIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this download module by version Id internal server error response has a 5xx status code
func (o *DownloadModuleByVersionIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this download module by version Id internal server error response a status code equal to that given
func (o *DownloadModuleByVersionIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the download module by version Id internal server error response
func (o *DownloadModuleByVersionIDInternalServerError) Code() int {
	return 500
}

func (o *DownloadModuleByVersionIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdInternalServerError %s", 500, payload)
}

func (o *DownloadModuleByVersionIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules/version/{versionId}/download][%d] downloadModuleByVersionIdInternalServerError %s", 500, payload)
}

func (o *DownloadModuleByVersionIDInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DownloadModuleByVersionIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
