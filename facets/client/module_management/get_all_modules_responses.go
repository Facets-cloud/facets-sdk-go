// Code generated by go-swagger; DO NOT EDIT.

package module_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllModulesReader is a Reader for the GetAllModules structure.
type GetAllModulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllModulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllModulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllModulesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllModulesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAllModulesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllModulesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/modules] getAllModules", response, response.Code())
	}
}

// NewGetAllModulesOK creates a GetAllModulesOK with default headers values
func NewGetAllModulesOK() *GetAllModulesOK {
	return &GetAllModulesOK{}
}

/*
GetAllModulesOK describes a response with status code 200, with default header values.

OK
*/
type GetAllModulesOK struct {
	Payload []*models.TFModuleListResponseDTO
}

// IsSuccess returns true when this get all modules o k response has a 2xx status code
func (o *GetAllModulesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all modules o k response has a 3xx status code
func (o *GetAllModulesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all modules o k response has a 4xx status code
func (o *GetAllModulesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all modules o k response has a 5xx status code
func (o *GetAllModulesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all modules o k response a status code equal to that given
func (o *GetAllModulesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all modules o k response
func (o *GetAllModulesOK) Code() int {
	return 200
}

func (o *GetAllModulesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesOK %s", 200, payload)
}

func (o *GetAllModulesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesOK %s", 200, payload)
}

func (o *GetAllModulesOK) GetPayload() []*models.TFModuleListResponseDTO {
	return o.Payload
}

func (o *GetAllModulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllModulesBadRequest creates a GetAllModulesBadRequest with default headers values
func NewGetAllModulesBadRequest() *GetAllModulesBadRequest {
	return &GetAllModulesBadRequest{}
}

/*
GetAllModulesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAllModulesBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all modules bad request response has a 2xx status code
func (o *GetAllModulesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all modules bad request response has a 3xx status code
func (o *GetAllModulesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all modules bad request response has a 4xx status code
func (o *GetAllModulesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all modules bad request response has a 5xx status code
func (o *GetAllModulesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all modules bad request response a status code equal to that given
func (o *GetAllModulesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all modules bad request response
func (o *GetAllModulesBadRequest) Code() int {
	return 400
}

func (o *GetAllModulesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesBadRequest %s", 400, payload)
}

func (o *GetAllModulesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesBadRequest %s", 400, payload)
}

func (o *GetAllModulesBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllModulesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllModulesNotFound creates a GetAllModulesNotFound with default headers values
func NewGetAllModulesNotFound() *GetAllModulesNotFound {
	return &GetAllModulesNotFound{}
}

/*
GetAllModulesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllModulesNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all modules not found response has a 2xx status code
func (o *GetAllModulesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all modules not found response has a 3xx status code
func (o *GetAllModulesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all modules not found response has a 4xx status code
func (o *GetAllModulesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all modules not found response has a 5xx status code
func (o *GetAllModulesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all modules not found response a status code equal to that given
func (o *GetAllModulesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all modules not found response
func (o *GetAllModulesNotFound) Code() int {
	return 404
}

func (o *GetAllModulesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesNotFound %s", 404, payload)
}

func (o *GetAllModulesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesNotFound %s", 404, payload)
}

func (o *GetAllModulesNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllModulesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllModulesMethodNotAllowed creates a GetAllModulesMethodNotAllowed with default headers values
func NewGetAllModulesMethodNotAllowed() *GetAllModulesMethodNotAllowed {
	return &GetAllModulesMethodNotAllowed{}
}

/*
GetAllModulesMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAllModulesMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all modules method not allowed response has a 2xx status code
func (o *GetAllModulesMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all modules method not allowed response has a 3xx status code
func (o *GetAllModulesMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all modules method not allowed response has a 4xx status code
func (o *GetAllModulesMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all modules method not allowed response has a 5xx status code
func (o *GetAllModulesMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get all modules method not allowed response a status code equal to that given
func (o *GetAllModulesMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get all modules method not allowed response
func (o *GetAllModulesMethodNotAllowed) Code() int {
	return 405
}

func (o *GetAllModulesMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesMethodNotAllowed %s", 405, payload)
}

func (o *GetAllModulesMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesMethodNotAllowed %s", 405, payload)
}

func (o *GetAllModulesMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllModulesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllModulesInternalServerError creates a GetAllModulesInternalServerError with default headers values
func NewGetAllModulesInternalServerError() *GetAllModulesInternalServerError {
	return &GetAllModulesInternalServerError{}
}

/*
GetAllModulesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAllModulesInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all modules internal server error response has a 2xx status code
func (o *GetAllModulesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all modules internal server error response has a 3xx status code
func (o *GetAllModulesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all modules internal server error response has a 4xx status code
func (o *GetAllModulesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all modules internal server error response has a 5xx status code
func (o *GetAllModulesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all modules internal server error response a status code equal to that given
func (o *GetAllModulesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all modules internal server error response
func (o *GetAllModulesInternalServerError) Code() int {
	return 500
}

func (o *GetAllModulesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesInternalServerError %s", 500, payload)
}

func (o *GetAllModulesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/modules][%d] getAllModulesInternalServerError %s", 500, payload)
}

func (o *GetAllModulesInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllModulesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
