// Code generated by go-swagger; DO NOT EDIT.

package module_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UploadModuleReader is a Reader for the UploadModule structure.
type UploadModuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadModuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadModuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadModuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUploadModuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUploadModuleMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadModuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/modules/upload] uploadModule", response, response.Code())
	}
}

// NewUploadModuleOK creates a UploadModuleOK with default headers values
func NewUploadModuleOK() *UploadModuleOK {
	return &UploadModuleOK{}
}

/*
UploadModuleOK describes a response with status code 200, with default header values.

OK
*/
type UploadModuleOK struct {
	Payload *models.TFModule
}

// IsSuccess returns true when this upload module o k response has a 2xx status code
func (o *UploadModuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upload module o k response has a 3xx status code
func (o *UploadModuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload module o k response has a 4xx status code
func (o *UploadModuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload module o k response has a 5xx status code
func (o *UploadModuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upload module o k response a status code equal to that given
func (o *UploadModuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upload module o k response
func (o *UploadModuleOK) Code() int {
	return 200
}

func (o *UploadModuleOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleOK %s", 200, payload)
}

func (o *UploadModuleOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleOK %s", 200, payload)
}

func (o *UploadModuleOK) GetPayload() *models.TFModule {
	return o.Payload
}

func (o *UploadModuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TFModule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadModuleBadRequest creates a UploadModuleBadRequest with default headers values
func NewUploadModuleBadRequest() *UploadModuleBadRequest {
	return &UploadModuleBadRequest{}
}

/*
UploadModuleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UploadModuleBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upload module bad request response has a 2xx status code
func (o *UploadModuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload module bad request response has a 3xx status code
func (o *UploadModuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload module bad request response has a 4xx status code
func (o *UploadModuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload module bad request response has a 5xx status code
func (o *UploadModuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this upload module bad request response a status code equal to that given
func (o *UploadModuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the upload module bad request response
func (o *UploadModuleBadRequest) Code() int {
	return 400
}

func (o *UploadModuleBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleBadRequest %s", 400, payload)
}

func (o *UploadModuleBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleBadRequest %s", 400, payload)
}

func (o *UploadModuleBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UploadModuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadModuleNotFound creates a UploadModuleNotFound with default headers values
func NewUploadModuleNotFound() *UploadModuleNotFound {
	return &UploadModuleNotFound{}
}

/*
UploadModuleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UploadModuleNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upload module not found response has a 2xx status code
func (o *UploadModuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload module not found response has a 3xx status code
func (o *UploadModuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload module not found response has a 4xx status code
func (o *UploadModuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload module not found response has a 5xx status code
func (o *UploadModuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this upload module not found response a status code equal to that given
func (o *UploadModuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the upload module not found response
func (o *UploadModuleNotFound) Code() int {
	return 404
}

func (o *UploadModuleNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleNotFound %s", 404, payload)
}

func (o *UploadModuleNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleNotFound %s", 404, payload)
}

func (o *UploadModuleNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UploadModuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadModuleMethodNotAllowed creates a UploadModuleMethodNotAllowed with default headers values
func NewUploadModuleMethodNotAllowed() *UploadModuleMethodNotAllowed {
	return &UploadModuleMethodNotAllowed{}
}

/*
UploadModuleMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UploadModuleMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upload module method not allowed response has a 2xx status code
func (o *UploadModuleMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload module method not allowed response has a 3xx status code
func (o *UploadModuleMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload module method not allowed response has a 4xx status code
func (o *UploadModuleMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload module method not allowed response has a 5xx status code
func (o *UploadModuleMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this upload module method not allowed response a status code equal to that given
func (o *UploadModuleMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the upload module method not allowed response
func (o *UploadModuleMethodNotAllowed) Code() int {
	return 405
}

func (o *UploadModuleMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleMethodNotAllowed %s", 405, payload)
}

func (o *UploadModuleMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleMethodNotAllowed %s", 405, payload)
}

func (o *UploadModuleMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UploadModuleMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadModuleInternalServerError creates a UploadModuleInternalServerError with default headers values
func NewUploadModuleInternalServerError() *UploadModuleInternalServerError {
	return &UploadModuleInternalServerError{}
}

/*
UploadModuleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UploadModuleInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this upload module internal server error response has a 2xx status code
func (o *UploadModuleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload module internal server error response has a 3xx status code
func (o *UploadModuleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload module internal server error response has a 4xx status code
func (o *UploadModuleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload module internal server error response has a 5xx status code
func (o *UploadModuleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this upload module internal server error response a status code equal to that given
func (o *UploadModuleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the upload module internal server error response
func (o *UploadModuleInternalServerError) Code() int {
	return 500
}

func (o *UploadModuleInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleInternalServerError %s", 500, payload)
}

func (o *UploadModuleInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/modules/upload][%d] uploadModuleInternalServerError %s", 500, payload)
}

func (o *UploadModuleInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UploadModuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UploadModuleBody upload module body
swagger:model UploadModuleBody
*/
type UploadModuleBody struct {

	// file
	// Required: true
	// Format: binary
	File io.ReadCloser `json:"file"`

	// metadata
	Metadata *models.ModuleMetadata `json:"metadata,omitempty"`
}

// Validate validates this upload module body
func (o *UploadModuleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadModuleBody) validateFile(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"file", "body", io.ReadCloser(o.File)); err != nil {
		return err
	}

	return nil
}

func (o *UploadModuleBody) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this upload module body based on the context it is used
func (o *UploadModuleBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadModuleBody) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if o.Metadata != nil {

		if swag.IsZero(o.Metadata) { // not required
			return nil
		}

		if err := o.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UploadModuleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadModuleBody) UnmarshalBinary(b []byte) error {
	var res UploadModuleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
