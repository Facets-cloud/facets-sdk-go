// Code generated by go-swagger; DO NOT EDIT.

package module_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new module management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new module management API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new module management API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for module management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BootstrapModules(params *BootstrapModulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BootstrapModulesOK, error)

	DeleteTfModule(params *DeleteTfModuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTfModuleOK, error)

	DownloadModuleByID(params *DownloadModuleByIDParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*DownloadModuleByIDOK, error)

	DownloadModuleByVersionID(params *DownloadModuleByVersionIDParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*DownloadModuleByVersionIDOK, error)

	GetAllModules(params *GetAllModulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllModulesOK, error)

	GetAllModulesLite(params *GetAllModulesLiteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllModulesLiteOK, error)

	GetAll2(params *GetAll2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAll2OK, error)

	GetByID(params *GetByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetByIDOK, error)

	GetGroupedModulesForStack(params *GetGroupedModulesForStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGroupedModulesForStackOK, error)

	GetIntentAddOnModules(params *GetIntentAddOnModulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIntentAddOnModulesOK, error)

	GetModuleForIFVAndStack(params *GetModuleForIFVAndStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModuleForIFVAndStackOK, error)

	GetModuleUsages(params *GetModuleUsagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModuleUsagesOK, error)

	MarkAsPublished(params *MarkAsPublishedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MarkAsPublishedOK, error)

	MarkAsPublishedByID(params *MarkAsPublishedByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MarkAsPublishedByIDOK, error)

	UploadModule(params *UploadModuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadModuleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	BootstrapModules bootstraps modules

	- **Description:** Bootstraps modules for initialization.

- **Audit Logging:** No specific audit logging at the moment.
*/
func (a *Client) BootstrapModules(params *BootstrapModulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BootstrapModulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBootstrapModulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "bootstrapModules",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/modules/bootstrap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BootstrapModulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BootstrapModulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bootstrapModules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteTfModule deletes a module

	- **Description:** Deletes a module by ID.

- **Permissions:** Requires MODULE_DELETE permission.
- **Audit Logging:** Yes
*/
func (a *Client) DeleteTfModule(params *DeleteTfModuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTfModuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTfModuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTfModule",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/modules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTfModuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTfModuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTfModule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DownloadModuleByID download module by Id API
*/
func (a *Client) DownloadModuleByID(params *DownloadModuleByIDParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*DownloadModuleByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadModuleByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "downloadModuleById",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/modules/{id}/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadModuleByIDReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadModuleByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for downloadModuleById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DownloadModuleByVersionID download module by version Id API
*/
func (a *Client) DownloadModuleByVersionID(params *DownloadModuleByVersionIDParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*DownloadModuleByVersionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadModuleByVersionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "downloadModuleByVersionId",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/modules/version/{versionId}/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadModuleByVersionIDReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadModuleByVersionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for downloadModuleByVersionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAllModules gets all modules

	- **Description:** Retrieves all modules with optional filtering.

- **Parameters:**
  - `canDownload` (optional): When true, returns only modules that have downloadable content (modules with path). Defaults to false.

- **Permissions:** Requires MODULE_READ permission.
- **Audit Logging:** No specific audit logging at the moment.
*/
func (a *Client) GetAllModules(params *GetAllModulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllModulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllModulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllModules",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/modules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllModulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllModulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllModules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllModulesLite get all modules lite API
*/
func (a *Client) GetAllModulesLite(params *GetAllModulesLiteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllModulesLiteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllModulesLiteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllModulesLite",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/modules/modules-lite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllModulesLiteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllModulesLiteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllModulesLite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAll2 gets all modules

	- **Description:** Retrieves all modules with optional filtering.

- **Audit Logging:** No specific audit logging at the moment.
*/
func (a *Client) GetAll2(params *GetAll2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAll2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAll2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAll_2",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/modules/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAll2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAll2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAll_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetByID gets module by ID

	- **Description:** Retrieves a module by its ID.

- **Audit Logging:** No specific audit logging at the moment.
*/
func (a *Client) GetByID(params *GetByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getById",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/modules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetGroupedModulesForStack gets grouped modules for stack

	- **Description:** Retrieves grouped modules specifically for a stack name.

- **Audit Logging:** No specific audit logging at the moment.
*/
func (a *Client) GetGroupedModulesForStack(params *GetGroupedModulesForStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGroupedModulesForStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupedModulesForStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGroupedModulesForStack",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/modules/stack/{stackName}/grouped",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGroupedModulesForStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupedModulesForStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupedModulesForStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetIntentAddOnModules gets add on modules

	- **Description:** Retrieves all add-on modules based on intent and flavor, optionally by cloud.

- **Audit Logging:** No specific audit logging at the moment.
*/
func (a *Client) GetIntentAddOnModules(params *GetIntentAddOnModulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIntentAddOnModulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntentAddOnModulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIntentAddOnModules",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/add-ons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIntentAddOnModulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntentAddOnModulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIntentAddOnModules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetModuleForIFVAndStack get module for i f v and stack API
*/
func (a *Client) GetModuleForIFVAndStack(params *GetModuleForIFVAndStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModuleForIFVAndStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModuleForIFVAndStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModuleForIFVAndStack",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetModuleForIFVAndStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetModuleForIFVAndStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getModuleForIFVAndStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetModuleUsages gets module usages

	- **Description:** Retrieves all usages of a module across stacks and clusters.

- **Audit Logging:** No specific audit logging at the moment.
*/
func (a *Client) GetModuleUsages(params *GetModuleUsagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModuleUsagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModuleUsagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModuleUsages",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/modules/{id}/usages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetModuleUsagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetModuleUsagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getModuleUsages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	MarkAsPublished marks module as published

	- **Description:** Marks a specific module version as published.

- **Permissions:** Requires MODULE_WRITE permission.
- **Audit Logging:** Yes
*/
func (a *Client) MarkAsPublished(params *MarkAsPublishedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MarkAsPublishedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarkAsPublishedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "markAsPublished",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MarkAsPublishedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MarkAsPublishedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for markAsPublished: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	MarkAsPublishedByID marks module as published

	- **Description:** Marks a specific module version as published.

- **Permissions:** Requires MODULE_WRITE permission.
- **Audit Logging:** Yes
*/
func (a *Client) MarkAsPublishedByID(params *MarkAsPublishedByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MarkAsPublishedByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarkAsPublishedByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "markAsPublishedById",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/modules/{id}/mark-published",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MarkAsPublishedByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MarkAsPublishedByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for markAsPublishedById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UploadModule uploads a module

	- **Description:** Uploads a module using a file.

- **Permissions:** Requires MODULE_WRITE permission.
- **Parameters:**
  - `file`: The module file to upload
  - `metadata` (optional): Additional module metadata including:
  - `gitUrl`: Web URL of the git repository (Expected to embed the commit id)
  - `gitRef`: Git reference (branch, tag, or commit)
  - `isFeatureBranch`: If this is true, this preview module cannot be directly marked as published until we register the module again with this as false.

- **Audit Logging:** Yes
*/
func (a *Client) UploadModule(params *UploadModuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadModuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadModuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadModule",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/modules/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadModuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadModuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadModule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
