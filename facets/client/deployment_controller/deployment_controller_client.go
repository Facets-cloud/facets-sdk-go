// Code generated by go-swagger; DO NOT EDIT.

package deployment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new deployment controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new deployment controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new deployment controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for deployment controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AbortAutomationSuiteUsingDELETE(params *AbortAutomationSuiteUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AbortAutomationSuiteUsingDELETEOK, *AbortAutomationSuiteUsingDELETENoContent, error)

	GetAutomationSuiteStatusUsingGET(params *GetAutomationSuiteStatusUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAutomationSuiteStatusUsingGETOK, error)

	GetDeploymentsUsingGET(params *GetDeploymentsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentsUsingGETOK, error)

	GetLogsUsingGET(params *GetLogsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLogsUsingGETOK, error)

	TriggerAutomationSuiteUsingPOST(params *TriggerAutomationSuiteUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerAutomationSuiteUsingPOSTOK, *TriggerAutomationSuiteUsingPOSTCreated, error)

	ValidateSanityResultUsingPOST(params *ValidateSanityResultUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateSanityResultUsingPOSTOK, *ValidateSanityResultUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AbortAutomationSuiteUsingDELETE aborts automation suite
*/
func (a *Client) AbortAutomationSuiteUsingDELETE(params *AbortAutomationSuiteUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AbortAutomationSuiteUsingDELETEOK, *AbortAutomationSuiteUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAbortAutomationSuiteUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "abortAutomationSuiteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc/v1/clusters/{clusterId}/deployments/qa/{executionId}/abortSuite",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AbortAutomationSuiteUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AbortAutomationSuiteUsingDELETEOK:
		return value, nil, nil
	case *AbortAutomationSuiteUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAutomationSuiteStatusUsingGET gets automation suite status
*/
func (a *Client) GetAutomationSuiteStatusUsingGET(params *GetAutomationSuiteStatusUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAutomationSuiteStatusUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAutomationSuiteStatusUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAutomationSuiteStatusUsingGET",
		Method:             "GET",
		PathPattern:        "/cc/v1/clusters/{clusterId}/deployments/qa/{executionId}/status",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAutomationSuiteStatusUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAutomationSuiteStatusUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAutomationSuiteStatusUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeploymentsUsingGET gets deployments
*/
func (a *Client) GetDeploymentsUsingGET(params *GetDeploymentsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc/v1/clusters/{clusterId}/deployments",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLogsUsingGET gets logs
*/
func (a *Client) GetLogsUsingGET(params *GetLogsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLogsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLogsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc/v1/clusters/{clusterId}/deployments/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLogsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLogsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TriggerAutomationSuiteUsingPOST triggers automation suite
*/
func (a *Client) TriggerAutomationSuiteUsingPOST(params *TriggerAutomationSuiteUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerAutomationSuiteUsingPOSTOK, *TriggerAutomationSuiteUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerAutomationSuiteUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "triggerAutomationSuiteUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc/v1/clusters/{clusterId}/deployments/qa/triggerSuite",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggerAutomationSuiteUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TriggerAutomationSuiteUsingPOSTOK:
		return value, nil, nil
	case *TriggerAutomationSuiteUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateSanityResultUsingPOST validates sanity result
*/
func (a *Client) ValidateSanityResultUsingPOST(params *ValidateSanityResultUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateSanityResultUsingPOSTOK, *ValidateSanityResultUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateSanityResultUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateSanityResultUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc/v1/clusters/{clusterId}/deployments/qa/validateSanityResult",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateSanityResultUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateSanityResultUsingPOSTOK:
		return value, nil, nil
	case *ValidateSanityResultUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
