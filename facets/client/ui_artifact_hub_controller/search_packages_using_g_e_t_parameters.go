// Code generated by go-swagger; DO NOT EDIT.

package ui_artifact_hub_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchPackagesUsingGETParams creates a new SearchPackagesUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchPackagesUsingGETParams() *SearchPackagesUsingGETParams {
	return &SearchPackagesUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchPackagesUsingGETParamsWithTimeout creates a new SearchPackagesUsingGETParams object
// with the ability to set a timeout on a request.
func NewSearchPackagesUsingGETParamsWithTimeout(timeout time.Duration) *SearchPackagesUsingGETParams {
	return &SearchPackagesUsingGETParams{
		timeout: timeout,
	}
}

// NewSearchPackagesUsingGETParamsWithContext creates a new SearchPackagesUsingGETParams object
// with the ability to set a context for a request.
func NewSearchPackagesUsingGETParamsWithContext(ctx context.Context) *SearchPackagesUsingGETParams {
	return &SearchPackagesUsingGETParams{
		Context: ctx,
	}
}

// NewSearchPackagesUsingGETParamsWithHTTPClient creates a new SearchPackagesUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchPackagesUsingGETParamsWithHTTPClient(client *http.Client) *SearchPackagesUsingGETParams {
	return &SearchPackagesUsingGETParams{
		HTTPClient: client,
	}
}

/*
SearchPackagesUsingGETParams contains all the parameters to send to the API endpoint

	for the search packages using g e t operation.

	Typically these are written to a http.Request.
*/
type SearchPackagesUsingGETParams struct {

	/* Category.

	   category

	   Format: int32
	*/
	Category *int32

	/* Facets.

	   facets
	*/
	Facets *bool

	/* Limit.

	   limit

	   Format: int32
	   Default: 20
	*/
	Limit *int32

	/* Offset.

	   offset

	   Format: int32
	*/
	Offset *int32

	/* Sort.

	   sort
	*/
	Sort *string

	/* TsQueryWeb.

	   tsQueryWeb
	*/
	TsQueryWeb *string

	/* Verified.

	   verified
	*/
	Verified *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search packages using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchPackagesUsingGETParams) WithDefaults() *SearchPackagesUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search packages using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchPackagesUsingGETParams) SetDefaults() {
	var (
		facetsDefault = bool(false)

		limitDefault = int32(20)

		offsetDefault = int32(0)
	)

	val := SearchPackagesUsingGETParams{
		Facets: &facetsDefault,
		Limit:  &limitDefault,
		Offset: &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) WithTimeout(timeout time.Duration) *SearchPackagesUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) WithContext(ctx context.Context) *SearchPackagesUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) WithHTTPClient(client *http.Client) *SearchPackagesUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategory adds the category to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) WithCategory(category *int32) *SearchPackagesUsingGETParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) SetCategory(category *int32) {
	o.Category = category
}

// WithFacets adds the facets to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) WithFacets(facets *bool) *SearchPackagesUsingGETParams {
	o.SetFacets(facets)
	return o
}

// SetFacets adds the facets to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) SetFacets(facets *bool) {
	o.Facets = facets
}

// WithLimit adds the limit to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) WithLimit(limit *int32) *SearchPackagesUsingGETParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) WithOffset(offset *int32) *SearchPackagesUsingGETParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithSort adds the sort to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) WithSort(sort *string) *SearchPackagesUsingGETParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithTsQueryWeb adds the tsQueryWeb to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) WithTsQueryWeb(tsQueryWeb *string) *SearchPackagesUsingGETParams {
	o.SetTsQueryWeb(tsQueryWeb)
	return o
}

// SetTsQueryWeb adds the tsQueryWeb to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) SetTsQueryWeb(tsQueryWeb *string) {
	o.TsQueryWeb = tsQueryWeb
}

// WithVerified adds the verified to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) WithVerified(verified *bool) *SearchPackagesUsingGETParams {
	o.SetVerified(verified)
	return o
}

// SetVerified adds the verified to the search packages using g e t params
func (o *SearchPackagesUsingGETParams) SetVerified(verified *bool) {
	o.Verified = verified
}

// WriteToRequest writes these params to a swagger request
func (o *SearchPackagesUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Category != nil {

		// query param category
		var qrCategory int32

		if o.Category != nil {
			qrCategory = *o.Category
		}
		qCategory := swag.FormatInt32(qrCategory)
		if qCategory != "" {

			if err := r.SetQueryParam("category", qCategory); err != nil {
				return err
			}
		}
	}

	if o.Facets != nil {

		// query param facets
		var qrFacets bool

		if o.Facets != nil {
			qrFacets = *o.Facets
		}
		qFacets := swag.FormatBool(qrFacets)
		if qFacets != "" {

			if err := r.SetQueryParam("facets", qFacets); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.TsQueryWeb != nil {

		// query param tsQueryWeb
		var qrTsQueryWeb string

		if o.TsQueryWeb != nil {
			qrTsQueryWeb = *o.TsQueryWeb
		}
		qTsQueryWeb := qrTsQueryWeb
		if qTsQueryWeb != "" {

			if err := r.SetQueryParam("tsQueryWeb", qTsQueryWeb); err != nil {
				return err
			}
		}
	}

	if o.Verified != nil {

		// query param verified
		var qrVerified bool

		if o.Verified != nil {
			qrVerified = *o.Verified
		}
		qVerified := swag.FormatBool(qrVerified)
		if qVerified != "" {

			if err := r.SetQueryParam("verified", qVerified); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
