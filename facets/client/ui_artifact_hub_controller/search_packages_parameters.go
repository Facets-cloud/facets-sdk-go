// Code generated by go-swagger; DO NOT EDIT.

package ui_artifact_hub_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSearchPackagesParams creates a new SearchPackagesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchPackagesParams() *SearchPackagesParams {
	return &SearchPackagesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchPackagesParamsWithTimeout creates a new SearchPackagesParams object
// with the ability to set a timeout on a request.
func NewSearchPackagesParamsWithTimeout(timeout time.Duration) *SearchPackagesParams {
	return &SearchPackagesParams{
		timeout: timeout,
	}
}

// NewSearchPackagesParamsWithContext creates a new SearchPackagesParams object
// with the ability to set a context for a request.
func NewSearchPackagesParamsWithContext(ctx context.Context) *SearchPackagesParams {
	return &SearchPackagesParams{
		Context: ctx,
	}
}

// NewSearchPackagesParamsWithHTTPClient creates a new SearchPackagesParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchPackagesParamsWithHTTPClient(client *http.Client) *SearchPackagesParams {
	return &SearchPackagesParams{
		HTTPClient: client,
	}
}

/*
SearchPackagesParams contains all the parameters to send to the API endpoint

	for the search packages operation.

	Typically these are written to a http.Request.
*/
type SearchPackagesParams struct {

	// Category.
	Category *string

	// Facets.
	Facets *string

	// Limit.
	Limit *string

	// Offset.
	Offset *string

	// Sort.
	Sort *string

	// TsQueryWeb.
	TsQueryWeb *string

	// Verified.
	Verified *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search packages params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchPackagesParams) WithDefaults() *SearchPackagesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search packages params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchPackagesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search packages params
func (o *SearchPackagesParams) WithTimeout(timeout time.Duration) *SearchPackagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search packages params
func (o *SearchPackagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search packages params
func (o *SearchPackagesParams) WithContext(ctx context.Context) *SearchPackagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search packages params
func (o *SearchPackagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search packages params
func (o *SearchPackagesParams) WithHTTPClient(client *http.Client) *SearchPackagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search packages params
func (o *SearchPackagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategory adds the category to the search packages params
func (o *SearchPackagesParams) WithCategory(category *string) *SearchPackagesParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the search packages params
func (o *SearchPackagesParams) SetCategory(category *string) {
	o.Category = category
}

// WithFacets adds the facets to the search packages params
func (o *SearchPackagesParams) WithFacets(facets *string) *SearchPackagesParams {
	o.SetFacets(facets)
	return o
}

// SetFacets adds the facets to the search packages params
func (o *SearchPackagesParams) SetFacets(facets *string) {
	o.Facets = facets
}

// WithLimit adds the limit to the search packages params
func (o *SearchPackagesParams) WithLimit(limit *string) *SearchPackagesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the search packages params
func (o *SearchPackagesParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithOffset adds the offset to the search packages params
func (o *SearchPackagesParams) WithOffset(offset *string) *SearchPackagesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the search packages params
func (o *SearchPackagesParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithSort adds the sort to the search packages params
func (o *SearchPackagesParams) WithSort(sort *string) *SearchPackagesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the search packages params
func (o *SearchPackagesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithTsQueryWeb adds the tsQueryWeb to the search packages params
func (o *SearchPackagesParams) WithTsQueryWeb(tsQueryWeb *string) *SearchPackagesParams {
	o.SetTsQueryWeb(tsQueryWeb)
	return o
}

// SetTsQueryWeb adds the tsQueryWeb to the search packages params
func (o *SearchPackagesParams) SetTsQueryWeb(tsQueryWeb *string) {
	o.TsQueryWeb = tsQueryWeb
}

// WithVerified adds the verified to the search packages params
func (o *SearchPackagesParams) WithVerified(verified *string) *SearchPackagesParams {
	o.SetVerified(verified)
	return o
}

// SetVerified adds the verified to the search packages params
func (o *SearchPackagesParams) SetVerified(verified *string) {
	o.Verified = verified
}

// WriteToRequest writes these params to a swagger request
func (o *SearchPackagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Category != nil {

		// query param category
		var qrCategory string

		if o.Category != nil {
			qrCategory = *o.Category
		}
		qCategory := qrCategory
		if qCategory != "" {

			if err := r.SetQueryParam("category", qCategory); err != nil {
				return err
			}
		}
	}

	if o.Facets != nil {

		// query param facets
		var qrFacets string

		if o.Facets != nil {
			qrFacets = *o.Facets
		}
		qFacets := qrFacets
		if qFacets != "" {

			if err := r.SetQueryParam("facets", qFacets); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.TsQueryWeb != nil {

		// query param tsQueryWeb
		var qrTsQueryWeb string

		if o.TsQueryWeb != nil {
			qrTsQueryWeb = *o.TsQueryWeb
		}
		qTsQueryWeb := qrTsQueryWeb
		if qTsQueryWeb != "" {

			if err := r.SetQueryParam("tsQueryWeb", qTsQueryWeb); err != nil {
				return err
			}
		}
	}

	if o.Verified != nil {

		// query param verified
		var qrVerified string

		if o.Verified != nil {
			qrVerified = *o.Verified
		}
		qVerified := qrVerified
		if qVerified != "" {

			if err := r.SetQueryParam("verified", qVerified); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
