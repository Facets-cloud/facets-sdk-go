// Code generated by go-swagger; DO NOT EDIT.

package intent_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllIntentsReader is a Reader for the GetAllIntents structure.
type GetAllIntentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllIntentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllIntentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllIntentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllIntentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAllIntentsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllIntentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/intents] getAllIntents", response, response.Code())
	}
}

// NewGetAllIntentsOK creates a GetAllIntentsOK with default headers values
func NewGetAllIntentsOK() *GetAllIntentsOK {
	return &GetAllIntentsOK{}
}

/*
GetAllIntentsOK describes a response with status code 200, with default header values.

OK
*/
type GetAllIntentsOK struct {
	Payload []*models.IntentResponseDTO
}

// IsSuccess returns true when this get all intents o k response has a 2xx status code
func (o *GetAllIntentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all intents o k response has a 3xx status code
func (o *GetAllIntentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all intents o k response has a 4xx status code
func (o *GetAllIntentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all intents o k response has a 5xx status code
func (o *GetAllIntentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all intents o k response a status code equal to that given
func (o *GetAllIntentsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all intents o k response
func (o *GetAllIntentsOK) Code() int {
	return 200
}

func (o *GetAllIntentsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsOK %s", 200, payload)
}

func (o *GetAllIntentsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsOK %s", 200, payload)
}

func (o *GetAllIntentsOK) GetPayload() []*models.IntentResponseDTO {
	return o.Payload
}

func (o *GetAllIntentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllIntentsBadRequest creates a GetAllIntentsBadRequest with default headers values
func NewGetAllIntentsBadRequest() *GetAllIntentsBadRequest {
	return &GetAllIntentsBadRequest{}
}

/*
GetAllIntentsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAllIntentsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all intents bad request response has a 2xx status code
func (o *GetAllIntentsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all intents bad request response has a 3xx status code
func (o *GetAllIntentsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all intents bad request response has a 4xx status code
func (o *GetAllIntentsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all intents bad request response has a 5xx status code
func (o *GetAllIntentsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all intents bad request response a status code equal to that given
func (o *GetAllIntentsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all intents bad request response
func (o *GetAllIntentsBadRequest) Code() int {
	return 400
}

func (o *GetAllIntentsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsBadRequest %s", 400, payload)
}

func (o *GetAllIntentsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsBadRequest %s", 400, payload)
}

func (o *GetAllIntentsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllIntentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllIntentsNotFound creates a GetAllIntentsNotFound with default headers values
func NewGetAllIntentsNotFound() *GetAllIntentsNotFound {
	return &GetAllIntentsNotFound{}
}

/*
GetAllIntentsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllIntentsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all intents not found response has a 2xx status code
func (o *GetAllIntentsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all intents not found response has a 3xx status code
func (o *GetAllIntentsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all intents not found response has a 4xx status code
func (o *GetAllIntentsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all intents not found response has a 5xx status code
func (o *GetAllIntentsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all intents not found response a status code equal to that given
func (o *GetAllIntentsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all intents not found response
func (o *GetAllIntentsNotFound) Code() int {
	return 404
}

func (o *GetAllIntentsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsNotFound %s", 404, payload)
}

func (o *GetAllIntentsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsNotFound %s", 404, payload)
}

func (o *GetAllIntentsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllIntentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllIntentsMethodNotAllowed creates a GetAllIntentsMethodNotAllowed with default headers values
func NewGetAllIntentsMethodNotAllowed() *GetAllIntentsMethodNotAllowed {
	return &GetAllIntentsMethodNotAllowed{}
}

/*
GetAllIntentsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAllIntentsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all intents method not allowed response has a 2xx status code
func (o *GetAllIntentsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all intents method not allowed response has a 3xx status code
func (o *GetAllIntentsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all intents method not allowed response has a 4xx status code
func (o *GetAllIntentsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all intents method not allowed response has a 5xx status code
func (o *GetAllIntentsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get all intents method not allowed response a status code equal to that given
func (o *GetAllIntentsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get all intents method not allowed response
func (o *GetAllIntentsMethodNotAllowed) Code() int {
	return 405
}

func (o *GetAllIntentsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsMethodNotAllowed %s", 405, payload)
}

func (o *GetAllIntentsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsMethodNotAllowed %s", 405, payload)
}

func (o *GetAllIntentsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllIntentsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllIntentsInternalServerError creates a GetAllIntentsInternalServerError with default headers values
func NewGetAllIntentsInternalServerError() *GetAllIntentsInternalServerError {
	return &GetAllIntentsInternalServerError{}
}

/*
GetAllIntentsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAllIntentsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all intents internal server error response has a 2xx status code
func (o *GetAllIntentsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all intents internal server error response has a 3xx status code
func (o *GetAllIntentsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all intents internal server error response has a 4xx status code
func (o *GetAllIntentsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all intents internal server error response has a 5xx status code
func (o *GetAllIntentsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all intents internal server error response a status code equal to that given
func (o *GetAllIntentsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all intents internal server error response
func (o *GetAllIntentsInternalServerError) Code() int {
	return 500
}

func (o *GetAllIntentsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsInternalServerError %s", 500, payload)
}

func (o *GetAllIntentsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsInternalServerError %s", 500, payload)
}

func (o *GetAllIntentsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllIntentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
