// Code generated by go-swagger; DO NOT EDIT.

package intent_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteIntentReader is a Reader for the DeleteIntent structure.
type DeleteIntentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteIntentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteIntentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteIntentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteIntentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteIntentMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteIntentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/intents/{name}] deleteIntent", response, response.Code())
	}
}

// NewDeleteIntentOK creates a DeleteIntentOK with default headers values
func NewDeleteIntentOK() *DeleteIntentOK {
	return &DeleteIntentOK{}
}

/*
DeleteIntentOK describes a response with status code 200, with default header values.

OK
*/
type DeleteIntentOK struct {
}

// IsSuccess returns true when this delete intent o k response has a 2xx status code
func (o *DeleteIntentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete intent o k response has a 3xx status code
func (o *DeleteIntentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete intent o k response has a 4xx status code
func (o *DeleteIntentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete intent o k response has a 5xx status code
func (o *DeleteIntentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete intent o k response a status code equal to that given
func (o *DeleteIntentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete intent o k response
func (o *DeleteIntentOK) Code() int {
	return 200
}

func (o *DeleteIntentOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentOK", 200)
}

func (o *DeleteIntentOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentOK", 200)
}

func (o *DeleteIntentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteIntentBadRequest creates a DeleteIntentBadRequest with default headers values
func NewDeleteIntentBadRequest() *DeleteIntentBadRequest {
	return &DeleteIntentBadRequest{}
}

/*
DeleteIntentBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteIntentBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete intent bad request response has a 2xx status code
func (o *DeleteIntentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete intent bad request response has a 3xx status code
func (o *DeleteIntentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete intent bad request response has a 4xx status code
func (o *DeleteIntentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete intent bad request response has a 5xx status code
func (o *DeleteIntentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete intent bad request response a status code equal to that given
func (o *DeleteIntentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete intent bad request response
func (o *DeleteIntentBadRequest) Code() int {
	return 400
}

func (o *DeleteIntentBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentBadRequest %s", 400, payload)
}

func (o *DeleteIntentBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentBadRequest %s", 400, payload)
}

func (o *DeleteIntentBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteIntentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIntentNotFound creates a DeleteIntentNotFound with default headers values
func NewDeleteIntentNotFound() *DeleteIntentNotFound {
	return &DeleteIntentNotFound{}
}

/*
DeleteIntentNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteIntentNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete intent not found response has a 2xx status code
func (o *DeleteIntentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete intent not found response has a 3xx status code
func (o *DeleteIntentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete intent not found response has a 4xx status code
func (o *DeleteIntentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete intent not found response has a 5xx status code
func (o *DeleteIntentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete intent not found response a status code equal to that given
func (o *DeleteIntentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete intent not found response
func (o *DeleteIntentNotFound) Code() int {
	return 404
}

func (o *DeleteIntentNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentNotFound %s", 404, payload)
}

func (o *DeleteIntentNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentNotFound %s", 404, payload)
}

func (o *DeleteIntentNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteIntentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIntentMethodNotAllowed creates a DeleteIntentMethodNotAllowed with default headers values
func NewDeleteIntentMethodNotAllowed() *DeleteIntentMethodNotAllowed {
	return &DeleteIntentMethodNotAllowed{}
}

/*
DeleteIntentMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DeleteIntentMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete intent method not allowed response has a 2xx status code
func (o *DeleteIntentMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete intent method not allowed response has a 3xx status code
func (o *DeleteIntentMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete intent method not allowed response has a 4xx status code
func (o *DeleteIntentMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete intent method not allowed response has a 5xx status code
func (o *DeleteIntentMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete intent method not allowed response a status code equal to that given
func (o *DeleteIntentMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the delete intent method not allowed response
func (o *DeleteIntentMethodNotAllowed) Code() int {
	return 405
}

func (o *DeleteIntentMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentMethodNotAllowed %s", 405, payload)
}

func (o *DeleteIntentMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentMethodNotAllowed %s", 405, payload)
}

func (o *DeleteIntentMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteIntentMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIntentInternalServerError creates a DeleteIntentInternalServerError with default headers values
func NewDeleteIntentInternalServerError() *DeleteIntentInternalServerError {
	return &DeleteIntentInternalServerError{}
}

/*
DeleteIntentInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteIntentInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete intent internal server error response has a 2xx status code
func (o *DeleteIntentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete intent internal server error response has a 3xx status code
func (o *DeleteIntentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete intent internal server error response has a 4xx status code
func (o *DeleteIntentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete intent internal server error response has a 5xx status code
func (o *DeleteIntentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete intent internal server error response a status code equal to that given
func (o *DeleteIntentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete intent internal server error response
func (o *DeleteIntentInternalServerError) Code() int {
	return 500
}

func (o *DeleteIntentInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentInternalServerError %s", 500, payload)
}

func (o *DeleteIntentInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentInternalServerError %s", 500, payload)
}

func (o *DeleteIntentInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteIntentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
