// Code generated by go-swagger; DO NOT EDIT.

package intent_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateOrUpdateIntentReader is a Reader for the CreateOrUpdateIntent structure.
type CreateOrUpdateIntentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateOrUpdateIntentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateOrUpdateIntentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateOrUpdateIntentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateOrUpdateIntentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreateOrUpdateIntentMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateOrUpdateIntentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/intents] createOrUpdateIntent", response, response.Code())
	}
}

// NewCreateOrUpdateIntentOK creates a CreateOrUpdateIntentOK with default headers values
func NewCreateOrUpdateIntentOK() *CreateOrUpdateIntentOK {
	return &CreateOrUpdateIntentOK{}
}

/*
CreateOrUpdateIntentOK describes a response with status code 200, with default header values.

OK
*/
type CreateOrUpdateIntentOK struct {
	Payload *models.IntentResponseDTO
}

// IsSuccess returns true when this create or update intent o k response has a 2xx status code
func (o *CreateOrUpdateIntentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create or update intent o k response has a 3xx status code
func (o *CreateOrUpdateIntentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create or update intent o k response has a 4xx status code
func (o *CreateOrUpdateIntentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create or update intent o k response has a 5xx status code
func (o *CreateOrUpdateIntentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create or update intent o k response a status code equal to that given
func (o *CreateOrUpdateIntentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create or update intent o k response
func (o *CreateOrUpdateIntentOK) Code() int {
	return 200
}

func (o *CreateOrUpdateIntentOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentOK %s", 200, payload)
}

func (o *CreateOrUpdateIntentOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentOK %s", 200, payload)
}

func (o *CreateOrUpdateIntentOK) GetPayload() *models.IntentResponseDTO {
	return o.Payload
}

func (o *CreateOrUpdateIntentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IntentResponseDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrUpdateIntentBadRequest creates a CreateOrUpdateIntentBadRequest with default headers values
func NewCreateOrUpdateIntentBadRequest() *CreateOrUpdateIntentBadRequest {
	return &CreateOrUpdateIntentBadRequest{}
}

/*
CreateOrUpdateIntentBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateOrUpdateIntentBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create or update intent bad request response has a 2xx status code
func (o *CreateOrUpdateIntentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create or update intent bad request response has a 3xx status code
func (o *CreateOrUpdateIntentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create or update intent bad request response has a 4xx status code
func (o *CreateOrUpdateIntentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create or update intent bad request response has a 5xx status code
func (o *CreateOrUpdateIntentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create or update intent bad request response a status code equal to that given
func (o *CreateOrUpdateIntentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create or update intent bad request response
func (o *CreateOrUpdateIntentBadRequest) Code() int {
	return 400
}

func (o *CreateOrUpdateIntentBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentBadRequest %s", 400, payload)
}

func (o *CreateOrUpdateIntentBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentBadRequest %s", 400, payload)
}

func (o *CreateOrUpdateIntentBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateOrUpdateIntentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrUpdateIntentNotFound creates a CreateOrUpdateIntentNotFound with default headers values
func NewCreateOrUpdateIntentNotFound() *CreateOrUpdateIntentNotFound {
	return &CreateOrUpdateIntentNotFound{}
}

/*
CreateOrUpdateIntentNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateOrUpdateIntentNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create or update intent not found response has a 2xx status code
func (o *CreateOrUpdateIntentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create or update intent not found response has a 3xx status code
func (o *CreateOrUpdateIntentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create or update intent not found response has a 4xx status code
func (o *CreateOrUpdateIntentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create or update intent not found response has a 5xx status code
func (o *CreateOrUpdateIntentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create or update intent not found response a status code equal to that given
func (o *CreateOrUpdateIntentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create or update intent not found response
func (o *CreateOrUpdateIntentNotFound) Code() int {
	return 404
}

func (o *CreateOrUpdateIntentNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentNotFound %s", 404, payload)
}

func (o *CreateOrUpdateIntentNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentNotFound %s", 404, payload)
}

func (o *CreateOrUpdateIntentNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateOrUpdateIntentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrUpdateIntentMethodNotAllowed creates a CreateOrUpdateIntentMethodNotAllowed with default headers values
func NewCreateOrUpdateIntentMethodNotAllowed() *CreateOrUpdateIntentMethodNotAllowed {
	return &CreateOrUpdateIntentMethodNotAllowed{}
}

/*
CreateOrUpdateIntentMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type CreateOrUpdateIntentMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create or update intent method not allowed response has a 2xx status code
func (o *CreateOrUpdateIntentMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create or update intent method not allowed response has a 3xx status code
func (o *CreateOrUpdateIntentMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create or update intent method not allowed response has a 4xx status code
func (o *CreateOrUpdateIntentMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create or update intent method not allowed response has a 5xx status code
func (o *CreateOrUpdateIntentMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this create or update intent method not allowed response a status code equal to that given
func (o *CreateOrUpdateIntentMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the create or update intent method not allowed response
func (o *CreateOrUpdateIntentMethodNotAllowed) Code() int {
	return 405
}

func (o *CreateOrUpdateIntentMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentMethodNotAllowed %s", 405, payload)
}

func (o *CreateOrUpdateIntentMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentMethodNotAllowed %s", 405, payload)
}

func (o *CreateOrUpdateIntentMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateOrUpdateIntentMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrUpdateIntentInternalServerError creates a CreateOrUpdateIntentInternalServerError with default headers values
func NewCreateOrUpdateIntentInternalServerError() *CreateOrUpdateIntentInternalServerError {
	return &CreateOrUpdateIntentInternalServerError{}
}

/*
CreateOrUpdateIntentInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateOrUpdateIntentInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create or update intent internal server error response has a 2xx status code
func (o *CreateOrUpdateIntentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create or update intent internal server error response has a 3xx status code
func (o *CreateOrUpdateIntentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create or update intent internal server error response has a 4xx status code
func (o *CreateOrUpdateIntentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create or update intent internal server error response has a 5xx status code
func (o *CreateOrUpdateIntentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create or update intent internal server error response a status code equal to that given
func (o *CreateOrUpdateIntentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create or update intent internal server error response
func (o *CreateOrUpdateIntentInternalServerError) Code() int {
	return 500
}

func (o *CreateOrUpdateIntentInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentInternalServerError %s", 500, payload)
}

func (o *CreateOrUpdateIntentInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentInternalServerError %s", 500, payload)
}

func (o *CreateOrUpdateIntentInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateOrUpdateIntentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
