// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteSubscriptionUsingDELETEReader is a Reader for the DeleteSubscriptionUsingDELETE structure.
type DeleteSubscriptionUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSubscriptionUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSubscriptionUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteSubscriptionUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteSubscriptionUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteSubscriptionUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}] deleteSubscriptionUsingDELETE", response, response.Code())
	}
}

// NewDeleteSubscriptionUsingDELETEOK creates a DeleteSubscriptionUsingDELETEOK with default headers values
func NewDeleteSubscriptionUsingDELETEOK() *DeleteSubscriptionUsingDELETEOK {
	return &DeleteSubscriptionUsingDELETEOK{}
}

/*
DeleteSubscriptionUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteSubscriptionUsingDELETEOK struct {
	Payload []*models.Subscription
}

// IsSuccess returns true when this delete subscription using d e l e t e o k response has a 2xx status code
func (o *DeleteSubscriptionUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete subscription using d e l e t e o k response has a 3xx status code
func (o *DeleteSubscriptionUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription using d e l e t e o k response has a 4xx status code
func (o *DeleteSubscriptionUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete subscription using d e l e t e o k response has a 5xx status code
func (o *DeleteSubscriptionUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subscription using d e l e t e o k response a status code equal to that given
func (o *DeleteSubscriptionUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete subscription using d e l e t e o k response
func (o *DeleteSubscriptionUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteSubscriptionUsingDELETEOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionUsingDELETEOK %s", 200, payload)
}

func (o *DeleteSubscriptionUsingDELETEOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionUsingDELETEOK %s", 200, payload)
}

func (o *DeleteSubscriptionUsingDELETEOK) GetPayload() []*models.Subscription {
	return o.Payload
}

func (o *DeleteSubscriptionUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionUsingDELETENoContent creates a DeleteSubscriptionUsingDELETENoContent with default headers values
func NewDeleteSubscriptionUsingDELETENoContent() *DeleteSubscriptionUsingDELETENoContent {
	return &DeleteSubscriptionUsingDELETENoContent{}
}

/*
DeleteSubscriptionUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteSubscriptionUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete subscription using d e l e t e no content response has a 2xx status code
func (o *DeleteSubscriptionUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete subscription using d e l e t e no content response has a 3xx status code
func (o *DeleteSubscriptionUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription using d e l e t e no content response has a 4xx status code
func (o *DeleteSubscriptionUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete subscription using d e l e t e no content response has a 5xx status code
func (o *DeleteSubscriptionUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subscription using d e l e t e no content response a status code equal to that given
func (o *DeleteSubscriptionUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete subscription using d e l e t e no content response
func (o *DeleteSubscriptionUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteSubscriptionUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionUsingDELETENoContent", 204)
}

func (o *DeleteSubscriptionUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionUsingDELETENoContent", 204)
}

func (o *DeleteSubscriptionUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSubscriptionUsingDELETEUnauthorized creates a DeleteSubscriptionUsingDELETEUnauthorized with default headers values
func NewDeleteSubscriptionUsingDELETEUnauthorized() *DeleteSubscriptionUsingDELETEUnauthorized {
	return &DeleteSubscriptionUsingDELETEUnauthorized{}
}

/*
DeleteSubscriptionUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteSubscriptionUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete subscription using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteSubscriptionUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subscription using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteSubscriptionUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteSubscriptionUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete subscription using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteSubscriptionUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subscription using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteSubscriptionUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete subscription using d e l e t e unauthorized response
func (o *DeleteSubscriptionUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteSubscriptionUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionUsingDELETEUnauthorized", 401)
}

func (o *DeleteSubscriptionUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionUsingDELETEUnauthorized", 401)
}

func (o *DeleteSubscriptionUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSubscriptionUsingDELETEForbidden creates a DeleteSubscriptionUsingDELETEForbidden with default headers values
func NewDeleteSubscriptionUsingDELETEForbidden() *DeleteSubscriptionUsingDELETEForbidden {
	return &DeleteSubscriptionUsingDELETEForbidden{}
}

/*
DeleteSubscriptionUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteSubscriptionUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete subscription using d e l e t e forbidden response has a 2xx status code
func (o *DeleteSubscriptionUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subscription using d e l e t e forbidden response has a 3xx status code
func (o *DeleteSubscriptionUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription using d e l e t e forbidden response has a 4xx status code
func (o *DeleteSubscriptionUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete subscription using d e l e t e forbidden response has a 5xx status code
func (o *DeleteSubscriptionUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subscription using d e l e t e forbidden response a status code equal to that given
func (o *DeleteSubscriptionUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete subscription using d e l e t e forbidden response
func (o *DeleteSubscriptionUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteSubscriptionUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionUsingDELETEForbidden", 403)
}

func (o *DeleteSubscriptionUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionUsingDELETEForbidden", 403)
}

func (o *DeleteSubscriptionUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
