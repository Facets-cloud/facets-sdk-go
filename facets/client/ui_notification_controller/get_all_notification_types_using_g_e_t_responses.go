// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllNotificationTypesUsingGETReader is a Reader for the GetAllNotificationTypesUsingGET structure.
type GetAllNotificationTypesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllNotificationTypesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllNotificationTypesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllNotificationTypesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllNotificationTypesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllNotificationTypesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/notification/notificationTypes] getAllNotificationTypesUsingGET", response, response.Code())
	}
}

// NewGetAllNotificationTypesUsingGETOK creates a GetAllNotificationTypesUsingGETOK with default headers values
func NewGetAllNotificationTypesUsingGETOK() *GetAllNotificationTypesUsingGETOK {
	return &GetAllNotificationTypesUsingGETOK{}
}

/*
GetAllNotificationTypesUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllNotificationTypesUsingGETOK struct {
	Payload []*models.NotificationTypeResponse
}

// IsSuccess returns true when this get all notification types using g e t o k response has a 2xx status code
func (o *GetAllNotificationTypesUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all notification types using g e t o k response has a 3xx status code
func (o *GetAllNotificationTypesUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all notification types using g e t o k response has a 4xx status code
func (o *GetAllNotificationTypesUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all notification types using g e t o k response has a 5xx status code
func (o *GetAllNotificationTypesUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all notification types using g e t o k response a status code equal to that given
func (o *GetAllNotificationTypesUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all notification types using g e t o k response
func (o *GetAllNotificationTypesUsingGETOK) Code() int {
	return 200
}

func (o *GetAllNotificationTypesUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesUsingGETOK %s", 200, payload)
}

func (o *GetAllNotificationTypesUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesUsingGETOK %s", 200, payload)
}

func (o *GetAllNotificationTypesUsingGETOK) GetPayload() []*models.NotificationTypeResponse {
	return o.Payload
}

func (o *GetAllNotificationTypesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllNotificationTypesUsingGETUnauthorized creates a GetAllNotificationTypesUsingGETUnauthorized with default headers values
func NewGetAllNotificationTypesUsingGETUnauthorized() *GetAllNotificationTypesUsingGETUnauthorized {
	return &GetAllNotificationTypesUsingGETUnauthorized{}
}

/*
GetAllNotificationTypesUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllNotificationTypesUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all notification types using g e t unauthorized response has a 2xx status code
func (o *GetAllNotificationTypesUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all notification types using g e t unauthorized response has a 3xx status code
func (o *GetAllNotificationTypesUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all notification types using g e t unauthorized response has a 4xx status code
func (o *GetAllNotificationTypesUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all notification types using g e t unauthorized response has a 5xx status code
func (o *GetAllNotificationTypesUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all notification types using g e t unauthorized response a status code equal to that given
func (o *GetAllNotificationTypesUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all notification types using g e t unauthorized response
func (o *GetAllNotificationTypesUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllNotificationTypesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesUsingGETUnauthorized", 401)
}

func (o *GetAllNotificationTypesUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesUsingGETUnauthorized", 401)
}

func (o *GetAllNotificationTypesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllNotificationTypesUsingGETForbidden creates a GetAllNotificationTypesUsingGETForbidden with default headers values
func NewGetAllNotificationTypesUsingGETForbidden() *GetAllNotificationTypesUsingGETForbidden {
	return &GetAllNotificationTypesUsingGETForbidden{}
}

/*
GetAllNotificationTypesUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllNotificationTypesUsingGETForbidden struct {
}

// IsSuccess returns true when this get all notification types using g e t forbidden response has a 2xx status code
func (o *GetAllNotificationTypesUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all notification types using g e t forbidden response has a 3xx status code
func (o *GetAllNotificationTypesUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all notification types using g e t forbidden response has a 4xx status code
func (o *GetAllNotificationTypesUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all notification types using g e t forbidden response has a 5xx status code
func (o *GetAllNotificationTypesUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all notification types using g e t forbidden response a status code equal to that given
func (o *GetAllNotificationTypesUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all notification types using g e t forbidden response
func (o *GetAllNotificationTypesUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllNotificationTypesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesUsingGETForbidden", 403)
}

func (o *GetAllNotificationTypesUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesUsingGETForbidden", 403)
}

func (o *GetAllNotificationTypesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllNotificationTypesUsingGETNotFound creates a GetAllNotificationTypesUsingGETNotFound with default headers values
func NewGetAllNotificationTypesUsingGETNotFound() *GetAllNotificationTypesUsingGETNotFound {
	return &GetAllNotificationTypesUsingGETNotFound{}
}

/*
GetAllNotificationTypesUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllNotificationTypesUsingGETNotFound struct {
}

// IsSuccess returns true when this get all notification types using g e t not found response has a 2xx status code
func (o *GetAllNotificationTypesUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all notification types using g e t not found response has a 3xx status code
func (o *GetAllNotificationTypesUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all notification types using g e t not found response has a 4xx status code
func (o *GetAllNotificationTypesUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all notification types using g e t not found response has a 5xx status code
func (o *GetAllNotificationTypesUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all notification types using g e t not found response a status code equal to that given
func (o *GetAllNotificationTypesUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all notification types using g e t not found response
func (o *GetAllNotificationTypesUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllNotificationTypesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesUsingGETNotFound", 404)
}

func (o *GetAllNotificationTypesUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesUsingGETNotFound", 404)
}

func (o *GetAllNotificationTypesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
