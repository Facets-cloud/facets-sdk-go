// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetFiltersForSubscriptionsParams creates a new GetFiltersForSubscriptionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFiltersForSubscriptionsParams() *GetFiltersForSubscriptionsParams {
	return &GetFiltersForSubscriptionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFiltersForSubscriptionsParamsWithTimeout creates a new GetFiltersForSubscriptionsParams object
// with the ability to set a timeout on a request.
func NewGetFiltersForSubscriptionsParamsWithTimeout(timeout time.Duration) *GetFiltersForSubscriptionsParams {
	return &GetFiltersForSubscriptionsParams{
		timeout: timeout,
	}
}

// NewGetFiltersForSubscriptionsParamsWithContext creates a new GetFiltersForSubscriptionsParams object
// with the ability to set a context for a request.
func NewGetFiltersForSubscriptionsParamsWithContext(ctx context.Context) *GetFiltersForSubscriptionsParams {
	return &GetFiltersForSubscriptionsParams{
		Context: ctx,
	}
}

// NewGetFiltersForSubscriptionsParamsWithHTTPClient creates a new GetFiltersForSubscriptionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFiltersForSubscriptionsParamsWithHTTPClient(client *http.Client) *GetFiltersForSubscriptionsParams {
	return &GetFiltersForSubscriptionsParams{
		HTTPClient: client,
	}
}

/*
GetFiltersForSubscriptionsParams contains all the parameters to send to the API endpoint

	for the get filters for subscriptions operation.

	Typically these are written to a http.Request.
*/
type GetFiltersForSubscriptionsParams struct {

	// Body.
	Body map[string][]string

	// NotificationType.
	NotificationType string

	// TagName.
	TagName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get filters for subscriptions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFiltersForSubscriptionsParams) WithDefaults() *GetFiltersForSubscriptionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get filters for subscriptions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFiltersForSubscriptionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get filters for subscriptions params
func (o *GetFiltersForSubscriptionsParams) WithTimeout(timeout time.Duration) *GetFiltersForSubscriptionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get filters for subscriptions params
func (o *GetFiltersForSubscriptionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get filters for subscriptions params
func (o *GetFiltersForSubscriptionsParams) WithContext(ctx context.Context) *GetFiltersForSubscriptionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get filters for subscriptions params
func (o *GetFiltersForSubscriptionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get filters for subscriptions params
func (o *GetFiltersForSubscriptionsParams) WithHTTPClient(client *http.Client) *GetFiltersForSubscriptionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get filters for subscriptions params
func (o *GetFiltersForSubscriptionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the get filters for subscriptions params
func (o *GetFiltersForSubscriptionsParams) WithBody(body map[string][]string) *GetFiltersForSubscriptionsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the get filters for subscriptions params
func (o *GetFiltersForSubscriptionsParams) SetBody(body map[string][]string) {
	o.Body = body
}

// WithNotificationType adds the notificationType to the get filters for subscriptions params
func (o *GetFiltersForSubscriptionsParams) WithNotificationType(notificationType string) *GetFiltersForSubscriptionsParams {
	o.SetNotificationType(notificationType)
	return o
}

// SetNotificationType adds the notificationType to the get filters for subscriptions params
func (o *GetFiltersForSubscriptionsParams) SetNotificationType(notificationType string) {
	o.NotificationType = notificationType
}

// WithTagName adds the tagName to the get filters for subscriptions params
func (o *GetFiltersForSubscriptionsParams) WithTagName(tagName string) *GetFiltersForSubscriptionsParams {
	o.SetTagName(tagName)
	return o
}

// SetTagName adds the tagName to the get filters for subscriptions params
func (o *GetFiltersForSubscriptionsParams) SetTagName(tagName string) {
	o.TagName = tagName
}

// WriteToRequest writes these params to a swagger request
func (o *GetFiltersForSubscriptionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param notificationType
	if err := r.SetPathParam("notificationType", o.NotificationType); err != nil {
		return err
	}

	// path param tagName
	if err := r.SetPathParam("tagName", o.TagName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
