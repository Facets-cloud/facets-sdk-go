// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllChannelTypesUsingGETReader is a Reader for the GetAllChannelTypesUsingGET structure.
type GetAllChannelTypesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllChannelTypesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllChannelTypesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllChannelTypesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllChannelTypesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllChannelTypesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/notification/channelTypes] getAllChannelTypesUsingGET", response, response.Code())
	}
}

// NewGetAllChannelTypesUsingGETOK creates a GetAllChannelTypesUsingGETOK with default headers values
func NewGetAllChannelTypesUsingGETOK() *GetAllChannelTypesUsingGETOK {
	return &GetAllChannelTypesUsingGETOK{}
}

/*
GetAllChannelTypesUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllChannelTypesUsingGETOK struct {
	Payload []*models.ChannelTypePayload
}

// IsSuccess returns true when this get all channel types using g e t o k response has a 2xx status code
func (o *GetAllChannelTypesUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all channel types using g e t o k response has a 3xx status code
func (o *GetAllChannelTypesUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channel types using g e t o k response has a 4xx status code
func (o *GetAllChannelTypesUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all channel types using g e t o k response has a 5xx status code
func (o *GetAllChannelTypesUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all channel types using g e t o k response a status code equal to that given
func (o *GetAllChannelTypesUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all channel types using g e t o k response
func (o *GetAllChannelTypesUsingGETOK) Code() int {
	return 200
}

func (o *GetAllChannelTypesUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesUsingGETOK %s", 200, payload)
}

func (o *GetAllChannelTypesUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesUsingGETOK %s", 200, payload)
}

func (o *GetAllChannelTypesUsingGETOK) GetPayload() []*models.ChannelTypePayload {
	return o.Payload
}

func (o *GetAllChannelTypesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllChannelTypesUsingGETUnauthorized creates a GetAllChannelTypesUsingGETUnauthorized with default headers values
func NewGetAllChannelTypesUsingGETUnauthorized() *GetAllChannelTypesUsingGETUnauthorized {
	return &GetAllChannelTypesUsingGETUnauthorized{}
}

/*
GetAllChannelTypesUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllChannelTypesUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all channel types using g e t unauthorized response has a 2xx status code
func (o *GetAllChannelTypesUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all channel types using g e t unauthorized response has a 3xx status code
func (o *GetAllChannelTypesUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channel types using g e t unauthorized response has a 4xx status code
func (o *GetAllChannelTypesUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all channel types using g e t unauthorized response has a 5xx status code
func (o *GetAllChannelTypesUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all channel types using g e t unauthorized response a status code equal to that given
func (o *GetAllChannelTypesUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all channel types using g e t unauthorized response
func (o *GetAllChannelTypesUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllChannelTypesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesUsingGETUnauthorized", 401)
}

func (o *GetAllChannelTypesUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesUsingGETUnauthorized", 401)
}

func (o *GetAllChannelTypesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllChannelTypesUsingGETForbidden creates a GetAllChannelTypesUsingGETForbidden with default headers values
func NewGetAllChannelTypesUsingGETForbidden() *GetAllChannelTypesUsingGETForbidden {
	return &GetAllChannelTypesUsingGETForbidden{}
}

/*
GetAllChannelTypesUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllChannelTypesUsingGETForbidden struct {
}

// IsSuccess returns true when this get all channel types using g e t forbidden response has a 2xx status code
func (o *GetAllChannelTypesUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all channel types using g e t forbidden response has a 3xx status code
func (o *GetAllChannelTypesUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channel types using g e t forbidden response has a 4xx status code
func (o *GetAllChannelTypesUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all channel types using g e t forbidden response has a 5xx status code
func (o *GetAllChannelTypesUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all channel types using g e t forbidden response a status code equal to that given
func (o *GetAllChannelTypesUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all channel types using g e t forbidden response
func (o *GetAllChannelTypesUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllChannelTypesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesUsingGETForbidden", 403)
}

func (o *GetAllChannelTypesUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesUsingGETForbidden", 403)
}

func (o *GetAllChannelTypesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllChannelTypesUsingGETNotFound creates a GetAllChannelTypesUsingGETNotFound with default headers values
func NewGetAllChannelTypesUsingGETNotFound() *GetAllChannelTypesUsingGETNotFound {
	return &GetAllChannelTypesUsingGETNotFound{}
}

/*
GetAllChannelTypesUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllChannelTypesUsingGETNotFound struct {
}

// IsSuccess returns true when this get all channel types using g e t not found response has a 2xx status code
func (o *GetAllChannelTypesUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all channel types using g e t not found response has a 3xx status code
func (o *GetAllChannelTypesUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channel types using g e t not found response has a 4xx status code
func (o *GetAllChannelTypesUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all channel types using g e t not found response has a 5xx status code
func (o *GetAllChannelTypesUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all channel types using g e t not found response a status code equal to that given
func (o *GetAllChannelTypesUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all channel types using g e t not found response
func (o *GetAllChannelTypesUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllChannelTypesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesUsingGETNotFound", 404)
}

func (o *GetAllChannelTypesUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesUsingGETNotFound", 404)
}

func (o *GetAllChannelTypesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
