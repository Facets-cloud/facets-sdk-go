// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteNotificationChannelReader is a Reader for the DeleteNotificationChannel structure.
type DeleteNotificationChannelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteNotificationChannelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteNotificationChannelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteNotificationChannelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteNotificationChannelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteNotificationChannelMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteNotificationChannelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/notification/channels/{channelId}] deleteNotificationChannel", response, response.Code())
	}
}

// NewDeleteNotificationChannelOK creates a DeleteNotificationChannelOK with default headers values
func NewDeleteNotificationChannelOK() *DeleteNotificationChannelOK {
	return &DeleteNotificationChannelOK{}
}

/*
DeleteNotificationChannelOK describes a response with status code 200, with default header values.

OK
*/
type DeleteNotificationChannelOK struct {
	Payload []*models.NotificationChannel
}

// IsSuccess returns true when this delete notification channel o k response has a 2xx status code
func (o *DeleteNotificationChannelOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete notification channel o k response has a 3xx status code
func (o *DeleteNotificationChannelOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notification channel o k response has a 4xx status code
func (o *DeleteNotificationChannelOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete notification channel o k response has a 5xx status code
func (o *DeleteNotificationChannelOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete notification channel o k response a status code equal to that given
func (o *DeleteNotificationChannelOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete notification channel o k response
func (o *DeleteNotificationChannelOK) Code() int {
	return 200
}

func (o *DeleteNotificationChannelOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelOK %s", 200, payload)
}

func (o *DeleteNotificationChannelOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelOK %s", 200, payload)
}

func (o *DeleteNotificationChannelOK) GetPayload() []*models.NotificationChannel {
	return o.Payload
}

func (o *DeleteNotificationChannelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotificationChannelBadRequest creates a DeleteNotificationChannelBadRequest with default headers values
func NewDeleteNotificationChannelBadRequest() *DeleteNotificationChannelBadRequest {
	return &DeleteNotificationChannelBadRequest{}
}

/*
DeleteNotificationChannelBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteNotificationChannelBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete notification channel bad request response has a 2xx status code
func (o *DeleteNotificationChannelBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete notification channel bad request response has a 3xx status code
func (o *DeleteNotificationChannelBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notification channel bad request response has a 4xx status code
func (o *DeleteNotificationChannelBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete notification channel bad request response has a 5xx status code
func (o *DeleteNotificationChannelBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete notification channel bad request response a status code equal to that given
func (o *DeleteNotificationChannelBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete notification channel bad request response
func (o *DeleteNotificationChannelBadRequest) Code() int {
	return 400
}

func (o *DeleteNotificationChannelBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelBadRequest %s", 400, payload)
}

func (o *DeleteNotificationChannelBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelBadRequest %s", 400, payload)
}

func (o *DeleteNotificationChannelBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteNotificationChannelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotificationChannelNotFound creates a DeleteNotificationChannelNotFound with default headers values
func NewDeleteNotificationChannelNotFound() *DeleteNotificationChannelNotFound {
	return &DeleteNotificationChannelNotFound{}
}

/*
DeleteNotificationChannelNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteNotificationChannelNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete notification channel not found response has a 2xx status code
func (o *DeleteNotificationChannelNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete notification channel not found response has a 3xx status code
func (o *DeleteNotificationChannelNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notification channel not found response has a 4xx status code
func (o *DeleteNotificationChannelNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete notification channel not found response has a 5xx status code
func (o *DeleteNotificationChannelNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete notification channel not found response a status code equal to that given
func (o *DeleteNotificationChannelNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete notification channel not found response
func (o *DeleteNotificationChannelNotFound) Code() int {
	return 404
}

func (o *DeleteNotificationChannelNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelNotFound %s", 404, payload)
}

func (o *DeleteNotificationChannelNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelNotFound %s", 404, payload)
}

func (o *DeleteNotificationChannelNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteNotificationChannelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotificationChannelMethodNotAllowed creates a DeleteNotificationChannelMethodNotAllowed with default headers values
func NewDeleteNotificationChannelMethodNotAllowed() *DeleteNotificationChannelMethodNotAllowed {
	return &DeleteNotificationChannelMethodNotAllowed{}
}

/*
DeleteNotificationChannelMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DeleteNotificationChannelMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete notification channel method not allowed response has a 2xx status code
func (o *DeleteNotificationChannelMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete notification channel method not allowed response has a 3xx status code
func (o *DeleteNotificationChannelMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notification channel method not allowed response has a 4xx status code
func (o *DeleteNotificationChannelMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete notification channel method not allowed response has a 5xx status code
func (o *DeleteNotificationChannelMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete notification channel method not allowed response a status code equal to that given
func (o *DeleteNotificationChannelMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the delete notification channel method not allowed response
func (o *DeleteNotificationChannelMethodNotAllowed) Code() int {
	return 405
}

func (o *DeleteNotificationChannelMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelMethodNotAllowed %s", 405, payload)
}

func (o *DeleteNotificationChannelMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelMethodNotAllowed %s", 405, payload)
}

func (o *DeleteNotificationChannelMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteNotificationChannelMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotificationChannelInternalServerError creates a DeleteNotificationChannelInternalServerError with default headers values
func NewDeleteNotificationChannelInternalServerError() *DeleteNotificationChannelInternalServerError {
	return &DeleteNotificationChannelInternalServerError{}
}

/*
DeleteNotificationChannelInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteNotificationChannelInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete notification channel internal server error response has a 2xx status code
func (o *DeleteNotificationChannelInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete notification channel internal server error response has a 3xx status code
func (o *DeleteNotificationChannelInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notification channel internal server error response has a 4xx status code
func (o *DeleteNotificationChannelInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete notification channel internal server error response has a 5xx status code
func (o *DeleteNotificationChannelInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete notification channel internal server error response a status code equal to that given
func (o *DeleteNotificationChannelInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete notification channel internal server error response
func (o *DeleteNotificationChannelInternalServerError) Code() int {
	return 500
}

func (o *DeleteNotificationChannelInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelInternalServerError %s", 500, payload)
}

func (o *DeleteNotificationChannelInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelInternalServerError %s", 500, payload)
}

func (o *DeleteNotificationChannelInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteNotificationChannelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
