// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui notification controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui notification controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui notification controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui notification controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNotificationChannel(params *CreateNotificationChannelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNotificationChannelOK, error)

	CreateSubscription1(params *CreateSubscription1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscription1OK, error)

	DeleteNotificationChannel(params *DeleteNotificationChannelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNotificationChannelOK, error)

	DeleteSubscription(params *DeleteSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSubscriptionOK, error)

	EditNotificationChannel(params *EditNotificationChannelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditNotificationChannelOK, error)

	EditSubscription(params *EditSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditSubscriptionOK, error)

	GetAllChannelTypes(params *GetAllChannelTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllChannelTypesOK, error)

	GetAllChannels(params *GetAllChannelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllChannelsOK, error)

	GetAllNotificationTags(params *GetAllNotificationTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllNotificationTagsOK, error)

	GetAllNotificationTypes(params *GetAllNotificationTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllNotificationTypesOK, error)

	GetAllSubscriptions1(params *GetAllSubscriptions1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSubscriptions1OK, error)

	GetChannel(params *GetChannelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetChannelOK, error)

	GetFiltersForSubscriptions(params *GetFiltersForSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFiltersForSubscriptionsOK, error)

	GetNotificationTagsForNotificationType(params *GetNotificationTagsForNotificationTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNotificationTagsForNotificationTypeOK, error)

	GetSubscription(params *GetSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionOK, error)

	GetSubscriptionAttributes(params *GetSubscriptionAttributesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionAttributesOK, error)

	TestNotificationChannel(params *TestNotificationChannelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TestNotificationChannelOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateNotificationChannel create notification channel API
*/
func (a *Client) CreateNotificationChannel(params *CreateNotificationChannelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNotificationChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNotificationChannelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNotificationChannel",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/notification/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNotificationChannelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNotificationChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNotificationChannel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSubscription1 create subscription 1 API
*/
func (a *Client) CreateSubscription1(params *CreateSubscription1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscription1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubscription1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSubscription_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/notification/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubscription1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSubscription1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSubscription_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteNotificationChannel delete notification channel API
*/
func (a *Client) DeleteNotificationChannel(params *DeleteNotificationChannelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNotificationChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNotificationChannelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNotificationChannel",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/notification/channels/{channelId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNotificationChannelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNotificationChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNotificationChannel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSubscription delete subscription API
*/
func (a *Client) DeleteSubscription(params *DeleteSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSubscription",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/notification/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EditNotificationChannel edit notification channel API
*/
func (a *Client) EditNotificationChannel(params *EditNotificationChannelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditNotificationChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditNotificationChannelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editNotificationChannel",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/notification/channels/{channelId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditNotificationChannelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditNotificationChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for editNotificationChannel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EditSubscription edit subscription API
*/
func (a *Client) EditSubscription(params *EditSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editSubscription",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/notification/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for editSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllChannelTypes get all channel types API
*/
func (a *Client) GetAllChannelTypes(params *GetAllChannelTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllChannelTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllChannelTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllChannelTypes",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/channelTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllChannelTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllChannelTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllChannelTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllChannels get all channels API
*/
func (a *Client) GetAllChannels(params *GetAllChannelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllChannelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllChannelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllChannels",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllChannelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllChannelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllChannels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllNotificationTags get all notification tags API
*/
func (a *Client) GetAllNotificationTags(params *GetAllNotificationTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllNotificationTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllNotificationTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllNotificationTags",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/notificationTags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllNotificationTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllNotificationTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllNotificationTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllNotificationTypes get all notification types API
*/
func (a *Client) GetAllNotificationTypes(params *GetAllNotificationTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllNotificationTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllNotificationTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllNotificationTypes",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/notificationTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllNotificationTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllNotificationTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllNotificationTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSubscriptions1 get all subscriptions 1 API
*/
func (a *Client) GetAllSubscriptions1(params *GetAllSubscriptions1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSubscriptions1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSubscriptions1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSubscriptions_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllSubscriptions1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSubscriptions1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSubscriptions_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetChannel get channel API
*/
func (a *Client) GetChannel(params *GetChannelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChannelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChannel",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/channels/{channelId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetChannelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChannel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFiltersForSubscriptions get filters for subscriptions API
*/
func (a *Client) GetFiltersForSubscriptions(params *GetFiltersForSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFiltersForSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFiltersForSubscriptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFiltersForSubscriptions",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/notification/{notificationType}/tag/{tagName}/values/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFiltersForSubscriptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFiltersForSubscriptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFiltersForSubscriptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNotificationTagsForNotificationType get notification tags for notification type API
*/
func (a *Client) GetNotificationTagsForNotificationType(params *GetNotificationTagsForNotificationTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNotificationTagsForNotificationTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNotificationTagsForNotificationTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNotificationTagsForNotificationType",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/{notificationType}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNotificationTagsForNotificationTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNotificationTagsForNotificationTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNotificationTagsForNotificationType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubscription get subscription API
*/
func (a *Client) GetSubscription(params *GetSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubscription",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubscriptionAttributes get subscription attributes API
*/
func (a *Client) GetSubscriptionAttributes(params *GetSubscriptionAttributesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionAttributesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubscriptionAttributes",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/notificationType/{notificationType}/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubscriptionAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionAttributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubscriptionAttributes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TestNotificationChannel test notification channel API
*/
func (a *Client) TestNotificationChannel(params *TestNotificationChannelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TestNotificationChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestNotificationChannelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "testNotificationChannel",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/notification/channels/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TestNotificationChannelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TestNotificationChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for testNotificationChannel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
