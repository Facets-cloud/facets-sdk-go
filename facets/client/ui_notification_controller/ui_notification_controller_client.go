// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui notification controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui notification controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui notification controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui notification controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNotificationChannelUsingPOST(params *CreateNotificationChannelUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNotificationChannelUsingPOSTOK, *CreateNotificationChannelUsingPOSTCreated, error)

	CreateSubscriptionUsingPOST(params *CreateSubscriptionUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscriptionUsingPOSTOK, *CreateSubscriptionUsingPOSTCreated, error)

	DeleteNotificationChannelUsingDELETE(params *DeleteNotificationChannelUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNotificationChannelUsingDELETEOK, *DeleteNotificationChannelUsingDELETENoContent, error)

	DeleteSubscriptionUsingDELETE(params *DeleteSubscriptionUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSubscriptionUsingDELETEOK, *DeleteSubscriptionUsingDELETENoContent, error)

	EditNotificationChannelUsingPUT(params *EditNotificationChannelUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditNotificationChannelUsingPUTOK, *EditNotificationChannelUsingPUTCreated, error)

	EditSubscriptionUsingPUT(params *EditSubscriptionUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditSubscriptionUsingPUTOK, *EditSubscriptionUsingPUTCreated, error)

	GetAllChannelTypesUsingGET(params *GetAllChannelTypesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllChannelTypesUsingGETOK, error)

	GetAllChannelsUsingGET(params *GetAllChannelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllChannelsUsingGETOK, error)

	GetAllNotificationTagsUsingGET(params *GetAllNotificationTagsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllNotificationTagsUsingGETOK, error)

	GetAllNotificationTypesUsingGET(params *GetAllNotificationTypesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllNotificationTypesUsingGETOK, error)

	GetAllSubscriptionsUsingGET(params *GetAllSubscriptionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSubscriptionsUsingGETOK, error)

	GetChannelUsingGET(params *GetChannelUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetChannelUsingGETOK, error)

	GetFiltersForSubscriptionsUsingPOST(params *GetFiltersForSubscriptionsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFiltersForSubscriptionsUsingPOSTOK, *GetFiltersForSubscriptionsUsingPOSTCreated, error)

	GetNotificationTagsForNotificationTypeUsingGET(params *GetNotificationTagsForNotificationTypeUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNotificationTagsForNotificationTypeUsingGETOK, error)

	GetSubscriptionAttributesUsingGET(params *GetSubscriptionAttributesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionAttributesUsingGETOK, error)

	GetSubscriptionUsingGET(params *GetSubscriptionUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionUsingGETOK, error)

	TestNotificationChannelUsingPOST(params *TestNotificationChannelUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TestNotificationChannelUsingPOSTOK, *TestNotificationChannelUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateNotificationChannelUsingPOST creates notification channel
*/
func (a *Client) CreateNotificationChannelUsingPOST(params *CreateNotificationChannelUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNotificationChannelUsingPOSTOK, *CreateNotificationChannelUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNotificationChannelUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNotificationChannelUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/notification/channels",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNotificationChannelUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateNotificationChannelUsingPOSTOK:
		return value, nil, nil
	case *CreateNotificationChannelUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_notification_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSubscriptionUsingPOST creates subscription
*/
func (a *Client) CreateSubscriptionUsingPOST(params *CreateSubscriptionUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscriptionUsingPOSTOK, *CreateSubscriptionUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubscriptionUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSubscriptionUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/notification/subscriptions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubscriptionUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateSubscriptionUsingPOSTOK:
		return value, nil, nil
	case *CreateSubscriptionUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_notification_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteNotificationChannelUsingDELETE deletes notification channel
*/
func (a *Client) DeleteNotificationChannelUsingDELETE(params *DeleteNotificationChannelUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNotificationChannelUsingDELETEOK, *DeleteNotificationChannelUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNotificationChannelUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNotificationChannelUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/notification/channels/{channelId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNotificationChannelUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteNotificationChannelUsingDELETEOK:
		return value, nil, nil
	case *DeleteNotificationChannelUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_notification_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSubscriptionUsingDELETE deletes subscription
*/
func (a *Client) DeleteSubscriptionUsingDELETE(params *DeleteSubscriptionUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSubscriptionUsingDELETEOK, *DeleteSubscriptionUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubscriptionUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSubscriptionUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/notification/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSubscriptionUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteSubscriptionUsingDELETEOK:
		return value, nil, nil
	case *DeleteSubscriptionUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_notification_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EditNotificationChannelUsingPUT edits notification channel
*/
func (a *Client) EditNotificationChannelUsingPUT(params *EditNotificationChannelUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditNotificationChannelUsingPUTOK, *EditNotificationChannelUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditNotificationChannelUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editNotificationChannelUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/notification/channels/{channelId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditNotificationChannelUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *EditNotificationChannelUsingPUTOK:
		return value, nil, nil
	case *EditNotificationChannelUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_notification_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EditSubscriptionUsingPUT edits subscription
*/
func (a *Client) EditSubscriptionUsingPUT(params *EditSubscriptionUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditSubscriptionUsingPUTOK, *EditSubscriptionUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditSubscriptionUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editSubscriptionUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/notification/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditSubscriptionUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *EditSubscriptionUsingPUTOK:
		return value, nil, nil
	case *EditSubscriptionUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_notification_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllChannelTypesUsingGET gets all channel types
*/
func (a *Client) GetAllChannelTypesUsingGET(params *GetAllChannelTypesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllChannelTypesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllChannelTypesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllChannelTypesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/channelTypes",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllChannelTypesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllChannelTypesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllChannelTypesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllChannelsUsingGET gets all channels
*/
func (a *Client) GetAllChannelsUsingGET(params *GetAllChannelsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllChannelsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllChannelsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllChannelsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/channels",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllChannelsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllChannelsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllChannelsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllNotificationTagsUsingGET gets all notification tags
*/
func (a *Client) GetAllNotificationTagsUsingGET(params *GetAllNotificationTagsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllNotificationTagsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllNotificationTagsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllNotificationTagsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/notificationTags",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllNotificationTagsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllNotificationTagsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllNotificationTagsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllNotificationTypesUsingGET gets all notification types
*/
func (a *Client) GetAllNotificationTypesUsingGET(params *GetAllNotificationTypesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllNotificationTypesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllNotificationTypesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllNotificationTypesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/notificationTypes",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllNotificationTypesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllNotificationTypesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllNotificationTypesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSubscriptionsUsingGET gets all subscriptions
*/
func (a *Client) GetAllSubscriptionsUsingGET(params *GetAllSubscriptionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSubscriptionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSubscriptionsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSubscriptionsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/subscriptions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllSubscriptionsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSubscriptionsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSubscriptionsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetChannelUsingGET gets channel
*/
func (a *Client) GetChannelUsingGET(params *GetChannelUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetChannelUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChannelUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChannelUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/channels/{channelId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetChannelUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChannelUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChannelUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFiltersForSubscriptionsUsingPOST gets filters for subscriptions
*/
func (a *Client) GetFiltersForSubscriptionsUsingPOST(params *GetFiltersForSubscriptionsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFiltersForSubscriptionsUsingPOSTOK, *GetFiltersForSubscriptionsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFiltersForSubscriptionsUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFiltersForSubscriptionsUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/notification/{notificationType}/tag/{tagName}/values/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFiltersForSubscriptionsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetFiltersForSubscriptionsUsingPOSTOK:
		return value, nil, nil
	case *GetFiltersForSubscriptionsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_notification_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNotificationTagsForNotificationTypeUsingGET gets notification tags for notification type
*/
func (a *Client) GetNotificationTagsForNotificationTypeUsingGET(params *GetNotificationTagsForNotificationTypeUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNotificationTagsForNotificationTypeUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNotificationTagsForNotificationTypeUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNotificationTagsForNotificationTypeUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/{notificationType}/tags",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNotificationTagsForNotificationTypeUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNotificationTagsForNotificationTypeUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNotificationTagsForNotificationTypeUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubscriptionAttributesUsingGET gets subscription attributes
*/
func (a *Client) GetSubscriptionAttributesUsingGET(params *GetSubscriptionAttributesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionAttributesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionAttributesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubscriptionAttributesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/notificationType/{notificationType}/attributes",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubscriptionAttributesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionAttributesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubscriptionAttributesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubscriptionUsingGET gets subscription
*/
func (a *Client) GetSubscriptionUsingGET(params *GetSubscriptionUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubscriptionUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/notification/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubscriptionUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubscriptionUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TestNotificationChannelUsingPOST tests notification channel
*/
func (a *Client) TestNotificationChannelUsingPOST(params *TestNotificationChannelUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TestNotificationChannelUsingPOSTOK, *TestNotificationChannelUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestNotificationChannelUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "testNotificationChannelUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/notification/channels/test",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TestNotificationChannelUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TestNotificationChannelUsingPOSTOK:
		return value, nil, nil
	case *TestNotificationChannelUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_notification_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
