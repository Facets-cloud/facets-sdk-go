// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateSubscriptionUsingPOSTReader is a Reader for the CreateSubscriptionUsingPOST structure.
type CreateSubscriptionUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSubscriptionUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateSubscriptionUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewCreateSubscriptionUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateSubscriptionUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateSubscriptionUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateSubscriptionUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/notification/subscriptions] createSubscriptionUsingPOST", response, response.Code())
	}
}

// NewCreateSubscriptionUsingPOSTOK creates a CreateSubscriptionUsingPOSTOK with default headers values
func NewCreateSubscriptionUsingPOSTOK() *CreateSubscriptionUsingPOSTOK {
	return &CreateSubscriptionUsingPOSTOK{}
}

/*
CreateSubscriptionUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type CreateSubscriptionUsingPOSTOK struct {
	Payload []*models.Subscription
}

// IsSuccess returns true when this create subscription using p o s t o k response has a 2xx status code
func (o *CreateSubscriptionUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create subscription using p o s t o k response has a 3xx status code
func (o *CreateSubscriptionUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription using p o s t o k response has a 4xx status code
func (o *CreateSubscriptionUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create subscription using p o s t o k response has a 5xx status code
func (o *CreateSubscriptionUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create subscription using p o s t o k response a status code equal to that given
func (o *CreateSubscriptionUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create subscription using p o s t o k response
func (o *CreateSubscriptionUsingPOSTOK) Code() int {
	return 200
}

func (o *CreateSubscriptionUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/subscriptions][%d] createSubscriptionUsingPOSTOK %s", 200, payload)
}

func (o *CreateSubscriptionUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/subscriptions][%d] createSubscriptionUsingPOSTOK %s", 200, payload)
}

func (o *CreateSubscriptionUsingPOSTOK) GetPayload() []*models.Subscription {
	return o.Payload
}

func (o *CreateSubscriptionUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionUsingPOSTCreated creates a CreateSubscriptionUsingPOSTCreated with default headers values
func NewCreateSubscriptionUsingPOSTCreated() *CreateSubscriptionUsingPOSTCreated {
	return &CreateSubscriptionUsingPOSTCreated{}
}

/*
CreateSubscriptionUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type CreateSubscriptionUsingPOSTCreated struct {
}

// IsSuccess returns true when this create subscription using p o s t created response has a 2xx status code
func (o *CreateSubscriptionUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create subscription using p o s t created response has a 3xx status code
func (o *CreateSubscriptionUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription using p o s t created response has a 4xx status code
func (o *CreateSubscriptionUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create subscription using p o s t created response has a 5xx status code
func (o *CreateSubscriptionUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create subscription using p o s t created response a status code equal to that given
func (o *CreateSubscriptionUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create subscription using p o s t created response
func (o *CreateSubscriptionUsingPOSTCreated) Code() int {
	return 201
}

func (o *CreateSubscriptionUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/notification/subscriptions][%d] createSubscriptionUsingPOSTCreated", 201)
}

func (o *CreateSubscriptionUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/notification/subscriptions][%d] createSubscriptionUsingPOSTCreated", 201)
}

func (o *CreateSubscriptionUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateSubscriptionUsingPOSTUnauthorized creates a CreateSubscriptionUsingPOSTUnauthorized with default headers values
func NewCreateSubscriptionUsingPOSTUnauthorized() *CreateSubscriptionUsingPOSTUnauthorized {
	return &CreateSubscriptionUsingPOSTUnauthorized{}
}

/*
CreateSubscriptionUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateSubscriptionUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this create subscription using p o s t unauthorized response has a 2xx status code
func (o *CreateSubscriptionUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create subscription using p o s t unauthorized response has a 3xx status code
func (o *CreateSubscriptionUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription using p o s t unauthorized response has a 4xx status code
func (o *CreateSubscriptionUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create subscription using p o s t unauthorized response has a 5xx status code
func (o *CreateSubscriptionUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create subscription using p o s t unauthorized response a status code equal to that given
func (o *CreateSubscriptionUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create subscription using p o s t unauthorized response
func (o *CreateSubscriptionUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *CreateSubscriptionUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/notification/subscriptions][%d] createSubscriptionUsingPOSTUnauthorized", 401)
}

func (o *CreateSubscriptionUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/notification/subscriptions][%d] createSubscriptionUsingPOSTUnauthorized", 401)
}

func (o *CreateSubscriptionUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateSubscriptionUsingPOSTForbidden creates a CreateSubscriptionUsingPOSTForbidden with default headers values
func NewCreateSubscriptionUsingPOSTForbidden() *CreateSubscriptionUsingPOSTForbidden {
	return &CreateSubscriptionUsingPOSTForbidden{}
}

/*
CreateSubscriptionUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateSubscriptionUsingPOSTForbidden struct {
}

// IsSuccess returns true when this create subscription using p o s t forbidden response has a 2xx status code
func (o *CreateSubscriptionUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create subscription using p o s t forbidden response has a 3xx status code
func (o *CreateSubscriptionUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription using p o s t forbidden response has a 4xx status code
func (o *CreateSubscriptionUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create subscription using p o s t forbidden response has a 5xx status code
func (o *CreateSubscriptionUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create subscription using p o s t forbidden response a status code equal to that given
func (o *CreateSubscriptionUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create subscription using p o s t forbidden response
func (o *CreateSubscriptionUsingPOSTForbidden) Code() int {
	return 403
}

func (o *CreateSubscriptionUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/notification/subscriptions][%d] createSubscriptionUsingPOSTForbidden", 403)
}

func (o *CreateSubscriptionUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/notification/subscriptions][%d] createSubscriptionUsingPOSTForbidden", 403)
}

func (o *CreateSubscriptionUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateSubscriptionUsingPOSTNotFound creates a CreateSubscriptionUsingPOSTNotFound with default headers values
func NewCreateSubscriptionUsingPOSTNotFound() *CreateSubscriptionUsingPOSTNotFound {
	return &CreateSubscriptionUsingPOSTNotFound{}
}

/*
CreateSubscriptionUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateSubscriptionUsingPOSTNotFound struct {
}

// IsSuccess returns true when this create subscription using p o s t not found response has a 2xx status code
func (o *CreateSubscriptionUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create subscription using p o s t not found response has a 3xx status code
func (o *CreateSubscriptionUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription using p o s t not found response has a 4xx status code
func (o *CreateSubscriptionUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create subscription using p o s t not found response has a 5xx status code
func (o *CreateSubscriptionUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create subscription using p o s t not found response a status code equal to that given
func (o *CreateSubscriptionUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create subscription using p o s t not found response
func (o *CreateSubscriptionUsingPOSTNotFound) Code() int {
	return 404
}

func (o *CreateSubscriptionUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/notification/subscriptions][%d] createSubscriptionUsingPOSTNotFound", 404)
}

func (o *CreateSubscriptionUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/notification/subscriptions][%d] createSubscriptionUsingPOSTNotFound", 404)
}

func (o *CreateSubscriptionUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
