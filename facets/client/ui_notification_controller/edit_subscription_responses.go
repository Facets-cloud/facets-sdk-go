// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// EditSubscriptionReader is a Reader for the EditSubscription structure.
type EditSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EditSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEditSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEditSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEditSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewEditSubscriptionMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEditSubscriptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}] editSubscription", response, response.Code())
	}
}

// NewEditSubscriptionOK creates a EditSubscriptionOK with default headers values
func NewEditSubscriptionOK() *EditSubscriptionOK {
	return &EditSubscriptionOK{}
}

/*
EditSubscriptionOK describes a response with status code 200, with default header values.

OK
*/
type EditSubscriptionOK struct {
	Payload []*models.Subscription
}

// IsSuccess returns true when this edit subscription o k response has a 2xx status code
func (o *EditSubscriptionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this edit subscription o k response has a 3xx status code
func (o *EditSubscriptionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit subscription o k response has a 4xx status code
func (o *EditSubscriptionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this edit subscription o k response has a 5xx status code
func (o *EditSubscriptionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this edit subscription o k response a status code equal to that given
func (o *EditSubscriptionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the edit subscription o k response
func (o *EditSubscriptionOK) Code() int {
	return 200
}

func (o *EditSubscriptionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionOK %s", 200, payload)
}

func (o *EditSubscriptionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionOK %s", 200, payload)
}

func (o *EditSubscriptionOK) GetPayload() []*models.Subscription {
	return o.Payload
}

func (o *EditSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditSubscriptionBadRequest creates a EditSubscriptionBadRequest with default headers values
func NewEditSubscriptionBadRequest() *EditSubscriptionBadRequest {
	return &EditSubscriptionBadRequest{}
}

/*
EditSubscriptionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type EditSubscriptionBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this edit subscription bad request response has a 2xx status code
func (o *EditSubscriptionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edit subscription bad request response has a 3xx status code
func (o *EditSubscriptionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit subscription bad request response has a 4xx status code
func (o *EditSubscriptionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this edit subscription bad request response has a 5xx status code
func (o *EditSubscriptionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this edit subscription bad request response a status code equal to that given
func (o *EditSubscriptionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the edit subscription bad request response
func (o *EditSubscriptionBadRequest) Code() int {
	return 400
}

func (o *EditSubscriptionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionBadRequest %s", 400, payload)
}

func (o *EditSubscriptionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionBadRequest %s", 400, payload)
}

func (o *EditSubscriptionBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *EditSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditSubscriptionNotFound creates a EditSubscriptionNotFound with default headers values
func NewEditSubscriptionNotFound() *EditSubscriptionNotFound {
	return &EditSubscriptionNotFound{}
}

/*
EditSubscriptionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type EditSubscriptionNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this edit subscription not found response has a 2xx status code
func (o *EditSubscriptionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edit subscription not found response has a 3xx status code
func (o *EditSubscriptionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit subscription not found response has a 4xx status code
func (o *EditSubscriptionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this edit subscription not found response has a 5xx status code
func (o *EditSubscriptionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this edit subscription not found response a status code equal to that given
func (o *EditSubscriptionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the edit subscription not found response
func (o *EditSubscriptionNotFound) Code() int {
	return 404
}

func (o *EditSubscriptionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionNotFound %s", 404, payload)
}

func (o *EditSubscriptionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionNotFound %s", 404, payload)
}

func (o *EditSubscriptionNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *EditSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditSubscriptionMethodNotAllowed creates a EditSubscriptionMethodNotAllowed with default headers values
func NewEditSubscriptionMethodNotAllowed() *EditSubscriptionMethodNotAllowed {
	return &EditSubscriptionMethodNotAllowed{}
}

/*
EditSubscriptionMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type EditSubscriptionMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this edit subscription method not allowed response has a 2xx status code
func (o *EditSubscriptionMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edit subscription method not allowed response has a 3xx status code
func (o *EditSubscriptionMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit subscription method not allowed response has a 4xx status code
func (o *EditSubscriptionMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this edit subscription method not allowed response has a 5xx status code
func (o *EditSubscriptionMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this edit subscription method not allowed response a status code equal to that given
func (o *EditSubscriptionMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the edit subscription method not allowed response
func (o *EditSubscriptionMethodNotAllowed) Code() int {
	return 405
}

func (o *EditSubscriptionMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionMethodNotAllowed %s", 405, payload)
}

func (o *EditSubscriptionMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionMethodNotAllowed %s", 405, payload)
}

func (o *EditSubscriptionMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *EditSubscriptionMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditSubscriptionInternalServerError creates a EditSubscriptionInternalServerError with default headers values
func NewEditSubscriptionInternalServerError() *EditSubscriptionInternalServerError {
	return &EditSubscriptionInternalServerError{}
}

/*
EditSubscriptionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type EditSubscriptionInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this edit subscription internal server error response has a 2xx status code
func (o *EditSubscriptionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edit subscription internal server error response has a 3xx status code
func (o *EditSubscriptionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit subscription internal server error response has a 4xx status code
func (o *EditSubscriptionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this edit subscription internal server error response has a 5xx status code
func (o *EditSubscriptionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this edit subscription internal server error response a status code equal to that given
func (o *EditSubscriptionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the edit subscription internal server error response
func (o *EditSubscriptionInternalServerError) Code() int {
	return 500
}

func (o *EditSubscriptionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionInternalServerError %s", 500, payload)
}

func (o *EditSubscriptionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionInternalServerError %s", 500, payload)
}

func (o *EditSubscriptionInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *EditSubscriptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
