// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateNotificationChannelReader is a Reader for the CreateNotificationChannel structure.
type CreateNotificationChannelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNotificationChannelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateNotificationChannelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateNotificationChannelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateNotificationChannelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreateNotificationChannelMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateNotificationChannelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/notification/channels] createNotificationChannel", response, response.Code())
	}
}

// NewCreateNotificationChannelOK creates a CreateNotificationChannelOK with default headers values
func NewCreateNotificationChannelOK() *CreateNotificationChannelOK {
	return &CreateNotificationChannelOK{}
}

/*
CreateNotificationChannelOK describes a response with status code 200, with default header values.

OK
*/
type CreateNotificationChannelOK struct {
	Payload []*models.NotificationChannel
}

// IsSuccess returns true when this create notification channel o k response has a 2xx status code
func (o *CreateNotificationChannelOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create notification channel o k response has a 3xx status code
func (o *CreateNotificationChannelOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create notification channel o k response has a 4xx status code
func (o *CreateNotificationChannelOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create notification channel o k response has a 5xx status code
func (o *CreateNotificationChannelOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create notification channel o k response a status code equal to that given
func (o *CreateNotificationChannelOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create notification channel o k response
func (o *CreateNotificationChannelOK) Code() int {
	return 200
}

func (o *CreateNotificationChannelOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels][%d] createNotificationChannelOK %s", 200, payload)
}

func (o *CreateNotificationChannelOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels][%d] createNotificationChannelOK %s", 200, payload)
}

func (o *CreateNotificationChannelOK) GetPayload() []*models.NotificationChannel {
	return o.Payload
}

func (o *CreateNotificationChannelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationChannelBadRequest creates a CreateNotificationChannelBadRequest with default headers values
func NewCreateNotificationChannelBadRequest() *CreateNotificationChannelBadRequest {
	return &CreateNotificationChannelBadRequest{}
}

/*
CreateNotificationChannelBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateNotificationChannelBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create notification channel bad request response has a 2xx status code
func (o *CreateNotificationChannelBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create notification channel bad request response has a 3xx status code
func (o *CreateNotificationChannelBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create notification channel bad request response has a 4xx status code
func (o *CreateNotificationChannelBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create notification channel bad request response has a 5xx status code
func (o *CreateNotificationChannelBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create notification channel bad request response a status code equal to that given
func (o *CreateNotificationChannelBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create notification channel bad request response
func (o *CreateNotificationChannelBadRequest) Code() int {
	return 400
}

func (o *CreateNotificationChannelBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels][%d] createNotificationChannelBadRequest %s", 400, payload)
}

func (o *CreateNotificationChannelBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels][%d] createNotificationChannelBadRequest %s", 400, payload)
}

func (o *CreateNotificationChannelBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateNotificationChannelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationChannelNotFound creates a CreateNotificationChannelNotFound with default headers values
func NewCreateNotificationChannelNotFound() *CreateNotificationChannelNotFound {
	return &CreateNotificationChannelNotFound{}
}

/*
CreateNotificationChannelNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateNotificationChannelNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create notification channel not found response has a 2xx status code
func (o *CreateNotificationChannelNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create notification channel not found response has a 3xx status code
func (o *CreateNotificationChannelNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create notification channel not found response has a 4xx status code
func (o *CreateNotificationChannelNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create notification channel not found response has a 5xx status code
func (o *CreateNotificationChannelNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create notification channel not found response a status code equal to that given
func (o *CreateNotificationChannelNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create notification channel not found response
func (o *CreateNotificationChannelNotFound) Code() int {
	return 404
}

func (o *CreateNotificationChannelNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels][%d] createNotificationChannelNotFound %s", 404, payload)
}

func (o *CreateNotificationChannelNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels][%d] createNotificationChannelNotFound %s", 404, payload)
}

func (o *CreateNotificationChannelNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateNotificationChannelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationChannelMethodNotAllowed creates a CreateNotificationChannelMethodNotAllowed with default headers values
func NewCreateNotificationChannelMethodNotAllowed() *CreateNotificationChannelMethodNotAllowed {
	return &CreateNotificationChannelMethodNotAllowed{}
}

/*
CreateNotificationChannelMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type CreateNotificationChannelMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create notification channel method not allowed response has a 2xx status code
func (o *CreateNotificationChannelMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create notification channel method not allowed response has a 3xx status code
func (o *CreateNotificationChannelMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create notification channel method not allowed response has a 4xx status code
func (o *CreateNotificationChannelMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create notification channel method not allowed response has a 5xx status code
func (o *CreateNotificationChannelMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this create notification channel method not allowed response a status code equal to that given
func (o *CreateNotificationChannelMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the create notification channel method not allowed response
func (o *CreateNotificationChannelMethodNotAllowed) Code() int {
	return 405
}

func (o *CreateNotificationChannelMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels][%d] createNotificationChannelMethodNotAllowed %s", 405, payload)
}

func (o *CreateNotificationChannelMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels][%d] createNotificationChannelMethodNotAllowed %s", 405, payload)
}

func (o *CreateNotificationChannelMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateNotificationChannelMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationChannelInternalServerError creates a CreateNotificationChannelInternalServerError with default headers values
func NewCreateNotificationChannelInternalServerError() *CreateNotificationChannelInternalServerError {
	return &CreateNotificationChannelInternalServerError{}
}

/*
CreateNotificationChannelInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateNotificationChannelInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create notification channel internal server error response has a 2xx status code
func (o *CreateNotificationChannelInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create notification channel internal server error response has a 3xx status code
func (o *CreateNotificationChannelInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create notification channel internal server error response has a 4xx status code
func (o *CreateNotificationChannelInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create notification channel internal server error response has a 5xx status code
func (o *CreateNotificationChannelInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create notification channel internal server error response a status code equal to that given
func (o *CreateNotificationChannelInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create notification channel internal server error response
func (o *CreateNotificationChannelInternalServerError) Code() int {
	return 500
}

func (o *CreateNotificationChannelInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels][%d] createNotificationChannelInternalServerError %s", 500, payload)
}

func (o *CreateNotificationChannelInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels][%d] createNotificationChannelInternalServerError %s", 500, payload)
}

func (o *CreateNotificationChannelInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateNotificationChannelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
