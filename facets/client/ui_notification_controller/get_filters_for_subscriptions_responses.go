// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetFiltersForSubscriptionsReader is a Reader for the GetFiltersForSubscriptions structure.
type GetFiltersForSubscriptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFiltersForSubscriptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFiltersForSubscriptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetFiltersForSubscriptionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetFiltersForSubscriptionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetFiltersForSubscriptionsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetFiltersForSubscriptionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/notification/{notificationType}/tag/{tagName}/values/] getFiltersForSubscriptions", response, response.Code())
	}
}

// NewGetFiltersForSubscriptionsOK creates a GetFiltersForSubscriptionsOK with default headers values
func NewGetFiltersForSubscriptionsOK() *GetFiltersForSubscriptionsOK {
	return &GetFiltersForSubscriptionsOK{}
}

/*
GetFiltersForSubscriptionsOK describes a response with status code 200, with default header values.

OK
*/
type GetFiltersForSubscriptionsOK struct {
	Payload models.TagDataModel
}

// IsSuccess returns true when this get filters for subscriptions o k response has a 2xx status code
func (o *GetFiltersForSubscriptionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get filters for subscriptions o k response has a 3xx status code
func (o *GetFiltersForSubscriptionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get filters for subscriptions o k response has a 4xx status code
func (o *GetFiltersForSubscriptionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get filters for subscriptions o k response has a 5xx status code
func (o *GetFiltersForSubscriptionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get filters for subscriptions o k response a status code equal to that given
func (o *GetFiltersForSubscriptionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get filters for subscriptions o k response
func (o *GetFiltersForSubscriptionsOK) Code() int {
	return 200
}

func (o *GetFiltersForSubscriptionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/{notificationType}/tag/{tagName}/values/][%d] getFiltersForSubscriptionsOK %s", 200, payload)
}

func (o *GetFiltersForSubscriptionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/{notificationType}/tag/{tagName}/values/][%d] getFiltersForSubscriptionsOK %s", 200, payload)
}

func (o *GetFiltersForSubscriptionsOK) GetPayload() models.TagDataModel {
	return o.Payload
}

func (o *GetFiltersForSubscriptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFiltersForSubscriptionsBadRequest creates a GetFiltersForSubscriptionsBadRequest with default headers values
func NewGetFiltersForSubscriptionsBadRequest() *GetFiltersForSubscriptionsBadRequest {
	return &GetFiltersForSubscriptionsBadRequest{}
}

/*
GetFiltersForSubscriptionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetFiltersForSubscriptionsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get filters for subscriptions bad request response has a 2xx status code
func (o *GetFiltersForSubscriptionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get filters for subscriptions bad request response has a 3xx status code
func (o *GetFiltersForSubscriptionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get filters for subscriptions bad request response has a 4xx status code
func (o *GetFiltersForSubscriptionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get filters for subscriptions bad request response has a 5xx status code
func (o *GetFiltersForSubscriptionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get filters for subscriptions bad request response a status code equal to that given
func (o *GetFiltersForSubscriptionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get filters for subscriptions bad request response
func (o *GetFiltersForSubscriptionsBadRequest) Code() int {
	return 400
}

func (o *GetFiltersForSubscriptionsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/{notificationType}/tag/{tagName}/values/][%d] getFiltersForSubscriptionsBadRequest %s", 400, payload)
}

func (o *GetFiltersForSubscriptionsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/{notificationType}/tag/{tagName}/values/][%d] getFiltersForSubscriptionsBadRequest %s", 400, payload)
}

func (o *GetFiltersForSubscriptionsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetFiltersForSubscriptionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFiltersForSubscriptionsNotFound creates a GetFiltersForSubscriptionsNotFound with default headers values
func NewGetFiltersForSubscriptionsNotFound() *GetFiltersForSubscriptionsNotFound {
	return &GetFiltersForSubscriptionsNotFound{}
}

/*
GetFiltersForSubscriptionsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetFiltersForSubscriptionsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get filters for subscriptions not found response has a 2xx status code
func (o *GetFiltersForSubscriptionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get filters for subscriptions not found response has a 3xx status code
func (o *GetFiltersForSubscriptionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get filters for subscriptions not found response has a 4xx status code
func (o *GetFiltersForSubscriptionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get filters for subscriptions not found response has a 5xx status code
func (o *GetFiltersForSubscriptionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get filters for subscriptions not found response a status code equal to that given
func (o *GetFiltersForSubscriptionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get filters for subscriptions not found response
func (o *GetFiltersForSubscriptionsNotFound) Code() int {
	return 404
}

func (o *GetFiltersForSubscriptionsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/{notificationType}/tag/{tagName}/values/][%d] getFiltersForSubscriptionsNotFound %s", 404, payload)
}

func (o *GetFiltersForSubscriptionsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/{notificationType}/tag/{tagName}/values/][%d] getFiltersForSubscriptionsNotFound %s", 404, payload)
}

func (o *GetFiltersForSubscriptionsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetFiltersForSubscriptionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFiltersForSubscriptionsMethodNotAllowed creates a GetFiltersForSubscriptionsMethodNotAllowed with default headers values
func NewGetFiltersForSubscriptionsMethodNotAllowed() *GetFiltersForSubscriptionsMethodNotAllowed {
	return &GetFiltersForSubscriptionsMethodNotAllowed{}
}

/*
GetFiltersForSubscriptionsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetFiltersForSubscriptionsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get filters for subscriptions method not allowed response has a 2xx status code
func (o *GetFiltersForSubscriptionsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get filters for subscriptions method not allowed response has a 3xx status code
func (o *GetFiltersForSubscriptionsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get filters for subscriptions method not allowed response has a 4xx status code
func (o *GetFiltersForSubscriptionsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get filters for subscriptions method not allowed response has a 5xx status code
func (o *GetFiltersForSubscriptionsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get filters for subscriptions method not allowed response a status code equal to that given
func (o *GetFiltersForSubscriptionsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get filters for subscriptions method not allowed response
func (o *GetFiltersForSubscriptionsMethodNotAllowed) Code() int {
	return 405
}

func (o *GetFiltersForSubscriptionsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/{notificationType}/tag/{tagName}/values/][%d] getFiltersForSubscriptionsMethodNotAllowed %s", 405, payload)
}

func (o *GetFiltersForSubscriptionsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/{notificationType}/tag/{tagName}/values/][%d] getFiltersForSubscriptionsMethodNotAllowed %s", 405, payload)
}

func (o *GetFiltersForSubscriptionsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetFiltersForSubscriptionsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFiltersForSubscriptionsInternalServerError creates a GetFiltersForSubscriptionsInternalServerError with default headers values
func NewGetFiltersForSubscriptionsInternalServerError() *GetFiltersForSubscriptionsInternalServerError {
	return &GetFiltersForSubscriptionsInternalServerError{}
}

/*
GetFiltersForSubscriptionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetFiltersForSubscriptionsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get filters for subscriptions internal server error response has a 2xx status code
func (o *GetFiltersForSubscriptionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get filters for subscriptions internal server error response has a 3xx status code
func (o *GetFiltersForSubscriptionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get filters for subscriptions internal server error response has a 4xx status code
func (o *GetFiltersForSubscriptionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get filters for subscriptions internal server error response has a 5xx status code
func (o *GetFiltersForSubscriptionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get filters for subscriptions internal server error response a status code equal to that given
func (o *GetFiltersForSubscriptionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get filters for subscriptions internal server error response
func (o *GetFiltersForSubscriptionsInternalServerError) Code() int {
	return 500
}

func (o *GetFiltersForSubscriptionsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/{notificationType}/tag/{tagName}/values/][%d] getFiltersForSubscriptionsInternalServerError %s", 500, payload)
}

func (o *GetFiltersForSubscriptionsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/{notificationType}/tag/{tagName}/values/][%d] getFiltersForSubscriptionsInternalServerError %s", 500, payload)
}

func (o *GetFiltersForSubscriptionsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetFiltersForSubscriptionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
