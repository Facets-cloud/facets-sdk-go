// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetNotificationTagsForNotificationTypeReader is a Reader for the GetNotificationTagsForNotificationType structure.
type GetNotificationTagsForNotificationTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNotificationTagsForNotificationTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNotificationTagsForNotificationTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNotificationTagsForNotificationTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNotificationTagsForNotificationTypeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetNotificationTagsForNotificationTypeMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNotificationTagsForNotificationTypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/notification/{notificationType}/tags] getNotificationTagsForNotificationType", response, response.Code())
	}
}

// NewGetNotificationTagsForNotificationTypeOK creates a GetNotificationTagsForNotificationTypeOK with default headers values
func NewGetNotificationTagsForNotificationTypeOK() *GetNotificationTagsForNotificationTypeOK {
	return &GetNotificationTagsForNotificationTypeOK{}
}

/*
GetNotificationTagsForNotificationTypeOK describes a response with status code 200, with default header values.

OK
*/
type GetNotificationTagsForNotificationTypeOK struct {
	Payload []*models.NotificationTagsForTypeResult
}

// IsSuccess returns true when this get notification tags for notification type o k response has a 2xx status code
func (o *GetNotificationTagsForNotificationTypeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get notification tags for notification type o k response has a 3xx status code
func (o *GetNotificationTagsForNotificationTypeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification tags for notification type o k response has a 4xx status code
func (o *GetNotificationTagsForNotificationTypeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get notification tags for notification type o k response has a 5xx status code
func (o *GetNotificationTagsForNotificationTypeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get notification tags for notification type o k response a status code equal to that given
func (o *GetNotificationTagsForNotificationTypeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get notification tags for notification type o k response
func (o *GetNotificationTagsForNotificationTypeOK) Code() int {
	return 200
}

func (o *GetNotificationTagsForNotificationTypeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeOK %s", 200, payload)
}

func (o *GetNotificationTagsForNotificationTypeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeOK %s", 200, payload)
}

func (o *GetNotificationTagsForNotificationTypeOK) GetPayload() []*models.NotificationTagsForTypeResult {
	return o.Payload
}

func (o *GetNotificationTagsForNotificationTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationTagsForNotificationTypeBadRequest creates a GetNotificationTagsForNotificationTypeBadRequest with default headers values
func NewGetNotificationTagsForNotificationTypeBadRequest() *GetNotificationTagsForNotificationTypeBadRequest {
	return &GetNotificationTagsForNotificationTypeBadRequest{}
}

/*
GetNotificationTagsForNotificationTypeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetNotificationTagsForNotificationTypeBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get notification tags for notification type bad request response has a 2xx status code
func (o *GetNotificationTagsForNotificationTypeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get notification tags for notification type bad request response has a 3xx status code
func (o *GetNotificationTagsForNotificationTypeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification tags for notification type bad request response has a 4xx status code
func (o *GetNotificationTagsForNotificationTypeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get notification tags for notification type bad request response has a 5xx status code
func (o *GetNotificationTagsForNotificationTypeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get notification tags for notification type bad request response a status code equal to that given
func (o *GetNotificationTagsForNotificationTypeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get notification tags for notification type bad request response
func (o *GetNotificationTagsForNotificationTypeBadRequest) Code() int {
	return 400
}

func (o *GetNotificationTagsForNotificationTypeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeBadRequest %s", 400, payload)
}

func (o *GetNotificationTagsForNotificationTypeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeBadRequest %s", 400, payload)
}

func (o *GetNotificationTagsForNotificationTypeBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetNotificationTagsForNotificationTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationTagsForNotificationTypeNotFound creates a GetNotificationTagsForNotificationTypeNotFound with default headers values
func NewGetNotificationTagsForNotificationTypeNotFound() *GetNotificationTagsForNotificationTypeNotFound {
	return &GetNotificationTagsForNotificationTypeNotFound{}
}

/*
GetNotificationTagsForNotificationTypeNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetNotificationTagsForNotificationTypeNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get notification tags for notification type not found response has a 2xx status code
func (o *GetNotificationTagsForNotificationTypeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get notification tags for notification type not found response has a 3xx status code
func (o *GetNotificationTagsForNotificationTypeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification tags for notification type not found response has a 4xx status code
func (o *GetNotificationTagsForNotificationTypeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get notification tags for notification type not found response has a 5xx status code
func (o *GetNotificationTagsForNotificationTypeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get notification tags for notification type not found response a status code equal to that given
func (o *GetNotificationTagsForNotificationTypeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get notification tags for notification type not found response
func (o *GetNotificationTagsForNotificationTypeNotFound) Code() int {
	return 404
}

func (o *GetNotificationTagsForNotificationTypeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeNotFound %s", 404, payload)
}

func (o *GetNotificationTagsForNotificationTypeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeNotFound %s", 404, payload)
}

func (o *GetNotificationTagsForNotificationTypeNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetNotificationTagsForNotificationTypeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationTagsForNotificationTypeMethodNotAllowed creates a GetNotificationTagsForNotificationTypeMethodNotAllowed with default headers values
func NewGetNotificationTagsForNotificationTypeMethodNotAllowed() *GetNotificationTagsForNotificationTypeMethodNotAllowed {
	return &GetNotificationTagsForNotificationTypeMethodNotAllowed{}
}

/*
GetNotificationTagsForNotificationTypeMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetNotificationTagsForNotificationTypeMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get notification tags for notification type method not allowed response has a 2xx status code
func (o *GetNotificationTagsForNotificationTypeMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get notification tags for notification type method not allowed response has a 3xx status code
func (o *GetNotificationTagsForNotificationTypeMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification tags for notification type method not allowed response has a 4xx status code
func (o *GetNotificationTagsForNotificationTypeMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get notification tags for notification type method not allowed response has a 5xx status code
func (o *GetNotificationTagsForNotificationTypeMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get notification tags for notification type method not allowed response a status code equal to that given
func (o *GetNotificationTagsForNotificationTypeMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get notification tags for notification type method not allowed response
func (o *GetNotificationTagsForNotificationTypeMethodNotAllowed) Code() int {
	return 405
}

func (o *GetNotificationTagsForNotificationTypeMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeMethodNotAllowed %s", 405, payload)
}

func (o *GetNotificationTagsForNotificationTypeMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeMethodNotAllowed %s", 405, payload)
}

func (o *GetNotificationTagsForNotificationTypeMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetNotificationTagsForNotificationTypeMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationTagsForNotificationTypeInternalServerError creates a GetNotificationTagsForNotificationTypeInternalServerError with default headers values
func NewGetNotificationTagsForNotificationTypeInternalServerError() *GetNotificationTagsForNotificationTypeInternalServerError {
	return &GetNotificationTagsForNotificationTypeInternalServerError{}
}

/*
GetNotificationTagsForNotificationTypeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetNotificationTagsForNotificationTypeInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get notification tags for notification type internal server error response has a 2xx status code
func (o *GetNotificationTagsForNotificationTypeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get notification tags for notification type internal server error response has a 3xx status code
func (o *GetNotificationTagsForNotificationTypeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification tags for notification type internal server error response has a 4xx status code
func (o *GetNotificationTagsForNotificationTypeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get notification tags for notification type internal server error response has a 5xx status code
func (o *GetNotificationTagsForNotificationTypeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get notification tags for notification type internal server error response a status code equal to that given
func (o *GetNotificationTagsForNotificationTypeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get notification tags for notification type internal server error response
func (o *GetNotificationTagsForNotificationTypeInternalServerError) Code() int {
	return 500
}

func (o *GetNotificationTagsForNotificationTypeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeInternalServerError %s", 500, payload)
}

func (o *GetNotificationTagsForNotificationTypeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeInternalServerError %s", 500, payload)
}

func (o *GetNotificationTagsForNotificationTypeInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetNotificationTagsForNotificationTypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
