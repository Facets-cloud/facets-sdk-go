// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllChannelTypesReader is a Reader for the GetAllChannelTypes structure.
type GetAllChannelTypesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllChannelTypesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllChannelTypesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllChannelTypesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllChannelTypesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAllChannelTypesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllChannelTypesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/notification/channelTypes] getAllChannelTypes", response, response.Code())
	}
}

// NewGetAllChannelTypesOK creates a GetAllChannelTypesOK with default headers values
func NewGetAllChannelTypesOK() *GetAllChannelTypesOK {
	return &GetAllChannelTypesOK{}
}

/*
GetAllChannelTypesOK describes a response with status code 200, with default header values.

OK
*/
type GetAllChannelTypesOK struct {
	Payload []*models.ChannelTypePayload
}

// IsSuccess returns true when this get all channel types o k response has a 2xx status code
func (o *GetAllChannelTypesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all channel types o k response has a 3xx status code
func (o *GetAllChannelTypesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channel types o k response has a 4xx status code
func (o *GetAllChannelTypesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all channel types o k response has a 5xx status code
func (o *GetAllChannelTypesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all channel types o k response a status code equal to that given
func (o *GetAllChannelTypesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all channel types o k response
func (o *GetAllChannelTypesOK) Code() int {
	return 200
}

func (o *GetAllChannelTypesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesOK %s", 200, payload)
}

func (o *GetAllChannelTypesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesOK %s", 200, payload)
}

func (o *GetAllChannelTypesOK) GetPayload() []*models.ChannelTypePayload {
	return o.Payload
}

func (o *GetAllChannelTypesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllChannelTypesBadRequest creates a GetAllChannelTypesBadRequest with default headers values
func NewGetAllChannelTypesBadRequest() *GetAllChannelTypesBadRequest {
	return &GetAllChannelTypesBadRequest{}
}

/*
GetAllChannelTypesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAllChannelTypesBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all channel types bad request response has a 2xx status code
func (o *GetAllChannelTypesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all channel types bad request response has a 3xx status code
func (o *GetAllChannelTypesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channel types bad request response has a 4xx status code
func (o *GetAllChannelTypesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all channel types bad request response has a 5xx status code
func (o *GetAllChannelTypesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all channel types bad request response a status code equal to that given
func (o *GetAllChannelTypesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all channel types bad request response
func (o *GetAllChannelTypesBadRequest) Code() int {
	return 400
}

func (o *GetAllChannelTypesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesBadRequest %s", 400, payload)
}

func (o *GetAllChannelTypesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesBadRequest %s", 400, payload)
}

func (o *GetAllChannelTypesBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllChannelTypesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllChannelTypesNotFound creates a GetAllChannelTypesNotFound with default headers values
func NewGetAllChannelTypesNotFound() *GetAllChannelTypesNotFound {
	return &GetAllChannelTypesNotFound{}
}

/*
GetAllChannelTypesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllChannelTypesNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all channel types not found response has a 2xx status code
func (o *GetAllChannelTypesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all channel types not found response has a 3xx status code
func (o *GetAllChannelTypesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channel types not found response has a 4xx status code
func (o *GetAllChannelTypesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all channel types not found response has a 5xx status code
func (o *GetAllChannelTypesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all channel types not found response a status code equal to that given
func (o *GetAllChannelTypesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all channel types not found response
func (o *GetAllChannelTypesNotFound) Code() int {
	return 404
}

func (o *GetAllChannelTypesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesNotFound %s", 404, payload)
}

func (o *GetAllChannelTypesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesNotFound %s", 404, payload)
}

func (o *GetAllChannelTypesNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllChannelTypesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllChannelTypesMethodNotAllowed creates a GetAllChannelTypesMethodNotAllowed with default headers values
func NewGetAllChannelTypesMethodNotAllowed() *GetAllChannelTypesMethodNotAllowed {
	return &GetAllChannelTypesMethodNotAllowed{}
}

/*
GetAllChannelTypesMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAllChannelTypesMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all channel types method not allowed response has a 2xx status code
func (o *GetAllChannelTypesMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all channel types method not allowed response has a 3xx status code
func (o *GetAllChannelTypesMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channel types method not allowed response has a 4xx status code
func (o *GetAllChannelTypesMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all channel types method not allowed response has a 5xx status code
func (o *GetAllChannelTypesMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get all channel types method not allowed response a status code equal to that given
func (o *GetAllChannelTypesMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get all channel types method not allowed response
func (o *GetAllChannelTypesMethodNotAllowed) Code() int {
	return 405
}

func (o *GetAllChannelTypesMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesMethodNotAllowed %s", 405, payload)
}

func (o *GetAllChannelTypesMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesMethodNotAllowed %s", 405, payload)
}

func (o *GetAllChannelTypesMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllChannelTypesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllChannelTypesInternalServerError creates a GetAllChannelTypesInternalServerError with default headers values
func NewGetAllChannelTypesInternalServerError() *GetAllChannelTypesInternalServerError {
	return &GetAllChannelTypesInternalServerError{}
}

/*
GetAllChannelTypesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAllChannelTypesInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all channel types internal server error response has a 2xx status code
func (o *GetAllChannelTypesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all channel types internal server error response has a 3xx status code
func (o *GetAllChannelTypesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channel types internal server error response has a 4xx status code
func (o *GetAllChannelTypesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all channel types internal server error response has a 5xx status code
func (o *GetAllChannelTypesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all channel types internal server error response a status code equal to that given
func (o *GetAllChannelTypesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all channel types internal server error response
func (o *GetAllChannelTypesInternalServerError) Code() int {
	return 500
}

func (o *GetAllChannelTypesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesInternalServerError %s", 500, payload)
}

func (o *GetAllChannelTypesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channelTypes][%d] getAllChannelTypesInternalServerError %s", 500, payload)
}

func (o *GetAllChannelTypesInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllChannelTypesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
