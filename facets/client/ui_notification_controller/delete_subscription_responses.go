// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteSubscriptionReader is a Reader for the DeleteSubscription structure.
type DeleteSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteSubscriptionMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteSubscriptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}] deleteSubscription", response, response.Code())
	}
}

// NewDeleteSubscriptionOK creates a DeleteSubscriptionOK with default headers values
func NewDeleteSubscriptionOK() *DeleteSubscriptionOK {
	return &DeleteSubscriptionOK{}
}

/*
DeleteSubscriptionOK describes a response with status code 200, with default header values.

OK
*/
type DeleteSubscriptionOK struct {
	Payload []*models.Subscription
}

// IsSuccess returns true when this delete subscription o k response has a 2xx status code
func (o *DeleteSubscriptionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete subscription o k response has a 3xx status code
func (o *DeleteSubscriptionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription o k response has a 4xx status code
func (o *DeleteSubscriptionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete subscription o k response has a 5xx status code
func (o *DeleteSubscriptionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subscription o k response a status code equal to that given
func (o *DeleteSubscriptionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete subscription o k response
func (o *DeleteSubscriptionOK) Code() int {
	return 200
}

func (o *DeleteSubscriptionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionOK %s", 200, payload)
}

func (o *DeleteSubscriptionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionOK %s", 200, payload)
}

func (o *DeleteSubscriptionOK) GetPayload() []*models.Subscription {
	return o.Payload
}

func (o *DeleteSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionBadRequest creates a DeleteSubscriptionBadRequest with default headers values
func NewDeleteSubscriptionBadRequest() *DeleteSubscriptionBadRequest {
	return &DeleteSubscriptionBadRequest{}
}

/*
DeleteSubscriptionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteSubscriptionBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete subscription bad request response has a 2xx status code
func (o *DeleteSubscriptionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subscription bad request response has a 3xx status code
func (o *DeleteSubscriptionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription bad request response has a 4xx status code
func (o *DeleteSubscriptionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete subscription bad request response has a 5xx status code
func (o *DeleteSubscriptionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subscription bad request response a status code equal to that given
func (o *DeleteSubscriptionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete subscription bad request response
func (o *DeleteSubscriptionBadRequest) Code() int {
	return 400
}

func (o *DeleteSubscriptionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionBadRequest %s", 400, payload)
}

func (o *DeleteSubscriptionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionBadRequest %s", 400, payload)
}

func (o *DeleteSubscriptionBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionNotFound creates a DeleteSubscriptionNotFound with default headers values
func NewDeleteSubscriptionNotFound() *DeleteSubscriptionNotFound {
	return &DeleteSubscriptionNotFound{}
}

/*
DeleteSubscriptionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteSubscriptionNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete subscription not found response has a 2xx status code
func (o *DeleteSubscriptionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subscription not found response has a 3xx status code
func (o *DeleteSubscriptionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription not found response has a 4xx status code
func (o *DeleteSubscriptionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete subscription not found response has a 5xx status code
func (o *DeleteSubscriptionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subscription not found response a status code equal to that given
func (o *DeleteSubscriptionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete subscription not found response
func (o *DeleteSubscriptionNotFound) Code() int {
	return 404
}

func (o *DeleteSubscriptionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionNotFound %s", 404, payload)
}

func (o *DeleteSubscriptionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionNotFound %s", 404, payload)
}

func (o *DeleteSubscriptionNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionMethodNotAllowed creates a DeleteSubscriptionMethodNotAllowed with default headers values
func NewDeleteSubscriptionMethodNotAllowed() *DeleteSubscriptionMethodNotAllowed {
	return &DeleteSubscriptionMethodNotAllowed{}
}

/*
DeleteSubscriptionMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DeleteSubscriptionMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete subscription method not allowed response has a 2xx status code
func (o *DeleteSubscriptionMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subscription method not allowed response has a 3xx status code
func (o *DeleteSubscriptionMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription method not allowed response has a 4xx status code
func (o *DeleteSubscriptionMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete subscription method not allowed response has a 5xx status code
func (o *DeleteSubscriptionMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subscription method not allowed response a status code equal to that given
func (o *DeleteSubscriptionMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the delete subscription method not allowed response
func (o *DeleteSubscriptionMethodNotAllowed) Code() int {
	return 405
}

func (o *DeleteSubscriptionMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionMethodNotAllowed %s", 405, payload)
}

func (o *DeleteSubscriptionMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionMethodNotAllowed %s", 405, payload)
}

func (o *DeleteSubscriptionMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteSubscriptionMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionInternalServerError creates a DeleteSubscriptionInternalServerError with default headers values
func NewDeleteSubscriptionInternalServerError() *DeleteSubscriptionInternalServerError {
	return &DeleteSubscriptionInternalServerError{}
}

/*
DeleteSubscriptionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteSubscriptionInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete subscription internal server error response has a 2xx status code
func (o *DeleteSubscriptionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subscription internal server error response has a 3xx status code
func (o *DeleteSubscriptionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription internal server error response has a 4xx status code
func (o *DeleteSubscriptionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete subscription internal server error response has a 5xx status code
func (o *DeleteSubscriptionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete subscription internal server error response a status code equal to that given
func (o *DeleteSubscriptionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete subscription internal server error response
func (o *DeleteSubscriptionInternalServerError) Code() int {
	return 500
}

func (o *DeleteSubscriptionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionInternalServerError %s", 500, payload)
}

func (o *DeleteSubscriptionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] deleteSubscriptionInternalServerError %s", 500, payload)
}

func (o *DeleteSubscriptionInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteSubscriptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
