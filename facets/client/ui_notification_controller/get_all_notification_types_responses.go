// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllNotificationTypesReader is a Reader for the GetAllNotificationTypes structure.
type GetAllNotificationTypesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllNotificationTypesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllNotificationTypesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllNotificationTypesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllNotificationTypesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAllNotificationTypesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllNotificationTypesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/notification/notificationTypes] getAllNotificationTypes", response, response.Code())
	}
}

// NewGetAllNotificationTypesOK creates a GetAllNotificationTypesOK with default headers values
func NewGetAllNotificationTypesOK() *GetAllNotificationTypesOK {
	return &GetAllNotificationTypesOK{}
}

/*
GetAllNotificationTypesOK describes a response with status code 200, with default header values.

OK
*/
type GetAllNotificationTypesOK struct {
	Payload []*models.NotificationTypeResponse
}

// IsSuccess returns true when this get all notification types o k response has a 2xx status code
func (o *GetAllNotificationTypesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all notification types o k response has a 3xx status code
func (o *GetAllNotificationTypesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all notification types o k response has a 4xx status code
func (o *GetAllNotificationTypesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all notification types o k response has a 5xx status code
func (o *GetAllNotificationTypesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all notification types o k response a status code equal to that given
func (o *GetAllNotificationTypesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all notification types o k response
func (o *GetAllNotificationTypesOK) Code() int {
	return 200
}

func (o *GetAllNotificationTypesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesOK %s", 200, payload)
}

func (o *GetAllNotificationTypesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesOK %s", 200, payload)
}

func (o *GetAllNotificationTypesOK) GetPayload() []*models.NotificationTypeResponse {
	return o.Payload
}

func (o *GetAllNotificationTypesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllNotificationTypesBadRequest creates a GetAllNotificationTypesBadRequest with default headers values
func NewGetAllNotificationTypesBadRequest() *GetAllNotificationTypesBadRequest {
	return &GetAllNotificationTypesBadRequest{}
}

/*
GetAllNotificationTypesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAllNotificationTypesBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all notification types bad request response has a 2xx status code
func (o *GetAllNotificationTypesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all notification types bad request response has a 3xx status code
func (o *GetAllNotificationTypesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all notification types bad request response has a 4xx status code
func (o *GetAllNotificationTypesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all notification types bad request response has a 5xx status code
func (o *GetAllNotificationTypesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all notification types bad request response a status code equal to that given
func (o *GetAllNotificationTypesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all notification types bad request response
func (o *GetAllNotificationTypesBadRequest) Code() int {
	return 400
}

func (o *GetAllNotificationTypesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesBadRequest %s", 400, payload)
}

func (o *GetAllNotificationTypesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesBadRequest %s", 400, payload)
}

func (o *GetAllNotificationTypesBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllNotificationTypesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllNotificationTypesNotFound creates a GetAllNotificationTypesNotFound with default headers values
func NewGetAllNotificationTypesNotFound() *GetAllNotificationTypesNotFound {
	return &GetAllNotificationTypesNotFound{}
}

/*
GetAllNotificationTypesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllNotificationTypesNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all notification types not found response has a 2xx status code
func (o *GetAllNotificationTypesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all notification types not found response has a 3xx status code
func (o *GetAllNotificationTypesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all notification types not found response has a 4xx status code
func (o *GetAllNotificationTypesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all notification types not found response has a 5xx status code
func (o *GetAllNotificationTypesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all notification types not found response a status code equal to that given
func (o *GetAllNotificationTypesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all notification types not found response
func (o *GetAllNotificationTypesNotFound) Code() int {
	return 404
}

func (o *GetAllNotificationTypesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesNotFound %s", 404, payload)
}

func (o *GetAllNotificationTypesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesNotFound %s", 404, payload)
}

func (o *GetAllNotificationTypesNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllNotificationTypesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllNotificationTypesMethodNotAllowed creates a GetAllNotificationTypesMethodNotAllowed with default headers values
func NewGetAllNotificationTypesMethodNotAllowed() *GetAllNotificationTypesMethodNotAllowed {
	return &GetAllNotificationTypesMethodNotAllowed{}
}

/*
GetAllNotificationTypesMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAllNotificationTypesMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all notification types method not allowed response has a 2xx status code
func (o *GetAllNotificationTypesMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all notification types method not allowed response has a 3xx status code
func (o *GetAllNotificationTypesMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all notification types method not allowed response has a 4xx status code
func (o *GetAllNotificationTypesMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all notification types method not allowed response has a 5xx status code
func (o *GetAllNotificationTypesMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get all notification types method not allowed response a status code equal to that given
func (o *GetAllNotificationTypesMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get all notification types method not allowed response
func (o *GetAllNotificationTypesMethodNotAllowed) Code() int {
	return 405
}

func (o *GetAllNotificationTypesMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesMethodNotAllowed %s", 405, payload)
}

func (o *GetAllNotificationTypesMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesMethodNotAllowed %s", 405, payload)
}

func (o *GetAllNotificationTypesMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllNotificationTypesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllNotificationTypesInternalServerError creates a GetAllNotificationTypesInternalServerError with default headers values
func NewGetAllNotificationTypesInternalServerError() *GetAllNotificationTypesInternalServerError {
	return &GetAllNotificationTypesInternalServerError{}
}

/*
GetAllNotificationTypesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAllNotificationTypesInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all notification types internal server error response has a 2xx status code
func (o *GetAllNotificationTypesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all notification types internal server error response has a 3xx status code
func (o *GetAllNotificationTypesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all notification types internal server error response has a 4xx status code
func (o *GetAllNotificationTypesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all notification types internal server error response has a 5xx status code
func (o *GetAllNotificationTypesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all notification types internal server error response a status code equal to that given
func (o *GetAllNotificationTypesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all notification types internal server error response
func (o *GetAllNotificationTypesInternalServerError) Code() int {
	return 500
}

func (o *GetAllNotificationTypesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesInternalServerError %s", 500, payload)
}

func (o *GetAllNotificationTypesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationTypes][%d] getAllNotificationTypesInternalServerError %s", 500, payload)
}

func (o *GetAllNotificationTypesInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllNotificationTypesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
