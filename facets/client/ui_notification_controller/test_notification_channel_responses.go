// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// TestNotificationChannelReader is a Reader for the TestNotificationChannel structure.
type TestNotificationChannelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TestNotificationChannelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTestNotificationChannelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTestNotificationChannelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTestNotificationChannelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewTestNotificationChannelMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTestNotificationChannelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/notification/channels/test] testNotificationChannel", response, response.Code())
	}
}

// NewTestNotificationChannelOK creates a TestNotificationChannelOK with default headers values
func NewTestNotificationChannelOK() *TestNotificationChannelOK {
	return &TestNotificationChannelOK{}
}

/*
TestNotificationChannelOK describes a response with status code 200, with default header values.

OK
*/
type TestNotificationChannelOK struct {
	Payload bool
}

// IsSuccess returns true when this test notification channel o k response has a 2xx status code
func (o *TestNotificationChannelOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this test notification channel o k response has a 3xx status code
func (o *TestNotificationChannelOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test notification channel o k response has a 4xx status code
func (o *TestNotificationChannelOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this test notification channel o k response has a 5xx status code
func (o *TestNotificationChannelOK) IsServerError() bool {
	return false
}

// IsCode returns true when this test notification channel o k response a status code equal to that given
func (o *TestNotificationChannelOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the test notification channel o k response
func (o *TestNotificationChannelOK) Code() int {
	return 200
}

func (o *TestNotificationChannelOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels/test][%d] testNotificationChannelOK %s", 200, payload)
}

func (o *TestNotificationChannelOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels/test][%d] testNotificationChannelOK %s", 200, payload)
}

func (o *TestNotificationChannelOK) GetPayload() bool {
	return o.Payload
}

func (o *TestNotificationChannelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestNotificationChannelBadRequest creates a TestNotificationChannelBadRequest with default headers values
func NewTestNotificationChannelBadRequest() *TestNotificationChannelBadRequest {
	return &TestNotificationChannelBadRequest{}
}

/*
TestNotificationChannelBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type TestNotificationChannelBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this test notification channel bad request response has a 2xx status code
func (o *TestNotificationChannelBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test notification channel bad request response has a 3xx status code
func (o *TestNotificationChannelBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test notification channel bad request response has a 4xx status code
func (o *TestNotificationChannelBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this test notification channel bad request response has a 5xx status code
func (o *TestNotificationChannelBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this test notification channel bad request response a status code equal to that given
func (o *TestNotificationChannelBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the test notification channel bad request response
func (o *TestNotificationChannelBadRequest) Code() int {
	return 400
}

func (o *TestNotificationChannelBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels/test][%d] testNotificationChannelBadRequest %s", 400, payload)
}

func (o *TestNotificationChannelBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels/test][%d] testNotificationChannelBadRequest %s", 400, payload)
}

func (o *TestNotificationChannelBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *TestNotificationChannelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestNotificationChannelNotFound creates a TestNotificationChannelNotFound with default headers values
func NewTestNotificationChannelNotFound() *TestNotificationChannelNotFound {
	return &TestNotificationChannelNotFound{}
}

/*
TestNotificationChannelNotFound describes a response with status code 404, with default header values.

Not Found
*/
type TestNotificationChannelNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this test notification channel not found response has a 2xx status code
func (o *TestNotificationChannelNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test notification channel not found response has a 3xx status code
func (o *TestNotificationChannelNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test notification channel not found response has a 4xx status code
func (o *TestNotificationChannelNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this test notification channel not found response has a 5xx status code
func (o *TestNotificationChannelNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this test notification channel not found response a status code equal to that given
func (o *TestNotificationChannelNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the test notification channel not found response
func (o *TestNotificationChannelNotFound) Code() int {
	return 404
}

func (o *TestNotificationChannelNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels/test][%d] testNotificationChannelNotFound %s", 404, payload)
}

func (o *TestNotificationChannelNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels/test][%d] testNotificationChannelNotFound %s", 404, payload)
}

func (o *TestNotificationChannelNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *TestNotificationChannelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestNotificationChannelMethodNotAllowed creates a TestNotificationChannelMethodNotAllowed with default headers values
func NewTestNotificationChannelMethodNotAllowed() *TestNotificationChannelMethodNotAllowed {
	return &TestNotificationChannelMethodNotAllowed{}
}

/*
TestNotificationChannelMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type TestNotificationChannelMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this test notification channel method not allowed response has a 2xx status code
func (o *TestNotificationChannelMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test notification channel method not allowed response has a 3xx status code
func (o *TestNotificationChannelMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test notification channel method not allowed response has a 4xx status code
func (o *TestNotificationChannelMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this test notification channel method not allowed response has a 5xx status code
func (o *TestNotificationChannelMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this test notification channel method not allowed response a status code equal to that given
func (o *TestNotificationChannelMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the test notification channel method not allowed response
func (o *TestNotificationChannelMethodNotAllowed) Code() int {
	return 405
}

func (o *TestNotificationChannelMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels/test][%d] testNotificationChannelMethodNotAllowed %s", 405, payload)
}

func (o *TestNotificationChannelMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels/test][%d] testNotificationChannelMethodNotAllowed %s", 405, payload)
}

func (o *TestNotificationChannelMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *TestNotificationChannelMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestNotificationChannelInternalServerError creates a TestNotificationChannelInternalServerError with default headers values
func NewTestNotificationChannelInternalServerError() *TestNotificationChannelInternalServerError {
	return &TestNotificationChannelInternalServerError{}
}

/*
TestNotificationChannelInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type TestNotificationChannelInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this test notification channel internal server error response has a 2xx status code
func (o *TestNotificationChannelInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test notification channel internal server error response has a 3xx status code
func (o *TestNotificationChannelInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test notification channel internal server error response has a 4xx status code
func (o *TestNotificationChannelInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this test notification channel internal server error response has a 5xx status code
func (o *TestNotificationChannelInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this test notification channel internal server error response a status code equal to that given
func (o *TestNotificationChannelInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the test notification channel internal server error response
func (o *TestNotificationChannelInternalServerError) Code() int {
	return 500
}

func (o *TestNotificationChannelInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels/test][%d] testNotificationChannelInternalServerError %s", 500, payload)
}

func (o *TestNotificationChannelInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/notification/channels/test][%d] testNotificationChannelInternalServerError %s", 500, payload)
}

func (o *TestNotificationChannelInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *TestNotificationChannelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
