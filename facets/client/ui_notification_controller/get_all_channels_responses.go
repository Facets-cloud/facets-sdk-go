// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllChannelsReader is a Reader for the GetAllChannels structure.
type GetAllChannelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllChannelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllChannelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllChannelsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllChannelsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAllChannelsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllChannelsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/notification/channels] getAllChannels", response, response.Code())
	}
}

// NewGetAllChannelsOK creates a GetAllChannelsOK with default headers values
func NewGetAllChannelsOK() *GetAllChannelsOK {
	return &GetAllChannelsOK{}
}

/*
GetAllChannelsOK describes a response with status code 200, with default header values.

OK
*/
type GetAllChannelsOK struct {
	Payload []*models.NotificationChannel
}

// IsSuccess returns true when this get all channels o k response has a 2xx status code
func (o *GetAllChannelsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all channels o k response has a 3xx status code
func (o *GetAllChannelsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channels o k response has a 4xx status code
func (o *GetAllChannelsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all channels o k response has a 5xx status code
func (o *GetAllChannelsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all channels o k response a status code equal to that given
func (o *GetAllChannelsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all channels o k response
func (o *GetAllChannelsOK) Code() int {
	return 200
}

func (o *GetAllChannelsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsOK %s", 200, payload)
}

func (o *GetAllChannelsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsOK %s", 200, payload)
}

func (o *GetAllChannelsOK) GetPayload() []*models.NotificationChannel {
	return o.Payload
}

func (o *GetAllChannelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllChannelsBadRequest creates a GetAllChannelsBadRequest with default headers values
func NewGetAllChannelsBadRequest() *GetAllChannelsBadRequest {
	return &GetAllChannelsBadRequest{}
}

/*
GetAllChannelsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAllChannelsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all channels bad request response has a 2xx status code
func (o *GetAllChannelsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all channels bad request response has a 3xx status code
func (o *GetAllChannelsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channels bad request response has a 4xx status code
func (o *GetAllChannelsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all channels bad request response has a 5xx status code
func (o *GetAllChannelsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all channels bad request response a status code equal to that given
func (o *GetAllChannelsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all channels bad request response
func (o *GetAllChannelsBadRequest) Code() int {
	return 400
}

func (o *GetAllChannelsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsBadRequest %s", 400, payload)
}

func (o *GetAllChannelsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsBadRequest %s", 400, payload)
}

func (o *GetAllChannelsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllChannelsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllChannelsNotFound creates a GetAllChannelsNotFound with default headers values
func NewGetAllChannelsNotFound() *GetAllChannelsNotFound {
	return &GetAllChannelsNotFound{}
}

/*
GetAllChannelsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllChannelsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all channels not found response has a 2xx status code
func (o *GetAllChannelsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all channels not found response has a 3xx status code
func (o *GetAllChannelsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channels not found response has a 4xx status code
func (o *GetAllChannelsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all channels not found response has a 5xx status code
func (o *GetAllChannelsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all channels not found response a status code equal to that given
func (o *GetAllChannelsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all channels not found response
func (o *GetAllChannelsNotFound) Code() int {
	return 404
}

func (o *GetAllChannelsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsNotFound %s", 404, payload)
}

func (o *GetAllChannelsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsNotFound %s", 404, payload)
}

func (o *GetAllChannelsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllChannelsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllChannelsMethodNotAllowed creates a GetAllChannelsMethodNotAllowed with default headers values
func NewGetAllChannelsMethodNotAllowed() *GetAllChannelsMethodNotAllowed {
	return &GetAllChannelsMethodNotAllowed{}
}

/*
GetAllChannelsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAllChannelsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all channels method not allowed response has a 2xx status code
func (o *GetAllChannelsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all channels method not allowed response has a 3xx status code
func (o *GetAllChannelsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channels method not allowed response has a 4xx status code
func (o *GetAllChannelsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all channels method not allowed response has a 5xx status code
func (o *GetAllChannelsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get all channels method not allowed response a status code equal to that given
func (o *GetAllChannelsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get all channels method not allowed response
func (o *GetAllChannelsMethodNotAllowed) Code() int {
	return 405
}

func (o *GetAllChannelsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsMethodNotAllowed %s", 405, payload)
}

func (o *GetAllChannelsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsMethodNotAllowed %s", 405, payload)
}

func (o *GetAllChannelsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllChannelsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllChannelsInternalServerError creates a GetAllChannelsInternalServerError with default headers values
func NewGetAllChannelsInternalServerError() *GetAllChannelsInternalServerError {
	return &GetAllChannelsInternalServerError{}
}

/*
GetAllChannelsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAllChannelsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all channels internal server error response has a 2xx status code
func (o *GetAllChannelsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all channels internal server error response has a 3xx status code
func (o *GetAllChannelsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channels internal server error response has a 4xx status code
func (o *GetAllChannelsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all channels internal server error response has a 5xx status code
func (o *GetAllChannelsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all channels internal server error response a status code equal to that given
func (o *GetAllChannelsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all channels internal server error response
func (o *GetAllChannelsInternalServerError) Code() int {
	return 500
}

func (o *GetAllChannelsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsInternalServerError %s", 500, payload)
}

func (o *GetAllChannelsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsInternalServerError %s", 500, payload)
}

func (o *GetAllChannelsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllChannelsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
