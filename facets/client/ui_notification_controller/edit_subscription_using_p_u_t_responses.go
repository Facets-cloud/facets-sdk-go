// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// EditSubscriptionUsingPUTReader is a Reader for the EditSubscriptionUsingPUT structure.
type EditSubscriptionUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EditSubscriptionUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEditSubscriptionUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewEditSubscriptionUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewEditSubscriptionUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEditSubscriptionUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEditSubscriptionUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}] editSubscriptionUsingPUT", response, response.Code())
	}
}

// NewEditSubscriptionUsingPUTOK creates a EditSubscriptionUsingPUTOK with default headers values
func NewEditSubscriptionUsingPUTOK() *EditSubscriptionUsingPUTOK {
	return &EditSubscriptionUsingPUTOK{}
}

/*
EditSubscriptionUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type EditSubscriptionUsingPUTOK struct {
	Payload []*models.Subscription
}

// IsSuccess returns true when this edit subscription using p u t o k response has a 2xx status code
func (o *EditSubscriptionUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this edit subscription using p u t o k response has a 3xx status code
func (o *EditSubscriptionUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit subscription using p u t o k response has a 4xx status code
func (o *EditSubscriptionUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this edit subscription using p u t o k response has a 5xx status code
func (o *EditSubscriptionUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this edit subscription using p u t o k response a status code equal to that given
func (o *EditSubscriptionUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the edit subscription using p u t o k response
func (o *EditSubscriptionUsingPUTOK) Code() int {
	return 200
}

func (o *EditSubscriptionUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionUsingPUTOK %s", 200, payload)
}

func (o *EditSubscriptionUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionUsingPUTOK %s", 200, payload)
}

func (o *EditSubscriptionUsingPUTOK) GetPayload() []*models.Subscription {
	return o.Payload
}

func (o *EditSubscriptionUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditSubscriptionUsingPUTCreated creates a EditSubscriptionUsingPUTCreated with default headers values
func NewEditSubscriptionUsingPUTCreated() *EditSubscriptionUsingPUTCreated {
	return &EditSubscriptionUsingPUTCreated{}
}

/*
EditSubscriptionUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type EditSubscriptionUsingPUTCreated struct {
}

// IsSuccess returns true when this edit subscription using p u t created response has a 2xx status code
func (o *EditSubscriptionUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this edit subscription using p u t created response has a 3xx status code
func (o *EditSubscriptionUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit subscription using p u t created response has a 4xx status code
func (o *EditSubscriptionUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this edit subscription using p u t created response has a 5xx status code
func (o *EditSubscriptionUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this edit subscription using p u t created response a status code equal to that given
func (o *EditSubscriptionUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the edit subscription using p u t created response
func (o *EditSubscriptionUsingPUTCreated) Code() int {
	return 201
}

func (o *EditSubscriptionUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionUsingPUTCreated", 201)
}

func (o *EditSubscriptionUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionUsingPUTCreated", 201)
}

func (o *EditSubscriptionUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEditSubscriptionUsingPUTUnauthorized creates a EditSubscriptionUsingPUTUnauthorized with default headers values
func NewEditSubscriptionUsingPUTUnauthorized() *EditSubscriptionUsingPUTUnauthorized {
	return &EditSubscriptionUsingPUTUnauthorized{}
}

/*
EditSubscriptionUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type EditSubscriptionUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this edit subscription using p u t unauthorized response has a 2xx status code
func (o *EditSubscriptionUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edit subscription using p u t unauthorized response has a 3xx status code
func (o *EditSubscriptionUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit subscription using p u t unauthorized response has a 4xx status code
func (o *EditSubscriptionUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this edit subscription using p u t unauthorized response has a 5xx status code
func (o *EditSubscriptionUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this edit subscription using p u t unauthorized response a status code equal to that given
func (o *EditSubscriptionUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the edit subscription using p u t unauthorized response
func (o *EditSubscriptionUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *EditSubscriptionUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionUsingPUTUnauthorized", 401)
}

func (o *EditSubscriptionUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionUsingPUTUnauthorized", 401)
}

func (o *EditSubscriptionUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEditSubscriptionUsingPUTForbidden creates a EditSubscriptionUsingPUTForbidden with default headers values
func NewEditSubscriptionUsingPUTForbidden() *EditSubscriptionUsingPUTForbidden {
	return &EditSubscriptionUsingPUTForbidden{}
}

/*
EditSubscriptionUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EditSubscriptionUsingPUTForbidden struct {
}

// IsSuccess returns true when this edit subscription using p u t forbidden response has a 2xx status code
func (o *EditSubscriptionUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edit subscription using p u t forbidden response has a 3xx status code
func (o *EditSubscriptionUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit subscription using p u t forbidden response has a 4xx status code
func (o *EditSubscriptionUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this edit subscription using p u t forbidden response has a 5xx status code
func (o *EditSubscriptionUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this edit subscription using p u t forbidden response a status code equal to that given
func (o *EditSubscriptionUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the edit subscription using p u t forbidden response
func (o *EditSubscriptionUsingPUTForbidden) Code() int {
	return 403
}

func (o *EditSubscriptionUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionUsingPUTForbidden", 403)
}

func (o *EditSubscriptionUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionUsingPUTForbidden", 403)
}

func (o *EditSubscriptionUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEditSubscriptionUsingPUTNotFound creates a EditSubscriptionUsingPUTNotFound with default headers values
func NewEditSubscriptionUsingPUTNotFound() *EditSubscriptionUsingPUTNotFound {
	return &EditSubscriptionUsingPUTNotFound{}
}

/*
EditSubscriptionUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type EditSubscriptionUsingPUTNotFound struct {
}

// IsSuccess returns true when this edit subscription using p u t not found response has a 2xx status code
func (o *EditSubscriptionUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edit subscription using p u t not found response has a 3xx status code
func (o *EditSubscriptionUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edit subscription using p u t not found response has a 4xx status code
func (o *EditSubscriptionUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this edit subscription using p u t not found response has a 5xx status code
func (o *EditSubscriptionUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this edit subscription using p u t not found response a status code equal to that given
func (o *EditSubscriptionUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the edit subscription using p u t not found response
func (o *EditSubscriptionUsingPUTNotFound) Code() int {
	return 404
}

func (o *EditSubscriptionUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionUsingPUTNotFound", 404)
}

func (o *EditSubscriptionUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] editSubscriptionUsingPUTNotFound", 404)
}

func (o *EditSubscriptionUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
