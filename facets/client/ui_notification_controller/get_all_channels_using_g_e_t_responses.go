// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllChannelsUsingGETReader is a Reader for the GetAllChannelsUsingGET structure.
type GetAllChannelsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllChannelsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllChannelsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllChannelsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllChannelsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllChannelsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/notification/channels] getAllChannelsUsingGET", response, response.Code())
	}
}

// NewGetAllChannelsUsingGETOK creates a GetAllChannelsUsingGETOK with default headers values
func NewGetAllChannelsUsingGETOK() *GetAllChannelsUsingGETOK {
	return &GetAllChannelsUsingGETOK{}
}

/*
GetAllChannelsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllChannelsUsingGETOK struct {
	Payload []*models.NotificationChannel
}

// IsSuccess returns true when this get all channels using g e t o k response has a 2xx status code
func (o *GetAllChannelsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all channels using g e t o k response has a 3xx status code
func (o *GetAllChannelsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channels using g e t o k response has a 4xx status code
func (o *GetAllChannelsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all channels using g e t o k response has a 5xx status code
func (o *GetAllChannelsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all channels using g e t o k response a status code equal to that given
func (o *GetAllChannelsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all channels using g e t o k response
func (o *GetAllChannelsUsingGETOK) Code() int {
	return 200
}

func (o *GetAllChannelsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsUsingGETOK %s", 200, payload)
}

func (o *GetAllChannelsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsUsingGETOK %s", 200, payload)
}

func (o *GetAllChannelsUsingGETOK) GetPayload() []*models.NotificationChannel {
	return o.Payload
}

func (o *GetAllChannelsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllChannelsUsingGETUnauthorized creates a GetAllChannelsUsingGETUnauthorized with default headers values
func NewGetAllChannelsUsingGETUnauthorized() *GetAllChannelsUsingGETUnauthorized {
	return &GetAllChannelsUsingGETUnauthorized{}
}

/*
GetAllChannelsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllChannelsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all channels using g e t unauthorized response has a 2xx status code
func (o *GetAllChannelsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all channels using g e t unauthorized response has a 3xx status code
func (o *GetAllChannelsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channels using g e t unauthorized response has a 4xx status code
func (o *GetAllChannelsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all channels using g e t unauthorized response has a 5xx status code
func (o *GetAllChannelsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all channels using g e t unauthorized response a status code equal to that given
func (o *GetAllChannelsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all channels using g e t unauthorized response
func (o *GetAllChannelsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllChannelsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsUsingGETUnauthorized", 401)
}

func (o *GetAllChannelsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsUsingGETUnauthorized", 401)
}

func (o *GetAllChannelsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllChannelsUsingGETForbidden creates a GetAllChannelsUsingGETForbidden with default headers values
func NewGetAllChannelsUsingGETForbidden() *GetAllChannelsUsingGETForbidden {
	return &GetAllChannelsUsingGETForbidden{}
}

/*
GetAllChannelsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllChannelsUsingGETForbidden struct {
}

// IsSuccess returns true when this get all channels using g e t forbidden response has a 2xx status code
func (o *GetAllChannelsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all channels using g e t forbidden response has a 3xx status code
func (o *GetAllChannelsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channels using g e t forbidden response has a 4xx status code
func (o *GetAllChannelsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all channels using g e t forbidden response has a 5xx status code
func (o *GetAllChannelsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all channels using g e t forbidden response a status code equal to that given
func (o *GetAllChannelsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all channels using g e t forbidden response
func (o *GetAllChannelsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllChannelsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsUsingGETForbidden", 403)
}

func (o *GetAllChannelsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsUsingGETForbidden", 403)
}

func (o *GetAllChannelsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllChannelsUsingGETNotFound creates a GetAllChannelsUsingGETNotFound with default headers values
func NewGetAllChannelsUsingGETNotFound() *GetAllChannelsUsingGETNotFound {
	return &GetAllChannelsUsingGETNotFound{}
}

/*
GetAllChannelsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllChannelsUsingGETNotFound struct {
}

// IsSuccess returns true when this get all channels using g e t not found response has a 2xx status code
func (o *GetAllChannelsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all channels using g e t not found response has a 3xx status code
func (o *GetAllChannelsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all channels using g e t not found response has a 4xx status code
func (o *GetAllChannelsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all channels using g e t not found response has a 5xx status code
func (o *GetAllChannelsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all channels using g e t not found response a status code equal to that given
func (o *GetAllChannelsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all channels using g e t not found response
func (o *GetAllChannelsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllChannelsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsUsingGETNotFound", 404)
}

func (o *GetAllChannelsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels][%d] getAllChannelsUsingGETNotFound", 404)
}

func (o *GetAllChannelsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
