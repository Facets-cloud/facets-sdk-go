// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetSubscriptionUsingGETReader is a Reader for the GetSubscriptionUsingGET structure.
type GetSubscriptionUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSubscriptionUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSubscriptionUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSubscriptionUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSubscriptionUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSubscriptionUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}] getSubscriptionUsingGET", response, response.Code())
	}
}

// NewGetSubscriptionUsingGETOK creates a GetSubscriptionUsingGETOK with default headers values
func NewGetSubscriptionUsingGETOK() *GetSubscriptionUsingGETOK {
	return &GetSubscriptionUsingGETOK{}
}

/*
GetSubscriptionUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetSubscriptionUsingGETOK struct {
	Payload *models.Subscription
}

// IsSuccess returns true when this get subscription using g e t o k response has a 2xx status code
func (o *GetSubscriptionUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get subscription using g e t o k response has a 3xx status code
func (o *GetSubscriptionUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription using g e t o k response has a 4xx status code
func (o *GetSubscriptionUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get subscription using g e t o k response has a 5xx status code
func (o *GetSubscriptionUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription using g e t o k response a status code equal to that given
func (o *GetSubscriptionUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get subscription using g e t o k response
func (o *GetSubscriptionUsingGETOK) Code() int {
	return 200
}

func (o *GetSubscriptionUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionUsingGETOK %s", 200, payload)
}

func (o *GetSubscriptionUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionUsingGETOK %s", 200, payload)
}

func (o *GetSubscriptionUsingGETOK) GetPayload() *models.Subscription {
	return o.Payload
}

func (o *GetSubscriptionUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Subscription)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionUsingGETUnauthorized creates a GetSubscriptionUsingGETUnauthorized with default headers values
func NewGetSubscriptionUsingGETUnauthorized() *GetSubscriptionUsingGETUnauthorized {
	return &GetSubscriptionUsingGETUnauthorized{}
}

/*
GetSubscriptionUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetSubscriptionUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get subscription using g e t unauthorized response has a 2xx status code
func (o *GetSubscriptionUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get subscription using g e t unauthorized response has a 3xx status code
func (o *GetSubscriptionUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription using g e t unauthorized response has a 4xx status code
func (o *GetSubscriptionUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get subscription using g e t unauthorized response has a 5xx status code
func (o *GetSubscriptionUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription using g e t unauthorized response a status code equal to that given
func (o *GetSubscriptionUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get subscription using g e t unauthorized response
func (o *GetSubscriptionUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetSubscriptionUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionUsingGETUnauthorized", 401)
}

func (o *GetSubscriptionUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionUsingGETUnauthorized", 401)
}

func (o *GetSubscriptionUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSubscriptionUsingGETForbidden creates a GetSubscriptionUsingGETForbidden with default headers values
func NewGetSubscriptionUsingGETForbidden() *GetSubscriptionUsingGETForbidden {
	return &GetSubscriptionUsingGETForbidden{}
}

/*
GetSubscriptionUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetSubscriptionUsingGETForbidden struct {
}

// IsSuccess returns true when this get subscription using g e t forbidden response has a 2xx status code
func (o *GetSubscriptionUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get subscription using g e t forbidden response has a 3xx status code
func (o *GetSubscriptionUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription using g e t forbidden response has a 4xx status code
func (o *GetSubscriptionUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get subscription using g e t forbidden response has a 5xx status code
func (o *GetSubscriptionUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription using g e t forbidden response a status code equal to that given
func (o *GetSubscriptionUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get subscription using g e t forbidden response
func (o *GetSubscriptionUsingGETForbidden) Code() int {
	return 403
}

func (o *GetSubscriptionUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionUsingGETForbidden", 403)
}

func (o *GetSubscriptionUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionUsingGETForbidden", 403)
}

func (o *GetSubscriptionUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSubscriptionUsingGETNotFound creates a GetSubscriptionUsingGETNotFound with default headers values
func NewGetSubscriptionUsingGETNotFound() *GetSubscriptionUsingGETNotFound {
	return &GetSubscriptionUsingGETNotFound{}
}

/*
GetSubscriptionUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetSubscriptionUsingGETNotFound struct {
}

// IsSuccess returns true when this get subscription using g e t not found response has a 2xx status code
func (o *GetSubscriptionUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get subscription using g e t not found response has a 3xx status code
func (o *GetSubscriptionUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription using g e t not found response has a 4xx status code
func (o *GetSubscriptionUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get subscription using g e t not found response has a 5xx status code
func (o *GetSubscriptionUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription using g e t not found response a status code equal to that given
func (o *GetSubscriptionUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get subscription using g e t not found response
func (o *GetSubscriptionUsingGETNotFound) Code() int {
	return 404
}

func (o *GetSubscriptionUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionUsingGETNotFound", 404)
}

func (o *GetSubscriptionUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionUsingGETNotFound", 404)
}

func (o *GetSubscriptionUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
