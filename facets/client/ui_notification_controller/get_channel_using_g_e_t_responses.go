// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetChannelUsingGETReader is a Reader for the GetChannelUsingGET structure.
type GetChannelUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetChannelUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetChannelUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetChannelUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetChannelUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetChannelUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/notification/channels/{channelId}] getChannelUsingGET", response, response.Code())
	}
}

// NewGetChannelUsingGETOK creates a GetChannelUsingGETOK with default headers values
func NewGetChannelUsingGETOK() *GetChannelUsingGETOK {
	return &GetChannelUsingGETOK{}
}

/*
GetChannelUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetChannelUsingGETOK struct {
	Payload *models.NotificationChannel
}

// IsSuccess returns true when this get channel using g e t o k response has a 2xx status code
func (o *GetChannelUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get channel using g e t o k response has a 3xx status code
func (o *GetChannelUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get channel using g e t o k response has a 4xx status code
func (o *GetChannelUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get channel using g e t o k response has a 5xx status code
func (o *GetChannelUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get channel using g e t o k response a status code equal to that given
func (o *GetChannelUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get channel using g e t o k response
func (o *GetChannelUsingGETOK) Code() int {
	return 200
}

func (o *GetChannelUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels/{channelId}][%d] getChannelUsingGETOK %s", 200, payload)
}

func (o *GetChannelUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels/{channelId}][%d] getChannelUsingGETOK %s", 200, payload)
}

func (o *GetChannelUsingGETOK) GetPayload() *models.NotificationChannel {
	return o.Payload
}

func (o *GetChannelUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotificationChannel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChannelUsingGETUnauthorized creates a GetChannelUsingGETUnauthorized with default headers values
func NewGetChannelUsingGETUnauthorized() *GetChannelUsingGETUnauthorized {
	return &GetChannelUsingGETUnauthorized{}
}

/*
GetChannelUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetChannelUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get channel using g e t unauthorized response has a 2xx status code
func (o *GetChannelUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get channel using g e t unauthorized response has a 3xx status code
func (o *GetChannelUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get channel using g e t unauthorized response has a 4xx status code
func (o *GetChannelUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get channel using g e t unauthorized response has a 5xx status code
func (o *GetChannelUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get channel using g e t unauthorized response a status code equal to that given
func (o *GetChannelUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get channel using g e t unauthorized response
func (o *GetChannelUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetChannelUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels/{channelId}][%d] getChannelUsingGETUnauthorized", 401)
}

func (o *GetChannelUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels/{channelId}][%d] getChannelUsingGETUnauthorized", 401)
}

func (o *GetChannelUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetChannelUsingGETForbidden creates a GetChannelUsingGETForbidden with default headers values
func NewGetChannelUsingGETForbidden() *GetChannelUsingGETForbidden {
	return &GetChannelUsingGETForbidden{}
}

/*
GetChannelUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetChannelUsingGETForbidden struct {
}

// IsSuccess returns true when this get channel using g e t forbidden response has a 2xx status code
func (o *GetChannelUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get channel using g e t forbidden response has a 3xx status code
func (o *GetChannelUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get channel using g e t forbidden response has a 4xx status code
func (o *GetChannelUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get channel using g e t forbidden response has a 5xx status code
func (o *GetChannelUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get channel using g e t forbidden response a status code equal to that given
func (o *GetChannelUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get channel using g e t forbidden response
func (o *GetChannelUsingGETForbidden) Code() int {
	return 403
}

func (o *GetChannelUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels/{channelId}][%d] getChannelUsingGETForbidden", 403)
}

func (o *GetChannelUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels/{channelId}][%d] getChannelUsingGETForbidden", 403)
}

func (o *GetChannelUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetChannelUsingGETNotFound creates a GetChannelUsingGETNotFound with default headers values
func NewGetChannelUsingGETNotFound() *GetChannelUsingGETNotFound {
	return &GetChannelUsingGETNotFound{}
}

/*
GetChannelUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetChannelUsingGETNotFound struct {
}

// IsSuccess returns true when this get channel using g e t not found response has a 2xx status code
func (o *GetChannelUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get channel using g e t not found response has a 3xx status code
func (o *GetChannelUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get channel using g e t not found response has a 4xx status code
func (o *GetChannelUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get channel using g e t not found response has a 5xx status code
func (o *GetChannelUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get channel using g e t not found response a status code equal to that given
func (o *GetChannelUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get channel using g e t not found response
func (o *GetChannelUsingGETNotFound) Code() int {
	return 404
}

func (o *GetChannelUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels/{channelId}][%d] getChannelUsingGETNotFound", 404)
}

func (o *GetChannelUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/channels/{channelId}][%d] getChannelUsingGETNotFound", 404)
}

func (o *GetChannelUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
