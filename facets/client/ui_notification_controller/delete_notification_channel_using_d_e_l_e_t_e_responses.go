// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteNotificationChannelUsingDELETEReader is a Reader for the DeleteNotificationChannelUsingDELETE structure.
type DeleteNotificationChannelUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteNotificationChannelUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteNotificationChannelUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteNotificationChannelUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteNotificationChannelUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteNotificationChannelUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/notification/channels/{channelId}] deleteNotificationChannelUsingDELETE", response, response.Code())
	}
}

// NewDeleteNotificationChannelUsingDELETEOK creates a DeleteNotificationChannelUsingDELETEOK with default headers values
func NewDeleteNotificationChannelUsingDELETEOK() *DeleteNotificationChannelUsingDELETEOK {
	return &DeleteNotificationChannelUsingDELETEOK{}
}

/*
DeleteNotificationChannelUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteNotificationChannelUsingDELETEOK struct {
	Payload []*models.NotificationChannel
}

// IsSuccess returns true when this delete notification channel using d e l e t e o k response has a 2xx status code
func (o *DeleteNotificationChannelUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete notification channel using d e l e t e o k response has a 3xx status code
func (o *DeleteNotificationChannelUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notification channel using d e l e t e o k response has a 4xx status code
func (o *DeleteNotificationChannelUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete notification channel using d e l e t e o k response has a 5xx status code
func (o *DeleteNotificationChannelUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete notification channel using d e l e t e o k response a status code equal to that given
func (o *DeleteNotificationChannelUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete notification channel using d e l e t e o k response
func (o *DeleteNotificationChannelUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteNotificationChannelUsingDELETEOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelUsingDELETEOK %s", 200, payload)
}

func (o *DeleteNotificationChannelUsingDELETEOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelUsingDELETEOK %s", 200, payload)
}

func (o *DeleteNotificationChannelUsingDELETEOK) GetPayload() []*models.NotificationChannel {
	return o.Payload
}

func (o *DeleteNotificationChannelUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotificationChannelUsingDELETENoContent creates a DeleteNotificationChannelUsingDELETENoContent with default headers values
func NewDeleteNotificationChannelUsingDELETENoContent() *DeleteNotificationChannelUsingDELETENoContent {
	return &DeleteNotificationChannelUsingDELETENoContent{}
}

/*
DeleteNotificationChannelUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteNotificationChannelUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete notification channel using d e l e t e no content response has a 2xx status code
func (o *DeleteNotificationChannelUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete notification channel using d e l e t e no content response has a 3xx status code
func (o *DeleteNotificationChannelUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notification channel using d e l e t e no content response has a 4xx status code
func (o *DeleteNotificationChannelUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete notification channel using d e l e t e no content response has a 5xx status code
func (o *DeleteNotificationChannelUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete notification channel using d e l e t e no content response a status code equal to that given
func (o *DeleteNotificationChannelUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete notification channel using d e l e t e no content response
func (o *DeleteNotificationChannelUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteNotificationChannelUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelUsingDELETENoContent", 204)
}

func (o *DeleteNotificationChannelUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelUsingDELETENoContent", 204)
}

func (o *DeleteNotificationChannelUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteNotificationChannelUsingDELETEUnauthorized creates a DeleteNotificationChannelUsingDELETEUnauthorized with default headers values
func NewDeleteNotificationChannelUsingDELETEUnauthorized() *DeleteNotificationChannelUsingDELETEUnauthorized {
	return &DeleteNotificationChannelUsingDELETEUnauthorized{}
}

/*
DeleteNotificationChannelUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteNotificationChannelUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete notification channel using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteNotificationChannelUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete notification channel using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteNotificationChannelUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notification channel using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteNotificationChannelUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete notification channel using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteNotificationChannelUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete notification channel using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteNotificationChannelUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete notification channel using d e l e t e unauthorized response
func (o *DeleteNotificationChannelUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteNotificationChannelUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelUsingDELETEUnauthorized", 401)
}

func (o *DeleteNotificationChannelUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelUsingDELETEUnauthorized", 401)
}

func (o *DeleteNotificationChannelUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteNotificationChannelUsingDELETEForbidden creates a DeleteNotificationChannelUsingDELETEForbidden with default headers values
func NewDeleteNotificationChannelUsingDELETEForbidden() *DeleteNotificationChannelUsingDELETEForbidden {
	return &DeleteNotificationChannelUsingDELETEForbidden{}
}

/*
DeleteNotificationChannelUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteNotificationChannelUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete notification channel using d e l e t e forbidden response has a 2xx status code
func (o *DeleteNotificationChannelUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete notification channel using d e l e t e forbidden response has a 3xx status code
func (o *DeleteNotificationChannelUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notification channel using d e l e t e forbidden response has a 4xx status code
func (o *DeleteNotificationChannelUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete notification channel using d e l e t e forbidden response has a 5xx status code
func (o *DeleteNotificationChannelUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete notification channel using d e l e t e forbidden response a status code equal to that given
func (o *DeleteNotificationChannelUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete notification channel using d e l e t e forbidden response
func (o *DeleteNotificationChannelUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteNotificationChannelUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelUsingDELETEForbidden", 403)
}

func (o *DeleteNotificationChannelUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/notification/channels/{channelId}][%d] deleteNotificationChannelUsingDELETEForbidden", 403)
}

func (o *DeleteNotificationChannelUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
