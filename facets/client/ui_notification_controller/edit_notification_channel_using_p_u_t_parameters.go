// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// NewEditNotificationChannelUsingPUTParams creates a new EditNotificationChannelUsingPUTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEditNotificationChannelUsingPUTParams() *EditNotificationChannelUsingPUTParams {
	return &EditNotificationChannelUsingPUTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEditNotificationChannelUsingPUTParamsWithTimeout creates a new EditNotificationChannelUsingPUTParams object
// with the ability to set a timeout on a request.
func NewEditNotificationChannelUsingPUTParamsWithTimeout(timeout time.Duration) *EditNotificationChannelUsingPUTParams {
	return &EditNotificationChannelUsingPUTParams{
		timeout: timeout,
	}
}

// NewEditNotificationChannelUsingPUTParamsWithContext creates a new EditNotificationChannelUsingPUTParams object
// with the ability to set a context for a request.
func NewEditNotificationChannelUsingPUTParamsWithContext(ctx context.Context) *EditNotificationChannelUsingPUTParams {
	return &EditNotificationChannelUsingPUTParams{
		Context: ctx,
	}
}

// NewEditNotificationChannelUsingPUTParamsWithHTTPClient creates a new EditNotificationChannelUsingPUTParams object
// with the ability to set a custom HTTPClient for a request.
func NewEditNotificationChannelUsingPUTParamsWithHTTPClient(client *http.Client) *EditNotificationChannelUsingPUTParams {
	return &EditNotificationChannelUsingPUTParams{
		HTTPClient: client,
	}
}

/*
EditNotificationChannelUsingPUTParams contains all the parameters to send to the API endpoint

	for the edit notification channel using p u t operation.

	Typically these are written to a http.Request.
*/
type EditNotificationChannelUsingPUTParams struct {

	/* ChannelID.

	   channelId
	*/
	ChannelID string

	/* Nc.

	   nc
	*/
	Nc *models.NotificationChannel

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the edit notification channel using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EditNotificationChannelUsingPUTParams) WithDefaults() *EditNotificationChannelUsingPUTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the edit notification channel using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EditNotificationChannelUsingPUTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the edit notification channel using p u t params
func (o *EditNotificationChannelUsingPUTParams) WithTimeout(timeout time.Duration) *EditNotificationChannelUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the edit notification channel using p u t params
func (o *EditNotificationChannelUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the edit notification channel using p u t params
func (o *EditNotificationChannelUsingPUTParams) WithContext(ctx context.Context) *EditNotificationChannelUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the edit notification channel using p u t params
func (o *EditNotificationChannelUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the edit notification channel using p u t params
func (o *EditNotificationChannelUsingPUTParams) WithHTTPClient(client *http.Client) *EditNotificationChannelUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the edit notification channel using p u t params
func (o *EditNotificationChannelUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChannelID adds the channelID to the edit notification channel using p u t params
func (o *EditNotificationChannelUsingPUTParams) WithChannelID(channelID string) *EditNotificationChannelUsingPUTParams {
	o.SetChannelID(channelID)
	return o
}

// SetChannelID adds the channelId to the edit notification channel using p u t params
func (o *EditNotificationChannelUsingPUTParams) SetChannelID(channelID string) {
	o.ChannelID = channelID
}

// WithNc adds the nc to the edit notification channel using p u t params
func (o *EditNotificationChannelUsingPUTParams) WithNc(nc *models.NotificationChannel) *EditNotificationChannelUsingPUTParams {
	o.SetNc(nc)
	return o
}

// SetNc adds the nc to the edit notification channel using p u t params
func (o *EditNotificationChannelUsingPUTParams) SetNc(nc *models.NotificationChannel) {
	o.Nc = nc
}

// WriteToRequest writes these params to a swagger request
func (o *EditNotificationChannelUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param channelId
	if err := r.SetPathParam("channelId", o.ChannelID); err != nil {
		return err
	}
	if o.Nc != nil {
		if err := r.SetBodyParam(o.Nc); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
