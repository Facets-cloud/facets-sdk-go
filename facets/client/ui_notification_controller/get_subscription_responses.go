// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetSubscriptionReader is a Reader for the GetSubscription structure.
type GetSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetSubscriptionMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSubscriptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}] getSubscription", response, response.Code())
	}
}

// NewGetSubscriptionOK creates a GetSubscriptionOK with default headers values
func NewGetSubscriptionOK() *GetSubscriptionOK {
	return &GetSubscriptionOK{}
}

/*
GetSubscriptionOK describes a response with status code 200, with default header values.

OK
*/
type GetSubscriptionOK struct {
	Payload *models.Subscription
}

// IsSuccess returns true when this get subscription o k response has a 2xx status code
func (o *GetSubscriptionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get subscription o k response has a 3xx status code
func (o *GetSubscriptionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription o k response has a 4xx status code
func (o *GetSubscriptionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get subscription o k response has a 5xx status code
func (o *GetSubscriptionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription o k response a status code equal to that given
func (o *GetSubscriptionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get subscription o k response
func (o *GetSubscriptionOK) Code() int {
	return 200
}

func (o *GetSubscriptionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionOK %s", 200, payload)
}

func (o *GetSubscriptionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionOK %s", 200, payload)
}

func (o *GetSubscriptionOK) GetPayload() *models.Subscription {
	return o.Payload
}

func (o *GetSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Subscription)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionBadRequest creates a GetSubscriptionBadRequest with default headers values
func NewGetSubscriptionBadRequest() *GetSubscriptionBadRequest {
	return &GetSubscriptionBadRequest{}
}

/*
GetSubscriptionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetSubscriptionBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get subscription bad request response has a 2xx status code
func (o *GetSubscriptionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get subscription bad request response has a 3xx status code
func (o *GetSubscriptionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription bad request response has a 4xx status code
func (o *GetSubscriptionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get subscription bad request response has a 5xx status code
func (o *GetSubscriptionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription bad request response a status code equal to that given
func (o *GetSubscriptionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get subscription bad request response
func (o *GetSubscriptionBadRequest) Code() int {
	return 400
}

func (o *GetSubscriptionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionBadRequest %s", 400, payload)
}

func (o *GetSubscriptionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionBadRequest %s", 400, payload)
}

func (o *GetSubscriptionBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionNotFound creates a GetSubscriptionNotFound with default headers values
func NewGetSubscriptionNotFound() *GetSubscriptionNotFound {
	return &GetSubscriptionNotFound{}
}

/*
GetSubscriptionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetSubscriptionNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get subscription not found response has a 2xx status code
func (o *GetSubscriptionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get subscription not found response has a 3xx status code
func (o *GetSubscriptionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription not found response has a 4xx status code
func (o *GetSubscriptionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get subscription not found response has a 5xx status code
func (o *GetSubscriptionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription not found response a status code equal to that given
func (o *GetSubscriptionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get subscription not found response
func (o *GetSubscriptionNotFound) Code() int {
	return 404
}

func (o *GetSubscriptionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionNotFound %s", 404, payload)
}

func (o *GetSubscriptionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionNotFound %s", 404, payload)
}

func (o *GetSubscriptionNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionMethodNotAllowed creates a GetSubscriptionMethodNotAllowed with default headers values
func NewGetSubscriptionMethodNotAllowed() *GetSubscriptionMethodNotAllowed {
	return &GetSubscriptionMethodNotAllowed{}
}

/*
GetSubscriptionMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetSubscriptionMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get subscription method not allowed response has a 2xx status code
func (o *GetSubscriptionMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get subscription method not allowed response has a 3xx status code
func (o *GetSubscriptionMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription method not allowed response has a 4xx status code
func (o *GetSubscriptionMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get subscription method not allowed response has a 5xx status code
func (o *GetSubscriptionMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription method not allowed response a status code equal to that given
func (o *GetSubscriptionMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get subscription method not allowed response
func (o *GetSubscriptionMethodNotAllowed) Code() int {
	return 405
}

func (o *GetSubscriptionMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionMethodNotAllowed %s", 405, payload)
}

func (o *GetSubscriptionMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionMethodNotAllowed %s", 405, payload)
}

func (o *GetSubscriptionMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetSubscriptionMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionInternalServerError creates a GetSubscriptionInternalServerError with default headers values
func NewGetSubscriptionInternalServerError() *GetSubscriptionInternalServerError {
	return &GetSubscriptionInternalServerError{}
}

/*
GetSubscriptionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetSubscriptionInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get subscription internal server error response has a 2xx status code
func (o *GetSubscriptionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get subscription internal server error response has a 3xx status code
func (o *GetSubscriptionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription internal server error response has a 4xx status code
func (o *GetSubscriptionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get subscription internal server error response has a 5xx status code
func (o *GetSubscriptionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get subscription internal server error response a status code equal to that given
func (o *GetSubscriptionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get subscription internal server error response
func (o *GetSubscriptionInternalServerError) Code() int {
	return 500
}

func (o *GetSubscriptionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionInternalServerError %s", 500, payload)
}

func (o *GetSubscriptionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions/{subscriptionId}][%d] getSubscriptionInternalServerError %s", 500, payload)
}

func (o *GetSubscriptionInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetSubscriptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
