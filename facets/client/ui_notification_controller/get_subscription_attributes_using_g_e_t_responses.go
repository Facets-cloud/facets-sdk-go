// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetSubscriptionAttributesUsingGETReader is a Reader for the GetSubscriptionAttributesUsingGET structure.
type GetSubscriptionAttributesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSubscriptionAttributesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSubscriptionAttributesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSubscriptionAttributesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSubscriptionAttributesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSubscriptionAttributesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/notification/notificationType/{notificationType}/attributes] getSubscriptionAttributesUsingGET", response, response.Code())
	}
}

// NewGetSubscriptionAttributesUsingGETOK creates a GetSubscriptionAttributesUsingGETOK with default headers values
func NewGetSubscriptionAttributesUsingGETOK() *GetSubscriptionAttributesUsingGETOK {
	return &GetSubscriptionAttributesUsingGETOK{}
}

/*
GetSubscriptionAttributesUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetSubscriptionAttributesUsingGETOK struct {
	Payload []string
}

// IsSuccess returns true when this get subscription attributes using g e t o k response has a 2xx status code
func (o *GetSubscriptionAttributesUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get subscription attributes using g e t o k response has a 3xx status code
func (o *GetSubscriptionAttributesUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription attributes using g e t o k response has a 4xx status code
func (o *GetSubscriptionAttributesUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get subscription attributes using g e t o k response has a 5xx status code
func (o *GetSubscriptionAttributesUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription attributes using g e t o k response a status code equal to that given
func (o *GetSubscriptionAttributesUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get subscription attributes using g e t o k response
func (o *GetSubscriptionAttributesUsingGETOK) Code() int {
	return 200
}

func (o *GetSubscriptionAttributesUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationType/{notificationType}/attributes][%d] getSubscriptionAttributesUsingGETOK %s", 200, payload)
}

func (o *GetSubscriptionAttributesUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationType/{notificationType}/attributes][%d] getSubscriptionAttributesUsingGETOK %s", 200, payload)
}

func (o *GetSubscriptionAttributesUsingGETOK) GetPayload() []string {
	return o.Payload
}

func (o *GetSubscriptionAttributesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionAttributesUsingGETUnauthorized creates a GetSubscriptionAttributesUsingGETUnauthorized with default headers values
func NewGetSubscriptionAttributesUsingGETUnauthorized() *GetSubscriptionAttributesUsingGETUnauthorized {
	return &GetSubscriptionAttributesUsingGETUnauthorized{}
}

/*
GetSubscriptionAttributesUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetSubscriptionAttributesUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get subscription attributes using g e t unauthorized response has a 2xx status code
func (o *GetSubscriptionAttributesUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get subscription attributes using g e t unauthorized response has a 3xx status code
func (o *GetSubscriptionAttributesUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription attributes using g e t unauthorized response has a 4xx status code
func (o *GetSubscriptionAttributesUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get subscription attributes using g e t unauthorized response has a 5xx status code
func (o *GetSubscriptionAttributesUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription attributes using g e t unauthorized response a status code equal to that given
func (o *GetSubscriptionAttributesUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get subscription attributes using g e t unauthorized response
func (o *GetSubscriptionAttributesUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetSubscriptionAttributesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationType/{notificationType}/attributes][%d] getSubscriptionAttributesUsingGETUnauthorized", 401)
}

func (o *GetSubscriptionAttributesUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationType/{notificationType}/attributes][%d] getSubscriptionAttributesUsingGETUnauthorized", 401)
}

func (o *GetSubscriptionAttributesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSubscriptionAttributesUsingGETForbidden creates a GetSubscriptionAttributesUsingGETForbidden with default headers values
func NewGetSubscriptionAttributesUsingGETForbidden() *GetSubscriptionAttributesUsingGETForbidden {
	return &GetSubscriptionAttributesUsingGETForbidden{}
}

/*
GetSubscriptionAttributesUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetSubscriptionAttributesUsingGETForbidden struct {
}

// IsSuccess returns true when this get subscription attributes using g e t forbidden response has a 2xx status code
func (o *GetSubscriptionAttributesUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get subscription attributes using g e t forbidden response has a 3xx status code
func (o *GetSubscriptionAttributesUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription attributes using g e t forbidden response has a 4xx status code
func (o *GetSubscriptionAttributesUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get subscription attributes using g e t forbidden response has a 5xx status code
func (o *GetSubscriptionAttributesUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription attributes using g e t forbidden response a status code equal to that given
func (o *GetSubscriptionAttributesUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get subscription attributes using g e t forbidden response
func (o *GetSubscriptionAttributesUsingGETForbidden) Code() int {
	return 403
}

func (o *GetSubscriptionAttributesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationType/{notificationType}/attributes][%d] getSubscriptionAttributesUsingGETForbidden", 403)
}

func (o *GetSubscriptionAttributesUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationType/{notificationType}/attributes][%d] getSubscriptionAttributesUsingGETForbidden", 403)
}

func (o *GetSubscriptionAttributesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSubscriptionAttributesUsingGETNotFound creates a GetSubscriptionAttributesUsingGETNotFound with default headers values
func NewGetSubscriptionAttributesUsingGETNotFound() *GetSubscriptionAttributesUsingGETNotFound {
	return &GetSubscriptionAttributesUsingGETNotFound{}
}

/*
GetSubscriptionAttributesUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetSubscriptionAttributesUsingGETNotFound struct {
}

// IsSuccess returns true when this get subscription attributes using g e t not found response has a 2xx status code
func (o *GetSubscriptionAttributesUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get subscription attributes using g e t not found response has a 3xx status code
func (o *GetSubscriptionAttributesUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription attributes using g e t not found response has a 4xx status code
func (o *GetSubscriptionAttributesUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get subscription attributes using g e t not found response has a 5xx status code
func (o *GetSubscriptionAttributesUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription attributes using g e t not found response a status code equal to that given
func (o *GetSubscriptionAttributesUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get subscription attributes using g e t not found response
func (o *GetSubscriptionAttributesUsingGETNotFound) Code() int {
	return 404
}

func (o *GetSubscriptionAttributesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationType/{notificationType}/attributes][%d] getSubscriptionAttributesUsingGETNotFound", 404)
}

func (o *GetSubscriptionAttributesUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/notificationType/{notificationType}/attributes][%d] getSubscriptionAttributesUsingGETNotFound", 404)
}

func (o *GetSubscriptionAttributesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
