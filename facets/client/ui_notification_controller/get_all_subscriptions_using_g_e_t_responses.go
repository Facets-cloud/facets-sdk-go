// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllSubscriptionsUsingGETReader is a Reader for the GetAllSubscriptionsUsingGET structure.
type GetAllSubscriptionsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllSubscriptionsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllSubscriptionsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllSubscriptionsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllSubscriptionsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllSubscriptionsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/notification/subscriptions] getAllSubscriptionsUsingGET", response, response.Code())
	}
}

// NewGetAllSubscriptionsUsingGETOK creates a GetAllSubscriptionsUsingGETOK with default headers values
func NewGetAllSubscriptionsUsingGETOK() *GetAllSubscriptionsUsingGETOK {
	return &GetAllSubscriptionsUsingGETOK{}
}

/*
GetAllSubscriptionsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllSubscriptionsUsingGETOK struct {
	Payload []*models.Subscription
}

// IsSuccess returns true when this get all subscriptions using g e t o k response has a 2xx status code
func (o *GetAllSubscriptionsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all subscriptions using g e t o k response has a 3xx status code
func (o *GetAllSubscriptionsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all subscriptions using g e t o k response has a 4xx status code
func (o *GetAllSubscriptionsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all subscriptions using g e t o k response has a 5xx status code
func (o *GetAllSubscriptionsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all subscriptions using g e t o k response a status code equal to that given
func (o *GetAllSubscriptionsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all subscriptions using g e t o k response
func (o *GetAllSubscriptionsUsingGETOK) Code() int {
	return 200
}

func (o *GetAllSubscriptionsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions][%d] getAllSubscriptionsUsingGETOK %s", 200, payload)
}

func (o *GetAllSubscriptionsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions][%d] getAllSubscriptionsUsingGETOK %s", 200, payload)
}

func (o *GetAllSubscriptionsUsingGETOK) GetPayload() []*models.Subscription {
	return o.Payload
}

func (o *GetAllSubscriptionsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllSubscriptionsUsingGETUnauthorized creates a GetAllSubscriptionsUsingGETUnauthorized with default headers values
func NewGetAllSubscriptionsUsingGETUnauthorized() *GetAllSubscriptionsUsingGETUnauthorized {
	return &GetAllSubscriptionsUsingGETUnauthorized{}
}

/*
GetAllSubscriptionsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllSubscriptionsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all subscriptions using g e t unauthorized response has a 2xx status code
func (o *GetAllSubscriptionsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all subscriptions using g e t unauthorized response has a 3xx status code
func (o *GetAllSubscriptionsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all subscriptions using g e t unauthorized response has a 4xx status code
func (o *GetAllSubscriptionsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all subscriptions using g e t unauthorized response has a 5xx status code
func (o *GetAllSubscriptionsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all subscriptions using g e t unauthorized response a status code equal to that given
func (o *GetAllSubscriptionsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all subscriptions using g e t unauthorized response
func (o *GetAllSubscriptionsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllSubscriptionsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions][%d] getAllSubscriptionsUsingGETUnauthorized", 401)
}

func (o *GetAllSubscriptionsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions][%d] getAllSubscriptionsUsingGETUnauthorized", 401)
}

func (o *GetAllSubscriptionsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllSubscriptionsUsingGETForbidden creates a GetAllSubscriptionsUsingGETForbidden with default headers values
func NewGetAllSubscriptionsUsingGETForbidden() *GetAllSubscriptionsUsingGETForbidden {
	return &GetAllSubscriptionsUsingGETForbidden{}
}

/*
GetAllSubscriptionsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllSubscriptionsUsingGETForbidden struct {
}

// IsSuccess returns true when this get all subscriptions using g e t forbidden response has a 2xx status code
func (o *GetAllSubscriptionsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all subscriptions using g e t forbidden response has a 3xx status code
func (o *GetAllSubscriptionsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all subscriptions using g e t forbidden response has a 4xx status code
func (o *GetAllSubscriptionsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all subscriptions using g e t forbidden response has a 5xx status code
func (o *GetAllSubscriptionsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all subscriptions using g e t forbidden response a status code equal to that given
func (o *GetAllSubscriptionsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all subscriptions using g e t forbidden response
func (o *GetAllSubscriptionsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllSubscriptionsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions][%d] getAllSubscriptionsUsingGETForbidden", 403)
}

func (o *GetAllSubscriptionsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions][%d] getAllSubscriptionsUsingGETForbidden", 403)
}

func (o *GetAllSubscriptionsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllSubscriptionsUsingGETNotFound creates a GetAllSubscriptionsUsingGETNotFound with default headers values
func NewGetAllSubscriptionsUsingGETNotFound() *GetAllSubscriptionsUsingGETNotFound {
	return &GetAllSubscriptionsUsingGETNotFound{}
}

/*
GetAllSubscriptionsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllSubscriptionsUsingGETNotFound struct {
}

// IsSuccess returns true when this get all subscriptions using g e t not found response has a 2xx status code
func (o *GetAllSubscriptionsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all subscriptions using g e t not found response has a 3xx status code
func (o *GetAllSubscriptionsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all subscriptions using g e t not found response has a 4xx status code
func (o *GetAllSubscriptionsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all subscriptions using g e t not found response has a 5xx status code
func (o *GetAllSubscriptionsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all subscriptions using g e t not found response a status code equal to that given
func (o *GetAllSubscriptionsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all subscriptions using g e t not found response
func (o *GetAllSubscriptionsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllSubscriptionsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions][%d] getAllSubscriptionsUsingGETNotFound", 404)
}

func (o *GetAllSubscriptionsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/subscriptions][%d] getAllSubscriptionsUsingGETNotFound", 404)
}

func (o *GetAllSubscriptionsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
