// Code generated by go-swagger; DO NOT EDIT.

package ui_notification_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetNotificationTagsForNotificationTypeUsingGETReader is a Reader for the GetNotificationTagsForNotificationTypeUsingGET structure.
type GetNotificationTagsForNotificationTypeUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNotificationTagsForNotificationTypeUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNotificationTagsForNotificationTypeUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetNotificationTagsForNotificationTypeUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetNotificationTagsForNotificationTypeUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNotificationTagsForNotificationTypeUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/notification/{notificationType}/tags] getNotificationTagsForNotificationTypeUsingGET", response, response.Code())
	}
}

// NewGetNotificationTagsForNotificationTypeUsingGETOK creates a GetNotificationTagsForNotificationTypeUsingGETOK with default headers values
func NewGetNotificationTagsForNotificationTypeUsingGETOK() *GetNotificationTagsForNotificationTypeUsingGETOK {
	return &GetNotificationTagsForNotificationTypeUsingGETOK{}
}

/*
GetNotificationTagsForNotificationTypeUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetNotificationTagsForNotificationTypeUsingGETOK struct {
	Payload []*models.NotificationTagsForTypeResult
}

// IsSuccess returns true when this get notification tags for notification type using g e t o k response has a 2xx status code
func (o *GetNotificationTagsForNotificationTypeUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get notification tags for notification type using g e t o k response has a 3xx status code
func (o *GetNotificationTagsForNotificationTypeUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification tags for notification type using g e t o k response has a 4xx status code
func (o *GetNotificationTagsForNotificationTypeUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get notification tags for notification type using g e t o k response has a 5xx status code
func (o *GetNotificationTagsForNotificationTypeUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get notification tags for notification type using g e t o k response a status code equal to that given
func (o *GetNotificationTagsForNotificationTypeUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get notification tags for notification type using g e t o k response
func (o *GetNotificationTagsForNotificationTypeUsingGETOK) Code() int {
	return 200
}

func (o *GetNotificationTagsForNotificationTypeUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeUsingGETOK %s", 200, payload)
}

func (o *GetNotificationTagsForNotificationTypeUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeUsingGETOK %s", 200, payload)
}

func (o *GetNotificationTagsForNotificationTypeUsingGETOK) GetPayload() []*models.NotificationTagsForTypeResult {
	return o.Payload
}

func (o *GetNotificationTagsForNotificationTypeUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationTagsForNotificationTypeUsingGETUnauthorized creates a GetNotificationTagsForNotificationTypeUsingGETUnauthorized with default headers values
func NewGetNotificationTagsForNotificationTypeUsingGETUnauthorized() *GetNotificationTagsForNotificationTypeUsingGETUnauthorized {
	return &GetNotificationTagsForNotificationTypeUsingGETUnauthorized{}
}

/*
GetNotificationTagsForNotificationTypeUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetNotificationTagsForNotificationTypeUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get notification tags for notification type using g e t unauthorized response has a 2xx status code
func (o *GetNotificationTagsForNotificationTypeUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get notification tags for notification type using g e t unauthorized response has a 3xx status code
func (o *GetNotificationTagsForNotificationTypeUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification tags for notification type using g e t unauthorized response has a 4xx status code
func (o *GetNotificationTagsForNotificationTypeUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get notification tags for notification type using g e t unauthorized response has a 5xx status code
func (o *GetNotificationTagsForNotificationTypeUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get notification tags for notification type using g e t unauthorized response a status code equal to that given
func (o *GetNotificationTagsForNotificationTypeUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get notification tags for notification type using g e t unauthorized response
func (o *GetNotificationTagsForNotificationTypeUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetNotificationTagsForNotificationTypeUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeUsingGETUnauthorized", 401)
}

func (o *GetNotificationTagsForNotificationTypeUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeUsingGETUnauthorized", 401)
}

func (o *GetNotificationTagsForNotificationTypeUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNotificationTagsForNotificationTypeUsingGETForbidden creates a GetNotificationTagsForNotificationTypeUsingGETForbidden with default headers values
func NewGetNotificationTagsForNotificationTypeUsingGETForbidden() *GetNotificationTagsForNotificationTypeUsingGETForbidden {
	return &GetNotificationTagsForNotificationTypeUsingGETForbidden{}
}

/*
GetNotificationTagsForNotificationTypeUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetNotificationTagsForNotificationTypeUsingGETForbidden struct {
}

// IsSuccess returns true when this get notification tags for notification type using g e t forbidden response has a 2xx status code
func (o *GetNotificationTagsForNotificationTypeUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get notification tags for notification type using g e t forbidden response has a 3xx status code
func (o *GetNotificationTagsForNotificationTypeUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification tags for notification type using g e t forbidden response has a 4xx status code
func (o *GetNotificationTagsForNotificationTypeUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get notification tags for notification type using g e t forbidden response has a 5xx status code
func (o *GetNotificationTagsForNotificationTypeUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get notification tags for notification type using g e t forbidden response a status code equal to that given
func (o *GetNotificationTagsForNotificationTypeUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get notification tags for notification type using g e t forbidden response
func (o *GetNotificationTagsForNotificationTypeUsingGETForbidden) Code() int {
	return 403
}

func (o *GetNotificationTagsForNotificationTypeUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeUsingGETForbidden", 403)
}

func (o *GetNotificationTagsForNotificationTypeUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeUsingGETForbidden", 403)
}

func (o *GetNotificationTagsForNotificationTypeUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNotificationTagsForNotificationTypeUsingGETNotFound creates a GetNotificationTagsForNotificationTypeUsingGETNotFound with default headers values
func NewGetNotificationTagsForNotificationTypeUsingGETNotFound() *GetNotificationTagsForNotificationTypeUsingGETNotFound {
	return &GetNotificationTagsForNotificationTypeUsingGETNotFound{}
}

/*
GetNotificationTagsForNotificationTypeUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetNotificationTagsForNotificationTypeUsingGETNotFound struct {
}

// IsSuccess returns true when this get notification tags for notification type using g e t not found response has a 2xx status code
func (o *GetNotificationTagsForNotificationTypeUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get notification tags for notification type using g e t not found response has a 3xx status code
func (o *GetNotificationTagsForNotificationTypeUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification tags for notification type using g e t not found response has a 4xx status code
func (o *GetNotificationTagsForNotificationTypeUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get notification tags for notification type using g e t not found response has a 5xx status code
func (o *GetNotificationTagsForNotificationTypeUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get notification tags for notification type using g e t not found response a status code equal to that given
func (o *GetNotificationTagsForNotificationTypeUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get notification tags for notification type using g e t not found response
func (o *GetNotificationTagsForNotificationTypeUsingGETNotFound) Code() int {
	return 404
}

func (o *GetNotificationTagsForNotificationTypeUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeUsingGETNotFound", 404)
}

func (o *GetNotificationTagsForNotificationTypeUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/notification/{notificationType}/tags][%d] getNotificationTagsForNotificationTypeUsingGETNotFound", 404)
}

func (o *GetNotificationTagsForNotificationTypeUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
