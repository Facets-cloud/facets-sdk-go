// Code generated by go-swagger; DO NOT EDIT.

package ui_project_type_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// AddProjectTypeUsingPOSTReader is a Reader for the AddProjectTypeUsingPOST structure.
type AddProjectTypeUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddProjectTypeUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddProjectTypeUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewAddProjectTypeUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddProjectTypeUsingPOSTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddProjectTypeUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddProjectTypeUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddProjectTypeUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddProjectTypeUsingPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/project-types] addProjectTypeUsingPOST", response, response.Code())
	}
}

// NewAddProjectTypeUsingPOSTOK creates a AddProjectTypeUsingPOSTOK with default headers values
func NewAddProjectTypeUsingPOSTOK() *AddProjectTypeUsingPOSTOK {
	return &AddProjectTypeUsingPOSTOK{}
}

/*
AddProjectTypeUsingPOSTOK describes a response with status code 200, with default header values.

Project type created successfully
*/
type AddProjectTypeUsingPOSTOK struct {
	Payload *models.ProjectTypeResponse
}

// IsSuccess returns true when this add project type using p o s t o k response has a 2xx status code
func (o *AddProjectTypeUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add project type using p o s t o k response has a 3xx status code
func (o *AddProjectTypeUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add project type using p o s t o k response has a 4xx status code
func (o *AddProjectTypeUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add project type using p o s t o k response has a 5xx status code
func (o *AddProjectTypeUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add project type using p o s t o k response a status code equal to that given
func (o *AddProjectTypeUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add project type using p o s t o k response
func (o *AddProjectTypeUsingPOSTOK) Code() int {
	return 200
}

func (o *AddProjectTypeUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeUsingPOSTOK %s", 200, payload)
}

func (o *AddProjectTypeUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeUsingPOSTOK %s", 200, payload)
}

func (o *AddProjectTypeUsingPOSTOK) GetPayload() *models.ProjectTypeResponse {
	return o.Payload
}

func (o *AddProjectTypeUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectTypeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddProjectTypeUsingPOSTCreated creates a AddProjectTypeUsingPOSTCreated with default headers values
func NewAddProjectTypeUsingPOSTCreated() *AddProjectTypeUsingPOSTCreated {
	return &AddProjectTypeUsingPOSTCreated{}
}

/*
AddProjectTypeUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type AddProjectTypeUsingPOSTCreated struct {
}

// IsSuccess returns true when this add project type using p o s t created response has a 2xx status code
func (o *AddProjectTypeUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add project type using p o s t created response has a 3xx status code
func (o *AddProjectTypeUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add project type using p o s t created response has a 4xx status code
func (o *AddProjectTypeUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this add project type using p o s t created response has a 5xx status code
func (o *AddProjectTypeUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this add project type using p o s t created response a status code equal to that given
func (o *AddProjectTypeUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the add project type using p o s t created response
func (o *AddProjectTypeUsingPOSTCreated) Code() int {
	return 201
}

func (o *AddProjectTypeUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeUsingPOSTCreated", 201)
}

func (o *AddProjectTypeUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeUsingPOSTCreated", 201)
}

func (o *AddProjectTypeUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddProjectTypeUsingPOSTBadRequest creates a AddProjectTypeUsingPOSTBadRequest with default headers values
func NewAddProjectTypeUsingPOSTBadRequest() *AddProjectTypeUsingPOSTBadRequest {
	return &AddProjectTypeUsingPOSTBadRequest{}
}

/*
AddProjectTypeUsingPOSTBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type AddProjectTypeUsingPOSTBadRequest struct {
}

// IsSuccess returns true when this add project type using p o s t bad request response has a 2xx status code
func (o *AddProjectTypeUsingPOSTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add project type using p o s t bad request response has a 3xx status code
func (o *AddProjectTypeUsingPOSTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add project type using p o s t bad request response has a 4xx status code
func (o *AddProjectTypeUsingPOSTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add project type using p o s t bad request response has a 5xx status code
func (o *AddProjectTypeUsingPOSTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add project type using p o s t bad request response a status code equal to that given
func (o *AddProjectTypeUsingPOSTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add project type using p o s t bad request response
func (o *AddProjectTypeUsingPOSTBadRequest) Code() int {
	return 400
}

func (o *AddProjectTypeUsingPOSTBadRequest) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeUsingPOSTBadRequest", 400)
}

func (o *AddProjectTypeUsingPOSTBadRequest) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeUsingPOSTBadRequest", 400)
}

func (o *AddProjectTypeUsingPOSTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddProjectTypeUsingPOSTUnauthorized creates a AddProjectTypeUsingPOSTUnauthorized with default headers values
func NewAddProjectTypeUsingPOSTUnauthorized() *AddProjectTypeUsingPOSTUnauthorized {
	return &AddProjectTypeUsingPOSTUnauthorized{}
}

/*
AddProjectTypeUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AddProjectTypeUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this add project type using p o s t unauthorized response has a 2xx status code
func (o *AddProjectTypeUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add project type using p o s t unauthorized response has a 3xx status code
func (o *AddProjectTypeUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add project type using p o s t unauthorized response has a 4xx status code
func (o *AddProjectTypeUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add project type using p o s t unauthorized response has a 5xx status code
func (o *AddProjectTypeUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add project type using p o s t unauthorized response a status code equal to that given
func (o *AddProjectTypeUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the add project type using p o s t unauthorized response
func (o *AddProjectTypeUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *AddProjectTypeUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeUsingPOSTUnauthorized", 401)
}

func (o *AddProjectTypeUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeUsingPOSTUnauthorized", 401)
}

func (o *AddProjectTypeUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddProjectTypeUsingPOSTForbidden creates a AddProjectTypeUsingPOSTForbidden with default headers values
func NewAddProjectTypeUsingPOSTForbidden() *AddProjectTypeUsingPOSTForbidden {
	return &AddProjectTypeUsingPOSTForbidden{}
}

/*
AddProjectTypeUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddProjectTypeUsingPOSTForbidden struct {
}

// IsSuccess returns true when this add project type using p o s t forbidden response has a 2xx status code
func (o *AddProjectTypeUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add project type using p o s t forbidden response has a 3xx status code
func (o *AddProjectTypeUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add project type using p o s t forbidden response has a 4xx status code
func (o *AddProjectTypeUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add project type using p o s t forbidden response has a 5xx status code
func (o *AddProjectTypeUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add project type using p o s t forbidden response a status code equal to that given
func (o *AddProjectTypeUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add project type using p o s t forbidden response
func (o *AddProjectTypeUsingPOSTForbidden) Code() int {
	return 403
}

func (o *AddProjectTypeUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeUsingPOSTForbidden", 403)
}

func (o *AddProjectTypeUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeUsingPOSTForbidden", 403)
}

func (o *AddProjectTypeUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddProjectTypeUsingPOSTNotFound creates a AddProjectTypeUsingPOSTNotFound with default headers values
func NewAddProjectTypeUsingPOSTNotFound() *AddProjectTypeUsingPOSTNotFound {
	return &AddProjectTypeUsingPOSTNotFound{}
}

/*
AddProjectTypeUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AddProjectTypeUsingPOSTNotFound struct {
}

// IsSuccess returns true when this add project type using p o s t not found response has a 2xx status code
func (o *AddProjectTypeUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add project type using p o s t not found response has a 3xx status code
func (o *AddProjectTypeUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add project type using p o s t not found response has a 4xx status code
func (o *AddProjectTypeUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add project type using p o s t not found response has a 5xx status code
func (o *AddProjectTypeUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add project type using p o s t not found response a status code equal to that given
func (o *AddProjectTypeUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add project type using p o s t not found response
func (o *AddProjectTypeUsingPOSTNotFound) Code() int {
	return 404
}

func (o *AddProjectTypeUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeUsingPOSTNotFound", 404)
}

func (o *AddProjectTypeUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeUsingPOSTNotFound", 404)
}

func (o *AddProjectTypeUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddProjectTypeUsingPOSTInternalServerError creates a AddProjectTypeUsingPOSTInternalServerError with default headers values
func NewAddProjectTypeUsingPOSTInternalServerError() *AddProjectTypeUsingPOSTInternalServerError {
	return &AddProjectTypeUsingPOSTInternalServerError{}
}

/*
AddProjectTypeUsingPOSTInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type AddProjectTypeUsingPOSTInternalServerError struct {
}

// IsSuccess returns true when this add project type using p o s t internal server error response has a 2xx status code
func (o *AddProjectTypeUsingPOSTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add project type using p o s t internal server error response has a 3xx status code
func (o *AddProjectTypeUsingPOSTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add project type using p o s t internal server error response has a 4xx status code
func (o *AddProjectTypeUsingPOSTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add project type using p o s t internal server error response has a 5xx status code
func (o *AddProjectTypeUsingPOSTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add project type using p o s t internal server error response a status code equal to that given
func (o *AddProjectTypeUsingPOSTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add project type using p o s t internal server error response
func (o *AddProjectTypeUsingPOSTInternalServerError) Code() int {
	return 500
}

func (o *AddProjectTypeUsingPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeUsingPOSTInternalServerError", 500)
}

func (o *AddProjectTypeUsingPOSTInternalServerError) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/project-types][%d] addProjectTypeUsingPOSTInternalServerError", 500)
}

func (o *AddProjectTypeUsingPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
