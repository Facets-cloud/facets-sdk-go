// Code generated by go-swagger; DO NOT EDIT.

package ui_project_type_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetProjectTypeByIDUsingGETReader is a Reader for the GetProjectTypeByIDUsingGET structure.
type GetProjectTypeByIDUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectTypeByIDUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectTypeByIDUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetProjectTypeByIDUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetProjectTypeByIDUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProjectTypeByIDUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/project-types/{id}] getProjectTypeByIdUsingGET", response, response.Code())
	}
}

// NewGetProjectTypeByIDUsingGETOK creates a GetProjectTypeByIDUsingGETOK with default headers values
func NewGetProjectTypeByIDUsingGETOK() *GetProjectTypeByIDUsingGETOK {
	return &GetProjectTypeByIDUsingGETOK{}
}

/*
GetProjectTypeByIDUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetProjectTypeByIDUsingGETOK struct {
	Payload *models.ProjectTypeResponse
}

// IsSuccess returns true when this get project type by Id using g e t o k response has a 2xx status code
func (o *GetProjectTypeByIDUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get project type by Id using g e t o k response has a 3xx status code
func (o *GetProjectTypeByIDUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project type by Id using g e t o k response has a 4xx status code
func (o *GetProjectTypeByIDUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project type by Id using g e t o k response has a 5xx status code
func (o *GetProjectTypeByIDUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get project type by Id using g e t o k response a status code equal to that given
func (o *GetProjectTypeByIDUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get project type by Id using g e t o k response
func (o *GetProjectTypeByIDUsingGETOK) Code() int {
	return 200
}

func (o *GetProjectTypeByIDUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdUsingGETOK %s", 200, payload)
}

func (o *GetProjectTypeByIDUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdUsingGETOK %s", 200, payload)
}

func (o *GetProjectTypeByIDUsingGETOK) GetPayload() *models.ProjectTypeResponse {
	return o.Payload
}

func (o *GetProjectTypeByIDUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectTypeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectTypeByIDUsingGETUnauthorized creates a GetProjectTypeByIDUsingGETUnauthorized with default headers values
func NewGetProjectTypeByIDUsingGETUnauthorized() *GetProjectTypeByIDUsingGETUnauthorized {
	return &GetProjectTypeByIDUsingGETUnauthorized{}
}

/*
GetProjectTypeByIDUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetProjectTypeByIDUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get project type by Id using g e t unauthorized response has a 2xx status code
func (o *GetProjectTypeByIDUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project type by Id using g e t unauthorized response has a 3xx status code
func (o *GetProjectTypeByIDUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project type by Id using g e t unauthorized response has a 4xx status code
func (o *GetProjectTypeByIDUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project type by Id using g e t unauthorized response has a 5xx status code
func (o *GetProjectTypeByIDUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get project type by Id using g e t unauthorized response a status code equal to that given
func (o *GetProjectTypeByIDUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get project type by Id using g e t unauthorized response
func (o *GetProjectTypeByIDUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetProjectTypeByIDUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdUsingGETUnauthorized", 401)
}

func (o *GetProjectTypeByIDUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdUsingGETUnauthorized", 401)
}

func (o *GetProjectTypeByIDUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProjectTypeByIDUsingGETForbidden creates a GetProjectTypeByIDUsingGETForbidden with default headers values
func NewGetProjectTypeByIDUsingGETForbidden() *GetProjectTypeByIDUsingGETForbidden {
	return &GetProjectTypeByIDUsingGETForbidden{}
}

/*
GetProjectTypeByIDUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetProjectTypeByIDUsingGETForbidden struct {
}

// IsSuccess returns true when this get project type by Id using g e t forbidden response has a 2xx status code
func (o *GetProjectTypeByIDUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project type by Id using g e t forbidden response has a 3xx status code
func (o *GetProjectTypeByIDUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project type by Id using g e t forbidden response has a 4xx status code
func (o *GetProjectTypeByIDUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project type by Id using g e t forbidden response has a 5xx status code
func (o *GetProjectTypeByIDUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get project type by Id using g e t forbidden response a status code equal to that given
func (o *GetProjectTypeByIDUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get project type by Id using g e t forbidden response
func (o *GetProjectTypeByIDUsingGETForbidden) Code() int {
	return 403
}

func (o *GetProjectTypeByIDUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdUsingGETForbidden", 403)
}

func (o *GetProjectTypeByIDUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdUsingGETForbidden", 403)
}

func (o *GetProjectTypeByIDUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProjectTypeByIDUsingGETNotFound creates a GetProjectTypeByIDUsingGETNotFound with default headers values
func NewGetProjectTypeByIDUsingGETNotFound() *GetProjectTypeByIDUsingGETNotFound {
	return &GetProjectTypeByIDUsingGETNotFound{}
}

/*
GetProjectTypeByIDUsingGETNotFound describes a response with status code 404, with default header values.

Project type not found
*/
type GetProjectTypeByIDUsingGETNotFound struct {
}

// IsSuccess returns true when this get project type by Id using g e t not found response has a 2xx status code
func (o *GetProjectTypeByIDUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project type by Id using g e t not found response has a 3xx status code
func (o *GetProjectTypeByIDUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project type by Id using g e t not found response has a 4xx status code
func (o *GetProjectTypeByIDUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project type by Id using g e t not found response has a 5xx status code
func (o *GetProjectTypeByIDUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get project type by Id using g e t not found response a status code equal to that given
func (o *GetProjectTypeByIDUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get project type by Id using g e t not found response
func (o *GetProjectTypeByIDUsingGETNotFound) Code() int {
	return 404
}

func (o *GetProjectTypeByIDUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdUsingGETNotFound", 404)
}

func (o *GetProjectTypeByIDUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdUsingGETNotFound", 404)
}

func (o *GetProjectTypeByIDUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
