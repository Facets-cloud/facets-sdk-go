// Code generated by go-swagger; DO NOT EDIT.

package ui_project_type_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui project type controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui project type controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui project type controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui project type controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddProjectType(params *AddProjectTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddProjectTypeOK, error)

	DeleteProjectType(params *DeleteProjectTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectTypeOK, error)

	GetAllProjectTypes(params *GetAllProjectTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllProjectTypesOK, error)

	GetProjectTypeByID(params *GetProjectTypeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectTypeByIDOK, error)

	UpdateProjectType(params *UpdateProjectTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectTypeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	AddProjectType adds a new project type

	- **Description:** Creates a new project type from the provided request details.

- **Restrictions:** Only users with the appropriate permissions can add project types.
- **Permissions:** Requires `PROJECT_TYPE_WRITE` permission.
- **Audit Logging:** This operation is logged for audit purposes.
*/
func (a *Client) AddProjectType(params *AddProjectTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddProjectTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddProjectTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addProjectType",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/project-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddProjectTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddProjectTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addProjectType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteProjectType deletes a project type

	- **Description:** Deletes an existing project type based on its ID.

- **Restrictions:** Only users with the correct RBAC permission can delete a project type.
- **Permissions:** Requires `PROJECT_TYPE_DELETE` permission.
- **Audit Logging:** This operation is logged for audit purposes.
*/
func (a *Client) DeleteProjectType(params *DeleteProjectTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProjectType",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/project-types/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProjectType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAllProjectTypes gets all project types

	- **Description:** Retrieve a list of all existing project types.

- **Restrictions:** None.
- **Permissions:** No specific permissions required.
- **Audit Logging:** Not applicable.
*/
func (a *Client) GetAllProjectTypes(params *GetAllProjectTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllProjectTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllProjectTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllProjectTypes",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/project-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllProjectTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllProjectTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllProjectTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetProjectTypeByID gets project type by ID

	- **Description:** Retrieve a specific project type by its ID.

- **Restrictions:** None.
- **Permissions:** No specific permissions required.
- **Audit Logging:** Not applicable.
*/
func (a *Client) GetProjectTypeByID(params *GetProjectTypeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectTypeByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectTypeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectTypeById",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/project-types/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectTypeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectTypeByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectTypeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateProjectType updates an existing project type

	- **Description:** Updates details of a specified project type by its ID.

- **Restrictions:** Only users with the correct permissions can update project types.
- **Permissions:** Requires `PROJECT_TYPE_WRITE` permission.
- **Audit Logging:** This operation is logged for audit purposes.
*/
func (a *Client) UpdateProjectType(params *UpdateProjectTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProjectType",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/project-types/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProjectType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
