// Code generated by go-swagger; DO NOT EDIT.

package ui_project_type_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllProjectTypesUsingGETReader is a Reader for the GetAllProjectTypesUsingGET structure.
type GetAllProjectTypesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllProjectTypesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllProjectTypesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllProjectTypesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllProjectTypesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllProjectTypesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/project-types] getAllProjectTypesUsingGET", response, response.Code())
	}
}

// NewGetAllProjectTypesUsingGETOK creates a GetAllProjectTypesUsingGETOK with default headers values
func NewGetAllProjectTypesUsingGETOK() *GetAllProjectTypesUsingGETOK {
	return &GetAllProjectTypesUsingGETOK{}
}

/*
GetAllProjectTypesUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetAllProjectTypesUsingGETOK struct {
	Payload []*models.ProjectTypeResponse
}

// IsSuccess returns true when this get all project types using g e t o k response has a 2xx status code
func (o *GetAllProjectTypesUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all project types using g e t o k response has a 3xx status code
func (o *GetAllProjectTypesUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all project types using g e t o k response has a 4xx status code
func (o *GetAllProjectTypesUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all project types using g e t o k response has a 5xx status code
func (o *GetAllProjectTypesUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all project types using g e t o k response a status code equal to that given
func (o *GetAllProjectTypesUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all project types using g e t o k response
func (o *GetAllProjectTypesUsingGETOK) Code() int {
	return 200
}

func (o *GetAllProjectTypesUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesUsingGETOK %s", 200, payload)
}

func (o *GetAllProjectTypesUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesUsingGETOK %s", 200, payload)
}

func (o *GetAllProjectTypesUsingGETOK) GetPayload() []*models.ProjectTypeResponse {
	return o.Payload
}

func (o *GetAllProjectTypesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllProjectTypesUsingGETUnauthorized creates a GetAllProjectTypesUsingGETUnauthorized with default headers values
func NewGetAllProjectTypesUsingGETUnauthorized() *GetAllProjectTypesUsingGETUnauthorized {
	return &GetAllProjectTypesUsingGETUnauthorized{}
}

/*
GetAllProjectTypesUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllProjectTypesUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all project types using g e t unauthorized response has a 2xx status code
func (o *GetAllProjectTypesUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all project types using g e t unauthorized response has a 3xx status code
func (o *GetAllProjectTypesUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all project types using g e t unauthorized response has a 4xx status code
func (o *GetAllProjectTypesUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all project types using g e t unauthorized response has a 5xx status code
func (o *GetAllProjectTypesUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all project types using g e t unauthorized response a status code equal to that given
func (o *GetAllProjectTypesUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all project types using g e t unauthorized response
func (o *GetAllProjectTypesUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllProjectTypesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesUsingGETUnauthorized", 401)
}

func (o *GetAllProjectTypesUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesUsingGETUnauthorized", 401)
}

func (o *GetAllProjectTypesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllProjectTypesUsingGETForbidden creates a GetAllProjectTypesUsingGETForbidden with default headers values
func NewGetAllProjectTypesUsingGETForbidden() *GetAllProjectTypesUsingGETForbidden {
	return &GetAllProjectTypesUsingGETForbidden{}
}

/*
GetAllProjectTypesUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllProjectTypesUsingGETForbidden struct {
}

// IsSuccess returns true when this get all project types using g e t forbidden response has a 2xx status code
func (o *GetAllProjectTypesUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all project types using g e t forbidden response has a 3xx status code
func (o *GetAllProjectTypesUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all project types using g e t forbidden response has a 4xx status code
func (o *GetAllProjectTypesUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all project types using g e t forbidden response has a 5xx status code
func (o *GetAllProjectTypesUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all project types using g e t forbidden response a status code equal to that given
func (o *GetAllProjectTypesUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all project types using g e t forbidden response
func (o *GetAllProjectTypesUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllProjectTypesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesUsingGETForbidden", 403)
}

func (o *GetAllProjectTypesUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesUsingGETForbidden", 403)
}

func (o *GetAllProjectTypesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllProjectTypesUsingGETNotFound creates a GetAllProjectTypesUsingGETNotFound with default headers values
func NewGetAllProjectTypesUsingGETNotFound() *GetAllProjectTypesUsingGETNotFound {
	return &GetAllProjectTypesUsingGETNotFound{}
}

/*
GetAllProjectTypesUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllProjectTypesUsingGETNotFound struct {
}

// IsSuccess returns true when this get all project types using g e t not found response has a 2xx status code
func (o *GetAllProjectTypesUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all project types using g e t not found response has a 3xx status code
func (o *GetAllProjectTypesUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all project types using g e t not found response has a 4xx status code
func (o *GetAllProjectTypesUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all project types using g e t not found response has a 5xx status code
func (o *GetAllProjectTypesUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all project types using g e t not found response a status code equal to that given
func (o *GetAllProjectTypesUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all project types using g e t not found response
func (o *GetAllProjectTypesUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllProjectTypesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesUsingGETNotFound", 404)
}

func (o *GetAllProjectTypesUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesUsingGETNotFound", 404)
}

func (o *GetAllProjectTypesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
