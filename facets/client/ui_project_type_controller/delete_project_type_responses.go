// Code generated by go-swagger; DO NOT EDIT.

package ui_project_type_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteProjectTypeReader is a Reader for the DeleteProjectType structure.
type DeleteProjectTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteProjectTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteProjectTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteProjectTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteProjectTypeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteProjectTypeMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteProjectTypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/project-types/{id}] deleteProjectType", response, response.Code())
	}
}

// NewDeleteProjectTypeOK creates a DeleteProjectTypeOK with default headers values
func NewDeleteProjectTypeOK() *DeleteProjectTypeOK {
	return &DeleteProjectTypeOK{}
}

/*
DeleteProjectTypeOK describes a response with status code 200, with default header values.

Project type deleted successfully
*/
type DeleteProjectTypeOK struct {
}

// IsSuccess returns true when this delete project type o k response has a 2xx status code
func (o *DeleteProjectTypeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete project type o k response has a 3xx status code
func (o *DeleteProjectTypeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project type o k response has a 4xx status code
func (o *DeleteProjectTypeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete project type o k response has a 5xx status code
func (o *DeleteProjectTypeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete project type o k response a status code equal to that given
func (o *DeleteProjectTypeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete project type o k response
func (o *DeleteProjectTypeOK) Code() int {
	return 200
}

func (o *DeleteProjectTypeOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeOK", 200)
}

func (o *DeleteProjectTypeOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeOK", 200)
}

func (o *DeleteProjectTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteProjectTypeBadRequest creates a DeleteProjectTypeBadRequest with default headers values
func NewDeleteProjectTypeBadRequest() *DeleteProjectTypeBadRequest {
	return &DeleteProjectTypeBadRequest{}
}

/*
DeleteProjectTypeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteProjectTypeBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete project type bad request response has a 2xx status code
func (o *DeleteProjectTypeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete project type bad request response has a 3xx status code
func (o *DeleteProjectTypeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project type bad request response has a 4xx status code
func (o *DeleteProjectTypeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete project type bad request response has a 5xx status code
func (o *DeleteProjectTypeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete project type bad request response a status code equal to that given
func (o *DeleteProjectTypeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete project type bad request response
func (o *DeleteProjectTypeBadRequest) Code() int {
	return 400
}

func (o *DeleteProjectTypeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeBadRequest %s", 400, payload)
}

func (o *DeleteProjectTypeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeBadRequest %s", 400, payload)
}

func (o *DeleteProjectTypeBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteProjectTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteProjectTypeNotFound creates a DeleteProjectTypeNotFound with default headers values
func NewDeleteProjectTypeNotFound() *DeleteProjectTypeNotFound {
	return &DeleteProjectTypeNotFound{}
}

/*
DeleteProjectTypeNotFound describes a response with status code 404, with default header values.

Project type not found
*/
type DeleteProjectTypeNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete project type not found response has a 2xx status code
func (o *DeleteProjectTypeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete project type not found response has a 3xx status code
func (o *DeleteProjectTypeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project type not found response has a 4xx status code
func (o *DeleteProjectTypeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete project type not found response has a 5xx status code
func (o *DeleteProjectTypeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete project type not found response a status code equal to that given
func (o *DeleteProjectTypeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete project type not found response
func (o *DeleteProjectTypeNotFound) Code() int {
	return 404
}

func (o *DeleteProjectTypeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeNotFound %s", 404, payload)
}

func (o *DeleteProjectTypeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeNotFound %s", 404, payload)
}

func (o *DeleteProjectTypeNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteProjectTypeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteProjectTypeMethodNotAllowed creates a DeleteProjectTypeMethodNotAllowed with default headers values
func NewDeleteProjectTypeMethodNotAllowed() *DeleteProjectTypeMethodNotAllowed {
	return &DeleteProjectTypeMethodNotAllowed{}
}

/*
DeleteProjectTypeMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DeleteProjectTypeMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete project type method not allowed response has a 2xx status code
func (o *DeleteProjectTypeMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete project type method not allowed response has a 3xx status code
func (o *DeleteProjectTypeMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project type method not allowed response has a 4xx status code
func (o *DeleteProjectTypeMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete project type method not allowed response has a 5xx status code
func (o *DeleteProjectTypeMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete project type method not allowed response a status code equal to that given
func (o *DeleteProjectTypeMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the delete project type method not allowed response
func (o *DeleteProjectTypeMethodNotAllowed) Code() int {
	return 405
}

func (o *DeleteProjectTypeMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeMethodNotAllowed %s", 405, payload)
}

func (o *DeleteProjectTypeMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeMethodNotAllowed %s", 405, payload)
}

func (o *DeleteProjectTypeMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteProjectTypeMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteProjectTypeInternalServerError creates a DeleteProjectTypeInternalServerError with default headers values
func NewDeleteProjectTypeInternalServerError() *DeleteProjectTypeInternalServerError {
	return &DeleteProjectTypeInternalServerError{}
}

/*
DeleteProjectTypeInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type DeleteProjectTypeInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete project type internal server error response has a 2xx status code
func (o *DeleteProjectTypeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete project type internal server error response has a 3xx status code
func (o *DeleteProjectTypeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project type internal server error response has a 4xx status code
func (o *DeleteProjectTypeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete project type internal server error response has a 5xx status code
func (o *DeleteProjectTypeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete project type internal server error response a status code equal to that given
func (o *DeleteProjectTypeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete project type internal server error response
func (o *DeleteProjectTypeInternalServerError) Code() int {
	return 500
}

func (o *DeleteProjectTypeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeInternalServerError %s", 500, payload)
}

func (o *DeleteProjectTypeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeInternalServerError %s", 500, payload)
}

func (o *DeleteProjectTypeInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteProjectTypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
