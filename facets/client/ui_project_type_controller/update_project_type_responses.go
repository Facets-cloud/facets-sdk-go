// Code generated by go-swagger; DO NOT EDIT.

package ui_project_type_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateProjectTypeReader is a Reader for the UpdateProjectType structure.
type UpdateProjectTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateProjectTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateProjectTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateProjectTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateProjectTypeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateProjectTypeMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateProjectTypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/project-types/{id}] updateProjectType", response, response.Code())
	}
}

// NewUpdateProjectTypeOK creates a UpdateProjectTypeOK with default headers values
func NewUpdateProjectTypeOK() *UpdateProjectTypeOK {
	return &UpdateProjectTypeOK{}
}

/*
UpdateProjectTypeOK describes a response with status code 200, with default header values.

Project type updated successfully
*/
type UpdateProjectTypeOK struct {
	Payload *models.ProjectTypeResponse
}

// IsSuccess returns true when this update project type o k response has a 2xx status code
func (o *UpdateProjectTypeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update project type o k response has a 3xx status code
func (o *UpdateProjectTypeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project type o k response has a 4xx status code
func (o *UpdateProjectTypeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update project type o k response has a 5xx status code
func (o *UpdateProjectTypeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update project type o k response a status code equal to that given
func (o *UpdateProjectTypeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update project type o k response
func (o *UpdateProjectTypeOK) Code() int {
	return 200
}

func (o *UpdateProjectTypeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeOK %s", 200, payload)
}

func (o *UpdateProjectTypeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeOK %s", 200, payload)
}

func (o *UpdateProjectTypeOK) GetPayload() *models.ProjectTypeResponse {
	return o.Payload
}

func (o *UpdateProjectTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectTypeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectTypeBadRequest creates a UpdateProjectTypeBadRequest with default headers values
func NewUpdateProjectTypeBadRequest() *UpdateProjectTypeBadRequest {
	return &UpdateProjectTypeBadRequest{}
}

/*
UpdateProjectTypeBadRequest describes a response with status code 400, with default header values.

Invalid request or project ID
*/
type UpdateProjectTypeBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update project type bad request response has a 2xx status code
func (o *UpdateProjectTypeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project type bad request response has a 3xx status code
func (o *UpdateProjectTypeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project type bad request response has a 4xx status code
func (o *UpdateProjectTypeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project type bad request response has a 5xx status code
func (o *UpdateProjectTypeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update project type bad request response a status code equal to that given
func (o *UpdateProjectTypeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update project type bad request response
func (o *UpdateProjectTypeBadRequest) Code() int {
	return 400
}

func (o *UpdateProjectTypeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeBadRequest %s", 400, payload)
}

func (o *UpdateProjectTypeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeBadRequest %s", 400, payload)
}

func (o *UpdateProjectTypeBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateProjectTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectTypeNotFound creates a UpdateProjectTypeNotFound with default headers values
func NewUpdateProjectTypeNotFound() *UpdateProjectTypeNotFound {
	return &UpdateProjectTypeNotFound{}
}

/*
UpdateProjectTypeNotFound describes a response with status code 404, with default header values.

Project type not found
*/
type UpdateProjectTypeNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update project type not found response has a 2xx status code
func (o *UpdateProjectTypeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project type not found response has a 3xx status code
func (o *UpdateProjectTypeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project type not found response has a 4xx status code
func (o *UpdateProjectTypeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project type not found response has a 5xx status code
func (o *UpdateProjectTypeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update project type not found response a status code equal to that given
func (o *UpdateProjectTypeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update project type not found response
func (o *UpdateProjectTypeNotFound) Code() int {
	return 404
}

func (o *UpdateProjectTypeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeNotFound %s", 404, payload)
}

func (o *UpdateProjectTypeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeNotFound %s", 404, payload)
}

func (o *UpdateProjectTypeNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateProjectTypeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectTypeMethodNotAllowed creates a UpdateProjectTypeMethodNotAllowed with default headers values
func NewUpdateProjectTypeMethodNotAllowed() *UpdateProjectTypeMethodNotAllowed {
	return &UpdateProjectTypeMethodNotAllowed{}
}

/*
UpdateProjectTypeMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateProjectTypeMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update project type method not allowed response has a 2xx status code
func (o *UpdateProjectTypeMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project type method not allowed response has a 3xx status code
func (o *UpdateProjectTypeMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project type method not allowed response has a 4xx status code
func (o *UpdateProjectTypeMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project type method not allowed response has a 5xx status code
func (o *UpdateProjectTypeMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update project type method not allowed response a status code equal to that given
func (o *UpdateProjectTypeMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update project type method not allowed response
func (o *UpdateProjectTypeMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateProjectTypeMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeMethodNotAllowed %s", 405, payload)
}

func (o *UpdateProjectTypeMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeMethodNotAllowed %s", 405, payload)
}

func (o *UpdateProjectTypeMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateProjectTypeMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectTypeInternalServerError creates a UpdateProjectTypeInternalServerError with default headers values
func NewUpdateProjectTypeInternalServerError() *UpdateProjectTypeInternalServerError {
	return &UpdateProjectTypeInternalServerError{}
}

/*
UpdateProjectTypeInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateProjectTypeInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update project type internal server error response has a 2xx status code
func (o *UpdateProjectTypeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project type internal server error response has a 3xx status code
func (o *UpdateProjectTypeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project type internal server error response has a 4xx status code
func (o *UpdateProjectTypeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update project type internal server error response has a 5xx status code
func (o *UpdateProjectTypeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update project type internal server error response a status code equal to that given
func (o *UpdateProjectTypeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update project type internal server error response
func (o *UpdateProjectTypeInternalServerError) Code() int {
	return 500
}

func (o *UpdateProjectTypeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeInternalServerError %s", 500, payload)
}

func (o *UpdateProjectTypeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeInternalServerError %s", 500, payload)
}

func (o *UpdateProjectTypeInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateProjectTypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
