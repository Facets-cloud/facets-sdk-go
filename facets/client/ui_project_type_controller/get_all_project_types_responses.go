// Code generated by go-swagger; DO NOT EDIT.

package ui_project_type_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllProjectTypesReader is a Reader for the GetAllProjectTypes structure.
type GetAllProjectTypesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllProjectTypesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllProjectTypesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllProjectTypesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllProjectTypesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAllProjectTypesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllProjectTypesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/project-types] getAllProjectTypes", response, response.Code())
	}
}

// NewGetAllProjectTypesOK creates a GetAllProjectTypesOK with default headers values
func NewGetAllProjectTypesOK() *GetAllProjectTypesOK {
	return &GetAllProjectTypesOK{}
}

/*
GetAllProjectTypesOK describes a response with status code 200, with default header values.

Success
*/
type GetAllProjectTypesOK struct {
	Payload []*models.ProjectTypeResponse
}

// IsSuccess returns true when this get all project types o k response has a 2xx status code
func (o *GetAllProjectTypesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all project types o k response has a 3xx status code
func (o *GetAllProjectTypesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all project types o k response has a 4xx status code
func (o *GetAllProjectTypesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all project types o k response has a 5xx status code
func (o *GetAllProjectTypesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all project types o k response a status code equal to that given
func (o *GetAllProjectTypesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all project types o k response
func (o *GetAllProjectTypesOK) Code() int {
	return 200
}

func (o *GetAllProjectTypesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesOK %s", 200, payload)
}

func (o *GetAllProjectTypesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesOK %s", 200, payload)
}

func (o *GetAllProjectTypesOK) GetPayload() []*models.ProjectTypeResponse {
	return o.Payload
}

func (o *GetAllProjectTypesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllProjectTypesBadRequest creates a GetAllProjectTypesBadRequest with default headers values
func NewGetAllProjectTypesBadRequest() *GetAllProjectTypesBadRequest {
	return &GetAllProjectTypesBadRequest{}
}

/*
GetAllProjectTypesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAllProjectTypesBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all project types bad request response has a 2xx status code
func (o *GetAllProjectTypesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all project types bad request response has a 3xx status code
func (o *GetAllProjectTypesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all project types bad request response has a 4xx status code
func (o *GetAllProjectTypesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all project types bad request response has a 5xx status code
func (o *GetAllProjectTypesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all project types bad request response a status code equal to that given
func (o *GetAllProjectTypesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all project types bad request response
func (o *GetAllProjectTypesBadRequest) Code() int {
	return 400
}

func (o *GetAllProjectTypesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesBadRequest %s", 400, payload)
}

func (o *GetAllProjectTypesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesBadRequest %s", 400, payload)
}

func (o *GetAllProjectTypesBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllProjectTypesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllProjectTypesNotFound creates a GetAllProjectTypesNotFound with default headers values
func NewGetAllProjectTypesNotFound() *GetAllProjectTypesNotFound {
	return &GetAllProjectTypesNotFound{}
}

/*
GetAllProjectTypesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllProjectTypesNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all project types not found response has a 2xx status code
func (o *GetAllProjectTypesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all project types not found response has a 3xx status code
func (o *GetAllProjectTypesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all project types not found response has a 4xx status code
func (o *GetAllProjectTypesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all project types not found response has a 5xx status code
func (o *GetAllProjectTypesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all project types not found response a status code equal to that given
func (o *GetAllProjectTypesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all project types not found response
func (o *GetAllProjectTypesNotFound) Code() int {
	return 404
}

func (o *GetAllProjectTypesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesNotFound %s", 404, payload)
}

func (o *GetAllProjectTypesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesNotFound %s", 404, payload)
}

func (o *GetAllProjectTypesNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllProjectTypesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllProjectTypesMethodNotAllowed creates a GetAllProjectTypesMethodNotAllowed with default headers values
func NewGetAllProjectTypesMethodNotAllowed() *GetAllProjectTypesMethodNotAllowed {
	return &GetAllProjectTypesMethodNotAllowed{}
}

/*
GetAllProjectTypesMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAllProjectTypesMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all project types method not allowed response has a 2xx status code
func (o *GetAllProjectTypesMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all project types method not allowed response has a 3xx status code
func (o *GetAllProjectTypesMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all project types method not allowed response has a 4xx status code
func (o *GetAllProjectTypesMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all project types method not allowed response has a 5xx status code
func (o *GetAllProjectTypesMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get all project types method not allowed response a status code equal to that given
func (o *GetAllProjectTypesMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get all project types method not allowed response
func (o *GetAllProjectTypesMethodNotAllowed) Code() int {
	return 405
}

func (o *GetAllProjectTypesMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesMethodNotAllowed %s", 405, payload)
}

func (o *GetAllProjectTypesMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesMethodNotAllowed %s", 405, payload)
}

func (o *GetAllProjectTypesMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllProjectTypesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllProjectTypesInternalServerError creates a GetAllProjectTypesInternalServerError with default headers values
func NewGetAllProjectTypesInternalServerError() *GetAllProjectTypesInternalServerError {
	return &GetAllProjectTypesInternalServerError{}
}

/*
GetAllProjectTypesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAllProjectTypesInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all project types internal server error response has a 2xx status code
func (o *GetAllProjectTypesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all project types internal server error response has a 3xx status code
func (o *GetAllProjectTypesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all project types internal server error response has a 4xx status code
func (o *GetAllProjectTypesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all project types internal server error response has a 5xx status code
func (o *GetAllProjectTypesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all project types internal server error response a status code equal to that given
func (o *GetAllProjectTypesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all project types internal server error response
func (o *GetAllProjectTypesInternalServerError) Code() int {
	return 500
}

func (o *GetAllProjectTypesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesInternalServerError %s", 500, payload)
}

func (o *GetAllProjectTypesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types][%d] getAllProjectTypesInternalServerError %s", 500, payload)
}

func (o *GetAllProjectTypesInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllProjectTypesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
