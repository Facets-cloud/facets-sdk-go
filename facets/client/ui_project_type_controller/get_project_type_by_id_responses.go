// Code generated by go-swagger; DO NOT EDIT.

package ui_project_type_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetProjectTypeByIDReader is a Reader for the GetProjectTypeByID structure.
type GetProjectTypeByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectTypeByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectTypeByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProjectTypeByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProjectTypeByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetProjectTypeByIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetProjectTypeByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/project-types/{id}] getProjectTypeById", response, response.Code())
	}
}

// NewGetProjectTypeByIDOK creates a GetProjectTypeByIDOK with default headers values
func NewGetProjectTypeByIDOK() *GetProjectTypeByIDOK {
	return &GetProjectTypeByIDOK{}
}

/*
GetProjectTypeByIDOK describes a response with status code 200, with default header values.

Success
*/
type GetProjectTypeByIDOK struct {
	Payload *models.ProjectTypeResponse
}

// IsSuccess returns true when this get project type by Id o k response has a 2xx status code
func (o *GetProjectTypeByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get project type by Id o k response has a 3xx status code
func (o *GetProjectTypeByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project type by Id o k response has a 4xx status code
func (o *GetProjectTypeByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project type by Id o k response has a 5xx status code
func (o *GetProjectTypeByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get project type by Id o k response a status code equal to that given
func (o *GetProjectTypeByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get project type by Id o k response
func (o *GetProjectTypeByIDOK) Code() int {
	return 200
}

func (o *GetProjectTypeByIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdOK %s", 200, payload)
}

func (o *GetProjectTypeByIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdOK %s", 200, payload)
}

func (o *GetProjectTypeByIDOK) GetPayload() *models.ProjectTypeResponse {
	return o.Payload
}

func (o *GetProjectTypeByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectTypeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectTypeByIDBadRequest creates a GetProjectTypeByIDBadRequest with default headers values
func NewGetProjectTypeByIDBadRequest() *GetProjectTypeByIDBadRequest {
	return &GetProjectTypeByIDBadRequest{}
}

/*
GetProjectTypeByIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetProjectTypeByIDBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get project type by Id bad request response has a 2xx status code
func (o *GetProjectTypeByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project type by Id bad request response has a 3xx status code
func (o *GetProjectTypeByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project type by Id bad request response has a 4xx status code
func (o *GetProjectTypeByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project type by Id bad request response has a 5xx status code
func (o *GetProjectTypeByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get project type by Id bad request response a status code equal to that given
func (o *GetProjectTypeByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get project type by Id bad request response
func (o *GetProjectTypeByIDBadRequest) Code() int {
	return 400
}

func (o *GetProjectTypeByIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdBadRequest %s", 400, payload)
}

func (o *GetProjectTypeByIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdBadRequest %s", 400, payload)
}

func (o *GetProjectTypeByIDBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetProjectTypeByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectTypeByIDNotFound creates a GetProjectTypeByIDNotFound with default headers values
func NewGetProjectTypeByIDNotFound() *GetProjectTypeByIDNotFound {
	return &GetProjectTypeByIDNotFound{}
}

/*
GetProjectTypeByIDNotFound describes a response with status code 404, with default header values.

Project type not found
*/
type GetProjectTypeByIDNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get project type by Id not found response has a 2xx status code
func (o *GetProjectTypeByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project type by Id not found response has a 3xx status code
func (o *GetProjectTypeByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project type by Id not found response has a 4xx status code
func (o *GetProjectTypeByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project type by Id not found response has a 5xx status code
func (o *GetProjectTypeByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get project type by Id not found response a status code equal to that given
func (o *GetProjectTypeByIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get project type by Id not found response
func (o *GetProjectTypeByIDNotFound) Code() int {
	return 404
}

func (o *GetProjectTypeByIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdNotFound %s", 404, payload)
}

func (o *GetProjectTypeByIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdNotFound %s", 404, payload)
}

func (o *GetProjectTypeByIDNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetProjectTypeByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectTypeByIDMethodNotAllowed creates a GetProjectTypeByIDMethodNotAllowed with default headers values
func NewGetProjectTypeByIDMethodNotAllowed() *GetProjectTypeByIDMethodNotAllowed {
	return &GetProjectTypeByIDMethodNotAllowed{}
}

/*
GetProjectTypeByIDMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetProjectTypeByIDMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get project type by Id method not allowed response has a 2xx status code
func (o *GetProjectTypeByIDMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project type by Id method not allowed response has a 3xx status code
func (o *GetProjectTypeByIDMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project type by Id method not allowed response has a 4xx status code
func (o *GetProjectTypeByIDMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project type by Id method not allowed response has a 5xx status code
func (o *GetProjectTypeByIDMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get project type by Id method not allowed response a status code equal to that given
func (o *GetProjectTypeByIDMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get project type by Id method not allowed response
func (o *GetProjectTypeByIDMethodNotAllowed) Code() int {
	return 405
}

func (o *GetProjectTypeByIDMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdMethodNotAllowed %s", 405, payload)
}

func (o *GetProjectTypeByIDMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdMethodNotAllowed %s", 405, payload)
}

func (o *GetProjectTypeByIDMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetProjectTypeByIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectTypeByIDInternalServerError creates a GetProjectTypeByIDInternalServerError with default headers values
func NewGetProjectTypeByIDInternalServerError() *GetProjectTypeByIDInternalServerError {
	return &GetProjectTypeByIDInternalServerError{}
}

/*
GetProjectTypeByIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetProjectTypeByIDInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get project type by Id internal server error response has a 2xx status code
func (o *GetProjectTypeByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project type by Id internal server error response has a 3xx status code
func (o *GetProjectTypeByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project type by Id internal server error response has a 4xx status code
func (o *GetProjectTypeByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project type by Id internal server error response has a 5xx status code
func (o *GetProjectTypeByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get project type by Id internal server error response a status code equal to that given
func (o *GetProjectTypeByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get project type by Id internal server error response
func (o *GetProjectTypeByIDInternalServerError) Code() int {
	return 500
}

func (o *GetProjectTypeByIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdInternalServerError %s", 500, payload)
}

func (o *GetProjectTypeByIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/project-types/{id}][%d] getProjectTypeByIdInternalServerError %s", 500, payload)
}

func (o *GetProjectTypeByIDInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetProjectTypeByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
