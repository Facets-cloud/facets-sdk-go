// Code generated by go-swagger; DO NOT EDIT.

package ui_project_type_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteProjectTypeUsingDELETEReader is a Reader for the DeleteProjectTypeUsingDELETE structure.
type DeleteProjectTypeUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteProjectTypeUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteProjectTypeUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteProjectTypeUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteProjectTypeUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteProjectTypeUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteProjectTypeUsingDELETENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteProjectTypeUsingDELETEInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/project-types/{id}] deleteProjectTypeUsingDELETE", response, response.Code())
	}
}

// NewDeleteProjectTypeUsingDELETEOK creates a DeleteProjectTypeUsingDELETEOK with default headers values
func NewDeleteProjectTypeUsingDELETEOK() *DeleteProjectTypeUsingDELETEOK {
	return &DeleteProjectTypeUsingDELETEOK{}
}

/*
DeleteProjectTypeUsingDELETEOK describes a response with status code 200, with default header values.

Project type deleted successfully
*/
type DeleteProjectTypeUsingDELETEOK struct {
}

// IsSuccess returns true when this delete project type using d e l e t e o k response has a 2xx status code
func (o *DeleteProjectTypeUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete project type using d e l e t e o k response has a 3xx status code
func (o *DeleteProjectTypeUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project type using d e l e t e o k response has a 4xx status code
func (o *DeleteProjectTypeUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete project type using d e l e t e o k response has a 5xx status code
func (o *DeleteProjectTypeUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete project type using d e l e t e o k response a status code equal to that given
func (o *DeleteProjectTypeUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete project type using d e l e t e o k response
func (o *DeleteProjectTypeUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteProjectTypeUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeUsingDELETEOK", 200)
}

func (o *DeleteProjectTypeUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeUsingDELETEOK", 200)
}

func (o *DeleteProjectTypeUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteProjectTypeUsingDELETENoContent creates a DeleteProjectTypeUsingDELETENoContent with default headers values
func NewDeleteProjectTypeUsingDELETENoContent() *DeleteProjectTypeUsingDELETENoContent {
	return &DeleteProjectTypeUsingDELETENoContent{}
}

/*
DeleteProjectTypeUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteProjectTypeUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete project type using d e l e t e no content response has a 2xx status code
func (o *DeleteProjectTypeUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete project type using d e l e t e no content response has a 3xx status code
func (o *DeleteProjectTypeUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project type using d e l e t e no content response has a 4xx status code
func (o *DeleteProjectTypeUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete project type using d e l e t e no content response has a 5xx status code
func (o *DeleteProjectTypeUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete project type using d e l e t e no content response a status code equal to that given
func (o *DeleteProjectTypeUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete project type using d e l e t e no content response
func (o *DeleteProjectTypeUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteProjectTypeUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeUsingDELETENoContent", 204)
}

func (o *DeleteProjectTypeUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeUsingDELETENoContent", 204)
}

func (o *DeleteProjectTypeUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteProjectTypeUsingDELETEUnauthorized creates a DeleteProjectTypeUsingDELETEUnauthorized with default headers values
func NewDeleteProjectTypeUsingDELETEUnauthorized() *DeleteProjectTypeUsingDELETEUnauthorized {
	return &DeleteProjectTypeUsingDELETEUnauthorized{}
}

/*
DeleteProjectTypeUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteProjectTypeUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete project type using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteProjectTypeUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete project type using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteProjectTypeUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project type using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteProjectTypeUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete project type using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteProjectTypeUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete project type using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteProjectTypeUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete project type using d e l e t e unauthorized response
func (o *DeleteProjectTypeUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteProjectTypeUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeUsingDELETEUnauthorized", 401)
}

func (o *DeleteProjectTypeUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeUsingDELETEUnauthorized", 401)
}

func (o *DeleteProjectTypeUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteProjectTypeUsingDELETEForbidden creates a DeleteProjectTypeUsingDELETEForbidden with default headers values
func NewDeleteProjectTypeUsingDELETEForbidden() *DeleteProjectTypeUsingDELETEForbidden {
	return &DeleteProjectTypeUsingDELETEForbidden{}
}

/*
DeleteProjectTypeUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteProjectTypeUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete project type using d e l e t e forbidden response has a 2xx status code
func (o *DeleteProjectTypeUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete project type using d e l e t e forbidden response has a 3xx status code
func (o *DeleteProjectTypeUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project type using d e l e t e forbidden response has a 4xx status code
func (o *DeleteProjectTypeUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete project type using d e l e t e forbidden response has a 5xx status code
func (o *DeleteProjectTypeUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete project type using d e l e t e forbidden response a status code equal to that given
func (o *DeleteProjectTypeUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete project type using d e l e t e forbidden response
func (o *DeleteProjectTypeUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteProjectTypeUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeUsingDELETEForbidden", 403)
}

func (o *DeleteProjectTypeUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeUsingDELETEForbidden", 403)
}

func (o *DeleteProjectTypeUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteProjectTypeUsingDELETENotFound creates a DeleteProjectTypeUsingDELETENotFound with default headers values
func NewDeleteProjectTypeUsingDELETENotFound() *DeleteProjectTypeUsingDELETENotFound {
	return &DeleteProjectTypeUsingDELETENotFound{}
}

/*
DeleteProjectTypeUsingDELETENotFound describes a response with status code 404, with default header values.

Project type not found
*/
type DeleteProjectTypeUsingDELETENotFound struct {
}

// IsSuccess returns true when this delete project type using d e l e t e not found response has a 2xx status code
func (o *DeleteProjectTypeUsingDELETENotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete project type using d e l e t e not found response has a 3xx status code
func (o *DeleteProjectTypeUsingDELETENotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project type using d e l e t e not found response has a 4xx status code
func (o *DeleteProjectTypeUsingDELETENotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete project type using d e l e t e not found response has a 5xx status code
func (o *DeleteProjectTypeUsingDELETENotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete project type using d e l e t e not found response a status code equal to that given
func (o *DeleteProjectTypeUsingDELETENotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete project type using d e l e t e not found response
func (o *DeleteProjectTypeUsingDELETENotFound) Code() int {
	return 404
}

func (o *DeleteProjectTypeUsingDELETENotFound) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeUsingDELETENotFound", 404)
}

func (o *DeleteProjectTypeUsingDELETENotFound) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeUsingDELETENotFound", 404)
}

func (o *DeleteProjectTypeUsingDELETENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteProjectTypeUsingDELETEInternalServerError creates a DeleteProjectTypeUsingDELETEInternalServerError with default headers values
func NewDeleteProjectTypeUsingDELETEInternalServerError() *DeleteProjectTypeUsingDELETEInternalServerError {
	return &DeleteProjectTypeUsingDELETEInternalServerError{}
}

/*
DeleteProjectTypeUsingDELETEInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type DeleteProjectTypeUsingDELETEInternalServerError struct {
}

// IsSuccess returns true when this delete project type using d e l e t e internal server error response has a 2xx status code
func (o *DeleteProjectTypeUsingDELETEInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete project type using d e l e t e internal server error response has a 3xx status code
func (o *DeleteProjectTypeUsingDELETEInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project type using d e l e t e internal server error response has a 4xx status code
func (o *DeleteProjectTypeUsingDELETEInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete project type using d e l e t e internal server error response has a 5xx status code
func (o *DeleteProjectTypeUsingDELETEInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete project type using d e l e t e internal server error response a status code equal to that given
func (o *DeleteProjectTypeUsingDELETEInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete project type using d e l e t e internal server error response
func (o *DeleteProjectTypeUsingDELETEInternalServerError) Code() int {
	return 500
}

func (o *DeleteProjectTypeUsingDELETEInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeUsingDELETEInternalServerError", 500)
}

func (o *DeleteProjectTypeUsingDELETEInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/project-types/{id}][%d] deleteProjectTypeUsingDELETEInternalServerError", 500)
}

func (o *DeleteProjectTypeUsingDELETEInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
