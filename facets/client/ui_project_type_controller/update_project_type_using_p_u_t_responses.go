// Code generated by go-swagger; DO NOT EDIT.

package ui_project_type_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateProjectTypeUsingPUTReader is a Reader for the UpdateProjectTypeUsingPUT structure.
type UpdateProjectTypeUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateProjectTypeUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateProjectTypeUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateProjectTypeUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateProjectTypeUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateProjectTypeUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateProjectTypeUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateProjectTypeUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateProjectTypeUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/project-types/{id}] updateProjectTypeUsingPUT", response, response.Code())
	}
}

// NewUpdateProjectTypeUsingPUTOK creates a UpdateProjectTypeUsingPUTOK with default headers values
func NewUpdateProjectTypeUsingPUTOK() *UpdateProjectTypeUsingPUTOK {
	return &UpdateProjectTypeUsingPUTOK{}
}

/*
UpdateProjectTypeUsingPUTOK describes a response with status code 200, with default header values.

Project type updated successfully
*/
type UpdateProjectTypeUsingPUTOK struct {
	Payload *models.ProjectTypeResponse
}

// IsSuccess returns true when this update project type using p u t o k response has a 2xx status code
func (o *UpdateProjectTypeUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update project type using p u t o k response has a 3xx status code
func (o *UpdateProjectTypeUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project type using p u t o k response has a 4xx status code
func (o *UpdateProjectTypeUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update project type using p u t o k response has a 5xx status code
func (o *UpdateProjectTypeUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update project type using p u t o k response a status code equal to that given
func (o *UpdateProjectTypeUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update project type using p u t o k response
func (o *UpdateProjectTypeUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateProjectTypeUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeUsingPUTOK %s", 200, payload)
}

func (o *UpdateProjectTypeUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeUsingPUTOK %s", 200, payload)
}

func (o *UpdateProjectTypeUsingPUTOK) GetPayload() *models.ProjectTypeResponse {
	return o.Payload
}

func (o *UpdateProjectTypeUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectTypeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectTypeUsingPUTCreated creates a UpdateProjectTypeUsingPUTCreated with default headers values
func NewUpdateProjectTypeUsingPUTCreated() *UpdateProjectTypeUsingPUTCreated {
	return &UpdateProjectTypeUsingPUTCreated{}
}

/*
UpdateProjectTypeUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateProjectTypeUsingPUTCreated struct {
}

// IsSuccess returns true when this update project type using p u t created response has a 2xx status code
func (o *UpdateProjectTypeUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update project type using p u t created response has a 3xx status code
func (o *UpdateProjectTypeUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project type using p u t created response has a 4xx status code
func (o *UpdateProjectTypeUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update project type using p u t created response has a 5xx status code
func (o *UpdateProjectTypeUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update project type using p u t created response a status code equal to that given
func (o *UpdateProjectTypeUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update project type using p u t created response
func (o *UpdateProjectTypeUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateProjectTypeUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeUsingPUTCreated", 201)
}

func (o *UpdateProjectTypeUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeUsingPUTCreated", 201)
}

func (o *UpdateProjectTypeUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectTypeUsingPUTBadRequest creates a UpdateProjectTypeUsingPUTBadRequest with default headers values
func NewUpdateProjectTypeUsingPUTBadRequest() *UpdateProjectTypeUsingPUTBadRequest {
	return &UpdateProjectTypeUsingPUTBadRequest{}
}

/*
UpdateProjectTypeUsingPUTBadRequest describes a response with status code 400, with default header values.

Invalid request or project ID
*/
type UpdateProjectTypeUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update project type using p u t bad request response has a 2xx status code
func (o *UpdateProjectTypeUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project type using p u t bad request response has a 3xx status code
func (o *UpdateProjectTypeUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project type using p u t bad request response has a 4xx status code
func (o *UpdateProjectTypeUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project type using p u t bad request response has a 5xx status code
func (o *UpdateProjectTypeUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update project type using p u t bad request response a status code equal to that given
func (o *UpdateProjectTypeUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update project type using p u t bad request response
func (o *UpdateProjectTypeUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateProjectTypeUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeUsingPUTBadRequest", 400)
}

func (o *UpdateProjectTypeUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeUsingPUTBadRequest", 400)
}

func (o *UpdateProjectTypeUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectTypeUsingPUTUnauthorized creates a UpdateProjectTypeUsingPUTUnauthorized with default headers values
func NewUpdateProjectTypeUsingPUTUnauthorized() *UpdateProjectTypeUsingPUTUnauthorized {
	return &UpdateProjectTypeUsingPUTUnauthorized{}
}

/*
UpdateProjectTypeUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateProjectTypeUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update project type using p u t unauthorized response has a 2xx status code
func (o *UpdateProjectTypeUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project type using p u t unauthorized response has a 3xx status code
func (o *UpdateProjectTypeUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project type using p u t unauthorized response has a 4xx status code
func (o *UpdateProjectTypeUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project type using p u t unauthorized response has a 5xx status code
func (o *UpdateProjectTypeUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update project type using p u t unauthorized response a status code equal to that given
func (o *UpdateProjectTypeUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update project type using p u t unauthorized response
func (o *UpdateProjectTypeUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateProjectTypeUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeUsingPUTUnauthorized", 401)
}

func (o *UpdateProjectTypeUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeUsingPUTUnauthorized", 401)
}

func (o *UpdateProjectTypeUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectTypeUsingPUTForbidden creates a UpdateProjectTypeUsingPUTForbidden with default headers values
func NewUpdateProjectTypeUsingPUTForbidden() *UpdateProjectTypeUsingPUTForbidden {
	return &UpdateProjectTypeUsingPUTForbidden{}
}

/*
UpdateProjectTypeUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateProjectTypeUsingPUTForbidden struct {
}

// IsSuccess returns true when this update project type using p u t forbidden response has a 2xx status code
func (o *UpdateProjectTypeUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project type using p u t forbidden response has a 3xx status code
func (o *UpdateProjectTypeUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project type using p u t forbidden response has a 4xx status code
func (o *UpdateProjectTypeUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project type using p u t forbidden response has a 5xx status code
func (o *UpdateProjectTypeUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update project type using p u t forbidden response a status code equal to that given
func (o *UpdateProjectTypeUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update project type using p u t forbidden response
func (o *UpdateProjectTypeUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateProjectTypeUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeUsingPUTForbidden", 403)
}

func (o *UpdateProjectTypeUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeUsingPUTForbidden", 403)
}

func (o *UpdateProjectTypeUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectTypeUsingPUTNotFound creates a UpdateProjectTypeUsingPUTNotFound with default headers values
func NewUpdateProjectTypeUsingPUTNotFound() *UpdateProjectTypeUsingPUTNotFound {
	return &UpdateProjectTypeUsingPUTNotFound{}
}

/*
UpdateProjectTypeUsingPUTNotFound describes a response with status code 404, with default header values.

Project type not found
*/
type UpdateProjectTypeUsingPUTNotFound struct {
}

// IsSuccess returns true when this update project type using p u t not found response has a 2xx status code
func (o *UpdateProjectTypeUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project type using p u t not found response has a 3xx status code
func (o *UpdateProjectTypeUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project type using p u t not found response has a 4xx status code
func (o *UpdateProjectTypeUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project type using p u t not found response has a 5xx status code
func (o *UpdateProjectTypeUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update project type using p u t not found response a status code equal to that given
func (o *UpdateProjectTypeUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update project type using p u t not found response
func (o *UpdateProjectTypeUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateProjectTypeUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeUsingPUTNotFound", 404)
}

func (o *UpdateProjectTypeUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeUsingPUTNotFound", 404)
}

func (o *UpdateProjectTypeUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectTypeUsingPUTInternalServerError creates a UpdateProjectTypeUsingPUTInternalServerError with default headers values
func NewUpdateProjectTypeUsingPUTInternalServerError() *UpdateProjectTypeUsingPUTInternalServerError {
	return &UpdateProjectTypeUsingPUTInternalServerError{}
}

/*
UpdateProjectTypeUsingPUTInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateProjectTypeUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update project type using p u t internal server error response has a 2xx status code
func (o *UpdateProjectTypeUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project type using p u t internal server error response has a 3xx status code
func (o *UpdateProjectTypeUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project type using p u t internal server error response has a 4xx status code
func (o *UpdateProjectTypeUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update project type using p u t internal server error response has a 5xx status code
func (o *UpdateProjectTypeUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update project type using p u t internal server error response a status code equal to that given
func (o *UpdateProjectTypeUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update project type using p u t internal server error response
func (o *UpdateProjectTypeUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateProjectTypeUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeUsingPUTInternalServerError", 500)
}

func (o *UpdateProjectTypeUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/project-types/{id}][%d] updateProjectTypeUsingPUTInternalServerError", 500)
}

func (o *UpdateProjectTypeUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
