// Code generated by go-swagger; DO NOT EDIT.

package ui_custom_content_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// RenderContentReader is a Reader for the RenderContent structure.
type RenderContentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RenderContentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRenderContentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRenderContentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRenderContentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRenderContentMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRenderContentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/content/files/{contentId}/render] renderContent", response, response.Code())
	}
}

// NewRenderContentOK creates a RenderContentOK with default headers values
func NewRenderContentOK() *RenderContentOK {
	return &RenderContentOK{}
}

/*
RenderContentOK describes a response with status code 200, with default header values.

OK
*/
type RenderContentOK struct {
	Payload string
}

// IsSuccess returns true when this render content o k response has a 2xx status code
func (o *RenderContentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this render content o k response has a 3xx status code
func (o *RenderContentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render content o k response has a 4xx status code
func (o *RenderContentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this render content o k response has a 5xx status code
func (o *RenderContentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this render content o k response a status code equal to that given
func (o *RenderContentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the render content o k response
func (o *RenderContentOK) Code() int {
	return 200
}

func (o *RenderContentOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentOK %s", 200, payload)
}

func (o *RenderContentOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentOK %s", 200, payload)
}

func (o *RenderContentOK) GetPayload() string {
	return o.Payload
}

func (o *RenderContentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenderContentBadRequest creates a RenderContentBadRequest with default headers values
func NewRenderContentBadRequest() *RenderContentBadRequest {
	return &RenderContentBadRequest{}
}

/*
RenderContentBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RenderContentBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this render content bad request response has a 2xx status code
func (o *RenderContentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this render content bad request response has a 3xx status code
func (o *RenderContentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render content bad request response has a 4xx status code
func (o *RenderContentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this render content bad request response has a 5xx status code
func (o *RenderContentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this render content bad request response a status code equal to that given
func (o *RenderContentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the render content bad request response
func (o *RenderContentBadRequest) Code() int {
	return 400
}

func (o *RenderContentBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentBadRequest %s", 400, payload)
}

func (o *RenderContentBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentBadRequest %s", 400, payload)
}

func (o *RenderContentBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RenderContentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenderContentNotFound creates a RenderContentNotFound with default headers values
func NewRenderContentNotFound() *RenderContentNotFound {
	return &RenderContentNotFound{}
}

/*
RenderContentNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RenderContentNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this render content not found response has a 2xx status code
func (o *RenderContentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this render content not found response has a 3xx status code
func (o *RenderContentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render content not found response has a 4xx status code
func (o *RenderContentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this render content not found response has a 5xx status code
func (o *RenderContentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this render content not found response a status code equal to that given
func (o *RenderContentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the render content not found response
func (o *RenderContentNotFound) Code() int {
	return 404
}

func (o *RenderContentNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentNotFound %s", 404, payload)
}

func (o *RenderContentNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentNotFound %s", 404, payload)
}

func (o *RenderContentNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RenderContentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenderContentMethodNotAllowed creates a RenderContentMethodNotAllowed with default headers values
func NewRenderContentMethodNotAllowed() *RenderContentMethodNotAllowed {
	return &RenderContentMethodNotAllowed{}
}

/*
RenderContentMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RenderContentMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this render content method not allowed response has a 2xx status code
func (o *RenderContentMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this render content method not allowed response has a 3xx status code
func (o *RenderContentMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render content method not allowed response has a 4xx status code
func (o *RenderContentMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this render content method not allowed response has a 5xx status code
func (o *RenderContentMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this render content method not allowed response a status code equal to that given
func (o *RenderContentMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the render content method not allowed response
func (o *RenderContentMethodNotAllowed) Code() int {
	return 405
}

func (o *RenderContentMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentMethodNotAllowed %s", 405, payload)
}

func (o *RenderContentMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentMethodNotAllowed %s", 405, payload)
}

func (o *RenderContentMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RenderContentMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenderContentInternalServerError creates a RenderContentInternalServerError with default headers values
func NewRenderContentInternalServerError() *RenderContentInternalServerError {
	return &RenderContentInternalServerError{}
}

/*
RenderContentInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RenderContentInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this render content internal server error response has a 2xx status code
func (o *RenderContentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this render content internal server error response has a 3xx status code
func (o *RenderContentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render content internal server error response has a 4xx status code
func (o *RenderContentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this render content internal server error response has a 5xx status code
func (o *RenderContentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this render content internal server error response a status code equal to that given
func (o *RenderContentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the render content internal server error response
func (o *RenderContentInternalServerError) Code() int {
	return 500
}

func (o *RenderContentInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentInternalServerError %s", 500, payload)
}

func (o *RenderContentInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentInternalServerError %s", 500, payload)
}

func (o *RenderContentInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *RenderContentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
