// Code generated by go-swagger; DO NOT EDIT.

package ui_custom_content_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteContentFileUsingDELETEReader is a Reader for the DeleteContentFileUsingDELETE structure.
type DeleteContentFileUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteContentFileUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteContentFileUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteContentFileUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteContentFileUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteContentFileUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/content/files/{contentId}] deleteContentFileUsingDELETE", response, response.Code())
	}
}

// NewDeleteContentFileUsingDELETEOK creates a DeleteContentFileUsingDELETEOK with default headers values
func NewDeleteContentFileUsingDELETEOK() *DeleteContentFileUsingDELETEOK {
	return &DeleteContentFileUsingDELETEOK{}
}

/*
DeleteContentFileUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteContentFileUsingDELETEOK struct {
}

// IsSuccess returns true when this delete content file using d e l e t e o k response has a 2xx status code
func (o *DeleteContentFileUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete content file using d e l e t e o k response has a 3xx status code
func (o *DeleteContentFileUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content file using d e l e t e o k response has a 4xx status code
func (o *DeleteContentFileUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete content file using d e l e t e o k response has a 5xx status code
func (o *DeleteContentFileUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content file using d e l e t e o k response a status code equal to that given
func (o *DeleteContentFileUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete content file using d e l e t e o k response
func (o *DeleteContentFileUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteContentFileUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileUsingDELETEOK", 200)
}

func (o *DeleteContentFileUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileUsingDELETEOK", 200)
}

func (o *DeleteContentFileUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteContentFileUsingDELETENoContent creates a DeleteContentFileUsingDELETENoContent with default headers values
func NewDeleteContentFileUsingDELETENoContent() *DeleteContentFileUsingDELETENoContent {
	return &DeleteContentFileUsingDELETENoContent{}
}

/*
DeleteContentFileUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteContentFileUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete content file using d e l e t e no content response has a 2xx status code
func (o *DeleteContentFileUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete content file using d e l e t e no content response has a 3xx status code
func (o *DeleteContentFileUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content file using d e l e t e no content response has a 4xx status code
func (o *DeleteContentFileUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete content file using d e l e t e no content response has a 5xx status code
func (o *DeleteContentFileUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content file using d e l e t e no content response a status code equal to that given
func (o *DeleteContentFileUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete content file using d e l e t e no content response
func (o *DeleteContentFileUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteContentFileUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileUsingDELETENoContent", 204)
}

func (o *DeleteContentFileUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileUsingDELETENoContent", 204)
}

func (o *DeleteContentFileUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteContentFileUsingDELETEUnauthorized creates a DeleteContentFileUsingDELETEUnauthorized with default headers values
func NewDeleteContentFileUsingDELETEUnauthorized() *DeleteContentFileUsingDELETEUnauthorized {
	return &DeleteContentFileUsingDELETEUnauthorized{}
}

/*
DeleteContentFileUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteContentFileUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete content file using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteContentFileUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete content file using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteContentFileUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content file using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteContentFileUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete content file using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteContentFileUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content file using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteContentFileUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete content file using d e l e t e unauthorized response
func (o *DeleteContentFileUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteContentFileUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileUsingDELETEUnauthorized", 401)
}

func (o *DeleteContentFileUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileUsingDELETEUnauthorized", 401)
}

func (o *DeleteContentFileUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteContentFileUsingDELETEForbidden creates a DeleteContentFileUsingDELETEForbidden with default headers values
func NewDeleteContentFileUsingDELETEForbidden() *DeleteContentFileUsingDELETEForbidden {
	return &DeleteContentFileUsingDELETEForbidden{}
}

/*
DeleteContentFileUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteContentFileUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete content file using d e l e t e forbidden response has a 2xx status code
func (o *DeleteContentFileUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete content file using d e l e t e forbidden response has a 3xx status code
func (o *DeleteContentFileUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content file using d e l e t e forbidden response has a 4xx status code
func (o *DeleteContentFileUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete content file using d e l e t e forbidden response has a 5xx status code
func (o *DeleteContentFileUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content file using d e l e t e forbidden response a status code equal to that given
func (o *DeleteContentFileUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete content file using d e l e t e forbidden response
func (o *DeleteContentFileUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteContentFileUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileUsingDELETEForbidden", 403)
}

func (o *DeleteContentFileUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileUsingDELETEForbidden", 403)
}

func (o *DeleteContentFileUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
