// Code generated by go-swagger; DO NOT EDIT.

package ui_custom_content_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateContentFileUsingPUTReader is a Reader for the UpdateContentFileUsingPUT structure.
type UpdateContentFileUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateContentFileUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateContentFileUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateContentFileUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateContentFileUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateContentFileUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateContentFileUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/content/files/{contentId}] updateContentFileUsingPUT", response, response.Code())
	}
}

// NewUpdateContentFileUsingPUTOK creates a UpdateContentFileUsingPUTOK with default headers values
func NewUpdateContentFileUsingPUTOK() *UpdateContentFileUsingPUTOK {
	return &UpdateContentFileUsingPUTOK{}
}

/*
UpdateContentFileUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateContentFileUsingPUTOK struct {
	Payload *models.ContentFile
}

// IsSuccess returns true when this update content file using p u t o k response has a 2xx status code
func (o *UpdateContentFileUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update content file using p u t o k response has a 3xx status code
func (o *UpdateContentFileUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update content file using p u t o k response has a 4xx status code
func (o *UpdateContentFileUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update content file using p u t o k response has a 5xx status code
func (o *UpdateContentFileUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update content file using p u t o k response a status code equal to that given
func (o *UpdateContentFileUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update content file using p u t o k response
func (o *UpdateContentFileUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateContentFileUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileUsingPUTOK %s", 200, payload)
}

func (o *UpdateContentFileUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileUsingPUTOK %s", 200, payload)
}

func (o *UpdateContentFileUsingPUTOK) GetPayload() *models.ContentFile {
	return o.Payload
}

func (o *UpdateContentFileUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ContentFile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContentFileUsingPUTCreated creates a UpdateContentFileUsingPUTCreated with default headers values
func NewUpdateContentFileUsingPUTCreated() *UpdateContentFileUsingPUTCreated {
	return &UpdateContentFileUsingPUTCreated{}
}

/*
UpdateContentFileUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateContentFileUsingPUTCreated struct {
}

// IsSuccess returns true when this update content file using p u t created response has a 2xx status code
func (o *UpdateContentFileUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update content file using p u t created response has a 3xx status code
func (o *UpdateContentFileUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update content file using p u t created response has a 4xx status code
func (o *UpdateContentFileUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update content file using p u t created response has a 5xx status code
func (o *UpdateContentFileUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update content file using p u t created response a status code equal to that given
func (o *UpdateContentFileUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update content file using p u t created response
func (o *UpdateContentFileUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateContentFileUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileUsingPUTCreated", 201)
}

func (o *UpdateContentFileUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileUsingPUTCreated", 201)
}

func (o *UpdateContentFileUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateContentFileUsingPUTUnauthorized creates a UpdateContentFileUsingPUTUnauthorized with default headers values
func NewUpdateContentFileUsingPUTUnauthorized() *UpdateContentFileUsingPUTUnauthorized {
	return &UpdateContentFileUsingPUTUnauthorized{}
}

/*
UpdateContentFileUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateContentFileUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update content file using p u t unauthorized response has a 2xx status code
func (o *UpdateContentFileUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update content file using p u t unauthorized response has a 3xx status code
func (o *UpdateContentFileUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update content file using p u t unauthorized response has a 4xx status code
func (o *UpdateContentFileUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update content file using p u t unauthorized response has a 5xx status code
func (o *UpdateContentFileUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update content file using p u t unauthorized response a status code equal to that given
func (o *UpdateContentFileUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update content file using p u t unauthorized response
func (o *UpdateContentFileUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateContentFileUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileUsingPUTUnauthorized", 401)
}

func (o *UpdateContentFileUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileUsingPUTUnauthorized", 401)
}

func (o *UpdateContentFileUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateContentFileUsingPUTForbidden creates a UpdateContentFileUsingPUTForbidden with default headers values
func NewUpdateContentFileUsingPUTForbidden() *UpdateContentFileUsingPUTForbidden {
	return &UpdateContentFileUsingPUTForbidden{}
}

/*
UpdateContentFileUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateContentFileUsingPUTForbidden struct {
}

// IsSuccess returns true when this update content file using p u t forbidden response has a 2xx status code
func (o *UpdateContentFileUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update content file using p u t forbidden response has a 3xx status code
func (o *UpdateContentFileUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update content file using p u t forbidden response has a 4xx status code
func (o *UpdateContentFileUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update content file using p u t forbidden response has a 5xx status code
func (o *UpdateContentFileUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update content file using p u t forbidden response a status code equal to that given
func (o *UpdateContentFileUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update content file using p u t forbidden response
func (o *UpdateContentFileUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateContentFileUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileUsingPUTForbidden", 403)
}

func (o *UpdateContentFileUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileUsingPUTForbidden", 403)
}

func (o *UpdateContentFileUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateContentFileUsingPUTNotFound creates a UpdateContentFileUsingPUTNotFound with default headers values
func NewUpdateContentFileUsingPUTNotFound() *UpdateContentFileUsingPUTNotFound {
	return &UpdateContentFileUsingPUTNotFound{}
}

/*
UpdateContentFileUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateContentFileUsingPUTNotFound struct {
}

// IsSuccess returns true when this update content file using p u t not found response has a 2xx status code
func (o *UpdateContentFileUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update content file using p u t not found response has a 3xx status code
func (o *UpdateContentFileUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update content file using p u t not found response has a 4xx status code
func (o *UpdateContentFileUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update content file using p u t not found response has a 5xx status code
func (o *UpdateContentFileUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update content file using p u t not found response a status code equal to that given
func (o *UpdateContentFileUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update content file using p u t not found response
func (o *UpdateContentFileUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateContentFileUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileUsingPUTNotFound", 404)
}

func (o *UpdateContentFileUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileUsingPUTNotFound", 404)
}

func (o *UpdateContentFileUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
