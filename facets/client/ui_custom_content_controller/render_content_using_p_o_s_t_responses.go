// Code generated by go-swagger; DO NOT EDIT.

package ui_custom_content_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RenderContentUsingPOSTReader is a Reader for the RenderContentUsingPOST structure.
type RenderContentUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RenderContentUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRenderContentUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewRenderContentUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRenderContentUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRenderContentUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRenderContentUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/content/files/{contentId}/render] renderContentUsingPOST", response, response.Code())
	}
}

// NewRenderContentUsingPOSTOK creates a RenderContentUsingPOSTOK with default headers values
func NewRenderContentUsingPOSTOK() *RenderContentUsingPOSTOK {
	return &RenderContentUsingPOSTOK{}
}

/*
RenderContentUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type RenderContentUsingPOSTOK struct {
	Payload string
}

// IsSuccess returns true when this render content using p o s t o k response has a 2xx status code
func (o *RenderContentUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this render content using p o s t o k response has a 3xx status code
func (o *RenderContentUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render content using p o s t o k response has a 4xx status code
func (o *RenderContentUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this render content using p o s t o k response has a 5xx status code
func (o *RenderContentUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this render content using p o s t o k response a status code equal to that given
func (o *RenderContentUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the render content using p o s t o k response
func (o *RenderContentUsingPOSTOK) Code() int {
	return 200
}

func (o *RenderContentUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentUsingPOSTOK %s", 200, payload)
}

func (o *RenderContentUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentUsingPOSTOK %s", 200, payload)
}

func (o *RenderContentUsingPOSTOK) GetPayload() string {
	return o.Payload
}

func (o *RenderContentUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenderContentUsingPOSTCreated creates a RenderContentUsingPOSTCreated with default headers values
func NewRenderContentUsingPOSTCreated() *RenderContentUsingPOSTCreated {
	return &RenderContentUsingPOSTCreated{}
}

/*
RenderContentUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type RenderContentUsingPOSTCreated struct {
}

// IsSuccess returns true when this render content using p o s t created response has a 2xx status code
func (o *RenderContentUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this render content using p o s t created response has a 3xx status code
func (o *RenderContentUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render content using p o s t created response has a 4xx status code
func (o *RenderContentUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this render content using p o s t created response has a 5xx status code
func (o *RenderContentUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this render content using p o s t created response a status code equal to that given
func (o *RenderContentUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the render content using p o s t created response
func (o *RenderContentUsingPOSTCreated) Code() int {
	return 201
}

func (o *RenderContentUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentUsingPOSTCreated", 201)
}

func (o *RenderContentUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentUsingPOSTCreated", 201)
}

func (o *RenderContentUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRenderContentUsingPOSTUnauthorized creates a RenderContentUsingPOSTUnauthorized with default headers values
func NewRenderContentUsingPOSTUnauthorized() *RenderContentUsingPOSTUnauthorized {
	return &RenderContentUsingPOSTUnauthorized{}
}

/*
RenderContentUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RenderContentUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this render content using p o s t unauthorized response has a 2xx status code
func (o *RenderContentUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this render content using p o s t unauthorized response has a 3xx status code
func (o *RenderContentUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render content using p o s t unauthorized response has a 4xx status code
func (o *RenderContentUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this render content using p o s t unauthorized response has a 5xx status code
func (o *RenderContentUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this render content using p o s t unauthorized response a status code equal to that given
func (o *RenderContentUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the render content using p o s t unauthorized response
func (o *RenderContentUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *RenderContentUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentUsingPOSTUnauthorized", 401)
}

func (o *RenderContentUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentUsingPOSTUnauthorized", 401)
}

func (o *RenderContentUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRenderContentUsingPOSTForbidden creates a RenderContentUsingPOSTForbidden with default headers values
func NewRenderContentUsingPOSTForbidden() *RenderContentUsingPOSTForbidden {
	return &RenderContentUsingPOSTForbidden{}
}

/*
RenderContentUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RenderContentUsingPOSTForbidden struct {
}

// IsSuccess returns true when this render content using p o s t forbidden response has a 2xx status code
func (o *RenderContentUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this render content using p o s t forbidden response has a 3xx status code
func (o *RenderContentUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render content using p o s t forbidden response has a 4xx status code
func (o *RenderContentUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this render content using p o s t forbidden response has a 5xx status code
func (o *RenderContentUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this render content using p o s t forbidden response a status code equal to that given
func (o *RenderContentUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the render content using p o s t forbidden response
func (o *RenderContentUsingPOSTForbidden) Code() int {
	return 403
}

func (o *RenderContentUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentUsingPOSTForbidden", 403)
}

func (o *RenderContentUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentUsingPOSTForbidden", 403)
}

func (o *RenderContentUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRenderContentUsingPOSTNotFound creates a RenderContentUsingPOSTNotFound with default headers values
func NewRenderContentUsingPOSTNotFound() *RenderContentUsingPOSTNotFound {
	return &RenderContentUsingPOSTNotFound{}
}

/*
RenderContentUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RenderContentUsingPOSTNotFound struct {
}

// IsSuccess returns true when this render content using p o s t not found response has a 2xx status code
func (o *RenderContentUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this render content using p o s t not found response has a 3xx status code
func (o *RenderContentUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render content using p o s t not found response has a 4xx status code
func (o *RenderContentUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this render content using p o s t not found response has a 5xx status code
func (o *RenderContentUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this render content using p o s t not found response a status code equal to that given
func (o *RenderContentUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the render content using p o s t not found response
func (o *RenderContentUsingPOSTNotFound) Code() int {
	return 404
}

func (o *RenderContentUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentUsingPOSTNotFound", 404)
}

func (o *RenderContentUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/content/files/{contentId}/render][%d] renderContentUsingPOSTNotFound", 404)
}

func (o *RenderContentUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
