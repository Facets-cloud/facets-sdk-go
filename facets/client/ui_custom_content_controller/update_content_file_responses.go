// Code generated by go-swagger; DO NOT EDIT.

package ui_custom_content_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateContentFileReader is a Reader for the UpdateContentFile structure.
type UpdateContentFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateContentFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateContentFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateContentFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateContentFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateContentFileMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateContentFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/content/files/{contentId}] updateContentFile", response, response.Code())
	}
}

// NewUpdateContentFileOK creates a UpdateContentFileOK with default headers values
func NewUpdateContentFileOK() *UpdateContentFileOK {
	return &UpdateContentFileOK{}
}

/*
UpdateContentFileOK describes a response with status code 200, with default header values.

OK
*/
type UpdateContentFileOK struct {
	Payload *models.ContentFile
}

// IsSuccess returns true when this update content file o k response has a 2xx status code
func (o *UpdateContentFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update content file o k response has a 3xx status code
func (o *UpdateContentFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update content file o k response has a 4xx status code
func (o *UpdateContentFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update content file o k response has a 5xx status code
func (o *UpdateContentFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update content file o k response a status code equal to that given
func (o *UpdateContentFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update content file o k response
func (o *UpdateContentFileOK) Code() int {
	return 200
}

func (o *UpdateContentFileOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileOK %s", 200, payload)
}

func (o *UpdateContentFileOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileOK %s", 200, payload)
}

func (o *UpdateContentFileOK) GetPayload() *models.ContentFile {
	return o.Payload
}

func (o *UpdateContentFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ContentFile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContentFileBadRequest creates a UpdateContentFileBadRequest with default headers values
func NewUpdateContentFileBadRequest() *UpdateContentFileBadRequest {
	return &UpdateContentFileBadRequest{}
}

/*
UpdateContentFileBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateContentFileBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update content file bad request response has a 2xx status code
func (o *UpdateContentFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update content file bad request response has a 3xx status code
func (o *UpdateContentFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update content file bad request response has a 4xx status code
func (o *UpdateContentFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update content file bad request response has a 5xx status code
func (o *UpdateContentFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update content file bad request response a status code equal to that given
func (o *UpdateContentFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update content file bad request response
func (o *UpdateContentFileBadRequest) Code() int {
	return 400
}

func (o *UpdateContentFileBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileBadRequest %s", 400, payload)
}

func (o *UpdateContentFileBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileBadRequest %s", 400, payload)
}

func (o *UpdateContentFileBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateContentFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContentFileNotFound creates a UpdateContentFileNotFound with default headers values
func NewUpdateContentFileNotFound() *UpdateContentFileNotFound {
	return &UpdateContentFileNotFound{}
}

/*
UpdateContentFileNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateContentFileNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update content file not found response has a 2xx status code
func (o *UpdateContentFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update content file not found response has a 3xx status code
func (o *UpdateContentFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update content file not found response has a 4xx status code
func (o *UpdateContentFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update content file not found response has a 5xx status code
func (o *UpdateContentFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update content file not found response a status code equal to that given
func (o *UpdateContentFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update content file not found response
func (o *UpdateContentFileNotFound) Code() int {
	return 404
}

func (o *UpdateContentFileNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileNotFound %s", 404, payload)
}

func (o *UpdateContentFileNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileNotFound %s", 404, payload)
}

func (o *UpdateContentFileNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateContentFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContentFileMethodNotAllowed creates a UpdateContentFileMethodNotAllowed with default headers values
func NewUpdateContentFileMethodNotAllowed() *UpdateContentFileMethodNotAllowed {
	return &UpdateContentFileMethodNotAllowed{}
}

/*
UpdateContentFileMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateContentFileMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update content file method not allowed response has a 2xx status code
func (o *UpdateContentFileMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update content file method not allowed response has a 3xx status code
func (o *UpdateContentFileMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update content file method not allowed response has a 4xx status code
func (o *UpdateContentFileMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update content file method not allowed response has a 5xx status code
func (o *UpdateContentFileMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update content file method not allowed response a status code equal to that given
func (o *UpdateContentFileMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update content file method not allowed response
func (o *UpdateContentFileMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateContentFileMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileMethodNotAllowed %s", 405, payload)
}

func (o *UpdateContentFileMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileMethodNotAllowed %s", 405, payload)
}

func (o *UpdateContentFileMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateContentFileMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContentFileInternalServerError creates a UpdateContentFileInternalServerError with default headers values
func NewUpdateContentFileInternalServerError() *UpdateContentFileInternalServerError {
	return &UpdateContentFileInternalServerError{}
}

/*
UpdateContentFileInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateContentFileInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update content file internal server error response has a 2xx status code
func (o *UpdateContentFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update content file internal server error response has a 3xx status code
func (o *UpdateContentFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update content file internal server error response has a 4xx status code
func (o *UpdateContentFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update content file internal server error response has a 5xx status code
func (o *UpdateContentFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update content file internal server error response a status code equal to that given
func (o *UpdateContentFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update content file internal server error response
func (o *UpdateContentFileInternalServerError) Code() int {
	return 500
}

func (o *UpdateContentFileInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileInternalServerError %s", 500, payload)
}

func (o *UpdateContentFileInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/content/files/{contentId}][%d] updateContentFileInternalServerError %s", 500, payload)
}

func (o *UpdateContentFileInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateContentFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
