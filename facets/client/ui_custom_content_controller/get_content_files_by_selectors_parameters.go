// Code generated by go-swagger; DO NOT EDIT.

package ui_custom_content_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetContentFilesBySelectorsParams creates a new GetContentFilesBySelectorsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetContentFilesBySelectorsParams() *GetContentFilesBySelectorsParams {
	return &GetContentFilesBySelectorsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetContentFilesBySelectorsParamsWithTimeout creates a new GetContentFilesBySelectorsParams object
// with the ability to set a timeout on a request.
func NewGetContentFilesBySelectorsParamsWithTimeout(timeout time.Duration) *GetContentFilesBySelectorsParams {
	return &GetContentFilesBySelectorsParams{
		timeout: timeout,
	}
}

// NewGetContentFilesBySelectorsParamsWithContext creates a new GetContentFilesBySelectorsParams object
// with the ability to set a context for a request.
func NewGetContentFilesBySelectorsParamsWithContext(ctx context.Context) *GetContentFilesBySelectorsParams {
	return &GetContentFilesBySelectorsParams{
		Context: ctx,
	}
}

// NewGetContentFilesBySelectorsParamsWithHTTPClient creates a new GetContentFilesBySelectorsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetContentFilesBySelectorsParamsWithHTTPClient(client *http.Client) *GetContentFilesBySelectorsParams {
	return &GetContentFilesBySelectorsParams{
		HTTPClient: client,
	}
}

/*
GetContentFilesBySelectorsParams contains all the parameters to send to the API endpoint

	for the get content files by selectors operation.

	Typically these are written to a http.Request.
*/
type GetContentFilesBySelectorsParams struct {

	// ContentType.
	ContentType string

	// DisplayType.
	DisplayType *string

	// ResourceName.
	ResourceName *string

	// ResourceType.
	ResourceType *string

	// SubType.
	SubType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get content files by selectors params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetContentFilesBySelectorsParams) WithDefaults() *GetContentFilesBySelectorsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get content files by selectors params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetContentFilesBySelectorsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get content files by selectors params
func (o *GetContentFilesBySelectorsParams) WithTimeout(timeout time.Duration) *GetContentFilesBySelectorsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get content files by selectors params
func (o *GetContentFilesBySelectorsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get content files by selectors params
func (o *GetContentFilesBySelectorsParams) WithContext(ctx context.Context) *GetContentFilesBySelectorsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get content files by selectors params
func (o *GetContentFilesBySelectorsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get content files by selectors params
func (o *GetContentFilesBySelectorsParams) WithHTTPClient(client *http.Client) *GetContentFilesBySelectorsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get content files by selectors params
func (o *GetContentFilesBySelectorsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentType adds the contentType to the get content files by selectors params
func (o *GetContentFilesBySelectorsParams) WithContentType(contentType string) *GetContentFilesBySelectorsParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the get content files by selectors params
func (o *GetContentFilesBySelectorsParams) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithDisplayType adds the displayType to the get content files by selectors params
func (o *GetContentFilesBySelectorsParams) WithDisplayType(displayType *string) *GetContentFilesBySelectorsParams {
	o.SetDisplayType(displayType)
	return o
}

// SetDisplayType adds the displayType to the get content files by selectors params
func (o *GetContentFilesBySelectorsParams) SetDisplayType(displayType *string) {
	o.DisplayType = displayType
}

// WithResourceName adds the resourceName to the get content files by selectors params
func (o *GetContentFilesBySelectorsParams) WithResourceName(resourceName *string) *GetContentFilesBySelectorsParams {
	o.SetResourceName(resourceName)
	return o
}

// SetResourceName adds the resourceName to the get content files by selectors params
func (o *GetContentFilesBySelectorsParams) SetResourceName(resourceName *string) {
	o.ResourceName = resourceName
}

// WithResourceType adds the resourceType to the get content files by selectors params
func (o *GetContentFilesBySelectorsParams) WithResourceType(resourceType *string) *GetContentFilesBySelectorsParams {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the get content files by selectors params
func (o *GetContentFilesBySelectorsParams) SetResourceType(resourceType *string) {
	o.ResourceType = resourceType
}

// WithSubType adds the subType to the get content files by selectors params
func (o *GetContentFilesBySelectorsParams) WithSubType(subType *string) *GetContentFilesBySelectorsParams {
	o.SetSubType(subType)
	return o
}

// SetSubType adds the subType to the get content files by selectors params
func (o *GetContentFilesBySelectorsParams) SetSubType(subType *string) {
	o.SubType = subType
}

// WriteToRequest writes these params to a swagger request
func (o *GetContentFilesBySelectorsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param contentType
	if err := r.SetPathParam("contentType", o.ContentType); err != nil {
		return err
	}

	if o.DisplayType != nil {

		// query param displayType
		var qrDisplayType string

		if o.DisplayType != nil {
			qrDisplayType = *o.DisplayType
		}
		qDisplayType := qrDisplayType
		if qDisplayType != "" {

			if err := r.SetQueryParam("displayType", qDisplayType); err != nil {
				return err
			}
		}
	}

	if o.ResourceName != nil {

		// query param resourceName
		var qrResourceName string

		if o.ResourceName != nil {
			qrResourceName = *o.ResourceName
		}
		qResourceName := qrResourceName
		if qResourceName != "" {

			if err := r.SetQueryParam("resourceName", qResourceName); err != nil {
				return err
			}
		}
	}

	if o.ResourceType != nil {

		// query param resourceType
		var qrResourceType string

		if o.ResourceType != nil {
			qrResourceType = *o.ResourceType
		}
		qResourceType := qrResourceType
		if qResourceType != "" {

			if err := r.SetQueryParam("resourceType", qResourceType); err != nil {
				return err
			}
		}
	}

	if o.SubType != nil {

		// query param subType
		var qrSubType string

		if o.SubType != nil {
			qrSubType = *o.SubType
		}
		qSubType := qrSubType
		if qSubType != "" {

			if err := r.SetQueryParam("subType", qSubType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
