// Code generated by go-swagger; DO NOT EDIT.

package ui_custom_content_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteContentFileReader is a Reader for the DeleteContentFile structure.
type DeleteContentFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteContentFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteContentFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteContentFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteContentFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteContentFileMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteContentFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/content/files/{contentId}] deleteContentFile", response, response.Code())
	}
}

// NewDeleteContentFileOK creates a DeleteContentFileOK with default headers values
func NewDeleteContentFileOK() *DeleteContentFileOK {
	return &DeleteContentFileOK{}
}

/*
DeleteContentFileOK describes a response with status code 200, with default header values.

OK
*/
type DeleteContentFileOK struct {
}

// IsSuccess returns true when this delete content file o k response has a 2xx status code
func (o *DeleteContentFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete content file o k response has a 3xx status code
func (o *DeleteContentFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content file o k response has a 4xx status code
func (o *DeleteContentFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete content file o k response has a 5xx status code
func (o *DeleteContentFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content file o k response a status code equal to that given
func (o *DeleteContentFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete content file o k response
func (o *DeleteContentFileOK) Code() int {
	return 200
}

func (o *DeleteContentFileOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileOK", 200)
}

func (o *DeleteContentFileOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileOK", 200)
}

func (o *DeleteContentFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteContentFileBadRequest creates a DeleteContentFileBadRequest with default headers values
func NewDeleteContentFileBadRequest() *DeleteContentFileBadRequest {
	return &DeleteContentFileBadRequest{}
}

/*
DeleteContentFileBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteContentFileBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete content file bad request response has a 2xx status code
func (o *DeleteContentFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete content file bad request response has a 3xx status code
func (o *DeleteContentFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content file bad request response has a 4xx status code
func (o *DeleteContentFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete content file bad request response has a 5xx status code
func (o *DeleteContentFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content file bad request response a status code equal to that given
func (o *DeleteContentFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete content file bad request response
func (o *DeleteContentFileBadRequest) Code() int {
	return 400
}

func (o *DeleteContentFileBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileBadRequest %s", 400, payload)
}

func (o *DeleteContentFileBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileBadRequest %s", 400, payload)
}

func (o *DeleteContentFileBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteContentFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteContentFileNotFound creates a DeleteContentFileNotFound with default headers values
func NewDeleteContentFileNotFound() *DeleteContentFileNotFound {
	return &DeleteContentFileNotFound{}
}

/*
DeleteContentFileNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteContentFileNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete content file not found response has a 2xx status code
func (o *DeleteContentFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete content file not found response has a 3xx status code
func (o *DeleteContentFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content file not found response has a 4xx status code
func (o *DeleteContentFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete content file not found response has a 5xx status code
func (o *DeleteContentFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content file not found response a status code equal to that given
func (o *DeleteContentFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete content file not found response
func (o *DeleteContentFileNotFound) Code() int {
	return 404
}

func (o *DeleteContentFileNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileNotFound %s", 404, payload)
}

func (o *DeleteContentFileNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileNotFound %s", 404, payload)
}

func (o *DeleteContentFileNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteContentFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteContentFileMethodNotAllowed creates a DeleteContentFileMethodNotAllowed with default headers values
func NewDeleteContentFileMethodNotAllowed() *DeleteContentFileMethodNotAllowed {
	return &DeleteContentFileMethodNotAllowed{}
}

/*
DeleteContentFileMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DeleteContentFileMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete content file method not allowed response has a 2xx status code
func (o *DeleteContentFileMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete content file method not allowed response has a 3xx status code
func (o *DeleteContentFileMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content file method not allowed response has a 4xx status code
func (o *DeleteContentFileMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete content file method not allowed response has a 5xx status code
func (o *DeleteContentFileMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content file method not allowed response a status code equal to that given
func (o *DeleteContentFileMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the delete content file method not allowed response
func (o *DeleteContentFileMethodNotAllowed) Code() int {
	return 405
}

func (o *DeleteContentFileMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileMethodNotAllowed %s", 405, payload)
}

func (o *DeleteContentFileMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileMethodNotAllowed %s", 405, payload)
}

func (o *DeleteContentFileMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteContentFileMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteContentFileInternalServerError creates a DeleteContentFileInternalServerError with default headers values
func NewDeleteContentFileInternalServerError() *DeleteContentFileInternalServerError {
	return &DeleteContentFileInternalServerError{}
}

/*
DeleteContentFileInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteContentFileInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete content file internal server error response has a 2xx status code
func (o *DeleteContentFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete content file internal server error response has a 3xx status code
func (o *DeleteContentFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content file internal server error response has a 4xx status code
func (o *DeleteContentFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete content file internal server error response has a 5xx status code
func (o *DeleteContentFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete content file internal server error response a status code equal to that given
func (o *DeleteContentFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete content file internal server error response
func (o *DeleteContentFileInternalServerError) Code() int {
	return 500
}

func (o *DeleteContentFileInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileInternalServerError %s", 500, payload)
}

func (o *DeleteContentFileInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/content/files/{contentId}][%d] deleteContentFileInternalServerError %s", 500, payload)
}

func (o *DeleteContentFileInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteContentFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
