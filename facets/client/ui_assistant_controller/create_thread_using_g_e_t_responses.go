// Code generated by go-swagger; DO NOT EDIT.

package ui_assistant_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateThreadUsingGETReader is a Reader for the CreateThreadUsingGET structure.
type CreateThreadUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateThreadUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateThreadUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateThreadUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateThreadUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateThreadUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v2/assistant/thread] createThreadUsingGET", response, response.Code())
	}
}

// NewCreateThreadUsingGETOK creates a CreateThreadUsingGETOK with default headers values
func NewCreateThreadUsingGETOK() *CreateThreadUsingGETOK {
	return &CreateThreadUsingGETOK{}
}

/*
CreateThreadUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type CreateThreadUsingGETOK struct {
	Payload *models.AssistantResponse
}

// IsSuccess returns true when this create thread using g e t o k response has a 2xx status code
func (o *CreateThreadUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create thread using g e t o k response has a 3xx status code
func (o *CreateThreadUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create thread using g e t o k response has a 4xx status code
func (o *CreateThreadUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create thread using g e t o k response has a 5xx status code
func (o *CreateThreadUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create thread using g e t o k response a status code equal to that given
func (o *CreateThreadUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create thread using g e t o k response
func (o *CreateThreadUsingGETOK) Code() int {
	return 200
}

func (o *CreateThreadUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadUsingGETOK %s", 200, payload)
}

func (o *CreateThreadUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadUsingGETOK %s", 200, payload)
}

func (o *CreateThreadUsingGETOK) GetPayload() *models.AssistantResponse {
	return o.Payload
}

func (o *CreateThreadUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AssistantResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateThreadUsingGETUnauthorized creates a CreateThreadUsingGETUnauthorized with default headers values
func NewCreateThreadUsingGETUnauthorized() *CreateThreadUsingGETUnauthorized {
	return &CreateThreadUsingGETUnauthorized{}
}

/*
CreateThreadUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateThreadUsingGETUnauthorized struct {
}

// IsSuccess returns true when this create thread using g e t unauthorized response has a 2xx status code
func (o *CreateThreadUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create thread using g e t unauthorized response has a 3xx status code
func (o *CreateThreadUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create thread using g e t unauthorized response has a 4xx status code
func (o *CreateThreadUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create thread using g e t unauthorized response has a 5xx status code
func (o *CreateThreadUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create thread using g e t unauthorized response a status code equal to that given
func (o *CreateThreadUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create thread using g e t unauthorized response
func (o *CreateThreadUsingGETUnauthorized) Code() int {
	return 401
}

func (o *CreateThreadUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadUsingGETUnauthorized", 401)
}

func (o *CreateThreadUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadUsingGETUnauthorized", 401)
}

func (o *CreateThreadUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateThreadUsingGETForbidden creates a CreateThreadUsingGETForbidden with default headers values
func NewCreateThreadUsingGETForbidden() *CreateThreadUsingGETForbidden {
	return &CreateThreadUsingGETForbidden{}
}

/*
CreateThreadUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateThreadUsingGETForbidden struct {
}

// IsSuccess returns true when this create thread using g e t forbidden response has a 2xx status code
func (o *CreateThreadUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create thread using g e t forbidden response has a 3xx status code
func (o *CreateThreadUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create thread using g e t forbidden response has a 4xx status code
func (o *CreateThreadUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create thread using g e t forbidden response has a 5xx status code
func (o *CreateThreadUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create thread using g e t forbidden response a status code equal to that given
func (o *CreateThreadUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create thread using g e t forbidden response
func (o *CreateThreadUsingGETForbidden) Code() int {
	return 403
}

func (o *CreateThreadUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadUsingGETForbidden", 403)
}

func (o *CreateThreadUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadUsingGETForbidden", 403)
}

func (o *CreateThreadUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateThreadUsingGETNotFound creates a CreateThreadUsingGETNotFound with default headers values
func NewCreateThreadUsingGETNotFound() *CreateThreadUsingGETNotFound {
	return &CreateThreadUsingGETNotFound{}
}

/*
CreateThreadUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateThreadUsingGETNotFound struct {
}

// IsSuccess returns true when this create thread using g e t not found response has a 2xx status code
func (o *CreateThreadUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create thread using g e t not found response has a 3xx status code
func (o *CreateThreadUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create thread using g e t not found response has a 4xx status code
func (o *CreateThreadUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create thread using g e t not found response has a 5xx status code
func (o *CreateThreadUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create thread using g e t not found response a status code equal to that given
func (o *CreateThreadUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create thread using g e t not found response
func (o *CreateThreadUsingGETNotFound) Code() int {
	return 404
}

func (o *CreateThreadUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadUsingGETNotFound", 404)
}

func (o *CreateThreadUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadUsingGETNotFound", 404)
}

func (o *CreateThreadUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
