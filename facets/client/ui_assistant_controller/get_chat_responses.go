// Code generated by go-swagger; DO NOT EDIT.

package ui_assistant_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetChatReader is a Reader for the GetChat structure.
type GetChatReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetChatReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetChatOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetChatBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetChatNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetChatMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetChatInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v2/assistant/{threadId}/getChat] getChat", response, response.Code())
	}
}

// NewGetChatOK creates a GetChatOK with default headers values
func NewGetChatOK() *GetChatOK {
	return &GetChatOK{}
}

/*
GetChatOK describes a response with status code 200, with default header values.

OK
*/
type GetChatOK struct {
	Payload *models.AssistantResponse
}

// IsSuccess returns true when this get chat o k response has a 2xx status code
func (o *GetChatOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get chat o k response has a 3xx status code
func (o *GetChatOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chat o k response has a 4xx status code
func (o *GetChatOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get chat o k response has a 5xx status code
func (o *GetChatOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get chat o k response a status code equal to that given
func (o *GetChatOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get chat o k response
func (o *GetChatOK) Code() int {
	return 200
}

func (o *GetChatOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/{threadId}/getChat][%d] getChatOK %s", 200, payload)
}

func (o *GetChatOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/{threadId}/getChat][%d] getChatOK %s", 200, payload)
}

func (o *GetChatOK) GetPayload() *models.AssistantResponse {
	return o.Payload
}

func (o *GetChatOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AssistantResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChatBadRequest creates a GetChatBadRequest with default headers values
func NewGetChatBadRequest() *GetChatBadRequest {
	return &GetChatBadRequest{}
}

/*
GetChatBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetChatBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get chat bad request response has a 2xx status code
func (o *GetChatBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get chat bad request response has a 3xx status code
func (o *GetChatBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chat bad request response has a 4xx status code
func (o *GetChatBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get chat bad request response has a 5xx status code
func (o *GetChatBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get chat bad request response a status code equal to that given
func (o *GetChatBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get chat bad request response
func (o *GetChatBadRequest) Code() int {
	return 400
}

func (o *GetChatBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/{threadId}/getChat][%d] getChatBadRequest %s", 400, payload)
}

func (o *GetChatBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/{threadId}/getChat][%d] getChatBadRequest %s", 400, payload)
}

func (o *GetChatBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetChatBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChatNotFound creates a GetChatNotFound with default headers values
func NewGetChatNotFound() *GetChatNotFound {
	return &GetChatNotFound{}
}

/*
GetChatNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetChatNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get chat not found response has a 2xx status code
func (o *GetChatNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get chat not found response has a 3xx status code
func (o *GetChatNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chat not found response has a 4xx status code
func (o *GetChatNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get chat not found response has a 5xx status code
func (o *GetChatNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get chat not found response a status code equal to that given
func (o *GetChatNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get chat not found response
func (o *GetChatNotFound) Code() int {
	return 404
}

func (o *GetChatNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/{threadId}/getChat][%d] getChatNotFound %s", 404, payload)
}

func (o *GetChatNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/{threadId}/getChat][%d] getChatNotFound %s", 404, payload)
}

func (o *GetChatNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetChatNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChatMethodNotAllowed creates a GetChatMethodNotAllowed with default headers values
func NewGetChatMethodNotAllowed() *GetChatMethodNotAllowed {
	return &GetChatMethodNotAllowed{}
}

/*
GetChatMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetChatMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get chat method not allowed response has a 2xx status code
func (o *GetChatMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get chat method not allowed response has a 3xx status code
func (o *GetChatMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chat method not allowed response has a 4xx status code
func (o *GetChatMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get chat method not allowed response has a 5xx status code
func (o *GetChatMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get chat method not allowed response a status code equal to that given
func (o *GetChatMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get chat method not allowed response
func (o *GetChatMethodNotAllowed) Code() int {
	return 405
}

func (o *GetChatMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/{threadId}/getChat][%d] getChatMethodNotAllowed %s", 405, payload)
}

func (o *GetChatMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/{threadId}/getChat][%d] getChatMethodNotAllowed %s", 405, payload)
}

func (o *GetChatMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetChatMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChatInternalServerError creates a GetChatInternalServerError with default headers values
func NewGetChatInternalServerError() *GetChatInternalServerError {
	return &GetChatInternalServerError{}
}

/*
GetChatInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetChatInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get chat internal server error response has a 2xx status code
func (o *GetChatInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get chat internal server error response has a 3xx status code
func (o *GetChatInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chat internal server error response has a 4xx status code
func (o *GetChatInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get chat internal server error response has a 5xx status code
func (o *GetChatInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get chat internal server error response a status code equal to that given
func (o *GetChatInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get chat internal server error response
func (o *GetChatInternalServerError) Code() int {
	return 500
}

func (o *GetChatInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/{threadId}/getChat][%d] getChatInternalServerError %s", 500, payload)
}

func (o *GetChatInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/{threadId}/getChat][%d] getChatInternalServerError %s", 500, payload)
}

func (o *GetChatInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetChatInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
