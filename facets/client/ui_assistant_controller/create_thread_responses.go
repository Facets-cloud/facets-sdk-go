// Code generated by go-swagger; DO NOT EDIT.

package ui_assistant_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateThreadReader is a Reader for the CreateThread structure.
type CreateThreadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateThreadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateThreadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateThreadBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateThreadNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreateThreadMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateThreadInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v2/assistant/thread] createThread", response, response.Code())
	}
}

// NewCreateThreadOK creates a CreateThreadOK with default headers values
func NewCreateThreadOK() *CreateThreadOK {
	return &CreateThreadOK{}
}

/*
CreateThreadOK describes a response with status code 200, with default header values.

OK
*/
type CreateThreadOK struct {
	Payload *models.AssistantResponse
}

// IsSuccess returns true when this create thread o k response has a 2xx status code
func (o *CreateThreadOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create thread o k response has a 3xx status code
func (o *CreateThreadOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create thread o k response has a 4xx status code
func (o *CreateThreadOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create thread o k response has a 5xx status code
func (o *CreateThreadOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create thread o k response a status code equal to that given
func (o *CreateThreadOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create thread o k response
func (o *CreateThreadOK) Code() int {
	return 200
}

func (o *CreateThreadOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadOK %s", 200, payload)
}

func (o *CreateThreadOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadOK %s", 200, payload)
}

func (o *CreateThreadOK) GetPayload() *models.AssistantResponse {
	return o.Payload
}

func (o *CreateThreadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AssistantResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateThreadBadRequest creates a CreateThreadBadRequest with default headers values
func NewCreateThreadBadRequest() *CreateThreadBadRequest {
	return &CreateThreadBadRequest{}
}

/*
CreateThreadBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateThreadBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create thread bad request response has a 2xx status code
func (o *CreateThreadBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create thread bad request response has a 3xx status code
func (o *CreateThreadBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create thread bad request response has a 4xx status code
func (o *CreateThreadBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create thread bad request response has a 5xx status code
func (o *CreateThreadBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create thread bad request response a status code equal to that given
func (o *CreateThreadBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create thread bad request response
func (o *CreateThreadBadRequest) Code() int {
	return 400
}

func (o *CreateThreadBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadBadRequest %s", 400, payload)
}

func (o *CreateThreadBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadBadRequest %s", 400, payload)
}

func (o *CreateThreadBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateThreadBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateThreadNotFound creates a CreateThreadNotFound with default headers values
func NewCreateThreadNotFound() *CreateThreadNotFound {
	return &CreateThreadNotFound{}
}

/*
CreateThreadNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateThreadNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create thread not found response has a 2xx status code
func (o *CreateThreadNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create thread not found response has a 3xx status code
func (o *CreateThreadNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create thread not found response has a 4xx status code
func (o *CreateThreadNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create thread not found response has a 5xx status code
func (o *CreateThreadNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create thread not found response a status code equal to that given
func (o *CreateThreadNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create thread not found response
func (o *CreateThreadNotFound) Code() int {
	return 404
}

func (o *CreateThreadNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadNotFound %s", 404, payload)
}

func (o *CreateThreadNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadNotFound %s", 404, payload)
}

func (o *CreateThreadNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateThreadNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateThreadMethodNotAllowed creates a CreateThreadMethodNotAllowed with default headers values
func NewCreateThreadMethodNotAllowed() *CreateThreadMethodNotAllowed {
	return &CreateThreadMethodNotAllowed{}
}

/*
CreateThreadMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type CreateThreadMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create thread method not allowed response has a 2xx status code
func (o *CreateThreadMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create thread method not allowed response has a 3xx status code
func (o *CreateThreadMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create thread method not allowed response has a 4xx status code
func (o *CreateThreadMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create thread method not allowed response has a 5xx status code
func (o *CreateThreadMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this create thread method not allowed response a status code equal to that given
func (o *CreateThreadMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the create thread method not allowed response
func (o *CreateThreadMethodNotAllowed) Code() int {
	return 405
}

func (o *CreateThreadMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadMethodNotAllowed %s", 405, payload)
}

func (o *CreateThreadMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadMethodNotAllowed %s", 405, payload)
}

func (o *CreateThreadMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateThreadMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateThreadInternalServerError creates a CreateThreadInternalServerError with default headers values
func NewCreateThreadInternalServerError() *CreateThreadInternalServerError {
	return &CreateThreadInternalServerError{}
}

/*
CreateThreadInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateThreadInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create thread internal server error response has a 2xx status code
func (o *CreateThreadInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create thread internal server error response has a 3xx status code
func (o *CreateThreadInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create thread internal server error response has a 4xx status code
func (o *CreateThreadInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create thread internal server error response has a 5xx status code
func (o *CreateThreadInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create thread internal server error response a status code equal to that given
func (o *CreateThreadInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create thread internal server error response
func (o *CreateThreadInternalServerError) Code() int {
	return 500
}

func (o *CreateThreadInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadInternalServerError %s", 500, payload)
}

func (o *CreateThreadInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v2/assistant/thread][%d] createThreadInternalServerError %s", 500, payload)
}

func (o *CreateThreadInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateThreadInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
