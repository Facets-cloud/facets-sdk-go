// Code generated by go-swagger; DO NOT EDIT.

package ui_assistant_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ContinueChatReader is a Reader for the ContinueChat structure.
type ContinueChatReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ContinueChatReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewContinueChatOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewContinueChatBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewContinueChatNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewContinueChatMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewContinueChatInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v2/assistant/chat] continueChat", response, response.Code())
	}
}

// NewContinueChatOK creates a ContinueChatOK with default headers values
func NewContinueChatOK() *ContinueChatOK {
	return &ContinueChatOK{}
}

/*
ContinueChatOK describes a response with status code 200, with default header values.

OK
*/
type ContinueChatOK struct {
	Payload *models.AssistantResponse
}

// IsSuccess returns true when this continue chat o k response has a 2xx status code
func (o *ContinueChatOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this continue chat o k response has a 3xx status code
func (o *ContinueChatOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this continue chat o k response has a 4xx status code
func (o *ContinueChatOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this continue chat o k response has a 5xx status code
func (o *ContinueChatOK) IsServerError() bool {
	return false
}

// IsCode returns true when this continue chat o k response a status code equal to that given
func (o *ContinueChatOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the continue chat o k response
func (o *ContinueChatOK) Code() int {
	return 200
}

func (o *ContinueChatOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatOK %s", 200, payload)
}

func (o *ContinueChatOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatOK %s", 200, payload)
}

func (o *ContinueChatOK) GetPayload() *models.AssistantResponse {
	return o.Payload
}

func (o *ContinueChatOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AssistantResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContinueChatBadRequest creates a ContinueChatBadRequest with default headers values
func NewContinueChatBadRequest() *ContinueChatBadRequest {
	return &ContinueChatBadRequest{}
}

/*
ContinueChatBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ContinueChatBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this continue chat bad request response has a 2xx status code
func (o *ContinueChatBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this continue chat bad request response has a 3xx status code
func (o *ContinueChatBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this continue chat bad request response has a 4xx status code
func (o *ContinueChatBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this continue chat bad request response has a 5xx status code
func (o *ContinueChatBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this continue chat bad request response a status code equal to that given
func (o *ContinueChatBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the continue chat bad request response
func (o *ContinueChatBadRequest) Code() int {
	return 400
}

func (o *ContinueChatBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatBadRequest %s", 400, payload)
}

func (o *ContinueChatBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatBadRequest %s", 400, payload)
}

func (o *ContinueChatBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ContinueChatBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContinueChatNotFound creates a ContinueChatNotFound with default headers values
func NewContinueChatNotFound() *ContinueChatNotFound {
	return &ContinueChatNotFound{}
}

/*
ContinueChatNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ContinueChatNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this continue chat not found response has a 2xx status code
func (o *ContinueChatNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this continue chat not found response has a 3xx status code
func (o *ContinueChatNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this continue chat not found response has a 4xx status code
func (o *ContinueChatNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this continue chat not found response has a 5xx status code
func (o *ContinueChatNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this continue chat not found response a status code equal to that given
func (o *ContinueChatNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the continue chat not found response
func (o *ContinueChatNotFound) Code() int {
	return 404
}

func (o *ContinueChatNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatNotFound %s", 404, payload)
}

func (o *ContinueChatNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatNotFound %s", 404, payload)
}

func (o *ContinueChatNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ContinueChatNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContinueChatMethodNotAllowed creates a ContinueChatMethodNotAllowed with default headers values
func NewContinueChatMethodNotAllowed() *ContinueChatMethodNotAllowed {
	return &ContinueChatMethodNotAllowed{}
}

/*
ContinueChatMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ContinueChatMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this continue chat method not allowed response has a 2xx status code
func (o *ContinueChatMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this continue chat method not allowed response has a 3xx status code
func (o *ContinueChatMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this continue chat method not allowed response has a 4xx status code
func (o *ContinueChatMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this continue chat method not allowed response has a 5xx status code
func (o *ContinueChatMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this continue chat method not allowed response a status code equal to that given
func (o *ContinueChatMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the continue chat method not allowed response
func (o *ContinueChatMethodNotAllowed) Code() int {
	return 405
}

func (o *ContinueChatMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatMethodNotAllowed %s", 405, payload)
}

func (o *ContinueChatMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatMethodNotAllowed %s", 405, payload)
}

func (o *ContinueChatMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ContinueChatMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContinueChatInternalServerError creates a ContinueChatInternalServerError with default headers values
func NewContinueChatInternalServerError() *ContinueChatInternalServerError {
	return &ContinueChatInternalServerError{}
}

/*
ContinueChatInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ContinueChatInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this continue chat internal server error response has a 2xx status code
func (o *ContinueChatInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this continue chat internal server error response has a 3xx status code
func (o *ContinueChatInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this continue chat internal server error response has a 4xx status code
func (o *ContinueChatInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this continue chat internal server error response has a 5xx status code
func (o *ContinueChatInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this continue chat internal server error response a status code equal to that given
func (o *ContinueChatInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the continue chat internal server error response
func (o *ContinueChatInternalServerError) Code() int {
	return 500
}

func (o *ContinueChatInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatInternalServerError %s", 500, payload)
}

func (o *ContinueChatInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatInternalServerError %s", 500, payload)
}

func (o *ContinueChatInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ContinueChatInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
