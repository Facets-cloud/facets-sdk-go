// Code generated by go-swagger; DO NOT EDIT.

package ui_assistant_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ContinueChatUsingPOSTReader is a Reader for the ContinueChatUsingPOST structure.
type ContinueChatUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ContinueChatUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewContinueChatUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewContinueChatUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewContinueChatUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewContinueChatUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewContinueChatUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v2/assistant/chat] continueChatUsingPOST", response, response.Code())
	}
}

// NewContinueChatUsingPOSTOK creates a ContinueChatUsingPOSTOK with default headers values
func NewContinueChatUsingPOSTOK() *ContinueChatUsingPOSTOK {
	return &ContinueChatUsingPOSTOK{}
}

/*
ContinueChatUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type ContinueChatUsingPOSTOK struct {
	Payload *models.AssistantResponse
}

// IsSuccess returns true when this continue chat using p o s t o k response has a 2xx status code
func (o *ContinueChatUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this continue chat using p o s t o k response has a 3xx status code
func (o *ContinueChatUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this continue chat using p o s t o k response has a 4xx status code
func (o *ContinueChatUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this continue chat using p o s t o k response has a 5xx status code
func (o *ContinueChatUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this continue chat using p o s t o k response a status code equal to that given
func (o *ContinueChatUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the continue chat using p o s t o k response
func (o *ContinueChatUsingPOSTOK) Code() int {
	return 200
}

func (o *ContinueChatUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatUsingPOSTOK %s", 200, payload)
}

func (o *ContinueChatUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatUsingPOSTOK %s", 200, payload)
}

func (o *ContinueChatUsingPOSTOK) GetPayload() *models.AssistantResponse {
	return o.Payload
}

func (o *ContinueChatUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AssistantResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContinueChatUsingPOSTCreated creates a ContinueChatUsingPOSTCreated with default headers values
func NewContinueChatUsingPOSTCreated() *ContinueChatUsingPOSTCreated {
	return &ContinueChatUsingPOSTCreated{}
}

/*
ContinueChatUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type ContinueChatUsingPOSTCreated struct {
}

// IsSuccess returns true when this continue chat using p o s t created response has a 2xx status code
func (o *ContinueChatUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this continue chat using p o s t created response has a 3xx status code
func (o *ContinueChatUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this continue chat using p o s t created response has a 4xx status code
func (o *ContinueChatUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this continue chat using p o s t created response has a 5xx status code
func (o *ContinueChatUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this continue chat using p o s t created response a status code equal to that given
func (o *ContinueChatUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the continue chat using p o s t created response
func (o *ContinueChatUsingPOSTCreated) Code() int {
	return 201
}

func (o *ContinueChatUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatUsingPOSTCreated", 201)
}

func (o *ContinueChatUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatUsingPOSTCreated", 201)
}

func (o *ContinueChatUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewContinueChatUsingPOSTUnauthorized creates a ContinueChatUsingPOSTUnauthorized with default headers values
func NewContinueChatUsingPOSTUnauthorized() *ContinueChatUsingPOSTUnauthorized {
	return &ContinueChatUsingPOSTUnauthorized{}
}

/*
ContinueChatUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ContinueChatUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this continue chat using p o s t unauthorized response has a 2xx status code
func (o *ContinueChatUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this continue chat using p o s t unauthorized response has a 3xx status code
func (o *ContinueChatUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this continue chat using p o s t unauthorized response has a 4xx status code
func (o *ContinueChatUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this continue chat using p o s t unauthorized response has a 5xx status code
func (o *ContinueChatUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this continue chat using p o s t unauthorized response a status code equal to that given
func (o *ContinueChatUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the continue chat using p o s t unauthorized response
func (o *ContinueChatUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *ContinueChatUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatUsingPOSTUnauthorized", 401)
}

func (o *ContinueChatUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatUsingPOSTUnauthorized", 401)
}

func (o *ContinueChatUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewContinueChatUsingPOSTForbidden creates a ContinueChatUsingPOSTForbidden with default headers values
func NewContinueChatUsingPOSTForbidden() *ContinueChatUsingPOSTForbidden {
	return &ContinueChatUsingPOSTForbidden{}
}

/*
ContinueChatUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ContinueChatUsingPOSTForbidden struct {
}

// IsSuccess returns true when this continue chat using p o s t forbidden response has a 2xx status code
func (o *ContinueChatUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this continue chat using p o s t forbidden response has a 3xx status code
func (o *ContinueChatUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this continue chat using p o s t forbidden response has a 4xx status code
func (o *ContinueChatUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this continue chat using p o s t forbidden response has a 5xx status code
func (o *ContinueChatUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this continue chat using p o s t forbidden response a status code equal to that given
func (o *ContinueChatUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the continue chat using p o s t forbidden response
func (o *ContinueChatUsingPOSTForbidden) Code() int {
	return 403
}

func (o *ContinueChatUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatUsingPOSTForbidden", 403)
}

func (o *ContinueChatUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatUsingPOSTForbidden", 403)
}

func (o *ContinueChatUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewContinueChatUsingPOSTNotFound creates a ContinueChatUsingPOSTNotFound with default headers values
func NewContinueChatUsingPOSTNotFound() *ContinueChatUsingPOSTNotFound {
	return &ContinueChatUsingPOSTNotFound{}
}

/*
ContinueChatUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ContinueChatUsingPOSTNotFound struct {
}

// IsSuccess returns true when this continue chat using p o s t not found response has a 2xx status code
func (o *ContinueChatUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this continue chat using p o s t not found response has a 3xx status code
func (o *ContinueChatUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this continue chat using p o s t not found response has a 4xx status code
func (o *ContinueChatUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this continue chat using p o s t not found response has a 5xx status code
func (o *ContinueChatUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this continue chat using p o s t not found response a status code equal to that given
func (o *ContinueChatUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the continue chat using p o s t not found response
func (o *ContinueChatUsingPOSTNotFound) Code() int {
	return 404
}

func (o *ContinueChatUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatUsingPOSTNotFound", 404)
}

func (o *ContinueChatUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v2/assistant/chat][%d] continueChatUsingPOSTNotFound", 404)
}

func (o *ContinueChatUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
