// Code generated by go-swagger; DO NOT EDIT.

package ui_artifactory_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteArtifactoryUsingDELETEReader is a Reader for the DeleteArtifactoryUsingDELETE structure.
type DeleteArtifactoryUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteArtifactoryUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteArtifactoryUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteArtifactoryUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteArtifactoryUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteArtifactoryUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/artifactories/v2/{artifactoryId}] deleteArtifactoryUsingDELETE", response, response.Code())
	}
}

// NewDeleteArtifactoryUsingDELETEOK creates a DeleteArtifactoryUsingDELETEOK with default headers values
func NewDeleteArtifactoryUsingDELETEOK() *DeleteArtifactoryUsingDELETEOK {
	return &DeleteArtifactoryUsingDELETEOK{}
}

/*
DeleteArtifactoryUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteArtifactoryUsingDELETEOK struct {
}

// IsSuccess returns true when this delete artifactory using d e l e t e o k response has a 2xx status code
func (o *DeleteArtifactoryUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete artifactory using d e l e t e o k response has a 3xx status code
func (o *DeleteArtifactoryUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete artifactory using d e l e t e o k response has a 4xx status code
func (o *DeleteArtifactoryUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete artifactory using d e l e t e o k response has a 5xx status code
func (o *DeleteArtifactoryUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete artifactory using d e l e t e o k response a status code equal to that given
func (o *DeleteArtifactoryUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete artifactory using d e l e t e o k response
func (o *DeleteArtifactoryUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteArtifactoryUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifactories/v2/{artifactoryId}][%d] deleteArtifactoryUsingDELETEOK", 200)
}

func (o *DeleteArtifactoryUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifactories/v2/{artifactoryId}][%d] deleteArtifactoryUsingDELETEOK", 200)
}

func (o *DeleteArtifactoryUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteArtifactoryUsingDELETENoContent creates a DeleteArtifactoryUsingDELETENoContent with default headers values
func NewDeleteArtifactoryUsingDELETENoContent() *DeleteArtifactoryUsingDELETENoContent {
	return &DeleteArtifactoryUsingDELETENoContent{}
}

/*
DeleteArtifactoryUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteArtifactoryUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete artifactory using d e l e t e no content response has a 2xx status code
func (o *DeleteArtifactoryUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete artifactory using d e l e t e no content response has a 3xx status code
func (o *DeleteArtifactoryUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete artifactory using d e l e t e no content response has a 4xx status code
func (o *DeleteArtifactoryUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete artifactory using d e l e t e no content response has a 5xx status code
func (o *DeleteArtifactoryUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete artifactory using d e l e t e no content response a status code equal to that given
func (o *DeleteArtifactoryUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete artifactory using d e l e t e no content response
func (o *DeleteArtifactoryUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteArtifactoryUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifactories/v2/{artifactoryId}][%d] deleteArtifactoryUsingDELETENoContent", 204)
}

func (o *DeleteArtifactoryUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifactories/v2/{artifactoryId}][%d] deleteArtifactoryUsingDELETENoContent", 204)
}

func (o *DeleteArtifactoryUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteArtifactoryUsingDELETEUnauthorized creates a DeleteArtifactoryUsingDELETEUnauthorized with default headers values
func NewDeleteArtifactoryUsingDELETEUnauthorized() *DeleteArtifactoryUsingDELETEUnauthorized {
	return &DeleteArtifactoryUsingDELETEUnauthorized{}
}

/*
DeleteArtifactoryUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteArtifactoryUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete artifactory using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteArtifactoryUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete artifactory using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteArtifactoryUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete artifactory using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteArtifactoryUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete artifactory using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteArtifactoryUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete artifactory using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteArtifactoryUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete artifactory using d e l e t e unauthorized response
func (o *DeleteArtifactoryUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteArtifactoryUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifactories/v2/{artifactoryId}][%d] deleteArtifactoryUsingDELETEUnauthorized", 401)
}

func (o *DeleteArtifactoryUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifactories/v2/{artifactoryId}][%d] deleteArtifactoryUsingDELETEUnauthorized", 401)
}

func (o *DeleteArtifactoryUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteArtifactoryUsingDELETEForbidden creates a DeleteArtifactoryUsingDELETEForbidden with default headers values
func NewDeleteArtifactoryUsingDELETEForbidden() *DeleteArtifactoryUsingDELETEForbidden {
	return &DeleteArtifactoryUsingDELETEForbidden{}
}

/*
DeleteArtifactoryUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteArtifactoryUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete artifactory using d e l e t e forbidden response has a 2xx status code
func (o *DeleteArtifactoryUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete artifactory using d e l e t e forbidden response has a 3xx status code
func (o *DeleteArtifactoryUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete artifactory using d e l e t e forbidden response has a 4xx status code
func (o *DeleteArtifactoryUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete artifactory using d e l e t e forbidden response has a 5xx status code
func (o *DeleteArtifactoryUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete artifactory using d e l e t e forbidden response a status code equal to that given
func (o *DeleteArtifactoryUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete artifactory using d e l e t e forbidden response
func (o *DeleteArtifactoryUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteArtifactoryUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifactories/v2/{artifactoryId}][%d] deleteArtifactoryUsingDELETEForbidden", 403)
}

func (o *DeleteArtifactoryUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifactories/v2/{artifactoryId}][%d] deleteArtifactoryUsingDELETEForbidden", 403)
}

func (o *DeleteArtifactoryUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
