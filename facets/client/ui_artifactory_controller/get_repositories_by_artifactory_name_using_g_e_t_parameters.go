// Code generated by go-swagger; DO NOT EDIT.

package ui_artifactory_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRepositoriesByArtifactoryNameUsingGETParams creates a new GetRepositoriesByArtifactoryNameUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRepositoriesByArtifactoryNameUsingGETParams() *GetRepositoriesByArtifactoryNameUsingGETParams {
	return &GetRepositoriesByArtifactoryNameUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRepositoriesByArtifactoryNameUsingGETParamsWithTimeout creates a new GetRepositoriesByArtifactoryNameUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetRepositoriesByArtifactoryNameUsingGETParamsWithTimeout(timeout time.Duration) *GetRepositoriesByArtifactoryNameUsingGETParams {
	return &GetRepositoriesByArtifactoryNameUsingGETParams{
		timeout: timeout,
	}
}

// NewGetRepositoriesByArtifactoryNameUsingGETParamsWithContext creates a new GetRepositoriesByArtifactoryNameUsingGETParams object
// with the ability to set a context for a request.
func NewGetRepositoriesByArtifactoryNameUsingGETParamsWithContext(ctx context.Context) *GetRepositoriesByArtifactoryNameUsingGETParams {
	return &GetRepositoriesByArtifactoryNameUsingGETParams{
		Context: ctx,
	}
}

// NewGetRepositoriesByArtifactoryNameUsingGETParamsWithHTTPClient creates a new GetRepositoriesByArtifactoryNameUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRepositoriesByArtifactoryNameUsingGETParamsWithHTTPClient(client *http.Client) *GetRepositoriesByArtifactoryNameUsingGETParams {
	return &GetRepositoriesByArtifactoryNameUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetRepositoriesByArtifactoryNameUsingGETParams contains all the parameters to send to the API endpoint

	for the get repositories by artifactory name using g e t operation.

	Typically these are written to a http.Request.
*/
type GetRepositoriesByArtifactoryNameUsingGETParams struct {

	/* ArtifactType.

	   artifactType

	   Default: "docker_image"
	*/
	ArtifactType *string

	/* Name.

	   name
	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get repositories by artifactory name using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRepositoriesByArtifactoryNameUsingGETParams) WithDefaults() *GetRepositoriesByArtifactoryNameUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get repositories by artifactory name using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRepositoriesByArtifactoryNameUsingGETParams) SetDefaults() {
	var (
		artifactTypeDefault = string("docker_image")
	)

	val := GetRepositoriesByArtifactoryNameUsingGETParams{
		ArtifactType: &artifactTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get repositories by artifactory name using g e t params
func (o *GetRepositoriesByArtifactoryNameUsingGETParams) WithTimeout(timeout time.Duration) *GetRepositoriesByArtifactoryNameUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get repositories by artifactory name using g e t params
func (o *GetRepositoriesByArtifactoryNameUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get repositories by artifactory name using g e t params
func (o *GetRepositoriesByArtifactoryNameUsingGETParams) WithContext(ctx context.Context) *GetRepositoriesByArtifactoryNameUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get repositories by artifactory name using g e t params
func (o *GetRepositoriesByArtifactoryNameUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get repositories by artifactory name using g e t params
func (o *GetRepositoriesByArtifactoryNameUsingGETParams) WithHTTPClient(client *http.Client) *GetRepositoriesByArtifactoryNameUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get repositories by artifactory name using g e t params
func (o *GetRepositoriesByArtifactoryNameUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArtifactType adds the artifactType to the get repositories by artifactory name using g e t params
func (o *GetRepositoriesByArtifactoryNameUsingGETParams) WithArtifactType(artifactType *string) *GetRepositoriesByArtifactoryNameUsingGETParams {
	o.SetArtifactType(artifactType)
	return o
}

// SetArtifactType adds the artifactType to the get repositories by artifactory name using g e t params
func (o *GetRepositoriesByArtifactoryNameUsingGETParams) SetArtifactType(artifactType *string) {
	o.ArtifactType = artifactType
}

// WithName adds the name to the get repositories by artifactory name using g e t params
func (o *GetRepositoriesByArtifactoryNameUsingGETParams) WithName(name string) *GetRepositoriesByArtifactoryNameUsingGETParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get repositories by artifactory name using g e t params
func (o *GetRepositoriesByArtifactoryNameUsingGETParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *GetRepositoriesByArtifactoryNameUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ArtifactType != nil {

		// query param artifactType
		var qrArtifactType string

		if o.ArtifactType != nil {
			qrArtifactType = *o.ArtifactType
		}
		qArtifactType := qrArtifactType
		if qArtifactType != "" {

			if err := r.SetQueryParam("artifactType", qArtifactType); err != nil {
				return err
			}
		}
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
