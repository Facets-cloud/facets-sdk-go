// Code generated by go-swagger; DO NOT EDIT.

package ui_artifactory_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetRepositoriesUsingGETReader is a Reader for the GetRepositoriesUsingGET structure.
type GetRepositoriesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRepositoriesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRepositoriesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/artifactories/{artifactoryId}/repos] getRepositoriesUsingGET", response, response.Code())
	}
}

// NewGetRepositoriesUsingGETOK creates a GetRepositoriesUsingGETOK with default headers values
func NewGetRepositoriesUsingGETOK() *GetRepositoriesUsingGETOK {
	return &GetRepositoriesUsingGETOK{}
}

/*
GetRepositoriesUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetRepositoriesUsingGETOK struct {
	Payload []string
}

// IsSuccess returns true when this get repositories using g e t o k response has a 2xx status code
func (o *GetRepositoriesUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get repositories using g e t o k response has a 3xx status code
func (o *GetRepositoriesUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get repositories using g e t o k response has a 4xx status code
func (o *GetRepositoriesUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get repositories using g e t o k response has a 5xx status code
func (o *GetRepositoriesUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get repositories using g e t o k response a status code equal to that given
func (o *GetRepositoriesUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get repositories using g e t o k response
func (o *GetRepositoriesUsingGETOK) Code() int {
	return 200
}

func (o *GetRepositoriesUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/artifactories/{artifactoryId}/repos][%d] getRepositoriesUsingGETOK %s", 200, payload)
}

func (o *GetRepositoriesUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/artifactories/{artifactoryId}/repos][%d] getRepositoriesUsingGETOK %s", 200, payload)
}

func (o *GetRepositoriesUsingGETOK) GetPayload() []string {
	return o.Payload
}

func (o *GetRepositoriesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesUsingGETUnauthorized creates a GetRepositoriesUsingGETUnauthorized with default headers values
func NewGetRepositoriesUsingGETUnauthorized() *GetRepositoriesUsingGETUnauthorized {
	return &GetRepositoriesUsingGETUnauthorized{}
}

/*
GetRepositoriesUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRepositoriesUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get repositories using g e t unauthorized response has a 2xx status code
func (o *GetRepositoriesUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get repositories using g e t unauthorized response has a 3xx status code
func (o *GetRepositoriesUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get repositories using g e t unauthorized response has a 4xx status code
func (o *GetRepositoriesUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get repositories using g e t unauthorized response has a 5xx status code
func (o *GetRepositoriesUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get repositories using g e t unauthorized response a status code equal to that given
func (o *GetRepositoriesUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get repositories using g e t unauthorized response
func (o *GetRepositoriesUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetRepositoriesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifactories/{artifactoryId}/repos][%d] getRepositoriesUsingGETUnauthorized", 401)
}

func (o *GetRepositoriesUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifactories/{artifactoryId}/repos][%d] getRepositoriesUsingGETUnauthorized", 401)
}

func (o *GetRepositoriesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesUsingGETForbidden creates a GetRepositoriesUsingGETForbidden with default headers values
func NewGetRepositoriesUsingGETForbidden() *GetRepositoriesUsingGETForbidden {
	return &GetRepositoriesUsingGETForbidden{}
}

/*
GetRepositoriesUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRepositoriesUsingGETForbidden struct {
}

// IsSuccess returns true when this get repositories using g e t forbidden response has a 2xx status code
func (o *GetRepositoriesUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get repositories using g e t forbidden response has a 3xx status code
func (o *GetRepositoriesUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get repositories using g e t forbidden response has a 4xx status code
func (o *GetRepositoriesUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get repositories using g e t forbidden response has a 5xx status code
func (o *GetRepositoriesUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get repositories using g e t forbidden response a status code equal to that given
func (o *GetRepositoriesUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get repositories using g e t forbidden response
func (o *GetRepositoriesUsingGETForbidden) Code() int {
	return 403
}

func (o *GetRepositoriesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifactories/{artifactoryId}/repos][%d] getRepositoriesUsingGETForbidden", 403)
}

func (o *GetRepositoriesUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifactories/{artifactoryId}/repos][%d] getRepositoriesUsingGETForbidden", 403)
}

func (o *GetRepositoriesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesUsingGETNotFound creates a GetRepositoriesUsingGETNotFound with default headers values
func NewGetRepositoriesUsingGETNotFound() *GetRepositoriesUsingGETNotFound {
	return &GetRepositoriesUsingGETNotFound{}
}

/*
GetRepositoriesUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetRepositoriesUsingGETNotFound struct {
}

// IsSuccess returns true when this get repositories using g e t not found response has a 2xx status code
func (o *GetRepositoriesUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get repositories using g e t not found response has a 3xx status code
func (o *GetRepositoriesUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get repositories using g e t not found response has a 4xx status code
func (o *GetRepositoriesUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get repositories using g e t not found response has a 5xx status code
func (o *GetRepositoriesUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get repositories using g e t not found response a status code equal to that given
func (o *GetRepositoriesUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get repositories using g e t not found response
func (o *GetRepositoriesUsingGETNotFound) Code() int {
	return 404
}

func (o *GetRepositoriesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifactories/{artifactoryId}/repos][%d] getRepositoriesUsingGETNotFound", 404)
}

func (o *GetRepositoriesUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/artifactories/{artifactoryId}/repos][%d] getRepositoriesUsingGETNotFound", 404)
}

func (o *GetRepositoriesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
