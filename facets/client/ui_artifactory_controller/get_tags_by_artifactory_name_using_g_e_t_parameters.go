// Code generated by go-swagger; DO NOT EDIT.

package ui_artifactory_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetTagsByArtifactoryNameUsingGETParams creates a new GetTagsByArtifactoryNameUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTagsByArtifactoryNameUsingGETParams() *GetTagsByArtifactoryNameUsingGETParams {
	return &GetTagsByArtifactoryNameUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTagsByArtifactoryNameUsingGETParamsWithTimeout creates a new GetTagsByArtifactoryNameUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetTagsByArtifactoryNameUsingGETParamsWithTimeout(timeout time.Duration) *GetTagsByArtifactoryNameUsingGETParams {
	return &GetTagsByArtifactoryNameUsingGETParams{
		timeout: timeout,
	}
}

// NewGetTagsByArtifactoryNameUsingGETParamsWithContext creates a new GetTagsByArtifactoryNameUsingGETParams object
// with the ability to set a context for a request.
func NewGetTagsByArtifactoryNameUsingGETParamsWithContext(ctx context.Context) *GetTagsByArtifactoryNameUsingGETParams {
	return &GetTagsByArtifactoryNameUsingGETParams{
		Context: ctx,
	}
}

// NewGetTagsByArtifactoryNameUsingGETParamsWithHTTPClient creates a new GetTagsByArtifactoryNameUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTagsByArtifactoryNameUsingGETParamsWithHTTPClient(client *http.Client) *GetTagsByArtifactoryNameUsingGETParams {
	return &GetTagsByArtifactoryNameUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetTagsByArtifactoryNameUsingGETParams contains all the parameters to send to the API endpoint

	for the get tags by artifactory name using g e t operation.

	Typically these are written to a http.Request.
*/
type GetTagsByArtifactoryNameUsingGETParams struct {

	/* ArtifactType.

	   artifactType

	   Default: "docker_image"
	*/
	ArtifactType *string

	/* Name.

	   name
	*/
	Name string

	/* Repo.

	   repo
	*/
	Repo string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get tags by artifactory name using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTagsByArtifactoryNameUsingGETParams) WithDefaults() *GetTagsByArtifactoryNameUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get tags by artifactory name using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTagsByArtifactoryNameUsingGETParams) SetDefaults() {
	var (
		artifactTypeDefault = string("docker_image")
	)

	val := GetTagsByArtifactoryNameUsingGETParams{
		ArtifactType: &artifactTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get tags by artifactory name using g e t params
func (o *GetTagsByArtifactoryNameUsingGETParams) WithTimeout(timeout time.Duration) *GetTagsByArtifactoryNameUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get tags by artifactory name using g e t params
func (o *GetTagsByArtifactoryNameUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get tags by artifactory name using g e t params
func (o *GetTagsByArtifactoryNameUsingGETParams) WithContext(ctx context.Context) *GetTagsByArtifactoryNameUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get tags by artifactory name using g e t params
func (o *GetTagsByArtifactoryNameUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get tags by artifactory name using g e t params
func (o *GetTagsByArtifactoryNameUsingGETParams) WithHTTPClient(client *http.Client) *GetTagsByArtifactoryNameUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get tags by artifactory name using g e t params
func (o *GetTagsByArtifactoryNameUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArtifactType adds the artifactType to the get tags by artifactory name using g e t params
func (o *GetTagsByArtifactoryNameUsingGETParams) WithArtifactType(artifactType *string) *GetTagsByArtifactoryNameUsingGETParams {
	o.SetArtifactType(artifactType)
	return o
}

// SetArtifactType adds the artifactType to the get tags by artifactory name using g e t params
func (o *GetTagsByArtifactoryNameUsingGETParams) SetArtifactType(artifactType *string) {
	o.ArtifactType = artifactType
}

// WithName adds the name to the get tags by artifactory name using g e t params
func (o *GetTagsByArtifactoryNameUsingGETParams) WithName(name string) *GetTagsByArtifactoryNameUsingGETParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get tags by artifactory name using g e t params
func (o *GetTagsByArtifactoryNameUsingGETParams) SetName(name string) {
	o.Name = name
}

// WithRepo adds the repo to the get tags by artifactory name using g e t params
func (o *GetTagsByArtifactoryNameUsingGETParams) WithRepo(repo string) *GetTagsByArtifactoryNameUsingGETParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the get tags by artifactory name using g e t params
func (o *GetTagsByArtifactoryNameUsingGETParams) SetRepo(repo string) {
	o.Repo = repo
}

// WriteToRequest writes these params to a swagger request
func (o *GetTagsByArtifactoryNameUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ArtifactType != nil {

		// query param artifactType
		var qrArtifactType string

		if o.ArtifactType != nil {
			qrArtifactType = *o.ArtifactType
		}
		qArtifactType := qrArtifactType
		if qArtifactType != "" {

			if err := r.SetQueryParam("artifactType", qArtifactType); err != nil {
				return err
			}
		}
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// query param repo
	qrRepo := o.Repo
	qRepo := qrRepo
	if qRepo != "" {

		if err := r.SetQueryParam("repo", qRepo); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
