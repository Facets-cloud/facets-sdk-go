// Code generated by go-swagger; DO NOT EDIT.

package ui_artifactory_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui artifactory controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui artifactory controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui artifactory controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui artifactory controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AssociateStacks(params *AssociateStacksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssociateStacksOK, error)

	CreateArtifactoryMirror(params *CreateArtifactoryMirrorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateArtifactoryMirrorOK, error)

	CreateBasicDockerArtifactory(params *CreateBasicDockerArtifactoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBasicDockerArtifactoryOK, error)

	CreateECRArtifactory(params *CreateECRArtifactoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateECRArtifactoryOK, error)

	DeleteArtifactory(params *DeleteArtifactoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteArtifactoryOK, error)

	DeleteECRArtifactory(params *DeleteECRArtifactoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteECRArtifactoryOK, error)

	GetAllArtifactories(params *GetAllArtifactoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllArtifactoriesOK, error)

	GetAllArtifactoriesForStack(params *GetAllArtifactoriesForStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllArtifactoriesForStackOK, error)

	GetArtifactoryByID(params *GetArtifactoryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactoryByIDOK, error)

	GetArtifactoryByName(params *GetArtifactoryByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactoryByNameOK, error)

	GetRepositories(params *GetRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRepositoriesOK, error)

	GetRepositoriesByArtifactoryName(params *GetRepositoriesByArtifactoryNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRepositoriesByArtifactoryNameOK, error)

	GetTags(params *GetTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagsOK, error)

	GetTagsByArtifactoryName(params *GetTagsByArtifactoryNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagsByArtifactoryNameOK, error)

	RequestArtifactoryLinking(params *RequestArtifactoryLinkingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestArtifactoryLinkingOK, error)

	UpdateBasicDockerArtifactory(params *UpdateBasicDockerArtifactoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBasicDockerArtifactoryOK, error)

	UpdateECRArtifactory(params *UpdateECRArtifactoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateECRArtifactoryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AssociateStacks associate stacks API
*/
func (a *Client) AssociateStacks(params *AssociateStacksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssociateStacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociateStacksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "associateStacks",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifactories/{artifactoryId}/associate-projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssociateStacksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociateStacksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for associateStacks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateArtifactoryMirror create artifactory mirror API
*/
func (a *Client) CreateArtifactoryMirror(params *CreateArtifactoryMirrorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateArtifactoryMirrorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateArtifactoryMirrorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createArtifactoryMirror",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifactories/mirrors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateArtifactoryMirrorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateArtifactoryMirrorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createArtifactoryMirror: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBasicDockerArtifactory create basic docker artifactory API
*/
func (a *Client) CreateBasicDockerArtifactory(params *CreateBasicDockerArtifactoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBasicDockerArtifactoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBasicDockerArtifactoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBasicDockerArtifactory",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifactories/others",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBasicDockerArtifactoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBasicDockerArtifactoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBasicDockerArtifactory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateECRArtifactory create e c r artifactory API
*/
func (a *Client) CreateECRArtifactory(params *CreateECRArtifactoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateECRArtifactoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateECRArtifactoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createECRArtifactory",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifactories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateECRArtifactoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateECRArtifactoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createECRArtifactory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteArtifactory delete artifactory API
*/
func (a *Client) DeleteArtifactory(params *DeleteArtifactoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteArtifactoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteArtifactoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteArtifactory",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/artifactories/v2/{artifactoryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteArtifactoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteArtifactoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteArtifactory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteECRArtifactory delete e c r artifactory API
*/
func (a *Client) DeleteECRArtifactory(params *DeleteECRArtifactoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteECRArtifactoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteECRArtifactoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteECRArtifactory",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/artifactories/{artifactoryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteECRArtifactoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteECRArtifactoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteECRArtifactory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllArtifactories get all artifactories API
*/
func (a *Client) GetAllArtifactories(params *GetAllArtifactoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllArtifactoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllArtifactoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllArtifactories",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifactories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllArtifactoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllArtifactoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllArtifactories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllArtifactoriesForStack get all artifactories for stack API
*/
func (a *Client) GetAllArtifactoriesForStack(params *GetAllArtifactoriesForStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllArtifactoriesForStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllArtifactoriesForStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllArtifactoriesForStack",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifactories/stack/{stackName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllArtifactoriesForStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllArtifactoriesForStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllArtifactoriesForStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactoryByID get artifactory by Id API
*/
func (a *Client) GetArtifactoryByID(params *GetArtifactoryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactoryByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactoryByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactoryById",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifactories/{artifactoryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactoryByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactoryByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactoryById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactoryByName get artifactory by name API
*/
func (a *Client) GetArtifactoryByName(params *GetArtifactoryByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactoryByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactoryByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactoryByName",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifactories/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactoryByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactoryByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactoryByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositories get repositories API
*/
func (a *Client) GetRepositories(params *GetRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepositories",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifactories/{artifactoryId}/repos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesByArtifactoryName get repositories by artifactory name API
*/
func (a *Client) GetRepositoriesByArtifactoryName(params *GetRepositoriesByArtifactoryNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRepositoriesByArtifactoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesByArtifactoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepositoriesByArtifactoryName",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifactories/name/{name}/repos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesByArtifactoryNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesByArtifactoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositoriesByArtifactoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTags get tags API
*/
func (a *Client) GetTags(params *GetTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTags",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifactories/{artifactoryId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTagsByArtifactoryName get tags by artifactory name API
*/
func (a *Client) GetTagsByArtifactoryName(params *GetTagsByArtifactoryNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagsByArtifactoryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagsByArtifactoryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTagsByArtifactoryName",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifactories/name/{name}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTagsByArtifactoryNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagsByArtifactoryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTagsByArtifactoryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RequestArtifactoryLinking request artifactory linking API
*/
func (a *Client) RequestArtifactoryLinking(params *RequestArtifactoryLinkingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestArtifactoryLinkingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestArtifactoryLinkingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "requestArtifactoryLinking",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifactories/link-container-registry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RequestArtifactoryLinkingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestArtifactoryLinkingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for requestArtifactoryLinking: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBasicDockerArtifactory update basic docker artifactory API
*/
func (a *Client) UpdateBasicDockerArtifactory(params *UpdateBasicDockerArtifactoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBasicDockerArtifactoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBasicDockerArtifactoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBasicDockerArtifactory",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifactories/others/{artifactoryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBasicDockerArtifactoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBasicDockerArtifactoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBasicDockerArtifactory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateECRArtifactory update e c r artifactory API
*/
func (a *Client) UpdateECRArtifactory(params *UpdateECRArtifactoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateECRArtifactoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateECRArtifactoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateECRArtifactory",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifactories/{artifactoryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateECRArtifactoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateECRArtifactoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateECRArtifactory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
