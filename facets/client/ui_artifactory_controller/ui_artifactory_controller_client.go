// Code generated by go-swagger; DO NOT EDIT.

package ui_artifactory_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui artifactory controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui artifactory controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui artifactory controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui artifactory controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AssociateStacksUsingPOST(params *AssociateStacksUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssociateStacksUsingPOSTOK, *AssociateStacksUsingPOSTCreated, error)

	CreateArtifactoryMirrorUsingPOST(params *CreateArtifactoryMirrorUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateArtifactoryMirrorUsingPOSTOK, *CreateArtifactoryMirrorUsingPOSTCreated, error)

	CreateBasicDockerArtifactoryUsingPOST(params *CreateBasicDockerArtifactoryUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBasicDockerArtifactoryUsingPOSTOK, *CreateBasicDockerArtifactoryUsingPOSTCreated, error)

	CreateECRArtifactoryUsingPOST1(params *CreateECRArtifactoryUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateECRArtifactoryUsingPOST1OK, *CreateECRArtifactoryUsingPOST1Created, error)

	DeleteArtifactoryUsingDELETE(params *DeleteArtifactoryUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteArtifactoryUsingDELETEOK, *DeleteArtifactoryUsingDELETENoContent, error)

	DeleteECRArtifactoryUsingDELETE(params *DeleteECRArtifactoryUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteECRArtifactoryUsingDELETEOK, *DeleteECRArtifactoryUsingDELETENoContent, error)

	GetAllArtifactoriesForStackUsingGET(params *GetAllArtifactoriesForStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllArtifactoriesForStackUsingGETOK, error)

	GetAllArtifactoriesUsingGET1(params *GetAllArtifactoriesUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllArtifactoriesUsingGET1OK, error)

	GetArtifactoryByIDUsingGET(params *GetArtifactoryByIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactoryByIDUsingGETOK, error)

	GetArtifactoryByNameUsingGET(params *GetArtifactoryByNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactoryByNameUsingGETOK, error)

	GetRepositoriesByArtifactoryNameUsingGET(params *GetRepositoriesByArtifactoryNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRepositoriesByArtifactoryNameUsingGETOK, error)

	GetRepositoriesUsingGET(params *GetRepositoriesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRepositoriesUsingGETOK, error)

	GetTagsByArtifactoryNameUsingGET(params *GetTagsByArtifactoryNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagsByArtifactoryNameUsingGETOK, error)

	GetTagsUsingGET(params *GetTagsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagsUsingGETOK, error)

	RequestArtifactoryLinkingUsingPOST(params *RequestArtifactoryLinkingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestArtifactoryLinkingUsingPOSTOK, *RequestArtifactoryLinkingUsingPOSTCreated, error)

	UpdateBasicDockerArtifactoryUsingPOST(params *UpdateBasicDockerArtifactoryUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBasicDockerArtifactoryUsingPOSTOK, *UpdateBasicDockerArtifactoryUsingPOSTCreated, error)

	UpdateECRArtifactoryUsingPOST(params *UpdateECRArtifactoryUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateECRArtifactoryUsingPOSTOK, *UpdateECRArtifactoryUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AssociateStacksUsingPOST associates stacks
*/
func (a *Client) AssociateStacksUsingPOST(params *AssociateStacksUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssociateStacksUsingPOSTOK, *AssociateStacksUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociateStacksUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "associateStacksUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifactories/{artifactoryId}/associate-projects",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssociateStacksUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AssociateStacksUsingPOSTOK:
		return value, nil, nil
	case *AssociateStacksUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifactory_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateArtifactoryMirrorUsingPOST creates artifactory mirror
*/
func (a *Client) CreateArtifactoryMirrorUsingPOST(params *CreateArtifactoryMirrorUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateArtifactoryMirrorUsingPOSTOK, *CreateArtifactoryMirrorUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateArtifactoryMirrorUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createArtifactoryMirrorUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifactories/mirrors",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateArtifactoryMirrorUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateArtifactoryMirrorUsingPOSTOK:
		return value, nil, nil
	case *CreateArtifactoryMirrorUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifactory_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBasicDockerArtifactoryUsingPOST creates basic docker artifactory
*/
func (a *Client) CreateBasicDockerArtifactoryUsingPOST(params *CreateBasicDockerArtifactoryUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBasicDockerArtifactoryUsingPOSTOK, *CreateBasicDockerArtifactoryUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBasicDockerArtifactoryUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBasicDockerArtifactoryUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifactories/others",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBasicDockerArtifactoryUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateBasicDockerArtifactoryUsingPOSTOK:
		return value, nil, nil
	case *CreateBasicDockerArtifactoryUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifactory_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateECRArtifactoryUsingPOST1 creates e c r artifactory
*/
func (a *Client) CreateECRArtifactoryUsingPOST1(params *CreateECRArtifactoryUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateECRArtifactoryUsingPOST1OK, *CreateECRArtifactoryUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateECRArtifactoryUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createECRArtifactoryUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifactories",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateECRArtifactoryUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateECRArtifactoryUsingPOST1OK:
		return value, nil, nil
	case *CreateECRArtifactoryUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifactory_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteArtifactoryUsingDELETE deletes artifactory
*/
func (a *Client) DeleteArtifactoryUsingDELETE(params *DeleteArtifactoryUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteArtifactoryUsingDELETEOK, *DeleteArtifactoryUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteArtifactoryUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteArtifactoryUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/artifactories/v2/{artifactoryId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteArtifactoryUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteArtifactoryUsingDELETEOK:
		return value, nil, nil
	case *DeleteArtifactoryUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifactory_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteECRArtifactoryUsingDELETE deletes e c r artifactory
*/
func (a *Client) DeleteECRArtifactoryUsingDELETE(params *DeleteECRArtifactoryUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteECRArtifactoryUsingDELETEOK, *DeleteECRArtifactoryUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteECRArtifactoryUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteECRArtifactoryUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/artifactories/{artifactoryId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteECRArtifactoryUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteECRArtifactoryUsingDELETEOK:
		return value, nil, nil
	case *DeleteECRArtifactoryUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifactory_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllArtifactoriesForStackUsingGET gets all artifactories for stack
*/
func (a *Client) GetAllArtifactoriesForStackUsingGET(params *GetAllArtifactoriesForStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllArtifactoriesForStackUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllArtifactoriesForStackUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllArtifactoriesForStackUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifactories/stack/{stackName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllArtifactoriesForStackUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllArtifactoriesForStackUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllArtifactoriesForStackUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllArtifactoriesUsingGET1 gets all artifactories
*/
func (a *Client) GetAllArtifactoriesUsingGET1(params *GetAllArtifactoriesUsingGET1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllArtifactoriesUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllArtifactoriesUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllArtifactoriesUsingGET_1",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifactories",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllArtifactoriesUsingGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllArtifactoriesUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllArtifactoriesUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactoryByIDUsingGET gets artifactory by Id
*/
func (a *Client) GetArtifactoryByIDUsingGET(params *GetArtifactoryByIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactoryByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactoryByIDUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactoryByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifactories/{artifactoryId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactoryByIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactoryByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactoryByIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactoryByNameUsingGET gets artifactory by name
*/
func (a *Client) GetArtifactoryByNameUsingGET(params *GetArtifactoryByNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactoryByNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactoryByNameUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactoryByNameUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifactories/name/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactoryByNameUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactoryByNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactoryByNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesByArtifactoryNameUsingGET gets repositories by artifactory name
*/
func (a *Client) GetRepositoriesByArtifactoryNameUsingGET(params *GetRepositoriesByArtifactoryNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRepositoriesByArtifactoryNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesByArtifactoryNameUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepositoriesByArtifactoryNameUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifactories/name/{name}/repos",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesByArtifactoryNameUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesByArtifactoryNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositoriesByArtifactoryNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepositoriesUsingGET gets repositories
*/
func (a *Client) GetRepositoriesUsingGET(params *GetRepositoriesUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRepositoriesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepositoriesUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifactories/{artifactoryId}/repos",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoriesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositoriesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTagsByArtifactoryNameUsingGET gets tags by artifactory name
*/
func (a *Client) GetTagsByArtifactoryNameUsingGET(params *GetTagsByArtifactoryNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagsByArtifactoryNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagsByArtifactoryNameUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTagsByArtifactoryNameUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifactories/name/{name}/tags",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTagsByArtifactoryNameUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagsByArtifactoryNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTagsByArtifactoryNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTagsUsingGET gets tags
*/
func (a *Client) GetTagsUsingGET(params *GetTagsUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTagsUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifactories/{artifactoryId}/tags",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTagsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTagsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RequestArtifactoryLinkingUsingPOST requests artifactory linking
*/
func (a *Client) RequestArtifactoryLinkingUsingPOST(params *RequestArtifactoryLinkingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestArtifactoryLinkingUsingPOSTOK, *RequestArtifactoryLinkingUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestArtifactoryLinkingUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "requestArtifactoryLinkingUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifactories/link-container-registry",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RequestArtifactoryLinkingUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RequestArtifactoryLinkingUsingPOSTOK:
		return value, nil, nil
	case *RequestArtifactoryLinkingUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifactory_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBasicDockerArtifactoryUsingPOST updates basic docker artifactory
*/
func (a *Client) UpdateBasicDockerArtifactoryUsingPOST(params *UpdateBasicDockerArtifactoryUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBasicDockerArtifactoryUsingPOSTOK, *UpdateBasicDockerArtifactoryUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBasicDockerArtifactoryUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBasicDockerArtifactoryUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifactories/others/{artifactoryId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBasicDockerArtifactoryUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateBasicDockerArtifactoryUsingPOSTOK:
		return value, nil, nil
	case *UpdateBasicDockerArtifactoryUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifactory_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateECRArtifactoryUsingPOST updates e c r artifactory
*/
func (a *Client) UpdateECRArtifactoryUsingPOST(params *UpdateECRArtifactoryUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateECRArtifactoryUsingPOSTOK, *UpdateECRArtifactoryUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateECRArtifactoryUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateECRArtifactoryUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifactories/{artifactoryId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateECRArtifactoryUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateECRArtifactoryUsingPOSTOK:
		return value, nil, nil
	case *UpdateECRArtifactoryUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifactory_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
