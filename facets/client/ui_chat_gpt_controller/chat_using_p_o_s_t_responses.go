// Code generated by go-swagger; DO NOT EDIT.

package ui_chat_gpt_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ChatUsingPOSTReader is a Reader for the ChatUsingPOST structure.
type ChatUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChatUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChatUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewChatUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewChatUsingPOSTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewChatUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewChatUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewChatUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/chat/{chatId}] chatUsingPOST", response, response.Code())
	}
}

// NewChatUsingPOSTOK creates a ChatUsingPOSTOK with default headers values
func NewChatUsingPOSTOK() *ChatUsingPOSTOK {
	return &ChatUsingPOSTOK{}
}

/*
ChatUsingPOSTOK describes a response with status code 200, with default header values.

Message sent successfully
*/
type ChatUsingPOSTOK struct {
	Payload *models.ChatMessage
}

// IsSuccess returns true when this chat using p o s t o k response has a 2xx status code
func (o *ChatUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this chat using p o s t o k response has a 3xx status code
func (o *ChatUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chat using p o s t o k response has a 4xx status code
func (o *ChatUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this chat using p o s t o k response has a 5xx status code
func (o *ChatUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this chat using p o s t o k response a status code equal to that given
func (o *ChatUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the chat using p o s t o k response
func (o *ChatUsingPOSTOK) Code() int {
	return 200
}

func (o *ChatUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatUsingPOSTOK %s", 200, payload)
}

func (o *ChatUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatUsingPOSTOK %s", 200, payload)
}

func (o *ChatUsingPOSTOK) GetPayload() *models.ChatMessage {
	return o.Payload
}

func (o *ChatUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChatMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChatUsingPOSTCreated creates a ChatUsingPOSTCreated with default headers values
func NewChatUsingPOSTCreated() *ChatUsingPOSTCreated {
	return &ChatUsingPOSTCreated{}
}

/*
ChatUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type ChatUsingPOSTCreated struct {
}

// IsSuccess returns true when this chat using p o s t created response has a 2xx status code
func (o *ChatUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this chat using p o s t created response has a 3xx status code
func (o *ChatUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chat using p o s t created response has a 4xx status code
func (o *ChatUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this chat using p o s t created response has a 5xx status code
func (o *ChatUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this chat using p o s t created response a status code equal to that given
func (o *ChatUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the chat using p o s t created response
func (o *ChatUsingPOSTCreated) Code() int {
	return 201
}

func (o *ChatUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatUsingPOSTCreated", 201)
}

func (o *ChatUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatUsingPOSTCreated", 201)
}

func (o *ChatUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChatUsingPOSTBadRequest creates a ChatUsingPOSTBadRequest with default headers values
func NewChatUsingPOSTBadRequest() *ChatUsingPOSTBadRequest {
	return &ChatUsingPOSTBadRequest{}
}

/*
ChatUsingPOSTBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type ChatUsingPOSTBadRequest struct {
}

// IsSuccess returns true when this chat using p o s t bad request response has a 2xx status code
func (o *ChatUsingPOSTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chat using p o s t bad request response has a 3xx status code
func (o *ChatUsingPOSTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chat using p o s t bad request response has a 4xx status code
func (o *ChatUsingPOSTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this chat using p o s t bad request response has a 5xx status code
func (o *ChatUsingPOSTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this chat using p o s t bad request response a status code equal to that given
func (o *ChatUsingPOSTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the chat using p o s t bad request response
func (o *ChatUsingPOSTBadRequest) Code() int {
	return 400
}

func (o *ChatUsingPOSTBadRequest) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatUsingPOSTBadRequest", 400)
}

func (o *ChatUsingPOSTBadRequest) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatUsingPOSTBadRequest", 400)
}

func (o *ChatUsingPOSTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChatUsingPOSTUnauthorized creates a ChatUsingPOSTUnauthorized with default headers values
func NewChatUsingPOSTUnauthorized() *ChatUsingPOSTUnauthorized {
	return &ChatUsingPOSTUnauthorized{}
}

/*
ChatUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ChatUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this chat using p o s t unauthorized response has a 2xx status code
func (o *ChatUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chat using p o s t unauthorized response has a 3xx status code
func (o *ChatUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chat using p o s t unauthorized response has a 4xx status code
func (o *ChatUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this chat using p o s t unauthorized response has a 5xx status code
func (o *ChatUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this chat using p o s t unauthorized response a status code equal to that given
func (o *ChatUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the chat using p o s t unauthorized response
func (o *ChatUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *ChatUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatUsingPOSTUnauthorized", 401)
}

func (o *ChatUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatUsingPOSTUnauthorized", 401)
}

func (o *ChatUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChatUsingPOSTForbidden creates a ChatUsingPOSTForbidden with default headers values
func NewChatUsingPOSTForbidden() *ChatUsingPOSTForbidden {
	return &ChatUsingPOSTForbidden{}
}

/*
ChatUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ChatUsingPOSTForbidden struct {
}

// IsSuccess returns true when this chat using p o s t forbidden response has a 2xx status code
func (o *ChatUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chat using p o s t forbidden response has a 3xx status code
func (o *ChatUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chat using p o s t forbidden response has a 4xx status code
func (o *ChatUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this chat using p o s t forbidden response has a 5xx status code
func (o *ChatUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this chat using p o s t forbidden response a status code equal to that given
func (o *ChatUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the chat using p o s t forbidden response
func (o *ChatUsingPOSTForbidden) Code() int {
	return 403
}

func (o *ChatUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatUsingPOSTForbidden", 403)
}

func (o *ChatUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatUsingPOSTForbidden", 403)
}

func (o *ChatUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChatUsingPOSTNotFound creates a ChatUsingPOSTNotFound with default headers values
func NewChatUsingPOSTNotFound() *ChatUsingPOSTNotFound {
	return &ChatUsingPOSTNotFound{}
}

/*
ChatUsingPOSTNotFound describes a response with status code 404, with default header values.

Chat not found
*/
type ChatUsingPOSTNotFound struct {
}

// IsSuccess returns true when this chat using p o s t not found response has a 2xx status code
func (o *ChatUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chat using p o s t not found response has a 3xx status code
func (o *ChatUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chat using p o s t not found response has a 4xx status code
func (o *ChatUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this chat using p o s t not found response has a 5xx status code
func (o *ChatUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this chat using p o s t not found response a status code equal to that given
func (o *ChatUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the chat using p o s t not found response
func (o *ChatUsingPOSTNotFound) Code() int {
	return 404
}

func (o *ChatUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatUsingPOSTNotFound", 404)
}

func (o *ChatUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatUsingPOSTNotFound", 404)
}

func (o *ChatUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
