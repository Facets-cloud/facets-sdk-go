// Code generated by go-swagger; DO NOT EDIT.

package ui_chat_gpt_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllStartersUsingGETReader is a Reader for the GetAllStartersUsingGET structure.
type GetAllStartersUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllStartersUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllStartersUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllStartersUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllStartersUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllStartersUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/chat/metadata] getAllStartersUsingGET", response, response.Code())
	}
}

// NewGetAllStartersUsingGETOK creates a GetAllStartersUsingGETOK with default headers values
func NewGetAllStartersUsingGETOK() *GetAllStartersUsingGETOK {
	return &GetAllStartersUsingGETOK{}
}

/*
GetAllStartersUsingGETOK describes a response with status code 200, with default header values.

Chat metadata found
*/
type GetAllStartersUsingGETOK struct {
	Payload []*models.ChatStarterMetadata
}

// IsSuccess returns true when this get all starters using g e t o k response has a 2xx status code
func (o *GetAllStartersUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all starters using g e t o k response has a 3xx status code
func (o *GetAllStartersUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all starters using g e t o k response has a 4xx status code
func (o *GetAllStartersUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all starters using g e t o k response has a 5xx status code
func (o *GetAllStartersUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all starters using g e t o k response a status code equal to that given
func (o *GetAllStartersUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all starters using g e t o k response
func (o *GetAllStartersUsingGETOK) Code() int {
	return 200
}

func (o *GetAllStartersUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/metadata][%d] getAllStartersUsingGETOK %s", 200, payload)
}

func (o *GetAllStartersUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/metadata][%d] getAllStartersUsingGETOK %s", 200, payload)
}

func (o *GetAllStartersUsingGETOK) GetPayload() []*models.ChatStarterMetadata {
	return o.Payload
}

func (o *GetAllStartersUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllStartersUsingGETUnauthorized creates a GetAllStartersUsingGETUnauthorized with default headers values
func NewGetAllStartersUsingGETUnauthorized() *GetAllStartersUsingGETUnauthorized {
	return &GetAllStartersUsingGETUnauthorized{}
}

/*
GetAllStartersUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllStartersUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all starters using g e t unauthorized response has a 2xx status code
func (o *GetAllStartersUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all starters using g e t unauthorized response has a 3xx status code
func (o *GetAllStartersUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all starters using g e t unauthorized response has a 4xx status code
func (o *GetAllStartersUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all starters using g e t unauthorized response has a 5xx status code
func (o *GetAllStartersUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all starters using g e t unauthorized response a status code equal to that given
func (o *GetAllStartersUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all starters using g e t unauthorized response
func (o *GetAllStartersUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllStartersUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/metadata][%d] getAllStartersUsingGETUnauthorized", 401)
}

func (o *GetAllStartersUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/metadata][%d] getAllStartersUsingGETUnauthorized", 401)
}

func (o *GetAllStartersUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllStartersUsingGETForbidden creates a GetAllStartersUsingGETForbidden with default headers values
func NewGetAllStartersUsingGETForbidden() *GetAllStartersUsingGETForbidden {
	return &GetAllStartersUsingGETForbidden{}
}

/*
GetAllStartersUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllStartersUsingGETForbidden struct {
}

// IsSuccess returns true when this get all starters using g e t forbidden response has a 2xx status code
func (o *GetAllStartersUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all starters using g e t forbidden response has a 3xx status code
func (o *GetAllStartersUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all starters using g e t forbidden response has a 4xx status code
func (o *GetAllStartersUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all starters using g e t forbidden response has a 5xx status code
func (o *GetAllStartersUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all starters using g e t forbidden response a status code equal to that given
func (o *GetAllStartersUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all starters using g e t forbidden response
func (o *GetAllStartersUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllStartersUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/metadata][%d] getAllStartersUsingGETForbidden", 403)
}

func (o *GetAllStartersUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/metadata][%d] getAllStartersUsingGETForbidden", 403)
}

func (o *GetAllStartersUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllStartersUsingGETNotFound creates a GetAllStartersUsingGETNotFound with default headers values
func NewGetAllStartersUsingGETNotFound() *GetAllStartersUsingGETNotFound {
	return &GetAllStartersUsingGETNotFound{}
}

/*
GetAllStartersUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllStartersUsingGETNotFound struct {
}

// IsSuccess returns true when this get all starters using g e t not found response has a 2xx status code
func (o *GetAllStartersUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all starters using g e t not found response has a 3xx status code
func (o *GetAllStartersUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all starters using g e t not found response has a 4xx status code
func (o *GetAllStartersUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all starters using g e t not found response has a 5xx status code
func (o *GetAllStartersUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all starters using g e t not found response a status code equal to that given
func (o *GetAllStartersUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all starters using g e t not found response
func (o *GetAllStartersUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllStartersUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/metadata][%d] getAllStartersUsingGETNotFound", 404)
}

func (o *GetAllStartersUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/metadata][%d] getAllStartersUsingGETNotFound", 404)
}

func (o *GetAllStartersUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
