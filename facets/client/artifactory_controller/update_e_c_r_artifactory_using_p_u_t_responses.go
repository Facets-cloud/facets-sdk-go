// Code generated by go-swagger; DO NOT EDIT.

package artifactory_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateECRArtifactoryUsingPUTReader is a Reader for the UpdateECRArtifactoryUsingPUT structure.
type UpdateECRArtifactoryUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateECRArtifactoryUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateECRArtifactoryUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateECRArtifactoryUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateECRArtifactoryUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateECRArtifactoryUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateECRArtifactoryUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc/v1/artifactories/{artifactoryId}] updateECRArtifactoryUsingPUT", response, response.Code())
	}
}

// NewUpdateECRArtifactoryUsingPUTOK creates a UpdateECRArtifactoryUsingPUTOK with default headers values
func NewUpdateECRArtifactoryUsingPUTOK() *UpdateECRArtifactoryUsingPUTOK {
	return &UpdateECRArtifactoryUsingPUTOK{}
}

/*
UpdateECRArtifactoryUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateECRArtifactoryUsingPUTOK struct {
	Payload *models.ECRArtifactory
}

// IsSuccess returns true when this update e c r artifactory using p u t o k response has a 2xx status code
func (o *UpdateECRArtifactoryUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update e c r artifactory using p u t o k response has a 3xx status code
func (o *UpdateECRArtifactoryUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update e c r artifactory using p u t o k response has a 4xx status code
func (o *UpdateECRArtifactoryUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update e c r artifactory using p u t o k response has a 5xx status code
func (o *UpdateECRArtifactoryUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update e c r artifactory using p u t o k response a status code equal to that given
func (o *UpdateECRArtifactoryUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update e c r artifactory using p u t o k response
func (o *UpdateECRArtifactoryUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateECRArtifactoryUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc/v1/artifactories/{artifactoryId}][%d] updateECRArtifactoryUsingPUTOK %s", 200, payload)
}

func (o *UpdateECRArtifactoryUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc/v1/artifactories/{artifactoryId}][%d] updateECRArtifactoryUsingPUTOK %s", 200, payload)
}

func (o *UpdateECRArtifactoryUsingPUTOK) GetPayload() *models.ECRArtifactory {
	return o.Payload
}

func (o *UpdateECRArtifactoryUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ECRArtifactory)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateECRArtifactoryUsingPUTCreated creates a UpdateECRArtifactoryUsingPUTCreated with default headers values
func NewUpdateECRArtifactoryUsingPUTCreated() *UpdateECRArtifactoryUsingPUTCreated {
	return &UpdateECRArtifactoryUsingPUTCreated{}
}

/*
UpdateECRArtifactoryUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateECRArtifactoryUsingPUTCreated struct {
}

// IsSuccess returns true when this update e c r artifactory using p u t created response has a 2xx status code
func (o *UpdateECRArtifactoryUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update e c r artifactory using p u t created response has a 3xx status code
func (o *UpdateECRArtifactoryUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update e c r artifactory using p u t created response has a 4xx status code
func (o *UpdateECRArtifactoryUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update e c r artifactory using p u t created response has a 5xx status code
func (o *UpdateECRArtifactoryUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update e c r artifactory using p u t created response a status code equal to that given
func (o *UpdateECRArtifactoryUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update e c r artifactory using p u t created response
func (o *UpdateECRArtifactoryUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateECRArtifactoryUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc/v1/artifactories/{artifactoryId}][%d] updateECRArtifactoryUsingPUTCreated", 201)
}

func (o *UpdateECRArtifactoryUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc/v1/artifactories/{artifactoryId}][%d] updateECRArtifactoryUsingPUTCreated", 201)
}

func (o *UpdateECRArtifactoryUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateECRArtifactoryUsingPUTUnauthorized creates a UpdateECRArtifactoryUsingPUTUnauthorized with default headers values
func NewUpdateECRArtifactoryUsingPUTUnauthorized() *UpdateECRArtifactoryUsingPUTUnauthorized {
	return &UpdateECRArtifactoryUsingPUTUnauthorized{}
}

/*
UpdateECRArtifactoryUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateECRArtifactoryUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update e c r artifactory using p u t unauthorized response has a 2xx status code
func (o *UpdateECRArtifactoryUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update e c r artifactory using p u t unauthorized response has a 3xx status code
func (o *UpdateECRArtifactoryUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update e c r artifactory using p u t unauthorized response has a 4xx status code
func (o *UpdateECRArtifactoryUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update e c r artifactory using p u t unauthorized response has a 5xx status code
func (o *UpdateECRArtifactoryUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update e c r artifactory using p u t unauthorized response a status code equal to that given
func (o *UpdateECRArtifactoryUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update e c r artifactory using p u t unauthorized response
func (o *UpdateECRArtifactoryUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateECRArtifactoryUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc/v1/artifactories/{artifactoryId}][%d] updateECRArtifactoryUsingPUTUnauthorized", 401)
}

func (o *UpdateECRArtifactoryUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc/v1/artifactories/{artifactoryId}][%d] updateECRArtifactoryUsingPUTUnauthorized", 401)
}

func (o *UpdateECRArtifactoryUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateECRArtifactoryUsingPUTForbidden creates a UpdateECRArtifactoryUsingPUTForbidden with default headers values
func NewUpdateECRArtifactoryUsingPUTForbidden() *UpdateECRArtifactoryUsingPUTForbidden {
	return &UpdateECRArtifactoryUsingPUTForbidden{}
}

/*
UpdateECRArtifactoryUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateECRArtifactoryUsingPUTForbidden struct {
}

// IsSuccess returns true when this update e c r artifactory using p u t forbidden response has a 2xx status code
func (o *UpdateECRArtifactoryUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update e c r artifactory using p u t forbidden response has a 3xx status code
func (o *UpdateECRArtifactoryUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update e c r artifactory using p u t forbidden response has a 4xx status code
func (o *UpdateECRArtifactoryUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update e c r artifactory using p u t forbidden response has a 5xx status code
func (o *UpdateECRArtifactoryUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update e c r artifactory using p u t forbidden response a status code equal to that given
func (o *UpdateECRArtifactoryUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update e c r artifactory using p u t forbidden response
func (o *UpdateECRArtifactoryUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateECRArtifactoryUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc/v1/artifactories/{artifactoryId}][%d] updateECRArtifactoryUsingPUTForbidden", 403)
}

func (o *UpdateECRArtifactoryUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc/v1/artifactories/{artifactoryId}][%d] updateECRArtifactoryUsingPUTForbidden", 403)
}

func (o *UpdateECRArtifactoryUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateECRArtifactoryUsingPUTNotFound creates a UpdateECRArtifactoryUsingPUTNotFound with default headers values
func NewUpdateECRArtifactoryUsingPUTNotFound() *UpdateECRArtifactoryUsingPUTNotFound {
	return &UpdateECRArtifactoryUsingPUTNotFound{}
}

/*
UpdateECRArtifactoryUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateECRArtifactoryUsingPUTNotFound struct {
}

// IsSuccess returns true when this update e c r artifactory using p u t not found response has a 2xx status code
func (o *UpdateECRArtifactoryUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update e c r artifactory using p u t not found response has a 3xx status code
func (o *UpdateECRArtifactoryUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update e c r artifactory using p u t not found response has a 4xx status code
func (o *UpdateECRArtifactoryUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update e c r artifactory using p u t not found response has a 5xx status code
func (o *UpdateECRArtifactoryUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update e c r artifactory using p u t not found response a status code equal to that given
func (o *UpdateECRArtifactoryUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update e c r artifactory using p u t not found response
func (o *UpdateECRArtifactoryUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateECRArtifactoryUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc/v1/artifactories/{artifactoryId}][%d] updateECRArtifactoryUsingPUTNotFound", 404)
}

func (o *UpdateECRArtifactoryUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc/v1/artifactories/{artifactoryId}][%d] updateECRArtifactoryUsingPUTNotFound", 404)
}

func (o *UpdateECRArtifactoryUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
