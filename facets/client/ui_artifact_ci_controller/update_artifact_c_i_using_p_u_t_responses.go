// Code generated by go-swagger; DO NOT EDIT.

package ui_artifact_ci_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateArtifactCIUsingPUTReader is a Reader for the UpdateArtifactCIUsingPUT structure.
type UpdateArtifactCIUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateArtifactCIUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateArtifactCIUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateArtifactCIUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateArtifactCIUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateArtifactCIUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateArtifactCIUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/artifacts-ci/{ciId}] updateArtifactCIUsingPUT", response, response.Code())
	}
}

// NewUpdateArtifactCIUsingPUTOK creates a UpdateArtifactCIUsingPUTOK with default headers values
func NewUpdateArtifactCIUsingPUTOK() *UpdateArtifactCIUsingPUTOK {
	return &UpdateArtifactCIUsingPUTOK{}
}

/*
UpdateArtifactCIUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateArtifactCIUsingPUTOK struct {
	Payload *models.ArtifactCI
}

// IsSuccess returns true when this update artifact c i using p u t o k response has a 2xx status code
func (o *UpdateArtifactCIUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update artifact c i using p u t o k response has a 3xx status code
func (o *UpdateArtifactCIUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update artifact c i using p u t o k response has a 4xx status code
func (o *UpdateArtifactCIUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update artifact c i using p u t o k response has a 5xx status code
func (o *UpdateArtifactCIUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update artifact c i using p u t o k response a status code equal to that given
func (o *UpdateArtifactCIUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update artifact c i using p u t o k response
func (o *UpdateArtifactCIUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateArtifactCIUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/artifacts-ci/{ciId}][%d] updateArtifactCIUsingPUTOK %s", 200, payload)
}

func (o *UpdateArtifactCIUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/artifacts-ci/{ciId}][%d] updateArtifactCIUsingPUTOK %s", 200, payload)
}

func (o *UpdateArtifactCIUsingPUTOK) GetPayload() *models.ArtifactCI {
	return o.Payload
}

func (o *UpdateArtifactCIUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ArtifactCI)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateArtifactCIUsingPUTCreated creates a UpdateArtifactCIUsingPUTCreated with default headers values
func NewUpdateArtifactCIUsingPUTCreated() *UpdateArtifactCIUsingPUTCreated {
	return &UpdateArtifactCIUsingPUTCreated{}
}

/*
UpdateArtifactCIUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateArtifactCIUsingPUTCreated struct {
}

// IsSuccess returns true when this update artifact c i using p u t created response has a 2xx status code
func (o *UpdateArtifactCIUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update artifact c i using p u t created response has a 3xx status code
func (o *UpdateArtifactCIUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update artifact c i using p u t created response has a 4xx status code
func (o *UpdateArtifactCIUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update artifact c i using p u t created response has a 5xx status code
func (o *UpdateArtifactCIUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update artifact c i using p u t created response a status code equal to that given
func (o *UpdateArtifactCIUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update artifact c i using p u t created response
func (o *UpdateArtifactCIUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateArtifactCIUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/artifacts-ci/{ciId}][%d] updateArtifactCIUsingPUTCreated", 201)
}

func (o *UpdateArtifactCIUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/artifacts-ci/{ciId}][%d] updateArtifactCIUsingPUTCreated", 201)
}

func (o *UpdateArtifactCIUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateArtifactCIUsingPUTUnauthorized creates a UpdateArtifactCIUsingPUTUnauthorized with default headers values
func NewUpdateArtifactCIUsingPUTUnauthorized() *UpdateArtifactCIUsingPUTUnauthorized {
	return &UpdateArtifactCIUsingPUTUnauthorized{}
}

/*
UpdateArtifactCIUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateArtifactCIUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update artifact c i using p u t unauthorized response has a 2xx status code
func (o *UpdateArtifactCIUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update artifact c i using p u t unauthorized response has a 3xx status code
func (o *UpdateArtifactCIUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update artifact c i using p u t unauthorized response has a 4xx status code
func (o *UpdateArtifactCIUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update artifact c i using p u t unauthorized response has a 5xx status code
func (o *UpdateArtifactCIUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update artifact c i using p u t unauthorized response a status code equal to that given
func (o *UpdateArtifactCIUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update artifact c i using p u t unauthorized response
func (o *UpdateArtifactCIUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateArtifactCIUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/artifacts-ci/{ciId}][%d] updateArtifactCIUsingPUTUnauthorized", 401)
}

func (o *UpdateArtifactCIUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/artifacts-ci/{ciId}][%d] updateArtifactCIUsingPUTUnauthorized", 401)
}

func (o *UpdateArtifactCIUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateArtifactCIUsingPUTForbidden creates a UpdateArtifactCIUsingPUTForbidden with default headers values
func NewUpdateArtifactCIUsingPUTForbidden() *UpdateArtifactCIUsingPUTForbidden {
	return &UpdateArtifactCIUsingPUTForbidden{}
}

/*
UpdateArtifactCIUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateArtifactCIUsingPUTForbidden struct {
}

// IsSuccess returns true when this update artifact c i using p u t forbidden response has a 2xx status code
func (o *UpdateArtifactCIUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update artifact c i using p u t forbidden response has a 3xx status code
func (o *UpdateArtifactCIUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update artifact c i using p u t forbidden response has a 4xx status code
func (o *UpdateArtifactCIUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update artifact c i using p u t forbidden response has a 5xx status code
func (o *UpdateArtifactCIUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update artifact c i using p u t forbidden response a status code equal to that given
func (o *UpdateArtifactCIUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update artifact c i using p u t forbidden response
func (o *UpdateArtifactCIUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateArtifactCIUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/artifacts-ci/{ciId}][%d] updateArtifactCIUsingPUTForbidden", 403)
}

func (o *UpdateArtifactCIUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/artifacts-ci/{ciId}][%d] updateArtifactCIUsingPUTForbidden", 403)
}

func (o *UpdateArtifactCIUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateArtifactCIUsingPUTNotFound creates a UpdateArtifactCIUsingPUTNotFound with default headers values
func NewUpdateArtifactCIUsingPUTNotFound() *UpdateArtifactCIUsingPUTNotFound {
	return &UpdateArtifactCIUsingPUTNotFound{}
}

/*
UpdateArtifactCIUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateArtifactCIUsingPUTNotFound struct {
}

// IsSuccess returns true when this update artifact c i using p u t not found response has a 2xx status code
func (o *UpdateArtifactCIUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update artifact c i using p u t not found response has a 3xx status code
func (o *UpdateArtifactCIUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update artifact c i using p u t not found response has a 4xx status code
func (o *UpdateArtifactCIUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update artifact c i using p u t not found response has a 5xx status code
func (o *UpdateArtifactCIUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update artifact c i using p u t not found response a status code equal to that given
func (o *UpdateArtifactCIUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update artifact c i using p u t not found response
func (o *UpdateArtifactCIUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateArtifactCIUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/artifacts-ci/{ciId}][%d] updateArtifactCIUsingPUTNotFound", 404)
}

func (o *UpdateArtifactCIUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/artifacts-ci/{ciId}][%d] updateArtifactCIUsingPUTNotFound", 404)
}

func (o *UpdateArtifactCIUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
