// Code generated by go-swagger; DO NOT EDIT.

package ui_artifact_ci_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui artifact ci controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui artifact ci controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui artifact ci controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui artifact ci controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	BulkEditWorkflowUsingPOST(params *BulkEditWorkflowUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEditWorkflowUsingPOSTOK, *BulkEditWorkflowUsingPOSTCreated, error)

	CreateArtifactCIUsingPOST(params *CreateArtifactCIUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateArtifactCIUsingPOSTOK, *CreateArtifactCIUsingPOSTCreated, error)

	DeleteArtifactCIUsingDELETE(params *DeleteArtifactCIUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteArtifactCIUsingDELETEOK, *DeleteArtifactCIUsingDELETENoContent, error)

	GetAllArtifactsCIUsingGET(params *GetAllArtifactsCIUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllArtifactsCIUsingGETOK, error)

	GetArtifactCIUsingGET(params *GetArtifactCIUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactCIUsingGETOK, error)

	GetArtifactCiByNameUsingGET(params *GetArtifactCiByNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactCiByNameUsingGETOK, error)

	GetArtifactCisByStackUsingGET(params *GetArtifactCisByStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactCisByStackUsingGETOK, error)

	GetArtifactsForCIUsingGET(params *GetArtifactsForCIUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactsForCIUsingGETOK, error)

	UpdateArtifactCIUsingPUT(params *UpdateArtifactCIUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateArtifactCIUsingPUTOK, *UpdateArtifactCIUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
BulkEditWorkflowUsingPOST bulks edit workflow
*/
func (a *Client) BulkEditWorkflowUsingPOST(params *BulkEditWorkflowUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEditWorkflowUsingPOSTOK, *BulkEditWorkflowUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkEditWorkflowUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "bulkEditWorkflowUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts-ci/bulk-edit-workflow",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BulkEditWorkflowUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BulkEditWorkflowUsingPOSTOK:
		return value, nil, nil
	case *BulkEditWorkflowUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifact_ci_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateArtifactCIUsingPOST creates artifact c i
*/
func (a *Client) CreateArtifactCIUsingPOST(params *CreateArtifactCIUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateArtifactCIUsingPOSTOK, *CreateArtifactCIUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateArtifactCIUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createArtifactCIUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts-ci",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateArtifactCIUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateArtifactCIUsingPOSTOK:
		return value, nil, nil
	case *CreateArtifactCIUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifact_ci_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteArtifactCIUsingDELETE deletes artifact c i
*/
func (a *Client) DeleteArtifactCIUsingDELETE(params *DeleteArtifactCIUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteArtifactCIUsingDELETEOK, *DeleteArtifactCIUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteArtifactCIUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteArtifactCIUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/artifacts-ci/{ciId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteArtifactCIUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteArtifactCIUsingDELETEOK:
		return value, nil, nil
	case *DeleteArtifactCIUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifact_ci_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllArtifactsCIUsingGET gets all artifacts c i
*/
func (a *Client) GetAllArtifactsCIUsingGET(params *GetAllArtifactsCIUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllArtifactsCIUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllArtifactsCIUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllArtifactsCIUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts-ci",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllArtifactsCIUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllArtifactsCIUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllArtifactsCIUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactCIUsingGET gets artifact c i
*/
func (a *Client) GetArtifactCIUsingGET(params *GetArtifactCIUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactCIUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactCIUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactCIUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts-ci/{ciId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactCIUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactCIUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactCIUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactCiByNameUsingGET gets artifact ci by name
*/
func (a *Client) GetArtifactCiByNameUsingGET(params *GetArtifactCiByNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactCiByNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactCiByNameUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactCiByNameUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts-ci/name/{ciName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactCiByNameUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactCiByNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactCiByNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactCisByStackUsingGET gets artifact cis by stack
*/
func (a *Client) GetArtifactCisByStackUsingGET(params *GetArtifactCisByStackUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactCisByStackUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactCisByStackUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactCisByStackUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts-ci/blueprint/{stackName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactCisByStackUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactCisByStackUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactCisByStackUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactsForCIUsingGET gets artifacts for c i
*/
func (a *Client) GetArtifactsForCIUsingGET(params *GetArtifactsForCIUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactsForCIUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactsForCIUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactsForCIUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts-ci/{ciName}/artifacts",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactsForCIUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactsForCIUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactsForCIUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateArtifactCIUsingPUT updates artifact c i
*/
func (a *Client) UpdateArtifactCIUsingPUT(params *UpdateArtifactCIUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateArtifactCIUsingPUTOK, *UpdateArtifactCIUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateArtifactCIUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateArtifactCIUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/artifacts-ci/{ciId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateArtifactCIUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateArtifactCIUsingPUTOK:
		return value, nil, nil
	case *UpdateArtifactCIUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_artifact_ci_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
