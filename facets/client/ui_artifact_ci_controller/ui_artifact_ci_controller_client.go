// Code generated by go-swagger; DO NOT EDIT.

package ui_artifact_ci_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui artifact ci controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui artifact ci controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui artifact ci controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui artifact ci controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BulkEditWorkflow(params *BulkEditWorkflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEditWorkflowOK, error)

	CreateArtifactCI(params *CreateArtifactCIParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateArtifactCIOK, error)

	DeleteArtifactCI(params *DeleteArtifactCIParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteArtifactCIOK, error)

	GetAllArtifactsCI(params *GetAllArtifactsCIParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllArtifactsCIOK, error)

	GetArtifactCI(params *GetArtifactCIParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactCIOK, error)

	GetArtifactCiByName(params *GetArtifactCiByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactCiByNameOK, error)

	GetArtifactCisByStack(params *GetArtifactCisByStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactCisByStackOK, error)

	GetArtifactsForCI(params *GetArtifactsForCIParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactsForCIOK, error)

	UpdateArtifactCI(params *UpdateArtifactCIParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateArtifactCIOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
BulkEditWorkflow bulk edit workflow API
*/
func (a *Client) BulkEditWorkflow(params *BulkEditWorkflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkEditWorkflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkEditWorkflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "bulkEditWorkflow",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts-ci/bulk-edit-workflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BulkEditWorkflowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkEditWorkflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bulkEditWorkflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateArtifactCI create artifact c i API
*/
func (a *Client) CreateArtifactCI(params *CreateArtifactCIParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateArtifactCIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateArtifactCIParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createArtifactCI",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/artifacts-ci",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateArtifactCIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateArtifactCIOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createArtifactCI: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteArtifactCI delete artifact c i API
*/
func (a *Client) DeleteArtifactCI(params *DeleteArtifactCIParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteArtifactCIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteArtifactCIParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteArtifactCI",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/artifacts-ci/{ciId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteArtifactCIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteArtifactCIOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteArtifactCI: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllArtifactsCI get all artifacts c i API
*/
func (a *Client) GetAllArtifactsCI(params *GetAllArtifactsCIParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllArtifactsCIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllArtifactsCIParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllArtifactsCI",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts-ci",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllArtifactsCIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllArtifactsCIOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllArtifactsCI: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactCI get artifact c i API
*/
func (a *Client) GetArtifactCI(params *GetArtifactCIParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactCIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactCIParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactCI",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts-ci/{ciId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactCIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactCIOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactCI: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactCiByName get artifact ci by name API
*/
func (a *Client) GetArtifactCiByName(params *GetArtifactCiByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactCiByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactCiByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactCiByName",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts-ci/name/{ciName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactCiByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactCiByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactCiByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactCisByStack get artifact cis by stack API
*/
func (a *Client) GetArtifactCisByStack(params *GetArtifactCisByStackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactCisByStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactCisByStackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactCisByStack",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts-ci/blueprint/{stackName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactCisByStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactCisByStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactCisByStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifactsForCI get artifacts for c i API
*/
func (a *Client) GetArtifactsForCI(params *GetArtifactsForCIParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetArtifactsForCIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactsForCIParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactsForCI",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/artifacts-ci/{ciName}/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactsForCIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactsForCIOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactsForCI: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateArtifactCI update artifact c i API
*/
func (a *Client) UpdateArtifactCI(params *UpdateArtifactCIParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateArtifactCIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateArtifactCIParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateArtifactCI",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/artifacts-ci/{ciId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateArtifactCIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateArtifactCIOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateArtifactCI: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
