// Code generated by go-swagger; DO NOT EDIT.

package ui_artifact_ci_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteArtifactCIUsingDELETEReader is a Reader for the DeleteArtifactCIUsingDELETE structure.
type DeleteArtifactCIUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteArtifactCIUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteArtifactCIUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteArtifactCIUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteArtifactCIUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteArtifactCIUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/artifacts-ci/{ciId}] deleteArtifactCIUsingDELETE", response, response.Code())
	}
}

// NewDeleteArtifactCIUsingDELETEOK creates a DeleteArtifactCIUsingDELETEOK with default headers values
func NewDeleteArtifactCIUsingDELETEOK() *DeleteArtifactCIUsingDELETEOK {
	return &DeleteArtifactCIUsingDELETEOK{}
}

/*
DeleteArtifactCIUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteArtifactCIUsingDELETEOK struct {
	Payload *models.ArtifactCI
}

// IsSuccess returns true when this delete artifact c i using d e l e t e o k response has a 2xx status code
func (o *DeleteArtifactCIUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete artifact c i using d e l e t e o k response has a 3xx status code
func (o *DeleteArtifactCIUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete artifact c i using d e l e t e o k response has a 4xx status code
func (o *DeleteArtifactCIUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete artifact c i using d e l e t e o k response has a 5xx status code
func (o *DeleteArtifactCIUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete artifact c i using d e l e t e o k response a status code equal to that given
func (o *DeleteArtifactCIUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete artifact c i using d e l e t e o k response
func (o *DeleteArtifactCIUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteArtifactCIUsingDELETEOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts-ci/{ciId}][%d] deleteArtifactCIUsingDELETEOK %s", 200, payload)
}

func (o *DeleteArtifactCIUsingDELETEOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts-ci/{ciId}][%d] deleteArtifactCIUsingDELETEOK %s", 200, payload)
}

func (o *DeleteArtifactCIUsingDELETEOK) GetPayload() *models.ArtifactCI {
	return o.Payload
}

func (o *DeleteArtifactCIUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ArtifactCI)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteArtifactCIUsingDELETENoContent creates a DeleteArtifactCIUsingDELETENoContent with default headers values
func NewDeleteArtifactCIUsingDELETENoContent() *DeleteArtifactCIUsingDELETENoContent {
	return &DeleteArtifactCIUsingDELETENoContent{}
}

/*
DeleteArtifactCIUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteArtifactCIUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete artifact c i using d e l e t e no content response has a 2xx status code
func (o *DeleteArtifactCIUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete artifact c i using d e l e t e no content response has a 3xx status code
func (o *DeleteArtifactCIUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete artifact c i using d e l e t e no content response has a 4xx status code
func (o *DeleteArtifactCIUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete artifact c i using d e l e t e no content response has a 5xx status code
func (o *DeleteArtifactCIUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete artifact c i using d e l e t e no content response a status code equal to that given
func (o *DeleteArtifactCIUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete artifact c i using d e l e t e no content response
func (o *DeleteArtifactCIUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteArtifactCIUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts-ci/{ciId}][%d] deleteArtifactCIUsingDELETENoContent", 204)
}

func (o *DeleteArtifactCIUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts-ci/{ciId}][%d] deleteArtifactCIUsingDELETENoContent", 204)
}

func (o *DeleteArtifactCIUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteArtifactCIUsingDELETEUnauthorized creates a DeleteArtifactCIUsingDELETEUnauthorized with default headers values
func NewDeleteArtifactCIUsingDELETEUnauthorized() *DeleteArtifactCIUsingDELETEUnauthorized {
	return &DeleteArtifactCIUsingDELETEUnauthorized{}
}

/*
DeleteArtifactCIUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteArtifactCIUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete artifact c i using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteArtifactCIUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete artifact c i using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteArtifactCIUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete artifact c i using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteArtifactCIUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete artifact c i using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteArtifactCIUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete artifact c i using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteArtifactCIUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete artifact c i using d e l e t e unauthorized response
func (o *DeleteArtifactCIUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteArtifactCIUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts-ci/{ciId}][%d] deleteArtifactCIUsingDELETEUnauthorized", 401)
}

func (o *DeleteArtifactCIUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts-ci/{ciId}][%d] deleteArtifactCIUsingDELETEUnauthorized", 401)
}

func (o *DeleteArtifactCIUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteArtifactCIUsingDELETEForbidden creates a DeleteArtifactCIUsingDELETEForbidden with default headers values
func NewDeleteArtifactCIUsingDELETEForbidden() *DeleteArtifactCIUsingDELETEForbidden {
	return &DeleteArtifactCIUsingDELETEForbidden{}
}

/*
DeleteArtifactCIUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteArtifactCIUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete artifact c i using d e l e t e forbidden response has a 2xx status code
func (o *DeleteArtifactCIUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete artifact c i using d e l e t e forbidden response has a 3xx status code
func (o *DeleteArtifactCIUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete artifact c i using d e l e t e forbidden response has a 4xx status code
func (o *DeleteArtifactCIUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete artifact c i using d e l e t e forbidden response has a 5xx status code
func (o *DeleteArtifactCIUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete artifact c i using d e l e t e forbidden response a status code equal to that given
func (o *DeleteArtifactCIUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete artifact c i using d e l e t e forbidden response
func (o *DeleteArtifactCIUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteArtifactCIUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts-ci/{ciId}][%d] deleteArtifactCIUsingDELETEForbidden", 403)
}

func (o *DeleteArtifactCIUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/artifacts-ci/{ciId}][%d] deleteArtifactCIUsingDELETEForbidden", 403)
}

func (o *DeleteArtifactCIUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
