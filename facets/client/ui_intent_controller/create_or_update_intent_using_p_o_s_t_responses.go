// Code generated by go-swagger; DO NOT EDIT.

package ui_intent_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateOrUpdateIntentUsingPOSTReader is a Reader for the CreateOrUpdateIntentUsingPOST structure.
type CreateOrUpdateIntentUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateOrUpdateIntentUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateOrUpdateIntentUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewCreateOrUpdateIntentUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateOrUpdateIntentUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateOrUpdateIntentUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateOrUpdateIntentUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/intents] createOrUpdateIntentUsingPOST", response, response.Code())
	}
}

// NewCreateOrUpdateIntentUsingPOSTOK creates a CreateOrUpdateIntentUsingPOSTOK with default headers values
func NewCreateOrUpdateIntentUsingPOSTOK() *CreateOrUpdateIntentUsingPOSTOK {
	return &CreateOrUpdateIntentUsingPOSTOK{}
}

/*
CreateOrUpdateIntentUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type CreateOrUpdateIntentUsingPOSTOK struct {
	Payload *models.IntentResponseDTO
}

// IsSuccess returns true when this create or update intent using p o s t o k response has a 2xx status code
func (o *CreateOrUpdateIntentUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create or update intent using p o s t o k response has a 3xx status code
func (o *CreateOrUpdateIntentUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create or update intent using p o s t o k response has a 4xx status code
func (o *CreateOrUpdateIntentUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create or update intent using p o s t o k response has a 5xx status code
func (o *CreateOrUpdateIntentUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create or update intent using p o s t o k response a status code equal to that given
func (o *CreateOrUpdateIntentUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create or update intent using p o s t o k response
func (o *CreateOrUpdateIntentUsingPOSTOK) Code() int {
	return 200
}

func (o *CreateOrUpdateIntentUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentUsingPOSTOK %s", 200, payload)
}

func (o *CreateOrUpdateIntentUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentUsingPOSTOK %s", 200, payload)
}

func (o *CreateOrUpdateIntentUsingPOSTOK) GetPayload() *models.IntentResponseDTO {
	return o.Payload
}

func (o *CreateOrUpdateIntentUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IntentResponseDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrUpdateIntentUsingPOSTCreated creates a CreateOrUpdateIntentUsingPOSTCreated with default headers values
func NewCreateOrUpdateIntentUsingPOSTCreated() *CreateOrUpdateIntentUsingPOSTCreated {
	return &CreateOrUpdateIntentUsingPOSTCreated{}
}

/*
CreateOrUpdateIntentUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type CreateOrUpdateIntentUsingPOSTCreated struct {
}

// IsSuccess returns true when this create or update intent using p o s t created response has a 2xx status code
func (o *CreateOrUpdateIntentUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create or update intent using p o s t created response has a 3xx status code
func (o *CreateOrUpdateIntentUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create or update intent using p o s t created response has a 4xx status code
func (o *CreateOrUpdateIntentUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create or update intent using p o s t created response has a 5xx status code
func (o *CreateOrUpdateIntentUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create or update intent using p o s t created response a status code equal to that given
func (o *CreateOrUpdateIntentUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create or update intent using p o s t created response
func (o *CreateOrUpdateIntentUsingPOSTCreated) Code() int {
	return 201
}

func (o *CreateOrUpdateIntentUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentUsingPOSTCreated", 201)
}

func (o *CreateOrUpdateIntentUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentUsingPOSTCreated", 201)
}

func (o *CreateOrUpdateIntentUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateOrUpdateIntentUsingPOSTUnauthorized creates a CreateOrUpdateIntentUsingPOSTUnauthorized with default headers values
func NewCreateOrUpdateIntentUsingPOSTUnauthorized() *CreateOrUpdateIntentUsingPOSTUnauthorized {
	return &CreateOrUpdateIntentUsingPOSTUnauthorized{}
}

/*
CreateOrUpdateIntentUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateOrUpdateIntentUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this create or update intent using p o s t unauthorized response has a 2xx status code
func (o *CreateOrUpdateIntentUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create or update intent using p o s t unauthorized response has a 3xx status code
func (o *CreateOrUpdateIntentUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create or update intent using p o s t unauthorized response has a 4xx status code
func (o *CreateOrUpdateIntentUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create or update intent using p o s t unauthorized response has a 5xx status code
func (o *CreateOrUpdateIntentUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create or update intent using p o s t unauthorized response a status code equal to that given
func (o *CreateOrUpdateIntentUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create or update intent using p o s t unauthorized response
func (o *CreateOrUpdateIntentUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *CreateOrUpdateIntentUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentUsingPOSTUnauthorized", 401)
}

func (o *CreateOrUpdateIntentUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentUsingPOSTUnauthorized", 401)
}

func (o *CreateOrUpdateIntentUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateOrUpdateIntentUsingPOSTForbidden creates a CreateOrUpdateIntentUsingPOSTForbidden with default headers values
func NewCreateOrUpdateIntentUsingPOSTForbidden() *CreateOrUpdateIntentUsingPOSTForbidden {
	return &CreateOrUpdateIntentUsingPOSTForbidden{}
}

/*
CreateOrUpdateIntentUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateOrUpdateIntentUsingPOSTForbidden struct {
}

// IsSuccess returns true when this create or update intent using p o s t forbidden response has a 2xx status code
func (o *CreateOrUpdateIntentUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create or update intent using p o s t forbidden response has a 3xx status code
func (o *CreateOrUpdateIntentUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create or update intent using p o s t forbidden response has a 4xx status code
func (o *CreateOrUpdateIntentUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create or update intent using p o s t forbidden response has a 5xx status code
func (o *CreateOrUpdateIntentUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create or update intent using p o s t forbidden response a status code equal to that given
func (o *CreateOrUpdateIntentUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create or update intent using p o s t forbidden response
func (o *CreateOrUpdateIntentUsingPOSTForbidden) Code() int {
	return 403
}

func (o *CreateOrUpdateIntentUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentUsingPOSTForbidden", 403)
}

func (o *CreateOrUpdateIntentUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentUsingPOSTForbidden", 403)
}

func (o *CreateOrUpdateIntentUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateOrUpdateIntentUsingPOSTNotFound creates a CreateOrUpdateIntentUsingPOSTNotFound with default headers values
func NewCreateOrUpdateIntentUsingPOSTNotFound() *CreateOrUpdateIntentUsingPOSTNotFound {
	return &CreateOrUpdateIntentUsingPOSTNotFound{}
}

/*
CreateOrUpdateIntentUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateOrUpdateIntentUsingPOSTNotFound struct {
}

// IsSuccess returns true when this create or update intent using p o s t not found response has a 2xx status code
func (o *CreateOrUpdateIntentUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create or update intent using p o s t not found response has a 3xx status code
func (o *CreateOrUpdateIntentUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create or update intent using p o s t not found response has a 4xx status code
func (o *CreateOrUpdateIntentUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create or update intent using p o s t not found response has a 5xx status code
func (o *CreateOrUpdateIntentUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create or update intent using p o s t not found response a status code equal to that given
func (o *CreateOrUpdateIntentUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create or update intent using p o s t not found response
func (o *CreateOrUpdateIntentUsingPOSTNotFound) Code() int {
	return 404
}

func (o *CreateOrUpdateIntentUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentUsingPOSTNotFound", 404)
}

func (o *CreateOrUpdateIntentUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/intents][%d] createOrUpdateIntentUsingPOSTNotFound", 404)
}

func (o *CreateOrUpdateIntentUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
