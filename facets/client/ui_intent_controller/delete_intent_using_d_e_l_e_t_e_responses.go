// Code generated by go-swagger; DO NOT EDIT.

package ui_intent_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteIntentUsingDELETEReader is a Reader for the DeleteIntentUsingDELETE structure.
type DeleteIntentUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteIntentUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteIntentUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteIntentUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteIntentUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteIntentUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/intents/{name}] deleteIntentUsingDELETE", response, response.Code())
	}
}

// NewDeleteIntentUsingDELETEOK creates a DeleteIntentUsingDELETEOK with default headers values
func NewDeleteIntentUsingDELETEOK() *DeleteIntentUsingDELETEOK {
	return &DeleteIntentUsingDELETEOK{}
}

/*
DeleteIntentUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteIntentUsingDELETEOK struct {
}

// IsSuccess returns true when this delete intent using d e l e t e o k response has a 2xx status code
func (o *DeleteIntentUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete intent using d e l e t e o k response has a 3xx status code
func (o *DeleteIntentUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete intent using d e l e t e o k response has a 4xx status code
func (o *DeleteIntentUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete intent using d e l e t e o k response has a 5xx status code
func (o *DeleteIntentUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete intent using d e l e t e o k response a status code equal to that given
func (o *DeleteIntentUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete intent using d e l e t e o k response
func (o *DeleteIntentUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteIntentUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentUsingDELETEOK", 200)
}

func (o *DeleteIntentUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentUsingDELETEOK", 200)
}

func (o *DeleteIntentUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteIntentUsingDELETENoContent creates a DeleteIntentUsingDELETENoContent with default headers values
func NewDeleteIntentUsingDELETENoContent() *DeleteIntentUsingDELETENoContent {
	return &DeleteIntentUsingDELETENoContent{}
}

/*
DeleteIntentUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteIntentUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete intent using d e l e t e no content response has a 2xx status code
func (o *DeleteIntentUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete intent using d e l e t e no content response has a 3xx status code
func (o *DeleteIntentUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete intent using d e l e t e no content response has a 4xx status code
func (o *DeleteIntentUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete intent using d e l e t e no content response has a 5xx status code
func (o *DeleteIntentUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete intent using d e l e t e no content response a status code equal to that given
func (o *DeleteIntentUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete intent using d e l e t e no content response
func (o *DeleteIntentUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteIntentUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentUsingDELETENoContent", 204)
}

func (o *DeleteIntentUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentUsingDELETENoContent", 204)
}

func (o *DeleteIntentUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteIntentUsingDELETEUnauthorized creates a DeleteIntentUsingDELETEUnauthorized with default headers values
func NewDeleteIntentUsingDELETEUnauthorized() *DeleteIntentUsingDELETEUnauthorized {
	return &DeleteIntentUsingDELETEUnauthorized{}
}

/*
DeleteIntentUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteIntentUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete intent using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteIntentUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete intent using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteIntentUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete intent using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteIntentUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete intent using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteIntentUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete intent using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteIntentUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete intent using d e l e t e unauthorized response
func (o *DeleteIntentUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteIntentUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentUsingDELETEUnauthorized", 401)
}

func (o *DeleteIntentUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentUsingDELETEUnauthorized", 401)
}

func (o *DeleteIntentUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteIntentUsingDELETEForbidden creates a DeleteIntentUsingDELETEForbidden with default headers values
func NewDeleteIntentUsingDELETEForbidden() *DeleteIntentUsingDELETEForbidden {
	return &DeleteIntentUsingDELETEForbidden{}
}

/*
DeleteIntentUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteIntentUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete intent using d e l e t e forbidden response has a 2xx status code
func (o *DeleteIntentUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete intent using d e l e t e forbidden response has a 3xx status code
func (o *DeleteIntentUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete intent using d e l e t e forbidden response has a 4xx status code
func (o *DeleteIntentUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete intent using d e l e t e forbidden response has a 5xx status code
func (o *DeleteIntentUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete intent using d e l e t e forbidden response a status code equal to that given
func (o *DeleteIntentUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete intent using d e l e t e forbidden response
func (o *DeleteIntentUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteIntentUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentUsingDELETEForbidden", 403)
}

func (o *DeleteIntentUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/intents/{name}][%d] deleteIntentUsingDELETEForbidden", 403)
}

func (o *DeleteIntentUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
