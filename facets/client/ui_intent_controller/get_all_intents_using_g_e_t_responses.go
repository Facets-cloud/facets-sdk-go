// Code generated by go-swagger; DO NOT EDIT.

package ui_intent_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllIntentsUsingGETReader is a Reader for the GetAllIntentsUsingGET structure.
type GetAllIntentsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllIntentsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllIntentsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllIntentsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllIntentsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllIntentsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/intents] getAllIntentsUsingGET", response, response.Code())
	}
}

// NewGetAllIntentsUsingGETOK creates a GetAllIntentsUsingGETOK with default headers values
func NewGetAllIntentsUsingGETOK() *GetAllIntentsUsingGETOK {
	return &GetAllIntentsUsingGETOK{}
}

/*
GetAllIntentsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetAllIntentsUsingGETOK struct {
	Payload []*models.IntentResponseDTO
}

// IsSuccess returns true when this get all intents using g e t o k response has a 2xx status code
func (o *GetAllIntentsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all intents using g e t o k response has a 3xx status code
func (o *GetAllIntentsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all intents using g e t o k response has a 4xx status code
func (o *GetAllIntentsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all intents using g e t o k response has a 5xx status code
func (o *GetAllIntentsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all intents using g e t o k response a status code equal to that given
func (o *GetAllIntentsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all intents using g e t o k response
func (o *GetAllIntentsUsingGETOK) Code() int {
	return 200
}

func (o *GetAllIntentsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsUsingGETOK %s", 200, payload)
}

func (o *GetAllIntentsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsUsingGETOK %s", 200, payload)
}

func (o *GetAllIntentsUsingGETOK) GetPayload() []*models.IntentResponseDTO {
	return o.Payload
}

func (o *GetAllIntentsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllIntentsUsingGETUnauthorized creates a GetAllIntentsUsingGETUnauthorized with default headers values
func NewGetAllIntentsUsingGETUnauthorized() *GetAllIntentsUsingGETUnauthorized {
	return &GetAllIntentsUsingGETUnauthorized{}
}

/*
GetAllIntentsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllIntentsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all intents using g e t unauthorized response has a 2xx status code
func (o *GetAllIntentsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all intents using g e t unauthorized response has a 3xx status code
func (o *GetAllIntentsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all intents using g e t unauthorized response has a 4xx status code
func (o *GetAllIntentsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all intents using g e t unauthorized response has a 5xx status code
func (o *GetAllIntentsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all intents using g e t unauthorized response a status code equal to that given
func (o *GetAllIntentsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all intents using g e t unauthorized response
func (o *GetAllIntentsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllIntentsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsUsingGETUnauthorized", 401)
}

func (o *GetAllIntentsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsUsingGETUnauthorized", 401)
}

func (o *GetAllIntentsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllIntentsUsingGETForbidden creates a GetAllIntentsUsingGETForbidden with default headers values
func NewGetAllIntentsUsingGETForbidden() *GetAllIntentsUsingGETForbidden {
	return &GetAllIntentsUsingGETForbidden{}
}

/*
GetAllIntentsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllIntentsUsingGETForbidden struct {
}

// IsSuccess returns true when this get all intents using g e t forbidden response has a 2xx status code
func (o *GetAllIntentsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all intents using g e t forbidden response has a 3xx status code
func (o *GetAllIntentsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all intents using g e t forbidden response has a 4xx status code
func (o *GetAllIntentsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all intents using g e t forbidden response has a 5xx status code
func (o *GetAllIntentsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all intents using g e t forbidden response a status code equal to that given
func (o *GetAllIntentsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all intents using g e t forbidden response
func (o *GetAllIntentsUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllIntentsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsUsingGETForbidden", 403)
}

func (o *GetAllIntentsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsUsingGETForbidden", 403)
}

func (o *GetAllIntentsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllIntentsUsingGETNotFound creates a GetAllIntentsUsingGETNotFound with default headers values
func NewGetAllIntentsUsingGETNotFound() *GetAllIntentsUsingGETNotFound {
	return &GetAllIntentsUsingGETNotFound{}
}

/*
GetAllIntentsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllIntentsUsingGETNotFound struct {
}

// IsSuccess returns true when this get all intents using g e t not found response has a 2xx status code
func (o *GetAllIntentsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all intents using g e t not found response has a 3xx status code
func (o *GetAllIntentsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all intents using g e t not found response has a 4xx status code
func (o *GetAllIntentsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all intents using g e t not found response has a 5xx status code
func (o *GetAllIntentsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all intents using g e t not found response a status code equal to that given
func (o *GetAllIntentsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all intents using g e t not found response
func (o *GetAllIntentsUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllIntentsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsUsingGETNotFound", 404)
}

func (o *GetAllIntentsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/intents][%d] getAllIntentsUsingGETNotFound", 404)
}

func (o *GetAllIntentsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
