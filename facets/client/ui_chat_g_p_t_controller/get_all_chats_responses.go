// Code generated by go-swagger; DO NOT EDIT.

package ui_chat_g_p_t_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllChatsReader is a Reader for the GetAllChats structure.
type GetAllChatsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllChatsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllChatsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllChatsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllChatsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAllChatsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllChatsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/{clusterId}/chat] getAllChats", response, response.Code())
	}
}

// NewGetAllChatsOK creates a GetAllChatsOK with default headers values
func NewGetAllChatsOK() *GetAllChatsOK {
	return &GetAllChatsOK{}
}

/*
GetAllChatsOK describes a response with status code 200, with default header values.

Chats found
*/
type GetAllChatsOK struct {
	Payload *models.PageChat
}

// IsSuccess returns true when this get all chats o k response has a 2xx status code
func (o *GetAllChatsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all chats o k response has a 3xx status code
func (o *GetAllChatsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all chats o k response has a 4xx status code
func (o *GetAllChatsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all chats o k response has a 5xx status code
func (o *GetAllChatsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all chats o k response a status code equal to that given
func (o *GetAllChatsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all chats o k response
func (o *GetAllChatsOK) Code() int {
	return 200
}

func (o *GetAllChatsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/chat][%d] getAllChatsOK %s", 200, payload)
}

func (o *GetAllChatsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/chat][%d] getAllChatsOK %s", 200, payload)
}

func (o *GetAllChatsOK) GetPayload() *models.PageChat {
	return o.Payload
}

func (o *GetAllChatsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageChat)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllChatsBadRequest creates a GetAllChatsBadRequest with default headers values
func NewGetAllChatsBadRequest() *GetAllChatsBadRequest {
	return &GetAllChatsBadRequest{}
}

/*
GetAllChatsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAllChatsBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all chats bad request response has a 2xx status code
func (o *GetAllChatsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all chats bad request response has a 3xx status code
func (o *GetAllChatsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all chats bad request response has a 4xx status code
func (o *GetAllChatsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all chats bad request response has a 5xx status code
func (o *GetAllChatsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all chats bad request response a status code equal to that given
func (o *GetAllChatsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all chats bad request response
func (o *GetAllChatsBadRequest) Code() int {
	return 400
}

func (o *GetAllChatsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/chat][%d] getAllChatsBadRequest %s", 400, payload)
}

func (o *GetAllChatsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/chat][%d] getAllChatsBadRequest %s", 400, payload)
}

func (o *GetAllChatsBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllChatsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllChatsNotFound creates a GetAllChatsNotFound with default headers values
func NewGetAllChatsNotFound() *GetAllChatsNotFound {
	return &GetAllChatsNotFound{}
}

/*
GetAllChatsNotFound describes a response with status code 404, with default header values.

Cluster not found
*/
type GetAllChatsNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all chats not found response has a 2xx status code
func (o *GetAllChatsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all chats not found response has a 3xx status code
func (o *GetAllChatsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all chats not found response has a 4xx status code
func (o *GetAllChatsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all chats not found response has a 5xx status code
func (o *GetAllChatsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all chats not found response a status code equal to that given
func (o *GetAllChatsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all chats not found response
func (o *GetAllChatsNotFound) Code() int {
	return 404
}

func (o *GetAllChatsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/chat][%d] getAllChatsNotFound %s", 404, payload)
}

func (o *GetAllChatsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/chat][%d] getAllChatsNotFound %s", 404, payload)
}

func (o *GetAllChatsNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllChatsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllChatsMethodNotAllowed creates a GetAllChatsMethodNotAllowed with default headers values
func NewGetAllChatsMethodNotAllowed() *GetAllChatsMethodNotAllowed {
	return &GetAllChatsMethodNotAllowed{}
}

/*
GetAllChatsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAllChatsMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all chats method not allowed response has a 2xx status code
func (o *GetAllChatsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all chats method not allowed response has a 3xx status code
func (o *GetAllChatsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all chats method not allowed response has a 4xx status code
func (o *GetAllChatsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all chats method not allowed response has a 5xx status code
func (o *GetAllChatsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get all chats method not allowed response a status code equal to that given
func (o *GetAllChatsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get all chats method not allowed response
func (o *GetAllChatsMethodNotAllowed) Code() int {
	return 405
}

func (o *GetAllChatsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/chat][%d] getAllChatsMethodNotAllowed %s", 405, payload)
}

func (o *GetAllChatsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/chat][%d] getAllChatsMethodNotAllowed %s", 405, payload)
}

func (o *GetAllChatsMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllChatsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllChatsInternalServerError creates a GetAllChatsInternalServerError with default headers values
func NewGetAllChatsInternalServerError() *GetAllChatsInternalServerError {
	return &GetAllChatsInternalServerError{}
}

/*
GetAllChatsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAllChatsInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all chats internal server error response has a 2xx status code
func (o *GetAllChatsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all chats internal server error response has a 3xx status code
func (o *GetAllChatsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all chats internal server error response has a 4xx status code
func (o *GetAllChatsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all chats internal server error response has a 5xx status code
func (o *GetAllChatsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all chats internal server error response a status code equal to that given
func (o *GetAllChatsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all chats internal server error response
func (o *GetAllChatsInternalServerError) Code() int {
	return 500
}

func (o *GetAllChatsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/chat][%d] getAllChatsInternalServerError %s", 500, payload)
}

func (o *GetAllChatsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/{clusterId}/chat][%d] getAllChatsInternalServerError %s", 500, payload)
}

func (o *GetAllChatsInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllChatsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
