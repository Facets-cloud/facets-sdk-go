// Code generated by go-swagger; DO NOT EDIT.

package ui_chat_g_p_t_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetChatByIDReader is a Reader for the GetChatByID structure.
type GetChatByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetChatByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetChatByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetChatByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetChatByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetChatByIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetChatByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/clusters/chat/{chatId}] getChatById", response, response.Code())
	}
}

// NewGetChatByIDOK creates a GetChatByIDOK with default headers values
func NewGetChatByIDOK() *GetChatByIDOK {
	return &GetChatByIDOK{}
}

/*
GetChatByIDOK describes a response with status code 200, with default header values.

Chat found
*/
type GetChatByIDOK struct {
	Payload *models.Chat
}

// IsSuccess returns true when this get chat by Id o k response has a 2xx status code
func (o *GetChatByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get chat by Id o k response has a 3xx status code
func (o *GetChatByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chat by Id o k response has a 4xx status code
func (o *GetChatByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get chat by Id o k response has a 5xx status code
func (o *GetChatByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get chat by Id o k response a status code equal to that given
func (o *GetChatByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get chat by Id o k response
func (o *GetChatByIDOK) Code() int {
	return 200
}

func (o *GetChatByIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/{chatId}][%d] getChatByIdOK %s", 200, payload)
}

func (o *GetChatByIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/{chatId}][%d] getChatByIdOK %s", 200, payload)
}

func (o *GetChatByIDOK) GetPayload() *models.Chat {
	return o.Payload
}

func (o *GetChatByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Chat)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChatByIDBadRequest creates a GetChatByIDBadRequest with default headers values
func NewGetChatByIDBadRequest() *GetChatByIDBadRequest {
	return &GetChatByIDBadRequest{}
}

/*
GetChatByIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetChatByIDBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get chat by Id bad request response has a 2xx status code
func (o *GetChatByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get chat by Id bad request response has a 3xx status code
func (o *GetChatByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chat by Id bad request response has a 4xx status code
func (o *GetChatByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get chat by Id bad request response has a 5xx status code
func (o *GetChatByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get chat by Id bad request response a status code equal to that given
func (o *GetChatByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get chat by Id bad request response
func (o *GetChatByIDBadRequest) Code() int {
	return 400
}

func (o *GetChatByIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/{chatId}][%d] getChatByIdBadRequest %s", 400, payload)
}

func (o *GetChatByIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/{chatId}][%d] getChatByIdBadRequest %s", 400, payload)
}

func (o *GetChatByIDBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetChatByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChatByIDNotFound creates a GetChatByIDNotFound with default headers values
func NewGetChatByIDNotFound() *GetChatByIDNotFound {
	return &GetChatByIDNotFound{}
}

/*
GetChatByIDNotFound describes a response with status code 404, with default header values.

Chat not found
*/
type GetChatByIDNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get chat by Id not found response has a 2xx status code
func (o *GetChatByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get chat by Id not found response has a 3xx status code
func (o *GetChatByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chat by Id not found response has a 4xx status code
func (o *GetChatByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get chat by Id not found response has a 5xx status code
func (o *GetChatByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get chat by Id not found response a status code equal to that given
func (o *GetChatByIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get chat by Id not found response
func (o *GetChatByIDNotFound) Code() int {
	return 404
}

func (o *GetChatByIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/{chatId}][%d] getChatByIdNotFound %s", 404, payload)
}

func (o *GetChatByIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/{chatId}][%d] getChatByIdNotFound %s", 404, payload)
}

func (o *GetChatByIDNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetChatByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChatByIDMethodNotAllowed creates a GetChatByIDMethodNotAllowed with default headers values
func NewGetChatByIDMethodNotAllowed() *GetChatByIDMethodNotAllowed {
	return &GetChatByIDMethodNotAllowed{}
}

/*
GetChatByIDMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetChatByIDMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get chat by Id method not allowed response has a 2xx status code
func (o *GetChatByIDMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get chat by Id method not allowed response has a 3xx status code
func (o *GetChatByIDMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chat by Id method not allowed response has a 4xx status code
func (o *GetChatByIDMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get chat by Id method not allowed response has a 5xx status code
func (o *GetChatByIDMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get chat by Id method not allowed response a status code equal to that given
func (o *GetChatByIDMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get chat by Id method not allowed response
func (o *GetChatByIDMethodNotAllowed) Code() int {
	return 405
}

func (o *GetChatByIDMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/{chatId}][%d] getChatByIdMethodNotAllowed %s", 405, payload)
}

func (o *GetChatByIDMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/{chatId}][%d] getChatByIdMethodNotAllowed %s", 405, payload)
}

func (o *GetChatByIDMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetChatByIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChatByIDInternalServerError creates a GetChatByIDInternalServerError with default headers values
func NewGetChatByIDInternalServerError() *GetChatByIDInternalServerError {
	return &GetChatByIDInternalServerError{}
}

/*
GetChatByIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetChatByIDInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get chat by Id internal server error response has a 2xx status code
func (o *GetChatByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get chat by Id internal server error response has a 3xx status code
func (o *GetChatByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chat by Id internal server error response has a 4xx status code
func (o *GetChatByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get chat by Id internal server error response has a 5xx status code
func (o *GetChatByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get chat by Id internal server error response a status code equal to that given
func (o *GetChatByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get chat by Id internal server error response
func (o *GetChatByIDInternalServerError) Code() int {
	return 500
}

func (o *GetChatByIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/{chatId}][%d] getChatByIdInternalServerError %s", 500, payload)
}

func (o *GetChatByIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/clusters/chat/{chatId}][%d] getChatByIdInternalServerError %s", 500, payload)
}

func (o *GetChatByIDInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetChatByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
