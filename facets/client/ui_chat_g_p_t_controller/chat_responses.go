// Code generated by go-swagger; DO NOT EDIT.

package ui_chat_g_p_t_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// ChatReader is a Reader for the Chat structure.
type ChatReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChatReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChatOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewChatBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewChatNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewChatMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewChatInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/chat/{chatId}] chat", response, response.Code())
	}
}

// NewChatOK creates a ChatOK with default headers values
func NewChatOK() *ChatOK {
	return &ChatOK{}
}

/*
ChatOK describes a response with status code 200, with default header values.

Message sent successfully
*/
type ChatOK struct {
	Payload *models.ChatMessage
}

// IsSuccess returns true when this chat o k response has a 2xx status code
func (o *ChatOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this chat o k response has a 3xx status code
func (o *ChatOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chat o k response has a 4xx status code
func (o *ChatOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this chat o k response has a 5xx status code
func (o *ChatOK) IsServerError() bool {
	return false
}

// IsCode returns true when this chat o k response a status code equal to that given
func (o *ChatOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the chat o k response
func (o *ChatOK) Code() int {
	return 200
}

func (o *ChatOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatOK %s", 200, payload)
}

func (o *ChatOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatOK %s", 200, payload)
}

func (o *ChatOK) GetPayload() *models.ChatMessage {
	return o.Payload
}

func (o *ChatOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChatMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChatBadRequest creates a ChatBadRequest with default headers values
func NewChatBadRequest() *ChatBadRequest {
	return &ChatBadRequest{}
}

/*
ChatBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type ChatBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this chat bad request response has a 2xx status code
func (o *ChatBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chat bad request response has a 3xx status code
func (o *ChatBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chat bad request response has a 4xx status code
func (o *ChatBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this chat bad request response has a 5xx status code
func (o *ChatBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this chat bad request response a status code equal to that given
func (o *ChatBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the chat bad request response
func (o *ChatBadRequest) Code() int {
	return 400
}

func (o *ChatBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatBadRequest %s", 400, payload)
}

func (o *ChatBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatBadRequest %s", 400, payload)
}

func (o *ChatBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ChatBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChatNotFound creates a ChatNotFound with default headers values
func NewChatNotFound() *ChatNotFound {
	return &ChatNotFound{}
}

/*
ChatNotFound describes a response with status code 404, with default header values.

Chat not found
*/
type ChatNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this chat not found response has a 2xx status code
func (o *ChatNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chat not found response has a 3xx status code
func (o *ChatNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chat not found response has a 4xx status code
func (o *ChatNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this chat not found response has a 5xx status code
func (o *ChatNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this chat not found response a status code equal to that given
func (o *ChatNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the chat not found response
func (o *ChatNotFound) Code() int {
	return 404
}

func (o *ChatNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatNotFound %s", 404, payload)
}

func (o *ChatNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatNotFound %s", 404, payload)
}

func (o *ChatNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ChatNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChatMethodNotAllowed creates a ChatMethodNotAllowed with default headers values
func NewChatMethodNotAllowed() *ChatMethodNotAllowed {
	return &ChatMethodNotAllowed{}
}

/*
ChatMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type ChatMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this chat method not allowed response has a 2xx status code
func (o *ChatMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chat method not allowed response has a 3xx status code
func (o *ChatMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chat method not allowed response has a 4xx status code
func (o *ChatMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this chat method not allowed response has a 5xx status code
func (o *ChatMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this chat method not allowed response a status code equal to that given
func (o *ChatMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the chat method not allowed response
func (o *ChatMethodNotAllowed) Code() int {
	return 405
}

func (o *ChatMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatMethodNotAllowed %s", 405, payload)
}

func (o *ChatMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatMethodNotAllowed %s", 405, payload)
}

func (o *ChatMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ChatMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChatInternalServerError creates a ChatInternalServerError with default headers values
func NewChatInternalServerError() *ChatInternalServerError {
	return &ChatInternalServerError{}
}

/*
ChatInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ChatInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this chat internal server error response has a 2xx status code
func (o *ChatInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chat internal server error response has a 3xx status code
func (o *ChatInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chat internal server error response has a 4xx status code
func (o *ChatInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this chat internal server error response has a 5xx status code
func (o *ChatInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this chat internal server error response a status code equal to that given
func (o *ChatInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the chat internal server error response
func (o *ChatInternalServerError) Code() int {
	return 500
}

func (o *ChatInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatInternalServerError %s", 500, payload)
}

func (o *ChatInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/chat/{chatId}][%d] chatInternalServerError %s", 500, payload)
}

func (o *ChatInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *ChatInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
