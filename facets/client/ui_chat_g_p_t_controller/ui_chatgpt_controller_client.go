// Code generated by go-swagger; DO NOT EDIT.

package ui_chat_g_p_t_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui chat g p t controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui chat g p t controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui chat g p t controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui chat g p t controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AnalyzeKubernetesCluster(params *AnalyzeKubernetesClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AnalyzeKubernetesClusterOK, error)

	Chat(params *ChatParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChatOK, error)

	CreateChat(params *CreateChatParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateChatCreated, error)

	GetAllChats(params *GetAllChatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllChatsOK, error)

	GetAllStarters(params *GetAllStartersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllStartersOK, error)

	GetChatByID(params *GetChatByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetChatByIDOK, error)

	GetK8sChats(params *GetK8sChatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetK8sChatsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AnalyzeKubernetesCluster analyze kubernetes cluster API
*/
func (a *Client) AnalyzeKubernetesCluster(params *AnalyzeKubernetesClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AnalyzeKubernetesClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnalyzeKubernetesClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "analyzeKubernetesCluster",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/kubernetes/analyze",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AnalyzeKubernetesClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AnalyzeKubernetesClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for analyzeKubernetesCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Chat sends a message to a chat
*/
func (a *Client) Chat(params *ChatParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChatParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "chat",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/chat/{chatId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChatReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for chat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateChat creates a new chat
*/
func (a *Client) CreateChat(params *CreateChatParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateChatCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateChatParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createChat",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/chat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateChatReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateChatCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createChat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllChats gets chats by cluster ID
*/
func (a *Client) GetAllChats(params *GetAllChatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllChatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllChatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllChats",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/chat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllChatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllChatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllChats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllStarters gets chat starters metadata
*/
func (a *Client) GetAllStarters(params *GetAllStartersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllStartersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllStartersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllStarters",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/chat/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllStartersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllStartersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllStarters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetChatByID gets chat by ID
*/
func (a *Client) GetChatByID(params *GetChatByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetChatByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChatByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChatById",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/clusters/chat/{chatId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetChatByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChatByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChatById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetK8sChats asks questions about k8s operations
*/
func (a *Client) GetK8sChats(params *GetK8sChatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetK8sChatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetK8sChatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getK8sChats",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/clusters/{clusterId}/k8s-chat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetK8sChatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetK8sChatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getK8sChats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
