// Code generated by go-swagger; DO NOT EDIT.

package ui_chat_g_p_t_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// CreateChatReader is a Reader for the CreateChat structure.
type CreateChatReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateChatReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateChatCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateChatBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateChatNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreateChatMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateChatInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/clusters/{clusterId}/chat] createChat", response, response.Code())
	}
}

// NewCreateChatCreated creates a CreateChatCreated with default headers values
func NewCreateChatCreated() *CreateChatCreated {
	return &CreateChatCreated{}
}

/*
CreateChatCreated describes a response with status code 201, with default header values.

Chat created successfully
*/
type CreateChatCreated struct {
	Payload *models.Chat
}

// IsSuccess returns true when this create chat created response has a 2xx status code
func (o *CreateChatCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create chat created response has a 3xx status code
func (o *CreateChatCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create chat created response has a 4xx status code
func (o *CreateChatCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create chat created response has a 5xx status code
func (o *CreateChatCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create chat created response a status code equal to that given
func (o *CreateChatCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create chat created response
func (o *CreateChatCreated) Code() int {
	return 201
}

func (o *CreateChatCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/chat][%d] createChatCreated %s", 201, payload)
}

func (o *CreateChatCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/chat][%d] createChatCreated %s", 201, payload)
}

func (o *CreateChatCreated) GetPayload() *models.Chat {
	return o.Payload
}

func (o *CreateChatCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Chat)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateChatBadRequest creates a CreateChatBadRequest with default headers values
func NewCreateChatBadRequest() *CreateChatBadRequest {
	return &CreateChatBadRequest{}
}

/*
CreateChatBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type CreateChatBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create chat bad request response has a 2xx status code
func (o *CreateChatBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create chat bad request response has a 3xx status code
func (o *CreateChatBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create chat bad request response has a 4xx status code
func (o *CreateChatBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create chat bad request response has a 5xx status code
func (o *CreateChatBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create chat bad request response a status code equal to that given
func (o *CreateChatBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create chat bad request response
func (o *CreateChatBadRequest) Code() int {
	return 400
}

func (o *CreateChatBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/chat][%d] createChatBadRequest %s", 400, payload)
}

func (o *CreateChatBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/chat][%d] createChatBadRequest %s", 400, payload)
}

func (o *CreateChatBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateChatBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateChatNotFound creates a CreateChatNotFound with default headers values
func NewCreateChatNotFound() *CreateChatNotFound {
	return &CreateChatNotFound{}
}

/*
CreateChatNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateChatNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create chat not found response has a 2xx status code
func (o *CreateChatNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create chat not found response has a 3xx status code
func (o *CreateChatNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create chat not found response has a 4xx status code
func (o *CreateChatNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create chat not found response has a 5xx status code
func (o *CreateChatNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create chat not found response a status code equal to that given
func (o *CreateChatNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create chat not found response
func (o *CreateChatNotFound) Code() int {
	return 404
}

func (o *CreateChatNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/chat][%d] createChatNotFound %s", 404, payload)
}

func (o *CreateChatNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/chat][%d] createChatNotFound %s", 404, payload)
}

func (o *CreateChatNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateChatNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateChatMethodNotAllowed creates a CreateChatMethodNotAllowed with default headers values
func NewCreateChatMethodNotAllowed() *CreateChatMethodNotAllowed {
	return &CreateChatMethodNotAllowed{}
}

/*
CreateChatMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type CreateChatMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create chat method not allowed response has a 2xx status code
func (o *CreateChatMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create chat method not allowed response has a 3xx status code
func (o *CreateChatMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create chat method not allowed response has a 4xx status code
func (o *CreateChatMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create chat method not allowed response has a 5xx status code
func (o *CreateChatMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this create chat method not allowed response a status code equal to that given
func (o *CreateChatMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the create chat method not allowed response
func (o *CreateChatMethodNotAllowed) Code() int {
	return 405
}

func (o *CreateChatMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/chat][%d] createChatMethodNotAllowed %s", 405, payload)
}

func (o *CreateChatMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/chat][%d] createChatMethodNotAllowed %s", 405, payload)
}

func (o *CreateChatMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateChatMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateChatInternalServerError creates a CreateChatInternalServerError with default headers values
func NewCreateChatInternalServerError() *CreateChatInternalServerError {
	return &CreateChatInternalServerError{}
}

/*
CreateChatInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateChatInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this create chat internal server error response has a 2xx status code
func (o *CreateChatInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create chat internal server error response has a 3xx status code
func (o *CreateChatInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create chat internal server error response has a 4xx status code
func (o *CreateChatInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create chat internal server error response has a 5xx status code
func (o *CreateChatInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create chat internal server error response a status code equal to that given
func (o *CreateChatInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create chat internal server error response
func (o *CreateChatInternalServerError) Code() int {
	return 500
}

func (o *CreateChatInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/chat][%d] createChatInternalServerError %s", 500, payload)
}

func (o *CreateChatInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/clusters/{clusterId}/chat][%d] createChatInternalServerError %s", 500, payload)
}

func (o *CreateChatInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *CreateChatInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
