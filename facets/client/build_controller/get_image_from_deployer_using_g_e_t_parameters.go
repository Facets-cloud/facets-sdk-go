// Code generated by go-swagger; DO NOT EDIT.

package build_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetImageFromDeployerUsingGETParams creates a new GetImageFromDeployerUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetImageFromDeployerUsingGETParams() *GetImageFromDeployerUsingGETParams {
	return &GetImageFromDeployerUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetImageFromDeployerUsingGETParamsWithTimeout creates a new GetImageFromDeployerUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetImageFromDeployerUsingGETParamsWithTimeout(timeout time.Duration) *GetImageFromDeployerUsingGETParams {
	return &GetImageFromDeployerUsingGETParams{
		timeout: timeout,
	}
}

// NewGetImageFromDeployerUsingGETParamsWithContext creates a new GetImageFromDeployerUsingGETParams object
// with the ability to set a context for a request.
func NewGetImageFromDeployerUsingGETParamsWithContext(ctx context.Context) *GetImageFromDeployerUsingGETParams {
	return &GetImageFromDeployerUsingGETParams{
		Context: ctx,
	}
}

// NewGetImageFromDeployerUsingGETParamsWithHTTPClient creates a new GetImageFromDeployerUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetImageFromDeployerUsingGETParamsWithHTTPClient(client *http.Client) *GetImageFromDeployerUsingGETParams {
	return &GetImageFromDeployerUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetImageFromDeployerUsingGETParams contains all the parameters to send to the API endpoint

	for the get image from deployer using g e t operation.

	Typically these are written to a http.Request.
*/
type GetImageFromDeployerUsingGETParams struct {

	/* ApplicationID.

	   applicationId
	*/
	ApplicationID string

	/* ReleaseType.

	   releaseType

	   Default: "RELEASE"
	*/
	ReleaseType *string

	/* Strategy.

	   strategy
	*/
	Strategy string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get image from deployer using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetImageFromDeployerUsingGETParams) WithDefaults() *GetImageFromDeployerUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get image from deployer using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetImageFromDeployerUsingGETParams) SetDefaults() {
	var (
		releaseTypeDefault = string("RELEASE")
	)

	val := GetImageFromDeployerUsingGETParams{
		ReleaseType: &releaseTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get image from deployer using g e t params
func (o *GetImageFromDeployerUsingGETParams) WithTimeout(timeout time.Duration) *GetImageFromDeployerUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get image from deployer using g e t params
func (o *GetImageFromDeployerUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get image from deployer using g e t params
func (o *GetImageFromDeployerUsingGETParams) WithContext(ctx context.Context) *GetImageFromDeployerUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get image from deployer using g e t params
func (o *GetImageFromDeployerUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get image from deployer using g e t params
func (o *GetImageFromDeployerUsingGETParams) WithHTTPClient(client *http.Client) *GetImageFromDeployerUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get image from deployer using g e t params
func (o *GetImageFromDeployerUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationID adds the applicationID to the get image from deployer using g e t params
func (o *GetImageFromDeployerUsingGETParams) WithApplicationID(applicationID string) *GetImageFromDeployerUsingGETParams {
	o.SetApplicationID(applicationID)
	return o
}

// SetApplicationID adds the applicationId to the get image from deployer using g e t params
func (o *GetImageFromDeployerUsingGETParams) SetApplicationID(applicationID string) {
	o.ApplicationID = applicationID
}

// WithReleaseType adds the releaseType to the get image from deployer using g e t params
func (o *GetImageFromDeployerUsingGETParams) WithReleaseType(releaseType *string) *GetImageFromDeployerUsingGETParams {
	o.SetReleaseType(releaseType)
	return o
}

// SetReleaseType adds the releaseType to the get image from deployer using g e t params
func (o *GetImageFromDeployerUsingGETParams) SetReleaseType(releaseType *string) {
	o.ReleaseType = releaseType
}

// WithStrategy adds the strategy to the get image from deployer using g e t params
func (o *GetImageFromDeployerUsingGETParams) WithStrategy(strategy string) *GetImageFromDeployerUsingGETParams {
	o.SetStrategy(strategy)
	return o
}

// SetStrategy adds the strategy to the get image from deployer using g e t params
func (o *GetImageFromDeployerUsingGETParams) SetStrategy(strategy string) {
	o.Strategy = strategy
}

// WriteToRequest writes these params to a swagger request
func (o *GetImageFromDeployerUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param applicationId
	if err := r.SetPathParam("applicationId", o.ApplicationID); err != nil {
		return err
	}

	if o.ReleaseType != nil {

		// query param releaseType
		var qrReleaseType string

		if o.ReleaseType != nil {
			qrReleaseType = *o.ReleaseType
		}
		qReleaseType := qrReleaseType
		if qReleaseType != "" {

			if err := r.SetQueryParam("releaseType", qReleaseType); err != nil {
				return err
			}
		}
	}

	// query param strategy
	qrStrategy := o.Strategy
	qStrategy := qrStrategy
	if qStrategy != "" {

		if err := r.SetQueryParam("strategy", qStrategy); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
