// Code generated by go-swagger; DO NOT EDIT.

package ui_user_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateUserGroupUsingPUTReader is a Reader for the UpdateUserGroupUsingPUT structure.
type UpdateUserGroupUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserGroupUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUserGroupUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateUserGroupUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateUserGroupUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateUserGroupUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUserGroupUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/user-groups/] updateUserGroupUsingPUT", response, response.Code())
	}
}

// NewUpdateUserGroupUsingPUTOK creates a UpdateUserGroupUsingPUTOK with default headers values
func NewUpdateUserGroupUsingPUTOK() *UpdateUserGroupUsingPUTOK {
	return &UpdateUserGroupUsingPUTOK{}
}

/*
UpdateUserGroupUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateUserGroupUsingPUTOK struct {
	Payload *models.UserGroup
}

// IsSuccess returns true when this update user group using p u t o k response has a 2xx status code
func (o *UpdateUserGroupUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update user group using p u t o k response has a 3xx status code
func (o *UpdateUserGroupUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user group using p u t o k response has a 4xx status code
func (o *UpdateUserGroupUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user group using p u t o k response has a 5xx status code
func (o *UpdateUserGroupUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update user group using p u t o k response a status code equal to that given
func (o *UpdateUserGroupUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update user group using p u t o k response
func (o *UpdateUserGroupUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateUserGroupUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupUsingPUTOK %s", 200, payload)
}

func (o *UpdateUserGroupUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupUsingPUTOK %s", 200, payload)
}

func (o *UpdateUserGroupUsingPUTOK) GetPayload() *models.UserGroup {
	return o.Payload
}

func (o *UpdateUserGroupUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserGroupUsingPUTCreated creates a UpdateUserGroupUsingPUTCreated with default headers values
func NewUpdateUserGroupUsingPUTCreated() *UpdateUserGroupUsingPUTCreated {
	return &UpdateUserGroupUsingPUTCreated{}
}

/*
UpdateUserGroupUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateUserGroupUsingPUTCreated struct {
}

// IsSuccess returns true when this update user group using p u t created response has a 2xx status code
func (o *UpdateUserGroupUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update user group using p u t created response has a 3xx status code
func (o *UpdateUserGroupUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user group using p u t created response has a 4xx status code
func (o *UpdateUserGroupUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user group using p u t created response has a 5xx status code
func (o *UpdateUserGroupUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update user group using p u t created response a status code equal to that given
func (o *UpdateUserGroupUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update user group using p u t created response
func (o *UpdateUserGroupUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateUserGroupUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupUsingPUTCreated", 201)
}

func (o *UpdateUserGroupUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupUsingPUTCreated", 201)
}

func (o *UpdateUserGroupUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserGroupUsingPUTUnauthorized creates a UpdateUserGroupUsingPUTUnauthorized with default headers values
func NewUpdateUserGroupUsingPUTUnauthorized() *UpdateUserGroupUsingPUTUnauthorized {
	return &UpdateUserGroupUsingPUTUnauthorized{}
}

/*
UpdateUserGroupUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateUserGroupUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update user group using p u t unauthorized response has a 2xx status code
func (o *UpdateUserGroupUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user group using p u t unauthorized response has a 3xx status code
func (o *UpdateUserGroupUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user group using p u t unauthorized response has a 4xx status code
func (o *UpdateUserGroupUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user group using p u t unauthorized response has a 5xx status code
func (o *UpdateUserGroupUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update user group using p u t unauthorized response a status code equal to that given
func (o *UpdateUserGroupUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update user group using p u t unauthorized response
func (o *UpdateUserGroupUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateUserGroupUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupUsingPUTUnauthorized", 401)
}

func (o *UpdateUserGroupUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupUsingPUTUnauthorized", 401)
}

func (o *UpdateUserGroupUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserGroupUsingPUTForbidden creates a UpdateUserGroupUsingPUTForbidden with default headers values
func NewUpdateUserGroupUsingPUTForbidden() *UpdateUserGroupUsingPUTForbidden {
	return &UpdateUserGroupUsingPUTForbidden{}
}

/*
UpdateUserGroupUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateUserGroupUsingPUTForbidden struct {
}

// IsSuccess returns true when this update user group using p u t forbidden response has a 2xx status code
func (o *UpdateUserGroupUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user group using p u t forbidden response has a 3xx status code
func (o *UpdateUserGroupUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user group using p u t forbidden response has a 4xx status code
func (o *UpdateUserGroupUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user group using p u t forbidden response has a 5xx status code
func (o *UpdateUserGroupUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update user group using p u t forbidden response a status code equal to that given
func (o *UpdateUserGroupUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update user group using p u t forbidden response
func (o *UpdateUserGroupUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateUserGroupUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupUsingPUTForbidden", 403)
}

func (o *UpdateUserGroupUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupUsingPUTForbidden", 403)
}

func (o *UpdateUserGroupUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserGroupUsingPUTNotFound creates a UpdateUserGroupUsingPUTNotFound with default headers values
func NewUpdateUserGroupUsingPUTNotFound() *UpdateUserGroupUsingPUTNotFound {
	return &UpdateUserGroupUsingPUTNotFound{}
}

/*
UpdateUserGroupUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateUserGroupUsingPUTNotFound struct {
}

// IsSuccess returns true when this update user group using p u t not found response has a 2xx status code
func (o *UpdateUserGroupUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user group using p u t not found response has a 3xx status code
func (o *UpdateUserGroupUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user group using p u t not found response has a 4xx status code
func (o *UpdateUserGroupUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user group using p u t not found response has a 5xx status code
func (o *UpdateUserGroupUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update user group using p u t not found response a status code equal to that given
func (o *UpdateUserGroupUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update user group using p u t not found response
func (o *UpdateUserGroupUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateUserGroupUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupUsingPUTNotFound", 404)
}

func (o *UpdateUserGroupUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupUsingPUTNotFound", 404)
}

func (o *UpdateUserGroupUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
