// Code generated by go-swagger; DO NOT EDIT.

package ui_user_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// UpdateUserGroupReader is a Reader for the UpdateUserGroup structure.
type UpdateUserGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUserGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUserGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUserGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateUserGroupMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateUserGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cc-ui/v1/user-groups/] updateUserGroup", response, response.Code())
	}
}

// NewUpdateUserGroupOK creates a UpdateUserGroupOK with default headers values
func NewUpdateUserGroupOK() *UpdateUserGroupOK {
	return &UpdateUserGroupOK{}
}

/*
UpdateUserGroupOK describes a response with status code 200, with default header values.

OK
*/
type UpdateUserGroupOK struct {
	Payload *models.UserGroup
}

// IsSuccess returns true when this update user group o k response has a 2xx status code
func (o *UpdateUserGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update user group o k response has a 3xx status code
func (o *UpdateUserGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user group o k response has a 4xx status code
func (o *UpdateUserGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user group o k response has a 5xx status code
func (o *UpdateUserGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update user group o k response a status code equal to that given
func (o *UpdateUserGroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update user group o k response
func (o *UpdateUserGroupOK) Code() int {
	return 200
}

func (o *UpdateUserGroupOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupOK %s", 200, payload)
}

func (o *UpdateUserGroupOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupOK %s", 200, payload)
}

func (o *UpdateUserGroupOK) GetPayload() *models.UserGroup {
	return o.Payload
}

func (o *UpdateUserGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserGroupBadRequest creates a UpdateUserGroupBadRequest with default headers values
func NewUpdateUserGroupBadRequest() *UpdateUserGroupBadRequest {
	return &UpdateUserGroupBadRequest{}
}

/*
UpdateUserGroupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateUserGroupBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update user group bad request response has a 2xx status code
func (o *UpdateUserGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user group bad request response has a 3xx status code
func (o *UpdateUserGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user group bad request response has a 4xx status code
func (o *UpdateUserGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user group bad request response has a 5xx status code
func (o *UpdateUserGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update user group bad request response a status code equal to that given
func (o *UpdateUserGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update user group bad request response
func (o *UpdateUserGroupBadRequest) Code() int {
	return 400
}

func (o *UpdateUserGroupBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupBadRequest %s", 400, payload)
}

func (o *UpdateUserGroupBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupBadRequest %s", 400, payload)
}

func (o *UpdateUserGroupBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateUserGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserGroupNotFound creates a UpdateUserGroupNotFound with default headers values
func NewUpdateUserGroupNotFound() *UpdateUserGroupNotFound {
	return &UpdateUserGroupNotFound{}
}

/*
UpdateUserGroupNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateUserGroupNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update user group not found response has a 2xx status code
func (o *UpdateUserGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user group not found response has a 3xx status code
func (o *UpdateUserGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user group not found response has a 4xx status code
func (o *UpdateUserGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user group not found response has a 5xx status code
func (o *UpdateUserGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update user group not found response a status code equal to that given
func (o *UpdateUserGroupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update user group not found response
func (o *UpdateUserGroupNotFound) Code() int {
	return 404
}

func (o *UpdateUserGroupNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupNotFound %s", 404, payload)
}

func (o *UpdateUserGroupNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupNotFound %s", 404, payload)
}

func (o *UpdateUserGroupNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateUserGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserGroupMethodNotAllowed creates a UpdateUserGroupMethodNotAllowed with default headers values
func NewUpdateUserGroupMethodNotAllowed() *UpdateUserGroupMethodNotAllowed {
	return &UpdateUserGroupMethodNotAllowed{}
}

/*
UpdateUserGroupMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateUserGroupMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update user group method not allowed response has a 2xx status code
func (o *UpdateUserGroupMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user group method not allowed response has a 3xx status code
func (o *UpdateUserGroupMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user group method not allowed response has a 4xx status code
func (o *UpdateUserGroupMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user group method not allowed response has a 5xx status code
func (o *UpdateUserGroupMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update user group method not allowed response a status code equal to that given
func (o *UpdateUserGroupMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update user group method not allowed response
func (o *UpdateUserGroupMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateUserGroupMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupMethodNotAllowed %s", 405, payload)
}

func (o *UpdateUserGroupMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupMethodNotAllowed %s", 405, payload)
}

func (o *UpdateUserGroupMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateUserGroupMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserGroupInternalServerError creates a UpdateUserGroupInternalServerError with default headers values
func NewUpdateUserGroupInternalServerError() *UpdateUserGroupInternalServerError {
	return &UpdateUserGroupInternalServerError{}
}

/*
UpdateUserGroupInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateUserGroupInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this update user group internal server error response has a 2xx status code
func (o *UpdateUserGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user group internal server error response has a 3xx status code
func (o *UpdateUserGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user group internal server error response has a 4xx status code
func (o *UpdateUserGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user group internal server error response has a 5xx status code
func (o *UpdateUserGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update user group internal server error response a status code equal to that given
func (o *UpdateUserGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update user group internal server error response
func (o *UpdateUserGroupInternalServerError) Code() int {
	return 500
}

func (o *UpdateUserGroupInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupInternalServerError %s", 500, payload)
}

func (o *UpdateUserGroupInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /cc-ui/v1/user-groups/][%d] updateUserGroupInternalServerError %s", 500, payload)
}

func (o *UpdateUserGroupInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *UpdateUserGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
