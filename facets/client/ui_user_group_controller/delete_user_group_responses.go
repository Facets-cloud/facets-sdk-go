// Code generated by go-swagger; DO NOT EDIT.

package ui_user_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// DeleteUserGroupReader is a Reader for the DeleteUserGroup structure.
type DeleteUserGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteUserGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteUserGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteUserGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteUserGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteUserGroupMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteUserGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/user-groups/{groupId}] deleteUserGroup", response, response.Code())
	}
}

// NewDeleteUserGroupOK creates a DeleteUserGroupOK with default headers values
func NewDeleteUserGroupOK() *DeleteUserGroupOK {
	return &DeleteUserGroupOK{}
}

/*
DeleteUserGroupOK describes a response with status code 200, with default header values.

OK
*/
type DeleteUserGroupOK struct {
}

// IsSuccess returns true when this delete user group o k response has a 2xx status code
func (o *DeleteUserGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete user group o k response has a 3xx status code
func (o *DeleteUserGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user group o k response has a 4xx status code
func (o *DeleteUserGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete user group o k response has a 5xx status code
func (o *DeleteUserGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user group o k response a status code equal to that given
func (o *DeleteUserGroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete user group o k response
func (o *DeleteUserGroupOK) Code() int {
	return 200
}

func (o *DeleteUserGroupOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupOK", 200)
}

func (o *DeleteUserGroupOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupOK", 200)
}

func (o *DeleteUserGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteUserGroupBadRequest creates a DeleteUserGroupBadRequest with default headers values
func NewDeleteUserGroupBadRequest() *DeleteUserGroupBadRequest {
	return &DeleteUserGroupBadRequest{}
}

/*
DeleteUserGroupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteUserGroupBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete user group bad request response has a 2xx status code
func (o *DeleteUserGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user group bad request response has a 3xx status code
func (o *DeleteUserGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user group bad request response has a 4xx status code
func (o *DeleteUserGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user group bad request response has a 5xx status code
func (o *DeleteUserGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user group bad request response a status code equal to that given
func (o *DeleteUserGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete user group bad request response
func (o *DeleteUserGroupBadRequest) Code() int {
	return 400
}

func (o *DeleteUserGroupBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupBadRequest %s", 400, payload)
}

func (o *DeleteUserGroupBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupBadRequest %s", 400, payload)
}

func (o *DeleteUserGroupBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteUserGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUserGroupNotFound creates a DeleteUserGroupNotFound with default headers values
func NewDeleteUserGroupNotFound() *DeleteUserGroupNotFound {
	return &DeleteUserGroupNotFound{}
}

/*
DeleteUserGroupNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteUserGroupNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete user group not found response has a 2xx status code
func (o *DeleteUserGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user group not found response has a 3xx status code
func (o *DeleteUserGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user group not found response has a 4xx status code
func (o *DeleteUserGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user group not found response has a 5xx status code
func (o *DeleteUserGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user group not found response a status code equal to that given
func (o *DeleteUserGroupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete user group not found response
func (o *DeleteUserGroupNotFound) Code() int {
	return 404
}

func (o *DeleteUserGroupNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupNotFound %s", 404, payload)
}

func (o *DeleteUserGroupNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupNotFound %s", 404, payload)
}

func (o *DeleteUserGroupNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteUserGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUserGroupMethodNotAllowed creates a DeleteUserGroupMethodNotAllowed with default headers values
func NewDeleteUserGroupMethodNotAllowed() *DeleteUserGroupMethodNotAllowed {
	return &DeleteUserGroupMethodNotAllowed{}
}

/*
DeleteUserGroupMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type DeleteUserGroupMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete user group method not allowed response has a 2xx status code
func (o *DeleteUserGroupMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user group method not allowed response has a 3xx status code
func (o *DeleteUserGroupMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user group method not allowed response has a 4xx status code
func (o *DeleteUserGroupMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user group method not allowed response has a 5xx status code
func (o *DeleteUserGroupMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user group method not allowed response a status code equal to that given
func (o *DeleteUserGroupMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the delete user group method not allowed response
func (o *DeleteUserGroupMethodNotAllowed) Code() int {
	return 405
}

func (o *DeleteUserGroupMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupMethodNotAllowed %s", 405, payload)
}

func (o *DeleteUserGroupMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupMethodNotAllowed %s", 405, payload)
}

func (o *DeleteUserGroupMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteUserGroupMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUserGroupInternalServerError creates a DeleteUserGroupInternalServerError with default headers values
func NewDeleteUserGroupInternalServerError() *DeleteUserGroupInternalServerError {
	return &DeleteUserGroupInternalServerError{}
}

/*
DeleteUserGroupInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteUserGroupInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this delete user group internal server error response has a 2xx status code
func (o *DeleteUserGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user group internal server error response has a 3xx status code
func (o *DeleteUserGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user group internal server error response has a 4xx status code
func (o *DeleteUserGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete user group internal server error response has a 5xx status code
func (o *DeleteUserGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete user group internal server error response a status code equal to that given
func (o *DeleteUserGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete user group internal server error response
func (o *DeleteUserGroupInternalServerError) Code() int {
	return 500
}

func (o *DeleteUserGroupInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupInternalServerError %s", 500, payload)
}

func (o *DeleteUserGroupInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupInternalServerError %s", 500, payload)
}

func (o *DeleteUserGroupInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *DeleteUserGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
