// Code generated by go-swagger; DO NOT EDIT.

package ui_user_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetUserGroupUsingGETReader is a Reader for the GetUserGroupUsingGET structure.
type GetUserGroupUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserGroupUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserGroupUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetUserGroupUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserGroupUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserGroupUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/user-groups/{groupId}] getUserGroupUsingGET", response, response.Code())
	}
}

// NewGetUserGroupUsingGETOK creates a GetUserGroupUsingGETOK with default headers values
func NewGetUserGroupUsingGETOK() *GetUserGroupUsingGETOK {
	return &GetUserGroupUsingGETOK{}
}

/*
GetUserGroupUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetUserGroupUsingGETOK struct {
	Payload *models.UserGroup
}

// IsSuccess returns true when this get user group using g e t o k response has a 2xx status code
func (o *GetUserGroupUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get user group using g e t o k response has a 3xx status code
func (o *GetUserGroupUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user group using g e t o k response has a 4xx status code
func (o *GetUserGroupUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user group using g e t o k response has a 5xx status code
func (o *GetUserGroupUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get user group using g e t o k response a status code equal to that given
func (o *GetUserGroupUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get user group using g e t o k response
func (o *GetUserGroupUsingGETOK) Code() int {
	return 200
}

func (o *GetUserGroupUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupUsingGETOK %s", 200, payload)
}

func (o *GetUserGroupUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupUsingGETOK %s", 200, payload)
}

func (o *GetUserGroupUsingGETOK) GetPayload() *models.UserGroup {
	return o.Payload
}

func (o *GetUserGroupUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserGroupUsingGETUnauthorized creates a GetUserGroupUsingGETUnauthorized with default headers values
func NewGetUserGroupUsingGETUnauthorized() *GetUserGroupUsingGETUnauthorized {
	return &GetUserGroupUsingGETUnauthorized{}
}

/*
GetUserGroupUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetUserGroupUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get user group using g e t unauthorized response has a 2xx status code
func (o *GetUserGroupUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user group using g e t unauthorized response has a 3xx status code
func (o *GetUserGroupUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user group using g e t unauthorized response has a 4xx status code
func (o *GetUserGroupUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user group using g e t unauthorized response has a 5xx status code
func (o *GetUserGroupUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get user group using g e t unauthorized response a status code equal to that given
func (o *GetUserGroupUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get user group using g e t unauthorized response
func (o *GetUserGroupUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetUserGroupUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupUsingGETUnauthorized", 401)
}

func (o *GetUserGroupUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupUsingGETUnauthorized", 401)
}

func (o *GetUserGroupUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserGroupUsingGETForbidden creates a GetUserGroupUsingGETForbidden with default headers values
func NewGetUserGroupUsingGETForbidden() *GetUserGroupUsingGETForbidden {
	return &GetUserGroupUsingGETForbidden{}
}

/*
GetUserGroupUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetUserGroupUsingGETForbidden struct {
}

// IsSuccess returns true when this get user group using g e t forbidden response has a 2xx status code
func (o *GetUserGroupUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user group using g e t forbidden response has a 3xx status code
func (o *GetUserGroupUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user group using g e t forbidden response has a 4xx status code
func (o *GetUserGroupUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user group using g e t forbidden response has a 5xx status code
func (o *GetUserGroupUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get user group using g e t forbidden response a status code equal to that given
func (o *GetUserGroupUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get user group using g e t forbidden response
func (o *GetUserGroupUsingGETForbidden) Code() int {
	return 403
}

func (o *GetUserGroupUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupUsingGETForbidden", 403)
}

func (o *GetUserGroupUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupUsingGETForbidden", 403)
}

func (o *GetUserGroupUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserGroupUsingGETNotFound creates a GetUserGroupUsingGETNotFound with default headers values
func NewGetUserGroupUsingGETNotFound() *GetUserGroupUsingGETNotFound {
	return &GetUserGroupUsingGETNotFound{}
}

/*
GetUserGroupUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetUserGroupUsingGETNotFound struct {
}

// IsSuccess returns true when this get user group using g e t not found response has a 2xx status code
func (o *GetUserGroupUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user group using g e t not found response has a 3xx status code
func (o *GetUserGroupUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user group using g e t not found response has a 4xx status code
func (o *GetUserGroupUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user group using g e t not found response has a 5xx status code
func (o *GetUserGroupUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get user group using g e t not found response a status code equal to that given
func (o *GetUserGroupUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get user group using g e t not found response
func (o *GetUserGroupUsingGETNotFound) Code() int {
	return 404
}

func (o *GetUserGroupUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupUsingGETNotFound", 404)
}

func (o *GetUserGroupUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupUsingGETNotFound", 404)
}

func (o *GetUserGroupUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
