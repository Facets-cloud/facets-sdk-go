// Code generated by go-swagger; DO NOT EDIT.

package ui_user_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteUserGroupUsingDELETEReader is a Reader for the DeleteUserGroupUsingDELETE structure.
type DeleteUserGroupUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteUserGroupUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteUserGroupUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteUserGroupUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteUserGroupUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteUserGroupUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/user-groups/{groupId}] deleteUserGroupUsingDELETE", response, response.Code())
	}
}

// NewDeleteUserGroupUsingDELETEOK creates a DeleteUserGroupUsingDELETEOK with default headers values
func NewDeleteUserGroupUsingDELETEOK() *DeleteUserGroupUsingDELETEOK {
	return &DeleteUserGroupUsingDELETEOK{}
}

/*
DeleteUserGroupUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteUserGroupUsingDELETEOK struct {
}

// IsSuccess returns true when this delete user group using d e l e t e o k response has a 2xx status code
func (o *DeleteUserGroupUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete user group using d e l e t e o k response has a 3xx status code
func (o *DeleteUserGroupUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user group using d e l e t e o k response has a 4xx status code
func (o *DeleteUserGroupUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete user group using d e l e t e o k response has a 5xx status code
func (o *DeleteUserGroupUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user group using d e l e t e o k response a status code equal to that given
func (o *DeleteUserGroupUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete user group using d e l e t e o k response
func (o *DeleteUserGroupUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteUserGroupUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupUsingDELETEOK", 200)
}

func (o *DeleteUserGroupUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupUsingDELETEOK", 200)
}

func (o *DeleteUserGroupUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteUserGroupUsingDELETENoContent creates a DeleteUserGroupUsingDELETENoContent with default headers values
func NewDeleteUserGroupUsingDELETENoContent() *DeleteUserGroupUsingDELETENoContent {
	return &DeleteUserGroupUsingDELETENoContent{}
}

/*
DeleteUserGroupUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteUserGroupUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete user group using d e l e t e no content response has a 2xx status code
func (o *DeleteUserGroupUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete user group using d e l e t e no content response has a 3xx status code
func (o *DeleteUserGroupUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user group using d e l e t e no content response has a 4xx status code
func (o *DeleteUserGroupUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete user group using d e l e t e no content response has a 5xx status code
func (o *DeleteUserGroupUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user group using d e l e t e no content response a status code equal to that given
func (o *DeleteUserGroupUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete user group using d e l e t e no content response
func (o *DeleteUserGroupUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteUserGroupUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupUsingDELETENoContent", 204)
}

func (o *DeleteUserGroupUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupUsingDELETENoContent", 204)
}

func (o *DeleteUserGroupUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteUserGroupUsingDELETEUnauthorized creates a DeleteUserGroupUsingDELETEUnauthorized with default headers values
func NewDeleteUserGroupUsingDELETEUnauthorized() *DeleteUserGroupUsingDELETEUnauthorized {
	return &DeleteUserGroupUsingDELETEUnauthorized{}
}

/*
DeleteUserGroupUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteUserGroupUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete user group using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteUserGroupUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user group using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteUserGroupUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user group using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteUserGroupUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user group using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteUserGroupUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user group using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteUserGroupUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete user group using d e l e t e unauthorized response
func (o *DeleteUserGroupUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteUserGroupUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupUsingDELETEUnauthorized", 401)
}

func (o *DeleteUserGroupUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupUsingDELETEUnauthorized", 401)
}

func (o *DeleteUserGroupUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteUserGroupUsingDELETEForbidden creates a DeleteUserGroupUsingDELETEForbidden with default headers values
func NewDeleteUserGroupUsingDELETEForbidden() *DeleteUserGroupUsingDELETEForbidden {
	return &DeleteUserGroupUsingDELETEForbidden{}
}

/*
DeleteUserGroupUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteUserGroupUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete user group using d e l e t e forbidden response has a 2xx status code
func (o *DeleteUserGroupUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user group using d e l e t e forbidden response has a 3xx status code
func (o *DeleteUserGroupUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user group using d e l e t e forbidden response has a 4xx status code
func (o *DeleteUserGroupUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user group using d e l e t e forbidden response has a 5xx status code
func (o *DeleteUserGroupUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user group using d e l e t e forbidden response a status code equal to that given
func (o *DeleteUserGroupUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete user group using d e l e t e forbidden response
func (o *DeleteUserGroupUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteUserGroupUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupUsingDELETEForbidden", 403)
}

func (o *DeleteUserGroupUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/user-groups/{groupId}][%d] deleteUserGroupUsingDELETEForbidden", 403)
}

func (o *DeleteUserGroupUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
