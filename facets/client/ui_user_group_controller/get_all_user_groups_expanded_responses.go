// Code generated by go-swagger; DO NOT EDIT.

package ui_user_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllUserGroupsExpandedReader is a Reader for the GetAllUserGroupsExpanded structure.
type GetAllUserGroupsExpandedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllUserGroupsExpandedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllUserGroupsExpandedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllUserGroupsExpandedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllUserGroupsExpandedNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAllUserGroupsExpandedMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllUserGroupsExpandedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/user-groups/list/groups-expanded] getAllUserGroupsExpanded", response, response.Code())
	}
}

// NewGetAllUserGroupsExpandedOK creates a GetAllUserGroupsExpandedOK with default headers values
func NewGetAllUserGroupsExpandedOK() *GetAllUserGroupsExpandedOK {
	return &GetAllUserGroupsExpandedOK{}
}

/*
GetAllUserGroupsExpandedOK describes a response with status code 200, with default header values.

OK
*/
type GetAllUserGroupsExpandedOK struct {
	Payload []*models.ExpandedUserGroup
}

// IsSuccess returns true when this get all user groups expanded o k response has a 2xx status code
func (o *GetAllUserGroupsExpandedOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all user groups expanded o k response has a 3xx status code
func (o *GetAllUserGroupsExpandedOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all user groups expanded o k response has a 4xx status code
func (o *GetAllUserGroupsExpandedOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all user groups expanded o k response has a 5xx status code
func (o *GetAllUserGroupsExpandedOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all user groups expanded o k response a status code equal to that given
func (o *GetAllUserGroupsExpandedOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all user groups expanded o k response
func (o *GetAllUserGroupsExpandedOK) Code() int {
	return 200
}

func (o *GetAllUserGroupsExpandedOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/list/groups-expanded][%d] getAllUserGroupsExpandedOK %s", 200, payload)
}

func (o *GetAllUserGroupsExpandedOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/list/groups-expanded][%d] getAllUserGroupsExpandedOK %s", 200, payload)
}

func (o *GetAllUserGroupsExpandedOK) GetPayload() []*models.ExpandedUserGroup {
	return o.Payload
}

func (o *GetAllUserGroupsExpandedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllUserGroupsExpandedBadRequest creates a GetAllUserGroupsExpandedBadRequest with default headers values
func NewGetAllUserGroupsExpandedBadRequest() *GetAllUserGroupsExpandedBadRequest {
	return &GetAllUserGroupsExpandedBadRequest{}
}

/*
GetAllUserGroupsExpandedBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAllUserGroupsExpandedBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all user groups expanded bad request response has a 2xx status code
func (o *GetAllUserGroupsExpandedBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all user groups expanded bad request response has a 3xx status code
func (o *GetAllUserGroupsExpandedBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all user groups expanded bad request response has a 4xx status code
func (o *GetAllUserGroupsExpandedBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all user groups expanded bad request response has a 5xx status code
func (o *GetAllUserGroupsExpandedBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all user groups expanded bad request response a status code equal to that given
func (o *GetAllUserGroupsExpandedBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all user groups expanded bad request response
func (o *GetAllUserGroupsExpandedBadRequest) Code() int {
	return 400
}

func (o *GetAllUserGroupsExpandedBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/list/groups-expanded][%d] getAllUserGroupsExpandedBadRequest %s", 400, payload)
}

func (o *GetAllUserGroupsExpandedBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/list/groups-expanded][%d] getAllUserGroupsExpandedBadRequest %s", 400, payload)
}

func (o *GetAllUserGroupsExpandedBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllUserGroupsExpandedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllUserGroupsExpandedNotFound creates a GetAllUserGroupsExpandedNotFound with default headers values
func NewGetAllUserGroupsExpandedNotFound() *GetAllUserGroupsExpandedNotFound {
	return &GetAllUserGroupsExpandedNotFound{}
}

/*
GetAllUserGroupsExpandedNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllUserGroupsExpandedNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all user groups expanded not found response has a 2xx status code
func (o *GetAllUserGroupsExpandedNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all user groups expanded not found response has a 3xx status code
func (o *GetAllUserGroupsExpandedNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all user groups expanded not found response has a 4xx status code
func (o *GetAllUserGroupsExpandedNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all user groups expanded not found response has a 5xx status code
func (o *GetAllUserGroupsExpandedNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all user groups expanded not found response a status code equal to that given
func (o *GetAllUserGroupsExpandedNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all user groups expanded not found response
func (o *GetAllUserGroupsExpandedNotFound) Code() int {
	return 404
}

func (o *GetAllUserGroupsExpandedNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/list/groups-expanded][%d] getAllUserGroupsExpandedNotFound %s", 404, payload)
}

func (o *GetAllUserGroupsExpandedNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/list/groups-expanded][%d] getAllUserGroupsExpandedNotFound %s", 404, payload)
}

func (o *GetAllUserGroupsExpandedNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllUserGroupsExpandedNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllUserGroupsExpandedMethodNotAllowed creates a GetAllUserGroupsExpandedMethodNotAllowed with default headers values
func NewGetAllUserGroupsExpandedMethodNotAllowed() *GetAllUserGroupsExpandedMethodNotAllowed {
	return &GetAllUserGroupsExpandedMethodNotAllowed{}
}

/*
GetAllUserGroupsExpandedMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAllUserGroupsExpandedMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all user groups expanded method not allowed response has a 2xx status code
func (o *GetAllUserGroupsExpandedMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all user groups expanded method not allowed response has a 3xx status code
func (o *GetAllUserGroupsExpandedMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all user groups expanded method not allowed response has a 4xx status code
func (o *GetAllUserGroupsExpandedMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all user groups expanded method not allowed response has a 5xx status code
func (o *GetAllUserGroupsExpandedMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get all user groups expanded method not allowed response a status code equal to that given
func (o *GetAllUserGroupsExpandedMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get all user groups expanded method not allowed response
func (o *GetAllUserGroupsExpandedMethodNotAllowed) Code() int {
	return 405
}

func (o *GetAllUserGroupsExpandedMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/list/groups-expanded][%d] getAllUserGroupsExpandedMethodNotAllowed %s", 405, payload)
}

func (o *GetAllUserGroupsExpandedMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/list/groups-expanded][%d] getAllUserGroupsExpandedMethodNotAllowed %s", 405, payload)
}

func (o *GetAllUserGroupsExpandedMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllUserGroupsExpandedMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllUserGroupsExpandedInternalServerError creates a GetAllUserGroupsExpandedInternalServerError with default headers values
func NewGetAllUserGroupsExpandedInternalServerError() *GetAllUserGroupsExpandedInternalServerError {
	return &GetAllUserGroupsExpandedInternalServerError{}
}

/*
GetAllUserGroupsExpandedInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAllUserGroupsExpandedInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all user groups expanded internal server error response has a 2xx status code
func (o *GetAllUserGroupsExpandedInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all user groups expanded internal server error response has a 3xx status code
func (o *GetAllUserGroupsExpandedInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all user groups expanded internal server error response has a 4xx status code
func (o *GetAllUserGroupsExpandedInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all user groups expanded internal server error response has a 5xx status code
func (o *GetAllUserGroupsExpandedInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all user groups expanded internal server error response a status code equal to that given
func (o *GetAllUserGroupsExpandedInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all user groups expanded internal server error response
func (o *GetAllUserGroupsExpandedInternalServerError) Code() int {
	return 500
}

func (o *GetAllUserGroupsExpandedInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/list/groups-expanded][%d] getAllUserGroupsExpandedInternalServerError %s", 500, payload)
}

func (o *GetAllUserGroupsExpandedInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/list/groups-expanded][%d] getAllUserGroupsExpandedInternalServerError %s", 500, payload)
}

func (o *GetAllUserGroupsExpandedInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllUserGroupsExpandedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
