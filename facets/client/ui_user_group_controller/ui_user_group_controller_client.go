// Code generated by go-swagger; DO NOT EDIT.

package ui_user_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ui user group controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ui user group controller API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ui user group controller API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ui user group controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUserGroupUsingPOST(params *CreateUserGroupUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserGroupUsingPOSTOK, *CreateUserGroupUsingPOSTCreated, error)

	DeleteUserGroupUsingDELETE(params *DeleteUserGroupUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserGroupUsingDELETEOK, *DeleteUserGroupUsingDELETENoContent, error)

	GetAllGroupUsingGET(params *GetAllGroupUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllGroupUsingGETOK, error)

	GetAllUserGroupsExpandedUsingGET(params *GetAllUserGroupsExpandedUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUserGroupsExpandedUsingGETOK, error)

	GetUserGroupExpandedUsingGET(params *GetUserGroupExpandedUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserGroupExpandedUsingGETOK, error)

	GetUserGroupUsingGET(params *GetUserGroupUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserGroupUsingGETOK, error)

	UpdateUserGroupUsingPUT(params *UpdateUserGroupUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserGroupUsingPUTOK, *UpdateUserGroupUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateUserGroupUsingPOST creates user group
*/
func (a *Client) CreateUserGroupUsingPOST(params *CreateUserGroupUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserGroupUsingPOSTOK, *CreateUserGroupUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserGroupUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUserGroupUsingPOST",
		Method:             "POST",
		PathPattern:        "/cc-ui/v1/user-groups/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserGroupUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateUserGroupUsingPOSTOK:
		return value, nil, nil
	case *CreateUserGroupUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_user_group_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUserGroupUsingDELETE deletes user group
*/
func (a *Client) DeleteUserGroupUsingDELETE(params *DeleteUserGroupUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserGroupUsingDELETEOK, *DeleteUserGroupUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserGroupUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserGroupUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cc-ui/v1/user-groups/{groupId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserGroupUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteUserGroupUsingDELETEOK:
		return value, nil, nil
	case *DeleteUserGroupUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_user_group_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllGroupUsingGET gets all group
*/
func (a *Client) GetAllGroupUsingGET(params *GetAllGroupUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllGroupUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllGroupUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllGroupUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/user-groups/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllGroupUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllGroupUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllGroupUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllUserGroupsExpandedUsingGET gets all user groups expanded
*/
func (a *Client) GetAllUserGroupsExpandedUsingGET(params *GetAllUserGroupsExpandedUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUserGroupsExpandedUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUserGroupsExpandedUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUserGroupsExpandedUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/user-groups/list/groups-expanded",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllUserGroupsExpandedUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUserGroupsExpandedUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUserGroupsExpandedUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserGroupExpandedUsingGET gets user group expanded
*/
func (a *Client) GetUserGroupExpandedUsingGET(params *GetUserGroupExpandedUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserGroupExpandedUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserGroupExpandedUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserGroupExpandedUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/user-groups/{groupId}/group-expanded",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserGroupExpandedUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserGroupExpandedUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserGroupExpandedUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserGroupUsingGET gets user group
*/
func (a *Client) GetUserGroupUsingGET(params *GetUserGroupUsingGETParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserGroupUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserGroupUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserGroupUsingGET",
		Method:             "GET",
		PathPattern:        "/cc-ui/v1/user-groups/{groupId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserGroupUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserGroupUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserGroupUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUserGroupUsingPUT updates user group
*/
func (a *Client) UpdateUserGroupUsingPUT(params *UpdateUserGroupUsingPUTParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserGroupUsingPUTOK, *UpdateUserGroupUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserGroupUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUserGroupUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cc-ui/v1/user-groups/",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserGroupUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateUserGroupUsingPUTOK:
		return value, nil, nil
	case *UpdateUserGroupUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ui_user_group_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
