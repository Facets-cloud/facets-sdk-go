// Code generated by go-swagger; DO NOT EDIT.

package ui_user_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetUserGroupExpandedUsingGETReader is a Reader for the GetUserGroupExpandedUsingGET structure.
type GetUserGroupExpandedUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserGroupExpandedUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserGroupExpandedUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetUserGroupExpandedUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserGroupExpandedUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserGroupExpandedUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/user-groups/{groupId}/group-expanded] getUserGroupExpandedUsingGET", response, response.Code())
	}
}

// NewGetUserGroupExpandedUsingGETOK creates a GetUserGroupExpandedUsingGETOK with default headers values
func NewGetUserGroupExpandedUsingGETOK() *GetUserGroupExpandedUsingGETOK {
	return &GetUserGroupExpandedUsingGETOK{}
}

/*
GetUserGroupExpandedUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetUserGroupExpandedUsingGETOK struct {
	Payload *models.ExpandedUserGroup
}

// IsSuccess returns true when this get user group expanded using g e t o k response has a 2xx status code
func (o *GetUserGroupExpandedUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get user group expanded using g e t o k response has a 3xx status code
func (o *GetUserGroupExpandedUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user group expanded using g e t o k response has a 4xx status code
func (o *GetUserGroupExpandedUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user group expanded using g e t o k response has a 5xx status code
func (o *GetUserGroupExpandedUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get user group expanded using g e t o k response a status code equal to that given
func (o *GetUserGroupExpandedUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get user group expanded using g e t o k response
func (o *GetUserGroupExpandedUsingGETOK) Code() int {
	return 200
}

func (o *GetUserGroupExpandedUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}/group-expanded][%d] getUserGroupExpandedUsingGETOK %s", 200, payload)
}

func (o *GetUserGroupExpandedUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}/group-expanded][%d] getUserGroupExpandedUsingGETOK %s", 200, payload)
}

func (o *GetUserGroupExpandedUsingGETOK) GetPayload() *models.ExpandedUserGroup {
	return o.Payload
}

func (o *GetUserGroupExpandedUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExpandedUserGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserGroupExpandedUsingGETUnauthorized creates a GetUserGroupExpandedUsingGETUnauthorized with default headers values
func NewGetUserGroupExpandedUsingGETUnauthorized() *GetUserGroupExpandedUsingGETUnauthorized {
	return &GetUserGroupExpandedUsingGETUnauthorized{}
}

/*
GetUserGroupExpandedUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetUserGroupExpandedUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get user group expanded using g e t unauthorized response has a 2xx status code
func (o *GetUserGroupExpandedUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user group expanded using g e t unauthorized response has a 3xx status code
func (o *GetUserGroupExpandedUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user group expanded using g e t unauthorized response has a 4xx status code
func (o *GetUserGroupExpandedUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user group expanded using g e t unauthorized response has a 5xx status code
func (o *GetUserGroupExpandedUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get user group expanded using g e t unauthorized response a status code equal to that given
func (o *GetUserGroupExpandedUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get user group expanded using g e t unauthorized response
func (o *GetUserGroupExpandedUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetUserGroupExpandedUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}/group-expanded][%d] getUserGroupExpandedUsingGETUnauthorized", 401)
}

func (o *GetUserGroupExpandedUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}/group-expanded][%d] getUserGroupExpandedUsingGETUnauthorized", 401)
}

func (o *GetUserGroupExpandedUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserGroupExpandedUsingGETForbidden creates a GetUserGroupExpandedUsingGETForbidden with default headers values
func NewGetUserGroupExpandedUsingGETForbidden() *GetUserGroupExpandedUsingGETForbidden {
	return &GetUserGroupExpandedUsingGETForbidden{}
}

/*
GetUserGroupExpandedUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetUserGroupExpandedUsingGETForbidden struct {
}

// IsSuccess returns true when this get user group expanded using g e t forbidden response has a 2xx status code
func (o *GetUserGroupExpandedUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user group expanded using g e t forbidden response has a 3xx status code
func (o *GetUserGroupExpandedUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user group expanded using g e t forbidden response has a 4xx status code
func (o *GetUserGroupExpandedUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user group expanded using g e t forbidden response has a 5xx status code
func (o *GetUserGroupExpandedUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get user group expanded using g e t forbidden response a status code equal to that given
func (o *GetUserGroupExpandedUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get user group expanded using g e t forbidden response
func (o *GetUserGroupExpandedUsingGETForbidden) Code() int {
	return 403
}

func (o *GetUserGroupExpandedUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}/group-expanded][%d] getUserGroupExpandedUsingGETForbidden", 403)
}

func (o *GetUserGroupExpandedUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}/group-expanded][%d] getUserGroupExpandedUsingGETForbidden", 403)
}

func (o *GetUserGroupExpandedUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserGroupExpandedUsingGETNotFound creates a GetUserGroupExpandedUsingGETNotFound with default headers values
func NewGetUserGroupExpandedUsingGETNotFound() *GetUserGroupExpandedUsingGETNotFound {
	return &GetUserGroupExpandedUsingGETNotFound{}
}

/*
GetUserGroupExpandedUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetUserGroupExpandedUsingGETNotFound struct {
}

// IsSuccess returns true when this get user group expanded using g e t not found response has a 2xx status code
func (o *GetUserGroupExpandedUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user group expanded using g e t not found response has a 3xx status code
func (o *GetUserGroupExpandedUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user group expanded using g e t not found response has a 4xx status code
func (o *GetUserGroupExpandedUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user group expanded using g e t not found response has a 5xx status code
func (o *GetUserGroupExpandedUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get user group expanded using g e t not found response a status code equal to that given
func (o *GetUserGroupExpandedUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get user group expanded using g e t not found response
func (o *GetUserGroupExpandedUsingGETNotFound) Code() int {
	return 404
}

func (o *GetUserGroupExpandedUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}/group-expanded][%d] getUserGroupExpandedUsingGETNotFound", 404)
}

func (o *GetUserGroupExpandedUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}/group-expanded][%d] getUserGroupExpandedUsingGETNotFound", 404)
}

func (o *GetUserGroupExpandedUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
