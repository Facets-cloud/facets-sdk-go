// Code generated by go-swagger; DO NOT EDIT.

package ui_user_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetUserGroupReader is a Reader for the GetUserGroup structure.
type GetUserGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUserGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetUserGroupMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUserGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/user-groups/{groupId}] getUserGroup", response, response.Code())
	}
}

// NewGetUserGroupOK creates a GetUserGroupOK with default headers values
func NewGetUserGroupOK() *GetUserGroupOK {
	return &GetUserGroupOK{}
}

/*
GetUserGroupOK describes a response with status code 200, with default header values.

OK
*/
type GetUserGroupOK struct {
	Payload *models.UserGroup
}

// IsSuccess returns true when this get user group o k response has a 2xx status code
func (o *GetUserGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get user group o k response has a 3xx status code
func (o *GetUserGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user group o k response has a 4xx status code
func (o *GetUserGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user group o k response has a 5xx status code
func (o *GetUserGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get user group o k response a status code equal to that given
func (o *GetUserGroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get user group o k response
func (o *GetUserGroupOK) Code() int {
	return 200
}

func (o *GetUserGroupOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupOK %s", 200, payload)
}

func (o *GetUserGroupOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupOK %s", 200, payload)
}

func (o *GetUserGroupOK) GetPayload() *models.UserGroup {
	return o.Payload
}

func (o *GetUserGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserGroupBadRequest creates a GetUserGroupBadRequest with default headers values
func NewGetUserGroupBadRequest() *GetUserGroupBadRequest {
	return &GetUserGroupBadRequest{}
}

/*
GetUserGroupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetUserGroupBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get user group bad request response has a 2xx status code
func (o *GetUserGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user group bad request response has a 3xx status code
func (o *GetUserGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user group bad request response has a 4xx status code
func (o *GetUserGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user group bad request response has a 5xx status code
func (o *GetUserGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get user group bad request response a status code equal to that given
func (o *GetUserGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get user group bad request response
func (o *GetUserGroupBadRequest) Code() int {
	return 400
}

func (o *GetUserGroupBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupBadRequest %s", 400, payload)
}

func (o *GetUserGroupBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupBadRequest %s", 400, payload)
}

func (o *GetUserGroupBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetUserGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserGroupNotFound creates a GetUserGroupNotFound with default headers values
func NewGetUserGroupNotFound() *GetUserGroupNotFound {
	return &GetUserGroupNotFound{}
}

/*
GetUserGroupNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetUserGroupNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get user group not found response has a 2xx status code
func (o *GetUserGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user group not found response has a 3xx status code
func (o *GetUserGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user group not found response has a 4xx status code
func (o *GetUserGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user group not found response has a 5xx status code
func (o *GetUserGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get user group not found response a status code equal to that given
func (o *GetUserGroupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get user group not found response
func (o *GetUserGroupNotFound) Code() int {
	return 404
}

func (o *GetUserGroupNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupNotFound %s", 404, payload)
}

func (o *GetUserGroupNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupNotFound %s", 404, payload)
}

func (o *GetUserGroupNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetUserGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserGroupMethodNotAllowed creates a GetUserGroupMethodNotAllowed with default headers values
func NewGetUserGroupMethodNotAllowed() *GetUserGroupMethodNotAllowed {
	return &GetUserGroupMethodNotAllowed{}
}

/*
GetUserGroupMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetUserGroupMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get user group method not allowed response has a 2xx status code
func (o *GetUserGroupMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user group method not allowed response has a 3xx status code
func (o *GetUserGroupMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user group method not allowed response has a 4xx status code
func (o *GetUserGroupMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user group method not allowed response has a 5xx status code
func (o *GetUserGroupMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get user group method not allowed response a status code equal to that given
func (o *GetUserGroupMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get user group method not allowed response
func (o *GetUserGroupMethodNotAllowed) Code() int {
	return 405
}

func (o *GetUserGroupMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupMethodNotAllowed %s", 405, payload)
}

func (o *GetUserGroupMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupMethodNotAllowed %s", 405, payload)
}

func (o *GetUserGroupMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetUserGroupMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserGroupInternalServerError creates a GetUserGroupInternalServerError with default headers values
func NewGetUserGroupInternalServerError() *GetUserGroupInternalServerError {
	return &GetUserGroupInternalServerError{}
}

/*
GetUserGroupInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetUserGroupInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get user group internal server error response has a 2xx status code
func (o *GetUserGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user group internal server error response has a 3xx status code
func (o *GetUserGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user group internal server error response has a 4xx status code
func (o *GetUserGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user group internal server error response has a 5xx status code
func (o *GetUserGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get user group internal server error response a status code equal to that given
func (o *GetUserGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get user group internal server error response
func (o *GetUserGroupInternalServerError) Code() int {
	return 500
}

func (o *GetUserGroupInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupInternalServerError %s", 500, payload)
}

func (o *GetUserGroupInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/{groupId}][%d] getUserGroupInternalServerError %s", 500, payload)
}

func (o *GetUserGroupInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetUserGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
