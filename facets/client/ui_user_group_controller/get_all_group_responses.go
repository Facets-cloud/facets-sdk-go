// Code generated by go-swagger; DO NOT EDIT.

package ui_user_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// GetAllGroupReader is a Reader for the GetAllGroup structure.
type GetAllGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAllGroupMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cc-ui/v1/user-groups/] getAllGroup", response, response.Code())
	}
}

// NewGetAllGroupOK creates a GetAllGroupOK with default headers values
func NewGetAllGroupOK() *GetAllGroupOK {
	return &GetAllGroupOK{}
}

/*
GetAllGroupOK describes a response with status code 200, with default header values.

OK
*/
type GetAllGroupOK struct {
	Payload []*models.UserGroup
}

// IsSuccess returns true when this get all group o k response has a 2xx status code
func (o *GetAllGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all group o k response has a 3xx status code
func (o *GetAllGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all group o k response has a 4xx status code
func (o *GetAllGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all group o k response has a 5xx status code
func (o *GetAllGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all group o k response a status code equal to that given
func (o *GetAllGroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all group o k response
func (o *GetAllGroupOK) Code() int {
	return 200
}

func (o *GetAllGroupOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/][%d] getAllGroupOK %s", 200, payload)
}

func (o *GetAllGroupOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/][%d] getAllGroupOK %s", 200, payload)
}

func (o *GetAllGroupOK) GetPayload() []*models.UserGroup {
	return o.Payload
}

func (o *GetAllGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllGroupBadRequest creates a GetAllGroupBadRequest with default headers values
func NewGetAllGroupBadRequest() *GetAllGroupBadRequest {
	return &GetAllGroupBadRequest{}
}

/*
GetAllGroupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAllGroupBadRequest struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all group bad request response has a 2xx status code
func (o *GetAllGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all group bad request response has a 3xx status code
func (o *GetAllGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all group bad request response has a 4xx status code
func (o *GetAllGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all group bad request response has a 5xx status code
func (o *GetAllGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all group bad request response a status code equal to that given
func (o *GetAllGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all group bad request response
func (o *GetAllGroupBadRequest) Code() int {
	return 400
}

func (o *GetAllGroupBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/][%d] getAllGroupBadRequest %s", 400, payload)
}

func (o *GetAllGroupBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/][%d] getAllGroupBadRequest %s", 400, payload)
}

func (o *GetAllGroupBadRequest) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllGroupNotFound creates a GetAllGroupNotFound with default headers values
func NewGetAllGroupNotFound() *GetAllGroupNotFound {
	return &GetAllGroupNotFound{}
}

/*
GetAllGroupNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllGroupNotFound struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all group not found response has a 2xx status code
func (o *GetAllGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all group not found response has a 3xx status code
func (o *GetAllGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all group not found response has a 4xx status code
func (o *GetAllGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all group not found response has a 5xx status code
func (o *GetAllGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all group not found response a status code equal to that given
func (o *GetAllGroupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all group not found response
func (o *GetAllGroupNotFound) Code() int {
	return 404
}

func (o *GetAllGroupNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/][%d] getAllGroupNotFound %s", 404, payload)
}

func (o *GetAllGroupNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/][%d] getAllGroupNotFound %s", 404, payload)
}

func (o *GetAllGroupNotFound) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllGroupMethodNotAllowed creates a GetAllGroupMethodNotAllowed with default headers values
func NewGetAllGroupMethodNotAllowed() *GetAllGroupMethodNotAllowed {
	return &GetAllGroupMethodNotAllowed{}
}

/*
GetAllGroupMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAllGroupMethodNotAllowed struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all group method not allowed response has a 2xx status code
func (o *GetAllGroupMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all group method not allowed response has a 3xx status code
func (o *GetAllGroupMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all group method not allowed response has a 4xx status code
func (o *GetAllGroupMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all group method not allowed response has a 5xx status code
func (o *GetAllGroupMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get all group method not allowed response a status code equal to that given
func (o *GetAllGroupMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get all group method not allowed response
func (o *GetAllGroupMethodNotAllowed) Code() int {
	return 405
}

func (o *GetAllGroupMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/][%d] getAllGroupMethodNotAllowed %s", 405, payload)
}

func (o *GetAllGroupMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/][%d] getAllGroupMethodNotAllowed %s", 405, payload)
}

func (o *GetAllGroupMethodNotAllowed) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllGroupMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllGroupInternalServerError creates a GetAllGroupInternalServerError with default headers values
func NewGetAllGroupInternalServerError() *GetAllGroupInternalServerError {
	return &GetAllGroupInternalServerError{}
}

/*
GetAllGroupInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAllGroupInternalServerError struct {
	Payload *models.ErrorDetails
}

// IsSuccess returns true when this get all group internal server error response has a 2xx status code
func (o *GetAllGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all group internal server error response has a 3xx status code
func (o *GetAllGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all group internal server error response has a 4xx status code
func (o *GetAllGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all group internal server error response has a 5xx status code
func (o *GetAllGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all group internal server error response a status code equal to that given
func (o *GetAllGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all group internal server error response
func (o *GetAllGroupInternalServerError) Code() int {
	return 500
}

func (o *GetAllGroupInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/][%d] getAllGroupInternalServerError %s", 500, payload)
}

func (o *GetAllGroupInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cc-ui/v1/user-groups/][%d] getAllGroupInternalServerError %s", 500, payload)
}

func (o *GetAllGroupInternalServerError) GetPayload() *models.ErrorDetails {
	return o.Payload
}

func (o *GetAllGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
