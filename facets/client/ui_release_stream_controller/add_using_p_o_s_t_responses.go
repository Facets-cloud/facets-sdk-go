// Code generated by go-swagger; DO NOT EDIT.

package ui_release_stream_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Facets-cloud/facets-sdk-go/facets/models"
)

// AddUsingPOSTReader is a Reader for the AddUsingPOST structure.
type AddUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewAddUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cc-ui/v1/release-stream] addUsingPOST", response, response.Code())
	}
}

// NewAddUsingPOSTOK creates a AddUsingPOSTOK with default headers values
func NewAddUsingPOSTOK() *AddUsingPOSTOK {
	return &AddUsingPOSTOK{}
}

/*
AddUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type AddUsingPOSTOK struct {
	Payload *models.ReleaseStream
}

// IsSuccess returns true when this add using p o s t o k response has a 2xx status code
func (o *AddUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add using p o s t o k response has a 3xx status code
func (o *AddUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add using p o s t o k response has a 4xx status code
func (o *AddUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add using p o s t o k response has a 5xx status code
func (o *AddUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add using p o s t o k response a status code equal to that given
func (o *AddUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add using p o s t o k response
func (o *AddUsingPOSTOK) Code() int {
	return 200
}

func (o *AddUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] addUsingPOSTOK %s", 200, payload)
}

func (o *AddUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] addUsingPOSTOK %s", 200, payload)
}

func (o *AddUsingPOSTOK) GetPayload() *models.ReleaseStream {
	return o.Payload
}

func (o *AddUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReleaseStream)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUsingPOSTCreated creates a AddUsingPOSTCreated with default headers values
func NewAddUsingPOSTCreated() *AddUsingPOSTCreated {
	return &AddUsingPOSTCreated{}
}

/*
AddUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type AddUsingPOSTCreated struct {
}

// IsSuccess returns true when this add using p o s t created response has a 2xx status code
func (o *AddUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add using p o s t created response has a 3xx status code
func (o *AddUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add using p o s t created response has a 4xx status code
func (o *AddUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this add using p o s t created response has a 5xx status code
func (o *AddUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this add using p o s t created response a status code equal to that given
func (o *AddUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the add using p o s t created response
func (o *AddUsingPOSTCreated) Code() int {
	return 201
}

func (o *AddUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] addUsingPOSTCreated", 201)
}

func (o *AddUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] addUsingPOSTCreated", 201)
}

func (o *AddUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddUsingPOSTUnauthorized creates a AddUsingPOSTUnauthorized with default headers values
func NewAddUsingPOSTUnauthorized() *AddUsingPOSTUnauthorized {
	return &AddUsingPOSTUnauthorized{}
}

/*
AddUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AddUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this add using p o s t unauthorized response has a 2xx status code
func (o *AddUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add using p o s t unauthorized response has a 3xx status code
func (o *AddUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add using p o s t unauthorized response has a 4xx status code
func (o *AddUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add using p o s t unauthorized response has a 5xx status code
func (o *AddUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add using p o s t unauthorized response a status code equal to that given
func (o *AddUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the add using p o s t unauthorized response
func (o *AddUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *AddUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] addUsingPOSTUnauthorized", 401)
}

func (o *AddUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] addUsingPOSTUnauthorized", 401)
}

func (o *AddUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddUsingPOSTForbidden creates a AddUsingPOSTForbidden with default headers values
func NewAddUsingPOSTForbidden() *AddUsingPOSTForbidden {
	return &AddUsingPOSTForbidden{}
}

/*
AddUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddUsingPOSTForbidden struct {
}

// IsSuccess returns true when this add using p o s t forbidden response has a 2xx status code
func (o *AddUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add using p o s t forbidden response has a 3xx status code
func (o *AddUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add using p o s t forbidden response has a 4xx status code
func (o *AddUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add using p o s t forbidden response has a 5xx status code
func (o *AddUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add using p o s t forbidden response a status code equal to that given
func (o *AddUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add using p o s t forbidden response
func (o *AddUsingPOSTForbidden) Code() int {
	return 403
}

func (o *AddUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] addUsingPOSTForbidden", 403)
}

func (o *AddUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] addUsingPOSTForbidden", 403)
}

func (o *AddUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddUsingPOSTNotFound creates a AddUsingPOSTNotFound with default headers values
func NewAddUsingPOSTNotFound() *AddUsingPOSTNotFound {
	return &AddUsingPOSTNotFound{}
}

/*
AddUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AddUsingPOSTNotFound struct {
}

// IsSuccess returns true when this add using p o s t not found response has a 2xx status code
func (o *AddUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add using p o s t not found response has a 3xx status code
func (o *AddUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add using p o s t not found response has a 4xx status code
func (o *AddUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add using p o s t not found response has a 5xx status code
func (o *AddUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add using p o s t not found response a status code equal to that given
func (o *AddUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add using p o s t not found response
func (o *AddUsingPOSTNotFound) Code() int {
	return 404
}

func (o *AddUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] addUsingPOSTNotFound", 404)
}

func (o *AddUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /cc-ui/v1/release-stream][%d] addUsingPOSTNotFound", 404)
}

func (o *AddUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
