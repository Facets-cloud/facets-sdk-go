// Code generated by go-swagger; DO NOT EDIT.

package ui_release_stream_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteUsingDELETEReader is a Reader for the DeleteUsingDELETE structure.
type DeleteUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cc-ui/v1/release-stream/{name}] deleteUsingDELETE", response, response.Code())
	}
}

// NewDeleteUsingDELETEOK creates a DeleteUsingDELETEOK with default headers values
func NewDeleteUsingDELETEOK() *DeleteUsingDELETEOK {
	return &DeleteUsingDELETEOK{}
}

/*
DeleteUsingDELETEOK describes a response with status code 200, with default header values.

OK
*/
type DeleteUsingDELETEOK struct {
}

// IsSuccess returns true when this delete using d e l e t e o k response has a 2xx status code
func (o *DeleteUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete using d e l e t e o k response has a 3xx status code
func (o *DeleteUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete using d e l e t e o k response has a 4xx status code
func (o *DeleteUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete using d e l e t e o k response has a 5xx status code
func (o *DeleteUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete using d e l e t e o k response a status code equal to that given
func (o *DeleteUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete using d e l e t e o k response
func (o *DeleteUsingDELETEOK) Code() int {
	return 200
}

func (o *DeleteUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/release-stream/{name}][%d] deleteUsingDELETEOK", 200)
}

func (o *DeleteUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/release-stream/{name}][%d] deleteUsingDELETEOK", 200)
}

func (o *DeleteUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteUsingDELETENoContent creates a DeleteUsingDELETENoContent with default headers values
func NewDeleteUsingDELETENoContent() *DeleteUsingDELETENoContent {
	return &DeleteUsingDELETENoContent{}
}

/*
DeleteUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete using d e l e t e no content response has a 2xx status code
func (o *DeleteUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete using d e l e t e no content response has a 3xx status code
func (o *DeleteUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete using d e l e t e no content response has a 4xx status code
func (o *DeleteUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete using d e l e t e no content response has a 5xx status code
func (o *DeleteUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete using d e l e t e no content response a status code equal to that given
func (o *DeleteUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete using d e l e t e no content response
func (o *DeleteUsingDELETENoContent) Code() int {
	return 204
}

func (o *DeleteUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/release-stream/{name}][%d] deleteUsingDELETENoContent", 204)
}

func (o *DeleteUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/release-stream/{name}][%d] deleteUsingDELETENoContent", 204)
}

func (o *DeleteUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteUsingDELETEUnauthorized creates a DeleteUsingDELETEUnauthorized with default headers values
func NewDeleteUsingDELETEUnauthorized() *DeleteUsingDELETEUnauthorized {
	return &DeleteUsingDELETEUnauthorized{}
}

/*
DeleteUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete using d e l e t e unauthorized response
func (o *DeleteUsingDELETEUnauthorized) Code() int {
	return 401
}

func (o *DeleteUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/release-stream/{name}][%d] deleteUsingDELETEUnauthorized", 401)
}

func (o *DeleteUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/release-stream/{name}][%d] deleteUsingDELETEUnauthorized", 401)
}

func (o *DeleteUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteUsingDELETEForbidden creates a DeleteUsingDELETEForbidden with default headers values
func NewDeleteUsingDELETEForbidden() *DeleteUsingDELETEForbidden {
	return &DeleteUsingDELETEForbidden{}
}

/*
DeleteUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete using d e l e t e forbidden response has a 2xx status code
func (o *DeleteUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete using d e l e t e forbidden response has a 3xx status code
func (o *DeleteUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete using d e l e t e forbidden response has a 4xx status code
func (o *DeleteUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete using d e l e t e forbidden response has a 5xx status code
func (o *DeleteUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete using d e l e t e forbidden response a status code equal to that given
func (o *DeleteUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete using d e l e t e forbidden response
func (o *DeleteUsingDELETEForbidden) Code() int {
	return 403
}

func (o *DeleteUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/release-stream/{name}][%d] deleteUsingDELETEForbidden", 403)
}

func (o *DeleteUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /cc-ui/v1/release-stream/{name}][%d] deleteUsingDELETEForbidden", 403)
}

func (o *DeleteUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
